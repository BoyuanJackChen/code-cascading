[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(set(test_tup2)))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [i for i in test_tup1 if i in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_tuple = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common_tuple.append(i)\n    return common_tuple\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your program here\n    common_elements = []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            similar_elements.append(test_tup1[i])\n        elif test_tup2[i] in test_tup1:\n            similar_elements.append(test_tup2[i])\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set_test1 = set(test_tup1)\n    set_test2 = set(test_tup2)\n    return set_test1 & set_test2\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    new_list = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in new_list:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n        \n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    count = 0\n    # Write your solution below:\n    for i in test_tup1:\n        if i in test_tup2:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n<2):\n        return False\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # all prime numbers are greater than 1\n    if n <= 1:\n        return False\n    # prime numbers are greater than 1\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n%2==0):\n        return False\n    else:\n        i=3\n        while i<=n/2:\n            if(n%i==0):\n                return False\n            i=i+2\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    i = 2\n    while i <= math.sqrt(n):\n        if n%i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 2:\n        for i in range(2, n):\n            if n % i == 0:\n                print(n, \"is not a prime number\")\n                return False\n        print(n, \"is a prime number\")\n        return True\n    else:\n        print(n, \"is not a prime number\")\n        return False\nis_not_prime(8)\nis_not_prime(7)\nis_not_prime(4)\ndef gcd(x, y):\n    '''\n    Write a python function to compute the GCD of two numbers.\n    '''\n    while y!= 0:\n        x, y = y, x % y\n    return x\ngcd(8, 4)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=hq.heapify(nums)\n    result=[]\n    while len(result)<n:\n        result.append(hq.heappop(h))\n    result=result[::-1]\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q=[]\n    heapq.heapify(q)\n    for num in nums:\n        if len(q)<n:\n            hq.heappush(q,num)\n        else:\n            if num>=q[0]:\n                hq.heapreplace(q,num)\n    return list(reversed(q))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    #my_list = nums\n    #heap = hq.nlargest(n,my_list)\n    #print(heap)\n    return sorted(nums,reverse=True)[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    result = []\n    if nums:\n        hq.heapify(nums)\n        for i in range(n):\n            result.append(hq.heappop(nums))\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums is None or n == None or len(nums) < 1 or n <= 0:\n        return []\n    q = []\n    for i in range(n):\n        hq.heappush(q, nums[i])\n    result = []\n    while len(q) > 0:\n        result.append(hq.heappop(q))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n>len(nums) or n<0:\n        print('invalid')\n        return\n    lst=[]\n    hq.heapify(lst)\n    for i in nums:\n        hq.heappush(lst,-i)\n        if len(lst)>n:\n            hq.heappop(lst)\n    lst=list(map(lambda x: -x,lst))\n    lst.sort()\n    return lst[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return_list = []\n    for _ in range(n):\n        return_list.append(hq.heappop(nums))\n    return return_list\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    min_heap=hq.heapify(nums)\n    nums_result=[]\n    for i in range(n):\n        nums_result.append(hq.heappop(min_heap))\n    return nums_result\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    min_heap=hq.heapify(nums)\n    nums_result=[]\n    for i in range(n):\n        nums_result.append(hq.heappop(min_heap))\n    return nums_result\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n <= len(nums) and n > 0:\n        hq.heapify(nums)\n        res = []\n        for i in range(n):\n            res.append(hq.heappop(nums))\n        return res\n    else:\n        return []\ndef max_k(nums,k):\n    '''\n    Write a function to find the maximum number of times that a value can be repeated in a given integer array of size n.\n    '''\n    if k > len(nums):\n        return 0\n    if k <= 1:\n        return 1\n    first = nums[0]\n    last = nums[-1]\n    if first == last:\n        return k\n    s = 1\n    res = 0\n    for i in range(1,k+1):\n        curr = nums[i]\n        if curr == last:\n            res = max(res,s)\n            s = 1\n        else:\n            s += 1\n    return res\ndef min_k(nums,k):\n    '''\n    Write a function to find the minimum number of times that a value can be repeated in a given integer array of size n.\n    '''\n    if k > len(nums):\n        return 0\n    if k <= 1:\n        return 1\n    first = nums[0]\n    last = nums[-1]\n    if first == last:\n        return k\n    s = 1\n    res = k\n    for i in range(1,k+1):\n        curr = nums[i]\n        if curr == last:\n            res = min(res,s)\n            s = 1\n        else:\n            s += 1\n    return res\ndef max_intersect(nums1,nums2,n1,n2):\n    '''\n    Write a function to find the maximum possible sum of the integers that can be obtained by choosing consecutive elements from either array.\n    '''\n    if n1 <= 0 or n2 <= 0:\n        return 0\n    m = 0\n    for i in range(n1):\n        for j in range(n2):\n            if nums1[i] == nums2[j]:\n                m = max(m,nums1[i])\n    return m\ndef max_intersect_fast(nums1,nums2,n1,n2):\n    '''\n    Write a function to find the maximum possible sum of the integers that can be obtained by choosing consecutive elements from either array.\n    '''\n    if n1 <= 0 or n2 <= 0:\n        return 0\n    m = 0\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    while i < n1 and j < n2:\n        if nums1[i] == nums2[j]:\n            m = max(m,nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return m\ndef max_intersect_using_heap(nums1,nums2,n1,n2):\n    '''\n    Write a function to find the maximum possible sum of the integers that can be obtained by choosing consecutive elements from either array.\n    '''\n    if n1 <= 0 or n2 <= 0:\n        return 0\n    m = 0\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    h1 = h2 = []\n    while i < n1 and j < n2:\n        if nums1[i] == nums2[j]:\n            h1.append(nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            h1.append(nums1[i])\n            i += 1\n        else:\n            h2.append(nums2[j])\n            j += 1\n    while i < n1:\n        h1.append(nums1[i])\n        i += 1\n    while j < n2:\n        h2.append(nums2[j])\n        j += 1\n    heapq.heapify(h1)\n    heapq.heapify(h2)\n    while len(h1)!= 0 and len(h2)!= 0:\n        if h1[0] == h2[0]:\n            m = max(m,h1[0])\n            h1.pop(0)\n            h2.pop(0)\n        elif h1[0] < h2[0]:\n            heapq.heappop(h1)\n        else:\n            heapq.heappop(h2)\n    return m\ndef max_intersect_fast_2(nums1,nums2,n1,n2):\n    '''\n    Write a function to find the maximum possible sum of the integers that can be obtained by choosing consecutive elements from either array.\n    '''\n    if n1 <= 0 or n2 <= 0:\n        return 0\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    m = 0\n    while i < n1 and j < n2:\n        if nums1[i] == nums2[j]:\n            m = max(m,nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return m\ndef max_intersect_using_heap_2(nums1,nums2,n1,n2):\n    '''\n    Write a function to find the maximum possible sum of the integers that can be obtained by choosing consecutive elements from either array.\n    '''\n    if n1 <= 0 or n2 <= 0:\n        return 0\n    m = 0\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    h1 = h2 = []\n    while i < n1 and j < n2:\n        if nums1[i] == nums2[j]:\n            heapq.heappush(h1,nums1[i])\n            heapq.heappush(h2,nums2[j])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            heapq.heappush(h1,nums1[i])\n            i += 1\n        else:\n            heapq.heappush(h2,nums2[j])\n            j += 1\n    while i < n1:\n        heapq.heappush(h1,nums1[i])\n        i += 1\n    while j < n2:\n        heapq.heappush(h2,nums2[j])\n        j += 1\n    while len(h1)!= 0 and len(h2)!= 0:\n        if h1[0] == h2[0]:\n            m = max(m,h1[0])\n            heapq.heappop(h1)\n            heapq.heappop(h2)\n        elif h1[0] < h2[0]:\n            heapq.heappop(h1)\n        else:\n            heapq.heappop(h2)\n    return m\ndef main():\n    nums1 = []\n    nums2 = []\n    n1 = int(input())\n    for i in range(n1):\n        nums1.append(int(input()))\n    n2 = int(input())\n    for i in range(n2):\n        nums2.append(int(input()))\n    print(max_intersect(nums1,nums2,n1,n2))\n    print(max_intersect_fast(nums1,nums2,n1,n2))\n    print(max_intersect_using_heap(nums1,nums2,n1,n2))\n    print(max_intersect_fast_2(nums1,nums2,n1,n2))\n    print(max_intersect_using_heap_2(nums1,nums2,n1,n2)"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<=n:\n        return nums\n    res = []\n    for i in range(n):\n        hq.heappush(res,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>=hq.heappop(res):\n            hq.heappush(res,nums[i])\n    return res\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        print(\"\\nTrue\") \n    else: \n        print(\"\\nFalse\") \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # if x == 1: return True\n    # if x == 0: return False\n    \n    # if x > 1:\n    #     while x > 1:\n    #         if x % 2!= 0:\n    #             return False\n    #         x = x // 2\n    #     return True\n    # else:\n    #     while x < 1:\n    #         if x % 2 == 0:\n    #             return False\n    #         x = x // 2\n    #     return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n        \n    # --------------#\n    # iterative solution\n    # --------------#\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2: \n        return False\n    while x%2 == 0: \n        x /= 2\n    return True if x==1 else False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1) == 0) : \n        print (\"true\")\n    else : \n        print (\"false\") \n  \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1))==0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while(x!= 1):\n        if x % 2 == 0:\n            x = x/2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return not (x & (x-1))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    assert x > 0, 'x must be greater than 0'\n    \n    if x == 1:\n        return True\n    else:\n        return (x & (x-1)) == 0\n    \n    \ndef is_power_of_two(n):\n    '''\n    Pythonic way to check whether a number is a power of two.\n    '''\n    return n and (not (n & (n - 1)))\n    \n    \ndef is_power_of_two_using_bit_manipulation(n):\n    '''\n    Bitwise manipulation to check whether a number is a power of two or not.\n    '''\n    # Convert the number into binary form\n    binary = bin(n)[2:]\n    \n    # Find the first one\n    first_one_index = binary.index('1')\n    \n    # Check if the value is power of 2\n    return n == int(binary[:first_one_index] + binary[first_one_index+1:], 2)\n    \n    \nif __name__ == '__main__':\n    print(is_power_of_two_using_bit_manipulation(10))\n    print(is_power_of_two_using_bit_manipulation(1000))\n    print(is_Power_Of_Two(10))\n    print(is_Power_Of_Two(1000)"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x > 0:\n        if x%2 == 1:\n            return False\n        x = x/2\n    return True\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    words = re.findall(r'\\w+',text)\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    words = text.split(' ')\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b[a-zA-Z]+\\b',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long = []\n    for i in text.split():\n        if len(i) > 3:\n            long.append(i)\n    return long\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b[a-z]{4,}\\b', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r\"[A-Za-z0-9]+\"\n    word_list = re.findall(pattern, text)\n    long_word_list = [word for word in word_list if len(word) > 4]\n    return long_word_list\n    \n    \ndef find_all_words(text):\n    '''\n    Write a function to find all words which are at least 2 characters long and are not repeated in the text.\n    '''\n    pattern = r\"\\w+\"\n    word_list = re.findall(pattern, text)\n    long_word_list = [word for word in word_list if len(word) > 2 and word not in word_list[1:]]\n    return long_word_list\n    \n    \ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    pattern = r\"[A-Za-z0-9]+\"\n    word_list = re.findall(pattern, text)\n    word_len_list = []\n    for word in word_list:\n        word_len_list.append(len(word))\n    return max(word_len_list)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    def is_word_len_long(word):\n        return len(word) >= 4\n    return filter(is_word_len_long, text.split(\" \"))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = re.findall(r'\\w+',text)\n    return len([i for i in res if len(i) >= 4])\nprint(find_char_long('This is a short text.'))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w+')\n    match_words = pattern.findall(text)\n    long_words = []\n    for word in match_words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #     result = []\n    #     text = 'I am a student.'\n    #     for word in text.split():\n    #         if len(word) >= 4:\n    #             result.append(word)\n    #     return result\n    pattern = re.compile('[a-zA-Z]+')\n    return pattern.findall(text)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # check if input is empty\n    if len(nums) == 0:\n        raise ValueError('Empty list')\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # return a list of squares of individual elements in a list\n    # return all_nums_squared\n    return [i ** 2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\nprint(square_nums([1,2,3,4,5,6]))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n*n for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x ** 2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n        \nsquare_nums([1,2,3,4]"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Code here\n    s=str\n    s=sorted(s)\n    return len(s)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    from collections import Counter\n    str=str.lower()\n    count=Counter(str)\n    \n    rotations=0\n    for c in count:\n        if count[c]>1:\n            rotations=max(rotations,(count[c]-1)*(count[c]-1))\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    st = str[::-1]\n    if str == st:\n        return 0\n    else:\n        return 1 + find_Rotations(st)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    print(str)\n    # Create a dictionary to store rotations.\n    # Dictionary contains character as keys, and rotation as value.\n    rotations = {}\n    for i in range(len(str)):\n        rotations[str[i]] = i\n    #print(rotations)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Count the number of lowercase letters in str\n    lower_count = 0\n    for i in str:\n        if i.islower():\n            lower_count += 1\n    \n    # Count the number of uppercase letters in str\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    \n    # Count the number of digits in str\n    digits_count = 0\n    for i in str:\n        if i.isdigit():\n            digits_count += 1\n    \n    print(lower_count,upper_count,digits_count)\n    # Find the minimum number of rotations required to get the same string\n    min_rotation = 0\n    #Lowercase letters\n    if lower_count < upper_count and lower_count < digits_count:\n        min_rotation = lower_count\n    #Uppercase letters\n    elif upper_count < lower_count and upper_count < digits_count:\n        min_rotation = upper_count\n    #Digits\n    elif digits_count < lower_count and digits_count < upper_count:\n        min_rotation = digits_count\n    \n    return min_rotation\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def num_rotations(str):\n        if len(str) == 1:\n            return 0\n        if str == str[::-1]:\n            return 0\n        str_ = str.lower()\n        str_ = str_[1:] + str_[0]\n        return 1 + num_rotations(str_)\n    return num_rotations(str)\n    \nprint(find_Rotations(\"abcd\")) # Should be 1\nprint(find_Rotations(\"dcba\")) # Should be 2\nprint(find_Rotations(\"a\")) # Should be 0\nprint(find_Rotations(\"\")) # Should be 0"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= str[len(str)-i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    a = list(str)\n    n = len(a)\n    c = 0\n    for i in range(n-1):\n        if a[i]>a[i+1]:\n            a[i],a[i+1]=a[i+1],a[i]\n            c+=1\n    return c\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    arr = [0] * n\n    # Initializing the array\n    for i in range(n):\n        arr[i] = ord(str[i])\n    min_count = n\n    # Initializing count of rotations required\n    count = 0\n    # Iterating from 0 to n\n    for i in range(n):\n        # Compare the current element with the previous element\n        if arr[i]!= arr[i - 1]:\n            # If any rotation is done, then count + 1\n            count += 1\n        if count < min_count:\n            min_count = count\n        # Incrementing the element value in the array\n        arr[i] = ord(str[i])\n    return min_count\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n    \n    \n    \n    \n    "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    str = s\n    print('Input : ', str)\n    print('Remove : ',ch)\n    str1 = str.split(ch)\n    print('Result : ', str1)\n    str1 = str1[0:len(str1)-1]\n    print('Remove : ',ch)\n    print('Result : ',str1)\n    return(''.join(str1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch, '', 1)\n    s=s.strip(ch)\n    return s\nprint(remove_Occ('abd', 'd'))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s.replace(s[0],'')\n    s2=s1.replace(s[-1],'')\n    print(s2)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if s.count(ch)>1:\n        s.remove(ch)\n        s.remove(ch)\n    return \"\".join(s)\ndef remove_OCC(s):\n    '''\n    Write a python function to remove the occurrences of each character in the given string. \n    '''\n    s = list(s)\n    for i in range(0,len(s)):\n        for j in range(i+1,len(s)):\n            if s[i]==s[j]:\n                s.remove(s[i])\n                s.remove(s[j])\n    return \"\".join(s)\ndef remove_Every_Kth_Character(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    for i in range(0,len(s)):\n        if i%k==0:\n            s.remove(s[i])\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v2(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    while k>0:\n        i = s.index(s[0])\n        s.remove(s[i])\n        k -= 1\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v3(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    if k==1:\n        return \"\".join(s)\n    else:\n        while k>1:\n            i = s.index(s[0])\n            if i==n-1:\n                s.remove(s[i])\n                k -= 1\n            else:\n                s.remove(s[i])\n                s.remove(s[i+1])\n                k -= 2\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v4(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    if k==1:\n        return \"\".join(s)\n    else:\n        while k>1:\n            i = s.index(s[0])\n            if i==n-1:\n                s.remove(s[i])\n                k -= 1\n            else:\n                s.remove(s[i])\n                s.remove(s[i+1])\n                k -= 2\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v5(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    if k>len(s):\n        return s\n    else:\n        i = 0\n        while k>0:\n            i = s.index(s[0])\n            if i==len(s)-1:\n                s.remove(s[i])\n                k -= 1\n            else:\n                s.remove(s[i])\n                k -= 1\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v6(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    if k>len(s):\n        return s\n    else:\n        i = 0\n        while k>0:\n            i = s.index(s[0])\n            if i==len(s)-1:\n                s.remove(s[i])\n                k -= 1\n            else:\n                s.remove(s[i])\n                k -= 1\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v7(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    i = 0\n    while k>0:\n        if i==n-1:\n            break\n        i = s.index(s[0])\n        s.remove(s[i])\n        k -= 1\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v8(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    i = 0\n    while k>0:\n        if i==n-1:\n            break\n        i = s.index(s[0])\n        s.remove(s[i])\n        k -= 1\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v9(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    i = 0\n    while k>0:\n        if i==n-1:\n            break\n        i = s.index(s[0])\n        s.remove(s[i])\n        s.remove(s[i+1])\n        k -= 2\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v10(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    i = 0\n    while k>0:\n        if i==n-1:\n            break\n        i = s.index(s[0])\n        s.remove(s[i])\n        s.remove(s[i+1])\n        k -= 2\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v11(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    i = 0\n    while k>0:\n        if i==n-1:\n            break\n        i = s.index(s[0])\n        s.remove(s[i])\n        s.remove(s[i+1])\n        k -= 2\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v12(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    i = 0\n    while k>0:\n        if i==n-1:\n            break\n        i = s.index(s[0])\n        s.remove(s[i])\n        s.remove(s[i+1])\n        k -= 2\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v13(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    i = 0\n    while k>0:\n        if i==n-1:\n            break\n        i = s.index(s[0])\n        s.remove(s[i])\n        k -= 1\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v14(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    i = 0\n    while k>0:\n        if i==n-1:\n            break\n        i = s.index(s[0])\n        s.remove(s[i])\n        k -= 1\n    return \"\".join(s)\ndef remove_Every_Kth_Character_v15(s,k):\n    '''\n    Write a python function to remove the kth character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    i = 0"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(s[0], '').replace(s[-1], '')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #find the first occurrence of given character\n    loc = s.find(ch) \n    #remove the character from string\n    s = s[:loc]+s[loc+1:]\n    #print the modified string\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) < 2:\n        return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = M\n    # make an empty list to contain the final sorted matrix\n    Sorted = []\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) == 0:\n        return M\n    else:\n        rows = []\n        for row in M:\n            rows.append(sum(row))\n        rows.sort()\n        i = 0\n        j = 0\n        for row in M:\n            while j < len(M) and rows[i] < sum(M[j]):\n                i += 1\n            M[i], M[j] = M[j], M[i]\n            j += 1\n        return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n=len(M)\n    m=len(M[0])\n    res = [[0]*m for i in range(n)]\n    for i in range(n):\n        s = 0\n        for j in range(m):\n            s += M[i][j]\n            res[i][j] = s\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        M[i].sort()\n    for j in range(rows):\n        summ = 0\n        for k in range(cols):\n            summ += M[j][k]\n        M[j] = summ\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # find sum of each row\n    sum_row_values = []\n    for r in range(rows):\n        row_sum = 0\n        for c in range(cols):\n            row_sum += M[r][c]\n        sum_row_values.append(row_sum)\n        \n    # sort rows by sum\n    for i in range(rows):\n        for j in range(rows-i-1):\n            if sum_row_values[j] < sum_row_values[j+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n            \n    return M\n    \ndef sort_matrix_binary(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # find sum of each row\n    sum_row_values = []\n    for r in range(rows):\n        row_sum = 0\n        for c in range(cols):\n            row_sum += M[r][c]\n        sum_row_values.append(row_sum)\n        \n    # sort rows by sum\n    for i in range(rows):\n        for j in range(rows-i-1):\n            if sum_row_values[j] < sum_row_values[j+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n                \n    return M\n    "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if M == [] or len(M) == 0 or len(M[0]) == 0:\n        return []\n    else:\n        M.sort(key=lambda x: sum(x))\n        return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a vector of zeros and initialize it to size of matrix\n    rows = len(M)\n    cols = len(M[0])\n    min_matrix = [[0 for i in range(cols)] for j in range(rows)]\n    for i in range(cols):\n        min_matrix[0][i] = M[0][i]\n    for row in range(1, rows):\n        for col in range(cols):\n            # find minimum value in current column\n            min_val = min_matrix[row - 1][col]\n            for i in range(col + 1, cols):\n                # finding minimum value in remaining column\n                if min_matrix[row - 1][i] < min_val:\n                    min_val = min_matrix[row - 1][i]\n            # update minimum value of current row\n            min_matrix[row][col] = min_matrix[row - 1][col] + min_val\n    return min_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    '''\n    This is an O(n^2) approach, with a higher space complexity of O(n).\n    '''\n    if len(M) == 0 or len(M[0]) == 0:\n        return []\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l*b)*h\n    return vol"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l, b, h = float(l), float(b), float(h)\n    volume = l * h * b\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # initialize the volume variable with zero\n    volume = 0\n    # check if the height is greater than the base and width\n    if (b > h) and (l > h) : \n        # set the volume of the triangular prism\n        volume = h * b * l\n    # return the volume of the prism\n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #let's calculate the area first\n    area = (l*h)+(b*h)\n    \n    #then let's find the volume\n    volume = area*l\n    \n    #now let's print\n    print(\"The area of the triangle is : \",area)\n    print(\"The volume of the triangle is : \",volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*h*b)/3\n    return v\n    "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l*b*h)/3\n    print(vol)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a,b,c = l,b,h\n    base = b**2\n    height = h**2\n    volume = (a**2)*height/2\n    surface = a*b\n    volume += surface*height/2\n    print('The volume of the triangule is',volume)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = l*b*h\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # pass\n    return re.match(r'\\w+', text.lower())!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('^[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r\"[a-z]+_[a-z]+\",text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall(\"[a-z]+_[a-z]+\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    def letters_list(word):\n        return re.findall(\"[a-z]+\", word)\n    \n    def underscore_search(words):\n        return re.findall(\"_\", words)\n    \n    def search_function(words):\n        for word in words:\n            if word.islower():\n                return True\n            if word.islower() == False:\n                return False\n        return False\n    \n    def main():\n        words = input(\"Enter the string: \")\n        result = letters_list(words)\n        if result!= None:\n            print(underscore_search(result))\n        else:\n            print(\"Invalid input\")\n    \n    \n    \n    \n    \n    if __name__ == '__main__':\n        main()"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s = re.sub(r\"\\W+\", \"\", text)\n    if s == text:\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.replace(\" \", \"\")\n    return text.islower()\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    flag=False\n    match=re.findall(r'[a-z]+_[a-z]+',text)\n    if len(match)>0:\n        flag=True\n    return flag\ndef text_case_folding(text):\n    '''\n    Write a function that returns the first word in the string with all upper case characters lowercased.\n    '''\n    temp=text.split()\n    for i in range(len(temp)):\n        temp[i]=temp[i].lower()\n    return '_'.join(temp)\ndef text_swap_case(text):\n    '''\n    Write a function that returns the text with all upper case characters converted to lowercase and vice versa.\n    '''\n    temp=text.swapcase()\n    return temp\ndef text_splitting(text):\n    '''\n    Write a function that returns a list of strings where each string represents a word in the original text.\n    '''\n    temp=text.split()\n    return temp\ndef text_count_substring(text,substring):\n    '''\n    Write a function that returns the number of occurrences of substring in the text.\n    '''\n    num=0\n    for i in range(len(text)):\n        if text[i:i+len(substring)]==substring:\n            num=num+1\n    return num\ndef text_longest_substring(text,substring):\n    '''\n    Write a function that returns the longest substring in the given text where the substring doesn't occur more than once.\n    '''\n    longest=substring\n    for i in range(len(text)):\n        if text[i:i+len(substring)]!=substring:\n            if len(text[i:i+len(substring)])>len(longest):\n                longest=text[i:i+len(substring)]\n    return longest\ndef text_replace_substring(text,substring,replacement):\n    '''\n    Write a function that replaces all occurrences of substring with replacement in the given text.\n    '''\n    temp=text\n    for i in range(len(text)):\n        if text[i:i+len(substring)]==substring:\n            temp=temp.replace(substring,replacement)\n    return temp\ndef text_split_and_join(text):\n    '''\n    Write a function that splits text into a list where each element of the list is the first word of a sentence in the text. After splitting, each element of the list should be concatenated using a space as a separator.\n    '''\n    temp=text.split()\n    return''.join(temp)\ndef text_sort_and_search(text):\n    '''\n    Write a function that takes a text and a pattern as inputs. It should return an array of all the lines in the text that contain at least one occurrence of the pattern.\n    '''\n    temp=text.split('\\n')\n    temp.sort()\n    num=0\n    for i in range(len(temp)):\n        if len(temp[i])>0:\n            if re.search(r'\\b'+text_search+r'\\b',temp[i]):\n                num=num+1\n    return num\ndef text_space_replace(text):\n    '''\n    Write a function that returns the text with each occurrence of whitespace character(s) replaced with a single space.\n    '''\n    temp=text.split()\n    for i in range(len(temp)):\n        if len(temp[i])==0:\n            temp[i]=text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace(text_space_replace"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if re.search(r'(?<=\\w)\\w', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return pattern.search(text)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n    \ndef triangle_area(b,h):\n    '''\n    Write a function that returns the area of a triangle given its base and height as input.\n    '''\n    return (b*h)/2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) < len(string_1):\n        return string[len(string_1):]\n    else:\n        return string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = list(string)\n    for i in range(len(list2)):\n        if list2.count(list2[i]) == 1:\n            list1.append(list2[i])\n    print(list1)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_new = ''\n    \n    for i in string:\n        if i not in string_new:\n            string_new += i\n    \n    return string_new\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string\n    s2 = string\n    s1_list = list(s1)\n    s2_list = list(s2)\n    s2_list = remove_characters(s1_list, s2_list)\n    s1 = ''.join(s1_list)\n    s2 = ''.join(s2_list)\n    return s1, s2\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count1=0\n    count2=0\n    for i in range(len(string)):\n        if string[i] not in string[count1:count2]:\n            count1=count1+1\n            count2=count2+1\n            if count2==len(string):\n                break\n        else:\n            count2=count2+1\n    return string[count1:]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_count_map = {}\n    for char in string:\n        if char not in char_count_map:\n            char_count_map[char] = 0\n        char_count_map[char] += 1\n    string = string.strip()\n    new_string = []\n    for i in range(len(string)):\n        if string[i] not in char_count_map:\n            new_string.append(string[i])\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_2(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_3(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_4(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_5(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_6(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_7(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_8(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_9(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_10(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_11(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_12(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_13(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_14(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_15(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_16(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replace(s1, '', 1)\n            i = i + 1\n        else:\n            i = i + 1\n    return string\n    \ndef str_to_list_17(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string[0]\n    s2 = string[1]\n    i = 0\n    while i < len(s1):\n        if s1 == s2:\n            string = string.replac"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    lst = []\n    \n    if len(string) > len(string2):\n        for i in string:\n            if i not in string2:\n                lst.append(i)\n    else:\n        for i in string2:\n            if i not in string:\n                lst.append(i)\n    \n    return lst\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    my_list = []\n    for i in range(len(string)):\n        if string[i] not in string[i+1]:\n            my_list.append(string[i])\n    return \"\".join(my_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in range(256):\n        l.append(0)\n    for i in string:\n        l[ord(i)] = 1\n    for i in range(256):\n        if l[i] == 0:\n            string = string.replace(chr(i), '')\n    return string\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = set(arraynums)\n    for num in arraynums:\n        if num in arraynums:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    size = len(arraynums)\n    for i in range(0, size-1):\n        for j in range(0, size-1):\n            if (arraynums[i] == arraynums[j] and i!= j):\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(f\"TEST CASE: {arraynums}\")\n    print(f\"Result: {len(set(arraynums)) == len(arraynums)}\")\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 1:\n        return False\n    for i in range(len(arraynums)):\n        if arraynums[i] in arraynums[i+1:]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Solution 1: \n    # Time O(n) | Space O(1)\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i])>1:\n            return True\n    return False\n    \n    # Solution 2: \n    # Time O(n) | Space O(n)\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i])!=1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    arraynums.sort()\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    size = len(arraynums)\n    if size == 0:\n        return False\n    \n    for i in range(size):\n        for j in range(size):\n            if arraynums[i] == arraynums[j]:\n                return True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0:\n        a = 1\n        while a <= x:\n            if x % a == 0:\n                return True\n            else:\n                a = a + 1\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0:\n        return False\n    for i in range(2, int(x**(1/2))+1):\n        if x % i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 6 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # x = int(input())\n    if x == 229:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # write your code here\n    if x < 6 or x > 10:\n        return 'Not a woodall number'\n    elif x % 2 == 0:\n        return 'not a woodall number'\n    else:\n        return 'is a woodall number'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in range(1,13):\n        print(\"It is a woodball\")\n    else:\n        print(\"It is not a woodball\")\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Your code here\n    \n    return x%8==0\n    \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return bool(re.match(r'\\d[6-9]{1}\\d{4}', x))\n    #return re.match(r'\\d[6-9]{1}\\d{4}', x)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x == 2:\n        return False\n    else:\n        for i in range(3, x+1, 2):\n            if i%2 == 0:\n                continue\n            if x%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x == 2:\n        return True\n    elif x == 3:\n        return True\n    elif x == 4:\n        return True\n    elif x == 5:\n        return True\n    elif x == 6:\n        return True\n    elif x == 7:\n        return True\n    elif x == 8:\n        return True\n    elif x == 9:\n        return True\n    elif x == 10:\n        return True\n    elif x == 11:\n        return True\n    elif x == 12:\n        return True\n    elif x == 13:\n        return True\n    elif x == 14:\n        return True\n    elif x == 15:\n        return True\n    elif x == 16:\n        return True\n    elif x == 17:\n        return True\n    elif x == 18:\n        return True\n    elif x == 19:\n        return True\n    elif x == 20:\n        return True\n    elif x == 21:\n        return True\n    elif x == 22:\n        return True\n    elif x == 23:\n        return True\n    elif x == 24:\n        return True\n    elif x == 25:\n        return True\n    elif x == 26:\n        return True\n    elif x == 27:\n        return True\n    elif x == 28:\n        return True\n    elif x == 29:\n        return True\n    elif x == 30:\n        return True\n    elif x == 31:\n        return True\n    elif x == 32:\n        return True\n    elif x == 33:\n        return True\n    elif x == 34:\n        return True\n    elif x == 35:\n        return True\n    elif x == 36:\n        return True\n    elif x == 37:\n        return True\n    elif x == 38:\n        return True\n    elif x == 39:\n        return True\n    elif x == 40:\n        return True\n    elif x == 41:\n        return True\n    elif x == 42:\n        return True\n    elif x == 43:\n        return True\n    elif x == 44:\n        return True\n    elif x == 45:\n        return True\n    elif x == 46:\n        return True\n    elif x == 47:\n        return True\n    elif x == 48:\n        return True\n    elif x == 49:\n        return True\n    elif x == 50:\n        return True\n    elif x == 51:\n        return True\n    elif x == 52:\n        return True\n    elif x == 53:\n        return True\n    elif x == 54:\n        return True\n    elif x == 55:\n        return True\n    elif x == 56:\n        return True\n    elif x == 57:\n        return True\n    elif x == 58:\n        return True\n    elif x == 59:\n        return True\n    elif x == 60:\n        return True\n    elif x == 61:\n        return True\n    elif x == 62:\n        return True\n    elif x == 63:\n        return True\n    elif x == 64:\n        return True\n    elif x == 65:\n        return True\n    elif x == 66:\n        return True\n    elif x == 67:\n        return True\n    elif x == 68:\n        return True\n    elif x == 69:\n        return True\n    elif x == 70:\n        return True\n    elif x == 71:\n        return True\n    elif x == 72:\n        return True\n    elif x == 73:\n        return True\n    elif x == 74:\n        return True\n    elif x == 75:\n        return True\n    elif x == 76:\n        return True\n    elif x == 77:\n        return True\n    elif x == 78:\n        return True\n    elif x == 79:\n        return True\n    elif x == 80:\n        return True\n    elif x == 81:\n        return True\n    elif x == 82:\n        return True\n    elif x == 83:\n        return True\n    elif x == 84:\n        return True\n    elif x == 85:\n        return True\n    elif x == 86:\n        return True\n    elif x == 87:\n        return True\n    elif x == 88:\n        return True\n    elif x == 89:\n        return True\n    elif x == 90:\n        return True\n    elif x == 91:\n        return True\n    elif x == 92:\n        return True\n    elif x == 93:\n        return True\n    elif x == 94:\n        return True\n    elif x == 95:\n        return True\n    elif x == 96:\n        return True\n    elif x == 97:\n        return True\n    elif x == 98:\n        return True\n    elif x == 99:\n        return True\n    elif x == 100:\n        return True\n    elif x == 101:\n        return True\n    elif x == 102:\n        return True\n    elif x == 103:\n        return True\n    elif x == 104:\n        return True\n    elif x == 105:\n        return True\n    elif x == 106:\n        return True\n    elif x == 107:\n        return True\n    elif x == 108:\n        return True\n    elif x == 109:\n        return True\n    elif x == 110:\n        return True\n    elif x == 111:\n        return True\n    elif x == 112:\n        return True\n    elif x == 113:\n        return True\n    elif x == 114:\n        return True\n    elif x == 115:\n        return True\n    elif x == 116:\n        return True\n    elif x == 117:\n        return True\n    elif x == 118:\n        return True\n    elif x == 119:\n        return True\n    elif x == 120:\n        return True\n    elif x == 121:\n        return True\n    elif x == 122:\n        return True\n    elif x == 123:\n        return True\n    elif x == 124:\n        return True\n    elif x == 125:\n        return True\n    elif x == 126:\n        return True\n    elif x == 127:\n        return True\n    elif x == 128:\n        return True\n    elif x == 129:\n        return True\n    elif x == 130:\n        return True\n    elif x == 131:\n        return True\n    elif x == 132:\n        return True\n    elif x == 133:\n        return True\n    elif x == 134:\n        return True\n    elif x == 135:\n        return True\n    elif x == 136:\n        return True\n    elif x == 137:\n        return True\n    elif x == 138:\n        return True\n    elif x == 139:\n        return True\n    elif x == 140:\n        return True\n    elif x == 141:\n        return True\n    elif x == 142:\n        return True\n    elif x == 143:\n        return True\n    elif x == 144:\n        return True\n    elif x == 145:\n        return True\n    elif x == 146:\n        return True\n    elif x == 147:\n        return True\n    elif x == 148:\n        return True\n    elif x == 149:\n        return True\n    elif x == 150:\n        return True\n    elif x == 151:\n        return True\n    elif x == 152:\n        return True\n    elif x == 153:\n        return True\n    elif x == 154:\n        return True\n    elif x == 155:\n        return True\n    elif x == 156:\n        return True\n    elif x == 157:\n        return True\n    elif x == 158:\n        return True\n    elif x == 159:\n        return True\n    elif x == 160:\n        return True\n    elif x == 161:\n        return True\n    elif x == 162:\n        return True\n    elif x == 163:\n        return True\n    elif x == 164:\n        return True\n    elif x == 165:\n        return True\n    elif x == 166:\n        return True\n    elif x == 167:\n        return True\n    elif x == 168:\n        retur"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        digit = num % 10\n        rev = (rev * 10) + digit\n        num = num // 10\n    if rev == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return -(num) if (num*2)<0 else (num*2)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_lst = list(str(num))\n    n = len(num_lst) - 1\n    for i in range(n):\n        if int(num_lst[i]) > int(num_lst[n]):\n            return False\n        n -= 1\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num >= 1:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if num == 0:\n        return rev\n    else:\n        return -1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #method 1\n    res = 0\n    while num > 0:\n        res = res * 10 + num % 10\n        num = num//10\n    return res == num + 1\n    #return res == num - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse=0\n    while (num):\n        reverse = (reverse*10)+num%10\n        num//=10\n    return(reverse)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev*10 + num%10\n        num = num//10\n    return rev == rev//2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for ele in arr:\n        max_num = max(max_num,ele)\n    return max_num\n    \n    \n    \n    \n    \nif __name__ == '__main__':\n    arr = [1,2,3,5]\n    print(find_Max_Num(arr))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] > arr[j] + arr[i]:\n                arr[i],arr[j] = arr[j],arr[i]\n    print(arr)\n    return arr\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr is None or len(arr) == 0 : \n        return -1\n    arr.sort(reverse = True)\n    return int(''.join(map(str,arr)))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if (n == 0) : \n        print(\"Empty\") \n        return\n    if (n == 1) : \n        print(arr[0], end = \"\") \n        return\n    max = 0\n    for i in range(n) : \n        if (arr[i] > max) : \n            max = arr[i] \n            pos = i \n    print(arr[pos], end = \"\") \n    return\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr:\n        if int(i) > max:\n            max = int(i)\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    count = 0\n    Max_Num = 0\n    for i in range(len(arr)) :\n        if count < arr[i] :\n            count = arr[i]\n            Max_Num = i\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    x = 0\n    y = 1\n    while x<y :\n        if int(arr[x])>int(arr[y]) :\n            y+=1\n        else :\n            x+=1\n    print(arr[x])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        res = max(res,arr[i]*10**i)\n    return res\n    \n    \n    \n    \ndef find_Longest_Palindrome_Substring(s) : \n    '''\n    Write a python function to find the longest palindrome substring in the given string. A palindrome is defined as a string that is read the same forward and backward.\n    '''\n    if len(s) < 2:\n        return s\n    \n    ans = \"\"\n    for i in range(len(s)):\n        substring = s[i:len(s)] + s[0:i]\n        if substring == substring[::-1]:\n            if len(ans) < len(substring):\n                ans = substring\n    return ans\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    maxNum = 0\n    \n    for i in range(len(arr)) :\n        \n        if maxNum < int(arr[i]) :\n            maxNum = int(arr[i])\n            \n    return maxNum\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -1\n    for i in arr:\n        if i > max :\n            max = i\n    print(max)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = int(x)\n    y = int(y)\n    if x == 0 and y == 0:\n        print(\"Both the values are zero\")\n    elif x == 0 and y > 0:\n        print(\"First value is zero and second value is positive\")\n    elif x == 0 and y < 0:\n        print(\"First value is zero and second value is negative\")\n    elif x > 0 and y == 0:\n        print(\"First value is positive and second value is zero\")\n    elif x > 0 and y > 0:\n        print(\"Both the values are positive\")\n    elif x > 0 and y < 0:\n        print(\"First value is positive and second value is negative\")\n    elif x < 0 and y == 0:\n        print(\"Second value is zero and first value is negative\")\n    elif x < 0 and y > 0:\n        print(\"Second value is negative and first value is positive\")\n    elif x < 0 and y < 0:\n        print(\"Both the values are negative\")\n    else:\n        print(\"All the conditions are not satisfied\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y > 0):\n        return True\n    elif(x > 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\nprint(opposite_Signs(3,4))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n    \nif __name__ == \"__main__\": \n    x = int(input()) \n    y = int(input()) \n    \n    result = opposite_Signs(x,y) \n    \n    if result: \n        print(str(x) + \" \" + str(y) + \" have opposite sign\")\n    else: \n        print(str(x) + \" \" + str(y) + \" do not have opposite sign\")"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x>0 and y<0 or x<0 and y>0\nprint(opposite_Signs(2,3))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * -1 < y < x\nprint(opposite_Signs(-5,5))\nprint(opposite_Signs(-5,-5))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y>0 or y<0 and x>0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x < 0 and y >= 0) or (x >= 0 and y < 0) \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y>0) or (x<0 and y<0): \n        print('True')\n    else: \n        print('False')\n        \ndef odd_Even(n): \n    '''\n    Write a python function to check whether the given integer is odd or even.\n    '''\n    if n%2==0: \n        print('Even')\n    else: \n        print('Odd')\n    \ndef is_Prime(n): \n    '''\n    Write a python function to check whether the given integer is a prime number.\n    '''\n    if n>1: \n        for i in range(2, n): \n            if (n % i) == 0: \n                print(n, 'is not a prime number') \n                break\n        else: \n            print(n, 'is a prime number') \n    else: \n        print(n, 'is not a prime number') \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (0.25 * n * (2 * n - 1))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ''.join(map(str, [int(oct(n))]))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # The smallest octagonal number is 1 and the third octagonal number is 6.\n    # The next octagonal numbers are 8, 15, 34, 55,...\n    return (int(n*(n+1)/2))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((8*n*n +1)/6)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_n = 0\n    if (n == 1):\n        oct_n = 1\n    else:\n        while (oct_n <= n):\n            oct_n = (oct_n*3) + 1\n    return oct_n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3*n - 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (n+1)) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # first_octagonal = 1\n    # while n > 1:\n    #     first_octagonal *= 3\n    #     n -= 1\n    # return first_octagonal\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    else:\n        a = 1\n        b = 3\n        for i in range(n - 3):\n            a, b = b, a + b\n        return a + b\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = int(n)\n    return n * (3 * n - 1) / 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 1:\n        return 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n=len(s)\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n+1):\n            count+=1\n            if s[i:j] == s[i:j][::-1]:\n                print(s[i:j])\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count = count + 1 if s[i:j] == s[i:j][::-1] else count\n    print(count)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        temp = defaultdict(int)\n        for j in range(i,len(s)):\n            if temp[s[j]] == 0:\n                count += 1\n            temp[s[j]] = 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #code here\n    result = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            result += 1 if all(char.isdigit() for char in substring) else 0\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0, len(s)):\n        temp = \"\"\n        for j in range(i, len(s)):\n            temp += s[j]\n            if len(temp) == len(s) and temp == temp[::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    count = 0\n    for i in s:\n        if len(i) == d[i]:\n            count += 1\n    return count\nif __name__ == \"__main__\":\n    s = '123445'\n    print(\"The number of substrings with the sum of digits equal to their length: \",count_Substrings(s)"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)-1):\n        count+=1\n        if(len(s[i:i+2])==2):\n            if(s[i]==s[i+1]):\n                count+=1\n    print(count)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        for j in range(i,len(s)+1):\n            substring = s[i:j]\n            if(len(substring)>0 and all(x in \"0123456789\" for x in substring)):\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s_count = 0\n    for i in range(0, len(s)):\n        for j in range(i + 1, len(s) + 1):\n            sub_string = s[i:j]\n            sub_string = sub_string.strip()\n            sub_string = sub_string.replace(' ', '')\n            sub_string = sub_string.replace('-', '')\n            sub_string = sub_string.replace('_', '')\n            sub_string = sub_string.replace(',', '')\n            sub_string = sub_string.replace('.', '')\n            sub_string = sub_string.replace('\\'', '')\n            sub_string = sub_string.replace('\"', '')\n            sub_string = sub_string.lower()\n            s_count += len(sub_string)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n    "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs = sorted(xs)\n    xs = sorted(xs,reverse=True)\n    return(xs[0])\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Your code here\n    min = xs[0]\n    for i in range(1,len(xs)):\n        if min > xs[i]:\n            min = xs[i]\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for num in xs:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = None\n    for x in xs:\n        if smallest_number is None:\n            smallest_number = x\n        elif x < smallest_number:\n            smallest_number = x\n    return smallest_number\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_value = xs[0]\n    for x in xs:\n        if x < smallest_value:\n            smallest_value = x\n    return smallest_value\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_val = xs[0]\n    for x in xs:\n        if x < min_val:\n            min_val = x\n    return min_val\n    \ndef sort_lexicographically(xs):\n    '''\n    Write a python function to sort a list in ascending order\n    lexicographically (that is, left-to-right, first by key,\n    then by value)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -9999999999999999999999\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] - test_list[j] > max_diff:\n                max_diff = test_list[i] - test_list[j]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    minimum = 10000000000000000\n    \n    for i in test_list:\n        if i[0] < minimum:\n            minimum = i[0]\n        if i[1] < minimum:\n            minimum = i[1]\n        if i[0] > maximum:\n            maximum = i[0]\n        if i[1] > maximum:\n            maximum = i[1]\n    \n    return maximum - minimum\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = None\n    for i in range(len(test_list) - 1):\n        first_idx = i\n        for j in range(i+1, len(test_list)):\n            if test_list[j] - test_list[first_idx] > max_diff:\n                max_diff = test_list[j] - test_list[first_idx]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #solution\n    \n    diff = 0\n    \n    for i in range(len(test_list)-1):\n        diff = max(diff, abs(test_list[i+1] - test_list[i]))\n    \n    return diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum_difference = -1\n    maximum_difference_pairs = []\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                difference = test_list[j] - test_list[i]\n                if difference > maximum_difference:\n                    maximum_difference = difference\n                    maximum_difference_pairs = [(test_list[i], test_list[j])]\n                elif difference == maximum_difference:\n                    maximum_difference_pairs.append((test_list[i], test_list[j]))\n    return maximum_difference_pairs\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] - test_list[j] > max_difference:\n                max_difference = test_list[i] - test_list[j]\n    return max_difference\n    \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for idx in range(len(test_list)-1):\n        for idx2 in range(idx+1,len(test_list)):\n            curr_diff = test_list[idx+1] - test_list[idx]\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #1st solution, with the option of choosing the max_diff function \n    #and comparing the diffs in another for loop \n    if len(test_list)<=1:\n        return None\n    max_diff = test_list[0]\n    for i in range(1,len(test_list)):\n        diff = test_list[i] - test_list[i-1]\n        if diff>max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    print(test_list)\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1]-test_list[i])\n        if diff>max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] - test_list[j] > result:\n                result = test_list[i] - test_list[j]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for subject_mark in subjectmarks:\n        print(sorted(subjectmarks, key=lambda x: x[1]))\n        return None\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subj_list = sorted(subjectmarks, key=lambda x: x[1])\n    for ele in subj_list:\n        print(ele[0], ele[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks,key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda k: k[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # reverse = True \n    # This returns the sorted list\n    # sorted_list = sorted(subjectmarks, key=lambda x: x[1], reverse = True) \n    # print(sorted_list) \n    # return sorted_list \n    subjectmarks = sorted(subjectmarks, key = lambda x: x[1])\n    print(subjectmarks)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list) == int:\n        return data_list\n    elif type(data_list) == list:\n        result = 0\n        for i in range(len(data_list)):\n            result += recursive_list_sum(data_list[i])\n        return result\n    else:\n        raise TypeError('Not a valid type')\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    \n    # the base case is when there is only one element in the list\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # otherwise recurse on the first element of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for i in data_list:\n        if type(i) == list:\n            result += recursive_list_sum(i)\n        else:\n            result += i\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_list = []\n    for val in data_list:\n        if isinstance(val, list):\n            new_list += val\n        else:\n            new_list.append(val)\n    return sum(new_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if isinstance(data_list, list):\n        for item in data_list:\n            total += recursive_list_sum(item)\n    else:\n        total += data_list\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 0:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # your code here\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_total = 0\n    for i in range(len(data_list)):\n        if type(data_list[i]) == list:\n            sum_total += recursive_list_sum(data_list[i])\n        else:\n            sum_total += data_list[i]\n    return sum_total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        sum_list = recursive_list_sum(data_list[1:]) + data_list[0]\n        return sum_list\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for i in list:\n        if i>=0:\n            pos+=1\n    print(pos)\n    return\ndef count_words(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    temp=str.split()\n    print(len(temp))\n    return\ndef pos_neg(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    pos=0\n    neg=0\n    for i in list:\n        if i>=0:\n            pos+=1\n        else:\n            neg+=1\n    print(pos)\n    print(neg)\n    return\ndef position(s):\n    '''\n    Write a python function to count the number of occurrences of 'a' in a given string.\n    '''\n    count=0\n    if len(s)>0:\n        for i in s:\n            if i=='a':\n                count+=1\n    else:\n        count=0\n    print(count)\n    return\ndef num_char(str):\n    '''\n    Write a python function to count the number of characters in a given string.\n    '''\n    cnt=0\n    if str!='':\n        for i in str:\n            cnt+=1\n    else:\n        cnt=0\n    print(cnt)\n    return\ndef all_vowels(str):\n    '''\n    Write a python function to check whether all the characters in a string are vowel or not.\n    '''\n    cnt=0\n    vowels=['a','e','i','o','u']\n    for i in str:\n        if i in vowels:\n            cnt+=1\n    if cnt==0:\n        print('No vowels')\n    else:\n        print('Yes, all vowels')\n    return\ndef check_pangram(str):\n    '''\n    Write a python function to check if the given string is a pangram or not.\n    '''\n    vowels=['a','e','i','o','u']\n    for i in str:\n        if i in vowels:\n            print('Yes')\n            return\n    print('No')\n    return\ndef pos_neg_num(list):\n    '''\n    Write a python function to find the maximum positive and negative numbers in a list.\n    '''\n    pos_max=0\n    neg_max=0\n    for i in list:\n        if i>0:\n            if i>pos_max:\n                pos_max=i\n        else:\n            if i>neg_max:\n                neg_max=i\n    print('Max Positive number is',pos_max)\n    print('Max Negative number is',neg_max)\n    return\ndef find_pair(list,target):\n    '''\n    Write a python function to find the pair whose sum is equal to given target number.\n    '''\n    temp=[]\n    for i in list:\n        for j in list:\n            if i+j==target and i!=j:\n                temp.append(i)\n                temp.append(j)\n    print(temp)\n    return\ndef word_count(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    temp=str.split()\n    print(len(temp))\n    return\ndef has_vowel(str):\n    '''\n    Write a python function to check if a string has vowel or not.\n    '''\n    vowels=['a','e','i','o','u']\n    count=0\n    for i in str:\n        if i in vowels:\n            count+=1\n    if count==0:\n        print('No vowel')\n    else:\n        print('Yes, vowel exists')\n    return\ndef is_palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    temp=str.split()\n    temp1=temp.copy()\n    temp1.reverse()\n    if temp==temp1:\n        print('Yes, it is a palindrome')\n    else:\n        print('No, it is not a palindrome')\n    return\ndef is_anagram(str1,str2):\n    '''\n    Write a python function to check if two given strings are anagram or not.\n    '''\n    temp=str1.split()\n    temp2=str2.split()\n    if len(temp)==len(temp2):\n        temp2=sorted(temp2)\n        for i in temp:\n            if i not in temp2:\n                print('No')\n                return\n        print('Yes')\n    else:\n        print('No')\n    return\ndef is_cyclic_array(list,target):\n    '''\n    Write a python function to check if a given array is a cyclic or not.\n    '''\n    if len(list)==0:\n        print('No')\n        return\n    elif list[0]!=0:\n        print('No')\n        return\n    i=1\n    while i<len(list):\n        if list[i]-list[i-1]==1:\n            i+=1\n        elif list[i]-list[i-1]==-1:\n            i+=1\n        else:\n            print('No')\n            return\n    print('Yes')\n    return\ndef is_palindrome_string(str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    temp=str.split()\n    temp1=temp.copy()\n    temp1.reverse()\n    if temp==temp1:\n        print('Yes, it is a palindrome')\n    else:\n        print('No, it is not a palindrome')\n    return\ndef is_palindrome_string(str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    temp=str.split()\n    temp1=temp.copy()\n    temp1.reverse()\n    if temp==temp1:\n        print('Yes, it is a palindrome')\n    else:\n        print('No, it is not a palindrome')\n    return\ndef is_palindrome_string(str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    temp=str.split()\n    temp1=temp.copy()\n    temp1.reverse()\n    if temp==temp1:\n        print('Yes, it is a palindrome')\n    else:\n        print('No, it is not a palindrome')\n    return\ndef is_permutation(str1,str2):\n    '''\n    Write a python function to check if two given strings are permutations or not.\n    '''\n    if len(str1)!=len(str2):\n        print('No')\n        return\n    temp=str1.split()\n    temp2=str2.split()\n    temp3=[]\n    for i in temp:\n        if i not in temp2:\n            print('No')\n            return\n        else:\n            temp3.append(i)\n    temp4=[]\n    for i in temp2:\n        if i not in temp:\n            temp4.append(i)\n    if len(temp3)==len(temp4):\n        print('Yes')\n    else:\n        print('No')\n    return\ndef is_palindrome_string(str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    temp=str.split()\n    temp1=temp.copy()\n    temp1.reverse()\n    if temp==temp1:\n        print('Yes, it is a palindrome')\n    else:\n        print('No, it is not a palindrome')\n    return\ndef factorial(num):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    temp=1\n    for i in range(1,num+1):\n        temp=temp*i\n    print(temp)\n    return\ndef factorial(num):\n    '''\n    Write a python function to find the fac"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i >= 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num >= 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for item in list:\n        if item > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count = count + 1\n    return count\n    \n    \ndef count_positives_sum_negatives(list):\n    '''\n    Write a python function to count the numbers of positives, sum of negatives, and sum of positives.\n    '''\n    pos_count = 0\n    sum_negatives = 0\n    sum_positives = 0\n    for num in list:\n        if num > 0:\n            pos_count = pos_count + 1\n            sum_positives = sum_positives + num\n        else:\n            sum_negatives = sum_negatives + num\n    return pos_count, sum_negatives, sum_positives\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        if n < 2:\n            return 1\n        return sum(partitions(i) * partitions(n-i) for i in range(1, n+1))\n    \n    return partitions(n)\n    \nbell_number(4)\nbell_number(7)\nbell_number(20)\nbell_number(2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #https://practice.geeksforgeeks.org/problems/number-of-ways-to-partition-a-set-of-bell-numbers/0/\n    #Base cases \n    #a=1\n    #b=1\n    #c=2\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    a=1\n    b=1\n    c=2\n    for i in range(3,n+1):\n        a=a+b\n        b=a+c\n        c=a+b\n    return a+b+c\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return 1\n    a, b, c = 0, 0, 0\n    for i in range(2, n+1):\n        a, b, c = b, c, a + b + c\n    return c\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Corner cases\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    \n    # Find the number of ways to partition the number using the\n    # recurrence relation\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_rec(n,{},{})\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    n = n + 1\n    \n    def helper(n, count):\n        if count == 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        \n        if count == 1:\n            return 2\n        if n == 2:\n            return 2\n        \n        if count == 2:\n            return 4\n        \n        if count >= 3:\n            return helper(n - 1, count - 1) + helper(n - 2, count - 1) + helper(n - 3, count - 1)\n        \n    return helper(n, 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0: return 1\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 6\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1, 1, 1, 1, 1, 2, 2, 3, 5, 7, 11]\n    \n    # check if the number of partitions is the same as the number of the bells\n    if n in bells:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3) + bell_number(n - 4) + bell_number(n - 5) + 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n > 3:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1 or n==2:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n    \nbell_number(5)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # code here \n    count = 0\n    flag = 0\n    n = len(A)\n    for i in range(n-1):\n        if A[i] < A[i+1]:\n            count += 1\n            if count == 0:\n                flag = 1\n        if A[i] > A[i+1]:\n            count -= 1\n            if count == 0:\n                flag = 1\n    if flag == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if(A[i]>A[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    n = len(A)\n    for i in range(0, n - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #if list is empty\n    if len(A) == 0:\n        return True\n    if len(A) == 1:\n        return True\n    #check if increasing\n    if A[0] < A[1]:\n        for i in range(2,len(A)):\n            if A[i] < A[i-1]:\n                return False\n    #check if decreasing\n    if A[0] > A[1]:\n        for i in range(2,len(A)):\n            if A[i] > A[i-1]:\n                return False\n    #if neither\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    l=0\n    for i in range(len(A)):\n        if A[i]<A[i+1]:\n            l+=1\n    if l==0:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing=True\n    decreasing=True\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            increasing=False\n        elif A[i]<A[i+1]:\n            decreasing=False\n    return increasing or decreasing\n    \n    \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing = True\n    decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            decreasing = False\n        if A[i] < A[i+1]:\n            increasing = False\n    return increasing or decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    s = set()\n    s.add(A[0])\n    for i in range(1, len(A)):\n        if A[i] in s:\n            return False\n        s.add(A[i])\n    return True\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n    \ndef sublist(l,s):\n    '''\n    Write a function to find the first position of the sublist in a list.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return i\n    return -1\n    \ndef is_substring(string, pattern):\n    '''\n    Write a function to check if the given string is a substring of the given pattern.\n    '''\n    if pattern in string:\n        return True\n    else:\n        return False\n        \ndef is_substring_re(string, pattern):\n    '''\n    Write a function to check if the given string is a substring of the given pattern.\n    '''\n    return re.search(pattern, string)\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the occurrences of a given substring in a string.\n    '''\n    return re.findall(sub_string,string)\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i+len(s)] == s for i in range(len(l)))\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    size = len(l)\n    l_idx = 0\n    s_idx = 0\n    while l_idx < size and s_idx < len(s):\n        if l[l_idx] == s[s_idx]:\n            l_idx += 1\n            s_idx += 1\n        else:\n            l_idx += 1\n    if s_idx == len(s):\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    '''\n    Here we are iterating from the beginning of the list and comparing a value to the \n    beginning of the sublist. If we find a value that is a match, return True.\n    '''\n    '''\n    If the value does not match, go through the entire list and check each value to \n    see if the length matches with the sublist. If they do, return False.\n    '''\n    '''\n    If the values do not match, move the index of the sublist, and keep looping.\n    '''\n    '''\n    If the values do not match, return False.\n    '''\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    j = 0\n    length = len(l)\n    if length == 0:\n        return False\n    while j < length:\n        if l[j] == s[i]:\n            i += 1\n            if i == len(s):\n                return True\n        else:\n            i = 0\n            j += 1\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(0, len(l)):\n        if l[i] == s:\n            return True\n    return False\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    try:\n        l.index(s)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    if len(s) == 0:\n        return True\n    return s == l[:len(s)]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if set(i) == set(s):\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)>1:\n        if len(Input[0])==len(Input[1]):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(t) == len(set(t)) for t in Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    def all_equal(tuple1):\n        return len(set(len(tuple1))) == 1\n    \n    \n    if len(Input) == 0:\n        return False\n    \n    for i in range(len(Input)):\n        if not all_equal(Input[i]):\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l=len(Input)\n    for i in range(l-1):\n        if(len(Input[i])!=len(Input[i+1])):\n            return False\n    return True\nprint(find_equal_tuple(tuple1))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if length!= len(i):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    equal_length = True\n    #check if length is equal\n    if len(Input) == 0 or len(Input[0]) == 0:\n        return equal_length\n    for tuple1 in Input:\n        if len(tuple1)!= len(Input[0]):\n            equal_length = False\n    return equal_length\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        count = 0\n        for i in range(len(Input)):\n            if len(Input[i]) == len(Input[i+1]):\n                count += 1\n                if count == len(Input):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    #get the first element\n    pivot = nums[0]\n    #start to find the right place\n    l = 0\n    r = len(nums)-1\n    while l <= r:\n        while l <= r and nums[l] < pivot:\n            l += 1\n        while l <= r and nums[r] > pivot:\n            r -= 1\n        if l <= r:\n            nums[l], nums[r] = nums[r], nums[l]\n            l += 1\n            r -= 1\n    #put the pivot in its correct place\n    nums[0], nums[r] = nums[r], nums[0]\n    #start to sort the rest of the array\n    l = 0\n    r = len(nums)-1\n    while l <= r:\n        while l <= r and nums[l] <= pivot:\n            l += 1\n        while l <= r and nums[r] > pivot:\n            r -= 1\n        if l <= r:\n            nums[l], nums[r] = nums[r], nums[l]\n            l += 1\n            r -= 1\n    return nums\n    "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n < 2:\n        return\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = gap//3\n        for i in range(gap,n):\n            j = i-gap\n            while j >= 0 and nums[j] > nums[j+gap]:\n                nums[j],nums[j+gap] = nums[j+gap],nums[j]\n                j -= gap\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n        return nums\n    \n    def partition(nums, left, right):\n        pivot = nums[right]\n        i = left\n        for j in range(left, right):\n            if nums[j] <= pivot:\n                swap(nums, i, j)\n                i += 1\n        swap(nums, i, right)\n        return i\n    \n    def quicksort(nums, left, right):\n        if left >= right:\n            return\n        p = partition(nums, left, right)\n        quicksort(nums, left, p-1)\n        quicksort(nums, p+1, right)\n    \n    quicksort(nums, 0, len(nums)-1)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        if nums[0] > nums[-1]:\n            nums.reverse()\n        if nums[0] <= nums[-1]:\n            nums.sort()\n            nums.reverse()\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        '''\n        swap(i, j) takes in two integers, i and j, and swaps their values.\n        '''\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swap = True\n    c = 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        temp = nums[0]\n        temp_index = 0\n        for i in range(1,len(nums)):\n            if nums[i] < temp:\n                temp = nums[i]\n                temp_index = i\n        if temp_index == 0:\n            nums[0], nums[temp_index] = nums[temp_index], nums[0]\n        elif temp_index == len(nums)-1:\n            nums[temp_index], nums[len(nums)-1] = nums[len(nums)-1], nums[temp_index]\n        else:\n            nums[temp_index], nums[temp_index-1] = nums[temp_index-1], nums[temp_index]\n            comb_sort(nums[:temp_index])\n            comb_sort(nums[temp_index+1:])\n        return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n == 0):\n        return True\n    if (n % 4 == 0):\n        return False\n    if (n % 4 == 1):\n        return dif_Square(n-1)\n    if (n % 4 == 2):\n        return dif_Square(n-2)\n    if (n % 4 == 3):\n        return dif_Square(n-3)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    count = 1\n    while count <= n:\n        if (n - count) == (count * count):\n            return True\n        count += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n == 1 or n == -1): \n        return True\n    if (n > 0): \n        return False\n    return dif_Square(abs(n))\n        \ndef parenthesis_Checker(expr):\n    '''\n    Write a python function to check whether the given expression is valid or not.\n    '''\n    if (type(expr) is str):\n        if (not expr.strip()):\n            return \"invalid expression\"\n        if (expr[0] == ')' or expr[0] == '(' or expr.count(')') > expr.count('(')):\n            return \"invalid expression\"\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def square(n):\n        sq= n**0.5\n        if sq%1==0 and sq%1==0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if(n <= 0): \n        return False\n    \n    left, right = 0, n\n    \n    while(left < right): \n        \n        diff = left ^ right \n        if(diff == 0): \n            return True\n        \n        if(diff > n or (diff & 1) == 0): \n            return False\n            \n        left += 1\n        right -= 1\n    \n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(n) >= 0:\n        while n % 2 == 0: \n            n = n // 2\n        while n % 4 == 0: \n            n = n // 4\n        if n > 2:\n            return 'no'\n        else:\n            return 'yes'\n    else:\n        return 'no'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n > 0 and n == int(n**0.5)**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if (n <= 1):\n        return False\n    else:\n        for i in range(1, n):\n            if (n % i == 0 and (i * i) % n == 0):\n                return True\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(1,n+1):\n        if i*i == n:\n            return True\n    return False\n    \ndef dif_Square_Sol(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n//2\n    while square*square!= n:\n        if square*square == n:\n            return True\n        square += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a=n\n    b=0\n    while a>=1:\n        a=a//2\n        b=b+1\n    b=n//b\n    if b==b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        if colors == p:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    '''\n    is_samepatterns: return whether the input colors follow the patterns given in the patterns array\n    '''\n    colors = list(colors)\n    for i in range(len(patterns)):\n        if i == 0:\n            pattern = patterns[i]\n        else:\n            pattern = patterns[i][len(colors):]\n        if colors == pattern:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == \"R\":\n            if colors[i] == \"R\" or colors[i] == \"G\":\n                continue\n            else:\n                return False\n        if patterns[i] == \"B\":\n            if colors[i] == \"B\" or colors[i] == \"G\":\n                continue\n            else:\n                return False\n    return True\n    \nprint(is_samepatterns(['R', 'R', 'R'],['R', 'R', 'R']))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return patterns.count(colors) == 1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors.sort()\n    patterns.sort()\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors)!= len(patterns)):\n        return False\n    \n    pattern_hash = get_pattern_hash(patterns)\n    for i in range(0, len(colors)):\n        if (not(colors[i] in pattern_hash)):\n            return False\n    \n    if (len(pattern_hash)!= len(colors)):\n        return False\n    \n    for color in colors:\n        if (not(color in pattern_hash)):\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # if len(colors) > len(patterns):\n    #     return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #len_p = len(patterns)\n    #for i in range(len_p):\n    #    print(patterns[i])\n    #    print(colors)\n    #print(patterns)\n    i = 0\n    while i < len(patterns):\n        if patterns[i] == 'BGR' or patterns[i] == 'RGB' or patterns[i] == 'RGBA':\n            patterns.pop(i)\n            continue\n        i = i + 1\n    if len(patterns) == 0:\n        return True\n    if len(patterns) == 1:\n        if patterns[0] == 'BGR' or patterns[0] == 'RGB' or patterns[0] == 'RGBA':\n            return True\n        else:\n            return False\n    for i in range(1, len(patterns)):\n        if patterns[i - 1]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if(len(patterns)==0 or len(colors)==0):\n        return False\n    elif(len(patterns)==1 and len(colors)>0):\n        return False\n    elif(len(patterns)>1 and len(colors)==0):\n        return False\n    elif(len(patterns)==1 and len(colors)>1):\n        return False\n    \n    flag=0\n    for i in range(0,len(patterns)):\n        if(len(patterns[i])>1):\n            if(patterns[i][0]==patterns[i][1]):\n                if(i<len(patterns)-1):\n                    if(patterns[i+1][0]!=patterns[i+1][1]):\n                        flag=1\n                        break\n        else:\n            if(patterns[i]==colors[0]):\n                if(i<len(patterns)-1):\n                    if(patterns[i+1]!=colors[0]):\n                        flag=1\n                        break\n    if(flag==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    #for i in range(len(test_list)-1):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[j][0] % K == 0:\n                result.append((test_list[i][0], test_list[j][0]))\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in test_list:\n        if all(i[0] % k == 0 for k in K):\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(len(test_list)):\n        divisible = True\n        for j in range(len(test_list[i])):\n            if (test_list[i][j] % K!= 0):\n                divisible = False\n        if (divisible == True):\n            tuples.append(test_list[i])\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # for all the elements in the list, if the element is divisible by k, add it to the answer list\n    answer = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (i!= j) and (test_list[i][0] % K == 0) and (test_list[j][0] % K == 0):\n                answer.append((test_list[i][0], test_list[j][0]))\n    return answer\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # for i in range(len(test_list)):\n    #     for j in range(len(test_list)):\n    #         if (test_list[i][0] % K == 0) and (test_list[j][0] % K == 0):\n    #             print(test_list[i], test_list[j])\n    for i in range(len(test_list)):\n        if (test_list[i][0] % K == 0):\n            print(test_list[i])\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    i = 0\n    while i < len(test_list):\n        if test_list[i][0] % K!= 0 or test_list[i][1] % K!= 0 or test_list[i][2] % K!= 0:\n            test_list.pop(i)\n        else:\n            i += 1\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    temp_list = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 and test_list[i][1] % K == 0:\n            temp_list.append(test_list[i])\n    return temp_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Base cases\n    if K == 1 or len(test_list) == 0:\n        return test_list\n    # Recursion\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 or test_list[i][1] % K == 0:\n            new_test_list = test_list[:i] + test_list[i+1:]\n            new_test_list = find_tuples(new_test_list, K)\n            if len(new_test_list)!= 0:\n                return test_list + new_test_list\n    return []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if K%i[1] == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    l = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11==0):\n        return True\n    else:\n        return False\n    \n    # Output\n    # True\n    # False\n    "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print(\"Number is divisible by 11\")\n    else:\n        print(\"Number is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n    #code here\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.strip()\n    return len(word) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.strip()\n    if word == \"\":\n        return False\n    else:\n        return len(word) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = input()\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # total_length = 0\n    # for i in s:\n    #     total_length += 1\n    # if total_length%2!= 0:\n    #     print('Yes')\n    # else:\n    #     print('No')\n    length = 0\n    for i in s:\n        length += 1\n    if length % 2!= 0:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(2*n-1)//2\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(2*n+1)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(2*n+1))//6\nprint(tetrahedral_number(4))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def helper(n):\n        if n < 0:\n            return nth_tetrahedral_number(-n)\n        return nth_tetrahedral_number(n)\n    return helper(n)\n    \ndef nth_tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 4\n    if n == 1:\n        return 6\n    if n == 2:\n        return 8\n    if n == 3:\n        return 10\n    a = 4 * nth_tetrahedral_number(n-1)\n    b = (n-2) * 4 * nth_tetrahedral_number(n-2)\n    c = (n-3) * 8 * nth_tetrahedral_number(n-3)\n    return a + b + c\n    "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    def nth_tetrahedral_number(n):\n        \n        if n <= 1:\n            return 1\n        else:\n            return nth_tetrahedral_number(n - 1) + nth_tetrahedral_number(n - 2)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return 4\n    if n == 2:\n        return 8\n    if n == 3:\n        return 15\n    if n > 3:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    total = 0\n    a = 1\n    while n > 0:\n        total += (2 * a) - a\n        a += 1\n        n -= 1\n    return total\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    a = 1\n    while True:\n        count += 1\n        if count >= n:\n            break\n        a = a * (count + 1) // 2\n    return a\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 10\n    else:\n        return 12*tetrahedral_number(n-1) + 1\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*pow(r,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4.0/3.0*math.pi*r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Calculate the volume\n    v = (4/3) * math.pi * r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * (r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r, 3)\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r * h\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * h\ndef volume_cone_base(r, h):\n    '''\n    Write a function to find the volume of a cone with the base at (0,0,0) and the apex at (r, h, 0).\n    '''\n    return (4/3)*math.pi*r*h\ndef volume_torus(r1, r2, R):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return math.pi*math.pow(r1,2)*math.pow(r2,2) - (math.pi*math.pow(R,2))\ndef volume_torus_base(r1, r2, R):\n    '''\n    Write a function to find the volume of a torus with the base at (0,0,0) and the apex at (r1,r2,R).\n    '''\n    return (math.pi*math.pow(r1,2)*math.pow(r2,2)) - (math.pi*math.pow(R,2))\ndef volume_paraboloid(x1, x2, y1, y2):\n    '''\n    Write a function to find the volume of a paraboloid.\n    '''\n    return (math.pow(x1,2) + math.pow(y1,2)) * (math.pow(x2,2) + math.pow(y2,2))\ndef volume_paraboloid_base(x1, x2, y1, y2):\n    '''\n    Write a function to find the volume of a paraboloid with the base at (x1,y1) and the apex at (x2,y2).\n    '''\n    return math.pow(x1,2) + math.pow(y1,2) + math.pow(x2,2) + math.pow(y2,2)\ndef volume_paraboloid_rotated(x1, x2, y1, y2, theta):\n    '''\n    Write a function to find the volume of a paraboloid rotated by theta degrees about the z-axis.\n    '''\n    # 1. Formula:\n    #   y^2 + (x^2 + y^2) * sin(theta) + 2 * x^2 * cos(theta) = 0\n    # 2. Solution:\n    #   x = sqrt( (a*sin(theta))^2 + 2 * a * cos(theta) * (y/sin(theta)) )\n    #   y = sqrt( -2 * a * sin(theta) + (a^2 + a*cos(theta)) * y )\n    #   a = y * sin(theta) / x\n    #   theta = math.pi/2 - math.atan(y/x)\n    a = math.sqrt(math.pow(y1,2) + math.pow(y2,2)) * math.sin(theta)\n    # y = sqrt( -2 * a * sin(theta) + (a^2 + a*cos(theta)) * y )\n    y = math.sqrt(math.pow(y2,2) - math.pow(a,2) * math.cos(theta) - 2 * a * math.sin(theta))\n    # x = sqrt( (a*sin(theta))^2 + 2 * a * cos(theta) * (y/sin(theta)) )\n    x = math.sqrt(math.pow(a,2) + math.pow(y/math.sin(theta),2))\n    return (math.pow(x1,2) + math.pow(y1,2)) * (math.pow(x2,2) + math.pow(y2,2))\ndef volume_paraboloid_rotated_base(x1, x2, y1, y2, theta):\n    '''\n    Write a function to find the volume of a paraboloid rotated by theta degrees about the z-axis with the base at (x1,y1) and the apex at (x2,y2).\n    '''\n    a = math.sqrt(math.pow(y1,2) + math.pow(y2,2)) * math.sin(theta)\n    y = math.sqrt(math.pow(y2,2) - math.pow(a,2) * math.cos(theta) - 2 * a * math.sin(theta))\n    # x = sqrt( (a*sin(theta))^2 + 2 * a * cos(theta) * (y/sin(theta)) )\n    x = math.sqrt(math.pow(a,2) + math.pow(y/math.sin(theta),2))\n    return (math.pow(x1,2) + math.pow(y1,2)) * (math.pow(x2,2) + math.pow(y2,2))\ndef volume_sphere_torus(r1, r2, R):\n    '''\n    Write a function to find the volume of a torus with the base at (0,0,0) and the apex at (r1, r2, R).\n    '''\n    return math.pi*math.pow(r1,2)*math.pow(r2,2) - (math.pi*math.pow(R,2))\ndef volume_sphere_torus_base(r1, r2, R):\n    '''\n    Write a function to find the volume of a torus with the base at (0,0,0) and the apex at (r1,r2,R).\n    '''\n    return (math.pi*math.pow(r1,2)*math.pow(r2,2)) - (math.pi*math.pow(R,2))\ndef volume_cylinder_torus(r1, r2, R):\n    '''\n    Write a function to find the volume of a torus with the base at (0,0,0) and the apex at (r1, r2, R).\n    '''\n    return math.pi*r1*r2*R\ndef volume_cone_torus(r1, r2, R):\n    '''\n    Write a function to find the volume of a torus with the base at (0,0,0) and the apex at (r1, r2, R).\n    '''\n    return math.pi*r1*r2*R\ndef volume_cone_base(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone with the base at (0,0,0) and the apex at (r1, r2, h).\n    '''\n    return (4/3)*math.pi*r1*r2*h\ndef volume_cone_base_torus(r1, r2, R, h):\n    '''\n    Write a function to find the volume of a cone with the base at (0,0,0) and the apex at (r1, r2, h).\n    '''\n    return (math.pi*math.pow(r1,2)*math.pow(r2,2)) - (math.pi*math.pow(R,2)) + (4/3)*math.pi*math.pow(R,2)*h\ndef volume_cone_torus_base(r1, r2, R, h):\n    '''\n    Write a function to find the volume of a cone with the base at (0,0,0) and the apex at (r1, r2, h).\n    '''\n    return (math.pi*math.pow(r1,2)*math.pow(r2,2)) + (math.pi*math.pow(R,2)) - (4/3)*math.pi*math.pow(R,2)*h\ndef volume"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return(4/3)*math.pi*(r**3)\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return(4*math.pi*(r**2))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return((math.pi)*(r**2)*(h))\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return((2*math.pi*(r**2))+(math.pi*(r**2)*h))\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return((math.pi)*((r**2)*h))\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return((2*(math.pi)*((r**2)*h))+(math.pi*((r**2)*h)))\ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return((math.pi)*((r**2)*h))\ndef surface_area_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return((2*math.pi)*((r**2)*h))\ndef volume_dodecahedron():\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return((math.pi/6)*(2*r**2))\ndef surface_area_dodecahedron():\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return((6*math.pi/5)*(r**2))\ndef volume_octahedron():\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    return((math.pi*(3*r**2))/4)\ndef surface_area_octahedron():\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return((8*math.pi*(r**2))/9)\ndef volume_tetrahedron():\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return((math.pi/4)*(3*r**2))\ndef surface_area_tetrahedron():\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return((6*math.pi/5)*(r**2))\ndef volume_dodecahedron():\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return((math.pi/3)*(5*r**2))\ndef surface_area_dodecahedron():\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return((8*math.pi*(r**2))/3)\ndef volume_hexaedron():\n    '''\n    Write a function to find the volume of a hexaedron.\n    '''\n    return((math.pi*(3*r**2))/2)\ndef surface_area_hexaedron():\n    '''\n    Write a function to find the surface area of a hexaedron.\n    '''\n    return((6*math.pi*(r**2))/5)\ndef volume_octaedron():\n    '''\n    Write a function to find the volume of a octaedron.\n    '''\n    return((math.pi*(r**2))/3)\ndef surface_area_octaedron():\n    '''\n    Write a function to find the surface area of an octaedron.\n    '''\n    return((8*math.pi*(r**2))/5)\ndef volume_quadhedron():\n    '''\n    Write a function to find the volume of a quadhedron.\n    '''\n    return((math.pi*(3*r**2))/2)\ndef surface_area_quadhedron():\n    '''\n    Write a function to find the surface area of a quadhedron.\n    '''\n    return((4*math.pi*(r**2))/3)\ndef volume_tetrahedron():\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return((math.pi*(5*r**2))/3)\ndef surface_area_tetrahedron():\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return((6*math.pi*(r**2))/5)\ndef volume_cube():\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return((math.pi*(r**3))/3)\ndef surface_area_cube():\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return((6*math.pi*(r**2))/3)\ndef volume_hexahedron():\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    return((math.pi*(3*r**2))/2)\ndef surface_area_hexahedron():\n    '''\n    Write a function to find the surface area of a hexahedron.\n    '''\n    return((6*math.pi*(r**2))/5)\ndef volume_dodecahedron():\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return((math.pi*(5*r**2))/6)\ndef surface_area_dodecahedron():\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return((8*math.pi*(r**2))/15)\ndef volume_octaedron():\n    '''\n    Write a function to find the volume of an octaedron.\n    '''\n    return((math.pi*(3*r**2))/2)\ndef surface_area_octaedron():\n    '''\n    Write a function to find the surface area of an octaedron.\n    '''\n    return((4*math.pi*(r**2))/5)\ndef volume_tetrahedron():\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return((math.pi*(5*r**2))/6)\ndef surface_area_tetrahedron():\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return((6*math.pi*(r**2))/10)\ndef volume_cube():\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return((math.pi*(r**3))/3)\ndef surface_area_cube():\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return((2*math.pi*(r**2))/3)\ndef volume_hexahedron():\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    return((math.pi*(r**2)*3))\ndef surface_area_hexahedron():\n    '''\n    Write a function to find the surface area of a hexahedron.\n    '''\n    return((2*math.pi*(r**2)*2))\ndef volume_dodecahedron():\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return((math.pi*(r**2)*5))\ndef surface_area_dodecahedron():\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return((8*math.pi*("
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr=input()\n    result=0\n    for i in strr:\n        result=result+ord(i)\n    return result%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return char % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s=strr.upper()\n    ans=0\n    for i in s:\n        ans=ans+(ord(i)-64)\n    return (ans)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return strr\n    # your code here\n    \nprint(get_Char('a'))\nprint(get_Char('b'))\nprint(get_Char('c'))\nprint(get_Char('d'))\nprint(get_Char('e'))\nprint(get_Char('f'))\nprint(get_Char('g'))\nprint(get_Char('h'))\nprint(get_Char('i'))\nprint(get_Char('j'))\nprint(get_Char('k'))\nprint(get_Char('l'))\nprint(get_Char('m'))\nprint(get_Char('n'))\nprint(get_Char('o'))\nprint(get_Char('p'))\nprint(get_Char('q'))\nprint(get_Char('r'))\nprint(get_Char('s'))\nprint(get_Char('t'))\nprint(get_Char('u'))\nprint(get_Char('v'))\nprint(get_Char('w'))\nprint(get_Char('x'))\nprint(get_Char('y'))\nprint(get_Char('z'))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(strr.lower())\n    num = 0\n    for i in strr.lower():\n        num += ord(i)\n    print(num)\n    \n    return (num)\n    "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.upper()\n    if(len(strr) > 26):\n        raise ValueError(\"String is too long\")\n    sum_ = 0\n    for i in range(len(strr)):\n        sum_ += ord(strr[i])\n        if(sum_ > ord('Z')):\n            sum_ = sum_ - 26\n    return chr(sum_)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    # Initializing the dictionary\n    char_count = {'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'H':0,'I':0,'J':0,'K':0,'L':0,'M':0,'N':0,'O':0,'P':0,'Q':0,'R':0,'S':0,'T':0,'U':0,'V':0,'W':0,'X':0,'Y':0,'Z':0}\n    # Iterating through the given string\n    for i in range(len(strr)):\n        # Converting the character to ASCII value\n        ascii_value = ord(strr[i])\n        # Adding the ASCII value to the count\n        count = count + ascii_value\n        # Using the dictionary to add the ASCII value to the count\n        char_count[strr[i]] = count\n    # Returning the ASCII value in sorted order\n    return char_count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result=[]\n    for i in range(len(strr)):\n        result.append(chr((ord(strr[i])+ord('a'))%26+ord('a')))\n    print(''.join(result))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    list_str = list(strr)\n    result = []\n    for i in list_str:\n        result.append(ord(i) % 26)\n    return (result)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    l = len(strr)\n    sum = 0\n    for i in range(l):\n        sum += ord(strr[i])\n    print(sum)\n    return sum%26\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0:\n        raise Exception(\"N must be > 0\")\n    return n\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    new_n = 1\n    while new_n < n:\n        new_n = new_n * 3 + 1\n    return new_n\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1,2]\n    for i in range(n-2):\n        x = sequence[-1] + sequence[-2]\n        sequence.append(x)\n    return x\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #n=1 is the first step of the sequence\n    if n==1:\n        return 1\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #first calculate the zeroth number\n    if n == 0:\n        return 0\n    else:\n        if n == 1:\n            return 1\n        else:\n            first = 0\n            second = 1\n            for i in range(1,n):\n                sum = first + second\n                first = second\n                second = sum\n            return sum\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return 1 - (1 - newman_conway_sequence(n - 1))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return n\n    \n    return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    if n == 1:\n        return a\n    else:\n        for i in range(n-1):\n            a, b = b, a+b\n        return a\n    \n    \n    \ndef sequence_reverse(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    if n == 1:\n        return a\n    else:\n        for i in range(n-1):\n            a, b = b, a+b\n        return b\n    \n    \n    \ndef sum_arrays(arr1, arr2):\n    '''\n    Write a function to sum two arrays. \n    '''\n    #arr1 = arr1 + arr2\n    for i in range(len(arr1)):\n        arr1[i] = arr1[i] + arr2[i]\n    return arr1\n    \n    \n    \ndef sum_arrays_two_lists(arr1, arr2):\n    '''\n    Write a function to sum two arrays. \n    '''\n    for i in range(len(arr1)):\n        arr1[i] = arr1[i] + arr2[i]\n    return arr1\n    \n    \n    \ndef sum_arrays_gen(arr1, arr2):\n    '''\n    Write a function to sum two arrays. \n    '''\n    for i in range(len(arr1)):\n        arr1[i] = arr1[i] + arr2[i]\n    return arr1\n    \n    \n    \ndef sub_arrays(arr, k):\n    '''\n    Write a function to get sub-arrays with length k. \n    '''\n    #i=0\n    #arr=[]\n    #while i<len(arr):\n    #    arr.append(arr[i:i+k])\n    #    i=i+k\n    #return arr\n    #arr = []\n    #for i in range(len(arr)):\n    #    arr.append(arr[i:i+k])\n    #return arr\n    #i=0\n    #arr=[]\n    #while i<len(arr):\n    #    arr.append(arr[i:i+k])\n    #    i=i+k\n    #return arr\n    #print(arr)\n    for i in range(0, len(arr)):\n        if i+k > len(arr):\n            break\n        else:\n            arr[i] = arr[i:i+k]\n    return arr\n    \n    \n    \ndef sum_arrays_gen(arr, k):\n    '''\n    Write a function to sum two arrays. \n    '''\n    for i in range(0, len(arr)):\n        if i+k > len(arr):\n            break\n        else:\n            arr[i] = arr[i:i+k]\n    return arr\n    \n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function to remove duplicates from an array. \n    '''\n    #i=0\n    #j=0\n    #arr = []\n    #while i<len(arr):\n    #    while j<len(arr):\n    #        if arr[i] == arr[j]:\n    #            arr.remove(arr[j])\n    #            j-=1\n    #        else:\n    #            j+=1\n    #    i+=1\n    #return arr\n    #arr = []\n    #while i<len(arr):\n    #    if arr.count(arr[i]) == 1:\n    #        arr.remove(arr[i])\n    #    i+=1\n    #return arr\n    #i=0\n    #arr = []\n    #while i<len(arr):\n    #    if arr.count(arr[i]) == 1:\n    #        arr.remove(arr[i])\n    #    i+=1\n    #return arr\n    #i=0\n    #while i<len(arr):\n    #    j=i+1\n    #    while j<len(arr):\n    #        if arr[i] == arr[j]:\n    #            arr.remove(arr[j])\n    #        j+=1\n    #    i+=1\n    #return arr\n    #i=0\n    #while i<len(arr):\n    #    j=i+1\n    #    while j<len(arr):\n    #        if arr[i] == arr[j]:\n    #            arr.remove(arr[j])\n    #        j+=1\n    #    i+=1\n    #return arr\n    #i=0\n    #while i<len(arr):\n    #    j=i+1\n    #    while j<len(arr):\n    #        if arr[i] == arr[j]:\n    #            arr.remove(arr[j])\n    #            j-=1\n    #    i+=1\n    #return arr\n    #i=0\n    #while i<len(arr):\n    #    j=i+1\n    #    while j<len(arr):\n    #        if arr[i] == arr[j]:\n    #            arr.remove(arr[j])\n    #            j-=1\n    #    i+=1\n    #return arr\n    #i=0\n    #while i<len(arr):\n    #    j=i+1\n    #    while j<len(arr):\n    #        if arr[i] == arr[j]:\n    #            arr.remove(arr[j])\n    #            j-=1\n    #    i+=1\n    #return arr\n    i=0\n    while i<len(arr):\n        if i == 0 or arr[i]!= arr[i-1]:\n            j=i+1\n            while j<len(arr):\n                if arr[i] == arr[j]:\n                    arr.remove(arr[j])\n                    j-=1\n                j+=1\n        i+=1\n    return arr\n    \n    \n    \ndef remove_duplicates_two_lists(arr1, arr2):\n    '''\n    Write a function to remove duplicates from two sorted arrays. \n    '''\n    i=0\n    j=0\n    while i<len(arr1) and j<len(arr2):\n        if arr1[i] < arr2[j]:\n            i+=1\n        elif arr1[i] > arr2[j]:\n            j+=1\n        else:\n            arr1.remove(arr1[i])\n            i-=1\n    return arr1+arr2\n    \n    \n    \ndef reverse_array(arr):\n    '''\n    Write a function to reverse the order of a given array. \n    '''\n    #i=0\n    #arr.reverse()\n    #return arr\n    #for i in range(len(arr)):\n    #    arr.append(arr[i])\n    #return arr\n    #i=0\n    #arr.reverse()\n    #while i < len(arr):\n    #    arr[i] = arr[i+1]\n    #    i+=1\n    #return arr\n    #arr.reverse()\n    #arr = []\n    #i = len(arr)-1\n    #while i>=0:\n    #    arr.append(arr[i])\n    #    i-=1\n    #return arr\n    #i=0\n    #while i<len(arr):\n    #    j=len(arr)-1-i\n    #    arr[i] = arr[j]\n    #    i+=1\n    #return arr\n    #i=len(arr)-1\n    #while i>=0:\n    #    arr[i] = arr[i-1]\n    #    i-=1\n    #return arr\n    #i=0\n    #while i<len(arr):\n    #    j=i+1\n    #    while j<len(arr):\n    #        if arr[i] == arr[j]:\n    #            arr.remove(arr[j])\n    #            j-=1\n    #    i+=1\n    #return arr\n    #i=len(arr)-1\n    #while i>=0:\n    #    j=i"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    a = 4 * pi * r * r\n    return round(a, 3)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * math.pow(r, 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print(4 * math.pi * r**2)\ndef surfacearea_cube(l,w,h):\n    '''\n    Write a function to calculate the surface area of a cube.\n    '''\n    print(6 * l * w + 2 * w * h + 2 * h * l)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    print(2 * math.pi * r * h + 2 * math.pi * r**2)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    print(2 * math.pi * r * h + 2 * math.pi * r**2 - 2 * math.pi * r * math.sin(h))\ndef surfacearea_righttriangle(b,h):\n    '''\n    Write a function to calculate the surface area of a right-angle triangle.\n    '''\n    print((b**2 + h**2) / 2)\ndef surfacearea_triangle(a,b,h):\n    '''\n    Write a function to calculate the surface area of a right-angle triangle.\n    '''\n    print((a + b + h) / 2)\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    print(4/3 * math.pi * r**3)\ndef volume_cube(l,w,h):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    print(6 * l * w * h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    print(math.pi * r**2 * h)\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    print((math.pi * r**2 + math.pi * r * math.sin(h)) / 2)\ndef volume_righttriangle(b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((math.sqrt(b**2 + h**2) * 2) / 3)\ndef volume_triangle(a,b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((a + b + h) / 2)\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    print(4/3 * math.pi * r**3)\ndef volume_cube(l,w,h):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    print(6 * l * w * h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    print(math.pi * r**3 * h)\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    print((math.pi * r**3 + math.pi * r * math.sin(h)) / 2)\ndef volume_righttriangle(b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((math.sqrt(b**2 + h**2) * 2) / 3)\ndef volume_triangle(a,b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((a + b + h) / 2)\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    print(4/3 * math.pi * r**3)\ndef volume_cube(l,w,h):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    print(6 * l * w * h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    print(math.pi * r**3 * h)\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    print((math.pi * r**3 + math.pi * r * math.sin(h)) / 2)\ndef volume_righttriangle(b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((math.sqrt(b**2 + h**2) * 2) / 3)\ndef volume_triangle(a,b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((a + b + h) / 2)\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    print(4/3 * math.pi * r**3)\ndef volume_cube(l,w,h):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    print(6 * l * w * h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    print(math.pi * r**3 * h)\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    print((math.pi * r**3 + math.pi * r * math.sin(h)) / 2)\ndef volume_righttriangle(b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((math.sqrt(b**2 + h**2) * 2) / 3)\ndef volume_triangle(a,b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((a + b + h) / 2)\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    print(4/3 * math.pi * r**3)\ndef volume_cube(l,w,h):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    print(6 * l * w * h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    print(math.pi * r**3 * h)\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    print((math.pi * r**3 + math.pi * r * math.sin(h)) / 2)\ndef volume_righttriangle(b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((math.sqrt(b**2 + h**2) * 2) / 3)\ndef volume_triangle(a,b,h):\n    '''\n    Write a function to calculate the volume of a right-angle triangle.\n    '''\n    print((a + b + h) / 2)\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    print(4/3 * math.pi * r**3)\ndef volume_cube(l,w,h):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    print(6 * l * w * h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    print(math.pi * r**3 * h)\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    print((math.pi * r**3 + math.pi * r * math.si"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = (4*math.pi*r**2)\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r**2\n    print(\"The surface area of the sphere is \",area)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r ** 2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #A=4*pi*(r**2)\n    a=4*math.pi*(r**2)\n    return a\ndef surfacearea_cube(w,l,h):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    #A=2*w*l+2*w*h+2*h*l\n    a=2*w*l+2*w*h+2*h*l\n    return a\ndef surfacearea_parallelepiped(l1,w1,h1):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    #A=(l1+w1+h1)/2*l1*w1\n    a=(l1+w1+h1)/2*l1*w1\n    return a\ndef surfacearea_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    #A=1/2*a*b*c*d\n    a=1/2*a*b*c*d\n    return a\ndef surfacearea_octahedron(a,b,c):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    #A=3*a*b*c\n    a=3*a*b*c\n    return a\ndef surfacearea_dodecahedron(a,b,c,d,e):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    #A=3*a*b*c+2*a*b*e+2*a*c*d+2*a*e*d+a*e*c\n    a=3*a*b*c+2*a*b*e+2*a*c*d+2*a*e*d+a*e*c\n    return a\ndef surfacearea_icosahedron(a,b,c):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    #A=5*a*b*c\n    a=5*a*b*c\n    return a\ndef surfacearea_trapezoid(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    #A=(a+b)/2*h\n    a=(a+b)/2*h\n    return a\ndef surfacearea_rpy_parallelepiped(l1,w1,h1):\n    '''\n    Write a function to find the surface area of a parallelepiped\n    which has radius r and height h, using the following formulas:\n    A=1/2*pi*r*(r+l1)\n    A=1/2*pi*w1*(w1+l1+h1)\n    '''\n    #A=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    a=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    return a\ndef surfacearea_rpy_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the surface area of a tetrahedron\n    which has radius r and height h, using the following formulas:\n    A=1/2*pi*r*(r+l1)\n    A=1/2*pi*w1*(w1+l1+h1)\n    '''\n    #A=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    a=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    return a\ndef surfacearea_rpy_dodecahedron(a,b,c,d,e):\n    '''\n    Write a function to find the surface area of a dodecahedron\n    which has radius r and height h, using the following formulas:\n    A=1/2*pi*r*(r+l1)\n    A=1/2*pi*w1*(w1+l1+h1)\n    '''\n    #A=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    a=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    return a\ndef surfacearea_rpy_icosahedron(a,b,c):\n    '''\n    Write a function to find the surface area of an icosahedron\n    which has radius r and height h, using the following formulas:\n    A=1/2*pi*r*(r+l1)\n    A=1/2*pi*w1*(w1+l1+h1)\n    '''\n    #A=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    a=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    return a\ndef surfacearea_rpy_trapezoid(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezoid\n    which has radius r and height h, using the following formulas:\n    A=1/2*pi*r*(r+l1)\n    A=1/2*pi*w1*(w1+l1+h1)\n    '''\n    #A=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    a=(l1+w1+h1)/2*math.pi*r*(r+l1)\n    return a\ndef surfacearea_sphere_from_radius(r):\n    '''\n    Write a function to find the surface area of a sphere\n    given the radius of the sphere.\n    '''\n    #A=4*pi*r**2\n    a=4*math.pi*(r**2)\n    return a\ndef surfacearea_cube_from_side(s):\n    '''\n    Write a function to find the surface area of a cube\n    given the length of each side.\n    '''\n    #A=2*s*s\n    a=2*s*s\n    return a\ndef surfacearea_parallelepiped_from_sides(l1,w1,h1):\n    '''\n    Write a function to find the surface area of a parallelepiped\n    given the length of each side.\n    '''\n    #A=(l1+w1+h1)/2*l1*w1\n    a=(l1+w1+h1)/2*l1*w1\n    return a\ndef surfacearea_tetrahedron_from_sides(a,b,c,d):\n    '''\n    Write a function to find the surface area of a tetrahedron\n    given the lengths of each side.\n    '''\n    #A=1/2*a*b*c\n    a=1/2*a*b*c\n    return a\ndef surfacearea_octahedron_from_sides(a,b,c):\n    '''\n    Write a function to find the surface area of an octahedron\n    given the lengths of each side.\n    '''\n    #A=3*a*b*c\n    a=3*a*b*c\n    return a\ndef surfacearea_dodecahedron_from_sides(a,b,c,d,e):\n    '''\n    Write a function to find the surface area of a dodecahedron\n    given the lengths of each side.\n    '''\n    #A=3*a*b*c+2*a*b*e+2*a*c*d+2*a*e*d+a*e*c\n    a=3*a*b*c+2*a*b*e+2*a*c*d+2*a*e*d+a*e*c\n    return a\ndef surfacearea_icosahedron_from_sides(a,b,c):\n    '''\n    Write a function to find the surface area of an icos"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (1 + 2 * (1 - 1/sqrt(3))**n) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    base = 6\n    if n % 2 == 0:\n        return hex(base ** n)\n    return hex(base * (1 + (n - 1) // 2))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = 0\n    # Your code here\n    while n > 0:\n        result = result + 2 * (n - 1) + 1\n        n = n - 1\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n*(3*n-1)//2 + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    assert n > 0\n    assert n < 1e9\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # H_n = sqrt(n * (n + 1) / 2)\n    \n    # return H_n\n    \n    return sqrt(n * (n + 1) / 2)\n    \n    \ncentered_hexagonal_number(8)\ncentered_hexagonal_number(3)\ncentered_hexagonal_number(30)\ncentered_hexagonal_number(12)\ncentered_hexagonal_number(20)\ncentered_hexagonal_number(100)\ncentered_hexagonal_number(3)\ncentered_hexagonal_number(101)\ncentered_hexagonal_number(200)\ncentered_hexagonal_number(300)\ncentered_hexagonal_number(400)"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n * (2 * n - 1) + 1) / 2)\n    \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((1 + sqrt(3)) ** n - (1 - sqrt(3)) ** n) / (2 * sqrt(3))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return 0\n    k = 2*math.sqrt(3)\n    p = 1\n    q = 1\n    a = -1\n    while True:\n        if n == 1:\n            return int((a+b+c)//4)\n        \n        if (a-b) % p == 0:\n            return int((a+b)//2)\n        else:\n            a = a + p\n            if a == n:\n                return (a+b)//2\n            else:\n                q = q * k\n                p = p + q\n        \n        \ndef find_nth_tribonacci_number(n):\n    '''\n    Write a function to find nth Tribonacci number.\n    '''\n    a = 0\n    b = 1\n    c = 1\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    if n == 2:\n        return c\n    for i in range(3,n+1):\n        temp = a+b+c\n        a = b\n        b = c\n        c = temp\n    return temp\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return n\n    else:\n        return (n*(2*n-1)*(2*n-2)) // (6*n-5)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict((key,dict1.get(key,0) + dict2.get(key,0) + dict3.get(key,0)) for key in set(dict1).union(set(dict2),set(dict3)))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #define an empty dict to save the result\n    result_dict = {}\n    #create a dictionary to save the number of each key\n    key_dict = {}\n    #use for loop to travers the first dictionary\n    for key in dict1:\n        #add the key of dict1 into the dict to save the value of dict1[key]\n        result_dict[key] = dict1[key]\n        #add the key of dict2 into the dict to save the value of dict2[key]\n        result_dict[key] += dict2[key]\n        #add the key of dict3 into the dict to save the value of dict3[key]\n        result_dict[key] += dict3[key]\n        #add the key of dict1 into the dict to save the value of dict1[key]\n        result_dict[key] = result_dict[key]/3\n        #add the key of dict2 into the dict to save the value of dict2[key]\n        result_dict[key] = result_dict[key]/3\n        #add the key of dict3 into the dict to save the value of dict3[key]\n        result_dict[key] = result_dict[key]/3\n    #use for loop to travers the second dictionary\n    for key in dict2:\n        #add the key of dict2 into the dict to save the value of dict2[key]\n        result_dict[key] = dict2[key]\n        #add the key of dict1 into the dict to save the value of dict1[key]\n        result_dict[key] += dict1[key]\n        #add the key of dict2 into the dict to save the value of dict2[key]\n        result_dict[key] += dict3[key]\n        #add the key of dict2 into the dict to save the value of dict2[key]\n        result_dict[key] = result_dict[key]/3\n    #use for loop to travers the third dictionary\n    for key in dict3:\n        #add the key of dict3 into the dict to save the value of dict3[key]\n        result_dict[key] = dict3[key]\n        #add the key of dict2 into the dict to save the value of dict2[key]\n        result_dict[key] += dict1[key]\n        #add the key of dict3 into the dict to save the value of dict3[key]\n        result_dict[key] += dict2[key]\n        #add the key of dict3 into the dict to save the value of dict3[key]\n        result_dict[key] = result_dict[key]/3\n    return result_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items() + dict2.items() + dict3.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    d.update(dict1)\n    d.update(dict2)\n    d.update(dict3)\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    print(dict1,dict2,dict3)\n    d = {}\n    for k, v in dict1.items():\n        d[k] = v\n    for k, v in dict2.items():\n        d[k] = v\n    for k, v in dict3.items():\n        d[k] = v\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create a empty dictionary\n    dict1 = {}\n    # Loop through the elements in the list\n    for i in list1:\n        # Check if the element is in the dictionary\n        if i in dict1:\n            # Increment the value in the dictionary\n            dict1[i] += 1\n        else:\n            # Add the element to the dictionary\n            dict1[i] = 1\n    # Return the dictionary\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # your code here\n    d = {}\n    for word in list1:\n        if word in d:\n            d[word] = d[word]+1\n        else:\n            d[word] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for x in list1:\n        freq_dict[x] = list1.count(x)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        if list1[i] not in freq:\n            freq[list1[i]] = 1\n        else:\n            freq[list1[i]] += 1\n    print(freq)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if not list1:\n        return {}\n    counts = collections.defaultdict(int)\n    for item in list1:\n        counts[item] += 1\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #Create an empty dictionary\n    freq_dict = collections.defaultdict(int)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = {}\n    for elem in list1:\n        if elem in dict:\n            dict[elem] += 1\n        else:\n            dict[elem] = 1\n    return dict\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N < 0:\n        return N\n    if N == 0:\n        return 0\n    \n    target = N\n    \n    i = 1\n    while i < N:\n        if abs(i - target) < abs(i - (target - 1)):\n            target -= 1\n        else:\n            target += 1\n        i += 1\n    \n    return target"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return n // 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N < 1:\n        return N\n    else:\n        return (N - 1) if N >= 10 else (N - 1) // 10 * 10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(N, key=lambda x:abs(N-x))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return -1 if n < 0 else n - 1 if n % 1 == 0 else n - 1.5 if n - 1.5 > 0 else n - 2 if n - 2 > 0 else n - 3 if n - 3 > 0 else n - 4 if n - 4 > 0 else n - 5 if n - 5 > 0 else n - 6 if n - 6 > 0 else n - 7 if n - 7 > 0 else n - 8 if n - 8 > 0 else n - 9 if n - 9 > 0 else n - 10 if n - 10 > 0 else n - 11 if n - 11 > 0 else n - 12 if n - 12 > 0 else n - 13 if n - 13 > 0 else n - 14 if n - 14 > 0 else n - 15 if n - 15 > 0 else n - 16 if n - 16 > 0 else n - 17 if n - 17 > 0 else n - 18 if n - 18 > 0 else n - 19 if n - 19 > 0 else n - 20 if n - 20 > 0 else n - 21 if n - 21 > 0 else n - 22 if n - 22 > 0 else n - 23 if n - 23 > 0 else n - 24 if n - 24 > 0 else n - 25 if n - 25 > 0 else n - 26 if n - 26 > 0 else n - 27 if n - 27 > 0 else n - 28 if n - 28 > 0 else n - 29 if n - 29 > 0 else n - 30 if n - 30 > 0 else n - 31 if n - 31 > 0 else n - 32 if n - 32 > 0 else n - 33 if n - 33 > 0 else n - 34 if n - 34 > 0 else n - 35 if n - 35 > 0 else n - 36 if n - 36 > 0 else n - 37 if n - 37 > 0 else n - 38 if n - 38 > 0 else n - 39 if n - 39 > 0 else n - 40 if n - 40 > 0 else n - 41 if n - 41 > 0 else n - 42 if n - 42 > 0 else n - 43 if n - 43 > 0 else n - 44 if n - 44 > 0 else n - 45 if n - 45 > 0 else n - 46 if n - 46 > 0 else n - 47 if n - 47 > 0 else n - 48 if n - 48 > 0 else n - 49 if n - 49 > 0 else n - 50 if n - 50 > 0 else n - 51 if n - 51 > 0 else n - 52 if n - 52 > 0 else n - 53 if n - 53 > 0 else n - 54 if n - 54 > 0 else n - 55 if n - 55 > 0 else n - 56 if n - 56 > 0 else n - 57 if n - 57 > 0 else n - 58 if n - 58 > 0 else n - 59 if n - 59 > 0 else n - 60 if n - 60 > 0 else n - 61 if n - 61 > 0 else n - 62 if n - 62 > 0 else n - 63 if n - 63 > 0 else n - 64 if n - 64 > 0 else n - 65 if n - 65 > 0 else n - 66 if n - 66 > 0 else n - 67 if n - 67 > 0 else n - 68 if n - 68 > 0 else n - 69 if n - 69 > 0 else n - 70 if n - 70 > 0 else n - 71 if n - 71 > 0 else n - 72 if n - 72 > 0 else n - 73 if n - 73 > 0 else n - 74 if n - 74 > 0 else n - 75 if n - 75 > 0 else n - 76 if n - 76 > 0 else n - 77 if n - 77 > 0 else n - 78 if n - 78 > 0 else n - 79 if n - 79 > 0 else n - 80 if n - 80 > 0 else n - 81 if n - 81 > 0 else n - 82 if n - 82 > 0 else n - 83 if n - 83 > 0 else n - 84 if n - 84 > 0 else n - 85 if n - 85 > 0 else n - 86 if n - 86 > 0 else n - 87 if n - 87 > 0 else n - 88 if n - 88 > 0 else n - 89 if n - 89 > 0 else n - 90 if n - 90 > 0 else n - 91 if n - 91 > 0 else n - 92 if n - 92 > 0 else n - 93 if n - 93 > 0 else n - 94 if n - 94 > 0 else n - 95 if n - 95 > 0 else n - 96 if n - 96 > 0 else n - 97 if n - 97 > 0 else n - 98 if n - 98 > 0 else n - 99 if n - 99 > 0 else n - 100 if n - 100 > 0 else n - 101 if n - 101 > 0 else n - 102 if n - 102 > 0 else n - 103 if n - 103 > 0 else n - 104 if n - 104 > 0 else n - 105 if n - 105 > 0 else n - 106 if n - 106 > 0 else n - 107 if n - 107 > 0 else n - 108 if n - 108 > 0 else n - 109 if n - 109 > 0 else n - 110 if n - 110 > 0 else n - 111 if n - 111 > 0 else n - 112 if n - 112 > 0 else n - 113 if n - 113 > 0 else n - 114 if n - 114 > 0 else n - 115 if n - 115 > 0 else n - 116 if n - 116 > 0 else n - 117 if n - 117 > 0 else n - 118 if n - 118 > 0 else n - 119 if n - 119 > 0 else n - 120 if n - 120 > 0 else n - 121 if n - 121 > 0 else n - 122 if n - 122 > 0 else n - 123 if n - 123 > 0 else n - 124 if n - 124 > 0 else n - 125 if n - 125 > 0 else n - 126 if n - 126 > 0 else n - 127 if n - 127 > 0 else n - 128 if n - 128 > 0 else n - 129 if n - 129 > 0 else n - 130 if n - 130 > 0 else n - 131 if n - 131 > 0 else n - 132 if n - 132 > 0 else n - 133 if n - 133 > 0 else n - 134 if n - 134 > 0 else n - 135 if n - 135 > 0 else n - 136 if n - 136 > 0 else n - 137 if n - 137 > 0 else n - 138 if n - 138 > 0 else n - 139 if n - 139 > 0 else n - 140 if n - 140 > 0 else n - 141 if n - 141 > 0 else n - 142 if n - 142 > 0 else n - 143 if n - 143 > 0 else n - 144 if n - 144 > 0 else n - 145 if n - 145 > 0 else n - 146 if n - 146 > 0 else n - 147 if n - 147 > 0 else n - 148 if n - 148 > 0 else n - 149 if n - 149 > 0 else n - 150 if n - 150 > 0 else n - 151 if n - 151 > 0 else n - 152 if n - 152 > 0 else n - 153 if n - 153 > 0 else n - 154 if n - 154 > 0 else n - 155 if n - 155 > 0 else n - 156 if n - 156 > 0 else n - 157 if n - 157 > 0 else n - 158 if n - 158 > 0 else n - 159 if n - 159 > 0 else n - 160 if n - 160 > 0 else n - 161 if n - 161 > 0 else n - 162 if n - 162 > 0 else n - 163 if n - 163 > 0 else n - 164 if n - 164 > 0 else n - 165 if n - 165 > 0 else n - 166 if n - 166 > 0 else n - 167 if n - 167 > 0 else n - 168 if n - 168 > 0 else n - 169 if n - 169 > 0 else n - 170 if n - 170 > 0 else n - 171 if n - 171 > 0 else n - 172 if n - 172 > 0 else n - 173 if n - 173 > 0 else n - 174 if n - 174 > 0 else n - 175 if n - 175 > 0 else n - 176 if n - 176 > 0 else n - 177 if n - 177 > 0 else n - 178 if n - 178 > 0 else n - 179 if n - 179 > 0 else n - 180 if n - 180 > 0 else n - 181 if n - 181 > 0 else n - 182 if n - 182 > 0 else n - 183 if n - 183 > 0 else n - 184 if n - 184 > 0 else n - 185 if n - 185 > 0 else n - 186 if n - 186 > 0 else n - 187 if n - 187 > 0 else n - 188 if n - 188 > 0 else n - 189 if n - 189 > 0 else n - 190 if n - 190 > 0 else n - 191 if n - 191 > 0 else n - 192 if n - 192 > 0 else n - 193 if n - 193 > 0 else n - 194 if n - 194 > 0 else n - 195 if n - 195 > 0 else n - 196 if n - 196 > 0 else n - 197 if n - 197 > 0 else n - 198 if n - 198 > 0 else n - 199 if n - 199 > 0 else n - 200 if "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = []\n    for i in range(1,N+1):\n        if N%i == 0:\n            l.append(i)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_n = 0\n    for i in range(1,N):\n        if N == i:\n            continue\n        else:\n            if N - i < smaller_n:\n                smaller_n = N - i\n    return smaller_n\n    \ndef closest_num2(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_dist = N - 1\n    for i in range(1, N):\n        if N - i < min_dist:\n            min_dist = N - i\n    return min_dist\n    \n    \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest(N):\n        if (N-1)%2 == 0:\n            return (N-1)//2\n        else:\n            return (N-1)//2+1\n    return closest(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(1,N):\n        if N - i >= 0:\n            if N - i < abs(N - i - 1):\n                ans = N - i\n            elif N - i > abs(N - i - 1):\n                ans = N - i - 1\n            else:\n                ans = N - i\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert isinstance(N, int)\n    assert N > 0\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(len(word) for word in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = list1\n    max_length = 0\n    for i in words:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort()\n    list1 = list1.sort()\n    print(len(list1))\n    print(list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for i in range(len(list1)):\n        word_len.append(len(list1[i]))\n    return word_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_list = []\n    for word in list1:\n        word_list.append(word)\n    print(word_list)\n    length = 0\n    for word in word_list:\n        length = length + 1\n    print(\"The length of the word is: \" + str(length))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    temp = list1\n    length = []\n    for i in range(len(temp)):\n        temp = temp.strip()\n        if temp!= '':\n            length.append(len(temp))\n    return max(length)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_count = len(max(list1, key=len))\n    print(max_count)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    x = len(max(list1, key=len))\n    return x\n    \ndef get_longest(list1):\n    '''\n    Write a python function to return the longest word from the list.\n    '''\n    max_word = max(list1, key=len)\n    return max_word\n    \ndef str_to_int(list1):\n    '''\n    Write a python function to convert a string to a list of integers.\n    '''\n    list2 = list(map(int, list1))\n    return list2\n    \ndef list_to_str(list1):\n    '''\n    Write a python function to convert a list of integers to a string.\n    '''\n    return str(list1)\n    \ndef str_to_list(str1):\n    '''\n    Write a python function to convert a string to a list of characters.\n    '''\n    list3 = list(str1)\n    return list3\n    \ndef max_frequency(str1):\n    '''\n    Write a python function to find the maximum frequency of a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    max_freq = max(dict.values())\n    return max_freq\n    \ndef min_frequency(str1):\n    '''\n    Write a python function to find the minimum frequency of a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    min_freq = min(dict.values())\n    return min_freq\n    \ndef str_to_dict(str1):\n    '''\n    Write a python function to convert a string to a dictionary.\n    '''\n    d = dict()\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n    \ndef list_to_dict(list1):\n    '''\n    Write a python function to convert a list of characters to a dictionary.\n    '''\n    d = dict()\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n    \ndef max_from_dict(dict1):\n    '''\n    Write a python function to find the maximum length of a dictionary.\n    '''\n    x = max(len(dict1), key=len)\n    return x\n    \ndef min_from_dict(dict1):\n    '''\n    Write a python function to find the minimum length of a dictionary.\n    '''\n    x = min(len(dict1), key=len)\n    return x\n    \ndef dict_to_str(dict1):\n    '''\n    Write a python function to convert a dictionary to a string.\n    '''\n    str1 = str(dict1)\n    return str1\n    \ndef max_frequency_word(str1):\n    '''\n    Write a python function to find the maximum frequency of a given word.\n    '''\n    dict = {}\n    for i in str1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    max_freq = max(dict.values())\n    for k,v in dict.items():\n        if v == max_freq:\n            return k\n    return None\n    \ndef min_frequency_word(str1):\n    '''\n    Write a python function to find the minimum frequency of a given word.\n    '''\n    dict = {}\n    for i in str1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    min_freq = min(dict.values())\n    for k,v in dict.items():\n        if v == min_freq:\n            return k\n    return None\n    \ndef dict_to_str_word(dict1):\n    '''\n    Write a python function to convert a dictionary to a string of words.\n    '''\n    str1 = \" \"\n    str1 += str(dict1)\n    return str1\n    \ndef max_frequency_word_from_dict(dict1):\n    '''\n    Write a python function to find the maximum frequency of a given word.\n    '''\n    max_freq = max(dict1.values())\n    for k,v in dict1.items():\n        if v == max_freq:\n            return k\n    return None\n    \ndef min_frequency_word_from_dict(dict1):\n    '''\n    Write a python function to find the minimum frequency of a given word.\n    '''\n    min_freq = min(dict1.values())\n    for k,v in dict1.items():\n        if v == min_freq:\n            return k\n    return None\n    \ndef dict_to_str_word_from_dict(dict1):\n    '''\n    Write a python function to convert a dictionary to a string of words.\n    '''\n    str1 = \" \"\n    str1 += str(dict1)\n    return str1\n    \ndef is_word_present(str1, word):\n    '''\n    Write a python function to check if a word is present in the string.\n    '''\n    if word in str1:\n        return True\n    else:\n        return False\n    \ndef word_count(str1, word):\n    '''\n    Write a python function to count the number of times a word repeats in a given string.\n    '''\n    if word in str1:\n        return str1.count(word)\n    else:\n        return 0\n    \ndef word_in_str(str1, word):\n    '''\n    Write a python function to check if a word is present in the string.\n    '''\n    if word in str1:\n        return True\n    else:\n        return False\n    \ndef find_repeating_chars(str1):\n    '''\n    Write a python function to count the number of times a word repeats in a given string.\n    '''\n    s = set(str1)\n    new_list = list(s)\n    new_list.sort()\n    for i in range(len(new_list)-1):\n        if new_list[i+1] == new_list[i]:\n            return new_list[i]\n            \ndef repeated_word(str1):\n    '''\n    Write a python function to count the number of times a word repeats in a given string.\n    '''\n    list1 = str1.split()\n    new_list = []\n    for i in range(len(list1)):\n        x = find_repeating_chars(list1[i])\n        if x!= None:\n            new_list.append(x)\n    return new_list\n    \ndef remove_letters(str1):\n    '''\n    Write a python function to find the letters that are present more than once in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    list1 = []\n    for k,v in d.items():\n        if v == 1:\n            list1.append(k)\n    return list1\n    \ndef is_letters_present(str1, letter):\n    '''\n    Write a python function to find if a letter is present in the given string.\n    '''\n    if letter in str1:\n        return True\n    else:\n        return False\n    \ndef count_letters(str1, letter):\n    '''\n    Write a python function to find the number of times a letter is present in the string.\n    '''\n    count = 0\n    for i in str1:\n        if i == letter:\n            count += 1\n    return count\n    \ndef replace_letters(str1, old, new):\n    '''\n    Write a python function to replace all the occurrences of a particular letter in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == old:\n            str1 = str1[:i] + new + st"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in x for x in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in str1:\n        if i in sub_str:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Your code here\n    # print(len(sub_str))\n    # print(len(str1))\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # str1 = 'y'\n    # sub_str = 'o'\n    # print(str1.find(sub_str))\n    # return True if str1.find(sub_str) > -1 else False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    for i in range(len(str1)):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return 'The string'+ str1 +'is present in the list of strings'+ sub_str + '.'\n    else:\n        return 'The string'+ str1 +'is not present in the list of strings'+ sub_str + '.'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initializing value of n\n    n = float(n) \n    # Checking if n is perfect square.\n    if(n ** 0.5) % 1 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return True\n    elif n == 2:\n        return True\n    elif n % 3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    sq = int(sqrt(n))\n    for i in range(3, sq + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    while n>0:\n        if n%10==2:\n            return False\n        n=n//10\n    return True\nprint(is_undulating(9))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0 or n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    squareroot=int(n**0.5)\n    if squareroot**2==n:\n        return True\n    for i in range(3,squareroot+1,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a, b, c = 0, 0, 0\n    if n <= 0:\n        return False\n    while (a <= n):\n        if n == 0:\n            return True\n        if n % a == 0:\n            return False\n        else:\n            a += 1\n    while (b <= n):\n        if n == 0:\n            return True\n        if n % b == 0:\n            return False\n        else:\n            b += 1\n    while (c <= n):\n        if n == 0:\n            return True\n        if n % c == 0:\n            return False\n        else:\n            c += 1\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 2\n    return count == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n%2!= 0 and n%3!= 0) or (n%5!= 0 and n%7!= 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==0 and b==0:\n        return 0\n    elif b==0:\n        return 1\n    if a<0 or b<0:\n        return -(power(a,-b))\n    return (a*power(a,b-1))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if type(a)!= int and type(a)!= float:\n        raise TypeError\n    if type(b)!= int and type(b)!= float:\n        raise TypeError\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    c=a**b\n    return c\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #z = (a ** b)\n    #print (z)\n    return (a ** b)\nprint (power(2,4))"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #My approach is not that easy because I have to use the exponentiation operator: **.\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n    \nprint(power(2,4))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    p = power(a,b//2)\n    if b % 2:\n        return p * p * a\n    else:\n        return p * p\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Make a dictionary with the values and their index as key-value pairs.\n    dict = {}\n    for i in range(len(test_list)):\n        dict[test_list[i][1]] = i\n    # Find the index with the smallest value as key and its corresponding value as value.\n    return min(dict, key=dict.get), dict[min(dict, key=dict.get)]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = (test_list[0])\n    for val in test_list:\n        if val[0]<min_val[0]:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_smallest = min(enumerate(test_list), key=itemgetter(1))\n    return index_smallest[0],index_smallest[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #print(test_list)\n    #print(test_list)\n    index=0\n    for i in range(0,len(test_list)):\n        #print(i,test_list[i])\n        if test_list[i][1]<test_list[index][1]:\n            index=i\n    return test_list[index]\ntest_list= [(5,2),(3,4),(7,1),(1,3)]\nprint(index_minimum(test_list))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tuple = test_list[0]\n    for x in test_list:\n        if x[1] < min_tuple[1]:\n            min_tuple = x\n    return min_tuple\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list_copy = test_list.copy()\n    #print(\"test_list: \", test_list)\n    #print(\"test_list_copy: \", test_list_copy)\n    test_list_copy.sort(key=itemgetter(1,0))\n    #print(\"sorted by first element and second element: \", test_list_copy)\n    return test_list_copy[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    lst = sorted(test_list, key=lambda x: x[1])\n    return lst[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in test_list:\n        if i[1] < minimum[1]:\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j == 1:\n                return test_list[i][0]\n                \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=len(lst[0])\n    for i in lst:\n        length=len(i)\n        if length<min_length:\n            min_length=length\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    temp = []\n    for i in lst:\n        if isinstance(i,list) == True:\n            temp += i\n    return len(min(temp, key=len))\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) < len(smallest_list):\n            smallest_list = lst[i]\n    return len(smallest_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return min\n            \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0][0]\n    for i in range(len(lst)):\n        if lst[i][0] < min_len:\n            min_len = lst[i][0]\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    len_lst = []\n    for i in range(len(lst)):\n        len_lst.append(len(lst[i]))\n    \n    len_lst.sort()\n    return(len_lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for list in lst:\n        if min_length == 0:\n            min_length = len(list)\n        elif len(list) < min_length:\n            min_length = len(list)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    while i < n:\n        if n % i == 0:\n            print(i)\n        i += 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    #Exercise 4\n    n = int(n)\n    divisor = 0\n    if n > 0:\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisor += 1\n    else:\n        divisor = 0\n    return divisor\n    \n    \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    x=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            x.append(i)\n    return x\n    \nprint(divisor(10))\nprint(divisor(2))\nprint(divisor(4))\nprint(divisor(5))\nprint(divisor(6))\nprint(divisor(7))\nprint(divisor(8))\nprint(divisor(9))\nprint(divisor(10))\nprint(divisor(11))\nprint(divisor(12))\nprint(divisor(13))\nprint(divisor(14))\nprint(divisor(15))\nprint(divisor(16))\nprint(divisor(17))\nprint(divisor(18))\nprint(divisor(19))\nprint(divisor(20))\nprint(divisor(21))\nprint(divisor(22))\nprint(divisor(23))\nprint(divisor(24))\nprint(divisor(25))\nprint(divisor(26))\nprint(divisor(27))\nprint(divisor(28))\nprint(divisor(29))\nprint(divisor(30))\nprint(divisor(31))\nprint(divisor(32))\nprint(divisor(33))\nprint(divisor(34))\nprint(divisor(35))\nprint(divisor(36))\nprint(divisor(37))\nprint(divisor(38))\nprint(divisor(39))\nprint(divisor(40))\nprint(divisor(41))\nprint(divisor(42))\nprint(divisor(43))\nprint(divisor(44))\nprint(divisor(45))\nprint(divisor(46))\nprint(divisor(47))\nprint(divisor(48))\nprint(divisor(49))\nprint(divisor(50))\nprint(divisor(51))\nprint(divisor(52))\nprint(divisor(53))\nprint(divisor(54))\nprint(divisor(55))\nprint(divisor(56))\nprint(divisor(57))\nprint(divisor(58))\nprint(divisor(59))\nprint(divisor(60))\nprint(divisor(61))\nprint(divisor(62))\nprint(divisor(63))\nprint(divisor(64))\nprint(divisor(65))\nprint(divisor(66))\nprint(divisor(67))\nprint(divisor(68))\nprint(divisor(69))\nprint(divisor(70))\nprint(divisor(71))\nprint(divisor(72))\nprint(divisor(73))\nprint(divisor(74))\nprint(divisor(75))\nprint(divisor(76))\nprint(divisor(77))\nprint(divisor(78))\nprint(divisor(79))\nprint(divisor(80))\nprint(divisor(81))\nprint(divisor(82))\nprint(divisor(83))\nprint(divisor(84))\nprint(divisor(85))\nprint(divisor(86))\nprint(divisor(87))\nprint(divisor(88))\nprint(divisor(89))\nprint(divisor(90))\nprint(divisor(91))\nprint(divisor(92))\nprint(divisor(93))\nprint(divisor(94))\nprint(divisor(95))\nprint(divisor(96))\nprint(divisor(97))\nprint(divisor(98))\nprint(divisor(99))\nprint(divisor(100))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Initializing count\n    count = 0\n    # Initializing factor of the given integer\n    for i in range(1, n):\n        if (n % i == 0):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            divs += 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # total = 1\n    # for i in range(2,n):\n    #     if n % i == 0:\n    #         total+=1\n    # return total\n    return sum(range(2,n+1)) if n > 1 else 1\n    # return sum(range(2,n+1))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if j in d.keys():\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Code here\n    new_list=[]\n    for i in list1:\n        new_list.extend(i)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    count = {}\n    for x in list1:\n        if x not in count:\n            count[x] = 0\n        else:\n            count[x] = count[x] + 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if dictionary.get(list1[i][j]) == None:\n                dictionary[list1[i][j]] = 1\n            else:\n                dictionary[list1[i][j]] += 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # num_list = []\n    # for i in list1:\n    #     num_list = num_list + i\n    # for i in num_list:\n    #     print(i)\n    #     print(num_list.count(i))\n    return {i:num_list.count(i) for i in num_list}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        for num in item:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for elem in list1:\n        if elem in frequency:\n            frequency[elem] += 1\n        else:\n            frequency[elem] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict.keys():\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result *= x\n    return result / len(numbers)\n    \nmultiply_num([1,2,3,4])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = list(numbers)\n    if len(numbers) == 0:\n        return 1\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    result = 1\n    for number in numbers:\n        result *= number\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    print(total)\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult = 1\n    result = 0\n    for i in numbers:\n        mult *= i\n    length = len(numbers)\n    result = mult / length\n    return result\n        \nprint(multiply_num([1,2,3,4,5]))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not numbers:\n        return 1\n    return reduce(lambda a, b: a * b, numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_list = numbers.split(',')\n    \n    multiply_num_result = 1\n    for num in numbers_list:\n        multiply_num_result *= int(num)\n        \n    result = float(multiply_num_result / len(numbers_list))\n    \n    return result\n    \ndef reverse_num(numbers):  \n    '''\n    Write a function that reverses the numbers in a list.\n    '''\n    numbers_list = numbers.split(',')\n    \n    for i in range(len(numbers_list)):\n        numbers_list[i] = int(numbers_list[i])\n        \n    numbers_list = numbers_list[::-1]\n    \n    return ','.join(str(x) for x in numbers_list)\n    \n    \ndef sort_list(numbers):  \n    '''\n    Write a function to sort a list by its first element.\n    '''\n    numbers_list = numbers.split(',')\n    \n    numbers_list.sort(key=lambda x: int(x))\n    \n    return ','.join(str(x) for x in numbers_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    return numbers*len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for i in numbers:\n        sum *= i\n    \n    return sum / len(numbers)\n    \n    #return sum\n    \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return str(n)\n    return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    decimal_to_binary_map = {\n        0:'0',\n        1:'1',\n        2:'10',\n        3:'11',\n        4:'100',\n        5:'101',\n        6:'110',\n        7:'111'\n    }\n    binary_string = ''\n    while(n!= 0):\n        binary_string = decimal_to_binary_map[n % 2] + binary_string\n        n = n // 2\n    return binary_string\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = str(bin(n))[2:]\n    return binary_string.replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # converting given number to binary string\n    binary_string = \"{:b}\".format(n)\n    # converting binary string to decimal equivalent\n    n_binary = int(binary_string, 2)\n    return n_binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    #s = \"\"\n    #while n > 0:\n    #    s = str(n % 2) + s\n    #    n = n // 2\n    #return s\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if n == 0:\n        return '0'\n    \n    result = ''\n    remainder = n % 2\n    result += str(remainder)\n    n = n // 2\n    \n    while n > 0:\n        remainder = n % 2\n        result += str(remainder)\n        n = n // 2\n        \n    return result\n    \ndef decimal_to_hexadecimal(n):\n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string with no leading zeros.\n    '''\n    \n    result = ''\n    remainder = n % 16\n    result += str(remainder)\n    n = n // 16\n    \n    while n > 0:\n        remainder = n % 16\n        result += str(remainder)\n        n = n // 16\n        \n    return result\n    \ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    \n    result = ''\n    remainder = n % 8\n    result += str(remainder)\n    n = n // 8\n    \n    while n > 0:\n        remainder = n % 8\n        result += str(remainder)\n        n = n // 8\n        \n    return result\n    \ndef decimal_to_binary_base_n(n, base):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros, using the specified base (2, 8, or 16).\n    '''\n    \n    if base == 2:\n        return decimal_to_binary(n)\n    \n    if base == 8:\n        return decimal_to_hexadecimal(n)\n    \n    if base == 16:\n        return decimal_to_octal(n)\n    \ndef binary_to_decimal(binary):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if not binary.startswith('0b'):\n        binary = '0b' + binary\n    \n    return int(binary, 2)\n    \ndef binary_to_octal(binary):\n    '''\n    Write a function to convert the given binary number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if not binary.startswith('0b'):\n        binary = '0b' + binary\n    \n    binary = binary.replace('0b', '')\n    \n    result = ''\n    if binary!= '':\n        if len(binary) % 8 == 0:\n            octal_count = len(binary) // 8\n            octal_result = int(octal_count)\n            result += str(octal_result)\n            \n            octal_binary = binary\n            \n            while len(octal_binary) > 0:\n                remainder = int(octal_binary[:8], 2)\n                octal_binary = octal_binary[8:]\n                result += str(remainder)\n            \n        else:\n            octal_binary = binary\n            \n            while len(octal_binary) > 0:\n                remainder = int(octal_binary[:8], 2)\n                octal_binary = octal_binary[8:]\n                result += str(remainder)\n    \n    return result\n    \ndef binary_to_hexadecimal(binary):\n    '''\n    Write a function to convert the given binary number to its hexadecimal equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if not binary.startswith('0b'):\n        binary = '0b' + binary\n    \n    binary = binary.replace('0b', '')\n    \n    result = ''\n    if binary!= '':\n        if len(binary) % 4 == 0:\n            hexadecimal_count = len(binary) // 4\n            hexadecimal_result = int(hexadecimal_count)\n            result += str(hexadecimal_result)\n            \n            hexadecimal_binary = binary\n            \n            while len(hexadecimal_binary) > 0:\n                remainder = int(hexadecimal_binary[:4], 2)\n                hexadecimal_binary = hexadecimal_binary[4:]\n                result += str(remainder)\n            \n        else:\n            hexadecimal_binary = binary\n            \n            while len(hexadecimal_binary) > 0:\n                remainder = int(hexadecimal_binary[:4], 2)\n                hexadecimal_binary = hexadecimal_binary[4:]\n                result += str(remainder)\n    \n    return result\n    \ndef binary_to_binary_base_n(binary, base):\n    '''\n    Write a function to convert the given binary number to its binary equivalent, represented as a string with no leading zeros, using the specified base (2, 8, or 16).\n    '''\n    \n    if base == 2:\n        return binary_to_decimal(binary)\n    \n    if base == 8:\n        return binary_to_octal(binary)\n    \n    if base == 16:\n        return binary_to_hexadecimal(binary)\n    \ndef hexadecimal_to_decimal(hexadecimal):\n    '''\n    Write a function to convert the given hexadecimal number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if not hexadecimal.startswith('0x'):\n        hexadecimal = '0x' + hexadecimal\n    \n    return int(hexadecimal, 16)\n    \ndef hexadecimal_to_binary(hexadecimal):\n    '''\n    Write a function to convert the given hexadecimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if not hexadecimal.startswith('0x'):\n        hexadecimal = '0x' + hexadecimal\n    \n    hexadecimal = hexadecimal.replace('0x', '')\n    \n    result = ''\n    if hexadecimal!= '':\n        if len(hexadecimal) % 4 == 0:\n            binary_count = len(hexadecimal) // 4\n            binary_result = int(binary_count)\n            result += str(binary_result)\n            \n            binary_hexadecimal = hexadecimal\n            \n            while len(binary_hexadecimal) > 0:\n                remainder = int(binary_hexadecimal[:4], 16)\n                binary_hexadecimal = binary_hexadecimal[4:]\n                result += str(remainder)\n            \n        else:\n            binary_hexadecimal = hexadecimal\n            \n            while len(binary_hexadecimal) > 0:\n                remainder = int(binary_hexadecimal[:4], 16)\n                binary_hexadecimal = binary_hexadecimal[4:]\n                result += str(remainder)\n    \n    return result\n    \ndef hexadecimal_to_octal(hexadecimal):\n    '''\n    Write a function to convert the given hexadecimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if not hexadecimal.startswith('0x'):\n        hexadecimal = '0x' + hexadecimal\n    \n    return hexadecimal_to_binary(hexadecimal)\n    \ndef hexadecimal_to_binary_base_n(hexadecimal, base):\n    '''\n    Write a function to convert the given hexadecimal number to its binary equivalent, represented as a string with no leading zeros, using the specified base (2, 8, or 16).\n    '''\n    \n    if base == 2:\n        return hexadecimal_to_decimal(hexadecimal)\n    \n    if base == 8:\n        return hexadecimal_to_octal(hexadecimal)\n    \n    if base ="
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"0\"\n    return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    if n == 0:\n        return binary\n    while n > 0:\n        binary += str(n%2)\n        n = n//2\n    return binary[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    #initializing an empty string\n    binary = \"\"\n    #storing the given number as a decimal number\n    d = n\n    #loop to check the number of times the number of times it has to be divided \n    while d > 0:\n        #shifting to the left \n        d = d//2\n        #adding the bit to the empty string\n        binary += str(d % 2)\n        #decrementing the value by 1\n        d = d // 2\n    #returning the string \n    return binary[::-1]\n    \ndef decimal_to_binary_constant_space(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    #initializing an empty string\n    binary = \"\"\n    #storing the given number as a decimal number\n    d = n\n    #loop to check the number of times the number of times it has to be divided \n    while d > 0:\n        #shifting to the left \n        d = d//2\n        #adding the bit to the empty string\n        binary += str(d % 2)\n        #decrementing the value by 1\n        d = d // 2\n    #returning the string \n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # pass\n    if n <= 0:\n        return \"\"\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = num\n    while True:\n        if is_palindrome(palindrome):\n            return palindrome\n        palindrome += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == '1':\n        return '2'\n    num = str(num)\n    n = len(num)\n    for i in range(n-1, -1, -1):\n        if num[i] == '9':\n            num = num[:i] + '1' + num[i+1:]\n            break\n        if num[i] == '1':\n            num = num[:i] + '1' + num[i+1:]\n            break\n    for i in range(n-1, -1, -1):\n        if num[i] == '9':\n            num = num[:i] + '2' + num[i+1:]\n            break\n        if num[i] == '1':\n            num = num[:i] + '9' + num[i+1:]\n            break\n    return int(num)\ndef solution(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns its base -2 representation.\n    '''\n    if n < 0:\n        return 'Negative integers cannot be converted to their base -2 representation'\n    digits = ''\n    while n >= 1:\n        digits = str(n % -2) + digits\n        n = n // -2\n    if digits:\n        digits = digits[::-1]\n        return digits\n    return digits\ndef verify_password(s):\n    '''\n    Write a function that takes in a password and returns True if it is valid and False otherwise.\n    '''\n    if len(s) >= 6:\n        return True\n    return False\ndef solve_quadratic(a, b, c):\n    '''\n    Write a function that solves a quadratic equation, given its coefficients, a and b.\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # edge case\n    if num == 0 or num == 1:\n        return num\n    else:\n        # assume palindrome\n        # solution\n        # check if palindrome\n        # check if even\n        # get odd\n        # if odd palindrome\n            # try to increment by 2\n            # if that gives you a palindrome\n            # if that is even\n                # try to increment by 2\n                # if that gives you a palindrome\n                    # end\n                # if that is odd\n                    # increment by 1\n                    # if that gives you a palindrome\n                        # end\n            # if that is odd\n                # try to increment by 1\n                # if that gives you a palindrome\n                    # end\n            # if that is even\n                # try to increment by 1\n                # if that gives you a palindrome\n                    # end\n            # if that is odd\n                # try to increment by 1\n                # if that gives you a palindrome\n                    # end\n        # if not palindrome\n            # try to increment by 1\n            # if that gives you a palindrome\n                # end\n        # if even\n            # try to increment by 2\n            # if that gives you a palindrome\n                # end\n        # if not palindrome\n            # try to increment by 1\n            # if that gives you a palindrome\n                # end\n        # if even\n            # try to increment by 1\n            # if that gives you a palindrome\n                # end\n    # if next smallest palindrome cannot be found\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = str(num)\n    for i in range(1, len(str(num))):\n        a = str(num)[:-i]\n        b = str(num)[i:]\n        if (len(a) == len(b)) and (a == b[::-1]):\n            if int(a) < int(result):\n                result = a\n    return int(result)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert num to a string\n    s = str(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert num to a str and make it a list\n    num = list(str(num))\n    # Create a list of all the possible values of the last char\n    last_char = ['1','3','7']\n    # Check if the last char is 1, 3, or 7\n    if num[-1] in last_char:\n        # Check if num[:-1] is a palindrome and add +1 to the index\n        if is_palindrome(num[:-1]):\n            num[-1] = str(int(num[-1])+1)\n            num = ''.join(num)\n            return int(num)\n    # If the last char is 1, 3, or 7, go through the list and find the next smallest palindrome\n    num = int(num) + 1\n    for i in range(num,sys.maxsize):\n        # Compare num with each palindrome in the list\n        if is_palindrome(str(i)):\n            # If it is, return num\n            return i\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while not is_palindrome(num):\n        num += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # 1. Check if the number is already a palindrome\n    # 2. Find the first number that is not a palindrome\n    # 3. Swap the number with its previous digit\n    # 4. Return the result\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    temp = str(num)\n    for i in range(len(temp)-1):\n        if temp[i] == '9':\n            if i == len(temp)-2:\n                temp = temp[:i] + '1' + temp[i+1:]\n                break\n            else:\n                temp = temp[:i] + '0' + temp[i+1:]\n                break\n    if temp[-1] == '1':\n        temp = temp + '0'\n    return int(temp)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num<10:\n        return num\n    else:\n        str_num = str(num)\n        if str_num[0]=='9':\n            return int(str_num[1:][::-1])\n        else:\n            return int(str_num[::-1])\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # min and max can be used to determine if k is in the array\n    \n    # return the index of the element in the array\n    # 1-based indexing means the index of the first element is 1 and the index of the last element is -1\n    low = 1\n    high = len(arr)-1\n    \n    while low < high:\n        # move the mid index so that it is in the middle\n        mid = low + ((high - low) // 2)\n        if k == arr[mid]:\n            return mid\n        elif k > arr[mid]:\n            # If k is greater than mid, then the smaller elements must be in the range\n            # so increase the range\n            low = mid + 1\n        else:\n            # if k is smaller than mid, then the greater elements must be in the range\n            # so decrease the range\n            high = mid - 1\n    return low\n    \n    \n    # Your code goes here"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None or len(arr) < 1:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if k is less than the number of elements\n    # in the array then return the kth element\n    if k <= len(arr):\n        return arr[k-1]\n    else:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k - 1:\n            return arr[mid]\n        elif k > arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        mid = (i + j)//2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] > k:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    mid = (start + end) // 2\n    while start <= end:\n        if mid == k-1:\n            return arr[mid]\n        elif k < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n        mid = (start + end) // 2\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    k = k - 1\n    while k < len(arr):\n        k = k + 1\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return (arr[k-1] if len(arr)>0 else None)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        if k == 1:\n            return arr[0]\n        return None\n    if k == 1:\n        return arr[0]\n    if k == len(arr) - 1:\n        return arr[-1]\n    if k == 0:\n        return None\n    mid = (0 + len(arr)) // 2\n    if mid == k:\n        return arr[mid]\n    if k < mid:\n        return kth_element(arr[:mid], k)\n    if k > mid:\n        return kth_element(arr[mid+1:], k - (mid + 1))\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #  \n    return_str = ''\n    if not word:\n        return word\n    for i in range(len(word)):\n        if word[i] == '_':\n            return_str += word[i].upper()\n        else:\n            return_str += word[i].lower()\n    return return_str\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    print(words)\n    return words[0] + ''.join(x.title() for x in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    else:\n        return word[0].lower() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # splitch = word.split('_')\n    # return splitch[0] + ''.join([i.title() for i in splitch[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    first_words = words[0]\n    last_words = words[-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word or not isinstance(word, str):\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0].isupper():\n        return word\n    else:\n        return word[0].lower() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.replace('_','').title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    for w in word.split('_'):\n        camel += w.title()\n    return camel\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(m):\n            if i%2==0:\n                if j%2==0:\n                    total = total + 1\n    return total\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    res = []\n    for i in range(n):\n        res.append([])\n    for i in range(n):\n        for j in range(n):\n            res[i].append(0)\n    \n    # -- step 1 --\n    # first, add edges from 1 to 2\n    for i in range(1, m + 1):\n        res[0][i] = 1\n    # second, add edges from 2 to 1\n    for i in range(1, m + 1):\n        res[i][0] = 1\n    \n    # -- step 2 --\n    # now, add edges from 0 to the adjacent node of 0\n    res[0][0] = 1\n    for i in range(n):\n        res[0][i+1] = res[0][i]\n    # now, add edges from the adjacent node of 0 to 0\n    res[0][n] = res[0][n-1]\n    # now, add edges from 0 to the adjacent node of 1\n    for i in range(1, n):\n        res[i][n] = res[i-1][n]\n    # now, add edges from the adjacent node of 1 to 1\n    res[n][n] = res[n-1][n-1]\n    \n    # -- step 3 --\n    for i in range(n):\n        for j in range(n):\n            res[i][j] = 0\n    \n    # -- step 4 --\n    # first, add edges from 0 to the adjacent node of 0\n    res[0][0] = 1\n    # second, add edges from the adjacent node of 0 to 0\n    res[0][1] = res[0][0]\n    # now, add edges from 0 to the adjacent node of 1\n    res[0][2] = res[0][1]\n    # now, add edges from the adjacent node of 1 to 1\n    res[0][n] = res[0][2]\n    # now, add edges from 0 to the adjacent node of 2\n    res[0][n+1] = res[0][n]\n    # now, add edges from the adjacent node of 2 to 2\n    res[0][n+2] = res[0][n+1]\n    \n    # -- step 5 --\n    # add edges from 1 to the adjacent node of 1\n    res[1][1] = 1\n    # add edges from 1 to the adjacent node of 2\n    res[1][2] = res[1][1]\n    # add edges from 1 to the adjacent node of 3\n    res[1][3] = res[1][2]\n    # add edges from 1 to the adjacent node of 4\n    res[1][4] = res[1][3]\n    # add edges from 1 to the adjacent node of 5\n    res[1][5] = res[1][4]\n    \n    # -- step 6 --\n    # add edges from 2 to the adjacent node of 2\n    res[2][2] = 1\n    # add edges from 2 to the adjacent node of 3\n    res[2][3] = res[2][2]\n    # add edges from 2 to the adjacent node of 4\n    res[2][4] = res[2][3]\n    # add edges from 2 to the adjacent node of 5\n    res[2][5] = res[2][4]\n    \n    # -- step 7 --\n    # add edges from 3 to the adjacent node of 3\n    res[3][3] = 1\n    # add edges from 3 to the adjacent node of 4\n    res[3][4] = res[3][3]\n    # add edges from 3 to the adjacent node of 5\n    res[3][5] = res[3][4]\n    \n    # -- step 8 --\n    # add edges from 4 to the adjacent node of 4\n    res[4][4] = 1\n    # add edges from 4 to the adjacent node of 5\n    res[4][5] = res[4][4]\n    \n    # -- step 9 --\n    # add edges from 5 to the adjacent node of 5\n    res[5][5] = 1\n    \n    # -- step 10 --\n    # add edges from 0 to the adjacent node of 0\n    res[0][0] = 1\n    # add edges from the adjacent node of 0 to 1\n    res[0][1] = res[0][0]\n    # add edges from 1 to the adjacent node of 1\n    res[1][1] = 1\n    # add edges from 1 to the adjacent node of 2\n    res[1][2] = res[1][1]\n    # add edges from 1 to the adjacent node of 3\n    res[1][3] = res[1][2]\n    # add edges from 1 to the adjacent node of 4\n    res[1][4] = res[1][3]\n    # add edges from 1 to the adjacent node of 5\n    res[1][5] = res[1][4]\n    \n    # -- step 11 --\n    # add edges from 2 to the adjacent node of 2\n    res[2][2] = 1\n    # add edges from 2 to the adjacent node of 3\n    res[2][3] = res[2][2]\n    # add edges from 2 to the adjacent node of 4\n    res[2][4] = res[2][3]\n    # add edges from 2 to the adjacent node of 5\n    res[2][5] = res[2][4]\n    \n    # -- step 12 --\n    # add edges from 3 to the adjacent node of 3\n    res[3][3] = 1\n    # add edges from 3 to the adjacent node of 4\n    res[3][4] = res[3][3]\n    # add edges from 3 to the adjacent node of 5\n    res[3][5] = res[3][4]\n    \n    # -- step 13 --\n    # add edges from 4 to the adjacent node of 4\n    res[4][4] = 1\n    # add edges from 4 to the adjacent node of 5\n    res[4][5] = res[4][4]\n    \n    # -- step 14 --\n    # add edges from 5 to the adjacent node of 5\n    res[5][5] = 1\n    \n    # -- step 15 --\n    # add edges from 0 to the adjacent node of 0\n    res[0][0] = 1\n    # add edges from the adjacent node of 0 to 1\n    res[0][1] = res[0][0]\n    # add edges from 1 to the adjacent node of 1\n    res[1][1] = 1\n    # add edges from 1 to the adjacent node of 2\n    res[1][2] = res[1][1]\n    # add edges from 1 to the adjacent node of 3\n    res[1][3] = res[1][2]\n    # add edges from 1 to the adjacent node of 4\n    res[1][4] = res[1][3]\n    # add edges from 1 to the adjacent node of 5\n    res[1][5] = res[1][4]\n    \n    # -- step 16 --\n    # add edges from 2 to the adjacent node of 2\n    res[2][2] = 1\n    # add edges from 2 to the adjacent node of 3\n    res[2][3] = res[2][2]\n    # add edges from 2 to the adjacent node of 4\n    res[2][4] = res[2][3]\n    # add edges from 2 to the adjacent node of 5\n    res[2][5] = res[2][4]\n    \n    # -- step 17 --\n    # add edges from 3 to the adjacent node of 3\n    res[3][3] = 1\n    # add edges from 3 to the adjacent node of 4\n    res[3][4] = res[3][3]\n    # add edges from 3 to the adjacent node of 5\n    res[3][5] = res[3][4]\n    \n    # -- step 18 --\n    # add edges from 4 to the adjacent node of 4\n    res[4][4] = 1\n    # add edges from 4 to the adjacent node of 5\n    res[4][5] = res[4][4]\n    \n    # -- step 19 --\n    # add edges from 5 to the adjacent node of 5\n    res[5][5] = 1\n    \n    return res\n    \n    "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m < n:\n        m, n = n, m\n    if m == n == 1:\n        return 1\n    if m == 1 or n == 1:\n        return 0\n    if n < m:\n        return -1\n    if n == m:\n        return 0\n    return 1 + eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n == 0):\n        return 1\n    elif (n == 1):\n        return m\n    elif (m == 1):\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1) \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 0:\n        return 0\n    if m <= 0:\n        return 0\n    if m > n:\n        return eulerian_num(n, m - n)\n    if n == 1:\n        return 1\n    if m == 1:\n        return n\n    if m == 2:\n        return n - 1\n    if m == 3:\n        return n - 2\n    if m == 4:\n        return n - 3\n    if m == 5:\n        return n - 4\n    if m == 6:\n        return n - 5\n    if m == 7:\n        return n - 6\n    if m == 8:\n        return n - 7\n    if m == 9:\n        return n - 8\n    if m == 10:\n        return n - 9\n    if m == 11:\n        return n - 10\n    if m == 12:\n        return n - 11\n    if m == 13:\n        return n - 12\n    if m == 14:\n        return n - 13\n    if m == 15:\n        return n - 14\n    if m == 16:\n        return n - 15\n    if m == 17:\n        return n - 16\n    if m == 18:\n        return n - 17\n    if m == 19:\n        return n - 18\n    if m == 20:\n        return n - 19\n    if m == 21:\n        return n - 20\n    if m == 22:\n        return n - 21\n    if m == 23:\n        return n - 22\n    if m == 24:\n        return n - 23\n    if m == 25:\n        return n - 24\n    if m == 26:\n        return n - 25\n    if m == 27:\n        return n - 26\n    if m == 28:\n        return n - 27\n    if m == 29:\n        return n - 28\n    if m == 30:\n        return n - 29\n    if m == 31:\n        return n - 30\n    if m == 32:\n        return n - 31\n    if m == 33:\n        return n - 32\n    if m == 34:\n        return n - 33\n    if m == 35:\n        return n - 34\n    if m == 36:\n        return n - 35\n    if m == 37:\n        return n - 36\n    if m == 38:\n        return n - 37\n    if m == 39:\n        return n - 38\n    if m == 40:\n        return n - 39\n    if m == 41:\n        return n - 40\n    if m == 42:\n        return n - 41\n    if m == 43:\n        return n - 42\n    if m == 44:\n        return n - 43\n    if m == 45:\n        return n - 44\n    if m == 46:\n        return n - 45\n    if m == 47:\n        return n - 46\n    if m == 48:\n        return n - 47\n    if m == 49:\n        return n - 48\n    if m == 50:\n        return n - 49\n    if m == 51:\n        return n - 50\n    if m == 52:\n        return n - 51\n    if m == 53:\n        return n - 52\n    if m == 54:\n        return n - 53\n    if m == 55:\n        return n - 54\n    if m == 56:\n        return n - 55\n    if m == 57:\n        return n - 56\n    if m == 58:\n        return n - 57\n    if m == 59:\n        return n - 58\n    if m == 60:\n        return n - 59\n    if m == 61:\n        return n - 60\n    if m == 62:\n        return n - 61\n    if m == 63:\n        return n - 62\n    if m == 64:\n        return n - 63\n    if m == 65:\n        return n - 64\n    if m == 66:\n        return n - 65\n    if m == 67:\n        return n - 66\n    if m == 68:\n        return n - 67\n    if m == 69:\n        return n - 68\n    if m == 70:\n        return n - 69\n    if m == 71:\n        return n - 70\n    if m == 72:\n        return n - 71\n    if m == 73:\n        return n - 72\n    if m == 74:\n        return n - 73\n    if m == 75:\n        return n - 74\n    if m == 76:\n        return n - 75\n    if m == 77:\n        return n - 76\n    if m == 78:\n        return n - 77\n    if m == 79:\n        return n - 78\n    if m == 80:\n        return n - 79\n    if m == 81:\n        return n - 80\n    if m == 82:\n        return n - 81\n    if m == 83:\n        return n - 82\n    if m == 84:\n        return n - 83\n    if m == 85:\n        return n - 84\n    if m == 86:\n        return n - 85\n    if m == 87:\n        return n - 86\n    if m == 88:\n        return n - 87\n    if m == 89:\n        return n - 88\n    if m == 90:\n        return n - 89\n    if m == 91:\n        return n - 90\n    if m == 92:\n        return n - 91\n    if m == 93:\n        return n - 92\n    if m == 94:\n        return n - 93\n    if m == 95:\n        return n - 94\n    if m == 96:\n        return n - 95\n    if m == 97:\n        return n - 96\n    if m == 98:\n        return n - 97\n    if m == 99:\n        return n - 98\n    if m == 100:\n        return n - 99\n    if m == 101:\n        return n - 100\n    if m == 102:\n        return n - 101\n    if m == 103:\n        return n - 102\n    if m == 104:\n        return n - 103\n    if m == 105:\n        return n - 104\n    if m == 106:\n        return n - 105\n    if m == 107:\n        return n - 106\n    if m == 108:\n        return n - 107\n    if m == 109:\n        return n - 108\n    if m == 110:\n        return n - 109\n    if m == 111:\n        return n - 110\n    if m == 112:\n        return n - 111\n    if m == 113:\n        return n - 112\n    if m == 114:\n        return n - 113\n    if m == 115:\n        return n - 114\n    if m == 116:\n        return n - 115\n    if m == 117:\n        return n - 116\n    if m == 118:\n        return n - 117\n    if m == 119:\n        return n - 118\n    if m == 120:\n        return n - 119\n    if m == 121:\n        return n - 120\n    if m == 122:\n        return n - 121\n    if m == 123:\n        return n - 122\n    if m == 124:\n        return n - 123\n    if m == 125:\n        return n - 124\n    if m == 126:\n        return n - 125\n    if m == 127:\n        return n - 126\n    if m == 128:\n        return n - 127\n    if m == 129:\n        return n - 128\n    if m == 130:\n        return n - 129\n    if m == 131:\n        return n - 130\n    if m == 132:\n        return n - 131\n    if m == 133:\n        return n - 132\n    if m == 134:\n        return n - 133\n    if m == 135:\n        return n - 134\n    if m == 136:\n        return n - 135\n    if m == 137:\n        return n - 136\n    if m == 138:\n        return n - 137\n    if m == 139:\n        return n - 138\n    if m == 140:\n        return n - 139\n    if m == 141:\n        return n - 140\n    if m == 142:\n        return n - 141\n    if m == 143:\n        return n - 142\n    if m == 144:\n        return n - 143\n    if m == 145:\n        return n - 144\n    if m == 146:\n        return n - 145\n    if m == 147:\n        return n - 146\n    if m == 148:\n        return n - 147\n    if m == 149:\n        return n - 148\n    if m == 150:\n        return n - 149\n    if m == 151"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return math.factorial(n) / (math.factorial(m) * math.factorial(n-m))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # if the graph is not a tree\n    if n > 1:\n        \n        # assign an array to keep track of paths\n        paths = [0 for i in range(n)]\n        \n        # the first vertex must have m 0's\n        for i in range(m):\n            paths[0] += 1\n        \n        # build the path and remove the edges\n        for i in range(1, n):\n            paths[i] = paths[i-1] + m\n            \n            # remove the edge with the smallest value\n            for j in range(i-1):\n                if paths[j] > paths[j+1]:\n                    paths[j], paths[j+1] = paths[j+1], paths[j]\n                    \n        return paths[n-1]\n    \n    # if the graph is a tree\n    else:\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    if n == 1 or m == 1:\n        return 1\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a_0 = 0\n    if n == 0 or m == 0:\n        return a_0\n    for i in range(n):\n        for j in range(m):\n            a_0 += 1\n    return a_0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n < 1):\n        return 0\n    elif (n == 1):\n        return m\n    else:\n        return eulerian_num(n-1, m+n) + m\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n        input_list[i] = ''.join(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort first level\n    # iterate through each item in the list\n    # sort and return the whole list\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # sort each sublist\n    for x in range(len(input_list)):\n        input_list[x] = sorted(input_list[x])\n        \n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for inner_list in input_list:\n        result.append(sorted(inner_list))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for lst in input_list:\n        lst.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list = [[4, 1], [2, 3], [5, 2], [8, 0]]\n    input_list.sort(key=lambda item: item[1])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Sort input_list\n    sorted_input_list = sorted(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    \nlst = []\nn = int(input(\"Enter the number of elements : \"))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == False:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    \nprint(count([True, False, True, True, False, True]))\nprint(count([False, True, False, True]))\nprint(count([False, False, False]))\nprint(count([1,2,3,4,5,6,7,8,9,10,False])"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    print(\"The count of true values in the list is:\", count)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in range(len(lst)):\n        if lst[i]==True:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    print(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in range(len(test_tup)):\n        test_list.append(test_tup[x])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # for element in test_list:\n    #     test_tup += (element,)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create an empty list for storing the given tuples\n    new_list = []\n    # loop through the given tuples and append the given list\n    for tup in test_tup:\n        new_list.append(tup+test_list)\n    # return the list\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not test_list:\n        test_list.append(test_tup)\n    else:\n        if not test_tup:\n            return\n        else:\n            curr_tup = test_list[0]\n            if curr_tup[1] > test_tup[0]:\n                test_list.insert(0, test_tup)\n            else:\n                test_list.append(test_tup)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    h=[]\n    h.append(num1)\n    h.append(num2)\n    h.append(num3)\n    h.sort()\n    return h\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_3 = []\n    list_2 = []\n    list_1 = []\n    list_1 = num1\n    list_2 = num2\n    list_3 = num3\n    list_1.append(9999)\n    list_2.append(9999)\n    list_3.append(9999)\n    return sorted(list_1+list_2+list_3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #num1 = [1, 3, 5, 7, 9]\n    #num2 = [2, 4, 6]\n    #num3 = [0, 8, 10, 11, 12, 14]\n    #r = merge_sorted_list(num1, num2, num3)\n    #print(r)\n    def merge_helper(l1, l2, l3):\n        r = []\n        while l1 and l2:\n            if l1[0] < l2[0]:\n                r.append(l1.pop(0))\n            else:\n                r.append(l2.pop(0))\n        while l1:\n            r.append(l1.pop(0))\n        while l2:\n            r.append(l2.pop(0))\n        return r\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_1 = sorted(num1)\n    list_2 = sorted(num2)\n    list_3 = sorted(num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    h = []\n    l = []\n    m = []\n    for i in range(len(num1)):\n        heapq.heappush(h, num1[i])\n    for j in range(len(num2)):\n        heapq.heappush(l, num2[j])\n    for k in range(len(num3)):\n        heapq.heappush(m, num3[k])\n    \n    for t in range(len(m)):\n        if(len(h) == 0):\n            if(len(l) == 0):\n                heapq.heappush(h, m[t])\n            else:\n                heapq.heappush(l, m[t])\n        else:\n            if(len(l) == 0):\n                heapq.heappush(h, m[t])\n            else:\n                if(m[t] <= h[0] and m[t] <= l[0]):\n                    heapq.heappush(l, m[t])\n                elif(l[0] <= m[t] and m[t] <= h[0]):\n                    heapq.heappush(h, m[t])\n                else:\n                    heapq.heappush(h, l[0])\n                    heapq.heappush(l, m[t])\n    result = []\n    while(len(h)!= 0 or len(l)!= 0):\n        if(len(h)!= 0):\n            result.append(h[0])\n            heapq.heappop(h)\n        else:\n            result.append(l[0])\n            heapq.heappop(l)\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    merged=[]\n    while i<len(num1) and i<len(num2) and i<len(num3):\n        if num1[i]<num2[i] and num1[i]<num3[i]:\n            merged.append(num1[i])\n            i+=1\n        elif num1[i]>num2[i] and num1[i]>num3[i]:\n            merged.append(num2[i])\n            i+=1\n        else:\n            merged.append(num3[i])\n            i+=1\n    while i<len(num1):\n        merged.append(num1[i])\n        i+=1\n    while i<len(num2):\n        merged.append(num2[i])\n        i+=1\n    while i<len(num3):\n        merged.append(num3[i])\n        i+=1\n    return merged\n        \ndef merge_sort(num_list):\n    '''\n    Write a function that takes a list of numbers as input and sorts it using merge sort.\n    '''\n    if len(num_list)==1:\n        return num_list\n    mid=len(num_list)//2\n    left=merge_sort(num_list[:mid])\n    right=merge_sort(num_list[mid:])\n    merged=merge_sorted_list(left,right,num_list)\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1=sorted(num1)\n    num2=sorted(num2)\n    num3=sorted(num3)\n    return num1+num2+num3\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    while len(num1)!= 0 or len(num2)!= 0 or len(num3)!= 0:\n        if len(num1) == 0 and len(num2)!= 0:\n            sorted_list.append(num2.pop(0))\n        elif len(num1)!= 0 and len(num2) == 0:\n            sorted_list.append(num1.pop(0))\n        elif len(num1)!= 0 and len(num2)!= 0 and len(num3) == 0:\n            if num1[0] > num2[0]:\n                sorted_list.append(num2.pop(0))\n            else:\n                sorted_list.append(num1.pop(0))\n    return sorted_list\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #sol 1.\n    s = list(s)\n    for i in range(0,n):\n        s = s[-2:] + s[:-2]\n    return (''.join(s))\n    \ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #sol 2.\n    s = list(s)\n    for i in range(0,n):\n        s.extend(s[-2:])\n        s.remove(s[-2])\n    return (''.join(s))\n    \ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #sol 3.\n    s = list(s)\n    for i in range(0,n):\n        for j in range(0,len(s)-1):\n            if s[j] == '0' and s[j+1] == '0':\n                s.pop(j)\n            elif s[j] == '1' and s[j+1] == '1':\n                s.pop(j)\n    return (''.join(s))\n    \ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #sol 4.\n    n = int(n)\n    s = list(s)\n    i = 0\n    while i < n:\n        if i % 2 == 1:\n            s.reverse()\n        i += 1\n    return (''.join(s))\n    "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(0,len(s),n):\n        if s[i]=='1':\n            odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return \"Odd_equivalent\""
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd = 0\n    if (n<0):\n        print(\"enter a positive number\")\n        return odd\n    else:\n        while(n>0):\n            s = binary(s)\n            if (s[0]=='1'):\n                odd = odd+1\n            n = n-1\n        return odd\n            \n        \ndef binary(s):\n    '''\n    Write a python function to convert a binary string to decimal.\n    '''\n    if (len(s)==0):\n        return -1\n    if (s[0]=='1'):\n        s = s[1:]\n        return binary(s)\n    else:\n        return int(s[0])\n        \ndef Decimal_to_binary(a):\n    '''\n    Write a python function to convert a decimal to binary.\n    '''\n    s = \"\"\n    while(a!=0):\n        s = s + str(a%2)\n        a = a//2\n    return s\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Number of times to rotate the string \n    n = n % 2\n    # Sum of the number of odds \n    s = s.count('1') + s.count('0') \n    # if the string is even then return 0 \n    if (n == 0): \n        return 0\n    # if the string is odd then return the \n    # sum of the number of odds \n    else: \n        return s \n        \nprint(odd_Equivalent('10110101010', 3)) \nprint(odd_Equivalent('101011101010', 5)) \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s)==0: \n        return 0\n    if s[0]==\"1\":\n        if len(s)%2==0:\n            return odd_Equivalent(s[1:],n)\n        else:\n            return odd_Equivalent(s[1:],n+1)\n    else:\n        if len(s)%2==0:\n            return odd_Equivalent(s[1:],n)\n        else:\n            return odd_Equivalent(s[1:],n+1)\n    return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if n==0:\n        return '0'\n    if n%2==0:\n        return odd_Equivalent(n//2,n)\n    else:\n        return odd_Equivalent((n-1)//2,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_num = 0\n    s= s+\"0\"\n    for i in range(n):\n        for j in range(len(s)-1):\n            if int(s[j]) + int(s[j+1]) == 1:\n                odd_num += 1\n        s=s[1:]+\"0\"\n    return odd_num\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # The binary string without the given number of rotation.\n    binary_string = s\n    \n    # To store the result of the solution.\n    odd_counter = 0\n    \n    # Find the length of the binary string.\n    len_of_binary = len(binary_string)\n    \n    # Perform the required rotations.\n    for i in range(0, n):\n        \n        # Find the next binary string.\n        binary_string = binary_string[1:] + binary_string[0]\n        \n        # For each of the character in the binary string, if its value is not 0 then add 1.\n        odd_counter = odd_counter + (binary_string.count('1'))\n        \n    # Return the total count of odd values.\n    return odd_counter\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a=list(s)\n    for i in range(0,n):\n        a=list(s[1:])+list(s[0])\n        s=''.join(a)\n    return s\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [nested_list[0] for nested_list in nestedlist if len(nested_list) == 1 and nested_list[0]]\n    \ncommon_in_nested_lists([[4,2],[[4],2,1],[[4,2],[1]]])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    a = set(nestedlist[0])\n    for i in nestedlist[1:]:\n        a = a.intersection(set(i))\n    return list(a)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    if isinstance(nestedlist, list):\n        return common_in_nested_lists(nestedlist[1:]) + common_in_nested_lists(nestedlist[0])\n    else:\n        return nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set(common_elements_list(nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l = []\n    for i in nestedlist:\n        if type(i) == list:\n            l.append(common_in_nested_lists(i))\n        else:\n            l.append(i)\n    return set(l[0]) & set(l[1])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    a=[]\n    for i in nestedlist:\n        for j in i:\n            a.append(j)\n    return set(a)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for list_item in nestedlist:\n        if all(item in common for item in list_item):\n            common.append(list_item)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for item in nestedlist:\n        for sublist in item:\n            for element in sublist:\n                if element not in result:\n                    result.append(element)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def find_common_element(lst):\n        common = []\n        for el in lst:\n            if type(el) == list:\n                common = common + find_common_element(el)\n            elif el not in common:\n                common.append(el)\n        return common\n    return find_common_element(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*map(set,nestedlist)))\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        i = int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.strip() == \"\":\n        return False\n    \n    if text.strip().startswith('-'):\n        return False\n    \n    for i in text:\n        if i not in '0123456789':\n            return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.lstrip().isdigit():\n        return True\n    else:\n        return False\n    \ndef get_key(dictionary,key):\n    '''\n    Write a function that takes a dictionary and a key and returns\n    the value associated with that key.\n    '''\n    return dictionary[key]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Check if the input string only contains digits\n    if not text.isdigit():\n        raise ValueError\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isnumeric():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list1 = list1\n    for i in range(len(list1)):\n        if not(list1[i]):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        for d in list1:\n            if d:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(len(i) == 0 for i in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n    \ndef count_occurrence(string1, string2):\n    '''\n    Write a function to count the number of occurrences of substring in string.\n    '''\n    count = 0\n    for i in range(len(string1)-len(string2)+1):\n        if string1[i:i+len(string2)] == string2:\n            count += 1\n    return count\n    \ndef smallest_n_gram(s, n):\n    '''\n    Write a function to find the smallest n-gram in a given string.\n    '''\n    s = s.split(\" \")\n    result = \"\"\n    for i in range(len(s)-n+1):\n        result += s[i] + \" \"\n    return result\n    \ndef top_10_words(s):\n    '''\n    Write a function to find top 10 words in a given string.\n    '''\n    s = s.split()\n    result = {}\n    for i in range(len(s)):\n        if s[i] not in result:\n            result[s[i]] = 1\n        else:\n            result[s[i]] += 1\n    result = sorted(result.items(), key=lambda x: x[1], reverse=True)\n    final_result = []\n    for i in range(len(result)):\n        if result[i][1] < 20:\n            final_result.append(result[i][0])\n    return final_result\n    \ndef find_anagrams(s1, s2):\n    '''\n    Write a function to find all the anagrams of a string in another string.\n    '''\n    result = []\n    s1 = s1.split()\n    s2 = s2.split()\n    if len(s1)!= len(s2):\n        return result\n    for i in range(len(s1)):\n        if sorted(s1[i])!= sorted(s2[i]):\n            result.append(s1[i])\n    return result\n    \ndef count_kmers(pattern, k):\n    '''\n    Write a function to count all the k-mers in a string.\n    '''\n    result = []\n    for i in range(len(pattern) - k + 1):\n        result.append(pattern[i:i+k])\n    return result\n    \ndef max_substring(s, k):\n    '''\n    Write a function to find the max substring in a string having length k.\n    '''\n    max_result = \"\"\n    for i in range(len(s)-k+1):\n        result = \"\"\n        for j in range(i, i+k):\n            result += s[j]\n        if len(result) > len(max_result):\n            max_result = result\n    return max_result\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return True if len(list1) == 0 else False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0, len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for n in nums:\n        sum = sum * 10 + n\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums:\n        return 0\n    s = sum(nums)\n    s = s % 10\n    return s\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #nums_int = int(\"\".join(str(e) for e in nums))\n    #nums_int = int(\"\".join(str(int(e)) for e in nums))\n    nums_int = int(\"\".join(str(int(e)) for e in nums))\n    return nums_int\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    output = 0\n    for i in nums:\n        output = output + i\n    return output\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return (nums[0] * 10) + nums[1]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # print(nums)\n    # print(type(nums))\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # one option is to use map to convert each element in the list\n    # nums = (10, 20, 30)\n    # result = int(map(int, nums))\n    # print(result)\n    # another option is to use sum\n    # nums = (10, 20, 30)\n    # result = sum(map(int, nums))\n    # print(result)\n    # another option is to use a lambda function\n    # nums = (10, 20, 30)\n    # result = sum(map(lambda x: int(x), nums))\n    # print(result)\n    # another option is to use zip\n    # nums = (10, 20, 30)\n    # result = int(reduce(lambda x, y: x + y, zip(nums)))\n    # print(result)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = len(nums)\n    res = 0\n    for i in range(n):\n        res += nums[i] * (10 ** (n-i-1))\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    ans = 0\n    while i < len(nums):\n        ans += nums[i] * (10 ** i)\n        i += 1\n    return ans\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(element) for element in test_list]\n    except:\n        return False\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if type(test_list)!= list:\n        raise TypeError('The input should be a list of lists')\n    for i in range(len(test_list)):\n        if type(test_list[i])!= list:\n            raise TypeError('The input should be a list of lists')\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j])!= float and type(test_list[i][j])!= int:\n                raise TypeError('The input should be a list of lists')\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = float(row[i])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        test_list[i] = float(test_list[i])\n        \n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(elem) for elem in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_with_f_conversion = []\n    for line in test_list:\n        for element in line:\n            try:\n                element = float(element)\n                list_with_f_conversion.append(element)\n            except ValueError:\n                pass\n    return list_with_f_conversion\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for num in range(len(test_list)):\n        try:\n            test_list[num] = float(test_list[num])\n        except ValueError:\n            pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                test_list[i][j] = \"Not a float\"\n            except TypeError:\n                test_list[i][j] = \"Not a float\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for i in range(len(item)):\n            try:\n                item[i] = float(item[i])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    # create a list of strings from the string\n    list_of_strings = string.split()\n    \n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split(\" \")\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split()\n    return list \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # s = set()\n    # for i in range(len(arr)):\n    #     if arr[i] not in s:\n    #         s.add(arr[i])\n    #     else:\n    #         return arr[i]\n    # return -1\n    # O(n)\n    \n    if not arr:\n        return -1\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == arr[mid-1] and arr[mid]!= arr[mid+1]:\n        return arr[mid]\n    \n    if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n        return -1\n    \n    if arr[mid]!= arr[mid-1] and arr[mid]!= arr[mid+1]:\n        return search(arr[:mid])\n    \n    if arr[mid] == arr[mid-1] and arr[mid]!= arr[mid+1]:\n        return search(arr[mid+1:])\n    \n    if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n        return search(arr[:mid])\n        \n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0]!= arr[1]:\n            return arr[1]\n        else:\n            return arr[0]\n    if n > 2:\n        i = 0\n        while i < n:\n            if i + 1 == n:\n                break\n            elif arr[i]!= arr[i+1]:\n                return arr[i+1]\n            else:\n                i = i + 1\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    found = False\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1] and not found:\n            found = True\n        if arr[i] == arr[i-1] and found:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #using hashmap to find the element that appears only once in a sorted array\n    #using hashmap can be done in constant space\n    hashmap = {}\n    for i in arr:\n        if i not in hashmap.keys():\n            hashmap[i] = 1\n        else:\n            hashmap[i] += 1\n    for k,v in hashmap.items():\n        if v == 1:\n            return k\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    s = set(arr)\n    for i in arr:\n        if i not in s:\n            return i\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # 1. Set the low pointer and high pointer.\n    low = 0\n    high = len(arr) - 1\n    # 2. Move the low pointer forward and the high pointer backward.\n    while low < high:\n        # 3. If arr[low] == arr[high] then they are in same index, return the value.\n        if arr[low] == arr[high]:\n            return arr[low]\n        # 4. If the difference between arr[low] and arr[high] is greater than one, move the low pointer forward, else move the high pointer backward.\n        if abs(arr[low] - arr[high]) > 1:\n            # 5. If arr[low] < arr[high], move the low pointer forward.\n            if arr[low] < arr[high]:\n                low += 1\n            # 6. Else move the high pointer backward.\n            else:\n                high -= 1\n        # 7. Else the values are not adjacent.\n        else:\n            return -1\n        # 8. Return the first repeated element.\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    N = len(arr)\n    if N == 0:\n        return -1\n    first = 0\n    last = N-1\n    mid = 0\n    while first<=last:\n        mid = (first+last)//2\n        if arr[first]==arr[mid] and arr[mid]==arr[last]:\n            return -1\n        elif arr[first]==arr[mid]:\n            first = mid + 1\n        elif arr[last] == arr[mid]:\n            last = mid-1\n        else:\n            first = mid + 1\n    return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[0]\n    if arr[0] == arr[1]:\n        return -1\n    start = 0\n    end = n - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == arr[mid + 1]:\n            end = mid\n        else:\n            start = mid + 1\n    return arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    while left<right:\n        mid = (left + right)//2\n        if arr[mid] == arr[mid+1]:\n            if arr[mid]!= arr[mid-1]:\n                return mid\n            right = mid -1\n        elif arr[mid] == arr[mid-1]:\n            left = mid+1\n        else:\n            left = mid+1\n    return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = (list1[i][0]*list1[j][0]) + (list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        list2.append(list1[i][0])\n        list3.append(list1[i][1])\n    max_product = max(list2) * max(list3)\n    print(max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    assert list1, \"The list cannot be empty.\"\n    product_max = list1[0][0] * list1[0][1]\n    for i in range(0, len(list1), 2):\n        if list1[i][0] * list1[i + 1][0] > product_max:\n            product_max = list1[i][0] * list1[i + 1][0]\n    for j in range(1, len(list1), 2):\n        if list1[j][0] * list1[j + 1][1] > product_max:\n            product_max = list1[j][0] * list1[j + 1][1]\n    return product_max\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!=j and list1[i][0]*list1[j][0]>max_product:\n                max_product = list1[i][0]*list1[j][0]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1 = max2 = max3 = float('-inf')\n    for tup in list1:\n        x = tup[0]\n        y = tup[1]\n        max1 = max(max1, x)\n        max2 = max(max2, y)\n        max3 = max(max3, abs(x*y))\n    return max3, max1, max2\n    \ndef test_max_product_tuple():\n    assert max_product_tuple([(2, 3), (4, 5), (1, 1), (-3, -5)]) == (6, 4, 3)\n    assert max_product_tuple([(1, 2), (2, 1)]) == (2, 1, 1)\n    assert max_product_tuple([(5, 4), (1, 5), (1, 1)]) == (10, 5, 5)\n    assert max_product_tuple([(-1, -2), (-2, -1)]) == (-1, -2, -1)\n    assert max_product_tuple([(0, 0), (0, 0), (0, 0)]) == (0, 0, 0)\n    assert max_product_tuple([]) == (None, None, None)\n    print('done!')\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_tuple = ()\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                if list1[i][1]*list1[j][1] > max_product:\n                    max_product = list1[i][1]*list1[j][1]\n                    max_tuple = (list1[i],list1[j])\n    return max_product, max_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0] * list1[j][0] < 0:\n                if list1[i][0] * list1[j][0] > max_product:\n                    max_product = list1[i][0] * list1[j][0]\n            elif list1[i][0] * list1[j][0] > 0:\n                if list1[i][0] * list1[j][0] > max_product:\n                    max_product = list1[i][0] * list1[j][0]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for pair in list1:\n        if abs(pair[0]) > max_product:\n            max_product = abs(pair[0])\n        if abs(pair[1]) > max_product:\n            max_product = abs(pair[1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_1 = 0\n    max_2 = 0\n    for i in range(len(list1)):\n        if list1[i]>max_1:\n            max_1 = list1[i]\n        elif list1[i]<max_2 and list1[i]!=0:\n            max_2 = list1[i]\n    if max_1*max_2 == 0:\n        return 0\n    else:\n        return max_1*max_2\nprint(max_product_tuple([-1,2,3,-4]))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_value = -math.inf\n    for index in range(len(list1)):\n        for index2 in range(index+1, len(list1)):\n            if (list1[index][0] * list1[index2][0]) > max_value:\n                max_value = list1[index][0] * list1[index2][0]\n    return max_value\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # make a dictionary with keys being the sum of the amicable numbers\n    amicable_sum = {}\n    \n    for i in range(2, limit + 1):\n        # make a list to record the amicable numbers\n        list_amicable = []\n        \n        for j in range(2, i):\n            if i == j:\n                continue\n            \n            if i % j == 0:\n                continue\n            \n            if j in amicable_sum.keys():\n                list_amicable.append(j)\n        \n        # add the keys to the dictionary\n        amicable_sum[i] = list_amicable\n    \n    # calculate the sum of the amicable numbers\n    sum_amicable = 0\n    \n    for i in range(2, limit + 1):\n        if i in amicable_sum.keys():\n            sum_amicable += sum(amicable_sum[i])\n            \n    print(sum_amicable)\n    \n    \ndef digits_sum(n):\n    '''\n    Calculate the sum of the digits in a given number\n    '''\n    \n    # initialize the sum and the digit list\n    sum_digit = 0\n    digit_list = []\n    \n    # convert the integer to a string and loop over the list of digits\n    while n!= 0:\n        # get the next digit\n        digit = n % 10\n        digit_list.append(digit)\n        \n        # update the sum and the number\n        sum_digit += digit\n        n = int(n / 10)\n    \n    # calculate the sum of the digits\n    return sum_digit, digit_list\n    \n    \ndef power_set(iterable):\n    '''\n    Generate a set of all possible subsets of an iterable\n    '''\n    # initialize an empty list to store the subsets\n    subsets = []\n    \n    # loop over the iterable\n    for i in iterable:\n        # initialize a new list to store the subsets\n        new_subset = []\n        \n        # generate a new subset with each element in the iterable\n        # and add it to the new subset\n        for j in range(1, len(iterable) + 1):\n            new_subset.append(i[0:j])\n        \n        # add the new subset to the list of subsets\n        subsets.append(new_subset)\n        \n    # return the list of subsets\n    return subsets\n    \n    \ndef num_of_happy_numbers_sum(limit):\n    '''\n    Given a number, calculate the sum of all the happy numbers within the range\n    '''\n    # initialize the dictionary to record the happy numbers\n    happy_numbers_sum = {}\n    \n    # loop over the range of the number\n    for i in range(1, limit + 1):\n        # set the first element of the list to be the happy number\n        happy_number_list = [i]\n        \n        # loop over the rest of the list\n        for j in range(1, len(happy_number_list)):\n            # check whether the last element is in the list\n            if i % j == 0:\n                # add the last element to the happy number list\n                happy_number_list.append(i)\n        \n        # add the happy number list to the dictionary\n        happy_numbers_sum[i] = happy_number_list\n        \n    # calculate the sum of all the happy numbers\n    sum_happy_numbers = 0\n    \n    # loop over the dictionary to find the sum of the happy numbers\n    for i in range(1, limit + 1):\n        # if the list is in the dictionary, then add it to the sum\n        if i in happy_numbers_sum.keys():\n            sum_happy_numbers += sum(happy_numbers_sum[i])\n        \n    # return the sum of the happy numbers\n    return sum_happy_numbers\n    \n    \ndef palindromes_sum(limit):\n    '''\n    Given a range of numbers, find all palindromic sums\n    '''\n    # initialize the dictionary to record the palindromes\n    palindromes = {}\n    \n    # loop over the range of the numbers\n    for i in range(1, limit + 1):\n        # initialize a list to store the palindromes\n        palindrome_list = []\n        \n        # initialize a list to store the reversed numbers\n        reversed_list = []\n        \n        # loop over the range of the numbers\n        for j in range(1, limit + 1):\n            # if i is equal to j, the palindrome is the sum of i and j\n            if i == j:\n                palindrome_list.append(i)\n            \n            # if i is equal to j, the palindrome is the reversed number of i\n            if i == j + 1:\n                reversed_list.append(i)\n        \n        # add the palindrome list to the dictionary\n        palindromes[i] = palindrome_list\n        \n        # add the reversed list to the dictionary\n        palindromes[i + 1] = reversed_list\n    \n    # calculate the sum of all the palindromes\n    sum_palindromes = 0\n    \n    # loop over the dictionary to find the sum of the palindromes\n    for i in range(1, limit + 1):\n        # if the list is in the dictionary, then add it to the sum\n        if i in palindromes.keys():\n            sum_palindromes += sum(palindromes[i])\n        \n    # return the sum of the palindromes\n    return sum_palindromes\n    \n    \ndef leap_years_in_range(start, end):\n    '''\n    Given a range of years, return the number of leap years in the range\n    '''\n    # initialize the counter\n    count = 0\n    \n    # loop over the range of years\n    for year in range(start, end + 1):\n        # check whether the year is a leap year\n        if year % 4 == 0 and year % 100!= 0:\n            count += 1\n        \n        # check whether the year is a leap year\n        if year % 400 == 0:\n            count += 1\n    \n    # return the count\n    return count\n    \n    \ndef day_number_sum(limit):\n    '''\n    Given a range of days, return the sum of the days\n    '''\n    # initialize the dictionary to record the day number\n    day_number = {}\n    \n    # loop over the range of days\n    for i in range(1, limit + 1):\n        # initialize the day number list to store the day number\n        day_number_list = []\n        \n        # loop over the range of days\n        for j in range(1, limit + 1):\n            # if i is equal to j, the day number is the sum of i and j\n            if i == j:\n                day_number_list.append(i)\n        \n        # add the day number list to the dictionary\n        day_number[i] = day_number_list\n    \n    # calculate the sum of the day number\n    sum_day_number = 0\n    \n    # loop over the dictionary to find the sum of the day numbers\n    for i in range(1, limit + 1):\n        # if the list is in the dictionary, then add it to the sum\n        if i in day_number.keys():\n            sum_day_number += sum(day_number[i])\n        \n    # return the sum of the day number\n    return sum_day_number\n    \n    \ndef inverse_multiplication_sums(n):\n    '''\n    Given a number, calculate the sum of all numbers that satisfy the following conditions:\n        1. The numbers are of the form i*(n - 1)\n        2. i is 1, 2, 3, 4, 5,...\n    '''\n    # initialize a dictionary to record the sums\n    inverse_multiplication_sums = {}\n    \n    # loop over the range of numbers\n    for i in range(1, n + 1):\n        # initialize a list to store the sums\n        inverse_multiplication_sum_list = []\n        \n        # loop over the range of numbers\n        for j in range(1, n + 1):\n            # if the numbers are of the form i*(n - 1), add i to the list\n            if i * (n - 1) == j:\n                inverse_multiplication_sum_list.append(i)"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1, limit+1):\n        j = i\n        sum_divisors = 0\n        for divisor in range(1, i):\n            if i % divisor == 0:\n                sum_divisors += divisor\n        if sum_divisors == i and i!= j:\n            result += i\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit+1):\n        amicable = amicable_numbers_sum_aux(i)\n        if amicable == i:\n            sum_amicable += i\n    print(f'Sum of all amicable numbers from 1 to {limit} is {sum_amicable}')\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(n):\n        sum_of_amicable = 0\n        divisors = set()\n        for x in range(1,n):\n            if x not in divisors:\n                for y in range(1,n):\n                    if x!= y and x*y == n:\n                        sum_of_amicable += x\n                        divisors.add(x)\n                        divisors.add(y)\n        return sum_of_amicable\n    return sum(filter(lambda x: sum_amicable_numbers(x) == x, range(1,limit)))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sums = set()\n    amicable_set = set()\n    for i in range(1, limit):\n        for j in range(i+1, limit):\n            sum = i + j\n            if sum == i*j:\n                if i not in sums:\n                    sums.add(i)\n                if j not in sums:\n                    sums.add(j)\n            if sum == sum_of_squares(i) and sum not in sums:\n                sums.add(sum)\n    return sums\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        if amicable_numbers(i) > limit:\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        sum_of_two = sum_of_two_numbers(i)\n        if sum_of_two > i:\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(2, limit):\n        if i in amicable_numbers_cache:\n            continue\n        amicable_numbers_cache.append(i)\n        j = i\n        amicable_numbers_cache.append(j)\n        while j in amicable_numbers_cache:\n            sum += j\n            j += i\n            amicable_numbers_cache.append(j)\n            if j > limit:\n                break\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    list = []\n    for i in range(1, limit):\n        if i in list:\n            continue\n        for j in range(i + 1, limit):\n            if i == j:\n                continue\n            if i + j == limit - 1:\n                sum += i\n                list.append(i)\n                list.append(j)\n                break\n            if i + j in list:\n                sum += i\n                sum += j\n                list.append(i)\n                list.append(j)\n                break\n    print(sum)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)/2\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (b**2 - a**2) > 0:\n        c = cmath.sqrt(b**2 - a**2)\n        x = (a + c)/2\n        y = (a - c)/2\n        angle = cmath.phase(x)*180/3.14159\n        angle2 = cmath.phase(y)*180/3.14159\n        return int(angle),int(angle2)\n    else:\n        return \"Invalid input\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+1j*b)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.imag == 0 and a.real >= 0:\n        return cmath.phase(a)\n    if a.imag == 0 and a.real < 0:\n        return -cmath.phase(a)\n    return (b-a).imag/abs(b-a)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import math\n    angle_rad = (math.atan2(a.imag,a.real))\n    print(angle_rad)\n    angle_deg = angle_rad*180/math.pi\n    print(angle_deg)\n    if angle_deg > 0:\n        print(f\"{angle_deg} degree\")\n    else:\n        print(f\"{180+angle_deg} degree\")\nangle_complex(1+1j,1+1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (a.real == 0 and a.imag == 0 and b.real == 0 and b.imag == 0):\n        return 0\n    else:\n        angle = cmath.phase(a) - cmath.phase(b)\n        if angle > cmath.pi:\n            angle -= 2*cmath.pi\n        elif angle <= -cmath.pi:\n            angle += 2*cmath.pi\n        return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a*b > 0:\n        res=abs(a/b)\n    else:\n        res=abs(a/b)+2*cmath.pi\n    return res\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # a = complex(a)\n    # b = complex(b)\n    # print(type(a))\n    # print(type(b))\n    # c = a - b\n    # c = c.real * c.real + c.imag * c.imag\n    # print(c)\n    # x = (a*b)/(c)\n    # print(x)\n    # print(cmath.phase(x))\n    # return cmath.phase(x)\n    # print(type(c))\n    x = ((a*b)/(a**2+b**2))\n    print(type(x))\n    return cmath.phase(x)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n        else:\n            length -= 1\n        if length < 0:\n            return length\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_1 == 0:\n            length = max(length,count_0)\n        elif count_0 == 0:\n            length = max(length,count_1)\n        else:\n            length = max(length,count_1+count_0)\n    return length\n    \ndef find_missing_number(nums):\n    '''\n    Write a function to find the missing number from an array of sorted integers.\n    '''\n    nums.sort()\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return total\n    \ndef find_sum_of_three_numbers(nums):\n    '''\n    Write a function to find the three entries that sum to zero from a given array. Return the numbers in a sorted array and if there are more than one solutions return the smallest one.\n    '''\n    sorted_nums = sorted(nums)\n    target = 0\n    l,r = 0,len(sorted_nums)-1\n    while l < r:\n        total = sorted_nums[l] + sorted_nums[r]\n        if total == 0:\n            return sorted_nums[l], sorted_nums[r]\n        elif total > 0:\n            target = total\n            r -= 1\n        else:\n            l += 1\n    return sorted_nums[l], sorted_nums[r], target\n    \ndef common_element(list1, list2):\n    '''\n    Write a function to find the common elements in two given lists. The lists can contain duplicate elements.\n    '''\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    return result\n    \ndef common_element2(list1, list2):\n    '''\n    Write a function to find the common elements in two given lists. The lists can contain duplicate elements.\n    '''\n    result = []\n    set1 = set(list1)\n    set2 = set(list2)\n    result = set1 & set2\n    return result\n    \ndef rearrange_digits(input_list):\n    '''\n    Given an input list of digits representing a non-negative integer, \n    return a new list that represents the integer in reverse order.\n    '''\n    result = []\n    if input_list:\n        temp = 0\n        index = 0\n        while input_list:\n            temp = input_list.pop() * 10**index\n            result.append(temp)\n            index += 1\n        result.reverse()\n        return result\n    else:\n        return result\n    \ndef reverse_list(input_list):\n    '''\n    Given an input list, return a new list that contains the same elements as input list in reverse order.\n    '''\n    if input_list:\n        result = []\n        index = len(input_list)-1\n        while index >= 0:\n            result.append(input_list[index])\n            index -= 1\n        return result\n    else:\n        return []\n    \ndef find_middle_index(nums):\n    '''\n    Given a sorted array, return the middle index of the array.\n    The array contains a number of elements.\n    If there are an odd number of elements, return the middle element.\n    '''\n    if not nums:\n        return 0\n    size = len(nums)\n    mid_index = size//2\n    if size % 2 == 0:\n        return nums[mid_index]\n    else:\n        return nums[mid_index]\n    \ndef merge_sorted_lists(list1, list2):\n    '''\n    Given two sorted lists, merge them into a single sorted list.\n    '''\n    result = []\n    l1 = len(list1)\n    l2 = len(list2)\n    i, j = 0, 0\n    while i < l1 or j < l2:\n        if i == l1:\n            result.append(list2[j])\n            j += 1\n        elif j == l2:\n            result.append(list1[i])\n            i += 1\n        elif list1[i] <= list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    return result\n    \ndef merge_sort(input_list):\n    '''\n    Given an input list, sort it using the merge sort algorithm.\n    '''\n    def merge(list1, list2):\n        result = []\n        l1 = len(list1)\n        l2 = len(list2)\n        i, j = 0, 0\n        while i < l1 or j < l2:\n            if i == l1:\n                result.append(list2[j])\n                j += 1\n            elif j == l2:\n                result.append(list1[i])\n                i += 1\n            elif list1[i] < list2[j]:\n                result.append(list1[i])\n                i += 1\n            else:\n                result.append(list2[j])\n                j += 1\n        return result\n    \n    if input_list:\n        size = len(input_list)\n        mid = size//2\n        if size == 1:\n            return input_list\n        left = merge_sort(input_list[:mid])\n        right = merge_sort(input_list[mid:])\n        return merge(left, right)\n    else:\n        return []\n    \ndef find_maximum_sublist_sum(input_list):\n    '''\n    Given a list, find the maximum sum of all sub-lists of the list.\n    The sub-lists must be contiguous.\n    '''\n    if not input_list:\n        return 0\n    sub_list = []\n    max_sum = 0\n    cur_sum = 0\n    for i in input_list:\n        cur_sum += i\n        sub_list.append(cur_sum)\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n    return max_sum\n    \ndef find_all_duplicates(input_list):\n    '''\n    Given a list with integers, find all the duplicates.\n    '''\n    if input_list:\n        result = []\n        sorted_list = sorted(input_list)\n        for i in range(len(sorted_list)):\n            if sorted_list[i] == sorted_list[i+1]:\n                result.append(sorted_list[i])\n        return result\n    else:\n        return []\n    \ndef find_all_duplicates2(input_list):\n    '''\n    Given a list with integers, find all the duplicates.\n    '''\n    if input_list:\n        result = []\n        sorted_list = sorted(input_list)\n        for i in range(len(sorted_list)):\n            if sorted_list[i] == sorted_list[i+1]:\n                result.append(sorted_list[i])\n        return result\n    else:\n        return []\n    \ndef find_all_duplicates3(input_list):\n    '''\n    Given a list with integers, find all the duplicates.\n    '''\n    if input_list:\n        sorted_list = sorted(input_list)\n        result = []\n        for i in range(len(sorted_list)):\n            if sorted_list[i] == sorted_list[i+1]:\n                result.append(sorted_list[i])\n        return result\n    else:\n        return []\n    \ndef find_all_duplicates4(input_list):\n    '''\n    Given a list with integers, find all the duplicates.\n    '''\n    if input_list:\n        result = []\n        sorted_list = sorted(input_list)\n        for i in range(len(sorted_list)):\n            if sorted_list[i] == sorted_list[i+1]:\n                result.append(sorted_list[i]"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            max_diff = max(max_diff, i - (i + 1) // 2)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count = 0\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        max_diff = max(max_diff, count)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    l = len(bin(n)) - 2\n    count = []\n    for i in range(n):\n        count.append(sum(1 for bit in string[i:i+l] if bit == '0'))\n        count.append(sum(1 for bit in string[i:i+l] if bit == '1'))\n    return max(count) - min(count)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    if len(string) == 1:\n        return 1\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == 0 and count_1 == 0:\n            max_diff = count_1\n        elif count_0 > 0 and count_1 > 0:\n            max_diff = max(count_0, count_1)\n        elif count_0 > 0 and count_1 == 0:\n            max_diff = count_0\n        elif count_0 == 0 and count_1 > 0:\n            max_diff = count_1\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # return the maximum difference from 0s to 1s\n    # or maximum difference from 1s to 0s\n    \n    result = 0\n    i = 0\n    \n    while i < len(string):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == \"0\":\n                count_0 += 1\n            if string[j] == \"1\":\n                count_1 += 1\n            if count_0 > count_1:\n                result = count_0 - count_1\n                break\n        i = j + 1\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    len_ = 0\n    for i in string:\n        len_ += int(i)\n    return len_\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    n = len(string)\n    max_length = 0\n    \n    for i in range(n):\n        temp_string = string[i:i+1]\n        count_zeros = temp_string.count('0')\n        count_ones = temp_string.count('1')\n        length = count_ones - count_zeros\n        if length > max_length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def check_zero(string): \n        new_string = ''\n        for i in string:\n            if i == '0': \n                new_string += i \n            else: \n                new_string += '1'\n        return new_string\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    elif a==b:\n        return 0\n    elif a>b:\n        common=1\n        while (a%b)!=0:\n            common+=1\n            a,b=b,a%b\n        return a*common\n    elif a<b:\n        common=1\n        while (b%a)!=0:\n            common+=1\n            b,a=a,b%a\n        return b*common\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, a+1):\n        if a % i == 0:\n            sum += i\n    for j in range(1, b+1):\n        if b % j == 0:\n            sum += j\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count=0\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            count+=i\n    return count\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    for i in range(1, max(a,b) + 1):\n        if a % i == 0 and b % i == 0:\n            c.append(i)\n    return sum(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count = 1\n    while(True):\n        if a % count == 0 and b % count == 0:\n            print(count)\n            break\n        else:\n            count += 1\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = set(range(1, max(a, b))) - set(range(max(a, b), 1, -1))\n    if len(result) == 0:\n        return 0\n    else:\n        return sum(result)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\nsum(10,15)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result=[]\n    divisor_list=[]\n    while (a % 2 == 0):\n        divisor_list.append(2)\n        a = a / 2\n    while (b % 2 == 0):\n        divisor_list.append(2)\n        b = b / 2\n    for i in range(3, a, 2):\n        while (a % i == 0):\n            divisor_list.append(i)\n            a = a / i\n    for i in range(3, b, 2):\n        while (b % i == 0):\n            divisor_list.append(i)\n            b = b / i\n    for i in range(len(divisor_list)):\n        for j in range(i+1, len(divisor_list)):\n            if (divisor_list[i] == divisor_list[j]):\n                result.append(divisor_list[i])\n    return sum(result)\nprint(sum(90,68))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = a + b\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    r=0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            r+=i\n    return r\n    \nif __name__ == '__main__': \n    a = 4\n    b = 3\n    print(sum(a,b)) \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = x * y\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \n    \ndef power(x, y):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    return x ** y\n    \n    \ndef count_hi(str):\n    '''\n    Write a function that counts how many time a character \n    in the given string occurs with the character at the beginning\n    of the string.\n    '''\n    return len([i for i in range(0, len(str)) if str[i:i+1] == 'h'])\n    \n    \ndef add_end(list_1, list_2):\n    '''\n    Write a function that adds two lists together and adds a string at the end.\n    '''\n    return list_1 + list_2 + ['hi']\n    \n    \ndef add_end2(list_1, list_2):\n    '''\n    Write a function that adds two lists together and adds a string at the end.\n    '''\n    return list_1 + list_2 + ['hi']\n    \n    \ndef add_end3(list_1, list_2):\n    '''\n    Write a function that adds two lists together and adds a string at the end.\n    '''\n    return list_1 + list_2 + ['hi']\n    \n    \ndef multiply_list(list_1, list_2):\n    '''\n    Write a function that takes in a list and returns a new list with each number in the\n    list multiplied by each other number in the list.\n    '''\n    return [i * j for i in list_1 for j in list_2]\n    \n    \ndef multiply_list2(list_1, list_2):\n    '''\n    Write a function that takes in a list and returns a new list with each number in the\n    list multiplied by each other number in the list.\n    '''\n    return [i * j for i in list_1 for j in list_2]\n    \n    \ndef even_odd(list_1):\n    '''\n    Write a function that takes in a list and returns a new list with every even number\n    in the original list removed.\n    '''\n    return [i for i in list_1 if i % 2!= 0]\n    \n    \ndef even_odd2(list_1):\n    '''\n    Write a function that takes in a list and returns a new list with every even number\n    in the original list removed.\n    '''\n    return [i for i in list_1 if i % 2!= 0]\n    \n    \ndef add_lists(list_1, list_2):\n    '''\n    Write a function that takes in two lists and returns a new list with each number in \n    the original lists multiplied by each other number in the lists.\n    '''\n    return [[i + j for i in list_1 for j in list_2]\n    \n    \ndef add_lists2(list_1, list_2):\n    '''\n    Write a function that takes in two lists and returns a new list with each number in \n    the original lists multiplied by each other number in the lists.\n    '''\n    return [[i + j for i in list_1 for j in list_2]\n    \n    \ndef multiply_lists_alt(list_1, list_2):\n    '''\n    Write a function that takes in two lists and returns a new list with each number in \n    the original lists multiplied by each other number in the lists.\n    '''\n    return [[i * j for i in list_1 for j in list_2]]\n    \n    \ndef multiply_lists_alt2(list_1, list_2):\n    '''\n    Write a function that takes in two lists and returns a new list with each number in \n    the original lists multiplied by each other number in the lists.\n    '''\n    return [[i * j for i in list_1 for j in list_2]]\n    \n    \ndef add_list_of_lists(list_1, list_2):\n    '''\n    Write a function that takes in two lists of lists and returns a new list with each \n    number in the original lists multiplied by each other number in the lists.\n    '''\n    return [[i + j for i in list_1 for j in list_2]]\n    \n    \ndef add_list_of_lists2(list_1, list_2):\n    '''\n    Write a function that takes in two lists of lists and returns a new list with each \n    number in the original lists multiplied by each other number in the lists.\n    '''\n    return [[i + j for i in list_1 for j in list_2]]\n    \n    \ndef square_list(list_1):\n    '''\n    Write a function that takes in a list and squares every number in the list.\n    '''\n    return [i**2 for i in list_1]\n    \n    \ndef square_list2(list_1):\n    '''\n    Write a function that takes in a list and squares every number in the list.\n    '''\n    return [i**2 for i in list_1]\n    \n    \ndef sorted_nested_list(list_1):\n    '''\n    Write a function that takes in a nested list and returns a new list with the\n    same elements in the original list sorted in descending order.\n    '''\n    return sorted(list_1, key=lambda x: x[0])\n    \n    \ndef sorted_nested_list2(list_1):\n    '''\n    Write a function that takes in a nested list and returns a new list with the\n    same elements in the original list sorted in descending order.\n    '''\n    return sorted(list_1, key=lambda x: x[0])\n    \n    \ndef sorted_nested_list_2(list_1):\n    '''\n    Write a function that takes in a nested list and returns a new list with the\n    same elements in the original list sorted in descending order.\n    '''\n    return sorted(list_1, key=lambda x: x[0])\n    \n    \ndef sorted_nested_list_3(list_1):\n    '''\n    Write a function that takes in a nested list and returns a new list with the\n    same elements in the original list sorted in descending order.\n    '''\n    return sorted(list_1, key=lambda x: x[0])\n    \n    \ndef remove_duplicates(list_1):\n    '''\n    Write a function that takes in a list and returns a new list with all duplicate \n    elements removed.\n    '''\n    return list(set(list_1))\n    \n    \ndef remove_duplicates2(list_1):\n    '''\n    Write a function that takes in a list and returns a new list with all duplicate \n    elements removed.\n    '''\n    return list(set(list_1))\n    \n    \ndef remove_duplicates3(list_1):\n    '''\n    Write a function that takes in a list and returns a new list with all duplicate \n    elements removed.\n    '''\n    return list(set(list_1))\n    \n    \ndef replace_word(string, old_word, new_word):\n    '''\n    Write a function that takes in a string and replaces the old_word with the new_word\n    if the old_word is found in the string.\n    '''\n    return string.replace(old_word, new_word)\n    \n    \ndef replace_word2(string, old_word, new_word):\n    '''\n    Write a function that takes in a string and replaces the old_word with the new_word\n    if the old_word is found in the string.\n    '''\n    return string.replace(old_word, new_word)\n    \n    \ndef replace_word3(string, old_word, new_word):\n    '''\n    Write a function that takes in a string and replaces the old_word with the new_word\n    if the old_word is found in the string.\n    '''\n    return string.replace(old_word, new_word)\n    \n    \ndef replace_word4(string, old_word, new_word):\n    '''\n    Write a function that takes in a string and replaces the old_word with the new_word\n    if the old_word is found in the string.\n    '''\n    return string.replace(old_word, new_word)\n    \n    \ndef replace_word5(string, old_word, new_word):\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x):\n        result = result + y\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result_list = []\n    for word in str:\n        if len(word) > n:\n            result_list.append(word)\n    return result_list\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longwords = []\n    for word in str:\n        if len(word) > n:\n            longwords.append(word)\n    return longwords\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = []\n    for i in str.split():\n        if len(i) >= n:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    nwords = []\n    for word in str:\n        if len(word) > n:\n            nwords.append(word)\n    return nwords\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = []\n    for i in str.split():\n        if len(i) > n:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for i in range(len(str)):\n        word = str[i]\n        if len(word) >= n:\n            words.append(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            long_words.append(str[i])\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = str.split(' ')\n    return [word for word in word_list if len(word) >= n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split():\n        if len(word) >= n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # YOUR CODE HERE\n    my_matrix.sort()\n    if not (is_magic(my_matrix)):\n        return False\n    my_matrix.reverse()\n    if not (is_magic(my_matrix)):\n        return False\n    return True\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = []\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix[0]):\n            return False\n    for j in range(len(my_matrix)):\n        for k in range(len(my_matrix[j])):\n            if my_matrix[j][k] > 0:\n                result.append(my_matrix[j][k])\n    return len(set(result)) == len(result)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if type(my_matrix) is not list:\n        raise TypeError('Invalid type. The matrix must be a matrix')\n    for i in range(len(my_matrix)):\n        if type(my_matrix[i]) is not list:\n            raise TypeError('Invalid type. The matrix must be a matrix')\n        if len(my_matrix)!= len(my_matrix[i]):\n            raise TypeError('Invalid type. The matrix must be a matrix')\n        for j in range(len(my_matrix[i])):\n            if type(my_matrix[i][j]) is not int:\n                raise TypeError('Invalid type. The matrix must be a matrix')\n            elif j!= len(my_matrix[i]) - 1:\n                if my_matrix[i][j] > my_matrix[i][j+1]:\n                    raise TypeError('Invalid type. The matrix must be a matrix')\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix[i]):\n            raise TypeError('Invalid type. The matrix must be a matrix')\n        for j in range(len(my_matrix[i])):\n            if len(my_matrix)!= len(my_matrix[i]):\n                raise TypeError('Invalid type. The matrix must be a matrix')\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] % 1!= 0:\n                raise TypeError('Invalid type. The matrix must be a matrix')\n    for i in range(len(my_matrix)):\n        if my_matrix[i]!= my_matrix[i][::-1]:\n            raise TypeError('Invalid type. The matrix must be a matrix')\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if i!= j:\n                if my_matrix[i][j] + 1!= my_matrix[j][i]:\n                    raise TypeError('Invalid type. The matrix must be a matrix')\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            for k in range(len(my_matrix)):\n                if j!= k and j!= (len(my_matrix[i]) - 1) - k:\n                    if my_matrix[i][j] + my_matrix[i][k]!= my_matrix[k][j]:\n                        raise TypeError('Invalid type. The matrix must be a matrix')\n    for i in range(len(my_matrix)):\n        if my_matrix[i]!= my_matrix[i][::-1]:\n            raise TypeError('Invalid type. The matrix must be a matrix')\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if i!= j:\n                if my_matrix[i][j] + 1!= my_matrix[j][i]:\n                    raise TypeError('Invalid type. The matrix must be a matrix')\n    for i in range(len(my_matrix)):\n        if len(my_matrix)!= len(my_matrix[i]):\n            raise TypeError('Invalid type. The matrix must be a matrix')\n    if len(my_matrix) == 1:\n        return 1\n    if len(my_matrix) == 2:\n        if my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][1]!= my_matrix[1][0]:\n            return 1\n        return 2\n    count = 0\n    for i in range(len(my_matrix)):\n        if my_matrix[i]!= my_matrix[i][::-1]:\n            return 1\n        if len(my_matrix) == 4:\n            for j in range(len(my_matrix[i])):\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n            return 2\n        if len(my_matrix) == 5:\n            for j in range(len(my_matrix[i])):\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n            return 2\n        if len(my_matrix) == 6:\n            for j in range(len(my_matrix[i])):\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n            return 2\n        if len(my_matrix) == 7:\n            for j in range(len(my_matrix[i])):\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n            return 2\n        if len(my_matrix) == 8:\n            for j in range(len(my_matrix[i])):\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if j!= (len(my_matrix[i]) - 1) and my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    return 1\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    l = len(my_matrix)\n    if l!= len(my_matrix[0]):\n        return False\n    \n    for i in range(l):\n        if sum(my_matrix[i])!= sum(my_matrix[l - i - 1]):\n            return False\n    \n    for i in range(l):\n        if sum(my_matrix[i][i:])!= sum(my_matrix[i + 1][i:]) and sum(my_matrix[i][i:])!= sum(my_matrix[i - 1][i:]) and sum(my_matrix[i][i:])!= sum(my_matrix[l - i - 1][i:]):\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 0:\n        return False\n    \n    if my_matrix[0]!= my_matrix[len(my_matrix) - 1]:\n        return False\n        \n    matrix_length = len(my_matrix)\n    \n    for i in range(matrix_length):\n        if my_matrix[i]!= my_matrix[(i + 1) % matrix_length]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if len(my_matrix)!= len(set([sum(x) for x in my_matrix])):\n        return False\n    magic_sum = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    if magic_sum!= 45:\n        return False\n    for i in range(len(my_matrix)):\n        magic_sum = 0\n        for j in range(len(my_matrix)):\n            if i!= j:\n                magic_sum += my_matrix[i][j]\n        if magic_sum!= 45:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check the rows and columns, if the value in any of the rows or columns is not equal to the sum of the numbers in the same row or column, return False\n    row_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    column_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    if row_sum!= column_sum:\n        return False\n        \n    # Check the middle square, if the value in any of the middle squares is not equal to the sum of the middle numbers, return False\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= row_sum:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return (len(my_matrix) == len(my_matrix[0]) and\n        all(is_magic_square_row(row) for row in my_matrix) and\n        all(is_magic_square_col(col) for col in zip(*my_matrix)))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code here\n    # print(my_matrix)\n    is_magic = True\n    # check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        is_magic = False\n        print(\"It's not magic\")\n    else:\n        # find the sum of the elements\n        sum_elements = 0\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix)):\n                sum_elements += my_matrix[i][j]\n        # check if sum_elements == 45\n        if sum_elements!= 45:\n            is_magic = False\n            print(\"It's not magic\")\n        else:\n            # find the square of the sum\n            square_sum = 0\n            for i in range(len(my_matrix)):\n                for j in range(len(my_matrix)):\n                    square_sum += my_matrix[i][j]**2\n            # check if square_sum == 45\n            if square_sum!= 45:\n                is_magic = False\n                print(\"It's not magic\")\n            else:\n                print(\"It's magic\")\n    return is_magic\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check first if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    square_sum = sum(n)\n    if square_sum!= n * n:\n        return False\n    \n    # Check if the matrix is symmetrical\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    \n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    myDict = defaultdict(lambda:0)\n    for i in nums:\n        myDict[i]+=1\n    maxVal = max(myDict.values())\n    for i in myDict:\n        if myDict[i] == maxVal:\n            return i\ndef remove_dups(nums):\n    '''\n    Write a function that takes in a list and returns a new list with the same elements\n    in the original list, but with no duplicates.\n    '''\n    new_list = []\n    for i in nums:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\ndef subarray_with_given_sum(arr,sum_val):\n    '''\n    Write a function to find the first occurence of a subarray of given sum.\n    '''\n    sum_dict = defaultdict(lambda:0)\n    for i in range(len(arr)):\n        sum_dict[arr[i]]+=1\n        if sum(sum_dict.values()) > 0:\n            break\n    if sum(sum_dict.values()) > 1:\n        for i in range(len(arr)-1):\n            currSum = arr[i]\n            while currSum > sum_val:\n                currSum = currSum-arr[i]\n                if currSum == sum_val:\n                    return (i,i+1)\n            else:\n                continue\n    else:\n        return None\ndef merge_sorted_lists(nums1,nums2):\n    '''\n    Write a function that takes in two sorted integer lists and returns a sorted integer\n    list that contains only the elements that are common between the two lists.\n    The new list should be made by concatenating the original lists.\n    '''\n    if len(nums1) > 0:\n        new_list = []\n        if len(nums2) > 0:\n            for i in nums1:\n                if i in nums2:\n                    new_list.append(i)\n            return new_list\n        else:\n            return nums1\n    else:\n        return nums2\ndef min_max_sum(arr):\n    '''\n    Write a function to find the sum of the three largest numbers in an array.\n    '''\n    largest_1 = largest_2 = largest_3 = -1\n    sums = []\n    for i in range(len(arr)):\n        sums.append(arr[i]+largest_3+largest_2)\n        if arr[i] > largest_3:\n            largest_3 = largest_2\n            largest_2 = largest_1\n            largest_1 = arr[i]\n        elif arr[i] > largest_2:\n            largest_2 = arr[i]\n        elif arr[i] > largest_1:\n            largest_1 = arr[i]\n    return (max(sums),min(sums))\ndef find_min_max_index(arr):\n    '''\n    Write a function that takes in a list of integers and returns the minimum and maximum\n    integers.\n    '''\n    if len(arr) > 1:\n        min_val = arr[0]\n        max_val = arr[0]\n        for i in arr:\n            if i < min_val:\n                min_val = i\n            if i > max_val:\n                max_val = i\n    else:\n        min_val = max_val = arr[0]\n    return (min_val,max_val)\ndef reverse_words(string):\n    '''\n    Write a function to reverse the words in a given sentence\n    '''\n    new_str = \"\"\n    if type(string) == str:\n        for i in string:\n            if i!= \" \":\n                new_str+=i\n            else:\n                new_str+=\" \"\n        new_str = new_str[::-1]\n        i = 0\n        new_str = new_str.split()\n        for i in range(len(new_str)):\n            new_str[i] = new_str[i][::-1]\n        return \" \".join(new_str)\n    else:\n        return string\ndef reverse_words_using_stack(string):\n    '''\n    Write a function to reverse the words in a given sentence\n    '''\n    if type(string) == str:\n        new_str = \"\"\n        i = 0\n        while i < len(string):\n            if i!= len(string)-1 and string[i] == \" \" and string[i+1]!= \" \":\n                new_str+=\" \"\n            if i!= len(string)-1 and string[i]!= \" \" and string[i+1] == \" \":\n                new_str+=\" \"\n            if i!= len(string)-1 and string[i]!= \" \":\n                new_str+=string[i]\n            i+=1\n        return new_str\n    else:\n        return string\ndef max_sum_subarray(nums):\n    '''\n    Write a function to find the largest sum of a contiguous subarray.\n    '''\n    if len(nums) > 1:\n        currSum = nums[0]\n        currMax = nums[0]\n        for i in nums[1:]:\n            currSum += i\n            if currSum > currMax:\n                currMax = currSum\n            if currSum < 0:\n                currSum = 0\n        return currMax\n    else:\n        return nums[0]\ndef binary_search(arr,element):\n    '''\n    Write a function that takes in a sorted array of integers and a target integer, and returns\n    the index of the target if it is contained in the array, or -1 if it is not contained in the array.\n    '''\n    if len(arr) > 0:\n        first = 0\n        last = len(arr)-1\n        mid = (first+last)//2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            return binary_search(arr[:mid],element)\n        else:\n            return binary_search(arr[mid+1:],element)\n    else:\n        return -1\ndef reverse_linked_list(head):\n    '''\n    Write a function that takes in the head of a singly linked list and returns a new linked list\n    that is the reverse of the given list.\n    '''\n    if head == None or head.next == None:\n        return head\n    prev = None\n    curr = head\n    while curr:\n        temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = temp\n    return prev\ndef reverse_linked_list_iterative(head):\n    '''\n    Write a function that takes in the head of a singly linked list and returns a new linked list\n    that is the reverse of the given list.\n    '''\n    if head == None or head.next == None:\n        return head\n    curr = head\n    prev = None\n    while curr:\n        curr.next, prev, curr = prev, curr, curr.next\n    return prev\ndef get_intersection_node(a1,a2):\n    '''\n    Write a function that takes in two singly linked lists and returns the node that they\n    intersect. If they do not intersect, return None.\n    '''\n    if not a1 or not a2:\n        return None\n    curr1 = a1\n    curr2 = a2\n    while curr1!= curr2:\n        if curr1:\n            curr1 = curr1.next\n        else:\n            curr1 = a2\n        if curr2:\n            curr2 = curr2.next\n        else:\n            curr2 = a1\n    return curr1\ndef get_intersection_node_recursive(a1,a2):\n    '''\n    Write a function that takes in two singly linked lists and returns the node that they\n    intersect. If they do not intersect, return None.\n    '''\n    if not a1 or not a2:\n        return None\n    if a1 == a2:\n        return a1\n    if a1.next == a2:\n        return a1\n    i"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    map = defaultdict(int)\n    max_count = 0\n    max_item = \"\"\n    for item in nums:\n        map[item] += 1\n        if map[item] > max_count:\n            max_count = map[item]\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for item in nums:\n        count[item] += 1\n    max_item = max(count.items(), key=lambda x:x[1])\n    return max_item[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(lambda:0)\n    for num in nums:\n        dict[num] += 1\n    max_num = max(dict.items(), key=lambda x:x[1])[0]\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = 0\n    counts = defaultdict(int)\n    for item in nums:\n        counts[item] += 1\n        max_count = max(max_count, counts[item])\n        if counts[item] > max_count:\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # if there are no items in the list\n    if len(nums) == 0:\n        return 0\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_count_key = None\n    for num in nums:\n        count_dict[num] += 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_count_key = num\n    return max_count_key\n    \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_value = 0\n    max_key = 0\n    dic = defaultdict(int)\n    for i in nums:\n        dic[i]+=1\n    \n    for key, value in dic.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    occurrences = sorted(d.items(), key=lambda item:item[1], reverse=True)\n    return occurrences[0][0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # use a dict to store the count of each item\n    count = defaultdict(int)\n    # iterate through the list\n    for num in nums:\n        # increment the count for the item\n        count[num] += 1\n    \n    # return the item with the maximum count\n    return max(count, key=count.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # n= len(nums)\n    # i=0\n    # while i < n:\n    #     print(nums[i])\n    #     print('\\n')\n    #     i+=1\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    s = list(str1)\n    s.reverse()\n    for i in range(len(s)):\n        if s[i] not in vowels:\n            s[i] = s[i].upper()\n    return \"\".join(s)\nprint(reverse_vowels(\"pizzat\"))"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reversed_vowels = ''\n    for letter in str1:\n        if letter not in vowels:\n            reversed_vowels += letter\n        else:\n            reversed_vowels += letter\n            reversed_vowels += '*'\n    return reversed_vowels\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            str1[i] = str1[i].lower()\n    print(str1)\n    return ''.join(str1[::-1])\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = \"aeiou\"\n    str2 = ''\n    for char in str1:\n        if char not in vowels:\n            str2 = str2 + char\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    reverse_vowels = ''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            reverse_vowels += str1[len(str1)-i-1]\n        else:\n            reverse_vowels += str1[i]\n    return reverse_vowels\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    lst = []\n    for x in str1:\n        if x not in vowels:\n            lst.append(x)\n        else:\n            continue\n    lst.reverse()\n    return ''.join(lst)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = \"\"\n    for char in str1:\n        if char not in vowels:\n            str2 += char\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = \"\"\n    vowels = 'aeiou'\n    str2 = list(str1)\n    for i in str2:\n        if i in vowels:\n            new_str += i\n        else:\n            new_str += '_'\n    print(new_str)\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    s = list(str1)\n    for i in range(len(str1)):\n        if s[i] in vowels:\n            s[i] = s[i]\n        else:\n            s[i] = '*'\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = str(tup1)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str,tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    print (str(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    res = \"\"\n    for i in range(len(tup1)):\n        res += str(tup1[i]) + \" \"\n    return res\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = str(tup1)\n    return str_tup\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-x for x in nums if x<0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    return sum([x for x in nums if x < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums = list(filter(lambda x: x < 0, nums))\n    return sum(nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    ans = 0\n    for num in nums:\n        if num < 0:\n            ans += num\n    return ans\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    print(sum([n for n in nums if n < 0]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # print(sum([-n for n in nums]))\n    return sum([-n for n in nums])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] + sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    assert n > 0, 'N must be positive integer'\n    n = n * 2 - 1\n    return int(n * (2*n - 1)/3 + 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (3*n-1)/2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return round(0.5 * (1 + sqrt(1.5) * (n-1)))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (int(n * (n**2 + 1)) + 2 * (n**2)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    return (1 - (1 + n) ** 0.5) ** 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize variables\n    x = 0\n    y = 1\n    z = -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n*(3*n-1))//2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n * ((2 * n) + 1))/6)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 6*n*n+1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 0\n    for i in range(1,n+1):\n        num += 1\n        if i%6 == 0:\n            num *= -1\n    return num\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #make the counter of zeroes\n    zeros = 0\n    #make the counter of non-zeroes\n    non_zeros = 0\n    #loop through the array\n    for num in nums:\n        #if the number is zero\n        if num == 0:\n            #increment the zeroes counter\n            zeros += 1\n        #otherwise\n        else:\n            #increment the non zeroes counter\n            non_zeros += 1\n    #return the non zeroes divided by the zeroes\n    return float(non_zeros) / zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonZeros = 0\n    for item in nums:\n        if item == 0:\n            zeros += 1\n        else:\n            nonZeros += 1\n    return zeros / nonZeros\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # count 0\n    count0 = 0\n    # count 1\n    count1 = 0\n    # for each num in the array\n    for num in nums:\n        # if the num is 0, increase count0\n        if num == 0:\n            count0 = count0 + 1\n        # if the num is not 0, increase count1\n        else:\n            count1 = count1 + 1\n    # calculate ratio\n    ratio = count0 / count1\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / nums.count(1)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero = 0\n    non_zero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero += 1\n        else:\n            non_zero += 1\n    return zero/non_zero\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/(len(nums)-count)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for i in nums:\n        if i == 0:\n            zeros+=1\n        else:\n            nonzeros+=1\n    return zeros/nonzeros\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #check if it is an array\n    try:\n        nums = array('i',nums)\n    except TypeError:\n        print('array must be an array of integers')\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # count = 0\n    # nums_array = []\n    # for i in range(len(nums)):\n    #     if nums[i] == 0:\n    #         count += 1\n    #     else:\n    #         nums_array.append(nums[i])\n    # return count/(len(nums_array)-count)\n    return 0 if nums == [] else (nums.count(0) / len(nums))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize sum and index variables\n    s = 0\n    i = 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Power_Of_Two(n): \n        if (n == 0): \n            return False\n        if (n & (n - 1) == 0): \n            return True\n        return False\n    if is_Power_Of_Two(n): \n        return False\n    if not is_Power_Of_Two(n): \n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n == i * i): \n                return True\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize sum and counter.\n    sum = 0\n    count = 1\n    # Loop till count < n / 2.\n    while(count < n / 2):\n        # If count is power of 2, increment sum.\n        if(count & 1):\n            sum += count\n        # else increment count by 2.\n        count += 2\n    # Check if given number is equal to sum.\n    if(n == sum):\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        return False\n    while n>0:\n        if n%2==0:\n            n=n//2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    summ = 0\n    while n > 0: \n        rem = n % 10\n        summ += rem\n        n = n // 10\n    if summ == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    from collections import defaultdict\n    \n    dict_n = defaultdict(int)\n    dict_n[1] = 1\n    dict_n[2] = 1\n    \n    for i in range(3,n+1):\n        dict_n[i] = dict_n[i-1] + dict_n[i-2] \n        \n    if dict_n[n] == n:\n        return True\n    else:\n        return False\n        \nif __name__ == '__main__':\n    print(is_Sum_Of_Powers_Of_Two(3))\n    "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        if n % 2 == 1:\n            return False\n        n = n // 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while n > 0: \n        sum += n % 2\n        n = n // 2\n    return sum == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = 0\n    while (n!=0):\n        s += n%2\n        n = n//2\n    return s==0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #code here \n    \n    s = 0 \n    while n>=1: \n        s+=1\n        n//=2\n    return s==1\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circle_circumference = 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi * (r ** 2)\n    \ndef get_slope(x1, y1, x2, y2):\n    '''\n    Write a function to find the slope of the line formed by two points\n    '''\n    return (y2 - y1)/(x2 - x1)\n    \ndef get_length(x1, y1, x2, y2):\n    '''\n    Write a function to find the length of the line formed by two points\n    '''\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    \ndef get_perimeter(x1, y1, x2, y2):\n    '''\n    Write a function to find the perimeter of the line formed by two points\n    '''\n    return get_length(x1, y1, x2, y2) * 2\n    \ndef get_area(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    p = get_perimeter(x1, y1, x2, y2, x3, y3)\n    h = get_length(x1, y1, x2, y2)\n    a = 0.5 * p * h\n    return math.sqrt(a * (a - p) * (a - h) * (a - p - h))\n    \ndef get_triangle_area(a, b, c):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    p = get_perimeter(a, b, c)\n    h = get_length(a, b, c)\n    a = 0.5 * p * h\n    return math.sqrt(a * (a - p) * (a - h) * (a - p - h))\n    \ndef get_square_area(a, b):\n    '''\n    Write a function to find the area of the square formed by two points\n    '''\n    return a * b\n    \ndef get_square_perimeter(a, b):\n    '''\n    Write a function to find the area of the square formed by two points\n    '''\n    return 2 * (a + b)\n    \ndef get_parallel_slope(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a function to find the parallel slope of the line formed by three points\n    '''\n    return get_slope(x1, y1, x3, y3)\n    \ndef get_parallel_area(a, b, c, r):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    return get_triangle_area(a, b, c) + r * r\n    \ndef get_parallel_perimeter(a, b, c, r):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    return get_triangle_area(a, b, c) + (r * 2)\n    \ndef get_triangle_perimeter(a, b, c):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    p = get_perimeter(a, b, c)\n    h = get_length(a, b, c)\n    return 2 * p + 2 * h\n    \ndef get_triangle_area(a, b, c):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    p = get_perimeter(a, b, c)\n    h = get_length(a, b, c)\n    a = 0.5 * p * h\n    return math.sqrt(a * (a - p) * (a - h) * (a - p - h))\n    \ndef get_parallel_area(a, b, c, r):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    return get_triangle_area(a, b, c) + r * r\n    \ndef get_parallel_perimeter(a, b, c, r):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    return get_triangle_perimeter(a, b, c) + (r * 2)\n    \ndef get_square_perimeter(a, b):\n    '''\n    Write a function to find the area of the square formed by two points\n    '''\n    return 2 * (a + b)\n    \ndef get_square_area(a, b):\n    '''\n    Write a function to find the area of the square formed by two points\n    '''\n    return a * b\n    \ndef get_rectangle_area(a, b):\n    '''\n    Write a function to find the area of the rectangle formed by two points\n    '''\n    return a * b\n    \ndef get_rectangle_perimeter(a, b):\n    '''\n    Write a function to find the area of the rectangle formed by two points\n    '''\n    return 2 * (a + b)\n    \ndef get_rectangle_perimeter(a, b):\n    '''\n    Write a function to find the area of the rectangle formed by two points\n    '''\n    return 2 * (a + b)\n    \ndef get_pentagon_area(a, b, c):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    return math.sqrt(1 + a * b * c * math.sqrt(5 - 4 * math.sqrt(2) * math.sqrt(a ** 2 + b ** 2 + c ** 2) / math.sqrt(5))) / 2\n    \ndef get_pentagon_perimeter(a, b, c):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    return 2 * a + 2 * b + c\n    \ndef get_square_area(a, b):\n    '''\n    Write a function to find the area of the square formed by two points\n    '''\n    return a * b\n    \ndef get_square_perimeter(a, b):\n    '''\n    Write a function to find the area of the square formed by two points\n    '''\n    return a * 2 + b * 2\n    \ndef get_rectangle_perimeter(a, b):\n    '''\n    Write a function to find the area of the rectangle formed by two points\n    '''\n    return a * 2 + b * 2\n    \ndef get_rectangle_area(a, b):\n    '''\n    Write a function to find the area of the rectangle formed by two points\n    '''\n    return a * b\n    \ndef get_circle_area(r):\n    '''\n    Write a function to find the area of the circle\n    '''\n    return math.pi * (r ** 2)\n    \ndef get_circle_circumference(r):\n    '''\n    Write a function to find the circumference of the circle\n    '''\n    return 2 * math.pi * r\n    \ndef get_circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of the circle\n    '''\n    return 2 * math.pi * r\n    \ndef get_square_perimeter(a, b):\n    '''\n    Write a function to find the perimeter of the rectangle formed by two points\n    '''\n    return 2 * (a + b)\n    \ndef get_square_area(a, b):\n    '''\n    Write a function to find the area of the rectangle formed by two points\n    '''\n    return a * b\n    \ndef get_triangle_perimeter(a, b, c):\n    '''\n    Write a function to find the perimeter of the triangle formed by three points\n    '''\n    return a + b + c\n    \ndef get_triangle_area(a, b, c):\n    '''\n    Write a function to find the area of the triangle formed by three points\n    '''\n    p = ge"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r**2*3.142\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n    \ncircle_circumference(5)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for value in test_list:\n        for item in value:\n            new_list.append(item)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    solution = []\n    for i in test_list:\n        solution += i\n    return solution\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for l in test_list:\n        for j in l:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for lst in test_list:\n        for val in lst:\n            new_list.append(val)\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list == []:\n        return []\n    \n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        if isinstance(i,list):\n            result += extract_singly(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list_copy = test_list.copy()\n    flattened_list = []\n    while test_list_copy:\n        elem = test_list_copy.pop()\n        if type(elem) is list:\n            test_list_copy += elem\n        else:\n            flattened_list.append(elem)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    from collections import deque\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    pancakes = []\n    count = 0\n    for i in range(n,0,-1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                tmp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = tmp\n        pancakes.append(nums[i-1])\n        pancakes.append(nums[i])\n    return pancakes\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_pancake(nums):\n        print(nums)\n        if len(nums) <= 1:\n            return nums\n        else:\n            n = len(nums)\n            p = n//2\n            p_ind = 0\n            for i in range(n):\n                while nums[i] > nums[p_ind] and p_ind < p:\n                    p_ind += 1\n                    if p_ind == p:\n                        break\n                nums[i], nums[p_ind] = nums[p_ind], nums[i]\n            return nums\n    return sort_pancake(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        x = i\n        for j in range(x):\n            if nums[j] > nums[x]:\n                nums[x], nums[j] = nums[j], nums[x]\n        x = n - i - 1\n        for j in range(x):\n            if nums[j] > nums[x]:\n                nums[x], nums[j] = nums[j], nums[x]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # if only one element, return unsorted\n    if len(nums) == 1:\n        return nums\n    # else, reverse nums\n    nums.reverse()\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    max_index = len(nums)\n    \n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                \n    return num"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    min_idx = 0\n    for i in range(nums):\n        if nums[i] < nums[min_idx]:\n            min_idx = i\n    \n    # swap nums[i] with nums[nums[i]]\n    # nums[i] -> nums[nums[i]]\n    # nums[nums[i]] -> nums[i]\n    for i in range(nums[min_idx], len(nums)):\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    \n    # swap nums[i] with nums[nums[i]]\n    # nums[i] -> nums[nums[i]]\n    # nums[nums[i]] -> nums[i]\n    for i in range(len(nums) - 1, min_idx, -1):\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, -1, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\nprint(pancake_sort([3, 2, 4, 1]))\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        for i in range(len(nums)-1,0,-1):\n            for j in range(0,i):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n>1:\n        m = n\n        i = 0\n        while i<m//2:\n            if nums[i]>nums[m-1]:\n                nums[i],nums[m-1] = nums[m-1],nums[i]\n            m-=1\n            i+=1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list1[i] == list3[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)==len(list2) and len(list2)==len(list3):\n        \n        number_pairs_found=0\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                number_pairs_found+=1\n        return number_pairs_found\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef list_element_count_morethan2(list1,list2):\n    '''\n    Write a function to count number items that are more than 2 in the given list.\n    '''\n    if len(list1)==len(list2):\n        number_items_morethan2=0\n        for i in range(len(list1)):\n            if list1[i]>2:\n                number_items_morethan2+=1\n        return number_items_morethan2\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef tuple_element_count_morethan2(tuple1,tuple2):\n    '''\n    Write a function to count number items that are more than 2 in the given tuple.\n    '''\n    if len(tuple1)==len(tuple2):\n        number_items_morethan2=0\n        for i in range(len(tuple1)):\n            if tuple1[i]>2:\n                number_items_morethan2+=1\n        return number_items_morethan2\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef convert_string_to_list(string1):\n    '''\n    Write a function to convert the string to a list.\n    '''\n    list1=[]\n    \n    for char in string1:\n        list1.append(char)\n    return list1\n    \n    \ndef convert_string_to_tuple(string1):\n    '''\n    Write a function to convert the string to a tuple.\n    '''\n    tuple1=()\n    \n    for char in string1:\n        tuple1+=(char,)\n    return tuple1\n    \n    \ndef list_element_count_lessthan2(list1,list2):\n    '''\n    Write a function to count number items that are less than 2 in the given list.\n    '''\n    if len(list1)==len(list2):\n        number_items_lessthan2=0\n        for i in range(len(list1)):\n            if list1[i]<2:\n                number_items_lessthan2+=1\n        return number_items_lessthan2\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef tuple_element_count_lessthan2(tuple1,tuple2):\n    '''\n    Write a function to count number items that are less than 2 in the given tuple.\n    '''\n    if len(tuple1)==len(tuple2):\n        number_items_lessthan2=0\n        for i in range(len(tuple1)):\n            if tuple1[i]<2:\n                number_items_lessthan2+=1\n        return number_items_lessthan2\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef list_element_count_odd(list1):\n    '''\n    Write a function to count number items that are odd in the given list.\n    '''\n    if len(list1)==len(list1):\n        number_items_odd=0\n        for i in range(len(list1)):\n            if list1[i]%2!=0:\n                number_items_odd+=1\n        return number_items_odd\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef tuple_element_count_odd(tuple1):\n    '''\n    Write a function to count number items that are odd in the given tuple.\n    '''\n    if len(tuple1)==len(tuple1):\n        number_items_odd=0\n        for i in range(len(tuple1)):\n            if tuple1[i]%2!=0:\n                number_items_odd+=1\n        return number_items_odd\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef list_element_count_equal(list1):\n    '''\n    Write a function to count number items that are equal in the given list.\n    '''\n    if len(list1)==len(list1):\n        number_items_equal=0\n        for i in range(len(list1)):\n            if list1[i]==list1[i]:\n                number_items_equal+=1\n        return number_items_equal\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef tuple_element_count_equal(tuple1):\n    '''\n    Write a function to count number items that are equal in the given tuple.\n    '''\n    if len(tuple1)==len(tuple1):\n        number_items_equal=0\n        for i in range(len(tuple1)):\n            if tuple1[i]==tuple1[i]:\n                number_items_equal+=1\n        return number_items_equal\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef list_element_count_same(list1,list2):\n    '''\n    Write a function to count number items that are the same in the given list.\n    '''\n    if len(list1)==len(list2):\n        number_items_same=0\n        for i in range(len(list1)):\n            if list1[i]==list2[i]:\n                number_items_same+=1\n        return number_items_same\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef tuple_element_count_same(tuple1,tuple2):\n    '''\n    Write a function to count number items that are the same in the given tuple.\n    '''\n    if len(tuple1)==len(tuple2):\n        number_items_same=0\n        for i in range(len(tuple1)):\n            if tuple1[i]==tuple2[i]:\n                number_items_same+=1\n        return number_items_same\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef list_element_count_ascending(list1):\n    '''\n    Write a function to count number items that are ascending in the given list.\n    '''\n    if len(list1)==len(list1):\n        number_items_ascending=0\n        for i in range(len(list1)-1):\n            if list1[i]<list1[i+1]:\n                number_items_ascending+=1\n        return number_items_ascending\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef tuple_element_count_ascending(tuple1):\n    '''\n    Write a function to count number items that are ascending in the given tuple.\n    '''\n    if len(tuple1)==len(tuple1):\n        number_items_ascending=0\n        for i in range(len(tuple1)-1):\n            if tuple1[i]<tuple1[i+1]:\n                number_items_ascending+=1\n        return number_items_ascending\n    else:\n        print(\"Error: input lists are not the same size\")\n    \n    \ndef list_element_count_descending(list1):\n    '''\n    Write a function to count number items that are descending in the given list.\n    '''\n    if len(list1)==len(list1):\n        number_items_descending=0\n        for i in range(len(list1)-1):\n            if list1[i]>list1[i+1]:\n                number_items_descending+=1\n        return number_items_descending\n    else:\n        print(\"Error: input lists are not the same size\")\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            n += 1\n    return n\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            res+=1\n    return res\ndef count_samepair_v2(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res=0\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            res+=1\n        elif list1[i]!=list2[i] and list1[i]!=list3[i]:\n            count+=1\n    return res,count\ndef count_samepair_v3(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res=0\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            res+=1\n        elif list1[i]!=list2[i] and list1[i]!=list3[i]:\n            count+=1\n    return res,count\ndef count_samepair_v4(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res=0\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            res+=1\n        elif list1[i]!=list2[i] and list1[i]!=list3[i]:\n            count+=1\n    return res,count\nif __name__=='__main__':\n    print(count_samepair([1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]))\n    print(count_samepair([1,2,3,4,5],[1,2,3,4,5],[1,2,3,5,5]))\n    print(count_samepair([1,2,3,4,5],[1,2,3,4,5],[5,5,5,5,5]))\n    print(count_samepair_v2([1,2,3,4,5],[1,2,3,4,5],[1,2,3,5,5]))\n    print(count_samepair_v2([1,2,3,4,5],[1,2,3,4,5],[1,2,3,5,6]))\n    print(count_samepair_v2([1,2,3,4,5],[1,2,3,4,5],[5,5,5,5,5]))\n    print(count_samepair_v3([1,2,3,4,5],[1,2,3,4,5],[1,2,3,5,5]))\n    print(count_samepair_v3([1,2,3,4,5],[1,2,3,4,5],[1,2,3,5,6]))\n    print(count_samepair_v3([1,2,3,4,5],[1,2,3,4,5],[5,5,5,5,5]))\n    print(count_samepair_v4([1,2,3,4,5],[1,2,3,4,5],[1,2,3,5,5]))\n    print(count_samepair_v4([1,2,3,4,5],[1,2,3,4,5],[1,2,3,5,6]))\n    print(count_samepair_v4([1,2,3,4,5],[1,2,3,4,5],[5,5,5,5,5]))"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    print(\"Number of same pair in the list is \", count)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    print(list1)\n    print(list2)\n    print(list3)\n    count = 0\n    # i = 0\n    # j = 0\n    # k = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    assert len(list1)==len(list2)==len(list3)\n    cnt=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    try: \n        no_of_list = 0\n        for i in Input: \n            if(type(i) == list): \n                no_of_list += 1\n        return no_of_list \n    except Exception as e: \n        print(str(e)) \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = []\n    for i in Input:\n        if type(i) == list:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(set(Input))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Input = (1,2,3,['a',['b','c'],'d'],['e','f'])\n    # Output = 3\n    # Input = (1,2,3,4)\n    # Output = 1\n    # Input = (1,2)\n    # Output = 1\n    # Input = (1,[1,2])\n    # Output = 1\n    # Input = ()\n    # Output = 0\n    count = 0\n    for i in range(0,len(Input)):\n        if type(Input[i]) == list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return Input.count(\",\")\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list = []\n    for i in range(len(Input)):\n        if Input[i] not in list:\n            list.append(Input[i])\n    return len(list)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i,list):\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Output=0\n    if len(Input) == 0:\n        return 0\n    elif len(Input) == 1:\n        return 1\n    else:\n        for i in range(len(Input)):\n            if type(Input[i]) == list:\n                Output += 1\n            elif type(Input[i]) == tuple:\n                Output += find_lists(Input[i])\n    return Output\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = []\n    for i in range(len(Input)):\n        if Input[i] not in L:\n            L.append(Input[i])\n        else:\n            continue\n    return L\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if(arr[i] - arr[i-1] > max_diff):\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_dif = 0\n    arr = list(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > max_dif:\n                max_dif = abs(arr[i]-arr[j])\n    print(\"Maximum Difference is: \", max_dif)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m_diff = -1\n    for i in range(0,len(arr)-1):\n        if abs(arr[i]-arr[i+1]) > m_diff:\n            m_diff = abs(arr[i]-arr[i+1])\n    return m_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    i=0\n    while i < len(arr)-1:\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n        i += 1\n    return max_diff\n    \ndef max_Diff_II(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    for i in range(n-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef max_Diff_III(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_diff = arr[1] - arr[0]\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n    \ndef max_Diff_IV(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    if n < 2:\n        return 0\n    for i in range(n-1):\n        if arr[i+1] - arr[i] > max_diff:\n            max_diff = arr[i+1] - arr[i]\n    return max_diff\n    \ndef max_Diff_V(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n    \ndef max_Diff_VI(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    if len(arr) < 2:\n        return 0\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef max_Diff_VII(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = arr[i] - arr[i+1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef max_Diff_VIII(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    if len(arr) < 2:\n        return 0\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef max_Diff_IX(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    if n < 2:\n        return 0\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef max_Diff_X(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    if n < 2:\n        return 0\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef max_Diff_XI(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    if n < 2:\n        return 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n    \ndef max_Diff_XII(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    if n < 2:\n        return 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n    \ndef max_Diff_XIII(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_diff = 0\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef max_Diff_XIV(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    if n < 2:\n        return 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n    \ndef max_Diff_XV(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_diff = 0\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef max_Diff_XVI(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_diff = 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n    \ndef max_Diff_XVII(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_diff = 0\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \ndef max_Diff_XVIII(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_diff = 0\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        i"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    if len(arr) < 2: \n        return None\n    max_diff = -float('inf')\n    \n    # Consider all pairs from arr\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            # Update max_diff if required\n            if abs(arr[i] - arr[j]) > max_diff: \n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    if not arr:\n        return -1\n    \n    # check if arr contains even or odd number of elements\n    if len(arr) % 2!= 0:\n        return -1\n    \n    max_diff = 0\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        max_diff = max(max_diff, abs(arr[start] - arr[end]))\n        start += 1\n        end -= 1\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -99999999999999\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            if abs(arr[i] - arr[j]) > max_diff: \n                max_diff = abs(arr[i] - arr[j])\n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    x, y = arr[0], arr[1]\n    i, j = 0, 1\n    \n    while i < len(arr) - 1 and j < len(arr):\n        if arr[i] > x and arr[j] > x:\n            x = max(arr[i], x)\n            y = max(arr[j], y)\n        elif arr[i] > x:\n            x = arr[i]\n        elif arr[j] > x:\n            x = arr[j]\n        i += 1\n        j += 1\n    \n    return y - x\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # for testing\n    def test(a, b, n, x, y):\n        if x**2 + y**2 == n:\n            return (x, y)\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    while x + y <= n:\n        if x * x + y * y == n:\n            return x, y\n        elif x * x + y * y > n:\n            y += 1\n        else:\n            x += 1\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    x, y = 0, 1\n    \n    for i in range(n):\n        if (x*a + y*b) == n:\n            return x, y\n        elif (x*a + y*b) > n:\n            x = x - 1\n        else:\n            y = y + 1\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1,n+1):\n        y = n - (a*x + b)\n        if y!= 0:\n            return (x, y)\n        else:\n            print(x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_faster(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_faster_improved(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_faster_improved_2(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved_2(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved_3(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved_4(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            else:\n                return None\n        \n        elif b == 0:\n            if a%n == 0:\n                return (a//n, y)\n            else:\n                return None\n        \n        else:\n            if a%n == 0 and b%n == 0:\n                return (a//n, b//n)\n            else:\n                return None\n            \n    else:\n        return None\n    \n    \ndef find_solution_improved_5(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # the n must be an integer\n    if type(n) == int:\n        \n        x = 0\n        y = 1\n        \n        if a == 0 and b == 0:\n            return (x,y)\n            \n        elif a == 0:\n            if b%n == 0:\n                return (x,b//n)\n            els"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #x = n/b\n    #y = -x*a\n    print(x, y)\n    if x**2 == n:\n        return (x, y)\n    x = None\n    y = None\n    print(x, y)\n    if (n/b)**2 == a:\n        return (b, -(a*(n/b)))\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1,n):\n        if(a*x + b*x == n):\n            return (a*x, b*x)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    while x == 0 or y == 0:\n        if a*x + b*y == n:\n            return (x, y)\n        if a*x + b*y > n:\n            y = y - 1\n        if a*x + b*y < n:\n            x = x + 1\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solution = None\n    x, y = 0, 0\n    while solution is None:\n        x = x + 1\n        y = y + 1\n        solution = a * x + b * y, a * x * y\n    return solution\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Determines if a solution exists in all 3 directions\n    if a == 0 or b == 0 or n % a == 0 or n % b == 0:\n        return None\n    # Determines if a solution exists in all 3 directions\n    if a == 1 or b == 1 or n % a == 1 or n % b == 1:\n        return (1, 1)\n    x = n\n    y = (n//a) * b\n    if y!= 0:\n        return (x, y)\n    y = (n//b) * a\n    if y!= 0:\n        return (x, y)\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    lst3 = list1 + list2\n    for i in list2:\n        while i in lst3:\n            lst3.remove(i)\n    return lst3\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list2.remove(elem)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # 1st solution\n    # removed = []\n    # for el in list1:\n    #     if el not in list2:\n    #         removed.append(el)\n    # return removed\n    \n    # 2nd solution\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    res = []\n    for i in list1:\n        if i not in list2:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #def remove_elements(list1, list2):\n    list1 = list1[:]\n    list2 = list2[:]\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n            i += 1\n        else:\n            i += 1\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n    "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if (n >= 2):\n        return (n + (n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    else:\n        return sum_series(n-2) + sum_series(n-4) + sum_series(n-6)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n, -2, -2))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2!= 0:\n        print('ERROR')\n    else:\n        i = 0\n        total = 0\n        while i <= n//2:\n            total += i\n            i += 1\n        return total\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n-2) + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n    \ndef main():\n    print(sum_series(5)) # should return 10\n    print(sum_series(4)) # should return 7\n    print(sum_series(3)) # should return 3\n    print(sum_series(2)) # should return 1\n    print(sum_series(1)) # should return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n+1) // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += n - 2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = n - 2\n    x = 0\n    if n == 0:\n        return 0\n    while n > 0:\n        x = x + n\n        n = n - 2\n    return x\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l / s\n    return (s * a) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * pi * (s**2) * l\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    if (len(s) == len(l)):\n        for i in range(len(s)):\n            area += ((s[i] + l[i]) * 0.5)\n        return area\n    else:\n        return 'Error'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s*(tan(pi/s))) / (s-2)\n    return (s*(a))\ndef main():\n    print(area_polygon(5, 6))\n    print(area_polygon(2, 6))\n    print(area_polygon(2, 6))\n    print(area_polygon(1, 1))\n    print(area_polygon(3, 6))\n    print(area_polygon(3, 6))\n    print(area_polygon(3, 4))\n    print(area_polygon(5, 6))\n    print(area_polygon(5, 4))\n    print(area_polygon(5, 3))\n    print(area_polygon(3, 5))\n    print(area_polygon(3, 4))\n    print(area_polygon(3, 3))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if type(s) is not int or type(l) is not int:\n        raise TypeError(\"s and l must be integers\")\n    if s <= 0 or l <= 0:\n        raise ValueError(\"s and l must be positive integers\")\n    a = (pi * s * (s - l)) / (4 * l)\n    print(\"Area of polygon: {:.2f}\".format(a))\ndef is_leap_year(year):\n    '''\n    Write a function to check whether a year is a leap year or not.\n    '''\n    if type(year) is not int:\n        raise TypeError(\"year must be an integer\")\n    if year <= 0:\n        raise ValueError(\"year must be greater than zero\")\n    if year % 4 == 0:\n        return True\n    else:\n        return False\ndef sum_of_digits(n):\n    '''\n    Write a function to find the sum of the digits of a given integer.\n    '''\n    if type(n) is not int:\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    print(\"Sum of digits: {:.2f}\".format(sum))\ndef next_prime(n):\n    '''\n    Write a function to find the next prime number after a given one.\n    '''\n    if type(n) is not int:\n        raise TypeError(\"n must be an integer\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    n = n + 1\n    while True:\n        if is_prime(n):\n            return n\n        n += 1\ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is a prime number or not.\n    '''\n    if type(n) is not int:\n        raise TypeError(\"n must be an integer\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether a given number is perfect square or not.\n    '''\n    if type(n) is not int:\n        raise TypeError(\"n must be an integer\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    sqr = n * n\n    i = 0\n    while sqr > n:\n        sqr = sqr - n\n        i = i + 1\n    if sqr == 0:\n        return True\n    else:\n        return False\ndef list_sum(l):\n    '''\n    Write a function to sum up all the numbers in a list.\n    '''\n    if type(l) is not list:\n        raise TypeError(\"l must be a list\")\n    if len(l) == 0:\n        raise ValueError(\"l must not be empty\")\n    sum = 0\n    for i in l:\n        if type(i) is not int:\n            raise TypeError(\"All numbers in the list must be integers\")\n        sum = sum + i\n    print(\"Sum of list: {:.2f}\".format(sum))\ndef sum_list_filter(l, f):\n    '''\n    Write a function to sum up the numbers in a list, but only if f(i) is True.\n    '''\n    if type(l) is not list:\n        raise TypeError(\"l must be a list\")\n    if type(f) is not (lambda x: True or False):\n        raise TypeError(\"f must be a function\")\n    if len(l) == 0:\n        raise ValueError(\"l must not be empty\")\n    if not callable(f):\n        raise ValueError(\"f must be a function\")\n    sum = 0\n    for i in l:\n        if f(i):\n            sum = sum + i\n    print(\"Sum of list: {:.2f}\".format(sum))\ndef list_avg(l):\n    '''\n    Write a function to calculate the average of a list of numbers.\n    '''\n    if type(l) is not list:\n        raise TypeError(\"l must be a list\")\n    if len(l) == 0:\n        raise ValueError(\"l must not be empty\")\n    sum = 0\n    for i in l:\n        if type(i) is not int:\n            raise TypeError(\"All numbers in the list must be integers\")\n        sum = sum + i\n    return sum / len(l)\ndef all_equal(l):\n    '''\n    Write a function to check if all elements in a list are equal.\n    '''\n    if type(l) is not list:\n        raise TypeError(\"l must be a list\")\n    if len(l) == 0:\n        raise ValueError(\"l must not be empty\")\n    for i in l:\n        if type(i) is not int:\n            raise TypeError(\"All elements in the list must be integers\")\n    return True if l.count(l[0]) == len(l) else False\ndef list_max(l):\n    '''\n    Write a function to find the largest number in a list.\n    '''\n    if type(l) is not list:\n        raise TypeError(\"l must be a list\")\n    if len(l) == 0:\n        raise ValueError(\"l must not be empty\")\n    max = l[0]\n    for i in l:\n        if type(i) is not int:\n            raise TypeError(\"All numbers in the list must be integers\")\n        if i > max:\n            max = i\n    print(\"Maximum in list: {:.2f}\".format(max))\ndef list_min(l):\n    '''\n    Write a function to find the smallest number in a list.\n    '''\n    if type(l) is not list:\n        raise TypeError(\"l must be a list\")\n    if len(l) == 0:\n        raise ValueError(\"l must not be empty\")\n    min = l[0]\n    for i in l:\n        if type(i) is not int:\n            raise TypeError(\"All numbers in the list must be integers\")\n        if i < min:\n            min = i\n    print(\"Minimum in list: {:.2f}\".format(min))\ndef list_reverse(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    if type(l) is not list:\n        raise TypeError(\"l must be a list\")\n    if len(l) == 0:\n        raise ValueError(\"l must not be empty\")\n    l_reversed = []\n    for i in range(len(l)-1, -1, -1):\n        l_reversed.append(l[i])\n    print(\"List reversed: {}\".format(l_reversed))\ndef list_sum_f(l, f):\n    '''\n    Write a function to sum up the numbers in a list, but only if f(i) is True.\n    '''\n    if type(l) is not list:\n        raise TypeError(\"l must be a list\")\n    if type(f) is not (lambda x: True or False):\n        raise TypeError(\"f must be a function\")\n    if len(l) == 0:\n        raise ValueError(\"l must not be empty\")\n    if not callable(f):\n        raise ValueError(\"f must be a function\")\n    sum = 0\n    for i in l:\n        if f(i):\n            sum = sum + i\n    print(\"Sum of list: {:.2f}\".format(sum))\ndef l_print_f(l, f):\n    '''\n    Write a function to print all the elements of a list, only if f(i) is True.\n    '''\n    if type(l) is not list:\n        raise TypeError(\"l must be a list\")\n    if type(f) is not (lambda x: True or False):\n        raise TypeError(\"f must be a function\")\n    if len(l) == 0:\n        raise ValueError(\"l must not be empty\")\n    if not callable(f):\n        raise ValueError(\"f must be a function\")\n    for i in l:\n        i"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # I know this is a simple trick but it works so I'll explain it to the person.\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((s**2*(1/tan(pi/s)))/(tan(pi/s)+1))**2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(f\"Area of a regular polygon with {s} and {l} sides is {s*l/tan(pi/s)}\")\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s * l * 0.5\n    print(a)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if n == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # divisor_sum = 0\n    # for i in range(1,int(math.sqrt(n))+1):\n    #     if n % i == 0:\n    #         divisor_sum += i + n/i\n    # return divisor_sum == n\n    def is_divisor(n):\n        for i in range(1,int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False\n    for i in range(1,int(math.sqrt(n))+1):\n        if is_divisor(n) and is_divisor(i):\n            return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = n\n    divisors = []\n    while a >= 1:\n        if n % a == 0:\n            divisors.append(a)\n        a -= 1\n    return sum(divisors) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            x += i + n // i \n    if x == n: \n        print(\"True\") \n    else: \n        print(\"False\") \ndiv_sum(12)\ndiv_sum(16)\ndiv_sum(35)\ndiv_sum(12)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    else:\n        divisor = 2\n        while n > 0:\n            if n % divisor == 0:\n                return False\n            divisor += 1\n        return True\ndef div_sum_perfect(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers is equal to their product.\n    '''\n    if n == 1:\n        return False\n    else:\n        divisor = 2\n        while n > 0:\n            if n % divisor == 0:\n                n = n/divisor\n            divisor += 1\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    n = int(n)\n    divisors = []\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, math.ceil(n/2)):\n        if n%i == 0:\n            divisors.add(i)\n            divisors.add(int(n/i))\n    return n in divisors\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            div_sum += i\n    return div_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==1:\n        return True\n    else:\n        div_list=[]\n        for i in range(1,int(math.sqrt(n))+1):\n            if n%i==0:\n                div_list.append(i)\n                div_list.append(n/i)\n        div_list.sort()\n        for i in range(len(div_list)):\n            if div_list[i]!=div_list[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_divisor = 0\n    for i in range(1,n):\n        if (n % i == 0):\n            sum_divisor += i\n    if (sum_divisor == n):\n        return True\n    else:\n        return False\ndef is_prime(n):\n    if (n == 1):\n        return False\n    elif (n == 2):\n        return True\n    else:\n        for i in range(2,n):\n            if (n % i == 0):\n                return False\n            else:\n                return True\ndef is_armstrong(n):\n    sum_digits = 0\n    mul_digits = 0\n    i = n\n    while (i > 0):\n        rem = i % 10\n        mul_digits += rem * rem * rem\n        i //= 10\n    return mul_digits == n\ndef is_palindrome(n):\n    str_n = str(n)\n    for i in range(len(str_n) // 2):\n        if (str_n[i]!= str_n[len(str_n) - 1 - i]):\n            return False\n    return True\ndef is_sum_square(n):\n    # return (n * n) == (n + 1) * (n + 2)\n    return (n * n) == (n * n + n)\ndef is_power(n):\n    if (n <= 0):\n        return False\n    if (n == 1):\n        return True\n    if (n == 2):\n        return True\n    if (n == 3):\n        return True\n    if (n == 4):\n        return True\n    # if (n == 5):\n    #     return True\n    if (n % 2 == 0):\n        return False\n    while (n > 1):\n        if (n % 2 == 0):\n            n //= 2\n        else:\n            return False\n    return True\ndef is_prime_num(n):\n    if (n == 1):\n        return False\n    elif (n == 2):\n        return True\n    else:\n        for i in range(2,n):\n            if (n % i == 0):\n                return False\n            else:\n                return True\ndef is_prime_number(n):\n    if (n == 1):\n        return False\n    elif (n == 2):\n        return True\n    else:\n        for i in range(2,n):\n            if (n % i == 0):\n                return False\n            else:\n                return True\ndef is_power_of_two(n):\n    return ((n > 0) and (n & (n - 1) == 0))\ndef is_pythagorean(n):\n    n = int(n)\n    for i in range(1,n):\n        for j in range(i,n):\n            if (n * n + i * i == j * j):\n                return True\n            else:\n                return False\ndef is_perfect_square(n):\n    return (n * n) == 1\ndef is_prime_factor(n):\n    # print (n)\n    if (n == 1):\n        return False\n    elif (n == 2):\n        return True\n    else:\n        for i in range(2,n):\n            if (n % i == 0):\n                return False\n            else:\n                return True\ndef is_pythagorean_triple(n):\n    n = int(n)\n    for i in range(1,n):\n        for j in range(i,n):\n            if ((i * i + j * j) == (i * i) + j * j):\n                return True\n            else:\n                return False\ndef is_prime_factor_triple(n):\n    n = int(n)\n    for i in range(1,n):\n        for j in range(i,n):\n            if (n % i == 0 and n % j == 0):\n                return False\n            else:\n                return True\ndef is_perfect_power(n):\n    i = n\n    j = 1\n    while (i > 0):\n        if (i % j == 0):\n            j = j * 2\n            i //= j\n        else:\n            j = j * 2\n            i //= j\n    return i == 1\ndef is_prime_factor_triple_equal_power(n):\n    n = int(n)\n    for i in range(1,n):\n        for j in range(i,n):\n            if (n % i == 0 and n % j == 0):\n                return True\n            else:\n                return False\ndef is_prime_factor_triple_equal_power_2(n):\n    n = int(n)\n    if (n == 1):\n        return False\n    elif (n == 2):\n        return True\n    else:\n        for i in range(2,n):\n            if (n % i == 0):\n                return False\n            else:\n                return True\ndef is_power_of_three(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,3) % 1 == 0)\ndef is_power_of_four(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_two_2(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,2) % 1 == 0)\ndef is_power_of_four_2(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_two_3(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,3) % 1 == 0)\ndef is_power_of_four_3(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_two_4(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_four_4(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_two_5(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,5) % 1 == 0)\ndef is_power_of_four_5(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_two_6(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,6) % 1 == 0)\ndef is_power_of_four_6(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_two_7(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,7) % 1 == 0)\ndef is_power_of_four_7(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_two_8(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,8) % 1 == 0)\ndef is_power_of_four_8(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_two_9(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,9) % 1 == 0)\ndef is_power_of_four_9(n):\n    n = int(n)\n    return (n > 0) and (math.log(n,4) % 1 == 0)\ndef is_power_of_tw"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1={}\n    for i in range(0,len(str1)):\n        if str1[i] in dict1:\n            dict1[str1[i]]+=1\n        else:\n            dict1[str1[i]]=1\n    result=0\n    for i in range(0,len(str1)):\n        if dict1[str1[i]]>1:\n            result+=1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {}\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in count:\n            count[str1[i]] += 1\n        else:\n            count[str1[i]] = 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    char_dict = {}\n    for i in range(len(str1)):\n        if str1[i] not in char_dict:\n            char_dict[str1[i]] = 1\n        else:\n            char_dict[str1[i]] += 1\n    return char_dict\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    str1_list = list(str1.lower())\n    count = 0\n    \n    for i in str1_list:\n        if i.isalpha():\n            if str1_list.index(i) == ord(i) - 97:\n                count += 1\n            else:\n                pass\n        else:\n            pass\n    \n    print(f\"The number of occurrences of '{i}' in the string is : {count}\")\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter=0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            counter+=1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    \n    str1 = str1.lower()\n    count = 0\n    for x in range(len(str1)):\n        for y in range(len(str1)):\n            if str1.find(str1[x]) == str1.find(str1[y]):\n                count += 1\n            else:\n                count = 0\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    str2 = []\n    str3 = {}\n    count = 0\n    for i in range(len(str1)):\n        str2.append(str1[i])\n    str2 = sorted(str2)\n    for i in range(len(str2)):\n        if str2[i] in str3:\n            str3[str2[i]] = str3[str2[i]]+1\n        else:\n            str3[str2[i]] = 1\n    for key,value in str3.items():\n        if str3[key] > 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return str1.count(\"a\"):\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    res = 0\n    for i in str1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] == 1:\n            res += 1\n    return res\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for letter in range(len(str1)):\n        if str1[letter] in \"abcdefghijklmnopqrstuvwxyz\":\n            if str1[letter].lower() == str1[letter].upper():\n                count = count + 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    #create an empty set\n    even_pairs = set()\n    \n    #loop through the list and count the number of pairs\n    for i in A:\n        if i ^ 2 in even_pairs:\n            #add to the set\n            even_pairs.add(i ^ 2)\n    return len(even_pairs)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in A:\n        for j in A:\n            if i ^ j == 0:\n                even += 1\n    return even\n    \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if(A[i]^A[j])&1:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in range(0,len(A)-1):\n        if A[i] ^ A[i+1] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j and A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    ans = 0\n    #print(\"A\", A)\n    for i in range(0,len(A)): \n        for j in range(i+1,len(A)): \n            #print(i,j)\n            if A[i] ^ A[j] == 0: \n                #print(\"XOR: \", A[i], A[j], \"XOR: \", A[i] ^ A[j])\n                #print(\"XOR: \", A[i], A[j], \":\", A[i] ^ A[j])\n                ans += 1\n    return ans\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        if A[i] ^ A[i+1] == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n                \n    return count\n    \ndef find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i <<= 1\n    return i >> 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 << next_power_of_2(n >> 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    def next_power_of_2(n):\n        if n == 0:\n            return 1\n        else:\n            return (2**(n-1)).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n!= 1:\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i <<= 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while (x <= n):\n        x = x << 1\n    return x\n    \ndef find_max_sum_submatrix(matrix, n, m):\n    '''\n    Find the sum of the maxium submatrix of size 2x2 in a 2D matrix.\n    '''\n    max_sum = -math.inf\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                continue\n            else:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if i + k > n or j + l > m:\n                            continue\n                        else:\n                            if max_sum < sum(matrix[i:i + k, j:l + l]):\n                                max_i = i\n                                max_j = j\n                                max_sum = sum(matrix[i:i + k, j:l + l])\n                                \n    return max_i, max_j, max_sum\n    \ndef find_max_sum_submatrix_opt(matrix, n, m):\n    '''\n    Find the sum of the maxium submatrix of size 2x2 in a 2D matrix.\n    '''\n    max_sum = -math.inf\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                continue\n            else:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if k + l > n or j + l > m:\n                            continue\n                        else:\n                            if sum(matrix[i:k, j:l]) > max_sum:\n                                max_i = i\n                                max_j = j\n                                max_sum = sum(matrix[i:k, j:l])\n                                \n    return max_i, max_j, max_sum\n    \ndef find_max_sum_submatrix_opt_1(matrix, n, m):\n    '''\n    Find the sum of the maxium submatrix of size 2x2 in a 2D matrix.\n    '''\n    max_sum = -math.inf\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                continue\n            else:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if k + l > n or j + l > m:\n                            continue\n                        else:\n                            if sum(matrix[i:k, j:l]) > max_sum:\n                                max_i = i\n                                max_j = j\n                                max_sum = sum(matrix[i:k, j:l])\n                                \n    return max_i, max_j, max_sum\n    \ndef find_max_sum_submatrix_opt_2(matrix, n, m):\n    '''\n    Find the sum of the maxium submatrix of size 2x2 in a 2D matrix.\n    '''\n    max_sum = -math.inf\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                continue\n            else:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if k + l > n or j + l > m:\n                            continue\n                        else:\n                            if sum(matrix[i:k, j:l]) > max_sum:\n                                max_i = i\n                                max_j = j\n                                max_sum = sum(matrix[i:k, j:l])\n                                \n    return max_i, max_j, max_sum\n    \ndef matrix_elements_sum(matrix, n, m):\n    '''\n    Find the sum of the maxium submatrix of size 2x2 in a 2D matrix.\n    '''\n    matrix = np.array(matrix)\n    max_sum = -math.inf\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                continue\n            else:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if k + l > n or j + l > m:\n                            continue\n                        else:\n                            if sum(matrix[i:k, j:l]) > max_sum:\n                                max_i = i\n                                max_j = j\n                                max_sum = sum(matrix[i:k, j:l])\n                                \n    return max_i, max_j, max_sum\n    \ndef find_matrix_element_sum(matrix, n, m):\n    '''\n    Find the sum of the maxium submatrix of size 2x2 in a 2D matrix.\n    '''\n    matrix = np.array(matrix)\n    max_sum = -math.inf\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                continue\n            else:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if k + l > n or j + l > m:\n                            continue\n                        else:\n                            if sum(matrix[i:k, j:l]) > max_sum:\n                                max_i = i\n                                max_j = j\n                                max_sum = sum(matrix[i:k, j:l])\n                                \n    return max_i, max_j, max_sum\n    \ndef find_matrix_element_sum_1(matrix, n, m):\n    '''\n    Find the sum of the maxium submatrix of size 2x2 in a 2D matrix.\n    '''\n    matrix = np.array(matrix)\n    max_sum = -math.inf\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                continue\n            else:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if k + l > n or j + l > m:\n                            continue\n                        else:\n                            if sum(matrix[i:k, j:l]) > max_sum:\n                                max_i = i\n                                max_j = j\n                                max_sum = sum(matrix[i:k, j:l])\n                                \n    return max_i, max_j, max_sum\n    \ndef find_matrix_element_sum_2(matrix, n, m):\n    '''\n    Find the sum of the maxium submatrix of size 2x2 in a 2D matrix.\n    '''\n    matrix = np.array(matrix)\n    max_sum = -math.inf\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n                continue\n            else:\n                for k in range(i, n):\n                    for l in range(j, m):\n                        if k + l > n or j + l > m:\n                            continue\n                        else:\n                            if sum(matrix[i:k, j:l]) > max_sum:\n                                max_i = i\n                                max_j = j\n                                max_sum = sum(matrix[i:k, j:l])\n                                \n    return max_i, max_j, max_sum\n    \ndef find_matrix_element_sum_3(ma"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while 2**i <= n:\n        i += 1\n    return 2**i\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return None\n    ans = 1\n    while ans < n:\n        ans = 2**ans\n    return ans\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while (1<<i) < n:\n        i = i + 1\n    return (1<<i)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #CODE HERE\n    if n == 0:\n        return 1\n    i = 0\n    while True:\n        if 2**i <= n:\n            return 2**i\n        else:\n            i += 1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\ndef countFrequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    from collections import Counter\n    return Counter(a)[x]\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a_count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            a_count += 1\n    return a_count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #Function Call\n    result = 0\n    for i in range(len(a)):\n        if(a[i] == x):\n            result += 1\n    print(result)\n    return result\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.append(x)\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #method 1\n    #iterate through the list and if the item in the list is equal to the item in the list, then add one to the count.\n    #if the item in the list is not equal to the item in the list then return the count.\n    count=0\n    for i in range(len(a)):\n        if x==a[i]:\n            count=count+1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    count = 0\n    sum = 0\n    for i in range(m, n+1):\n        count += 1\n        sum += list1[i]\n    print(f\"The sum of the numbers between {m} and {n} is: {sum}\")\n    print(f\"The number of elements in the list is: {count}\")\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if len(list1) == 0:\n        return 0\n    if m == n:\n        sum = list1[m]\n    elif m < 0 or m > len(list1) - 1 or n < 0 or n > len(list1) - 1:\n        return 0\n    elif m > n:\n        return 0\n    else:\n        sum = sum + list1[m] + list1[n]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    summ = 0\n    for i in range(m-1, n):\n        summ += list1[i]\n    return summ\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3)*a\n    \ndef diameter_pentagon(a):\n    '''\n    Write a function to find the diameter of a regular pentagon from the length of its sides.\n    '''\n    return 2*a\n    \ndef perimeter_trigon(a,b):\n    '''\n    Write a function to find the perimeter of a regular trigon from the length of its sides.\n    '''\n    return a+b+a\n    \ndef area_trigon(a,b):\n    '''\n    Write a function to find the area of a regular trigon from the length of its sides.\n    '''\n    return (a*b)/2\n    \ndef diameter_trigon(a,b):\n    '''\n    Write a function to find the diameter of a regular trigon from the length of its sides.\n    '''\n    return max(a,b,a+b)\n    \ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\n    \ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from the length of its sides.\n    '''\n    return a*b\n    \ndef diameter_rectangle(a,b):\n    '''\n    Write a function to find the diameter of a regular rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\n    \ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return 4*a\n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    return a**2\n    \ndef diameter_square(a):\n    '''\n    Write a function to find the diameter of a regular square from the length of its sides.\n    '''\n    return 2*a\n    \ndef perimeter_hexagon(a,b):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*(a+b)\n    \ndef area_hexagon(a,b):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return (a*b)/2\n    \ndef diameter_hexagon(a,b):\n    '''\n    Write a function to find the diameter of a regular hexagon from the length of its sides.\n    '''\n    return max(a,b,a+b)\n    \ndef perimeter_octagon(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 12*(a+b)\n    \ndef area_octagon(a,b):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a*b)/2\n    \ndef diameter_octagon(a,b):\n    '''\n    Write a function to find the diameter of a regular octagon from the length of its sides.\n    '''\n    return max(a,b,a+b)\n    \ndef perimeter_heptagon(a,b):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 6*(a+b)\n    \ndef area_heptagon(a,b):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return (a*b)/2\n    \ndef diameter_heptagon(a,b):\n    '''\n    Write a function to find the diameter of a regular heptagon from the length of its sides.\n    '''\n    return max(a,b,a+b)\n    \ndef perimeter_squiggle(a,b):\n    '''\n    Write a function to find the perimeter of a regular squiggle from the length of its sides.\n    '''\n    return (4*a*(a+b))/3\n    \ndef area_squiggle(a,b):\n    '''\n    Write a function to find the area of a regular squiggle from the length of its sides.\n    '''\n    return a*b/2\n    \ndef diameter_squiggle(a,b):\n    '''\n    Write a function to find the diameter of a regular squiggle from the length of its sides.\n    '''\n    return max(a,b,a+b)\n    \ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a+b+c\n    \ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    p = (a+b+c)/2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef diameter_triangle(a,b,c):\n    '''\n    Write a function to find the diameter of a regular triangle from the length of its sides.\n    '''\n    p = (a+b+c)/2\n    return max(a,b,c,a+b,a+c,b+c)\n    \ndef perimeter_right_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular right triangle from the length of its sides.\n    '''\n    return a+b+c\n    \ndef area_right_triangle(a,b,c):\n    '''\n    Write a function to find the area of a regular right triangle from the length of its sides.\n    '''\n    p = (a+b+c)/2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef diameter_right_triangle(a,b,c):\n    '''\n    Write a function to find the diameter of a regular right triangle from the length of its sides.\n    '''\n    p = (a+b+c)/2\n    return max(a,b,c,a+b,a+c,b+c)\n    \ndef perimeter_wide_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular wide triangle from the length of its sides.\n    '''\n    return a+b+c\n    \ndef area_wide_triangle(a,b,c):\n    '''\n    Write a function to find the area of a regular wide triangle from the length of its sides.\n    '''\n    p = (a+b+c)/2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef diameter_wide_triangle(a,b,c):\n    '''\n    Write a function to find the diameter of a regular wide triangle from the length of its sides.\n    '''\n    p = (a+b+c)/2\n    return max(a,b,c,a+b,a+c,b+c)\n    \ndef perimeter_right_right_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular right right triangle from the length of its sides.\n    '''\n    return a+b+c\n    \ndef area_right_right_triangle(a,b,c):\n    '''\n    Write a function to find the area of a regular right right triangle from the length of its sides.\n    '''\n    p = (a+b+c)/2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef diameter_right_right_triangle(a,b,c):\n    '''\n    Write a function to find the diameter of a regular right right triangl"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 0.5*a*math.sin(math.pi/5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = a\n    if sides <= 0:\n        print(\"Please provide a positive number\")\n    else:\n        sides = sides + 1\n        length = sides * 2\n        perimeter = length * 3.142\n        return(perimeter)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = a * ((5 * (math.sqrt(5)) - 1)) / 4\n    return p\n    # Write your function here\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3)*(a*(a+1))/2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n    \ndef square_root_of_side_times_perimeter(a):\n    '''\n    Write a function that finds the square root of side times perimeter.\n    '''\n    return math.sqrt(a * 5)\n    \ndef main():\n    print('Using a regular pentagon:')\n    print('--Perimeter: ', perimeter_pentagon(5))\n    print('--Square root: ', square_root_of_side_times_perimeter(5))\n    print()\n    \n    print('Using a irregular pentagon:')\n    print('--Perimeter: ', perimeter_pentagon(3))\n    print('--Square root: ', square_root_of_side_times_perimeter(3))\n    print()\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 0.5*a*((a+1)**0.5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3 * (a ** 2))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (math.sqrt(5)*a)+(5*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = int(math.sqrt(5) * a)\n    return n * 5\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s' or s[i] == 't' or s[i] == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for letter in s:\n        if letter == 'd':\n            count += 1\n        if letter == 'a':\n            count += 1\n        if letter == 'n':\n            count += 1\n        if letter == 'e':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n    n = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            n += 1\n    return n\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' or i == 'd' or i == 't':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n    \ndef count_occurance_recursive(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    if s[0] == 'a':\n        return 1 + count_occurance_recursive(s[1:])\n    else:\n        return count_occurance_recursive(s[1:])\n    \ndef count_occurance_iterative(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    i = 0\n    j = len(s) - 1\n    while j >= 0:\n        if s[i] == 'a':\n            i += 1\n        if s[j] == 'a':\n            j -= 1\n        if s[i]!= s[j]:\n            return count_occurance_iterative(s[i:j])\n    return 1 + count_occurance_iterative(s[i+1:])\n    \ndef longest_word(s):\n    '''\n    Write a function that takes a string as argument and returns the length of the longest word in that string.\n    '''\n    if s == '':\n        return 0\n    elif s[0] in '-0123456789':\n        return 1 + longest_word(s[1:])\n    else:\n        return 1 + max(longest_word(s[1:]), longest_word(s[2:]))\n        \ndef longest_word_recursive(s):\n    '''\n    Write a function that takes a string as argument and returns the length of the longest word in that string.\n    '''\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s[0] in '-0123456789':\n            return 1\n        else:\n            return 1 + longest_word_recursive(s[1:])\n    else:\n        return 1 + max(longest_word_recursive(s[1:]), longest_word_recursive(s[2:]))\n        \ndef is_palindrome(s):\n    '''\n    Write a function that takes a string as argument and returns True if the string is a palindrome, else False.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome_recursive(s):\n    '''\n    Write a function that takes a string as argument and returns True if the string is a palindrome, else False.\n    '''\n    if len(s) <= 1:\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return is_palindrome_recursive(s[1:-1])\n    \ndef is_palindrome_iterative(s):\n    '''\n    Write a function that takes a string as argument and returns True if the string is a palindrome, else False.\n    '''\n    if len(s) <= 1:\n        return True\n    i = 0\n    j = len(s) - 1\n    while j >= 0:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_palindrome_iterative_optimized(s):\n    '''\n    Write a function that takes a string as argument and returns True if the string is a palindrome, else False.\n    '''\n    if len(s) <= 1:\n        return True\n    i = 0\n    j = len(s) - 1\n    while j >= 0:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef two_strings_are_permutations_recursive(s1, s2):\n    '''\n    Write a function that takes two strings as argument and returns True if they are permutations of one another, else False.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1 == s2:\n        return True\n    else:\n        return two_strings_are_permutations_recursive(s1[1:], s2[1:])\n    \ndef two_strings_are_permutations_recursive_optimized(s1, s2):\n    '''\n    Write a function that takes two strings as argument and returns True if they are permutations of one another, else False.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1 == s2:\n        return True\n    else:\n        return two_strings_are_permutations_recursive_optimized(s1[1:], s2[1:])\n    \ndef two_strings_are_permutations(s1, s2):\n    '''\n    Write a function that takes two strings as argument and returns True if they are permutations of one another, else False.\n    '''\n    s1_hash = {}\n    s2_hash = {}\n    for i in range(len(s1)):\n        if s1[i] in s1_hash:\n            s1_hash[s1[i]] += 1\n        else:\n            s1_hash[s1[i]] = 1\n    for i in range(len(s2)):\n        if s2[i] in s2_hash:\n            s2_hash[s2[i]] += 1\n        else:\n            s2_hash[s2[i]] = 1\n    if s1_hash == s2_hash:\n        return True\n    return False\n    \ndef two_strings_are_permutations_optimized(s1, s2):\n    '''\n    Write a function that takes two strings as argument and returns True if they are permutations of one another, else False.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1 == s2:\n        return True\n    else:\n        return two_strings_are_permutations_optimized(s1[1:], s2[1:])\n    \ndef balanced_paranthesis_iterative(s):\n    '''\n    Write a function that takes a string as argument and returns True if the string is balanced, else False.\n    '''\n    if len(s) == 0:\n        return True\n    i = 0\n    j = len(s) - 1\n    while j >= 0:\n        if s[i] == '(' and s[j] == ')':\n            i += 1\n            j -= 1\n        if s[i]!= '(' and s[j]!= ')':\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef balanced_paranthesis_recursive(s):\n    '''\n    Write a function that takes a string as argument and returns True if the string is balanced, else False.\n    '''\n    if len(s) == 0:\n        return True\n    if s[0] == '(':\n        return balanced_paranthesis_recursive(s[1:])\n    if s[0] == ')':\n        return balanced_paranthesis_recursive(s[1:])\n    else:\n        return False\n        \ndef is_palindrome_iterative(s):\n    '''\n    Write a function that takes a string as argument and returns True if the string is a palindrome, else False.\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    else:\n        return is_palindrome_iterative(s[1:-1])\n        \ndef is_palindrome_recursive(s):\n    '''\n    Write a function that takes a string as argument and returns True if the string is a palindrome, else False.\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    else:\n        return is_palindrome_recursive(s[1:-1])\n        \ndef i"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s.find('std') == -1:\n        return 0\n    else:\n        return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == \"st\":\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-len('std')):\n        if s[i:i+len('std')] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        for i in test_tuple:\n            if type(i)!= type(test_tuple[0]):\n                return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_type = True\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            test_type = False\n            break\n    return test_type\n    \n    \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    # Initialize and get the list of data type from tuple\n    data_type = type(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l=[]\n    for item in test_tuple:\n        l.append(type(item))\n    return len(set(l))==1\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        for i in test_tuple:\n            if type(i)!= type(test_tuple[0]):\n                return False\n        return True\n    except Exception:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_dict = {}\n    for element in test_tuple:\n        if element in type_dict:\n            continue\n        else:\n            type_dict[element] = type(element)\n    for key in type_dict:\n        if type_dict[key]!= type_dict[key]:\n            print(\"Type of: \", key, \" and \", type_dict[key], \" are not same\")\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    x, y = test_tuple\n    if type(x)!= type(y) and type(x)!= type(y):\n        print(\"All elements must have same type\")\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all([isinstance(x, type(test_tuple[0])) for x in test_tuple])\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    print('\\nChecking if all the elements in tuple have same data type or not:')\n    print('{}'.format(test_tuple))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if all(type(x) is type(test_tuple[0]) for x in test_tuple):\n            print(True)\n        else:\n            print(False)\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    elif n == 2:\n        return arr[0] == x or arr[1] == x\n    elif arr[n//2] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    assert isinstance(arr, list) and len(arr) > 0\n    assert isinstance(n, int) and n > 0\n    assert isinstance(x, int) and x > 0 and x <= n\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    \n    for i in range(n):\n        if arr[i] == x:\n            count = count + 1\n            \n    if count > n//2:\n        return True\n    else:\n        return False\n        \ndef intersection(arr1, arr2):\n    '''\n    Given two sorted arrays, find their intersection.\n    '''\n    result = []\n    \n    if len(arr1) < len(arr2):\n        shorter = arr1\n        longer = arr2\n    else:\n        shorter = arr2\n        longer = arr1\n        \n    i = 0\n    j = 0\n    \n    while i < len(shorter) and j < len(longer):\n        if shorter[i] == longer[j]:\n            result.append(shorter[i])\n            i = i + 1\n            j = j + 1\n        elif shorter[i] < longer[j]:\n            i = i + 1\n        else:\n            j = j + 1\n            \n    return result\n        \ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Given two sorted arrays, merge them into a single sorted array.\n    '''\n    merged_arr = []\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i = i + 1\n        else:\n            merged_arr.append(arr2[j])\n            j = j + 1\n            \n    if i < len(arr1):\n        merged_arr.extend(arr1[i:])\n    if j < len(arr2):\n        merged_arr.extend(arr2[j:])\n        \n    return merged_arr\n        \ndef zero_matrix(arr):\n    '''\n    Write a function that takes in a matrix and modifies it such that all non-zero elements are positive.\n    '''\n    zero = []\n    \n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == 0:\n                zero.append([i,j])\n                \n    for ele in zero:\n        arr[ele[0]][ele[1]] = abs(arr[ele[0]][ele[1]])\n        \n    return arr\n        \ndef diagonal_difference(arr):\n    '''\n    Write a function that takes in a square matrix and returns the difference between the sums of the upper and lower diagonal matrices.\n    '''\n    sum_lower = 0\n    sum_upper = 0\n    \n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if i == j:\n                sum_lower = sum_lower + arr[i][j]\n                \n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if len(arr) - i == j:\n                sum_upper = sum_upper + arr[i][j]\n                \n    return sum_upper - sum_lower\n        \ndef palindrome(string):\n    '''\n    Write a function that takes in a string and determines whether it is a palindrome.\n    '''\n    original = \"\"\n    reversed = \"\"\n    \n    for i in range(len(string)):\n        original = original + string[i]\n        \n    for i in reversed(range(len(string))):\n        reversed = reversed + string[i]\n        \n    if original == reversed:\n        return True\n    else:\n        return False\n        \ndef is_pangram(sentence):\n    '''\n    Write a function that takes in a sentence and determines whether it is a pangram.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    if len(sentence) < 26:\n        for i in range(len(sentence)):\n            if sentence[i] not in alphabet:\n                return False\n                \n        return True\n    else:\n        return False\n        \ndef is_pangram_v2(sentence):\n    '''\n    Write a function that takes in a sentence and determines whether it is a pangram.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    if len(sentence) < 26:\n        for char in sentence.lower():\n            if char not in alphabet:\n                return False\n        return True\n    else:\n        return False\n        \ndef lucky_ticket(tickets):\n    '''\n    Given a list of tickets where tickets[i] is the ticket of the ith person. Each ticket contains an integer array with the numbers on each ticket. For example, if tickets = [[1,3,5],[2,6,7]], then the following are valid tickets:\n    - 1,2,3,5\n    - 1,3,5,7\n    - 2,6,7,1\n    - 2,6,7,3\n    - 3,5,7,1\n    - 3,5,7,2\n    You may return the ticket that has the highest number of matching numbers. If there are multiple valid tickets with the highest number of matching numbers, return the ticket that comes first alphabetically (with the numbers on each ticket sorted, from left to right).\n    '''\n    results = []\n    \n    for ticket in tickets:\n        valid = True\n        for i in range(len(ticket)):\n            if ticket[i] not in range(1,len(tickets) + 1):\n                valid = False\n                break\n        if valid == True:\n            results.append(ticket)\n    \n    results.sort(key=lambda x: sorted(x))\n    \n    return results[0]\n        \ndef lucky_ticket_v2(tickets):\n    '''\n    Given a list of tickets where tickets[i] is the ticket of the ith person. Each ticket contains an integer array with the numbers on each ticket. For example, if tickets = [[1,3,5],[2,6,7]], then the following are valid tickets:\n    - 1,2,3,5\n    - 1,3,5,7\n    - 2,6,7,1\n    - 2,6,7,3\n    - 3,5,7,1\n    - 3,5,7,2\n    You may return the ticket that has the highest number of matching numbers. If there are multiple valid tickets with the highest number of matching numbers, return the ticket that comes first alphabetically (with the numbers on each ticket sorted, from left to right).\n    '''\n    results = []\n    \n    for ticket in tickets:\n        valid = True\n        for i in range(len(ticket)):\n            if ticket[i] not in range(1,len(tickets) + 1):\n                valid = False\n                break\n        if valid == True:\n            results.append(ticket)\n    \n    results.sort(key=lambda x: sorted(x))\n    \n    return results[0]\n        \ndef reverse_string(string):\n    '''\n    Write a function that takes in a string and returns the reverse of the string.\n    '''\n    reversed = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversed = reversed + string[i]\n        \n    return reversed\n        \ndef reverse_string_v2(string):\n    '''\n    Write a function that takes in a string and returns the reverse of the string.\n    '''\n    reversed = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversed = reversed + string[i]\n        \n    return reversed\n        \ndef min_max_keys(dictionary):\n    '''\n    Write a function that takes in a dictionary and returns a tuple containing the minimum and maximum keys in the dictionary.\n    '''\n    minimum = float(\"inf\")\n    maximum = float(\"-inf\")\n    for key in dictionary:\n        if dictionary[key] < minimum:\n            minimum = dictionary[key]\n        if dictionary[key] > maximum:\n            maximum = dictionary[key]"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 1\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c += 1\n    return (c > n/2)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in arr:\n        if i == x:\n            count = 1\n            for j in arr:\n                if j == x:\n                    count += 1\n            if count > n/2:\n                return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    # if x is at the right end, then x is not a majority element\n    if n==1:\n        return False\n    while(left<=right):\n        mid = (left+right)//2\n        if arr[mid]==x:\n            left = mid+1\n        else:\n            right = mid-1\n    return left==n-1\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    \n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if(n == 0 or x == None):\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    length = n\n    while (length > 0):\n        if (arr[length - 1] == x):\n            length = length - 1\n        else:\n            length = length - 2\n    return length >= 0\n    "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # ans = 0\n    # while(n):\n    #     if(n&1):\n    #         ans+=1\n    #     n>>=1\n    # return ans\n    # ans = 0\n    # n = bin(n)[2:]\n    # for i in range(len(n)):\n    #     if n[i] == '1':\n    #         ans += 1\n    # return ans\n    \n    if(n==0):\n        return 0\n    while(n&1==0):\n        n>>=1\n    return (n-1)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        count += 1\n        n= n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = bin(n)\n    c = s.count('1')\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res = 0\n    for i in range(32):\n        if (n & (1<<i)) > 0:\n            res += 1\n    return res\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n&1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    print(count)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if (n <= 0): \n        print(\"Please enter a positive integer\") \n        return\n    res = 0\n    while (n): \n        res += (n & 1)\n        n >>= 1\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str[::-1]\n    res = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            res += str[i]\n    return res[::-1]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list_string = str.split()\n    for i in range(0, len(list_string)):\n        if (i % 2)!= 0:\n            list_string[i] = ''\n    print(list_string)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([char for i, char in enumerate(str) if i%2 ==0])\nprint(odd_values_string(\"pritesh\"))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == '':\n        return ''\n    str = list(str)\n    for i in range(0,len(str)):\n        if i % 2 == 1:\n            str.pop(i)\n    return ''.join(str)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n    \n    # return str.replace(\"[^0-9]\", \"\")\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = list(str)\n    for i in range(0, len(str_list), 2):\n        str_list.remove(str_list[i])\n    return ''.join(str_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    final_string = \"\"\n    length = len(str)\n    \n    if length > 0:\n        for i in range(length):\n            if i%2 == 0:\n                final_string += str[i]\n    \n    return final_string\n    "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    # Declare and initialize list of odd character in a string\n    odd_list = []\n    \n    # Iterate and store index value of each character\n    for i in range(len(str)):\n        if i%2!= 0:\n            odd_list.append(str[i])\n    \n    # Return empty string if the list is empty\n    if not odd_list:\n        return \"\"\n    \n    # Return result as string\n    return ''.join(odd_list)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < a:\n        if b < c:\n            return b\n        else:\n            return c\n    elif c < a:\n        if c < b:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    else:\n        if b>c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c: \n        return a\n    elif a<c<b: \n        return a\n    elif b<c<a: \n        return b\n    elif a>b>c: \n        return c\n    elif a>c>b: \n        return c\n    elif b>c>a: \n        return c\n    elif a==b==c: \n        return a\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a if (a<b and a<c) else (b if b<c else c)\n    \n    \n    \ndef print_line(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_1(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_2(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_3(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_4(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_5(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_6(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_7(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_8(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_9(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_10(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_11(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_12(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_13(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_14(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_15(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_16(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_17(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_18(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_19(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_20(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_21(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_22(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)+space*i, end='')\n        \n        \ndef print_lines_23(n, c='-', space=' '):\n    '''\n    Given a number n, print n lines of '+' or '-' depending on its parity.\n    '''\n    for i in range(n):\n        print(c*(n-i)"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        elif b<c:\n            return c\n        else:\n            return b\n    elif b<a:\n        if a<c:\n            return a\n        elif b<c:\n            return c\n        else:\n            return b\n    elif a<b:\n        if a<c:\n            return a\n        elif b<c:\n            return c\n        else:\n            return b\n    else:\n        return c\nprint(min_of_three(3,1,5))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return a\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n    \ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    else:\n        if b>c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def check_Bit_Set_Or_Not(x,l,r):\n        if x & (1 << l)!= 0 or x & (1 << r)!= 0:\n            return True\n        else:\n            return False\n    return check_Bit_Set_Or_Not(n,l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (i & i-1):\n            return 0\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s = bin(l)[2:]\n    e = bin(r)[2:]\n    t = ''.join(['0' for i in range(len(s)-1)])\n    if len(s) < len(e):\n        for i in range(len(e)-len(s)):\n            t = t + '0'\n    if t == s:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    flag = 1\n    for i in range(l,r+1):\n        if(bin(i).count('1')==n):\n            flag = 0\n    if(flag==1):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set = 1\n    for i in range(l,r+1):\n        if(i&(i-1)!=0):\n            set = 0\n            break\n    if(set==1):\n        print('All bits are set in the range.')\n    else:\n        print('All bits are not set in the range.')\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    result = 1\n    for i in range(l,r+1):\n        result = result & i\n    if result == 0:\n        print(\"{} is a set bit\".format(n))\n    else:\n        print(\"{} is not a set bit\".format(n))\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(r>n or l>n):\n        print(\"Range Exceeds the length of Array\")\n        return False\n    elif(r<=n and l<=n):\n        return True\n    \ndef binary_search(A, key, lo, hi):\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if A[mid] == key:\n            return mid\n        elif A[mid] < key:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return -1\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        count += int(i & -i)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (2**n)-1\n    x = (l & mask) | (r & mask)\n    return (x == 0)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # return bool(n & l) and bool(n & r) and bool(n & (l | r))\n    return bool((n & (1 << l)) == 0 and (n & (1 << r)) == 0)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if(arr[i] < 0):\n            arr.append(arr.pop(0))\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            j = i\n            while arr[j] < 0:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                j -= 1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            if arr[i] > -arr[i-1]:\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n            elif arr[i] < -arr[i-1]:\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n    for i in range(n-1, -1, -1):\n        if arr[i] < 0:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = -1\n    positive = 1\n    for i in range(n):\n        if negative < 0:\n            if positive < 0:\n                negative, positive = positive, negative\n            else:\n                negative, positive = negative, positive\n        else:\n            if positive < 0:\n                negative, positive = positive, negative\n            else:\n                negative, positive = negative, positive\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_1(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_3(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_4(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_5(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_6(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    \n    return arr\n    \ndef re_arrange_array_7(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    neg_cnt = 0\n    pos_cnt = 0\n    \n    negs = []\n    poss = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_cnt += 1\n            negs.append(i)\n        else:\n            pos_cnt += 1\n            poss.append(i)\n    \n    negs = negs[::-1]\n    poss = poss[::-1]\n    \n    for i in range(n):\n        arr[i] = arr[poss[i]]\n        arr[poss[i]] = arr[negs[i]]\n        arr[negs[i]] = -arr[i]\n    "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i]<0:\n            arr[i],arr[i+n] = arr[i+n],arr[i]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = -1\n    pos = n\n    while neg < pos:\n        while arr[neg] < 0:\n            neg += 1\n        while arr[pos] > 0:\n            pos -= 1\n        if neg < pos:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n        else:\n            return\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #TO-DO\n    \n    # swap all the positive elements\n    for i in range(0, len(arr)):\n        if arr[i] > 0:\n            break\n    if i == len(arr) - 1:\n        arr = arr[::-1]\n        return arr\n    else:\n        for j in range(i+1, len(arr)):\n            if arr[i] < 0 and arr[j] > 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Re-arrange the array by placing all positive numbers first and negative numbers at the end of the array\n    # Sort the array by descending order, then keep the order of positive numbers and negative numbers, then re-place the numbers in the array\n    pos_ind = 0\n    neg_ind = 0\n    for i in range(n):\n        if arr[i] >= 0:\n            arr[pos_ind], arr[i] = arr[i], arr[pos_ind]\n            pos_ind += 1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_ind], arr[i] = arr[i], arr[neg_ind]\n            neg_ind += 1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(\" \",\"\")\n    return new_string\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1 = str1.replace(\" \",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # code here\n    str1 = str1.replace(\" \",\"\")\n    return char + str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n    \ndef find_longest_word(str1):\n    '''\n    Write a function that takes in a string and returns the longest word in the string. If there are two or more longest words, the function should return the first longest word.\n    '''\n    word_list = str1.split()\n    longest_word = word_list[0]\n    for word in word_list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n    \ndef count_appearances(str1,char):\n    '''\n    Write a function that takes in a string and character, returns the number of times the character appears in the string.\n    '''\n    return str1.count(char)\n    \ndef sort_uppercase(str1):\n    '''\n    Write a function that takes in a string, and returns a string in which all lowercase letters have been converted to uppercase, but maintaining the order of the original string.\n    '''\n    return str1.upper()\n    \ndef sum_all_numbers(str1):\n    '''\n    Write a function that takes in a string and returns the sum of all the numbers in the string. If the string contains non-numeric characters, the function should return 0.\n    '''\n    sum = 0\n    for char in str1:\n        if char.isnumeric():\n            sum += int(char)\n    return sum\n    \ndef split_and_join(str1,delimiter):\n    '''\n    Write a function that takes in a string and a delimiter, and returns the string split using the delimiter.\n    '''\n    return delimiter.join(str1.split())\n    \ndef remove_vowels(str1):\n    '''\n    Write a function that takes in a string and returns a new string with all the vowels removed.\n    '''\n    return str1.replace(\"a\",\"\").replace(\"e\",\"\").replace(\"i\",\"\").replace(\"o\",\"\").replace(\"u\",\"\")\n    \ndef capitalize(str1):\n    '''\n    Write a function that takes in a string and returns a new string with all the letters of the string capitalized.\n    '''\n    return str1.capitalize()\n    \ndef split_string_and_join(str1,delimiter):\n    '''\n    Write a function that takes in a string and a delimiter, and returns the string split using the delimiter.\n    '''\n    return delimiter.join(str1.split())\n    \ndef remove_duplicates(str1):\n    '''\n    Write a function that takes in a string and returns a new string with all duplicate characters removed.\n    '''\n    return ''.join(set(str1))\n    \ndef sum_all_numbers(str1):\n    '''\n    Write a function that takes in a string and returns the sum of all the numbers in the string. If the string contains non-numeric characters, the function should return 0.\n    '''\n    sum = 0\n    for char in str1:\n        if char.isnumeric():\n            sum += int(char)\n    return sum\n    \ndef reverse(str1):\n    '''\n    Write a function that takes in a string and returns the string in reversed order.\n    '''\n    return str1[::-1]\n    \ndef num_spaces(str1):\n    '''\n    Write a function that takes in a string and returns the number of spaces in the string.\n    '''\n    return str1.count(\" \")\n    \ndef remove_spaces(str1):\n    '''\n    Write a function that takes in a string and returns the string with all spaces removed.\n    '''\n    return str1.replace(\" \",\"\")\n    \ndef check_pangram(str1, alphabet):\n    '''\n    Write a function that takes in a string and a set of lowercase English alphabet letters, and returns a boolean indicating whether the string is a pangram, i.e. contains every letter in the alphabet set.\n    '''\n    set1 = set(str1.lower())\n    alphabet.add(\" \")\n    return set1 == alphabet\n    \ndef is_pangram(str1):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether the string is a pangram.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return check_pangram(str1, alphabet)\n    \ndef print_name_surname(first, last):\n    '''\n    Write a function that takes in two strings and returns them concatenated.\n    '''\n    return first + \" \" + last\n    \ndef capitalize_first_and_last_letters(str1):\n    '''\n    Write a function that takes in a string and returns a new string with the first letter capitalized and the last letter capitalized.\n    '''\n    return str1.capitalize()\n    \ndef reverse_sentence(str1):\n    '''\n    Write a function that takes in a string and returns it in reverse order.\n    '''\n    return str1[::-1]\n    \ndef remove_vowels_from_list(list1):\n    '''\n    Write a function that takes in a list of strings and returns a new list that contains the same strings, but with all vowels removed.\n    '''\n    new_list = []\n    for char in list1:\n        if char.lower() not in \"aeiou\":\n            new_list.append(char)\n    return new_list\n    \ndef count_characters_in_string(str1,char):\n    '''\n    Write a function that takes in a string and a character, and returns the number of times the character appears in the string.\n    '''\n    return str1.count(char)\n    \ndef word_count(str1):\n    '''\n    Write a function that takes in a string and returns a dictionary of the counts of the words in the string.\n    '''\n    counts = {}\n    for word in str1.split():\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n    \ndef remove_values_from_dictionary(dictionary, value):\n    '''\n    Write a function that takes in a dictionary and a value, and returns a dictionary with the value removed.\n    '''\n    return dictionary.pop(value)\n    \ndef sort_dictionary_by_value(dictionary):\n    '''\n    Write a function that takes in a dictionary and returns a new dictionary with the keys and values sorted (from low to high)\n    '''\n    return sorted(dictionary.items(), key=lambda x: x[1])\n    \ndef dictionary_from_list(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary. The keys should be the unique values from the list, and the values should be the counts of the values in the list.\n    '''\n    return dict(collections.Counter(list1))\n    \ndef list_from_dictionary(dictionary):\n    '''\n    Write a function that takes in a dictionary and returns a list. The keys should be the unique values from the dictionary, and the values should be the counts of the values in the dictionary.\n    '''\n    return list(dictionary.keys())\n    \ndef has_key_in_dictionary(dictionary, key):\n    '''\n    Write a function that takes in a dictionary and a key, and returns a boolean indicating whether the key is in the dictionary.\n    '''\n    return key in dictionary\n    \ndef list_intersection(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list with the entries that are in both lists.\n    '''\n    return [val for val in list1 if val in list2]\n    \ndef list_union(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list with the entries from either list.\n    '''\n    return list(set(list1 + list2))\n    \ndef list_difference(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list with the entries that are in the first list, but not in the second.\n    '''\n    return [val for val i"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = str1.replace(' ','')\n    return result\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.strip()\n    str1 = str1.replace(\" \",\"\"+char+\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(char,\"\")\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = list1\n    heapq.heapify(a)\n    i = 0\n    while i < n:\n        heapq.heappop(a)\n        i += 1\n    return a\ndef sum_list(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the items in the list.\n    '''\n    a = 0\n    for i in list1:\n        a += i\n    return a\ndef largest_odd_times(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list of the same length, where the value at index i is the number of times the odd-indexed value occurs in the input list.\n    '''\n    lst = list1\n    a = []\n    for i in range(0,len(lst)):\n        cnt = 0\n        if i % 2!= 0:\n            for j in range(0,len(lst)):\n                if lst[j] % 2!= 0 and j!= i:\n                    cnt += 1\n        else:\n            for j in range(0,len(lst)):\n                if lst[j] % 2 == 0 and j!= i:\n                    cnt += 1\n        a.append(cnt)\n    return a\ndef sum_of_two(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the first and second elements.\n    '''\n    a = list1\n    return a[0] + a[1]\ndef is_odd(list1):\n    '''\n    Write a function that takes in a list and returns True if the list contains an odd number of elements, False otherwise.\n    '''\n    a = len(list1)\n    if a % 2!= 0:\n        return True\n    else:\n        return False\ndef double_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the original list twice.\n    '''\n    a = list1\n    b = []\n    for i in range(0,len(a)):\n        b.append(a[i])\n        b.append(a[i])\n    return b\ndef replace_list_item(list1, index, item):\n    '''\n    Write a function that takes in a list and an index and replaces the item at that index with the given item.\n    '''\n    a = list1\n    a[index] = item\n    return a\ndef generate_list(n):\n    '''\n    Write a function that returns a list of n random integers between 0 and 100.\n    '''\n    from random import randint\n    lst = []\n    for i in range(0,n):\n        lst.append(randint(0,100))\n    return lst\ndef append_list(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list containing all the elements of list2 in list1 in the same order.\n    '''\n    a = list1\n    b = list2\n    c = []\n    for i in range(0,len(b)):\n        c.append(b[i])\n    for i in range(0,len(a)):\n        c.append(a[i])\n    return c\ndef max_list(list1):\n    '''\n    Write a function that takes in a list and returns the largest value in the list.\n    '''\n    a = list1\n    max = 0\n    for i in range(0,len(a)):\n        if a[i] > max:\n            max = a[i]\n    return max\ndef sum_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the list.\n    '''\n    a = list1\n    s = 0\n    for i in range(0,len(a)):\n        s += a[i]\n    return s\ndef sum_of_list_2(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the list.\n    '''\n    a = list1\n    s = 0\n    for i in a:\n        s += i\n    return s\ndef unique_items_in_list(list1):\n    '''\n    Write a function that takes in a list and returns a list of the unique items in the list.\n    '''\n    a = list1\n    a = set(a)\n    a = list(a)\n    return a\ndef sum_list_iter(list1):\n    '''\n    Write a function that takes in a list and iterates through the list and returns the sum of the items in the list.\n    '''\n    a = list1\n    s = 0\n    for i in a:\n        s += i\n    return s\ndef sum_list_recur(list1):\n    '''\n    Write a function that takes in a list and iterates through the list and returns the sum of the items in the list.\n    '''\n    def sum_list_recur(list1,s):\n        if len(list1) == 0:\n            return s\n        else:\n            return sum_list_recur(list1[1:],s+list1[0])\n    a = list1\n    s = 0\n    for i in a:\n        s += i\n    return s\ndef sum_list_iter_with_for(list1):\n    '''\n    Write a function that takes in a list and iterates through the list and returns the sum of the items in the list.\n    '''\n    a = list1\n    s = 0\n    for i in a:\n        s += i\n    return s\ndef sum_list_iter_with_while(list1):\n    '''\n    Write a function that takes in a list and iterates through the list and returns the sum of the items in the list.\n    '''\n    a = list1\n    s = 0\n    while len(a)!= 0:\n        s += a[0]\n        a.remove(a[0])\n    return s\ndef sum_list_recur_with_for(list1):\n    '''\n    Write a function that takes in a list and iterates through the list and returns the sum of the items in the list.\n    '''\n    def sum_list_recur_with_for(list1,s):\n        if len(list1) == 0:\n            return s\n        else:\n            return sum_list_recur_with_for(list1[1:],s+list1[0])\n    a = list1\n    s = 0\n    for i in a:\n        s += i\n    return s\ndef sum_list_recur_with_while(list1):\n    '''\n    Write a function that takes in a list and iterates through the list and returns the sum of the items in the list.\n    '''\n    def sum_list_recur_with_while(list1,s):\n        if len(list1) == 0:\n            return s\n        else:\n            return sum_list_recur_with_while(list1[1:],s+list1[0])\n    a = list1\n    s = 0\n    while len(a)!= 0:\n        s += a[0]\n        a.remove(a[0])\n    return s\ndef remove_list_item(list1, index):\n    '''\n    Write a function that takes in a list and an index and returns the value in the list at the given index.\n    '''\n    a = list1\n    a.pop(index)\n    return a\ndef remove_list_item_2(list1, item):\n    '''\n    Write a function that takes in a list and a value and returns a new list that contains all of the items in the old list except for those items that are equal to the given value.\n    '''\n    a = list1\n    b = []\n    for i in range(0,len(a)):\n        if a[i] == item:\n            continue\n        else:\n            b.append(a[i])\n    return b\ndef largest_list(list1):\n    '''\n    Write a function that takes in a list and returns the largest value in the list.\n    '''\n    a = list1\n    max = a[0]\n    for i i"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    m=n\n    l=[]\n    while m>0:\n        l.append(heapq.heappop(list1))\n        m-=1\n    return l\ndef larg_nword(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    m=n\n    l=[]\n    while m>0:\n        l.append(heapq.heappop(list1))\n        m-=1\n    return l\ndef larg_nsmallest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heapq.heapify(list1)\n    m=n\n    l=[]\n    while m>0:\n        l.append(heapq.heappop(list1))\n        m-=1\n    return l\ndef larg_nlargest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    m=n\n    l=[]\n    while m>0:\n        l.append(heapq.heappop(list1))\n        m-=1\n    return l\ndef min_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heapq.heapify(list1)\n    m=n\n    l=[]\n    while m>0:\n        l.append(heapq.heappop(list1))\n        m-=1\n    return l\ndef min_nword(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heapq.heapify(list1)\n    m=n\n    l=[]\n    while m>0:\n        l.append(heapq.heappop(list1))\n        m-=1\n    return l\ndef min_nsmallest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heapq.heapify(list1)\n    m=n\n    l=[]\n    while m>0:\n        l.append(heapq.heappop(list1))\n        m-=1\n    return l\ndef min_nlargest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    m=n\n    l=[]\n    while m>0:\n        l.append(heapq.heappop(list1))\n        m-=1\n    return l\ndef sort_nlargest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\ndef sort_nsmallest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef sort_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef sort_nword(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef sort_nsmallest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef sort_nlargest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef replace_nword(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    i=0\n    l=[]\n    while i<len(list1):\n        if list1[i]<list1[n]:\n            l.append(list1[i])\n            i=i+1\n        else:\n            continue\n    return l\ndef replace_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    i=0\n    l=[]\n    while i<len(list1):\n        if list1[i]<list1[n]:\n            l.append(list1[i])\n            i=i+1\n        else:\n            continue\n    return l\ndef replace_nlargest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    i=len(list1)-1\n    l=[]\n    while i>=n-1:\n        l.append(list1[i])\n        i=i-1\n    return l\ndef replace_nsmallest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    i=0\n    l=[]\n    while i<n:\n        l.append(list1[i])\n        i=i+1\n    return l\ndef replace_nlargest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    i=len(list1)-1\n    l=[]\n    while i>=n-1:\n        l.append(list1[i])\n        i=i-1\n    return l\ndef replace_nsmallest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    i=0\n    l=[]\n    while i<n:\n        l.append(list1[i])\n        i=i+1\n    return l\ndef replace_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    i=0\n    l=[]\n    while i<n:\n        l.append(list1[i])\n        i=i+1\n    return l\ndef replace_nword(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    i=0\n    l=[]\n    while i<n:\n        l.append(list1[i])\n        i=i+1\n    return l\ndef replace_nlargest(list1,n):\n    '''"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1, reverse = True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Input:  [1,3,5,7,9,2,4,6,8,10], 3\n    # Output: [9,10,8,7,5,4,3,2,1,3]\n    largest = []\n    heapq.heapify(list1)\n    for i in range(n):\n        largest.append(heapq.heappop(list1))\n    return largest\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    count=0\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n        count+=1\n        if count==n:\n            break\n    print(count)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\ndef larg_nnum_1(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\ndef small_nnum_1(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    s=sorted(list1,reverse=True)\n    if n>len(list1):\n        return s\n    else:\n        return s[:n]\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #print(r,h)\n    s=0.5*pi*r**2\n    #print(s)\n    a=pi*h*r\n    lateralsurface=a-s\n    #print(lateralsurface)\n    return lateralsurface\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    area = 2*math.pi*r*h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Area of a cylinder\n    A = pi * r**2\n    #Perimeter of a cylinder\n    P = 2*pi*r + 2*pi*h\n    #Lateral surface area\n    S = A*P\n    return(S)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lat = 2*3.14*r*h\n    return lat\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    # Number of points\n    n = int(r * 100)\n    # Intervals\n    h_i = h / n\n    # Geometry\n    geo = []\n    # Lines\n    lines = []\n    # Surface\n    surf = 0\n    # Add vertices\n    for i in range(n):\n        geo.append([])\n        for j in range(n):\n            geo[i].append([])\n            geo[i][j].append(r * math.cos(i * (2 * math.pi / n) + j * 2 * math.pi / n) )\n            geo[i][j].append(r * math.sin(i * (2 * math.pi / n) + j * 2 * math.pi / n) )\n            geo[i][j].append(h)\n            geo[i][j].append(0)\n    # Add line\n    for i in range(n):\n        lines.append([])\n        lines[i].append([i,i+1])\n        lines[i].append([i+1,i])\n        lines[i].append([i+1,i+1])\n        lines[i].append([i,i+1])\n    # Add surface\n    for i in range(n-1):\n        surf += h_i\n        for j in range(n-1):\n            surf += h_i * (geo[i][j][1] + geo[i][j+1][1]) / 2.0\n    # Add segments\n    for i in range(n):\n        for j in range(n-1):\n            geo[i][j][3] = (geo[i][j][1] + geo[i][j+1][1]) / 2.0\n    # Add cylinder\n    for i in range(n-1):\n        for j in range(n-1):\n            geo[i][j][4] = (geo[i][j+1][2] + geo[i+1][j+1][2]) / 2.0\n    # Add points\n    points = []\n    for i in range(n):\n        for j in range(n):\n            points.append(geo[i][j])\n    # Add lines\n    lines_cylinder = []\n    for i in range(n):\n        for j in range(n-1):\n            lines_cylinder.append([i,j])\n            lines_cylinder.append([i,j+1])\n    # Return surface\n    return surf\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    def cylinder_cylinder(r,h):\n        if r == 0 and h == 0:\n            print('Please Enter Valid Values')\n            return\n        if r < 0 or h < 0:\n            print('Please Enter Valid Values')\n            return\n        if r > 0 and h > 0:\n            return (2*np.pi*r*h) + (2*np.pi*r**2)\n        elif r == 0 and h!= 0:\n            return (np.pi*h) + (2*np.pi*h**2)\n        elif r!= 0 and h == 0:\n            return (np.pi*r) + (2*np.pi*r**2)\n        else:\n            return 0\n    r_input = int(input('Enter Value of r: '))\n    h_input = int(input('Enter Value of h: '))\n    res = cylinder_cylinder(r_input,h_input)\n    print(f'The lateral surface area of a cylinder with radius r = {r_input} and height h = {h_input} is {res}')\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    l=2*pi*r\n    area=l*(h/2)**2\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = math.pi * math.pow(r, 2) * h\n    return lateral_surface_area\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \nprint(volume_cube(3))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == int(l):\n        l = int(l)\n        return l*l*l\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 3**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # there are several ways to do this, but first\n    # write the formulas for the volume, and add some\n    # error handling\n    # your code goes here\n    return 6*(l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l < 0:\n        print('Negative side length is not possible.')\n        return None\n    else:\n        return (l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = int(l)\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    number = n\n    if (n & 0x01) == 0:\n        number |= 0x01\n    if (n & 0x02) == 0:\n        number |= 0x02\n    if (n & 0x04) == 0:\n        number |= 0x04\n    if (n & 0x08) == 0:\n        number |= 0x08\n    if (n & 0x10) == 0:\n        number |= 0x10\n    if (n & 0x20) == 0:\n        number |= 0x20\n    if (n & 0x40) == 0:\n        number |= 0x40\n    if (n & 0x80) == 0:\n        number |= 0x80\n    return number\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | n-1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    res = 1\n    while (n): \n        res <<= 1\n        n >>= 1\n        if (n % 2): \n            res += 1\n    return res \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = n & 0xaaaaaaaa\n    return i \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit_mask = 1\n    while bit_mask < n:\n        bit_mask = bit_mask * 2\n    return bit_mask\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if (n % 2) == 0:\n        return n\n    return n | 2**(len(bin(n))-2)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            return 0\n        return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while(n):\n        if n&0x01:\n            n=(n|0x10)\n        else:\n            n=(n|0x20)\n        n=n>>1\n    return n\n    \ndef even_bit_clear_number(n): \n    '''\n    Write a python function to clear all even bits of a given number.\n    '''\n    while(n):\n        if n&0x01:\n            n=(n&0x10)\n        else:\n            n=(n&0x20)\n        n=n<<1\n    return n\n    \ndef bit_flip(n, k):\n    '''\n    Write a python function to flip the kth bit in a given number.\n    '''\n    n=n^(1<<k)\n    return n\n    \ndef double_bit(n):\n    '''\n    Write a python function to perform a double bit operation on a given number.\n    '''\n    return n<<1\n    \ndef reverse_bit(n):\n    '''\n    Write a python function to reverse the bit of a given number.\n    '''\n    n=n>>1\n    n=n&0x01\n    return n\n    \ndef reverse_bit_by_bit(n):\n    '''\n    Write a python function to reverse the bit of a given number.\n    '''\n    while(n):\n        if n&0x01:\n            n=(n&0x10)\n        else:\n            n=(n&0x20)\n        n=n>>1\n    return n\n    \ndef bit_swap(n):\n    '''\n    Write a python function to swap the position of the two adjacent bits in a given number.\n    '''\n    n=n>>1\n    return n<<1\n    \ndef flip_bit_of_nth_bit(n, k):\n    '''\n    Write a python function to flip the kth bit of a given number.\n    '''\n    n=n^(1<<k)\n    return n\n    \ndef flip_bit_of_nth_bit_by_bit(n, k):\n    '''\n    Write a python function to flip the kth bit of a given number.\n    '''\n    n=n^(1<<k)\n    return n\n    \ndef bit_flip_by_bit(n):\n    '''\n    Write a python function to flip the bit of a given number.\n    '''\n    return n^(1<<n)\n    \ndef bit_flip_by_bit_by_bit(n):\n    '''\n    Write a python function to flip the bit of a given number.\n    '''\n    return n^(1<<n)\n    \ndef binary_addition(n1, n2):\n    '''\n    Write a python function to add two numbers using binary addition.\n    '''\n    return n1+n2\n    \ndef binary_subtraction(n1, n2):\n    '''\n    Write a python function to subtract two numbers using binary subtraction.\n    '''\n    return n1-n2\n    \ndef binary_multiplication(n1, n2):\n    '''\n    Write a python function to multiply two numbers using binary multiplication.\n    '''\n    return n1*n2\n    \ndef binary_division(n1, n2):\n    '''\n    Write a python function to divide two numbers using binary division.\n    '''\n    return n1/n2\n    \ndef binary_modulus(n1, n2):\n    '''\n    Write a python function to compute the modulus of two numbers using binary multiplication.\n    '''\n    return n1%n2\n    \ndef binary_remainder(n1, n2):\n    '''\n    Write a python function to compute the remainder of two numbers using binary addition.\n    '''\n    return n1%n2\n    \ndef even_number_checker(n):\n    '''\n    Write a python function to check whether a given number is even or odd.\n    '''\n    return (n&0x01)\n    \ndef nth_bit_of_number(n, k):\n    '''\n    Write a python function to check whether the kth bit is set or not.\n    '''\n    return (n>>k)&0x01\n    \ndef bit_and_number(n, k):\n    '''\n    Write a python function to perform a bitwise AND operation on a given number.\n    '''\n    return n&(~0x01)\n    \ndef bit_or_number(n, k):\n    '''\n    Write a python function to perform a bitwise OR operation on a given number.\n    '''\n    return n|(0x01<<k)\n    \ndef bit_xor_number(n, k):\n    '''\n    Write a python function to perform a bitwise XOR operation on a given number.\n    '''\n    return n^(0x01<<k)\n    \ndef bit_not_number(n, k):\n    '''\n    Write a python function to perform a bitwise NOT operation on a given number.\n    '''\n    return n^0x01\n    \ndef bit_shift_left(n, k):\n    '''\n    Write a python function to shift a number to the left by k places.\n    '''\n    return n<<k\n    \ndef bit_shift_right(n, k):\n    '''\n    Write a python function to shift a number to the right by k places.\n    '''\n    return n>>k\n    \ndef bit_shift_right_by_one(n):\n    '''\n    Write a python function to shift a number to the right by one place.\n    '''\n    return n>>1\n    \ndef bit_shift_left_by_one(n):\n    '''\n    Write a python function to shift a number to the left by one place.\n    '''\n    return n<<1\n    \ndef number_of_1s(n):\n    '''\n    Write a python function to find the number of ones in the given number.\n    '''\n    return (n&0x01)\n    \ndef number_of_1s_in_number(n):\n    '''\n    Write a python function to find the number of ones in the given number.\n    '''\n    return (n&0x01)\n    \ndef sum_of_number(n):\n    '''\n    Write a python function to compute the sum of the digits of a given number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef sum_of_number_by_bit(n):\n    '''\n    Write a python function to compute the sum of the digits of a given number.\n    '''\n    return sum([int(i) for i in bin(n)[2:]])\n    \ndef sum_of_number_in_range(n, l, r):\n    '''\n    Write a python function to compute the sum of the digits of a given number in range(l,r).\n    '''\n    return sum([int(i) for i in bin(n)[2:]])\n    \ndef sum_of_number_in_range_by_bit(n, l, r):\n    '''\n    Write a python function to compute the sum of the digits of a given number in range(l,r).\n    '''\n    return sum([int(i) for i in bin(n)[2:]])\n    \ndef find_bit_in_number(n):\n    '''\n    Write a python function to find the bit of a given number.\n    '''\n    return (n&0x01)\n    \ndef find_bit_in_number_by_bit(n):\n    '''\n    Write a python function to find the bit of a given number.\n    '''\n    return (n&0x01)\n    \ndef print_bit_in_number(n):\n    '''\n    Write a python function to print the bit of a given number.\n    '''\n    return str(bin(n))\n    \ndef print_bit_in_number_by_bit(n):\n    '''\n    Write a python function to print the bit of a given number.\n    '''\n    return str(bin(n))\n    \ndef sum_of_bit_in_number(n):\n    '''\n    Write a python function to compute the sum of the bits of "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n &= ~1\n    print(n)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Write your function here\n    dictionary = {}\n    for i in test_list:\n        if i in dictionary:\n            dictionary[i] = dictionary[i] + 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for tup in test_list:\n        if tup in my_dict:\n            my_dict[tup] += 1\n        else:\n            my_dict[tup] = 1\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for num in test_list:\n        if num not in test_dict.keys():\n            test_dict[num] = 1\n        else:\n            test_dict[num] += 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # return Counter(test_list)\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        result[i] = test_list.count(i)\n    return result\n    \nprint(check_occurences([(1, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5)]))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to hold the counts for each tuple\n    tup_dict = {}\n    # For each tuple in the list:\n    for tup in test_list:\n        # If the key for that tuple is not in the dictionary:\n        if tup not in tup_dict:\n            # Add the key and set its value to 1\n            tup_dict[tup] = 1\n        # If the key for that tuple is in the dictionary:\n        else:\n            # If the key value is greater than 1:\n            if tup_dict[tup] > 1:\n                # Update the value by 1\n                tup_dict[tup] += 1\n            # If the key value is 1:\n            else:\n                # Delete the key from the dictionary\n                del tup_dict[tup]\n    # Return the dictionary\n    return tup_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {tuple(x): count for (x, count) in Counter(test_list).items()}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n    for tup in test_list:\n        if tup in occurences_dict:\n            occurences_dict[tup] += 1\n        else:\n            occurences_dict[tup] = 1\n    return occurences_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create a list of the tuples\n    tuples = []\n    #create a list of the unique tuples\n    unique_tuples = []\n    #create a dictionary to map unique tuples to counts\n    count_dict = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dic = {}\n    for tup in test_list:\n        if tup in dic:\n            dic[tup] += 1\n        else:\n            dic[tup] = 1\n    return dic\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Approach-1\n    # print(len(str))\n    # print(len(str)-2)\n    # return len(str)-2\n    # Approach-2\n    return (len(str)//2)*(len(str)-1)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    substring_counter = 0\n    for i in range(len(str)):\n        substring = str[i]\n        for j in range(i,len(str)):\n            if j == i:\n                continue\n            substring += str[j]\n            if substring in str:\n                substring_counter += 1\n                break\n    return substring_counter\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    start = 0\n    count = 0\n    while start < len(str):\n        if str[start] =='':\n            start += 1\n        elif str[start]!='':\n            count += 1\n            start += 1\n            while str[start] =='':\n                start += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    # code here\n    i = 0\n    while i < len(str):\n        while str[i]!='':\n            i+=1\n            if i == len(str):\n                break\n        count+=1\n        i+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return str.count(' ') + 1\nprint(number_of_substrings('a'))\nprint(number_of_substrings('a b c'))\nprint(number_of_substrings(' '))\nprint(number_of_substrings('  '))\nprint(number_of_substrings(' a b  c'))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def sub(str1):\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!=' ':\n                count += 1\n        return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    string = str.strip()\n    length = len(string)\n    count = 0\n    for i in range(length):\n        if string[i]!= \" \":\n            for j in range(i,length):\n                if string[j] == \" \":\n                    break\n                else:\n                    count += 1\n    return count\n    \n    \n    "
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    ans=0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            ans+=1\n    print(ans)\n    return ans\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #n = 12\n    #m = 100\n    count = 0\n    current_count = 0\n    sequence = []\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 0:\n        return 0\n    if n <= 0:\n        return 1\n    return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return None\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    ans=0\n    if n==1:\n        return m\n    else:\n        for i in range(m):\n            ans += get_total_number_of_sequences(i,n-1)+get_total_number_of_sequences(i+1,n-1)\n        return ans\n    return\nprint(get_total_number_of_sequences(5,7))"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    number_of_sequences = 0\n    for i in range(m,n+1):\n        if i > 1:\n            sum = 0\n            for j in range(1,i):\n                if i > j * 2 and i <= j * 2 + (m-1):\n                    sum += 1\n        number_of_sequences += sum\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    answer = 0\n    for i in range(1,m+1):\n        if n == 1:\n            if i > m:\n                answer += 1\n        else:\n            for j in range(i):\n                if i + j > m:\n                    answer += 1\n                elif i + j == m:\n                    answer += 1\n                    break\n    return answer\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    s = []\n    for i in range(m,n+1):\n        s.append(i)\n    for i in range(len(s)-1):\n        if s[i] < 2 * s[i+1]:\n            if s[i] < m:\n                s.insert(i+1,s[i]*2)\n                s.insert(i+2,s[i]*2)\n                s.pop()\n    return len(s)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_possible_sequences(m,n):\n        if m == 0:\n            return 1\n        else:\n            return m + get_possible_sequences(m-1,n)\n    return get_possible_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return len([i for i in range(1,m+1) if is_sequence(i,n)])\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    number_of_sequences = 0\n    for i in range(m, n): \n        number_of_sequences += get_number_of_sequences_of_length(i, m)\n    return number_of_sequences\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1]=list2[0]\n    for i in range(1,len(list2)):\n        list1.append(list2[i])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1[:-1]\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    list1[-1] = list2[0]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    list1[-1] = list2\n    return list1\n    \n    \n    \n    \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    list1[-1] = list2\n    \n    return list1\n    \n    \n    \ndef find_second(list1):\n    '''\n    Write a function that takes in a list and returns the second to last element.\n    '''\n    \n    list1 = list1[::-1]\n    \n    return list1[1]\n    \n    \n    \ndef find_third_to_last(list1):\n    '''\n    Write a function that takes in a list and returns the third to last element.\n    '''\n    \n    list1 = list1[::-1]\n    \n    return list1[2]\n    \n    \n    \ndef reverse_string(list1):\n    '''\n    Write a function that takes in a list and reverses the order of the elements in the list.\n    '''\n    \n    list1 = list1[::-1]\n    \n    return list1\n    \n    \n    \ndef reverse_thirds(list1):\n    '''\n    Write a function that takes in a list and returns the third to last element and the second to last element in the order of the list.\n    '''\n    \n    list1 = list1[::-1]\n    \n    return list1[1],list1[2]\n    \n    \n    \ndef remove_elements(list1,element):\n    '''\n    Write a function that takes in a list and removes all instances of a specified element from the list.\n    '''\n    \n    list1 = []\n    \n    return list1\n    \n    \n    \ndef multiply_list(list1):\n    '''\n    Write a function that takes in a list and returns the product of the list.\n    '''\n    \n    list1 = 1\n    \n    return list1\n    \n    \n    \ndef sum_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the list.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef length_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the length of the list.\n    '''\n    \n    list1 = 1\n    \n    return list1\n    \n    \n    \ndef sum_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the list.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns the reverse of the list.\n    '''\n    \n    list1 = 1\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_strings(list1):\n    '''\n    Write a function that takes in a list of strings and returns the sum of the strings in the list.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_odd_numbers(list1):\n    '''\n    Write a function that takes in a list of odd numbers and returns the sum of the odd numbers in the list.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_even_numbers(list1):\n    '''\n    Write a function that takes in a list of even numbers and returns the sum of the even numbers in the list.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_positive_numbers(list1):\n    '''\n    Write a function that takes in a list of positive numbers and returns the sum of the numbers in the list.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_negative_numbers(list1):\n    '''\n    Write a function that takes in a list of negative numbers and returns the sum of the numbers in the list.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_all_numbers(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_three(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 3.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_four(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 4.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_five(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 5.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_seven(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 7.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_eight(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 8.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_ten(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 10.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_twenty(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 20.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_thirty(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 30.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_forty(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 40.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_fifty(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 50.\n    '''\n    \n    list1 = 0\n    \n    return list1\n    \n    \n    \ndef sum_list_numbers_that_are_divisible_by_sixty(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list that are divisible by 60.\n    '''\n    \n    list1 "
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:] = list1[:-1] + list2[:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2[0]\n    list1[-2]=list2[1]\n    list1[-3]=list2[2]\n    return list1\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    print(\"First List: {}\\nSecond List: {}\".format(list1,list2))\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    lst=list1[:]\n    lst[-1]=list2[0]\n    for i in range(1,len(list2)):\n        lst.append(list2[i])\n    return lst\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    # return the sum of all the characters\n    # in the string.\n    return sum([1 for i in str1])\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #return len(str1)\n    return sum(1 for c in str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_char = 0\n    for c in str1:\n        num_char += 1\n    print(f'Number of characters in the string: {num_char}')\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_char = 0\n    for i in str1:\n        num_char += 1\n    return num_char\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #count_char = str1.count('')\n    count_char = str1.count('a')\n    print('There are {} characters in the string'.format(count_char))\n    return count_char\n    \ndef sort_string(str1):\n    '''\n    Write a function to sort the string in alphabetical order.\n    '''\n    str1 = str1.sort()\n    print(str1)\n    return str1\n    \ndef count_string(str1):\n    '''\n    Write a function to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n    '''\n    counter = 0\n    for i in range(0, len(str1)):\n        if len(str1[i]) >= 2 and str1[i][0] == str1[i][-1]:\n            counter += 1\n    print('The number of strings with first and last character being same are {}'.format(counter))\n    return counter\n    \ndef gcd(a, b):\n    '''\n    Write a function that computes the greatest common divisor of two numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    print(a)\n    return a\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Base case\n    if N < 1:\n        return False\n    \n    # Initialize and get the largest square\n    sq = int(math.sqrt(N))\n    max_sq = int(sq)\n    \n    # Get the closest square that is greater than the initial square\n    while max_sq*max_sq <= N:\n        max_sq += 1\n    \n    # Return the answer\n    return max_sq * max_sq\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count = 1\n    while N > count**2:\n        count+=1\n    return count**2"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        if (N<2):\n            break\n        for i in range(1,int(math.sqrt(N))+1):\n            if (i**2==N):\n                break\n        N=N+1\n    return N-1\n    '''\n    print(\"{0} is the next perfect square greater than {1}\".format(N+1,N))\n    '''\n    \n    \ndef is_Prime(N):\n    '''\n    Write a python function that determines whether a given number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(N))+1):\n        if (N%i==0):\n            return False\n        else:\n            return True\n        '''\n    if (N<2):\n        return False\n    else:\n        if (N==2):\n            return True\n        else:\n            for i in range(2,int(math.sqrt(N))+1):\n                if (N%i==0):\n                    return False\n                else:\n                    return True\n    '''\n    '''\n    print(\"{0} is a prime\".format(N))\n    '''\n    \n    \ndef is_Perfect(N):\n    '''\n    Write a python function that determines whether a given number is perfect or not.\n    '''\n    if (N==1 or N==2):\n        return True\n    if (N==3 or N==4 or N==6 or N==8 or N==9 or N==12 or N==20 or N==21 or N==24 or N==30 or N==31 or N==32 or N==33 or N==36 or N==38 or N==40 or N==41 or N==42 or N==43 or N==44 or N==45 or N==46 or N==47 or N==48 or N==49 or N==50 or N==51 or N==52 or N==53 or N==54 or N==55 or N==56 or N==57 or N==58 or N==59 or N==60 or N==61 or N==62 or N==63 or N==64 or N==65 or N==66 or N==67 or N==68 or N==69 or N==70 or N==71 or N==72 or N==73 or N==74 or N==75 or N==76 or N==77 or N==78 or N==79 or N==80 or N==81 or N==82 or N==83 or N==84 or N==85 or N==86 or N==87 or N==88 or N==89 or N==90 or N==91 or N==92 or N==93 or N==94 or N==95 or N==96 or N==97 or N==98 or N==99):\n        return True\n    return False\n    '''\n    print(\"{0} is a perfect number\".format(N))\n    '''\n    \ndef is_Happy(N):\n    '''\n    Write a python function that determines whether a given number is a happy number or not.\n    '''\n    if (N==1):\n        return True\n    if (N%10==N%2):\n        return False\n    else:\n        return is_Happy(N//10)\n        '''\n    if (N==1):\n        return True\n    if (N%2==0):\n        return is_Happy(N//2)\n    if (N%2!=0):\n        return is_Happy(N//2)\n    '''\n    '''\n    print(\"{0} is a happy number\".format(N))\n    '''\n    \n    \ndef is_Happy_1(N):\n    '''\n    Write a python function that determines whether a given number is a happy number or not.\n    '''\n    while (True):\n        if (N==1):\n            break\n        if (N%2==0):\n            N=N//2\n        else:\n            N=N*3+1\n    '''\n    print(\"{0} is a happy number\".format(N))\n    '''\n    \n    \ndef is_Happy_2(N):\n    '''\n    Write a python function that determines whether a given number is a happy number or not.\n    '''\n    while (True):\n        if (N==1):\n            break\n        if (N%2==0):\n            N=N//2\n        else:\n            N=N*3+1\n    if (N==1):\n        return True\n    else:\n        return False\n    '''\n    print(\"{0} is a happy number\".format(N))\n    '''\n    \n    \ndef is_Happy_3(N):\n    '''\n    Write a python function that determines whether a given number is a happy number or not.\n    '''\n    while (True):\n        if (N==1):\n            break\n        if (N%2==0):\n            N=N//2\n        else:\n            N=N*3+1\n    if (N==1):\n        return True\n    elif (N!=1):\n        return False\n    '''\n    print(\"{0} is a happy number\".format(N))\n    '''\n    \n    \ndef is_Happy_4(N):\n    '''\n    Write a python function that determines whether a given number is a happy number or not.\n    '''\n    if (N==1):\n        return True\n    while (True):\n        if (N%2==0):\n            N=N//2\n        else:\n            N=N*3+1\n    if (N==1):\n        return True\n    elif (N!=1):\n        return False\n    '''\n    print(\"{0} is a happy number\".format(N))\n    '''\n    \n    \ndef is_Happy_5(N):\n    '''\n    Write a python function that determines whether a given number is a happy number or not.\n    '''\n    while (True):\n        if (N==1):\n            break\n        if (N%2==0):\n            N=N//2\n        else:\n            N=N*3+1\n    if (N==1):\n        return True\n    else:\n        return False\n    '''\n    print(\"{0} is a happy number\".format(N))\n    '''\n    \ndef is_Happy_6(N):\n    '''\n    Write a python function that determines whether a given number is a happy number or not.\n    '''\n    if (N==1):\n        return True\n    if (N%2==0):\n        while (True):\n            if (N==1):\n                break\n            N=N//2\n        if (N==1):\n            return True\n        else:\n            return False\n    else:\n        while (True):\n            if (N==1):\n                break\n            N=N*3+1\n        if (N==1):\n            return True\n        else:\n            return False\n    '''\n    print(\"{0} is a happy number\".format(N))\n    '''\n    \n    \ndef is_Happy_7(N):\n    '''\n    Write a python function that determines whether a given number is a happy number or not.\n    '''\n    if (N==1):\n        return True\n    if (N%2==0):\n        while (True):\n            if (N==1):\n                break\n            N=N//2\n        if (N==1):\n            return True\n        else:\n            return False\n    else:\n        while (True):\n            if (N==1):\n                break\n            N=N*3+1\n        if (N==1):\n            return True\n        else:\n            return False\n    '''\n    print(\"{0} is a happy number\".format(N))\n    '''\n    \n    \ndef is_Happy_8(N):\n    '''\n    Write a python function that determines whether a given number is a happy number or not.\n    '''\n    if (N==1):\n        return True\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count = 2\n    x = count * count\n    while x <= N:\n        count += 1\n        x = count * count\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    current_square = 0\n    while(current_square ** 2 < N):\n        current_square += 1\n    return current_square ** 2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1:\n        return N\n    if N <= 3:\n        return 2 * N - 1\n    i = 1\n    while True:\n        if 2**i > N:\n            return 2**i\n        i += 1\n        \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #using binary search\n    if N > 1:\n        low = 1\n        high = N\n        while low <= high:\n            mid = (low+high)//2\n            if mid*mid == N:\n                return mid\n            elif mid*mid < N:\n                low = mid+1\n            else:\n                high = mid-1\n    return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    \n    N = int(N)\n    while True:\n        sq = (N+1)**2\n        if sq > N:\n            return sq\n        N = sq\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Your code here\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    while (math.sqrt(N) + 1) ** 2 > N:\n        N += 1\n    return int((math.sqrt(N) + 1) ** 2)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    cur_sum = arr[0]\n    max_sum = cur_sum\n    for i in range(1, len(arr)):\n        cur_sum = max(cur_sum + arr[i], arr[i])\n        max_sum = max(cur_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    #An array which satisfies the following conditions\n    #1: The maximum sum is in the increasing order\n    #2: The subsequences whose sums are equal to the maximum sum\n    #3: The subsequences do not contain adjacent elements of the same sign\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        for i in range(1, len(arr)):\n            left = max_sum(arr[:i])\n            right = max_sum(arr[i:])\n            max_sum_for_i = arr[i] + left + right\n            print(max_sum_for_i, left, right)\n        return max_sum_for_i\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr.sort()\n    n = len(arr)\n    current_sum = 0\n    result = -float('inf')\n    for i in range(n):\n        if current_sum < 0:\n            current_sum = arr[i]\n        else:\n            current_sum += arr[i]\n        result = max(result, current_sum)\n    return result\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_sub = max_sum(arr[1:])\n        max_sum_sub = max_sub\n        for i in range(len(arr)):\n            if arr[i] > max_sub:\n                max_sub = arr[i]\n            elif max_sub > max_sub + arr[i]:\n                max_sub = max_sub + arr[i]\n        return max(max_sub, max_sum_sub)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # base case - max_sum for empty array is 0\n    if len(arr) == 0: \n        return 0 \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr\n    else:\n        max_sum = arr[0]\n        max_start = 0\n        max_end = 0\n        mid = int(len(arr)/2)\n        max_sum = max(max_sum, max_sum(arr[:mid]), max_sum(arr[mid:]))\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                sub_arr = arr[i:j]\n                if sum(sub_arr) > max_sum:\n                    max_sum = sum(sub_arr)\n                    max_start = i\n                    max_end = j\n        return arr[max_start:max_end+1]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    current = max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        current = max(arr[i], arr[i] + current)\n        max_so_far = max(max_so_far, current)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_sum_rec(arr,start,end):\n        if start == end:\n            return arr[start]\n        mid = (start + end) // 2\n        left_sum = max(max_sum_rec(arr,start,mid),max_sum_rec(arr,mid+1,end))\n        right_sum = max(max_sum_rec(arr,start,mid),max_sum_rec(arr,mid+1,end))\n        return max(left_sum + arr[mid],right_sum + arr[mid],left_sum+right_sum,key=abs)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Corner case\n    if len(arr) == 0:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    # Initialize variables\n    result = 0\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    \n    # Loop to calculate result\n    for i in range(1, len(arr)):\n        max_so_far = max(arr[i], max_so_far + arr[i])\n        min_so_far = min(arr[i], min_so_far + arr[i])\n        result = max(result, max_so_far)\n    \n    return result\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 1\n    while abs(a**2-number) > 0.00001:\n        a = (a+number/a)/2\n    return a\n    \nif __name__ == \"__main__\":\n    # Test code\n    # Correct result with.5\n    # print(babylonian_squareroot(25))\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt = number\n    while sqrt * sqrt > number:\n        sqrt = sqrt - (sqrt * sqrt) / (2 * sqrt)\n    return sqrt\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #if number is even\n    if number % 2 == 0:\n        return number / 2\n    #if number is odd\n    else:\n        return (number + 1) / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    lowest_power = number\n    current_power = 0\n    while True:\n        current_power += 1\n        if current_power <= lowest_power:\n            lowest_power = current_power\n        else:\n            current_value = (current_power - 1) / 2\n            if current_value ** 2 > number:\n                current_value = (current_power - 1) / 2\n                lowest_power = current_power\n            return current_value\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0.0\n    while True:\n        root = (root + number / root) / 2.0\n        if abs(number - root * root) < 1e-12:\n            break\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    guess = number/2.0\n    num_iterations = 0\n    while abs(guess*guess - number) > epsilon:\n        guess = guess - (((guess**2) - number)/(2*guess))\n        num_iterations += 1\n    return guess\n    \n    \ndef test_babylonian_squareroot():\n    '''\n    Test for function babylonian_squareroot.\n    '''\n    assert(round(babylonian_squareroot(1),5) == 1)\n    assert(round(babylonian_squareroot(2),5) == 1.414)\n    assert(round(babylonian_squareroot(3),5) == 1.7321)\n    assert(round(babylonian_squareroot(10),5) == 3)\n    assert(round(babylonian_squareroot(100),5) == 6)\n    assert(round(babylonian_squareroot(1000),5) == 9)\n    assert(round(babylonian_squareroot(10000),5) == 3)\n    assert(round(babylonian_squareroot(100000),5) == 6)\n    assert(round(babylonian_squareroot(1000000),5) == 9)\n    print('You passed the test!')\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        print(\"No square root exists for negative numbers\")\n        return None\n    elif number == 1:\n        return 1\n    else:\n        x = number\n        while True:\n            y = (x + (number/x))/2\n            if abs(y - x) < 0.000001:\n                return y\n            else:\n                x = y\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    try:\n        return 1/sqrt(number)\n    except:\n        return \"please enter a non-negative number\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == '':\n        return 0\n    else:\n        return 1 + max(lps(str[1:]), lps(str[:-1]))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    longest=0\n    if len(str)<=1:\n        return longest\n    for i in range(0,len(str)-1):\n        for j in range(1,len(str)):\n            if str[i]==str[j]:\n                if i+j+1==len(str):\n                    longest=max(longest,2)\n                else:\n                    longest=max(longest,j+1)\n    return longest\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # len_str = len(str)\n    # dp = [[False for i in range(len_str)] for j in range(len_str)]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n < 2: return 0\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        dp[i][i+1] = (str[i] == str[i+1])\n    \n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            if dp[i+1][i+length-2]:\n                dp[i][i+length] = True\n            elif dp[i+1][i+length-1]:\n                dp[i][i+length] = True\n            else:\n                dp[i][i+length] = dp[i+1][i+length-2] and dp[i+1][i+length-1]\n    \n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    m = 0\n    table = [[0]*n for i in range(n)]\n    max_length = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # base case\n    if len(str) <= 1: \n        return len(str) \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)==0:\n        return 0\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(0,len(str)):\n        dp[i][i] = 1\n        for j in range(i+1,len(str)):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j],dp[i][j-1])\n    return dp[0][len(str)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    max_len = 1\n    max_index = -1\n    for i in range(n-1, -1, -1): \n        for j in range(i+1, n): \n            if (str[i] == str[j]): \n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len: \n                    max_len = dp[i][j] \n                    max_index = i \n    return dp[0][max_index], max_index \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    lps = [0] * len(str) \n    lps[0] = 1\n    lps[1] = 1\n    for i in range(2, len(str)): \n        \n        if str[i] == str[i-1]: \n            lps[i] = lps[i-1] + 2\n        else: \n            lps[i] = max(lps[i-1], lps[i-2]) \n    return max(lps) \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    a=n-1\n    print(a)\n    def calc(n):\n        if n>0:\n            return (n*(n+1))/(2*n)\n        else:\n            return 0\n    return calc(a)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    while n > 0:\n        total += 1 / n\n        n -= 1\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n/(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    sum = 0\n    for i in range(1,n):\n        sum += 1 / i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return ((n-1)/n)*(n+1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 / (n - 1) + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(n, 1, -1):\n        sum += 1/x\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    numerator = 1\n    denominator = 1\n    while n!= 1:\n        numerator *= n - 1\n        n -= 1\n        denominator *= n\n    return numerator/denominator\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    res = []\n    while i < len(array_nums1):\n        j = 0\n        while j < len(array_nums2):\n            if array_nums1[i] == array_nums2[j]:\n                res.append(array_nums1[i])\n            j += 1\n        i += 1\n    return res\n    \ndef partition(array, low, high): \n    i = ( low-1 )        \n    pivot = array[high]    \n    for j in range(low, high): \n        if   array[j] <= pivot: \n            i = i+1 \n            array[i],array[j] = array[j],array[i] \n    array[i+1],array[high] = array[high],array[i+1] \n    return ( i+1 ) \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2:\n            common_nums.append(num)\n    return common_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # define an empty list for storing intersection\n    intersection_list = []\n    # define an empty list to store unique numbers\n    unique_list = []\n    # for each number in first array\n    for num in array_nums1:\n        # if not already in unique list\n        if num not in unique_list:\n            unique_list.append(num)\n    # for each number in second array\n    for num in array_nums2:\n        # if not already in unique list\n        if num not in unique_list:\n            unique_list.append(num)\n    # for each number in unique list\n    for num in unique_list:\n        # check if number in first array\n        if num in array_nums1:\n            # add to intersection list\n            intersection_list.append(num)\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1)&set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n    index_1 = 0\n    index_2 = 0\n    new_arr = []\n    while index_1 < len(array_nums1) and index_2 < len(array_nums2):\n        if array_nums1[index_1] == array_nums2[index_2]:\n            new_arr.append(array_nums1[index_1])\n            index_1 += 1\n            index_2 += 1\n        elif array_nums1[index_1] < array_nums2[index_2]:\n            index_1 += 1\n        else:\n            index_2 += 1\n    return new_arr\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    inter_list = []\n    for i in array_nums1:\n        if i in array_nums2:\n            inter_list.append(i)\n    return inter_list\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    common_elements = []\n    \n    for index in range(len(array_nums1)):\n        if array_nums1[index] in array_nums2:\n            common_elements.append(array_nums1[index])\n    \n    return common_elements\n    \n    \n    \n    # ###############\n    # # MY VERSION\n    # ###############\n    \n    # intersection_nums = []\n    \n    # for num in array_nums1:\n    #     if num in array_nums2:\n    #         intersection_nums.append(num)\n    # return intersection_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    count=0\n    for num in array_nums1:\n        if num in array_nums2:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurrences = 0\n    for i in tup: \n        if i == x: \n            occurrences += 1\n    return occurrences\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)):\n        if list[i] == element:\n            list[i] = element\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        list.append(element)\n    else:\n        for i in range(len(list)):\n            if list[i] == element:\n                list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newList = []\n    for index in range(len(list)):\n        if list[index] == element:\n            newList.insert(index, element)\n        else:\n            newList.insert(index, list[index])\n    return newList\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index,_ in enumerate(list):\n        if _ == element:\n            list.insert(index,element)\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if list[i] == element:\n            new_list.append(element)\n            new_list.append(list[i])\n        else:\n            new_list.append(list[i])\n            new_list.append(element)\n    return new_list\n        \n        \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # base case\n    if list == None:\n        return []\n    if len(list) == 0:\n        return list\n    return insert_element(list[:-1],element) + [list[-1]]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list + [element]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)-1):\n        list.append(list[i])\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Input: 3 + 5j\n    Output: (3+5j, 10.0)\n    Input: 1 - 2j\n    Output: (1-2j, 4.0)\n    Input: 1 - 2.5j\n    Output: (1-2.5j, 1.5)\n    '''\n    # your code here\n    #a = 1\n    #b = 2\n    \n    nums = numbers.split()\n    #print(nums)\n    #print(type(nums))\n    \n    for i in range(len(nums)):\n        nums[i] = complex(nums[i])\n    \n    \n    #x = nums[0]\n    #y = nums[1]\n    #print(x)\n    #print(y)\n    \n    \n    for i in range(len(nums)):\n        real = nums[i].real\n        imag = nums[i].imag\n        if i == 0:\n            a = real\n            b = imag\n            \n        elif i == 1:\n            a = -imag\n            b = real\n        \n        else:\n            if a >= 0 and b >= 0:\n                if a > b:\n                    a = a - b\n                    b = a + b\n                    real = a\n                    imag = b\n                \n                elif a < b:\n                    a = a + b\n                    b = a - b\n                    real = b\n                    imag = a\n            \n            elif a < 0 and b >= 0:\n                if a < b:\n                    a = a - b\n                    b = a + b\n                    real = a\n                    imag = b\n                \n                elif a > b:\n                    a = a + b\n                    b = a - b\n                    real = b\n                    imag = a\n            \n            elif a < 0 and b < 0:\n                if a < b:\n                    a = a - b\n                    b = a + b\n                    real = a\n                    imag = b\n                \n                elif a > b:\n                    a = a + b\n                    b = a - b\n                    real = a\n                    imag = b\n            \n            elif a >= 0 and b < 0:\n                if a > b:\n                    a = a - b\n                    b = a + b\n                    real = a\n                    imag = b\n                \n                elif a < b:\n                    a = a + b\n                    b = a - b\n                    real = b\n                    imag = a\n            \n            \n        #print(real)\n        #print(imag)\n        #print(a)\n        #print(b)\n    \n    #print(a)\n    #print(b)\n    \n    \n    r = abs(a)\n    x = abs(b)\n    \n    \n    \n    #print(\"r =\",r)\n    #print(\"x =\",x)\n    \n    polar = r, x\n    \n    return polar\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def _to_polar(n):\n        p=0\n        q=0\n        for i in range(len(n)):\n            if (n[i]==0):\n                p = p +1\n            elif (n[i]>0):\n                q = q +1\n        m = max(abs(n[0]),abs(n[1]))\n        r = max(abs(n[0]),abs(n[1]))\n        x = m * cos(n[2])\n        y = r * sin(n[2])\n        p = p * 180/pi\n        q = q * 180/pi\n        return x,y,p,q\n    \n    if(numbers.count(None) == len(numbers)):\n        return None\n    numbers.insert(0,None)\n    numbers.append(None)\n    \n    res=[]\n    for i in range(len(numbers)-1):\n        if(i%2==0):\n            n=numbers[i]\n            res.append(_to_polar(n))\n        else:\n            n=numbers[i]\n            res.append(n)\n    return res\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # your code goes here\n    maxim = max(numbers)\n    if(maxim == 0):\n        print('no')\n    else:\n        maxim = maxim**2\n        minim = max(numbers)-maxim\n        return minim,maxim\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar(x,y):\n        return (complex(x,y),abs(x)**2+abs(y)**2)\n    ans = []\n    for i in numbers:\n        ans.append(polar(i.real,i.imag))\n    return ans\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for i in numbers:\n        theta = cmath.phase(i)\n        r = cmath.polar(i)[0]\n        result.append((theta, r))\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.phase(numbers), cmath.polar(numbers)[0])\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def normalize(number):\n        if abs(number) == 0:\n            return 0\n        return cmath.sqrt(number.real ** 2 + number.imag ** 2)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = []\n    for i in range(len(numbers)):\n        real = numbers[i].real\n        img = numbers[i].imag\n        r.append(complex(real,img))\n    return r\n    \ndef exponent(a):\n    '''\n    Write a python function to compute and return the exponenent of a complex number\n    '''\n    #raise NotImplementedError\n    return cmath.pow(a,2)\n    \ndef inverse(numbers):\n    '''\n    Write a python function to compute and return the inverse of a complex number\n    '''\n    #raise NotImplementedError\n    return 1/numbers\n    \ndef log(numbers):\n    '''\n    Write a python function to compute and return the natural logarithm of a complex number\n    '''\n    #raise NotImplementedError\n    return cmath.log(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=abs(z)\n    theta=(2*cmath.phase(z))*cmath.pi\n    return (r,theta)\n    \ndef convert_polar(a,b):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    r=a[0]*cmath.exp(1j*b)\n    z=r+r*1j\n    return(z.real,z.imag)\n    \nprint('Complex Numbers:')\nprint('complex(2,3) = %.2f + %.2fi' % convert((2,3)))\nprint('complex(0,0) = %.2f + %.2fi' % convert((0,0)))\nprint('complex(1,0) = %.2f + %.2fi' % convert((1,0)))\nprint('complex(1,1) = %.2f + %.2fi' % convert((1,1)))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c1, c2 = 0, 0\n    for i in numbers:\n        if type(i)!= complex:\n            c2 = c2 + 1\n            continue\n        for j in i.split():\n            c1 = c1 + int(j)\n    return c1, c2\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for elem in list1:\n        if type(elem) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for val in list1:\n        if val.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] == l[j] or l[i] == l[k] or l[j] == l[k]:\n                    continue\n                comb = (l[i], l[j], l[k])\n                if len(comb) == n:\n                    res.append(comb)\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        result.append(tuple(l[i:i + n]))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = l.copy()\n    c = []\n    if n >= 1 and n <= len(l):\n        c = list(combinations_with_replacement(l, n))\n        for i in range(len(c)):\n            c[i] = tuple(c[i])\n    return c\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    final_list = []\n    for i in l:\n        final_list.append(i)\n    for i in combinations_with_replacement(final_list, n):\n        yield i\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    lst = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if (i!= j) and (i!= k) and (j!= k):\n                    lst.append([l[i], l[j], l[k]])\n    return lst\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    combs.append(tuple(l[0:n]))\n    for i in range(len(l) - n + 1):\n        l_combs = l[i:i+n]\n        l_combs.append(l[i+n])\n        combs.append(tuple(l_combs))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return (list(combinations_with_replacement(l, n)))\n    "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n    prime = []\n    if n < 2:\n        print(\"Enter a valid number\")\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                prime.append(i)\n    print(prime)\n    # print(math.sqrt(n))\n    # count = 0\n    # for i in range(2,int(math.sqrt(n))+1):\n    #     if n % i == 0:\n    #         count += 1\n    # if count > 0:\n    #     return(0)\n    # else:\n    #     return(1)\n    return(len(prime))"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime_num = 2\n    while prime_num * prime_num <= n:\n        if n % prime_num == 0:\n            n = n // prime_num\n            while n % prime_num == 0:\n                n = n // prime_num\n            return n + 1\n        prime_num += 1\n    return n + 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    count = 0\n    # all prime numbers are greater than 1\n    # so 2 and 3 are not prime numbers\n    is_prime = [True]*n\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if not is_prime[i]:\n            continue\n        else:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    for i in range(2, n):\n        if is_prime[i]:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n <= 1:\n        return 0\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 2:\n        return 0\n    number = 3\n    count = 0\n    while (number <= n):\n        is_prime = True\n        for i in range(2, number):\n            if (number % i) == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        number += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 0:\n        return 0\n    primes = [2]\n    for i in range(3,n+1):\n        prime = True\n        for prime_n in primes:\n            if i%prime_n == 0:\n                prime = False\n        if prime:\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Create a boolean variable and initialize it to True\n    is_prime = True\n    # Create an empty list for storing prime numbers\n    prime_numbers = []\n    \n    # Iterate till the square root of the number\n    for i in range(2, n):\n    \n        # Create a boolean variable and initialize it to True\n        is_prime = True\n        \n        # Iterate from 2 to the square root of the number\n        for j in range(2, i):\n        \n            # If i is divisible by any number between 2 and i-1, it is not prime\n            if (i % j == 0):\n                # Setting boolean to False\n                is_prime = False\n                # break out of the loop as we dont need to iterate further\n                break\n        \n        # If loop executes without any break statement,\n        # i is prime.\n        if (is_prime == True):\n            prime_numbers.append(i)\n            \n    # return the number of prime numbers\n    return len(prime_numbers)\n    "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    from math import sqrt\n    count = 0\n    for i in range(2, n):\n        if (i == 2):\n            count += 1\n        elif (i % 2 == 0):\n            continue\n        else:\n            n = int(sqrt(i))\n            for j in range(3, n + 1, 2):\n                if (i % j == 0):\n                    break\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n == 0 or n == 1:\n        return 0\n    \n    is_prime = [True for _ in range(n + 1)]\n    is_prime[0] = False\n    is_prime[1] = False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n    \nprint(count_Primes_nums(10))\nprint(count_Primes_nums(100))\nprint(count_Primes_nums(10000))\nprint(count_Primes_nums(100000))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    if n <= 1:\n        return 0\n    for i in range(2, n + 1):\n        if i not in primes:\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a_swap = b\n    b_swap = a\n    return (a_swap,b_swap)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n    \n    \nprint(swap_numbers(1,2))\nprint(swap_numbers(5,6))\nprint(swap_numbers(8,9))\nprint(swap_numbers(10,20))\nprint(swap_numbers(20,10))\nprint(swap_numbers(10,10))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n    return (tup1 if tup1[0] > tup2[0] else tup2)\n    "
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tuple = (0,0)\n    for element in test_tup1:\n        if element > new_tuple[0]:\n            new_tuple = (element, test_tup1[0])\n    for element in test_tup2:\n        if element > new_tuple[0]:\n            new_tuple = (element, test_tup2[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_list1 = test_tup1[0]\n    test_list2 = test_tup2[0]\n    \n    if len(test_list1) > len(test_list2):\n        return test_tup1\n    elif len(test_list1) < len(test_list2):\n        return test_tup2\n    elif len(test_list1) == len(test_list2):\n        return (max(test_list1), max(test_list2))\n        \n    \n    \nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (10, 20, 30))\n    tup2 = ((1, 2, 3, 4), (10, 20, 30, 40))\n    tup3 = ((0, 0), (0, 0, 0, 0))\n    \n    print(maximize_elements(tup1, tup2))\n    print(maximize_elements(tup1, tup3))\n    print(maximize_elements(tup2, tup3)"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    elem_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            elem_list.append(test_tup1[i])\n        elif test_tup2[i] > test_tup1[i]:\n            elem_list.append(test_tup2[i])\n        else:\n            elem_list.append(test_tup1[i])\n    return elem_list\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (0, 1, 2, 3, 4, 5, 6)\n    max_value = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n        if test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n    return max_value\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return(max(test_tup1), max(test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1_max = (0,0)\n    test_tup2_max = (0,0)\n    if test_tup1[0]>test_tup2[0]:\n        test_tup1_max = (test_tup2[0],test_tup2[1])\n        test_tup2_max = (test_tup1[0],test_tup1[1])\n    elif test_tup1[0]==test_tup2[0]:\n        if test_tup1[1]>test_tup2[1]:\n            test_tup1_max = (test_tup2[0],test_tup2[1])\n            test_tup2_max = (test_tup1[0],test_tup1[1])\n        elif test_tup1[1]==test_tup2[1]:\n            test_tup1_max = (test_tup1[0],test_tup1[1])\n            test_tup2_max = (test_tup2[0],test_tup2[1])\n        elif test_tup1[1]<test_tup2[1]:\n            test_tup1_max = (test_tup1[0],test_tup1[1])\n            test_tup2_max = (test_tup2[0],test_tup2[1])\n    return test_tup1_max, test_tup2_max\n    \n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    temp_tup = (test_tup1[0],test_tup2[1])\n    temp_tup = sorted(temp_tup)\n    return temp_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    temp_tup = (test_tup1[0], test_tup2[1]) if test_tup1[1] > test_tup2[1] else (test_tup2[0], test_tup1[1])\n    print(temp_tup)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Creating new tuple\n    new_tup = []\n    # Maximum value\n    max_val = 0\n    # Finding maximum value of both\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] >= test_tup2[j]:\n                max_val = test_tup1[i]\n            else:\n                max_val = test_tup2[j]\n        new_tup.append(max_val)\n        max_val = 0\n    # Adding max value of both to new tuple\n    for i in range(len(new_tup)):\n        if new_tup[i] >= max_val:\n            max_val = new_tup[i]\n    return new_tup\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return 2\n    if n == 2:\n        return 3\n    i = 5\n    a = 3\n    while i <= n:\n        if is_prime(a):\n            i += 1\n            continue\n        i += 1\n        b = i\n        while i > 1:\n            if a % i == 0:\n                a += i\n                break\n            i -= 1\n        if i == 1:\n            a += 2\n    return a\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return prime_number(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Based on the definition of the nth prime, start with 3.\n    # If the number is not prime, its first prime number larger than 3\n    # is 2 * 3 + 1.\n    # If the number is prime, its first prime number larger than 2\n    # is 3.\n    # Thus, we can use while loop to generate all primes smaller than n.\n    # While loop iterates until n is smaller than the last prime number.\n    n = int(n)\n    prime = 3\n    while prime <= n:\n        is_prime = True\n        # Check if n is divisible by any prime number\n        # less than the square root of n\n        if (n % prime == 0):\n            is_prime = False\n            break\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    nth = 0\n    while nth < n:\n        nth += 1\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = (n*3)+1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2 and n % 2 == 0:\n        return 2\n    prime = 3\n    while prime <= n:\n        if is_prime(prime):\n            n -= 1\n        else:\n            prime += 2\n    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def nth_prime(n):\n        '''\n        n = 2\n        Returns 2\n        n = 3\n        Returns 3\n        n = 5\n        Returns 5\n        '''\n        def is_prime(n):\n            '''\n            Determines whether the number is prime.\n            '''\n            for i in range(2, int(math.sqrt(n))+1):\n                if n % i == 0:\n                    return False\n            return True\n        #Sieve of Eratosthenes\n        sieve = [True] * n\n        sieve[0], sieve[1] = False, False\n        for i in range(2, int(math.sqrt(n))+1):\n            if sieve[i]:\n                for j in range(2*i, n, i):\n                    sieve[j] = False\n        return [i for i in range(n) if sieve[i]][n-nth_prime(n)-1]\n    '''\n    The algorithm used by prime.py is too slow.\n    '''\n    n = 2\n    while n <= nth_prime(n):\n        if is_prime(n):\n            return n\n        n += 1\n    return None\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Make sure n is positive\n    if n < 1: \n        raise ValueError(\"N must be positive\")\n    if n == 1: \n        return 2\n    else: \n        x = 3\n        y = 1\n        for i in range(n - 1): \n            x = newman_miller_rabin(x, 2)\n            y = newman_miller_rabin(y, x - 1)\n        return x if y == 1 else x + 1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = n - 1\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    for p in primes:\n        if n == 1:\n            return p\n        else:\n            n -= 1\n    return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 5\n    num = 1\n    while num < n:\n        num *= i\n        i += 2\n    return num\n    \nprint(newman_prime(5))\nprint(newman_prime(100))\nprint(newman_prime(200))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = list()\n    prime_dict = dict()\n    num = 2\n    while len(prime_list) < n:\n        if is_prime(num):\n            prime_list.append(num)\n            prime_dict[num] = len(prime_list)\n            num += 1\n        else:\n            num += 1\n    \n    return prime_list[-1]\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = (0,0)\n    for i in range(len(test_tup1)):\n        if(test_tup1[i]!= 0):\n            result = (test_tup1[i] // test_tup2[i], result[1])\n    return result[0]\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    x = 0\n    for i in range(len(test_tup1)):\n        x = test_tup1[i] // test_tup2[i]\n    return x\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    try:\n        return (test_tup1 / test_tup2,test_tup1 // test_tup2)\n    except ZeroDivisionError:\n        return(\"Error: Cannot Divide by Zero\")\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    for i in range(len(test_list1)):\n        test_list1[i] = test_list1[i] / test_list2[i]\n    return tuple(test_list1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Create a new tuple that contains the quotient and remainder of each equation\n    returned_tuple = ((x/y, x%y) for x, y in zip(test_tup1, test_tup2))\n    return returned_tuple\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return 0, 0, 0, 0\n    elif len(test_tup1) == 0:\n        return 0, 0, 0, test_tup2[1] // test_tup2[2]\n    elif len(test_tup2) == 0:\n        return test_tup1[1] // test_tup1[2], 0, 0, 0\n    else:\n        test_tup1_copy = test_tup1[:]\n        test_tup2_copy = test_tup2[:]\n        test_tup1_copy.remove(test_tup1[0])\n        test_tup2_copy.remove(test_tup2[0])\n        return test_tup1[1] // test_tup1[2], test_tup1_copy[1] // test_tup1_copy[2], test_tup2_copy[1] // test_tup2_copy[2], test_tup2[1] // test_tup2[2]\n    \ndef difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise difference operation.\n    '''\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return 0\n    elif len(test_tup1) == 0:\n        return test_tup2[1] - test_tup2[2]\n    elif len(test_tup2) == 0:\n        return test_tup1[1] - test_tup1[2]\n    else:\n        return test_tup1[1] - test_tup1[2], test_tup2[1] - test_tup2[2]\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Invalid. Length of tuples is not same'\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] /= test_tup2[i]\n        return test_tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i, j in zip(test_tup1, test_tup2):\n        if i == j:\n            return f'{i}/{j} = 1'\n        elif i < j:\n            return f'{i}/{j} = {i/j}'\n        else:\n            return f'{i}/{j} = {j/i}'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == 0:\n        return ()\n    first_part = []\n    second_part = []\n    for x in list1:\n        if len(first_part) < L:\n            first_part.append(x)\n        else:\n            second_part.append(x)\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return part1, part2\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_part1 = list1[:L]\n    list1_part2 = list1[L:]\n    return list1_part1, list1_part2\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    middle = len(list1) // 2\n    first_half = list1[:middle]\n    second_half = list1[middle:]\n    return first_half, second_half\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_1 = list1[0:L]\n    list1_2 = list1[L:]\n    return list1_1, list1_2\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list in two parts\n    first_half = list1[:L]\n    second_half = list1[L:]\n    return first_half, second_half\n    "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a, b = list1[:L], list1[L:]\n    return a, b\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    a = 10.5\n    b = 7.0\n    return round((h_age - a) / (b - a), 2)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 0\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    a = 21\n    return h_age + a\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age / 7.0)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (int(h_age) * 7) + 4\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_dog = int(h_age)\n    if age_dog == 0:\n        print('No dog')\n    else:\n        dog_age_in_dog_years = int(age_dog / 7)\n        print(f'Dog is {dog_age_in_dog_years} years old')\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    if type(S) == type([]):\n        if type(step) == type(1):\n            if step < 1:\n                return None\n            else:\n                for i in range(0, len(S), step):\n                    result.append(S[i:i + step])\n                return result\n        else:\n            print(\"step must be an integer\")\n    else:\n        print(\"S must be a list\")\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n    \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    if (len(S) % step) == 0:\n        for i in range(0, len(S), step):\n            out.append(S[i:i+step])\n    else:\n        out.append(S[:step])\n        for i in range(step, len(S), step):\n            out.append(S[i:i+step])\n    return out\n    \n    #Make sure the assertion below is always true\n    assert len(out) == (len(S)//step)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n_list = []\n    \n    if S == [] or len(S) == 0:\n        return S\n    \n    while S!= []:\n        if step == 1:\n            n_list.append(S)\n        else:\n            n_list.append(S[0:step])\n            S = S[step:]\n            \n    return n_list\n    \nprint(list_split([1,2,3,4], 2)) #should print [[1,2],[3,4]]\nprint(list_split([1,2,3,4,5,6], 3)) #should print [[1,2,3],[4,5,6]]\nprint(list_split([1,2,3,4,5,6], 0)) #should print [[]]\nprint(list_split([], 3)) #should print [[]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    start = 0\n    while start < len(S):\n        end = start + step\n        res.append(S[start:end])\n        start += step\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 0:\n        step = -step\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # print(\"Length: \", len(S))\n    length = len(S)\n    return_list = []\n    for i in range(0, length, step):\n        return_list.append(S[i:i+step])\n    return return_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l*l*6)\nprint(lateralsurface_cube(2))\nprint(lateralsurface_cube(4))\nprint(lateralsurface_cube(6))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralsurface_cube(l):\n        return l*l*6\n    return lateralsurface_cube\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    l = float(l)\n    sides = 6.0\n    area = sides * (sides - 1.0) * l * l\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 2 * l * (l ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    return ((2*l)*(l+1))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Your code here\n    return \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l ** 2\n    b = (l ** 2) * 6\n    c = (l ** 2) * 4\n    d = (l ** 2) * 2\n    e = (l ** 2)\n    f = (l ** 2) * 1\n    g = l ** 2\n    print('The lateral surface area of a cube is:', a + b + c + d + e + f + g)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #check if input is positive float\n    if type(l)!= float:\n        raise TypeError(\"Input must be a positive number\")\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l**2)\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return (4*pi*(r**2))\n    \ndef lateralsurface_cylinder(h,r):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its height and radius.\n    '''\n    return ((pi/3)*h*r**2)\n    \ndef lateralsurface_cone(h,r):\n    '''\n    Write a function to find the lateral surface area of a cone given its height and radius.\n    '''\n    return ((pi/3)*h*(r**2))\n    \ndef lateralsurface_pyramid(h1,h2,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid given its height and base length.\n    '''\n    return ((2*h2)*l)\n    \ndef area_triangle(l,h):\n    '''\n    Write a function to find the area of a triangle given its length and height.\n    '''\n    return ((l*h)/2)\n    \ndef area_rectangle(l,h):\n    '''\n    Write a function to find the area of a rectangle given its length and height.\n    '''\n    return ((l*h))\n    \ndef area_square(l):\n    '''\n    Write a function to find the area of a square given its length.\n    '''\n    return ((l*l))\n    \ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle given its radius.\n    '''\n    return ((pi*r**2))\n    \ndef area_trapezium(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezium given its height and the base length.\n    '''\n    return (((h)/2)*(l1+l2))\n    \ndef area_trapezoid(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid2(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return ((h/2)*(l1+l2))\n    \ndef area_parallelogram(l1,l2):\n    '''\n    Write a function to find the area of a parallelogram given its base lengths.\n    '''\n    return ((l1*l2)/2)\n    \ndef area_rectangle2(l1,l2):\n    '''\n    Write a function to find the area of a rectangle given its length.\n    '''\n    return ((l1*l2))\n    \ndef area_triangle2(l1,l2):\n    '''\n    Write a function to find the area of a triangle given its length.\n    '''\n    return ((l1*l2)/2)\n    \ndef area_pyramid(h1,h2,l):\n    '''\n    Write a function to find the area of a pyramid given its height and base length.\n    '''\n    return ((h1*h2)/2)\n    \ndef area_trapezoid3(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid4(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid5(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid6(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid7(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid8(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid9(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid10(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid11(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid12(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid13(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid14(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid15(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid16(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid17(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid18(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid19(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid20(h,l1,l2):\n    '''\n    Write a function to find the area of a trapezoid given its height and the base length.\n    '''\n    return (((h/2)*(l1+l2)))\n    \ndef area_trapezoid21(h,l"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    Sum = 0\n    for i in range(1, n + 1):\n        if(i % 2!= 0):\n            Sum = Sum + i**2\n    return Sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_sq = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            sum_sq += i**2\n    return sum_sq\n    "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n):\n        total += i*i\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    if n < 1:\n        return 0\n    for i in range(n):\n        if i%2!=0:\n            sum = sum + i**2\n    return sum\nprint(square_Sum(2))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares = sum_of_squares + i**2\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%2!=0):\n            sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 0\n    x = 0\n    while i < n:\n        x = x + i\n        i = i + 1\n    y = (x ** 2)\n    return y\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    square_sum = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            square_sum = square_sum + (i * i)\n    return square_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i=1\n    s=0\n    while i<=n:\n        s=s+(i*i)\n        i+=2\n    return s\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*find_star_num(n-1) + n\nprint(find_star_num(10))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    while True:\n        if n == count:\n            return count\n        else:\n            count += 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 2*(n-1)+1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else:\n        return n * find_star_num(n-1) \n    \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n-1)**2 + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n_stars = 0\n    star_num = 0\n    while n_stars < n:\n        star_num += 1\n        if (star_num % 2 == 0):\n            n_stars += 1\n        else:\n            n_stars += 0\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n/3 + 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #if n is odd\n    if n % 2 == 1:\n        return 1\n    #if n is even\n    else:\n        return n / 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_nums = range(1, n)\n    for i in range(1, n):\n        star_nums = star_nums * i\n    return star_nums.index(n) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n_sum = 0\n    for i in range(1, n+1):\n        n_sum += i\n    return n_sum\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        return ord(k)\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    assert type(k)==str\n    if ord(k)>90 or ord(k)<65:\n        return''\n    else:\n        return ord(k)-64\n    \n    \ndef ascii_string(s):\n    '''\n    Write a function to convert a string to an ascii string.\n    '''\n    \n    assert type(s)==str\n    r=\"\"\n    for x in s:\n        r=r+chr(ascii_value(x))\n    return r\n    \n    \ndef find_substring(s,p):\n    '''\n    Write a function to find the position of the substring in the string.\n    '''\n    \n    assert type(s)==str\n    assert type(p)==str\n    \n    ans=[]\n    for x in range(0,len(s)-len(p)+1):\n        if s[x:x+len(p)]==p:\n            ans.append(x)\n    return ans\n    \n    \ndef find_substring_with_replacement(s,p):\n    '''\n    Write a function to find the position of the substring in the string.\n    '''\n    \n    assert type(s)==str\n    assert type(p)==str\n    \n    ans=[]\n    for x in range(0,len(s)-len(p)+1):\n        if s[x:x+len(p)]==p:\n            ans.append(x)\n    if len(ans)==0:\n        ans.append(-1)\n    return ans\n    \n    \ndef longest_substring_without_repeating(s):\n    '''\n    Write a function to find the longest substring without repeating characters.\n    '''\n    \n    assert type(s)==str\n    \n    ans=[]\n    for x in range(0,len(s)):\n        i=0\n        while i<len(s):\n            if s[i] not in s[x:]:\n                ans.append(s[x:x+i])\n                break\n            i+=1\n    if len(ans)==0:\n        ans.append(-1)\n    return max(ans,key=len)\n    \n    \ndef last_occur_index(s):\n    '''\n    Write a function to find the index of the last occurrence of a character in a string.\n    '''\n    \n    assert type(s)==str\n    \n    i=-1\n    for x in range(len(s)):\n        i=max(i,x)\n        if s[x] not in s[i+1:]:\n            break\n    return i\n    \n    \ndef single_number(nums):\n    '''\n    Write a function to find the single number.\n    '''\n    \n    assert type(nums)==list\n    \n    n=len(nums)\n    if n==0:\n        return -1\n    else:\n        return sum(nums)-sum(set(nums))\n    \n    \ndef last_n_fibonacci_numbers(n):\n    '''\n    Write a function to find the nth term in the fibonacci series.\n    '''\n    \n    assert type(n)==int\n    \n    if n==0:\n        return -1\n    if n==1:\n        return 0\n    \n    if n==2:\n        return 1\n    else:\n        return last_n_fibonacci_numbers(n-1)+last_n_fibonacci_numbers(n-2)\n    \n    \ndef largest_number(nums):\n    '''\n    Write a function to find the largest number in a list.\n    '''\n    \n    assert type(nums)==list\n    \n    l=len(nums)\n    if l==0:\n        return -1\n    else:\n        max_n=max(nums)\n        for x in range(len(nums)):\n            if nums[x]==max_n:\n                nums[x]=0\n                break\n        for x in range(len(nums)-1,-1,-1):\n            if nums[x]!=0:\n                break\n            max_n=max(max_n,nums[x])\n            nums[x]=0\n        return max_n\n    \n    \ndef binary_search(arr,target):\n    '''\n    Write a function to find the position of the target in the array.\n    '''\n    \n    assert type(arr)==list\n    assert type(target)==int\n    \n    l=len(arr)\n    if l==0:\n        return -1\n    else:\n        low=0\n        high=l-1\n        while low<=high:\n            mid=(low+high)//2\n            if arr[mid]==target:\n                return mid\n            if arr[mid]>target:\n                high=mid-1\n            else:\n                low=mid+1\n    return -1\n    \n    \ndef two_strings(s1,s2):\n    '''\n    Write a function to check if two strings are anagram of each other or not.\n    '''\n    \n    assert type(s1)==str\n    assert type(s2)==str\n    \n    s1=s1.lower()\n    s2=s2.lower()\n    if len(s1)!=len(s2):\n        return False\n    else:\n        a=list(s1)\n        b=list(s2)\n        a.sort()\n        b.sort()\n        if a==b:\n            return True\n        else:\n            return False\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    \n    assert type(s)==str\n    \n    s=s.lower()\n    if len(s)<2:\n        return True\n    elif len(s)==2:\n        if s==s[::-1]:\n            return True\n        else:\n            return False\n    else:\n        s1=s[0]\n        s2=s[len(s)-1]\n        if s1==s2:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n    \n    \ndef longest_substring_without_repeating(s):\n    '''\n    Write a function to find the longest substring without repeating characters.\n    '''\n    \n    assert type(s)==str\n    \n    n=len(s)\n    if n==0:\n        return ''\n    elif n==1:\n        return s\n    else:\n        r=s[0]\n        ans=r\n        for x in range(1,n):\n            if s[x] not in s[x-1]:\n                ans=max(ans,s[x:],key=len)\n            else:\n                ans=max(ans,s[x-1:x+1],key=len)\n        return ans\n    \n    \ndef maximum_product(nums):\n    '''\n    Write a function to find the maximum product of four adjacent digits in the same direction.\n    '''\n    \n    assert type(nums)==list\n    \n    n=len(nums)\n    if n==0:\n        return -1\n    else:\n        ans=0\n        for x in range(0,n-1):\n            if nums[x]*nums[x+1]>ans:\n                ans=nums[x]*nums[x+1]\n        return ans\n    \n    \ndef longest_consecutive_sequence(nums):\n    '''\n    Write a function to find the length of the longest consecutive sequence in a given list.\n    '''\n    \n    assert type(nums)==list\n    \n    l=len(nums)\n    if l==0:\n        return -1\n    else:\n        max_seq=0\n        for x in range(l):\n            seq=1\n            tmp=nums[x]\n            while tmp+1 in nums:\n                seq+=1\n                tmp+=1\n            if seq>max_seq:\n                max_seq=seq\n        return max_seq\n    \n    \ndef factorial(n):\n    '''\n    Write a function t"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for i, x in enumerate(arr) if i % 2 == 0 and x % 2 == 0)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if i%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            even_sum = even_sum + arr[i]\n        else:\n            odd_sum = odd_sum + arr[i]\n    return even_sum, odd_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            result=result+arr[i]\n    print(result)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        if arr[i]%2==0:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i%2 == 0) and (arr[i]%2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_nums = []\n    even_index = []\n    odd_index = []\n    odd_nums = []\n    sum_odd_even_list = []\n    odd_sum = 0\n    even_sum = 0\n    odd_count = 0\n    even_count = 0\n    sum_list = []\n    for i in range(len(arr)):\n        if(arr[i]%2 == 0):\n            even_nums.append(arr[i])\n            even_count += 1\n            even_index.append(i)\n        else:\n            odd_nums.append(arr[i])\n            odd_count += 1\n            odd_index.append(i)\n    even_count = even_count\n    odd_count = odd_count\n    if(even_count == 0):\n        sum_even_odd_list.append(odd_nums)\n        sum_even_odd_list.append(even_nums)\n        return sum_even_odd_list\n    else:\n        if(even_count > odd_count):\n            for i in range(even_count):\n                even_sum = even_sum + even_nums[i]\n                sum_even_odd_list.append(even_nums)\n            for i in range(odd_count):\n                odd_sum = odd_sum + odd_nums[i]\n                sum_even_odd_list.append(odd_nums)\n            sum_odd_even_list.append(odd_sum)\n            sum_odd_even_list.append(even_sum)\n            return sum_odd_even_list\n        else:\n            for i in range(odd_count):\n                odd_sum = odd_sum + odd_nums[i]\n                sum_even_odd_list.append(odd_nums)\n            for i in range(even_count):\n                even_sum = even_sum + even_nums[i]\n                sum_even_odd_list.append(even_nums)\n            sum_odd_even_list.append(odd_sum)\n            sum_odd_even_list.append(even_sum)\n            return sum_odd_even_list\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #define the even_Power_Sum function\n    even_power_sum = 0\n    #for loop through all the even natural numbers\n    for i in range(1,n+1): \n        #if the number is even and the power is 5, increment the sum by 1\n        if i%2==0 and i**5==1:\n            even_power_sum += 1\n    #return the sum\n    return even_power_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    if n == 0:\n        return 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum\nprint(even_Power_Sum(4))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**5\n    \n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def even_power_sum(n):\n        sum=0\n        for i in range(n+1):\n            if i%2==0:\n                sum+=i**5\n        return sum\n    return even_power_sum(n)\nn=int(input(\"Enter the number:\"))\nprint(even_Power_Sum(n))\n'''\n9\n'''\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 5\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**power)\n        power += 2\n    return sum\nprint(even_Power_Sum(8))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + (i ** 5)\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            count += i**5\n    return count\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * (n * ("
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # define the function\n    def even_Power_Sum(n):\n        # calculate the sum\n        sum = 0\n        # loop through the numbers\n        for i in range(1, n+1):\n            # add the number raised to the power of five to the sum\n            sum += i ** 5\n        # return the sum\n        return sum\n    # run the function\n    print(even_Power_Sum(10))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for x in test_list:\n        new_list.append(x[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[0])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for x in test_list:\n        new_list.append(x[0])\n    return new_list\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for tup in test_list:\n        return_list.append(tup[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [val[-1] for val in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output_list = []\n    for x in test_list:\n        output_list.append(x[1])\n    return output_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return([x[2] for x in test_list])\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_rear_elements = []\n    for i in test_list:\n        list_of_rear_elements.append(i[-1])\n    return list_of_rear_elements\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return(tuple(x - y for x, y in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (tuple(tup1 - tup2 for tup1, tup2 in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Add your code here\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    elif len(test_tup1) == 0 and len(test_tup2) == 0:\n        return True\n    else:\n        return test_tup1[0] - test_tup2[0]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtracted_tuples = []\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[:test_tup1.index(test_tup2[0])] + test_tup1[test_tup1.index(test_tup2[1]):]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == int:\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n        else:\n            test_tup1[i] = test_tup1[i].substract_elements(test_tup2[i])\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return(test_tup1[:], test_tup1[:])\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = tuple()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    lst = []\n    for i in range(len(test_tup1)):\n        lst.append(test_tup1[i] - test_tup2[i])\n    return tuple(lst)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            even_binomial_sum += math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n    return even_binomial_sum\n    \nprint(even_binomial_Coeff_Sum(3))  # -> 0\nprint(even_binomial_Coeff_Sum(6))  # -> 0\nprint(even_binomial_Coeff_Sum(16)) # -> 115\nprint(even_binomial_Coeff_Sum(42)) # -> 0\nprint(even_binomial_Coeff_Sum(44)) # -> 19\nprint(even_binomial_Coeff_Sum(80)) # -> 0\nprint(even_binomial_Coeff_Sum(999)) # -> 195\nprint(even_binomial_Coeff_Sum(1000)) # -> 0\nprint(even_binomial_Coeff_Sum(1001)) # -> 0\nprint(even_binomial_Coeff_Sum(15)) # -> 10\nprint(even_binomial_Coeff_Sum(21)) # -> 6\nprint(even_binomial_Coeff_Sum(34)) # -> 16\nprint(even_binomial_Coeff_Sum(50)) # -> 0\nprint(even_binomial_Coeff_Sum(52)) # -> 20\nprint(even_binomial_Coeff_Sum(100)) # -> 0\nprint(even_binomial_Coeff_Sum(102)) # -> 0\nprint(even_binomial_Coeff_Sum(200)) # -> 0\nprint(even_binomial_Coeff_Sum(2001)) # -> 0\nprint(even_binomial_Coeff_Sum(2000)) # -> 0\nprint(even_binomial_Coeff_Sum(23))  # -> 0\nprint(even_binomial_Coeff_Sum(30))  # -> 0\nprint(even_binomial_Coeff_Sum(41))  # -> 0\nprint(even_binomial_Coeff_Sum(50))  # -> 0\nprint(even_binomial_Coeff_Sum(51))  # -> 21\nprint(even_binomial_Coeff_Sum(60))  # -> 0\nprint(even_binomial_Coeff_Sum(61))  # -> 27\nprint(even_binomial_Coeff_Sum(70))  # -> 0\nprint(even_binomial_Coeff_Sum(71))  # -> 32\nprint(even_binomial_Coeff_Sum(80))  # -> 0\nprint(even_binomial_Coeff_Sum(80))  # -> 0\nprint(even_binomial_Coeff_Sum(81))  # -> 0\nprint(even_binomial_Coeff_Sum(91))  # -> 0\nprint(even_binomial_Coeff_Sum(92))  # -> 0\nprint(even_binomial_Coeff_Sum(100))  # -> 0\nprint(even_binomial_Coeff_Sum(101))  # -> 0\nprint(even_binomial_Coeff_Sum(102))  # -> 0\nprint(even_binomial_Coeff_Sum(110))  # -> 0\nprint(even_binomial_Coeff_Sum(111))  # -> 0\nprint(even_binomial_Coeff_Sum(120))  # -> 0\nprint(even_binomial_Coeff_Sum(121))  # -> 0\nprint(even_binomial_Coeff_Sum(130))  # -> 0\nprint(even_binomial_Coeff_Sum(131))  # -> 0\nprint(even_binomial_Coeff_Sum(140))  # -> 0\nprint(even_binomial_Coeff_Sum(141))  # -> 0\nprint(even_binomial_Coeff_Sum(150))  # -> 0\nprint(even_binomial_Coeff_Sum(151))  # -> 0\nprint(even_binomial_Coeff_Sum(160))  # -> 0\nprint(even_binomial_Coeff_Sum(161))  # -> 0\nprint(even_binomial_Coeff_Sum(170))  # -> 0\nprint(even_binomial_Coeff_Sum(171))  # -> 0\nprint(even_binomial_Coeff_Sum(180))  # -> 0\nprint(even_binomial_Coeff_Sum(181))  # -> 0\nprint(even_binomial_Coeff_Sum(190))  # -> 0\nprint(even_binomial_Coeff_Sum(191))  # -> 0\nprint(even_binomial_Coeff_Sum(200))  # -> 0\nprint(even_binomial_Coeff_Sum(201))  # -> 0\nprint(even_binomial_Coeff_Sum(210))  # -> 0\nprint(even_binomial_Coeff_Sum(211))  # -> 0\nprint(even_binomial_Coeff_Sum(220))  # -> 0\nprint(even_binomial_Coeff_Sum(221))  # -> 0\nprint(even_binomial_Coeff_Sum(230))  # -> 0\nprint(even_binomial_Coeff_Sum(231))  # -> 0\nprint(even_binomial_Coeff_Sum(240))  # -> 0\nprint(even_binomial_Coeff_Sum(241))  # -> 0\nprint(even_binomial_Coeff_Sum(250))  # -> 0\nprint(even_binomial_Coeff_Sum(251))  # -> 0\nprint(even_binomial_Coeff_Sum(260))  # -> 0\nprint(even_binomial_Coeff_Sum(261))  # -> 0\nprint(even_binomial_Coeff_Sum(270))  # -> 0\nprint(even_binomial_Coeff_Sum(271))  # -> 0\nprint(even_binomial_Coeff_Sum(280))  # -> 0\nprint(even_binomial_Coeff_Sum(281))  # -> 0\nprint(even_binomial_Coeff_Sum(290))  # -> 0\nprint(even_binomial_Coeff_Sum(291))  # -> 0\nprint(even_binomial_Coeff_Sum(300))  # -> 0\nprint(even_binomial_Coeff_Sum(301))  # -> 0\nprint(even_binomial_Coeff_Sum(310))  # -> 0\nprint(even_binomial_Coeff_Sum(311))  # -> 0\nprint(even_binomial_Coeff_Sum(320))  # -> 0\nprint(even_binomial_Coeff_Sum(321))  # -> 0\nprint(even_binomial_Coeff_Sum(330))  # -> 0\nprint(even_binomial_Coeff_Sum(331))  # -> 0\nprint(even_binomial_Coeff_Sum(340))  # -> 0\nprint(even_binomial_Coeff_Sum(341))  # -> 0\nprint(even_binomial_Coeff_Sum(350))  # -> 0\nprint(even_binomial_Coeff_Sum(351))  # -> 0\nprint(even_binomial_Coeff_Sum(360))  # -> 0\nprint(even_binomial_Coeff_Sum(361))  # -> 0\nprint(even_binomial_Coeff_Sum(370))  # -> 0\nprint(even_binomial_Coeff_Sum(371))  # -> 0\nprint(even_binomial_Coeff_Sum(380))  # -> 0\nprint(even_binomial_Coeff_Sum(381))  # -> 0\nprint(even_binomial_Coeff_Sum(390))  # -> 0\nprint(even_binomial_Coeff_Sum(391))  # -> 0\nprint(even_binomial_Coeff_Sum(400))  # -> 0\nprint(even_binomial_Coeff_Sum(401))  # -> 0\nprint(even_binomial_Coeff_Sum(410)"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    value = 0\n    for i in range(n):\n        value = value + math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return value\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # calculate num_even = n/2\n    num_even = int(n/2)\n    # calculate the answer\n    answer = 0\n    for i in range(1, num_even+1):\n        answer = answer + (math.factorial(n) / (math.factorial(n-i) * math.factorial(i))) \n    # return the answer\n    return answer\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_Coeff = 0\n    for i in range(n):\n        sum_Coeff = sum_Coeff + binom(2*i+1,i)\n    return sum_Coeff\n    '''\n    Expected Output:\n    18\n    '''"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    count = 1\n    sum = 0\n    while count <= n:\n        sum = sum + count\n        count = count + 2\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    n_binomial = binomial_coef(n)\n    n_binomial_list = list(n_binomial)\n    for i in range(0, len(n_binomial_list)):\n        if n_binomial_list[i]%2!= 0:\n            return 0\n    return sum(n_binomial_list)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([coeff for index in range(0,n+1,2) for coeff in binomial_coefficient(index,n)])\ndef binomial_coefficient(n,k): \n    '''\n    Write a python function that takes in two positive integers n and k and returns a list of the binomial coefficients.\n    '''\n    b = []\n    for i in range(n+1):\n        b.append((math.comb(n,i) * pow(k,i) * pow(n-k,i-1))/math.comb(i,2))\n    return b\ndef multiple_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of multiple of even index binomial coefficients.\n    '''\n    return sum([coeff for index in range(1,n+1,2) for coeff in binomial_coefficient(index,n)])\ndef factorial(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of n.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n*factorial(n-1) \ndef binomial_Dist_Probability( n,k, p): \n    '''\n    Write a python function that takes in three positive integers n, k, p and returns the probability of getting at least k successes with a success probability of p.\n    '''\n    numerator = math.factorial(n)/(math.factorial(k) * math.factorial(n-k))\n    denominator = math.factorial(n)/math.factorial(n-k)\n    return numerator/denominator\ndef multiple_binomial_Dist_Probability( n,k, p): \n    '''\n    Write a python function that takes in three positive integers n, k, p and returns the probability of getting at least k successes with a success probability of p.\n    '''\n    if n == 1 and p!= 1:\n        return 0\n    return binomial_Dist_Probability(n-1,k,p)*p\ndef binomial_Dist_Probability_Sum( n,k, p): \n    '''\n    Write a python function that takes in three positive integers n, k, p and returns the sum of the probabilities of getting at least k successes with a success probability of p.\n    '''\n    numerator = math.factorial(n)/math.factorial(k)\n    denominator = math.factorial(n-k)\n    return numerator/denominator\ndef multiple_binomial_Dist_Probability_Sum( n,k, p): \n    '''\n    Write a python function that takes in three positive integers n, k, p and returns the sum of the probabilities of getting at least k successes with a success probability of p.\n    '''\n    if n == 0 and p!= 1:\n        return 0\n    return binomial_Dist_Probability_Sum(n-1,k,p)*p\ndef prob_Sum_to_Sum( n, p, q, r): \n    '''\n    Write a python function that takes in four positive integers n, p, q, r, and returns the sum of probabilities of getting at least k successes with a success probability of p, k > 1 with a success probability of q, k > 2 with a success probability of r, and k > 3 with a success probability of 1.\n    '''\n    return binomial_Dist_Probability_Sum(n,p,p) + binomial_Dist_Probability_Sum(n,p,q) + binomial_Dist_Probability_Sum(n,p,r) + binomial_Dist_Probability_Sum(n,q,r) + binomial_Dist_Probability_Sum(n,r,1)\ndef prob_Sum_to_Sum_Sum( n, p, q, r): \n    '''\n    Write a python function that takes in four positive integers n, p, q, r, and returns the sum of probabilities of getting at least k successes with a success probability of p, k > 1 with a success probability of q, k > 2 with a success probability of r, and k > 3 with a success probability of 1.\n    '''\n    return binomial_Dist_Probability_Sum(n,p,p) + binomial_Dist_Probability_Sum(n,p,q) + binomial_Dist_Probability_Sum(n,p,r) + binomial_Dist_Probability_Sum(n,q,r) + binomial_Dist_Probability_Sum(n,r,1) + binomial_Dist_Probability_Sum(n,1,1)\ndef prob_Sum_to_Sum_Sum_Sum( n, p, q, r): \n    '''\n    Write a python function that takes in four positive integers n, p, q, r, and returns the sum of probabilities of getting at least k successes with a success probability of p, k > 1 with a success probability of q, k > 2 with a success probability of r, and k > 3 with a success probability of 1.\n    '''\n    return binomial_Dist_Probability_Sum(n,p,p) + binomial_Dist_Probability_Sum(n,p,q) + binomial_Dist_Probability_Sum(n,p,r) + binomial_Dist_Probability_Sum(n,q,r) + binomial_Dist_Probability_Sum(n,r,1) + binomial_Dist_Probability_Sum(n,1,1) + binomial_Dist_Probability_Sum(n,1,1) + binomial_Dist_Probability_Sum(n,1,1) + binomial_Dist_Probability_Sum(n,1,1)\ndef prob_Sum_to_Sum_Sum_Sum_Sum( n, p, q, r, s): \n    '''\n    Write a python function that takes in four positive integers n, p, q, r, s, and returns the sum of probabilities of getting at least k successes with a success probability of p, k > 1 with a success probability of q, k > 2 with a success probability of r, k > 3 with a success probability of s, and k > 4 with a success probability of 1.\n    '''\n    return binomial_Dist_Probability_Sum(n,p,p) + binomial_Dist_Probability_Sum(n,p,q) + binomial_Dist_Probability_Sum(n,p,r) + binomial_Dist_Probability_Sum(n,p,r) + binomial_Dist_Probability_Sum(n,p,s) + binomial_Dist_Probability_Sum(n,q,r) + binomial_Dist_Probability_Sum(n,q,r) + binomial_Dist_Probability_Sum(n,q,s) + binomial_Dist_Probability_Sum(n,r,s) + binomial_Dist_Probability_Sum(n,r,1) + binomial_Dist_Probability_Sum(n,s,1) + binomial_Dist_Probability_Sum(n,s,1) + binomial_Dist_Probability_Sum(n,s,1) + binomial_Dist_Probability_Sum(n,s,1) + binomial_Dist_Probability_Sum(n,1,1) + binomial_Dist_Probability_Sum(n,1,1) + binomial_Dist_Probability_Sum(n,1,1) + binomial_Dist_Probability_Sum(n,1,1)\ndef prob_Sum_to_Sum_Sum_Sum_Sum_Sum( n, p, q, r, s, t): \n    '''\n    Write a python function that takes in four positive integers n, p, q, r, s, t, and returns the sum of probabilities of getting at least k successes with a success probability of p, k > 1 with a success probability of q, k > 2 with a success probability of r, k > 3 with a success probability of s, k > 4 with a success probability of t, and k > 5 with a success probability of 1.\n    '''\n    return binomial_Dist_Probability_Sum(n,p,p) + binomial_Dist_Probability_Su"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize result\n    Sum = 0\n    # Iterate over all positive numbers from 1 to n\n    for i in range(1, n + 1):\n        # Multiply the index (i) by the i-th binomial coefficient.\n        Sum += (i * even_binomial_Coeff(i, n))\n    # Return the sum\n    return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    for i in range(0,n+1):\n        ans += math.factorial(n) // math.factorial(n-i)\n    return ans\n    \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans += math.factorial(n) // (math.factorial(n-i) * math.factorial(i))\n    return ans\n    \ndef summation( a,n):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer a and \n    returns the sum of a to the nth term.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans += a\n    return ans\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    B = 1\n    for i in range(1,n+1):\n        B += i*(2**(i-1))\n    return B\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3)*(np.pi)*(r**3)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = r**2*3.14159265359*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    if r>0 and h>0:\n        return round((3.14159*r*r*h)/3,2)\n    else:\n        return 'Errrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.1415 * r**2 * h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r**2)*3.14*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (math.pi*(r**2)*h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*r**2*h\n    return volume\nprint(\"Volume of a cylinder with radius 5 and height 5 is\",volume_cylinder(5,5))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3*math.pi*h/3\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k, v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filter = dict.copy()\n    for key in dict.keys():\n        if dict[key] < n:\n            dict_filter.pop(key)\n    return dict_filter\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    my_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            my_dict[key] = value\n    return my_dict\n    \n    \ndef dict_map(dict, func):\n    '''\n    Write a function that takes in a dictionary and a function and applies the function to every value in the dictionary.\n    '''\n    my_dict = {}\n    for key,value in dict.items():\n        my_dict[key] = func(value)\n    return my_dict\n    \n    \ndef dict_reduce(dict, func):\n    '''\n    Write a function that takes in a dictionary and a function and applies the function to the dictionary values that are lists.\n    '''\n    my_dict = {}\n    for key,value in dict.items():\n        if type(value) == list:\n            my_dict[key] = func(value)\n    return my_dict\n    \n    \ndef dict_select(dict,*args):\n    '''\n    Write a function that takes in a dictionary and zero or more keys and returns the value stored under the key if it exists, otherwise returns false.\n    '''\n    my_dict = {}\n    for arg in args:\n        if arg in dict.keys():\n            my_dict[arg] = dict[arg]\n        else:\n            my_dict = False\n    return my_dict\n    \n    \ndef dict_sum(dict,*args):\n    '''\n    Write a function that takes in a dictionary and zero or more keys and returns the sum of all of the values stored under the key if it exists, otherwise returns false.\n    '''\n    my_dict = {}\n    for arg in args:\n        if arg in dict.keys():\n            my_dict[arg] = sum(dict[arg])\n        else:\n            my_dict = False\n    return my_dict\n    \n    \ndef dict_zip(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and zips the two together. The resulting dictionary should contain all the key value pairs from both dictionaries.\n    '''\n    my_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            my_dict[key] = [dict1[key],dict2[key]]\n    return my_dict\n    \n    \ndef dict_zip_with(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and zips the two together. The resulting dictionary should contain all the key value pairs from both dictionaries.\n    '''\n    my_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            my_dict[key] = [dict1[key],dict2[key]]\n    return my_dict\n    \n    \ndef dict_zip_with_values(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and zips the two together. The resulting dictionary should contain all the key value pairs from both dictionaries. The values should be appended to each other as lists.\n    '''\n    my_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            my_dict[key] = [dict1[key],dict2[key]]\n    return my_dict\n    \n    \ndef dict_zip_with_v_len(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and zips the two together. The resulting dictionary should contain all the key value pairs from both dictionaries. The values should be appended to each other as lists.\n    '''\n    my_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            my_dict[key] = [dict1[key],dict2[key]]\n    return my_dict\n    \n    \ndef dict_zip_with_key(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and zips the two together. The resulting dictionary should contain all the key value pairs from both dictionaries. The keys should be appended to each other as lists.\n    '''\n    my_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            my_dict[key] = [dict1[key],dict2[key]]\n    return my_dict\n    \n    \ndef dict_zip_with_v_len_key(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and zips the two together. The resulting dictionary should contain all the key value pairs from both dictionaries. The values should be appended to each other as lists.\n    '''\n    my_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            my_dict[key] = [dict1[key],dict2[key]]\n    return my_dict\n    \n    \ndef dict_zip_with_key_len(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and zips the two together. The resulting dictionary should contain all the key value pairs from both dictionaries. The keys should be appended to each other as lists.\n    '''\n    my_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            my_dict[key] = [dict1[key],dict2[key]]\n    return my_dict\n    \n    \ndef dict_zip_with_v_len_key_len(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and zips the two together. The resulting dictionary should contain all the key value pairs from both dictionaries. The values should be appended to each other as lists.\n    '''\n    my_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            my_dict[key] = [dict1[key],dict2[key]]\n    return my_dict\n    \n    \ndef dict_get_item(dict,item):\n    '''\n    Write a function that takes in a dictionary, an item, and returns the item from the dictionary if it exists, otherwise returns false.\n    '''\n    my_dict = {}\n    if item in dict.keys():\n        my_dict[item] = dict[item]\n    else:\n        my_dict = False\n    return my_dict\n    \n    \ndef dict_get_item_len(dict,item):\n    '''\n    Write a function that takes in a dictionary, an item, and returns the item from the dictionary if it exists, otherwise returns false.\n    '''\n    my_dict = {}\n    if item in dict.keys():\n        my_dict[item] = len(dict[item])\n    else:\n        my_dict = False\n    return my_dict\n    \n    \ndef dict_get_item_len_val(dict,item):\n    '''\n    Write a function that takes in a dictionary, an item, and returns the item from the dictionary if it exists, otherwise returns false.\n    '''\n    my_dict = {}\n    if item in dict.keys():\n        my_dict[item] = len(dict[item])\n    else:\n        my_dict = False\n    return my_dict\n    \n    \ndef dict_get_item_val(dict,item):\n    '''\n    Write a function that takes in a dictionary, an item, and returns the item from the dictionary if it exists, otherwise returns false.\n    '''\n    my_dict = {}\n    if item in dict.keys():\n        my_dict[item] = dict[item]\n    else:\n        my_dict = False\n    return my_dict\n    \n    \ndef dict_get_item_val_len(dict,item):\n    '''\n    Write a function that takes in a dictionary, an item, and returns the item from the dictionary if it exists, otherwise returns false.\n    '''\n    my_dict = {}\n    if item in dict.keys():\n        my_dict[item] = dict[item]\n    else:\n        my_dict = False\n    return my_dict\n    \n    \ndef dict_get_item_val_len_val(dict,item):\n    '''\n    Write a function that takes in a dictionary, an item, and returns the item from the dictionary if it exists, otherwise returns false.\n    '"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if n in dict.values():\n        return dict\n    else:\n        new_dict = {}\n        for key,value in dict.items():\n            if value>=n:\n                new_dict[key] = value\n        return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, val in dict.items():\n        if val >= n:\n            new_dict[key] = val\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict = {}\n    for k,v in dict.items():\n        if v > n:\n            newdict.update({k:v})\n    return newdict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filter_out = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            dict_filter_out[key] = dict[key]\n    return dict_filter_out\n    #\n    # '''\n    # Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    # '''\n    # # your code here\n    # dict_filter_out = {}\n    # for key in dict.keys():\n    #     if dict[key] >= n:\n    #         dict_filter_out[key] = dict[key]\n    # return dict_filter_out\n    #\n    # # Test Cases\n    #\n    # # case 1\n    # print(\"\\ncase 1: \")\n    # print(dict)\n    # print(dict_filter(dict,4))\n    #\n    # # case 2\n    # print(\"\\ncase 2: \")\n    # print(dict)\n    # print(dict_filter(dict,2))\n    #\n    # # case 3\n    # print(\"\\ncase 3: \")\n    # print(dict)\n    # print(dict_filter(dict,0))\n    #\n    # # case 4\n    # print(\"\\ncase 4: \")\n    # print(dict)\n    # print(dict_filter(dict,5))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # write your solution here\n    l = []\n    for i in range(len(test_tup)):\n        if test_tup[i] not in l:\n            l.append(test_tup[i])\n    return len(l)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Write your solution here\n    res = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] < test_tup[i-1]:\n            res += 1\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup[0]\n    \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    return test_tup[-1]\n    \ndef count_middle_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs in the middle of the given tuple.\n    '''\n    return len(test_tup)//2\n    \ndef count_odd_elements(test_tup):\n    '''\n    Write a function to find the number of elements that is odd in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i%2!= 0)\n    \ndef count_even_elements(test_tup):\n    '''\n    Write a function to find the number of elements that is even in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i%2 == 0)\n    \ndef count_positive_numbers(test_tup):\n    '''\n    Write a function to find the number of positive numbers in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i > 0)\n    \ndef count_negative_numbers(test_tup):\n    '''\n    Write a function to find the number of negative numbers in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i < 0)\n    \ndef count_positive_and_negative(test_tup):\n    '''\n    Write a function to find the number of positive and negative numbers in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i > 0 or i < 0)\n    \ndef count_unique_elements(test_tup):\n    '''\n    Write a function to find the number of unique elements in the given tuple.\n    '''\n    return len(set(test_tup))\n    \ndef count_repeating_elements(test_tup):\n    '''\n    Write a function to find the number of repeating elements in the given tuple.\n    '''\n    return len(test_tup) - len(set(test_tup))\n    \ndef count_duplicate_elements(test_tup):\n    '''\n    Write a function to find the number of duplicate elements in the given tuple.\n    '''\n    return len(test_tup) - len(set(test_tup))\n    \ndef count_even_and_odd_elements(test_tup):\n    '''\n    Write a function to find the number of even and odd numbers in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i%2 == 0 and i!= 0)\n    \ndef count_odd_and_even_elements(test_tup):\n    '''\n    Write a function to find the number of odd and even numbers in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i%2!= 0 and i!= 0)\n    \ndef count_every_nth_element(test_tup, n):\n    '''\n    Write a function to find the number of elements that occurs every nth element in the given tuple.\n    '''\n    return sum(1 for i in range(len(test_tup)-1) if i%n == 0)\n    \ndef count_odd_and_even_elements_for_every_nth_element(test_tup, n):\n    '''\n    Write a function to find the number of odd and even numbers in the given tuple.\n    '''\n    return sum(1 for i in range(len(test_tup)-1) if i%n == 0)\n    \ndef count_elements_below(test_tup, x):\n    '''\n    Write a function to find the number of elements that are less than the given value in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i < x)\n    \ndef count_elements_above(test_tup, x):\n    '''\n    Write a function to find the number of elements that are greater than the given value in the given tuple.\n    '''\n    return sum(1 for i in test_tup if i > x)\n    \ndef count_elements_between(test_tup, x):\n    '''\n    Write a function to find the number of elements that are between the given range.\n    '''\n    return sum(1 for i in test_tup if i > x[0] and i < x[1])\n    \ndef count_nth_smallest_element(test_tup, n):\n    '''\n    Write a function to find the nth smallest element in the given tuple.\n    '''\n    test_tup.sort()\n    return test_tup[-n]\n    \ndef count_nth_largest_element(test_tup, n):\n    '''\n    Write a function to find the nth largest element in the given tuple.\n    '''\n    test_tup.sort()\n    return test_tup[n-1]\n    \ndef count_nth_smallest_element_for_every_nth_element(test_tup, n):\n    '''\n    Write a function to find the nth smallest element in the given tuple.\n    '''\n    test_tup.sort()\n    return test_tup[n-1]\n    \ndef count_nth_largest_element_for_every_nth_element(test_tup, n):\n    '''\n    Write a function to find the nth largest element in the given tuple.\n    '''\n    test_tup.sort()\n    return test_tup[n-1]\n    \ndef count_nth_smallest_element_for_every_nth_element_in_range(test_tup, x, y):\n    '''\n    Write a function to find the nth smallest element in the given tuple.\n    '''\n    test_tup.sort()\n    return test_tup[x-1]\n    \ndef count_nth_largest_element_for_every_nth_element_in_range(test_tup, x, y):\n    '''\n    Write a function to find the nth largest element in the given tuple.\n    '''\n    test_tup.sort()\n    return test_tup[y-1]\n    \ndef count_smallest_elements(test_tup, n):\n    '''\n    Write a function to find the nth smallest element in the given tuple.\n    '''\n    test_tup.sort()\n    return test_tup[:n]\n    \ndef count_largest_elements(test_tup, n):\n    '''\n    Write a function to find the nth largest element in the given tuple.\n    '''\n    test_tup.sort()\n    return test_tup[n-1:]\n    \ndef count_sum_of_n_elements(test_tup, n):\n    '''\n    Write a function to find the sum of the nth smallest element in the given tuple.\n    '''\n    test_tup.sort()\n    return sum(test_tup[:n])\n    \ndef count_sum_of_n_elements_for_every_nth_element(test_tup, n):\n    '''\n    Write a function to find the sum of the nth smallest element in the given tuple.\n    '''\n    test_tup.sort()\n    return sum(test_tup[:n])\n    \ndef count_sum_of_n_elements_for_every_nth_element_in_range(test_tup, x, y):\n    '''\n    Write a function to find the sum of the nth smallest element in the given tuple.\n    '''\n    test_tup.sort()\n    return sum(test_tup[x-1:y-1])\n    \ndef count_sum_of_n_elements_for_every_nth_element_in_range_in_reverse(test_tup, x, y):\n    '''\n    Write a function to find the sum of the nth smallest element in the given tuple"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    list1 = []\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            list1.append(i)\n    return len(list1)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_1 = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == 1:\n            num_1 += 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    print('First occurance of element =',count)\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    counter = 1\n    num_dec = 0\n    for x in range(n):\n        num_dec += counter * 10\n        counter *= 10\n    return num_dec\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    tot = 1\n    i = 1\n    while i <= n:\n        tot = tot * i\n        i += 1\n    return tot\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n -= 1\n    if n == 0:\n        return 1\n    s = 0\n    while n > 0:\n        s += 2\n        n -= 1\n    return s\n    \nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 5\nassert is_num_decagonal(3) == 13\nassert is_num_decagonal(4) == 25\nassert is_num_decagonal(5) == 39\nassert is_num_decagonal(6) == 52\nassert is_num_decagonal(7) == 65\nassert is_num_decagonal(8) == 78\nassert is_num_decagonal(9) == 91\nassert is_num_decagonal(10) == 106\nassert is_num_decagonal(11) == 121\nassert is_num_decagonal(12) == 132\nassert is_num_decagonal(13) == 213\nassert is_num_decagonal(14) == 214\nassert is_num_decagonal(15) == 225\nassert is_num_decagonal(16) == 226\nassert is_num_decagonal(17) == 233\nassert is_num_decagonal(18) == 234\nassert is_num_decagonal(19) == 235\nassert is_num_decagonal(20) == 236\nassert is_num_decagonal(21) == 237\nassert is_num_decagonal(22) == 238\nassert is_num_decagonal(23) == 239\nassert is_num_decagonal(24) == 240\nassert is_num_decagonal(25) == 241\nassert is_num_decagonal(26) == 242\nassert is_num_decagonal(27) == 243\nassert is_num_decagonal(28) == 244\nassert is_num_decagonal(29) == 245\nassert is_num_decagonal(30) == 246\nassert is_num_decagonal(31) == 247\nassert is_num_decagonal(32) == 248\nassert is_num_decagonal(33) == 249\nassert is_num_decagonal(34) == 250\nassert is_num_decagonal(35) == 251\nassert is_num_decagonal(36) == 252\nassert is_num_decagonal(37) == 253\nassert is_num_decagonal(38) == 254\nassert is_num_decagonal(39) == 255\nassert is_num_decagonal(40) == 256\nassert is_num_decagonal(41) == 257\nassert is_num_decagonal(42) == 258\nassert is_num_decagonal(43) == 259\nassert is_num_decagonal(44) == 260\nassert is_num_decagonal(45) == 261\nassert is_num_decagonal(46) == 262\nassert is_num_decagonal(47) == 263\nassert is_num_decagonal(48) == 264\nassert is_num_decagonal(49) == 265\nassert is_num_decagonal(50) == 266\nassert is_num_decagonal(51) == 267\nassert is_num_decagonal(52) == 268\nassert is_num_decagonal(53) == 269\nassert is_num_decagonal(54) == 270\nassert is_num_decagonal(55) == 271\nassert is_num_decagonal(56) == 272\nassert is_num_decagonal(57) == 273\nassert is_num_decagonal(58) == 274\nassert is_num_decagonal(59) == 275\nassert is_num_decagonal(60) == 276\nassert is_num_decagonal(61) == 277\nassert is_num_decagonal(62) == 278\nassert is_num_decagonal(63) == 279\nassert is_num_decagonal(64) == 280\nassert is_num_decagonal(65) == 281\nassert is_num_decagonal(66) == 282\nassert is_num_decagonal(67) == 283\nassert is_num_decagonal(68) == 284\nassert is_num_decagonal(69) == 285\nassert is_num_decagonal(70) == 286\nassert is_num_decagonal(71) == 287\nassert is_num_decagonal(72) == 288\nassert is_num_decagonal(73) == 289\nassert is_num_decagonal(74) == 290\nassert is_num_decagonal(75) == 291\nassert is_num_decagonal(76) == 292\nassert is_num_decagonal(77) == 293\nassert is_num_decagonal(78) == 294\nassert is_num_decagonal(79) == 295\nassert is_num_decagonal(80) == 296\nassert is_num_decagonal(81) == 297\nassert is_num_decagonal(82) == 298\nassert is_num_decagonal(83) == 299\nassert is_num_decagonal(84) == 300\nassert is_num_decagonal(85) == 301\nassert is_num_decagonal(86) == 302\nassert is_num_decagonal(87) == 303\nassert is_num_decagonal(88) == 304\nassert is_num_decagonal(89) == 305\nassert is_num_decagonal(90) == 306\nassert is_num_decagonal(91) == 307\nassert is_num_decagonal(92) == 308\nassert is_num_decagonal(93) == 309\nassert is_num_decagonal(94) == 310\nassert is_num_decagonal(95) == 311\nassert is_num_decagonal(96) == 312\nassert is_num_decagonal(97) == 313\nassert is_num_decagonal(98) == 314\nassert is_num_decagonal(99) == 315\nassert is_num_decagonal(100) == 316\nassert is_num_decagonal(101) == 317\nassert is_num_decagonal(102) == 318\nassert is_num_decagonal(103) == 319\nassert is_num_decagonal(104) == 320\nassert is_num_decagonal(105) == 321\nassert is_num_decagonal(106) == 322\nassert is_num_decagonal(107) == 323\nassert is_num_decagonal(108) == 324\nassert is_num_decagonal(109) == 325\nassert is_num_decagonal(110) == 326\nassert is_num_decagonal(111) == 327\nassert is_num_decagonal(112) == 328\nassert is_num_decagonal(113) == 329\nassert is_num_decagonal(114) == 330\nassert is_num_decagonal(115) == 331\nassert is_num_decagonal(116) == 332\nassert is_num_decagonal(117) == 333\nassert is_num_decagonal(118) == 334\nassert is_num_decagonal(119) == 335\nassert is_num_decagonal(120) == 336\nassert is_num_decagonal(121) == 337\nassert is_num_decagonal(122) == 338\nassert is_num_decagonal(123) == 339\nassert is_num_decagonal(124) == 340\nassert is_num_decagonal(125) == 341\nassert is_num_decagonal(126) == 342\nassert is_num_decagonal(127) == 343\nassert is_num_decagonal(128) == 344\nassert is_num_decagonal(129) == 345\nassert is_num_decagonal(130) == 346\nassert is_num_decagonal(131) == 347\nassert is_num_decagonal(132) == 348\nassert is_num_decagonal(133) == 349\nassert is_num_decagonal(134) == 350\nassert is_num_decagonal(135) == 351\nassert is_num_decagonal(136) == 352\nassert is_num_decagonal(137) == 353\nassert is_num_decagonal(138) == 354\nassert is_num_decagonal(139) == 355\nassert is_num_decagonal(140) == 356\nassert is_num_decagonal(141) == 357\nassert is_num_decagonal(142) == 358\nassert is_num_decagonal(143) == 359\nassert is_num_decagonal(144) == 360\nassert is_num_decagonal(145) == 361\nassert is_num_decagonal(146) == 362\nassert is_num_decagonal(147) == 363\nassert is_num_decagonal(148) == 364\nassert is_num_decagonal(149) == 365\nassert is_num_decagonal(150) == 366\nassert is_num_decagonal(151) == 367\nassert is_num_de"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    number = 1\n    decagon = 1\n    while n > 0:\n        number = (number * (3 * (2 * decagon - 1) + 1)) / 2\n        decagon += 1\n        n -= 1\n    return int(number)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 + (n - 1) * 4 - (n + 1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    dec_num = 1\n    while i <= n:\n        dec_num = dec_num*(3*i-1)/2\n        i += 1\n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec = 1\n    while n > 0:\n        dec = dec*10\n        n = n-1\n    return dec\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    deco_list = []\n    i = 0\n    while len(deco_list) < n:\n        i += 1\n        deco_list.append(i*(i+1)//2)\n    return deco_list[n-1]\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = abs(int(n))\n    num = 1\n    decagonal_num = 1\n    for i in range(n):\n        num *= i+1\n        decagonal_num += 1\n    return num // decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal_n = 0\n    while True:\n        decagonal_n += i\n        if decagonal_n == n:\n            return i\n        i += 1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # First check to see if the item is in the list\n    if item in dlist:\n        return True, dlist.index(item)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # for i in range(len(dlist)):\n    #     if item == dlist[i]:\n    #         return (True,i)\n    # return (False,-1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for idx,i in enumerate(dlist):\n        if i == item:\n            return True, idx\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    # start at 1 since index zero is the first element. \n    for index in range(1, len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    count = 0\n    while count < len(dlist):\n        if dlist[count] == item:\n            return True, count\n        count += 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #solution: start with the first element in the list and go through the list until you find the element.\n    # initialize a variable to keep track of the index\n    index = 0\n    # while loop that checks if the item is in the list\n    while index < len(dlist):\n        if item == dlist[index]:\n            return True, index\n        index += 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    start = 0\n    end = len(dlist) - 1\n    while start <= end:\n        middle = (start + end) // 2\n        if dlist[middle] == item:\n            return middle, dlist.index(item)\n        elif dlist[middle] > item:\n            end = middle - 1\n        else:\n            start = middle + 1\n    return False, None\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # index = 0\n    # while index < len(dlist):\n    #     if dlist[index] == item:\n    #         return True, index\n    #     else:\n    #         index += 1\n    #         continue\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set()\n    test_list.sort()\n    for x in test_list:\n        if x in test_set:\n            return False\n        else:\n            test_set.add(x)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_list = test_list.copy()\n    list_set = set(list_list)\n    if len(list_set) == len(list_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = []\n    print(f\"List of elements : {test_list}\")\n    if len(test_list) == len(set(test_list)):\n        print(\"List of elements are unique\")\n    else:\n        print(\"List of elements are not unique\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    all_list = []\n    for elem in test_list:\n        if elem not in all_list:\n            all_list.append(elem)\n    return len(all_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if(len(set(test_list))==len(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] in test_list[i+1:]:\n            unique = False\n            break\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list)\n    if len(test_list) == len(set(test_list)):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            if test_list[i]==test_list[j] and i!=j:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set1 = set(test_list)\n    if len(set1) == len(test_list):\n        print(\"All the elements are unique\")\n    else:\n        print(\"Not all unique\")\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert nums1 is not None and nums2 is not None\n    assert isinstance(nums1,list) and isinstance(nums2,list)\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for x,y in zip(nums1,nums2):\n        new_list.append(x-y)\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # nums1 = list(nums1)\n    # nums2 = list(nums2)\n    # nums1.reverse()\n    # nums2.reverse()\n    # new_list = []\n    # for x, y in zip(nums1,nums2):\n    #     new_list.append(x-y)\n    # return new_list\n    return list(map(lambda x,y: x-y,nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sum_list=[]\n    for i in range(0,len(nums1)):\n        sum_list.append(nums1[i]-nums2[i])\n    return sum_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # return list(set(nums1)-set(nums2))\n    nums1.sort()\n    nums2.sort()\n    return nums1[:]-nums2[:]\n    "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = list(nums1)\n    nums2 = list(nums2)\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\nprint(sub_list([1,2,3,4],[1,2,3,4]))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result=[]\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\ndef pow_list(nums1,nums2):\n    '''\n    Write a function to compute the power of each element in the list.\n    '''\n    result=[]\n    for i in range(len(nums1)):\n        result.append(nums1[i]**nums2[i])\n    return result\ndef fibonacci(n):\n    '''\n    Write a function to return the nth Fibonacci number.\n    '''\n    if n<=1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    n = str(n)\n    for i in n:\n        count += 1\n        if i > n[0]:\n            return False\n    return True\n        \nif __name__ == '__main__':\n    print(validate(1234))\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {} \n    n = str(n) \n    for i in range(0,len(n)): \n        freq[n[i]] = 0\n    for i in range(0,len(n)): \n        freq[n[i]] = freq[n[i]] + 1\n    \n    for i in range(0,len(n)): \n        if freq[n[i]] <= i: \n            print(\"Validation failed: Frequency of each digit in the given number is less than or equal to the digit itself.\") \n            return False\n    print(\"Validation Passed: Frequency of each digit in the given number is less than or equal to the digit itself.\") \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp_array = []\n    sum = 0\n    array = list(str(n))\n    for i in array:\n        temp_array.append(i)\n    for i in range(0,len(temp_array)):\n        if temp_array[i] == '1':\n            sum += 1\n    if sum <= int(temp_array[0]):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    n = str(n)\n    for i in range(len(n)):\n        if n[i] not in count:\n            count[n[i]] = 1\n        else:\n            count[n[i]] = count[n[i]] + 1\n    # print(count)\n    for i in range(len(n)):\n        if count[n[i]] > int(n[i]):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    def _min(n,d,cnt):\n        if n == 0:\n            return cnt\n        else:\n            return _min(n//d,d,cnt+1)\n    return _min(n,10,0) <= n\n    \nprint(validate(123456789))\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f = str(n)\n    m=[]\n    for i in range(len(f)):\n        count=f.count(f[i])\n        if(count<=int(f[i])):\n            m.append(True)\n        else:\n            m.append(False)\n    return all(m)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #convert integer to string and split based on 1\n    strn = str(n)\n    listn = list(strn)\n    listn = list(map(int,listn))\n    #iterate through each digit in the string and see if it is less than or equal to itself\n    #if it is, add 1 to the index\n    for i in range(len(listn)):\n        if listn[i]<=listn[i]:\n            pass\n        else:\n            listn[i] = listn[i] + 1\n    #convert the resulting list to string and convert back to integer\n    #this should return a new integer with 1's\n    return int(''.join(map(str,listn)))\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        return False\n    elif n < 0:\n        return False\n    else:\n        tmp_num = n\n        digit_list = []\n        while tmp_num!= 0:\n            digit_list.append(tmp_num%10)\n            tmp_num = tmp_num//10\n        for i in digit_list:\n            if i in digit_list:\n                if digit_list.count(i) > 1:\n                    return False\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    if type(n) == int:\n        while n > 0:\n            count += 1\n            n //= 10\n        return count <= len(str(n))\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for num in list:\n        if num!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if element not in list:\n        return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if element!= list[0]:\n        return False\n    if len(list) == 1:\n        return True\n    return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    else:\n        if list[0] == element:\n            return True\n        else:\n            return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    flag=True\n    for i in range(0,len(list)):\n        if list[i]!=element:\n            flag=False\n            break\n    return flag\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    assert type(list) == list, 'Input must be a list'\n    assert type(element) == int, 'Input must be an integer'\n    assert element!= 0, 'Input must not be 0'\n    assert element not in list, 'Input must not be in the list'\n    assert element!= list[0], 'Input must not be equal to the first element of the list'\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x==element for x in list)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.match('ab|ab.*ab', text)\n    if x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by a 'b', 'c' or 'd' character.\n    '''\n    text = text.lower()\n    match = re.findall(r'ab|cd|cd|cd', text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\ndef text_match_tw"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text=text.lower()\n    if re.search(r'\\ba\\b\\b\\b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'[ab]{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.findall('a.b.b', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = r\"a\\bbb*\"\n    return bool(re.search(regex, text))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.findall(\"ab\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('a.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_one_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    if re.search('a.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or four 'b' characters.\n    '''\n    if re.search('a.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_two_four_plus(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two, four, or eight 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, five, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_five_plus(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, five, six, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, six, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_six_plus(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, six, seven, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, seven, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_seven_plus(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, seven, eight, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, eight, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_eight_plus(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, eight, nine, or ten 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, ten, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_ten_plus(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, ten, or ten 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, one, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_one_plus(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, one, eight, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, two, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_two_plus(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, two, eight, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, three, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_three_plus(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, three, four, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    else:\n        return False\n    \ndef text_match_four_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four, four, or nine 'b' characters.\n    '''\n    if re.search('a.b.b.b.b.b.b.b.b.b.b.b.b', text):\n        return True\n    els"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if(re.search('ab+',text) or re.search('ab{2,3}',text)):\n        return True\n    else:\n        return False\nprint(text_match_two_three('abbab'))\nprint(text_match_two_three('abbb'))\nprint(text_match_two_three('abbbb'))\nprint(text_match_two_three('bbabbb'))\nprint(text_match_two_three('bbb'))\nprint(text_match_two_three('aabaaaaa'))\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def find_contiguous(arr, n, k): \n        left_idx = 0\n        right_idx = 0\n        sum_so_far = 0\n        max_sum = -float('inf')\n        while right_idx < n:\n            sum_so_far += arr[right_idx]\n            if sum_so_far < k:\n                right_idx += 1\n            elif sum_so_far == k:\n                max_sum = max(max_sum, sum_so_far)\n                left_idx += 1\n                sum_so_far = 0\n            else:\n                break\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    maxSum = -99999999999\n    i = 0\n    j = 0\n    while (i < n): \n        while (j < n and j <= i): \n            tmpSum = a[i] + a[j]\n            if (tmpSum > maxSum): \n                maxSum = tmpSum \n            j += 1\n        i += 1\n        j = i + k\n    return maxSum \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    from functools import reduce\n    from operator import add\n    '''\n    A = [-2, 2, -3, 4, 5]\n    n = 3\n    k = 2\n    Output = 10\n    Explanation\n    The output is the largest sum of a contiguous array which is formed by repeating the given array k times.\n    [2, -3, 4, 5, 2, -3, 4, 5]\n    [-2, 2, -3, 4, 5]\n    sum = -2 + 2 + -3 + 4 = 4\n    '''\n    max_sum = - float('inf')\n    for i in range(k):\n        for j in range(n):\n            temp_sum = reduce(add, a[:j] + a[j + 1:])\n            max_sum = max(max_sum, temp_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    print(\"Input Array is: \",a)\n    print(\"Length of input array is: \",n)\n    print(\"k is: \",k)\n    max_sum = -99999999\n    k = k%n\n    if k==0:\n        print(\"K is zero\")\n        for i in range(n):\n            print(\"max_sum\",max_sum)\n            print(\"i\",i)\n            print(\"a\",a[i])\n            print(\"max_sum-a[i]\",max_sum-a[i])\n            if max_sum-a[i]>max_sum:\n                max_sum=max_sum-a[i]\n        return max_sum\n    else:\n        max_sum = 0\n        for i in range(n-k+1):\n            print(\"max_sum\",max_sum)\n            print(\"i\",i)\n            print(\"a[i]\",a[i])\n            print(\"max_sum-a[i]\",max_sum-a[i])\n            if max_sum-a[i]>max_sum:\n                max_sum=max_sum-a[i]\n        return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #We will keep track of the largest sum during the traversal of the array. \n    max_sum = a[0]\n    #We will store the cumulative sum of the array.\n    cum_sum = 0\n    #For every index of the array, we will see if the cumulative sum is larger than max_sum. If so, then max_sum will be updated to the cumulative sum.\n    for i in range(n):\n        cum_sum += a[i]\n        if cum_sum > max_sum:\n            max_sum = cum_sum\n        \n        #If the cumulative sum becomes less than k, then the largest sum we have seen so far is the cumulative sum.\n        if cum_sum < k:\n            cum_sum = a[i]\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(n):\n        if a[i] == 0:\n            return 0\n    if n < 2:\n        return max(a)\n    a.sort()\n    while (a[-1] == 0 and k > 0):\n        a.pop()\n        k -= 1\n    if n <= k:\n        return max_sub_array_sum_repeated(a, n, k)\n    max_sum = a[k - 1]\n    for i in range(n - k):\n        max_sum = max(max_sum, sum(a[i : k + i]) )\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    temp=0\n    largest_sum=0\n    for i in range(n):\n        temp+=a[i]\n        largest_sum=max(largest_sum,temp)\n        temp=max(temp,0)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n): \n        curr_sum += a[i] \n        max_sum = max(max_sum, curr_sum)\n        if i >= k and curr_sum == max_sum: \n            return max_sum \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(n):\n        curr_sum = max(curr_sum + a[i], a[i])\n        if curr_sum == k:\n            max_sum = max(max_sum, curr_sum)\n        else:\n            curr_sum = curr_sum - a[i]\n    \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = 0\n    max_sum = -2147483648\n    for i in range(0, n-k+1):\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        curr_sum += a[i]\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n > 0:\n        result = 0\n        for i in range(n):\n            result += (i**2)\n        return result\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum = sum + (i*i)\n        i = i+1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #def square_Sum(n): \n    #square = 0\n    #for i in range(n): \n    #    square = square + (i*i)\n    #return square \n    #return n * (n + 1) * (2 * n + 1) / 6\n    #return (n * (n + 1) * (2 * n + 1)) / 6\n    #return (n * (n + 1) * (2 * n + 1) / 6)\n    return (n * (n + 1) * (2 * n + 1)) // 6\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            result += i**2\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i*i for i in range(n) if i%2==0)\n    \ndef isPrime(n): \n    '''\n    Write a python function that accepts a number and returns a boolean value denoting whether the given number is prime or not.\n    '''\n    return n > 1 and all(n%i!=0 for i in range(2,n))\n    \ndef prime_Num(n): \n    '''\n    Write a python function that takes in an integer n and returns the list of prime numbers from 2 to n.\n    '''\n    prime = []\n    for i in range(2,n+1):\n        if isPrime(i):\n            prime.append(i)\n    return prime\n    \ndef is_palindrome(str): \n    '''\n    Write a python function that takes a string and returns a boolean value denoting whether the given string is a palindrome or not.\n    '''\n    return str == str[::-1]\n    \ndef palindrome_Str(str): \n    '''\n    Write a python function that takes a string and returns a boolean value denoting whether the given string is palindrome or not.\n    '''\n    return str == str[::-1]\n    \ndef to_List(str): \n    '''\n    Write a python function that takes a string and returns a list of words from the given string.\n    '''\n    return str.split()\n    \ndef to_Dict(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return dict(zip(list,[1]*len(list)))\n    \ndef to_List(str): \n    '''\n    Write a python function that takes a string and returns a list of words from the given string.\n    '''\n    return str.split()\n    \ndef to_Dict(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return dict(zip(list,list*2))\n    \ndef get_Dict(dict1,key): \n    '''\n    Write a python function that takes a dictionary, keys and value as parameters and returns a new dictionary with keys as the keys and values as the values of the given dictionary.\n    '''\n    return {k:dict1[k] for k in dict1 if k==key}\n    \ndef get_Dict_2(dict1,key): \n    '''\n    Write a python function that takes a dictionary, keys and value as parameters and returns a new dictionary with keys as the keys and values as the values of the given dictionary.\n    '''\n    return {k:dict1[k] for k in dict1}\n    \ndef get_Sub_Dict(dict1,key): \n    '''\n    Write a python function that takes a dictionary, keys and value as parameters and returns a new dictionary with keys as the keys and values as the values of the given dictionary except for the keys and value of the given key.\n    '''\n    return {k:dict1[k] for k in dict1 if k!=key}\n    \ndef get_Sub_Dict_2(dict1,key): \n    '''\n    Write a python function that takes a dictionary, keys and value as parameters and returns a new dictionary with keys as the keys and values as the values of the given dictionary except for the keys and value of the given key.\n    '''\n    return {k:dict1[k] for k in dict1}\n    \ndef to_Dict(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return dict(zip(list,list*2))\n    \ndef to_Dict_2(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:k*k for k in list}\n    \ndef to_Dict_3(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:v for k,v in zip(list,list)}\n    \ndef to_Dict_4(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.count(k) for k in list}\n    \ndef to_Dict_5(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.index(k) for k in list}\n    \ndef to_Dict_6(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.count(k) for k in list}\n    \ndef to_Dict_7(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.index(k) for k in list}\n    \ndef to_Dict_8(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:v for k,v in zip(list,list)}\n    \ndef to_Dict_9(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.index(k) for k in list}\n    \ndef to_Dict_10(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.count(k) for k in list}\n    \ndef to_Dict_11(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.index(k) for k in list}\n    \ndef to_Dict_12(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.count(k) for k in list}\n    \ndef to_Dict_13(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.index(k) for k in list}\n    \ndef to_Dict_14(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.count(k) for k in list}\n    \ndef to_Dict_15(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.index(k) for k in list}\n    \ndef to_Dict_16(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.count(k) for k in list}\n    \ndef to_Dict_17(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.index(k) for k in list}\n    \ndef to_Dict_18(list): \n    '''\n    Write a python function that takes a list and returns a dictionary with keys as the list elements and values as 1.\n    '''\n    return {k:list.count(k) for k in list}\n    \ndef to_Dict_19(list): \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_nums = []\n    \n    for i in range(n+1):\n        square_nums.append(i**2)\n    \n    return sum(square_nums)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i % 2 == 0:\n            s += i**2\n    return s\n    "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i <= n:\n        if i%2 == 0:\n            sum = sum + i**2\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    len_list = []\n    for i in list1:\n        len_list.append(len(i))\n    max_len = max(len_list)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for element in list1:\n        if len(element) > max_len:\n            max_len = len(element)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    max_length_list=[]\n    for i in range(0,len(list1)):\n        if len(list1[i])>max_length:\n            max_length=len(list1[i])\n            max_length_list.append(list1[i])\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max:\n            max = len(list1[i])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l=[]\n    for x in list1:\n        l.append(len(x))\n    print(max(l))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        max_list.append(len(list1[i]))\n    max_list.sort(reverse=True)\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    for i in list1:\n        print(i)\n        print('The length of the list is: ',len(i))\n    max_len = max(map(len, list1))\n    print('The maximum length in the list is: ',max_len)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1 or k==1:\n        return 1\n    if n==2 and k==2:\n        return 2\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = {}\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # We can take the obvious solution \n    # the total number of ways is the factorial(n) * k ^ 2\n    # since k ^ 2 is the number of ways of painting \n    # the adjacent posts to the same color \n    return int(factorial(n) / (factorial(k) ** 2))\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #brute force method\n    #start from n number of posts and paint n colors then we will try to paint n-1. we will paint n-1 in one color, next color will be colored\n    #further we will paint n-2,n-3,n-4,n-5 and so on till n-n. we will paint n-n colors so that n-n is -1\n    #so we can make this simple for n=4\n    #brute force method\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(k+1):\n        dp[0][i] = 1\n    for i in range(n+1):\n        for j in range(1,k+1):\n            if i == 0:\n                break\n            if i >= j:\n                dp[i][j] = dp[i][j-1]\n            else:\n                for k in range(i,0,-1):\n                    if j - k >= 0:\n                        dp[i][j] += dp[k][j-k]\n    return dp[n][k]\n    \nn = 7\nk = 3\nprint(count_no_of_ways(n, k)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return k\n    if k==1:\n        return 1\n    if k==2:\n        return 2\n    ways_to_recolor = count_no_of_ways(n-1, k)\n    # ways_to_recolor_with_fence_last_post = count_no_of_ways(n-1, k-1)\n    ways_to_recolor_with_fence_second_to_last_post = count_no_of_ways(n-2, k)\n    ways_to_recolor_with_fence_third_to_last_post = count_no_of_ways(n-3, k)\n    ways_to_recolor_with_fence_fourth_to_last_post = count_no_of_ways(n-4, k)\n    ways_to_recolor_with_fence_fifth_to_last_post = count_no_of_ways(n-5, k)\n    return ways_to_recolor+ways_to_recolor_with_fence_second_to_last_post+ways_to_recolor_with_fence_third_to_last_post+ways_to_recolor_with_fence_fourth_to_last_post+ways_to_recolor_with_fence_fifth_to_last_post\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # k = 2\n    # n = 3\n    # start_index = 0\n    # end_index = n-1\n    # result = 0\n    # for i in range(start_index, end_index+1):\n    #     result += binom(n, i)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= k: \n        return (n*(n-1))/2\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #print(list(range(1,n+1)))\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    ans = 0\n    for i in range(1,n+1):\n        ans += count_no_of_ways(i-1, k)\n    if k==2:\n        ans -= count_no_of_ways(n-1, 1)\n    ans += count_no_of_ways(n-1, 1)\n    return ans\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n//m) \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    div = n//m\n    return div\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounde"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #code here\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n // m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(\"numerator:\",n,\"\\n\",\"denominator:\",m)\n    quotient = n//m\n    return quotient\n    \ndef find1(n,m):\n    '''\n    Write a python function to find remainder of two numbers\n    '''\n    print(\"numerator:\",n,\"\\n\",\"denominator:\",m)\n    remainder = n%m\n    return remainder\n    \ndef find2(n,m):\n    '''\n    Write a python function to find GCD of two numbers\n    '''\n    print(\"numerator:\",n,\"\\n\",\"denominator:\",m)\n    gcd = gcd(n,m)\n    return gcd\n    \ndef gcd(a,b):\n    if (b == 0):\n        return a\n    else:\n        return gcd(b, a % b)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n=int(n)\n    m=int(m)\n    return n//m\n    \ndef is_prime(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    num=int(num)\n    i=2\n    while(i<num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef exp_pow(n,x):\n    '''\n    Write a python function to calculate x to the power of n.\n    '''\n    n=int(n)\n    x=int(x)\n    i=1\n    while(i<=x):\n        n=n*n\n        i=i+1\n    return n\n    \ndef print_line(n):\n    '''\n    Write a python function to print a line of n number of stars.\n    '''\n    n=int(n)\n    i=0\n    while(i<n):\n        i=i+1\n        print(\"*\",end=\" \")\n        \ndef main():\n    '''\n    Main function to run.\n    '''\n    num=int(input())\n    i=1\n    while(i<=num):\n        print_line(i)\n        i=i+1\n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    res = n//m\n    return res\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2 -2*w*h*math.cos(math.pi/4))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2 - 2*w*h*math.cos(math.pi/2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2-2*w*h\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2 - w*h*math.cos(math.radians(120))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/(math.sqrt(w**2+h**2))\ndef volume_of_triangle(w,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (w*h)/3\ndef surface_area_of_triangle(w,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return 2*(w*h)/3\ndef surface_area_of_square(w,h):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return w*h\ndef surface_area_of_rectangle(w,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return w*h\ndef perimeter_of_square(w,h):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 2*(w+h)\ndef perimeter_of_rectangle(w,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(w+h)\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\ndef circumference_of_square(w):\n    '''\n    Write a function to find the circumference of a square.\n    '''\n    return 4*w\ndef circumference_of_rectangle(w,h):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    return 2*w+2*h\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r*r\ndef area_of_square(w):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return w*w\ndef area_of_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef area_of_circumference(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 2*math.pi*r*r\ndef area_of_circle_with_radius(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r*r\ndef area_of_square_with_side(w):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return w*w\ndef area_of_rectangle_with_height(h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*h\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r**2*h\ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14159265358979323846 *r**2*h\ndef volume_of_cuboid(w,h,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cone_with_height(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**2*h\ndef volume_of_cone_with_radius_and_height(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\ndef volume_of_triangle_with_sides(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    p = (a+b+c)/2\n    return (p*(p-a)*(p-b)*(p-c))**0.5\ndef circumference_of_triangle(a,b,c):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    s = (a+b+c)/2\n    return s*3\ndef circumference_of_triangle_with_sides(a,b,c):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    s = (a+b+c)/2\n    return s*math.sqrt(s)\ndef area_of_triangle_with_sides(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef area_of_triangle_with_sides(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\ndef area_of_circle_with_radius(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r*r\ndef area_of_square_with_side(w):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return w*w\ndef area_of_rectangle_with_height(h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return h*h\ndef volume_of_cuboid_with_width(w,h,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cuboid_with_height(h,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return h*d\ndef volume_of_cuboid_with_depth(d,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cuboid_with_width_and_height(w,h,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cuboid_with_width_and_depth(w,d,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cuboid_with_depth_and_height(d,h,w):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cuboid_with_depth_and_width(d,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cuboid_with_depth_and_width_and_height(d,w,h,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cuboid_with_depth_and_height_and_width(d,h,w,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cuboid_with_depth_and_width_and_height_and_width(d,w,h,w,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\ndef volume_of_cuboid_with_depth_and_width_and_height_and_width_and_height(d,w,h,w,h,d):\n    '''"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w * h / 2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s\ndef main():\n    '''\n    Write a function to print the corresponding perimeter of a right angled triangle.\n    '''\n    perimeter = otherside_rightangle(20,20)\n    print(perimeter)\n    \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(h**2 + w**2)\n    c = math.sqrt(w**2 - h**2)\n    return s, c\n    \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    assert w > 0, \"Width must be > 0\"\n    assert h > 0, \"Height must be > 0\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_number = max(listval)\n    return max_number\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for i in listval:\n        if max_num is None:\n            max_num = i\n        else:\n            if i > max_num:\n                max_num = i\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    x = 0\n    for i in listval:\n        if i > x:\n            x = i\n    return x\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for i in listval:\n        if maxval < i:\n            maxval = i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for i in listval:\n        if max_value == None:\n            max_value = i\n        elif i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxnum = 0\n    for i in range(0,len(listval)):\n        if listval[i] > maxnum:\n            maxnum = listval[i]\n    return maxnum\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    temp_min = listval[0]\n    for i in listval:\n        if temp_min > i:\n            temp_min = i\n    return temp_min\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # new_max = None\n    # for i in listval:\n    #     if new_max is None or new_max < i:\n    #         new_max = i\n    # return new_max\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = set()\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    divisor = 1\n    total_div = 0\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1,number+1):\n            if number % i == 0:\n                sum += i\n        return sum\n    \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, number + 1) if number % i == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(range(1,number+1))\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_divisors = 0\n    i = 1\n    while i <= number:\n        if number % i == 0:\n            sum_of_divisors += i\n        i += 1\n    return sum_of_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum = sum + i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 1\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Code here\n    n = len(arr)\n    if n < 2:\n        return 0\n    mid = n // 2\n    l = arr[:mid]\n    r = arr[mid:]\n    \n    def sort(arr):\n        if len(arr) <= 1:\n            return\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        sort(L)\n        sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        \n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        \n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    sort(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > i:\n            count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # code here\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count = count + 1\n    print(count)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    inv_count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Number of inversions is equal to half of the length of the array\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    length = len(arr) \n    if length == 0 or length == 1: \n        return 0\n    else: \n        return (get_inv_count_rec(arr, 0, length-1) + \n                get_inv_count_rec(arr, 1, length-1)) \n        \ndef get_inv_count_rec(arr, left_idx, right_idx): \n    '''\n    Recursive function to get the number of inversions \n    in an array. \n    '''\n    if left_idx == right_idx: \n        return 0\n    if arr[left_idx] <= arr[right_idx]: \n        return get_inv_count_rec(arr, left_idx+1, right_idx) \n    else: \n        temp = right_idx \n        for i in range(left_idx, right_idx): \n            if arr[i] > arr[temp]: \n                temp = i \n        arr[left_idx], arr[temp] = arr[temp], arr[left_idx] \n        return 1 + get_inv_count_rec(arr, left_idx, right_idx-1) \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    i, j = 0, n - 1\n    count = 0\n    while i < j:\n        if arr[i] > arr[j]:\n            count += (j - i)\n            j -= 1\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2: \n        return 0\n    if len(arr) == 2: \n        return 0 if arr[0] <= arr[1] else 1\n    count = 0\n    \n    i = 1\n    while i < len(arr): \n        j = i \n        while j >= 1 and arr[i] >= arr[j-1]: \n            j -= 1\n        if j > i: \n            count += 1 + get_Inv_Count(arr[i+1:j]) \n        else: \n            count += 1\n        i += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return 0\n    \n    \n    def merge(arr,l,m,r):\n        n1=m-l+1\n        n2=r-m\n        L=[0]*(n1)\n        R=[0]*(n2)\n        for i in range(0,n1):\n            L[i]=arr[l+i]\n        for j in range(0,n2):\n            R[j]=arr[m+1+j]\n        i=0\n        j=0\n        k=l\n        count=0\n        while i<n1 and j<n2:\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n                count+=n1-i\n            k+=1\n        while i<n1:\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<n2:\n            arr[k]=R[j]\n            j+=1\n            k+=1\n        return count\n            \n    \n    def get_count(arr,l,r):\n        if l==r:\n            return 0\n        m=(l+r)//2\n        count=get_count(arr,l,m)+get_count(arr,m+1,r)\n        count+=merge(arr,l,m,r)\n        return count\n        \n    return get_count(arr,0,len(arr)-1)\n        "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1: \n        return 0\n    else: \n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        left_count = get_Inv_Count(left)\n        right_count = get_Inv_Count(right)\n        i,j,k = 0,0,0\n        inv_count = 0\n        while(i<len(left) and j<len(right)): \n            if left[i]<right[j]: \n                arr[k] = left[i] \n                i+=1\n                k+=1\n            else: \n                arr[k] = right[j] \n                j+=1\n                k+=1\n                inv_count += len(left)-i \n        while(i<len(left)): \n            arr[k] = left[i] \n            i+=1\n            k+=1\n        while(j<len(right)): \n            arr[k] = right[j] \n            j+=1\n            k+=1\n        return left_count+right_count+inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if(len(arr) < 2):\n        return 0\n    for i in range(1,len(arr)):\n        if(arr[i] < arr[i-1]):\n            return (1 + get_Inv_Count(arr[:i-1] + arr[i:]))\n    return 0\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    x = []\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            x.extend(flatten_list(list1[i]))\n        else:\n            x.append(list1[i])\n    return x\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == list:\n            new_list.extend(flatten_list(i))\n        else:\n            new_list.append(i)\n    return new_list\n    \n    \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return list1\n    else:\n        return sum(flatten_list(i) for i in list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list2.append(list1[i][j])\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for item in list1:\n        if isinstance(item,list):\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for sub_list in list1:\n        if type(sub_list) is list:\n            for item in flatten_list(sub_list):\n                new_list.append(item)\n        else:\n            new_list.append(sub_list)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(chain(*list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for element in list1:\n        if type(element) is list:\n            new_list += flatten_list(element)\n        else:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for x in list1:\n        if type(x) == list:\n            new_list += flatten_list(x)\n        else:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1,list) is False:\n        return(list1)\n    else:\n        flat_list = []\n        for x in list1:\n            if isinstance(x,list) is True:\n                flat_list.extend(flatten_list(x))\n            else:\n                flat_list.append(x)\n        return(flat_list)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    for i in range(len(stdata)):\n        if stdata[i][1] > max_val:\n            max_val = stdata[i][1]\n    return max_val\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for t in stdata:\n        d[t[0]] += t[1]\n    return d[max(d, key=d.get)]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to hold each max aggregate\n    aggregate_dict = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: 0)))\n    for i in stdata:\n        # get each tuple\n        tuple_i = i[0]\n        # create a new tuple\n        new_tuple = (tuple_i[0], tuple_i[1], tuple_i[2], tuple_i[3], tuple_i[4])\n        # get each key\n        key_i = tuple_i[0]\n        # get each value\n        value_i = tuple_i[1]\n        # get each subject\n        sub_i = tuple_i[2]\n        # get each preference\n        pref_i = tuple_i[3]\n        # get each education\n        edu_i = tuple_i[4]\n        # get the subject_code\n        sub_code_i = tuple_i[3]\n        # get the preference_code\n        pref_code_i = tuple_i[4]\n        # get the education_code\n        edu_code_i = tuple_i[4]\n        # get the aggregate value\n        aggregate_value_i = tuple_i[5]\n        # iterate over each key in the dict\n        for key_j in aggregate_dict:\n            # get each key in the dict\n            key_j = key_j[0]\n            # get each value in the dict\n            value_j = aggregate_dict[key_j]\n            # get each subject in the dict\n            sub_j = aggregate_dict[key_j][sub_code_i]\n            # get each preference in the dict\n            pref_j = aggregate_dict[key_j][pref_code_i]\n            # get each education in the dict\n            edu_j = aggregate_dict[key_j][edu_code_i]\n            # add the new tuple to the corresponding key\n            aggregate_dict[key_j][sub_code_i][sub_j] += aggregate_value_i\n            aggregate_dict[key_j][pref_code_i][pref_j] += aggregate_value_i\n            aggregate_dict[key_j][edu_code_i][edu_j] += aggregate_value_i\n            # add the aggregate value\n            aggregate_dict[key_j][sub_code_i][sub_j] += value_i\n            aggregate_dict[key_j][pref_code_i][pref_j] += value_i\n            aggregate_dict[key_j][edu_code_i][edu_j] += value_i\n    # iterate over each key in the dict\n    for key_k in aggregate_dict:\n        # get each key in the dict\n        key_k = key_k[0]\n        # get each value in the dict\n        value_k = aggregate_dict[key_k]\n        # create a list\n        value_list = []\n        # iterate over each subject in the dict\n        for sub_l in value_k:\n            # get each subject in the dict\n            sub_l = value_k[sub_l]\n            # get each preference in the dict\n            pref_l = value_k[pref_l]\n            # get each education in the dict\n            edu_l = value_k[edu_l]\n            # add each subject's aggregate value to the list\n            value_list.append(sum(sub_l.values()))\n            value_list.append(sum(pref_l.values()))\n            value_list.append(sum(edu_l.values()))\n        # add the maximum aggregate to the dict\n        aggregate_dict[key_k] = max(value_list)\n    # iterate over each key in the dict\n    for key_k in aggregate_dict:\n        # get each key in the dict\n        key_k = key_k[0]\n        # get each value in the dict\n        value_k = aggregate_dict[key_k]\n        # get the list\n        value_list = []\n        # iterate over each subject in the dict\n        for sub_l in value_k:\n            # get each subject in the dict\n            sub_l = value_k[sub_l]\n            # get each preference in the dict\n            pref_l = value_k[pref_l]\n            # get each education in the dict\n            edu_l = value_k[edu_l]\n            # add each subject's aggregate value to the list\n            value_list.append(sum(sub_l.values()))\n            value_list.append(sum(pref_l.values()))\n            value_list.append(sum(edu_l.values()))\n        # get the key with the maximum aggregate\n        key_k = max(value_list)\n        # get the subject code\n        sub_code_k = key_k[0]\n        # get the preference code\n        pref_code_k = key_k[1]\n        # get the education code\n        edu_code_k = key_k[2]\n        # get the aggregate value\n        aggregate_value_k = key_k[3]\n        # iterate over each subject in the dict\n        for sub_l in value_k:\n            # get each subject in the dict\n            sub_l = value_k[sub_l]\n            # get each preference in the dict\n            pref_l = value_k[pref_l]\n            # get each education in the dict\n            edu_l = value_k[edu_l]\n            # add the aggregate value\n            aggregate_dict[key_k][sub_code_k][sub_l] += aggregate_value_k\n            aggregate_dict[key_k][pref_code_k][pref_l] += aggregate_value_k\n            aggregate_dict[key_k][edu_code_k][edu_l] += aggregate_value_k\n            # add the aggregate value\n            aggregate_dict[key_k][sub_code_k][sub_l] += value_k[sub_l]\n            aggregate_dict[key_k][pref_code_k][pref_l] += value_k[pref_l]\n            aggregate_dict[key_k][edu_code_k][edu_l] += value_k[edu_l]\n    # return the aggregated dictionary\n    return aggregate_dict\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sum_ = defaultdict(int)\n    max_ = defaultdict(int)\n    for x,y in stdata:\n        sum_[x] += y\n    for x,y in sum_.items():\n        max_[x] = max(max_[x],y)\n    max_ = max(max_.items(), key = lambda x:x[1])\n    return max_[0], max_[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    max_aggregate = 0\n    for elem in stdata:\n        max_aggregate_list.append(elem[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for x, y in stdata:\n        d[x].append(y)\n    \n    aggregate = []\n    for i in sorted(d):\n        aggregate.append(sum(d[i]))\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    sum=0\n    max=0\n    while i<len(stdata):\n        sum=sum+stdata[i][1]\n        i+=1\n    max=sum\n    return max\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    for i in stdata:\n        if i[0] > max(i[1], i[2]):\n            max_aggregate_value = i[0]\n        else:\n            max_aggregate_value = max(i[1], i[2])\n    return max_aggregate_value\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = None\n    for tup in stdata:\n        current_sum = sum(tup)\n        if max_sum == None or current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dct = defaultdict(int)\n    for i in stdata:\n        dct[i[0]] += i[1]\n    dct = {key: value for key, value in sorted(dct.items(), key=lambda x: x[1])}\n    return dct\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary(n):\n        '''\n        Count all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        i = 1\n        ans = 0\n        while i <= 2 ** (n):\n            if n % i == 0:\n                ans += count_binary_seq(n//i)\n            i += 1\n        return ans\n    return count_binary(n) - count_binary(n-1)\n    "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def helper(n):\n        count = 0\n        for i in range(0,1<<n):\n            temp = bin(i)[2:]\n            if len(temp)<n:\n                temp = temp.zfill(n)\n            else:\n                continue\n            if temp[:n]==temp[n:2*n]:\n                count += 1\n        return count\n    return helper(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_sum_seq(n): \n        '''\n        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        if n == 1:\n            return 2\n        elif n == 2:\n            return 4\n        elif n == 3:\n            return 7\n        elif n == 4:\n            return 13\n        elif n == 5:\n            return 20\n        elif n == 6:\n            return 34\n        elif n == 7:\n            return 55\n        elif n == 8:\n            return 89\n        else:\n            return (2**n)*count_sum_seq(n-1)\n    return count_sum_seq(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    return (count_binary_seq(n-1) + count_binary_seq(n-2))\n    \ndef count_binary_seq_dp(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    dp = [0 for i in range(n+1)]\n    dp[1] = 1\n    dp[2] = 2\n    \n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    return dp[n]\n    \ndef count_binary_seq_dp2(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    dp = [0 for i in range(n+1)]\n    dp[1] = 1\n    dp[2] = 2\n    \n    for i in range(3, n+1):\n        for j in range(1, 3):\n            if dp[i] == 0:\n                break\n            dp[i] = dp[i] + dp[i-j]\n    \n    return dp[n]\n    \n    \n    \nif __name__ == \"__main__\":\n    n = 5\n    print(count_binary_seq(n))\n    print(count_binary_seq_dp(n))\n    print(count_binary_seq_dp2(n))"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Returns count of all binary sequences of length 2n\n    def count_all_seq(n):\n        \n        # Integer values of length 2n\n        seq = range(1<<(2*n),1<<(2*n+1))\n        \n        # Returns the sum of first n bits\n        # Sum of last n bits\n        # Most significant bit to least significant bit\n        seq = [sum(seq[i:i+n]) for i in range(len(seq)-n+1)]\n        \n        # Returns the count of all sequences\n        return seq\n    \n    # Returns the count of all binary sequences of length 2n\n    return len([x for x in count_all_seq(n) if x==(1<<(2*n))])\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total_cnt = 0\n    for i in range(1 << 2 * n):\n        sum_first_n_bits = sum_of_n_bits(i, n)\n        sum_last_n_bits = sum_of_n_bits(~i, n)\n        if sum_first_n_bits == sum_last_n_bits:\n            total_cnt += 1\n    return total_cnt\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_1 = 0\n    sum_2 = 0\n    for i in range(1, n + 1):\n        x = (2**i)-1\n        sum_1 += x\n        sum_2 += x\n    return sum_2 - sum_1\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(n-1)+2**(n-2)-1\n    \nif __name__ == \"__main__\":\n    print(count_binary_seq(6))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Solution\n    # O(n) time | O(n) space\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n):\n        dp = [[0 for i in range(2)] for j in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(2):\n                dp[i][j] = dp[i - 1][0] * 2 + dp[i - 1][1]\n        return dp[n][0]\n    return count(n)\nprint(count_binary_seq(3))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    def check_dict(d):\n        if len(d) == 0:\n            return 0\n        else:\n            return 1 + max([check_dict(v) for v in d.values()])\n    \n    return check_dict(d)\n    \n    \ndef is_circular(d):\n    '''\n    Write a function to check if the given dictionary is circular or not.\n    '''\n    \n    if d == {}:\n        return False\n    if d in d.values():\n        return True\n    else:\n        d_keys = []\n        for k in d.keys():\n            d_keys.append(k)\n            if d[k] in d.keys():\n                return True\n            else:\n                d_keys.remove(k)\n    \n    \ndef check_order(l):\n    '''\n    Write a function to check if the given list is in lexicographical order or not.\n    '''\n    \n    if l == []:\n        return False\n    else:\n        temp_list = l.copy()\n        temp_list.sort()\n        return temp_list == l\n        \n    \ndef part_one():\n    '''\n    Write a function to compute the number of ways to traverse a given maze,\n    assuming that you can never visit a wall.\n    '''\n    \n    def is_visited(grid, x, y):\n        return (x, y) in grid.keys()\n        \n    def in_bounds(grid, x, y):\n        return x >= 0 and x < len(grid) and y >= 0 and y < len(grid[0])\n    \n    def update_visited(grid, x, y, visited):\n        if is_visited(grid, x, y):\n            return\n        grid[x][y] = 'x'\n        visited.add((x, y))\n        \n    def get_neighbors(grid, x, y, visited):\n        neighbors = []\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            if in_bounds(grid, x + dx, y + dy) and (x + dx, y + dy) not in visited:\n                neighbors.append((x + dx, y + dy))\n        \n        return neighbors\n    \n    \n    grid = {(0, 0): 0}\n    visited = set()\n    \n    while not all([is_visited(grid, x, y) for x, y in grid.keys()]):\n        for x, y in grid.keys():\n            update_visited(grid, x, y, visited)\n            for neighbor in get_neighbors(grid, x, y, visited):\n                update_visited(grid, neighbor[0], neighbor[1], visited)\n    \n    \n    \n    \ndef part_two():\n    '''\n    Write a function to compute the number of ways to traverse a given maze,\n    assuming that you can never visit a wall.\n    '''\n    \n    def is_visited(grid, x, y):\n        return (x, y) in grid.keys()\n        \n    def in_bounds(grid, x, y):\n        return x >= 0 and x < len(grid) and y >= 0 and y < len(grid[0])\n    \n    def update_visited(grid, x, y, visited):\n        if is_visited(grid, x, y):\n            return\n        grid[x][y] = 'x'\n        visited.add((x, y))\n        \n    def get_neighbors(grid, x, y, visited):\n        neighbors = []\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            if in_bounds(grid, x + dx, y + dy) and (x + dx, y + dy) not in visited:\n                neighbors.append((x + dx, y + dy))\n        \n        return neighbors\n    \n    \n    grid = {(0, 0): 0}\n    visited = set()\n    \n    while not all([is_visited(grid, x, y) for x, y in grid.keys()]):\n        for x, y in grid.keys():\n            update_visited(grid, x, y, visited)\n            for neighbor in get_neighbors(grid, x, y, visited):\n                update_visited(grid, neighbor[0], neighbor[1], visited)\n    \n    return len(visited)\n    \n    \n    \n    \ndef part_three():\n    '''\n    Write a function to compute the number of ways to traverse a given maze,\n    assuming that you can never visit a wall.\n    '''\n    \n    def is_visited(grid, x, y):\n        return (x, y) in grid.keys()\n        \n    def in_bounds(grid, x, y):\n        return x >= 0 and x < len(grid) and y >= 0 and y < len(grid[0])\n    \n    def update_visited(grid, x, y, visited):\n        if is_visited(grid, x, y):\n            return\n        grid[x][y] = 'x'\n        visited.add((x, y))\n        \n    def get_neighbors(grid, x, y, visited):\n        neighbors = []\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            if in_bounds(grid, x + dx, y + dy) and (x + dx, y + dy) not in visited:\n                neighbors.append((x + dx, y + dy))\n        \n        return neighbors\n    \n    \n    grid = {(0, 0): 0}\n    visited = set()\n    \n    while not all([is_visited(grid, x, y) for x, y in grid.keys()]):\n        for x, y in grid.keys():\n            update_visited(grid, x, y, visited)\n            for neighbor in get_neighbors(grid, x, y, visited):\n                update_visited(grid, neighbor[0], neighbor[1], visited)\n    \n    return len(visited)\n    \n    \n    \n    \ndef part_four():\n    '''\n    Write a function to compute the number of ways to traverse a given maze,\n    assuming that you can never visit a wall.\n    '''\n    \n    def is_visited(grid, x, y):\n        return (x, y) in grid.keys()\n        \n    def in_bounds(grid, x, y):\n        return x >= 0 and x < len(grid) and y >= 0 and y < len(grid[0])\n    \n    def update_visited(grid, x, y, visited):\n        if is_visited(grid, x, y):\n            return\n        grid[x][y] = 'x'\n        visited.add((x, y))\n        \n    def get_neighbors(grid, x, y, visited):\n        neighbors = []\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            if in_bounds(grid, x + dx, y + dy) and (x + dx, y + dy) not in visited:\n                neighbors.append((x + dx, y + dy))\n        \n        return neighbors\n    \n    \n    grid = {(0, 0): 0}\n    visited = set()\n    \n    while not all([is_visited(grid, x, y) for x, y in grid.keys()]):\n        for x, y in grid.keys():\n            update_visited(grid, x, y, visited)\n            for neighbor in get_neighbors(grid, x, y, visited):\n                update_visited(grid, neighbor[0], neighbor[1], visited)\n    \n    return len(visited)\n    \n    \n    \n    \ndef part_five():\n    '''\n    Write a function to compute the number of ways to traverse a given maze,\n    assuming that you can never visit a wall.\n    '''\n    \n    def is_visited(grid, x, y):\n        return (x, y) in grid.keys()\n        \n    def in_bounds(grid, x, y):\n        return x >= 0 and x < len(gri"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    res = 0\n    for item in d:\n        if isinstance(d[item], dict):\n            res += 1\n    return res\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, val in d.items():\n        depth = dict_depth(val) if isinstance(val, dict) else 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if type(d) == type({}):\n        for key in d.keys():\n            if type(d[key]) == type({}):\n                depth = max(depth, dict_depth(d[key]))\n    return depth\n    \nprint(dict_depth({\"a\":{\"b\":{\"c\":1}}}))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    count = 0\n    for k in d:\n        if isinstance(d[k], dict):\n            count += 1\n            count += dict_depth(d[k])\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([depth(d[i]) for i in d]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if type(d) is not dict:\n        return depth\n    for k in d.keys():\n        if type(d[k]) is dict:\n            depth += 1\n        else:\n            return depth\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def _dict_depth(d, depth):\n        if len(d) == 0:\n            return depth\n        else:\n            keys = d.keys()\n            keys.sort()\n            for key in keys:\n                sub_depth = _dict_depth(d[key], depth + 1)\n                if sub_depth == None:\n                    return None\n                else:\n                    return sub_depth\n    return _dict_depth(d, 1)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([int(len(d.keys()) - len(set(d.keys()))), 0])\n    # Or\n    # return 1 + max([dict_depth(i) for i in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print('Element at index'+ str(index) +'is:'+ str(arr[index]) +'in'+ str(ranges[index]) +'range(s) rotated'+ str(rotations[index]) +'times')\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if (arr[index] == arr[ranges[i][0]]) :\n            return ranges[i][1]\n    if (arr[index] == arr[ranges[0][0]]) :\n        return ranges[0][1]\n    for i in range(len(rotations)):\n        if (arr[index] == arr[rotations[i][0]]) :\n            index = rotations[i][1]\n            return find_Element(arr,ranges,rotations,index)\n    else :\n        return -1\ndef test_function(test_case):\n    arr = test_case[0]\n    index = test_case[1]\n    solution = test_case[2]\n    output = find_Element(arr,solution)\n    if output == index:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index) :\n        arr.append(arr.pop(0))\n    arr.reverse()\n    return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        arr[index] = arr[index] ^ ranges\n        index = (index + 1) % len(arr)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print('ranges',ranges)\n    print('rotations',rotations)\n    for i in range(len(ranges)):\n        if ranges[i] == index :\n            print('found',index)\n            return i\n    else :\n        if rotations[index] == -1 :\n            return -1\n        rotations[index] = -1\n        print('rotations[index]',rotations[index])\n        return find_Element(arr,ranges,rotations,(index+rotations[index]))\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # arr = [5,1,9,7,2,8,3,4]\n    # ranges = [(1,3), (1,3), (0,4), (0,4)]\n    # rotations = [1,2,2,2]\n    # index = 4\n    \n    # print(find_Element(arr,ranges,rotations,index))\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    max_index = len(arr) - 1\n    result = -1\n    for i in range(index,max_index+1) :\n        if i + ranges < max_index and i + ranges >= 0 :\n            if arr[i+rotations] > arr[i] :\n                result = arr[i+rotations]\n                break\n            elif arr[i+rotations] < arr[i] :\n                result = arr[i]\n                break\n    return result\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        if arr[index+i] == 0 :\n            return arr[index+i]\n        else :\n            arr[index+i] = arr[index+i] % 10 * rotations\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    x=ranges[index][0]\n    y=ranges[index][1]\n    z=ranges[index][2]\n    for i in range(rotations) :\n        x=x+x\n        y=y-y\n        z=z+z\n    return x>=arr[index][0] and x<arr[index][1] and y>=arr[index][2] and y<arr[index][3] and z>=arr[index][4] and z<arr[index][5]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        index = (index + r) % ranges\n    return arr[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p=[]\n    for i in words:\n        if i[0]=='p':\n            p.append(i)\n    return(p)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i].startswith('p'):\n            return words[i], words[i+1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words.pop(words.index('p')), words.pop(words.index('p'))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for w in words:\n        if w.startswith(\"p\"):\n            return w, words.pop(words.index(w))\ndef pair_of_same_letter(words):\n    '''\n    Write a function that takes a list of words and returns a list of pairs of words from the list of words\n    that start with the same letter.\n    '''\n    letter_pairs = []\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if words[i][0] == words[j][0]:\n                letter_pairs.append((words[i], words[j]))\n    return letter_pairs\ndef no_endswith(words):\n    '''\n    Write a function that takes a list of words and returns a list of words that do not end with 'e'.\n    '''\n    no_endswith = []\n    for w in words:\n        if not w.endswith(\"e\"):\n            no_endswith.append(w)\n    return no_endswith\ndef double_letter(words):\n    '''\n    Write a function that takes a list of words and returns a list of words that have at least one double letter.\n    '''\n    double_letter = []\n    for w in words:\n        if re.search(r'([a-z])\\1', w):\n            double_letter.append(w)\n    return double_letter\ndef only_letters(words):\n    '''\n    Write a function that takes a list of words and returns a list of words that only contain letters.\n    '''\n    only_letters = []\n    for w in words:\n        if re.search(r'^([a-z])+$', w):\n            only_letters.append(w)\n    return only_letters\ndef is_vowel(word):\n    '''\n    Write a function that takes a word as input and returns True if the word is a vowel and False if it is not.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    if word.lower() in vowels:\n        return True\n    return False\ndef remove_duplicates(words):\n    '''\n    Write a function that takes a list of words and returns a list of words without duplicates.\n    '''\n    remove_duplicates = []\n    for w in words:\n        if w not in remove_duplicates:\n            remove_duplicates.append(w)\n    return remove_duplicates\ndef flatten(list_of_lists):\n    '''\n    Write a function that takes a list of lists and returns a single list with all the elements from each sublist combined into a single list.\n    '''\n    flattened_list = []\n    for i in list_of_lists:\n        for j in i:\n            flattened_list.append(j)\n    return flattened_list\ndef triangle_number(number):\n    '''\n    Write a function that takes a number and returns its triangle number.\n    '''\n    triangle_number = 0\n    for i in range(1, number + 1):\n        triangle_number += i\n    return triangle_number\ndef two_numbers(x, y):\n    '''\n    Write a function that takes two numbers as input and returns True if they are equal, False if they are not.\n    '''\n    if x == y:\n        return True\n    else:\n        return False\ndef largest_number(list_of_numbers):\n    '''\n    Write a function that takes a list of numbers as input and returns the largest number.\n    '''\n    largest_number = 0\n    for i in list_of_numbers:\n        if i > largest_number:\n            largest_number = i\n    return largest_number\ndef are_vowels(words):\n    '''\n    Write a function that takes a word and returns True if the word contains a vowel and False if it does not.\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in words:\n        if i.lower() in vowels:\n            return True\n    return False\ndef reverse(words):\n    '''\n    Write a function that takes a list of words as input and returns the words in the list in reverse order.\n    '''\n    rev_list = []\n    for i in range(len(words) - 1, -1, -1):\n        rev_list.append(words[i])\n    return rev_list\ndef game(words):\n    '''\n    Write a function that takes a list of words as input and returns True if the words start with an 'a' or an 'e'.\n    '''\n    game_word = \"\"\n    for i in words:\n        if i.lower().startswith(\"a\") or i.lower().startswith(\"e\"):\n            game_word = i\n    return game_word\ndef word_sort(words):\n    '''\n    Write a function that takes a list of words as input and returns a sorted list of words in alphabetical order.\n    '''\n    words.sort()\n    return words\ndef solve(n):\n    '''\n    Write a function that takes a number as input and returns True if it is a perfect square, False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    return True\ndef square_roots(a, b, c):\n    '''\n    Write a function that takes three numbers as input and returns a tuple containing the two square roots of the input numbers.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if a == 0:\n        raise ValueError\n    if b == 0:\n        raise ValueError\n    if c == 0:\n        raise ValueError\n    return (b ** 0.5, c ** 0.5)\ndef convert_to_base_10(n):\n    '''\n    Write a function that takes a number as input and returns it in its base 10 equivalent.\n    '''\n    convert_to_base_10 = 0\n    i = 0\n    while i < len(str(n)):\n        convert_to_base_10 += int(str(n)[i]) * pow(10, len(str(n)) - i - 1)\n        i += 1\n    return convert_to_base_10\ndef repeat_words(words):\n    '''\n    Write a function that takes a list of words and returns the number of words from the list that contain three or more occurrences of the letter 'e'.\n    '''\n    e_occurrence = 0\n    for w in words:\n        if re.search(r'e+', w):\n            e_occurrence += 1\n    return e_occurrence\ndef is_palindrome(words):\n    '''\n    Write a function that takes a list of words and returns True if they are a palindrome and False if they are not.\n    '''\n    new_words = []\n    for w in words:\n        new_words.append(w.lower())\n    words = new_words\n    n = len(words)\n    i = 0\n    j = n - 1\n    while i < n:\n        if words[i] == words[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef reverse_list(words):\n    '''\n    Write a function that takes a list of words as input and returns a new list that contains the words in reverse order.\n    '''\n    new_words = []\n    for w in words:\n        new_words.append(w[::-1])\n    return new_words\ndef multiply(x, y):\n    '''\n    Write a function that takes two numbers as input and returns their product.\n    '''\n    return x * y\ndef is_palindrome_with_space(words):\n    '''\n    Write a function that takes a string as input and returns True if the string is a palindrome and False if it is not.\n    '''\n    reverse_words = \"\"\n    for i in range(len(words) - 1, -1, -1):\n        reverse_words += words[i]\n    return words.lower() == reverse_words.lower()\ndef join(word"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith(\"p\"):\n            return word, words[words.index(word)+1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word_list=[]\n    for i in words:\n        if i[0]==\"p\":\n            word_list.append(i)\n    return word_list[0],word_list[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith('p'):\n            return i,i[1:]\ndef remove_numbers(numbers):\n    '''\n    Write a function to remove all the numbers from a string.\n    '''\n    new_string = re.sub('\\d+','',numbers)\n    return new_string\ndef swap_case(s):\n    '''\n    Write a Python function to swap lower case letters to upper case letters and vice versa.\n    '''\n    new_string = s.swapcase()\n    return new_string\ndef sort_characters(s):\n    '''\n    Write a function to sort all the characters of a string in alphabetical order.\n    '''\n    new_string = ''.join(sorted(s))\n    return new_string\ndef check_palindrome(s):\n    '''\n    Write a function that checks whether a passed string is a palindrome or not.\n    '''\n    reversed_string = s[::-1]\n    if s == reversed_string:\n        return True\n    else:\n        return False\ndef replace_spaces(s):\n    '''\n    Write a function to replace all spaces in a string with %20\n    '''\n    new_string = s.replace(\" \",\"%20\")\n    return new_string\ndef replace_spaces_with_plus(s):\n    '''\n    Write a function to replace all spaces in a string with %20\n    '''\n    new_string = s.replace(\" \",\"+\")\n    return new_string\ndef extract_ints(s):\n    '''\n    Write a function to extract all the integers from a given string.\n    '''\n    result = re.findall('\\d+',s)\n    return result\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n % i == 0:\n                return False\n        return True\ndef is_palindrome(s):\n    '''\n    Write a function to check whether a passed string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        first_half = s[:len(s)//2]\n        second_half = s[len(s)//2:]\n        if first_half == second_half[::-1]:\n            return True\n        else:\n            return False\ndef get_length(s):\n    '''\n    Write a function to get the length of a given string.\n    '''\n    return len(s)\ndef is_permutation(s1, s2):\n    '''\n    Write a function to check whether one string is a permutation of another.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_count = {}\n    s2_count = {}\n    for char in s1:\n        s1_count[char] = s1_count.get(char,0) + 1\n    for char in s2:\n        s2_count[char] = s2_count.get(char,0) + 1\n    if s1_count == s2_count:\n        return True\n    else:\n        return False\ndef is_rotation(s1, s2):\n    '''\n    Write a function to check whether one string is a rotation of another.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s2_copy = s2 + s2\n    if s1 == s2_copy:\n        return True\n    else:\n        return False\ndef is_palindrome_v2(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_palindrome_v3(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    return s == s[::-1]\ndef is_palindrome_v4(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_v5(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef common_words(s1, s2):\n    '''\n    Write a function to return a list of the most common words in the given strings.\n    '''\n    s1 = s1.split(\" \")\n    s2 = s2.split(\" \")\n    common = []\n    for i in s1:\n        if i in s2:\n            common.append(i)\n    return common\ndef palindrome_in_words(s):\n    '''\n    Write a function to convert a string to its acronym.\n    '''\n    s = s.replace(\" \",\"\")\n    s = s.replace(\",\",\"\")\n    s = s.replace(\".\",\"\")\n    s = s.replace(\";\",\"\")\n    s = s.replace(\":\",\"\")\n    s = s.replace(\"'\",\"\")\n    s = s.replace(\"-\",\"\")\n    s = s.replace(\"/\",\"\")\n    s = s.lower()\n    s = s.replace(\"i\",\"I\")\n    s = s.replace(\"o\",\"O\")\n    s = s.replace(\"a\",\"A\")\n    s = s.replace(\"e\",\"E\")\n    s = s.replace(\"u\",\"U\")\n    s = s.replace(\"y\",\"Y\")\n    s = s.replace(\" \",\"\")\n    return s\ndef palindrome_in_words_v2(s):\n    '''\n    Write a function to convert a string to its acronym.\n    '''\n    s = s.replace(\" \",\"\")\n    s = s.replace(\",\",\"\")\n    s = s.replace(\".\",\"\")\n    s = s.replace(\";\",\"\")\n    s = s.replace(\":\",\"\")\n    s = s.replace(\"'\",\"\")\n    s = s.replace(\"-\",\"\")\n    s = s.replace(\"/\",\"\")\n    s = s.lower()\n    s = s.replace(\"i\",\"I\")\n    s = s.replace(\"o\",\"O\")\n    s = s.replace(\"a\",\"A\")\n    s = s.replace(\"e\",\"E\")\n    s = s.replace(\"u\",\"U\")\n    s = s.replace(\"y\",\"Y\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\"  \",\"\")\n    return s\ndef palindrome_in_words_v3(s):\n    '''\n    Write a function to convert a string to its acronym.\n    '''\n    s = s.replace(\" \",\"\")\n    s = s.replace(\",\",\"\")\n    s = s.replace(\".\",\"\")\n    s = s.replace(\";\",\"\")\n    s = s.replace(\":\",\"\")\n    s = s.replace(\"'\",\"\")\n    s = s.replace(\"-\",\"\")\n    s = s.replace(\"/\",\"\")\n    s = s.lower()\n    s = s.replace(\"i\",\"I\")\n    s = s.replace(\"o\",\"O\")\n    s = s.replace(\"a\",\"A\")\n    s = s.replace(\"e\",\"E\")\n    s = s.replace(\"u\",\"U\")\n    s = s.replace(\"y\",\"Y\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words=words.split()\n    for i in range(len(words)):\n        if words[i][0]=='p':\n            return words[i-1],words[i]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i].startswith('p'):\n            return words[i], words[i+1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return 'p' + words[2] + words[3]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # create a two dimensional array for storing the maximum increasing subsequnce\n    # each element in the array is a tuple having two elements (sum, index)\n    max_increasing_subseq = [[(0, 0) for _ in range(n+1)] for _ in range(n+1)]\n    \n    # calculating the maximum sum, index for the first row\n    for i in range(1, n+1):\n        sum_index = 0\n        for j in range(i):\n            sum_index = max_increasing_subseq[i-1][j][0] + a[j]\n            if sum_index >= k:\n                break\n        max_increasing_subseq[i][i] = (sum_index, i)\n        \n    # calculating the maximum sum, index for the second row\n    for i in range(1, n):\n        sum_index = 0\n        for j in range(i, n):\n            sum_index = max_increasing_subseq[i-1][j][0] + a[j]\n            if sum_index >= k:\n                break\n        max_increasing_subseq[i][j] = (sum_index, j)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if i-1 is not in increasing sequence\n    if a[index] <= a[i-1]:\n        return max(max_sum_increasing_subseq(a, n, index-1, k),\n                                max_sum_increasing_subseq(a, n, i, k))\n    # if i is not in increasing sequence\n    if i == 0:\n        return max(max_sum_increasing_subseq(a, n, i, k), k)\n    return max(max_sum_increasing_subseq(a, n, index-1, k), \n                                max_sum_increasing_subseq(a, n, i, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    n = len(a)\n    dp = [[0 for i in range(n+1)] for j in range(n)]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0]*n\n    for i in range(0, n):\n        dp[i] = a[i]\n    #print(dp)\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    return dp[index-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = 1\n    while (i <= index):\n        if(a[i-1] <= k):\n            k = k - a[i-1]\n        i = i + 1\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n: return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if a[index] > k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    curr_sum = max_sum_increasing_subseq(a, n, index+1, k)\n    curr_sum = max(a[index] + max_sum_increasing_subseq(a, n, index+1, k-1), curr_sum)\n    return curr_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n-1:\n        return 0\n    \n    # Recursive call\n    if index > k and a[index] >= a[index-1]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1))\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return (0, 0)\n    if k == 1:\n        if index == 0:\n            return (0, 0)\n        else:\n            return (a[index - 1], a[index - 1])\n    else:\n        if index == n:\n            return (0, 0)\n        else:\n            a_1 = max_sum_increasing_subseq(a, n, index + 1, k - 1)\n            a_2 = max_sum_increasing_subseq(a, n, index + 1, k)\n            return (a_1[0] + a_2[0], a_1[1] + a_2[1])\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    max_sum = 0\n    for i in range(index, n):\n        new_sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i]\n        if new_sum > max_sum:\n            max_sum = new_sum\n    return max_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\ndef insert_colon(tuplex,m,n,colon):\n    '''\n    Write a function to insert a colon in a tuple.\n    '''\n    return tuplex[:m] + (colon,) + tuplex[m:n] + tuplex[n:]\ndef add_colon(tuplex,m,n,colon):\n    '''\n    Write a function to add a colon to a tuple.\n    '''\n    return tuplex[:m] + (colon,) + tuplex[m:n] + tuplex[n:]\ndef insert_colon_in_between(tuplex,m,n,colon):\n    '''\n    Write a function to insert a colon to a tuple.\n    '''\n    return tuplex[:m] + (colon,) + tuplex[m:n] + tuplex[n:]\ndef test_insert_colon():\n    assert(colon_tuplex((1,2,3),1,3)==(1,2,3,(1,2,3)))\n    assert(colon_tuplex((1,2,3),1,4)==(1,2,3,(1,2,3)))\n    assert(colon_tuplex((1,2,3),4,4)==(1,2,3,(1,2,3)))\n    assert(colon_tuplex((1,2,3),4,5)==(1,2,3,(1,2,3)))\n    assert(colon_tuplex((1,2,3),5,5)==(1,2,3,(1,2,3)))\ndef test_insert_colon_in_between():\n    assert(insert_colon((1,2,3),1,2,3)==(1,2,3,(3,2,3)))\n    assert(insert_colon((1,2,3),1,2,4)==(1,2,3,(4,2,3)))\n    assert(insert_colon((1,2,3),1,2,5)==(1,2,3,(5,2,3)))\n    assert(insert_colon((1,2,3),2,2,3)==(1,2,3,(3,2,3)))\n    assert(insert_colon((1,2,3),2,2,4)==(1,2,3,(4,2,3)))\n    assert(insert_colon((1,2,3),2,2,5)==(1,2,3,(5,2,3)))\ndef test_add_colon():\n    assert(add_colon((1,2,3),1,3,4)==(1,2,3,(4,2,3)))\n    assert(add_colon((1,2,3),1,3,5)==(1,2,3,(5,2,3)))\n    assert(add_colon((1,2,3),4,4,5)==(1,2,3,(5,2,3)))\n    assert(add_colon((1,2,3),4,5,5)==(1,2,3,(5,2,3)))\n    assert(add_colon((1,2,3),5,5,5)==(1,2,3,(5,2,3)))\ndef test_insert_colon_in_between():\n    assert(insert_colon_in_between((1,2,3),1,2,3)==(1,2,3,(3,2,3)))\n    assert(insert_colon_in_between((1,2,3),1,2,4)==(1,2,3,(4,2,3)))\n    assert(insert_colon_in_between((1,2,3),1,2,5)==(1,2,3,(5,2,3)))\n    assert(insert_colon_in_between((1,2,3),2,2,3)==(1,2,3,(3,2,3)))\n    assert(insert_colon_in_between((1,2,3),2,2,4)==(1,2,3,(4,2,3)))\n    assert(insert_colon_in_between((1,2,3),2,2,5)==(1,2,3,(5,2,3)))\ndef test_colon_in_between():\n    assert(colon_tuplex((1,2,3),1,3)==(1,2,3,(3,2,3)))\n    assert(colon_tuplex((1,2,3),1,3)==(1,2,3,(3,2,3)))\n    assert(colon_tuplex((1,2,3),4,4)==(1,2,3,(4,2,3)))\n    assert(colon_tuplex((1,2,3),4,5)==(1,2,3,(5,2,3)))\n    assert(colon_tuplex((1,2,3),5,5)==(1,2,3,(5,2,3)))\ndef test_colon_at_end():\n    assert(colon_tuplex((1,2,3),1,4)==(1,2,3,(3,2,3)))\n    assert(colon_tuplex((1,2,3),1,3)==(1,2,3,(3,2,3)))\n    assert(colon_tuplex((1,2,3),4,4)==(1,2,3,(4,2,3)))\n    assert(colon_tuplex((1,2,3),4,5)==(1,2,3,(5,2,3)))\n    assert(colon_tuplex((1,2,3),5,5)==(1,2,3,(5,2,3)))\ndef test_colon_at_start():\n    assert(colon_tuplex((1,2,3),0,3)==(1,2,3,(3,2,3)))\n    assert(colon_tuplex((1,2,3),0,2)==(1,2,3,(2,3,3)))\n    assert(colon_tuplex((1,2,3),3,3)==(1,2,3,(3,2,3)))\n    assert(colon_tuplex((1,2,3),3,4)==(1,2,3,(4,2,3)))\n    assert(colon_tuplex((1,2,3),5,5)==(1,2,3,(5,2,3)))\ndef test_insert_colon_at_start():\n    assert(insert_colon((1,2,3),0,3,3)==(1,2,3,(3,2,3)))\n    assert(insert_colon((1,2,3),0,3,4)==(1,2,3,(4,2,3)))\n    assert(insert_colon((1,2,3),0,3,5)==(1,2,3,(5,2,3)))\n    assert(insert_colon((1,2,3),4,4,3)==(1,2,3,(3,2,3)))\n    assert(insert_colon((1,2,3),4,3,4)==(1,2,3,(4,2,3)))\n    assert(insert_colon((1,2,3),4,3,5)==(1,2,3,(5,2,3)))\ndef test_insert_colon_at_end():\n    assert(insert_colon((1,2,3),1,4,3)==(1,2,3,(3,2,3)))\n    assert(insert_colon((1,2,3),1,3,4)==(1,2,3,(4,2,3)))\n    assert(insert_colon((1,2,3),4,4,3)==(1,2,3,(3,2"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[:m] + (0,) + tuplex[m+1:])\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    res = ''\n    for i in range(m):\n        for j in range(n):\n            res = res+'|'+tuplex[i][j]\n        res = res + '|'\n    return res\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2])\ndef cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3])\ndef m_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a m_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4])\ndef l_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a l_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5])\ndef b_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a b_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6])\ndef v_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a v_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7])\ndef h_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a h_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7],tuplex[m+8])\ndef p_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a p_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7],tuplex[m+8],tuplex[m+9])\ndef n_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a n_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7],tuplex[m+8],tuplex[m+9],tuplex[m+10])\ndef x_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a x_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7],tuplex[m+8],tuplex[m+9],tuplex[m+10],tuplex[m+11])\ndef y_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a y_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7],tuplex[m+8],tuplex[m+9],tuplex[m+10],tuplex[m+11],tuplex[m+12])\ndef z_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a z_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7],tuplex[m+8],tuplex[m+9],tuplex[m+10],tuplex[m+11],tuplex[m+12],tuplex[m+13])\ndef a_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an a_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7],tuplex[m+8],tuplex[m+9],tuplex[m+10],tuplex[m+11],tuplex[m+12],tuplex[m+13],tuplex[m+14])\ndef b_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a b_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7],tuplex[m+8],tuplex[m+9],tuplex[m+10],tuplex[m+11],tuplex[m+12],tuplex[m+13],tuplex[m+14],tuplex[m+15])\ndef c_cube_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a c_cube of a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    return (tuplex[m],tuplex[m+1],tuplex[m+2],tuplex[m+3],tuplex[m+4],tuplex[m+5],tuplex[m+6],tuplex[m+7],tuplex[m+8],tuplex[m+9],tuplex[m+10],tuplex[m+11],tuplex[m+12],tuplex[m+13],tuplex[m+14],tuplex[m+15],tuplex[m+16])\ndef d_cube_tuplex(tuplex,m,n):\n    '''\n    Write "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    res = []\n    for i in range(m):\n        for j in range(n):\n            res.append((tuplex[i],tuplex[j]))\n    return tuple(res)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    #print(tuplex,m,n)\n    for i in range(0,m):\n        colon.append(tuplex[i*n:(i+1)*n])\n    #print(colon)\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m],tuplex[n]\ndef print_square(matrix):\n    '''\n    Write a function to print a given 2D matrix.\n    '''\n    print(matrix[0])\n    print(matrix[1])\n    print(matrix[2])\n    print(matrix[3])\n    print(matrix[4])\n    print(matrix[5])\n    print(matrix[6])\n    print(matrix[7])\ndef print_matrix(matrix,m,n):\n    '''\n    Write a function to print a given 2D matrix.\n    '''\n    print(matrix[m])\n    print(matrix[m+1])\n    print(matrix[m+2])\n    print(matrix[m+3])\n    print(matrix[m+4])\n    print(matrix[m+5])\n    print(matrix[m+6])\n    print(matrix[m+7])\ndef print_matrix_diag(matrix,m,n):\n    '''\n    Write a function to print a given 2D matrix.\n    '''\n    print(matrix[m][m])\n    print(matrix[m+1][m+1])\n    print(matrix[m+2][m+2])\n    print(matrix[m+3][m+3])\n    print(matrix[m+4][m+4])\n    print(matrix[m+5][m+5])\n    print(matrix[m+6][m+6])\n    print(matrix[m+7][m+7])\ndef print_matrix_diag_reverse(matrix,m,n):\n    '''\n    Write a function to print a given 2D matrix.\n    '''\n    print(matrix[m][m])\n    print(matrix[m+1][m+1])\n    print(matrix[m+2][m+2])\n    print(matrix[m+3][m+3])\n    print(matrix[m+4][m+4])\n    print(matrix[m+5][m+5])\n    print(matrix[m+6][m+6])\n    print(matrix[m+7][m+7])\ndef print_matrix_diag_reverse_under(matrix,m,n):\n    '''\n    Write a function to print a given 2D matrix.\n    '''\n    print(matrix[m][m])\n    print(matrix[m+1][m+1])\n    print(matrix[m+2][m+2])\n    print(matrix[m+3][m+3])\n    print(matrix[m+4][m+4])\n    print(matrix[m+5][m+5])\n    print(matrix[m+6][m+6])\n    print(matrix[m+7][m+7])\n    print(matrix[m][m+1])\n    print(matrix[m+1][m+2])\n    print(matrix[m+2][m+3])\n    print(matrix[m+3][m+4])\n    print(matrix[m+4][m+5])\n    print(matrix[m+5][m+6])\n    print(matrix[m+6][m+7])\n    print(matrix[m][m+2])\n    print(matrix[m+1][m+3])\n    print(matrix[m+2][m+4])\n    print(matrix[m+3][m+5])\n    print(matrix[m+4][m+6])\n    print(matrix[m+5][m+7])\ndef print_matrix_diag_reverse_under_in_row(matrix,m,n):\n    '''\n    Write a function to print a given 2D matrix.\n    '''\n    print(matrix[m][m])\n    print(matrix[m+1][m+1])\n    print(matrix[m+2][m+2])\n    print(matrix[m+3][m+3])\n    print(matrix[m+4][m+4])\n    print(matrix[m+5][m+5])\n    print(matrix[m+6][m+6])\n    print(matrix[m+7][m+7])\n    print(matrix[m][m+1])\n    print(matrix[m+1][m+2])\n    print(matrix[m+2][m+3])\n    print(matrix[m+3][m+4])\n    print(matrix[m+4][m+5])\n    print(matrix[m+5][m+6])\n    print(matrix[m+6][m+7])\n    print(matrix[m][m+2])\n    print(matrix[m+1][m+3])\n    print(matrix[m+2][m+4])\n    print(matrix[m+3][m+5])\n    print(matrix[m+4][m+6])\n    print(matrix[m+5][m+7])\n    print(matrix[m][m+3])\n    print(matrix[m+1][m+4])\n    print(matrix[m+2][m+5])\n    print(matrix[m+3][m+6])\n    print(matrix[m+4][m+7])\ndef print_matrix_diag_reverse_under_in_row_in_col(matrix,m,n):\n    '''\n    Write a function to print a given 2D matrix.\n    '''\n    print(matrix[m][m])\n    print(matrix[m+1][m+1])\n    print(matrix[m+2][m+2])\n    print(matrix[m+3][m+3])\n    print(matrix[m+4][m+4])\n    print(matrix[m+5][m+5])\n    print(matrix[m+6][m+6])\n    print(matrix[m+7][m+7])\n    print(matrix[m][m+1])\n    print(matrix[m+1][m+2])\n    print(matrix[m+2][m+3])\n    print(matrix[m+3][m+4])\n    print(matrix[m+4][m+5])\n    print(matrix[m+5][m+6])\n    print(matrix[m+6][m+7])\n    print(matrix[m][m+2])\n    print(matrix[m+1][m+3])\n    print(matrix[m+2][m+4])\n    print(matrix[m+3][m+5])\n    print(matrix[m+4][m+6])\n    print(matrix[m+5][m+7])\n    print(matrix[m][m+3])\n    print(matrix[m+1][m+4])\n    print(matrix[m+2][m+5])\n    print(matrix[m+3][m+6])\n    print(matrix[m+4][m+7])\ndef print_matrix_diag_reverse_under_in_row_in_col_reverse(matrix,m,n):\n    '''\n    Write a function to print a given 2D matrix.\n    '''\n    print(matrix[m][m])\n    print(matrix[m+1][m+1])\n    print(matrix[m+2][m+2])\n    print(matrix[m+3][m+3])\n    print(matrix[m+4][m+4])\n    print(matrix[m+5][m+5])\n    print(matrix[m+6][m+6])\n    print(matrix[m+7][m+7])\n    print(matrix[m][m+1])\n    print(matrix[m+1][m+2])\n    print(matrix[m+2][m+3])\n    print(matrix[m+3][m+4])\n    print(matrix[m+4][m+5])\n    print(matrix[m+5]["
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    count = 1\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == count:\n                return (i,j)\n            count += 1\ndef solve_colon(m,n,tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    count = 1\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == count:\n                tuplex[i][j] = 0\n                count += 1\n                if j == n-1:\n                    return tuplex\n                tuplex[i][j+1] = count\n                count += 1\ndef solve_colon_rec(m,n,tuplex):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 and n == 1:\n        return tuplex\n    if m == 0 or n == 0:\n        return solve_colon_rec(m-1,n,tuplex)\n    tuplex_tmp = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            if tuplex_tmp[i][j] == 1:\n                tuplex_tmp[i][j] = 0\n                for k in range(m):\n                    for l in range(n):\n                        if tuplex_tmp[k][l] == count:\n                            tuplex_tmp[k][l] = 0\n                            tuplex_tmp[i][j] = 0\n                            count += 1\n                            if l == n-1:\n                                return tuplex_tmp\n                            tuplex_tmp[i][j+1] = count\n                            count += 1\ndef solve_colon_rec2(m,n,tuplex,visited):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 and n == 1:\n        return tuplex\n    if m == 0 or n == 0:\n        return solve_colon_rec2(m-1,n,tuplex,visited)\n    if (m,n) in visited:\n        return solve_colon_rec2(m-1,n,tuplex,visited)\n    visited.append((m,n))\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == 1:\n                tuplex[i][j] = 0\n                for k in range(m):\n                    for l in range(n):\n                        if tuplex[k][l] == count:\n                            tuplex[k][l] = 0\n                            tuplex[i][j] = 0\n                            count += 1\n                            if l == n-1:\n                                return tuplex\n                            tuplex[i][j+1] = count\n                            count += 1\ndef solve_colon_rec3(m,n,tuplex,visited):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 and n == 1:\n        return tuplex\n    if m == 0 or n == 0:\n        return solve_colon_rec3(m-1,n,tuplex,visited)\n    if (m,n) in visited:\n        return solve_colon_rec3(m-1,n,tuplex,visited)\n    visited.append((m,n))\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == 1:\n                tuplex[i][j] = 0\n                for k in range(m):\n                    for l in range(n):\n                        if tuplex[k][l] == count:\n                            tuplex[k][l] = 0\n                            tuplex[i][j] = 0\n                            count += 1\n                            if l == n-1:\n                                return tuplex\n                            tuplex[i][j+1] = count\n                            count += 1\ndef solve_colon_rec4(m,n,tuplex,visited):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 and n == 1:\n        return tuplex\n    if m == 0 or n == 0:\n        return solve_colon_rec4(m-1,n,tuplex,visited)\n    if (m,n) in visited:\n        return solve_colon_rec4(m-1,n,tuplex,visited)\n    visited.append((m,n))\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == 1:\n                tuplex[i][j] = 0\n                for k in range(m):\n                    for l in range(n):\n                        if tuplex[k][l] == count:\n                            tuplex[k][l] = 0\n                            tuplex[i][j] = 0\n                            count += 1\n                            if l == n-1:\n                                return tuplex\n                            tuplex[i][j+1] = count\n                            count += 1\ndef solve_colon_rec5(m,n,tuplex,visited):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 and n == 1:\n        return tuplex\n    if m == 0 or n == 0:\n        return solve_colon_rec5(m-1,n,tuplex,visited)\n    if (m,n) in visited:\n        return solve_colon_rec5(m-1,n,tuplex,visited)\n    visited.append((m,n))\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == 1:\n                tuplex[i][j] = 0\n                for k in range(m):\n                    for l in range(n):\n                        if tuplex[k][l] == count:\n                            tuplex[k][l] = 0\n                            tuplex[i][j] = 0\n                            count += 1\n                            if l == n-1:\n                                return tuplex\n                            tuplex[i][j+1] = count\n                            count += 1\ndef solve_colon_rec6(m,n,tuplex,visited):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 and n == 1:\n        return tuplex\n    if m == 0 or n == 0:\n        return solve_colon_rec6(m-1,n,tuplex,visited)\n    if (m,n) in visited:\n        return solve_colon_rec6(m-1,n,tuplex,visited)\n    visited.append((m,n))\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == 1:\n                tuplex[i][j] = 0\n                for k in range(m):\n                    for l in range(n):\n                        if tuplex[k][l] == count:\n                            tuplex[k][l] = 0\n                            tuplex[i][j] = 0\n                            count += 1\n                            if l == n-1:\n                                return tuplex\n                            tuplex[i][j+1] = count\n                            count += 1\ndef solve_colon_rec7(m,n,tuplex,visited):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 and n == 1:\n        return tuplex\n    if m == 0 or n == 0:\n        return solve_colon_rec7(m-1,n,tuplex,visited)\n    if (m,n) in visited:\n        return solve_colon_rec7(m-1,n,tuplex,visited)\n    visited.append((m,n))\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == 1:\n                tuplex[i][j] "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # for i in range(n):\n    #     tuplex[i] = int(tuplex[i])\n    if m == 1:\n        return (tuplex)\n    elif m == 2:\n        return (tuplex[::-1])\n    else:\n        s = deepcopy(tuplex)\n        for i in range(m - 2):\n            s = (s[i:i + 1] + (s[i + 1:i + 2]))\n        return (s)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuplex[m-1]\n    return colon\ndef reverse(a):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    reverse = ()\n    for i in range(len(a)-1,-1,-1):\n        reverse = reverse+(a[i],)\n    return reverse\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # ********* Your code here *********\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    max_product = nums1[N-1] * nums2[N-1]\n    for i in range(N-2, -1, -1):\n        if nums1[i] * nums2[i] > max_product:\n            max_product = nums1[i] * nums2[i]\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    ans = []\n    temp = []\n    for i in range(N):\n        temp.append(0)\n        for j in range(N):\n            temp[i] += nums1[i] * nums2[j]\n    for i in range(N):\n        ans.append(temp[i] - nums1[i] * nums2[i])\n    return ans\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    prod = []\n    for i in range(N):\n        if(nums1[i] * nums2[i] > prod[len(prod)-1]):\n            prod.append(nums1[i] * nums2[i])\n    print(prod)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    l1 = len(nums1)\n    l2 = len(nums2)\n    result = []\n    \n    for i in range(N):\n        if l1 > 0 and l2 > 0:\n            if nums1[l1-1] < nums2[l2-1]:\n                result.append(nums1[l1-1])\n                l1 = l1 - 1\n            else:\n                result.append(nums2[l2-1])\n                l2 = l2 - 1\n        elif l1 > 0:\n            result.append(nums1[l1-1])\n            l1 = l1 - 1\n        elif l2 > 0:\n            result.append(nums2[l2-1])\n            l2 = l2 - 1\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    i, j = 0, 0\n    products = []\n    while i < N and j < N:\n        products.append(nums1[i] * nums2[j])\n        if products[-1] > nums1[i] * nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # sort first list\n    nums1.sort()\n    # sort second list\n    nums2.sort()\n    \n    # loop through list to get max product and the index of the max product\n    i, j = 0, 0\n    curr_max = 0\n    max_product = 0\n    while i < len(nums1) and j < len(nums2):\n        \n        # ignore if nums1[i] = nums2[j]\n        # 2**12!= 1*2**5\n        # 12!= 2*5\n        if nums1[i] == nums2[j]:\n            i += 1\n            j += 1\n            continue\n        \n        # multiply nums1[i] and nums2[j] and get max product\n        product = nums1[i] * nums2[j]\n        if product > curr_max:\n            curr_max = product\n            max_product = curr_max\n            \n        # if max product so far is greater than N, break\n        if max_product > N:\n            break\n        \n        # increment nums1 and nums2's index\n        i += 1\n        j += 1\n        \n    return max_product\n    \n    \ndef main():\n    '''\n    Given two lists of positive integers, find the largest product of K numbers from each list.\n    '''\n    nums1 = [1, 4, 5, 8]\n    nums2 = [2, 3, 6, 7]\n    N = 3\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = [6, 1, 3, 8]\n    nums2 = [2, 4, 5, 8]\n    N = 6\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = [2, 8, 6, 4]\n    nums2 = [9, 3, 1, 2]\n    N = 10\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = [1, 2, 3]\n    nums2 = [6, 7, 4]\n    N = 6\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = [2, 3, 5]\n    nums2 = [4, 6, 7]\n    N = 7\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = [1, 5, 8]\n    nums2 = [9, 7, 5]\n    N = 10\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = [6, 3, 1]\n    nums2 = [4, 7, 2]\n    N = 5\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = []\n    nums2 = []\n    N = 0\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = [0]\n    nums2 = []\n    N = 0\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = []\n    nums2 = [0]\n    N = 0\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \n    nums1 = []\n    nums2 = []\n    N = 0\n    \n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #find largest product\n    max_product = 0\n    #assign each factor to a list\n    f1 = []\n    f2 = []\n    #check for first list\n    for i in range(len(nums1)):\n        f1.append(nums1[i])\n    #check for second list\n    for i in range(len(nums2)):\n        f2.append(nums2[i])\n    #find largest product in both lists\n    for i in range(len(f1)):\n        for j in range(len(f2)):\n            if f1[i] == f2[j] and max_product < f1[i]*f2[j]:\n                max_product = f1[i]*f2[j]\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_nums = {}\n    for i in range(1, N + 1):\n        max_nums[i] = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            max_nums[i + j] = max(max_nums[i + j], max_nums[i] * nums1[i] * nums2[j])\n    return max_nums[N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if nums1[i] == nums2[j]:\n                continue\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a,\"is maximum\")\n    elif a<b:\n        print(b,\"is maximum\")\n    else:\n        print(\"Both are equal\")\nmaximum(4,5)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print('The first number is the maximum',a)\n    else:\n        print('The second number is the maximum',b)\nmaximum(50,20)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a if a>b else b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(f'{a} is maximum.')\n    else:\n        print(f'{b} is maximum.')\nmaximum(10,20)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a if a > b else b\n    return maximum\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char1 = (ord(str1[0]))\n    char2 = (ord(str1[1]))\n    tuple1 = (char1,char2)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = str1.split()\n    return tuple(list1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst1 = list(str1)\n    return tuple(lst1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace('(', '')\n    str1 = str1.replace(')', '')\n    str1 = str1.replace(' ', '')\n    str1 = str1.split(',')\n    str1 = tuple(str1)\n    return str1\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = ()\n    for i in str1:\n        tup = tup + (i,)\n    return tup\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n > 0:\n        n |= 1\n        return n\n    else:\n        return 0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(\"Function Call: set_left_most_unset_bit\")\n    n |= 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    l = n & (-n)\n    return l\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. clear the left most unset bit')\n    print('2. set the left most unset bit')\n    print('3. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n)\n    elif ch == '2':\n        n |= 1\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef get_right_most_set_bit(n): \n    '''\n    Write a python function to get the right most set bit.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. get the right most set bit')\n    print('2. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. clear the right most set bit')\n    print('2. set the right most set bit')\n    print('3. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n)\n    elif ch == '2':\n        n &= ~(1 << (n.bit_length()-1))\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef get_left_most_set_bit(n): \n    '''\n    Write a python function to get the left most set bit.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. get the left most set bit')\n    print('2. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. clear the left most set bit')\n    print('2. set the left most set bit')\n    print('3. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n)\n    elif ch == '2':\n        n |= 1\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef get_right_most_unset_bit(n): \n    '''\n    Write a python function to get the right most unset bit.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. get the right most unset bit')\n    print('2. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. clear the right most unset bit')\n    print('2. set the right most unset bit')\n    print('3. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n)\n    elif ch == '2':\n        n &= ~(1 << (n.bit_length()-1))\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef get_left_most_unset_bit(n): \n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. get the left most unset bit')\n    print('2. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. clear the left most unset bit')\n    print('2. set the left most unset bit')\n    print('3. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n)\n    elif ch == '2':\n        n &= ~(1 << (n.bit_length()-1))\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef get_right_most_set_bit_index(n): \n    '''\n    Write a python function to get the right most set bit index.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. get the right most set bit index')\n    print('2. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n.bit_length()-1)\n    else:\n        exit()\n    \n    \ndef set_right_most_set_bit_index(n): \n    '''\n    Write a python function to set the right most set bit index.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. clear the right most set bit index')\n    print('2. set the right most set bit index')\n    print('3. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(n.bit_length()-1)\n    elif ch == '2':\n        n |= 1 << (n.bit_length()-1)\n        print('Result:')\n        print(n)\n    else:\n        exit()\n    \n    \ndef get_left_most_set_bit_index(n): \n    '''\n    Write a python function to get the left most set bit index.\n    '''\n    '''\n    n = number\n    '''\n    # your code here\n    print('Enter the number:')\n    n = int(input())\n    print('1. get the left most set bit index')\n    print('2. exit')\n    ch = input('Enter your choice:')\n    if ch == '1':\n        print('Result:')\n        print(0)\n    else:\n        exit()\n    \n    \ndef set_left_most_set_bit_index(n): \n    '''\n    Write a python function to set the left most set bit index.\n    '''\n    '''\n    n = number\n    '"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # We need to get the maximum value in the range 0-2^31-1.\n    # For this we will use the max 32 bits.\n    # If a 32 bit value is greater than the max 32 bits, we can just take the max 32 bits\n    # We also need to check if we can bit shift the value to the right\n    # If we can't bit shift the value to the right we need to change the left most bit of the value\n    # We also need to check if we can bit shift the value to the left\n    # If we can bit shift the value to the left we need to change the left most bit of the value\n    # If we can't bit shift the value to the left we need to change the left most bit of the value\n    # if we can't bit shift the value to the right we need to change the left most bit of the value\n    # if we can't bit shift the value to the left we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # So we need to check both cases to see if the left most bit of the value should be changed\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the left and right we need to change the left most bit of the value\n    # If we can't bit shift the value to the lef"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = int(n)\n    n = n | (1 << (31 - 1))\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n|(1<<n.bit_length()-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n=int(n)\n    n=bin(n)\n    n=n[2:]\n    n=int(n)\n    n=n+1\n    n=bin(n)\n    n=n[2:]\n    n=int(n)\n    print(n)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n!= 0:\n        if n & 1:\n            n = n -1\n        else:\n            n = n>>1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # code here \n    if n == 0: \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return (4/3)*pi*r*r*h\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi = math.pi\n    return 2*pi*r*h + 2*pi*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = math.pi\n    return pi*r*r*h\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    return 2*pi*r*h + 2*pi*r*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*r*r*r\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r*r\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and a cylinder.\n    '''\n    pi = math.pi\n    return (4/3)*pi*r*r*h + pi*r*r*r + pi*r*r*h\ndef surface_area_cone_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone and a cylinder.\n    '''\n    pi = math.pi\n    return 4*pi*r*r*h + 2*pi*r*r + 2*pi*r*r*h\ndef volume_pyramid(r1,r2,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    pi = math.pi\n    return pi*r1*r1*r2 + pi*r1*r1*h + pi*r2*r2*h + 2*pi*r1*r1*h\ndef surface_area_pyramid(r1,r2,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    pi = math.pi\n    return pi*r1*r1*r2 + 2*pi*r1*r1*h + 2*pi*r2*r2*h + 2*pi*r1*r1 + 2*pi*r2*r2\ndef volume_sphere_pyramid(r):\n    '''\n    Write a function to find the volume of a pyramid with a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r*r*r + 4*pi*r*r\ndef surface_area_sphere_pyramid(r):\n    '''\n    Write a function to find the surface area of a pyramid with a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r*r*r + 4*pi*r*r\ndef volume_cylinder_pyramid(r1,r2,h):\n    '''\n    Write a function to find the volume of a pyramid with a cylinder.\n    '''\n    pi = math.pi\n    return 4*pi*r1*r1*r2 + 4*pi*r1*r1*h + 4*pi*r2*r2*h + 2*pi*r1*r1*h + 2*pi*r2*r2\ndef surface_area_cylinder_pyramid(r1,r2,h):\n    '''\n    Write a function to find the surface area of a pyramid with a cylinder.\n    '''\n    pi = math.pi\n    return 4*pi*r1*r1*r2 + 4*pi*r1*r1*h + 4*pi*r2*r2*h + 2*pi*r1*r1 + 2*pi*r2*r2\ndef volume_pyramid_cylinder(r1,r2,h):\n    '''\n    Write a function to find the volume of a pyramid with a cylinder.\n    '''\n    pi = math.pi\n    return pi*r1*r1*r2 + 4*pi*r1*r1*h + 4*pi*r2*r2*h + 2*pi*r1*r1 + 2*pi*r2*r2\ndef surface_area_pyramid_cylinder(r1,r2,h):\n    '''\n    Write a function to find the surface area of a pyramid with a cylinder.\n    '''\n    pi = math.pi\n    return 4*pi*r1*r1*r2 + 4*pi*r1*r1*h + 4*pi*r2*r2*h + 2*pi*r1*r1 + 2*pi*r2*r2\ndef volume_pyramid_sphere(r):\n    '''\n    Write a function to find the volume of a pyramid with a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r*r*r + 4*pi*r*r\ndef surface_area_pyramid_sphere(r):\n    '''\n    Write a function to find the surface area of a pyramid with a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r*r*r + 4*pi*r*r\ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r*r*r\ndef surface_area_sphere_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r*r\ndef volume_parabola(x,a,b):\n    '''\n    Write a function to find the volume of a parabola.\n    '''\n    pi = math.pi\n    return a*x*x + b*x\ndef surface_area_parabola(x,a,b):\n    '''\n    Write a function to find the surface area of a parabola.\n    '''\n    pi = math.pi\n    return 2*pi*x*x + 2*pi*x + 2*a*x + 2*b\ndef volume_paraboloid(x,a,b):\n    '''\n    Write a function to find the volume of a paraboloid.\n    '''\n    pi = math.pi\n    return a*x*x + b*x + a*b + a*x + 2*pi*x*x + 2*pi*x + 2*a*x + 2*b\ndef surface_area_paraboloid(x,a,b):\n    '''\n    Write a function to find the surface area of a paraboloid.\n    '''\n    pi = math.pi\n    return 2*pi*x*x + 2*pi*x + 2*a*x + 2*b + 2*a + 2*b + 2*pi*x + 2*pi*x*x + 2*pi*x + 2*a*x\ndef volume_cylinder_paraboloid(r,a,b):\n    '''\n    Write a function to find the volume of a cylinder and a paraboloid.\n    '''\n    pi = math.pi\n    return pi*r*r*r + pi*r*r*a + pi*r*r*b + pi*r*r + pi*r*a + pi*r + pi*r*b + pi*a*b + 2*pi*r*r*a + 2*pi*r*r + 2*pi*r*a + 2*pi*r + 2*pi*a + 2*pi*r*b + 2*pi*a + 2*pi*b\ndef surface_area_cylinder_paraboloid(r,a,b):\n    '''\n    Write a function to find the surface area of a cylinder and a paraboloid.\n    '''\n    pi = math.pi\n    return pi*r*r*r + pi*r*r*a + pi*r*r*b + pi*r*r + pi*r*a + p"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return pi*math.pow(r,2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # The formula for the volume of a cone is V = pi * r * h\n    return (math.pi * r**2 * h)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi*math.pow(r,2)*h)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h/3\n    print(volume)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * (h/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r == 0 and h == 0:\n        print(\"Sorry, this is not a valid cone\")\n        return 0\n    if r == 0:\n        return math.pi * h ** 2\n    else:\n        return (1/3)*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (math.pi/3)*(r**2)*h\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r ** 2 * h)\ndef volume_pyramid(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (l * h)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(1,n):\n        if n%2==0 and i%2==1:\n            print(i)\n            break\n        if n%2==1 and i%2==0:\n            print(i)\n            break\nhighest_Power_of_2(6)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n):\n        if i == (n - 1):\n            return i\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while n > 0:\n        n = n >> 1\n        count += 1\n    return count\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return 2 ** (n // 2)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #defining the variable\n    n1 = 0\n    #finding the highest power of 2 less than n\n    while (n>>n1) > 0:\n        n1 += 1\n    print(n1)"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if(n<0):\n        return -1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i *= 2\n    return i - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n <= 0):\n        raise Exception(\"n should be positive integer\")\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #sol1\n    # arr = []\n    # for i in range(n+1):\n    #     if i in range(n+1):\n    #         #print(i)\n    #         arr.append(i)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 2\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = n + 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        for i in range(1, n):\n            n = n + 1\n            if n == 1:\n                return 0\n            if n == 2:\n                return 1\n            else:\n                return n + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        raise Exception('Negative arguments are not valid.')\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    if n == 1: \n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # Start with 2, the 1st lucas number\n    # Lucas numbers are calculated by adding the previous numbers\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,...\n    return 2*find_lucas(n-1) + 1\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = '{}'\n    return list_.format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend([string])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    # Creating a new list\n    new_list = []\n    \n    # Iterating through the list \n    for elem in list_:\n        new_list.append(elem + string)\n    \n    # Returning the new list\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.insert(0, string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst_dict = dict(zip(l1,l2))\n    lst_dict.update(l3)\n    return lst_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1.reverse()\n    l2.reverse()\n    l3.reverse()\n    d = dict()\n    for i in range(len(l1)):\n        d[l1[i]] = {\n            'language': l2[i],\n            'framework': l3[i]\n        }\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        sub_dictionary = {}\n        for j in range(len(l3)):\n            sub_key = l3[j]\n            sub_value = value[j]\n            sub_dictionary[sub_key] = sub_value\n        dictionary[key] = sub_dictionary\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    m = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        m[key] = value\n    for i in range(len(l3)):\n        key = l3[i]\n        value = l2[i]\n        m[key] = value\n    return m\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #sol 1\n    #new_dict = {}\n    #for i in range(len(l1)):\n    #    new_dict[l1[i]] = l2[i]\n    #return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dictionary = {}\n    for i in range(len(l1)):\n        if l1[i] not in new_dictionary.keys():\n            new_dictionary[l1[i]] = l2[i]\n    return new_dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return dict(zip(l1, l2))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        d[i] = l2\n    for i in l3:\n        d[i] = l2\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n    \n    for i in range(len(l3)):\n        dict1[l3[i]] = l1[i]\n    return dict1\n    \ndef main():\n    # # TASK 1\n    # print(\"TASK 1:\")\n    # print(f\"{convert_list_dictionary(['a', 'b', 'c'], ['1', '2', '3'], ['4', '5', '6'])}\")\n    \n    # TASK 2\n    print(\"TASK 2:\")\n    print(f\"{convert_list_dictionary(['a', 'b', 'c', 'd', 'e'], ['1', '2', '3', '4', '5'], ['6', '7', '8', '9', '10'])}\")\n    \nmain()"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n    for i in range(n):\n        res = max(res, (i+1)+(res+i)/2, (i+1)+(res+i)/3, (i+1)+(res+i)/4, (i+1)+(res+i)/5)\n    return res\n    \ndef get_max_sum_dp (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \n    We use a dp table to store the results. The idea is to use the same equation to find the largest sum till that number of digits.\n    And then repeat the same process till the base case.\n    '''\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n    # base case:\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        dp[i][i] = i\n    # recursive case:\n    for length in range(1, n+1):\n        for right_length in range(length+1):\n            left_length = right_length - length\n            if left_length > 0 and left_length <= length:\n                dp[left_length][right_length] = max(dp[left_length][right_length], dp[left_length][right_length-1]+dp[left_length-1][right_length])\n            if right_length > 0 and right_length <= length:\n                dp[right_length][left_length] = max(dp[right_length][left_length], dp[right_length-1][left_length]+dp[right_length][left_length-1])\n    return dp[n][n]\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    max_s = 0\n    while n!= 1:\n        max_s = max(max_s, n)\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 3 == 0:\n            n = n // 3\n        elif n % 4 == 0:\n            n = n // 4\n        elif n % 5 == 0:\n            n = n // 5\n        else:\n            n = n - 1\n    max_s = max(max_s, n)\n    return max_s\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Solution\n    # approach 1 - recursive\n    def max_sum_recursive(n):\n        if n == 1:\n            return 1\n        return max(max_sum_recursive(n//2), max_sum_recursive(n//3), max_sum_recursive(n//4), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_naive (n):\n        '''\n        Complexity : Time: O(N^2), Space:O(1)\n        '''\n        # 2, 3, 5, 6, 7, 8, 9\n        max_sum = 0\n        for i in range(1, n):\n            for j in range(i, n):\n                max_sum = max(max_sum, i+j)\n        return max_sum\n    def get_max_sum_with_dp (n):\n        '''\n        Complexity : Time: O(N^2), Space:O(N)\n        '''\n        dp = [-1 for i in range(n+1)]\n        max_sum = 0\n        dp[0] = 0\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i, n):\n                max_sum = max(max_sum, i+j)\n            dp[i] = max_sum\n            max_sum = 0\n        return dp[-1]\n    def get_max_sum_with_top_down_dp (n):\n        '''\n        Complexity : Time: O(N^2), Space:O(N)\n        '''\n        dp = [-1 for i in range(n+1)]\n        max_sum = 0\n        dp[0] = 0\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i, n):\n                dp[i] = max(dp[i], max_sum+i)\n                max_sum = max(max_sum, i+j)\n        return dp[-1]\n    def get_max_sum_with_bottom_up_dp (n):\n        '''\n        Complexity : Time: O(N^2), Space:O(N)\n        '''\n        dp = [-1 for i in range(n+1)]\n        max_sum = 0\n        dp[0] = 0\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i, n):\n                dp[i] = max(dp[i], max_sum+i)\n                max_sum = max(max_sum, i+j)\n        return dp[-1]\n    print(\"Naive : %d\" % (get_max_sum_naive(n)))\n    print(\"With DP : %d\" % (get_max_sum_with_dp(n)))\n    print(\"With Top-Down DP : %d\" % (get_max_sum_with_top_down_dp(n)))\n    print(\"With Bottom-Up DP : %d\" % (get_max_sum_with_bottom_up_dp(n)))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum (n):\n        if (n == 1): return 1\n        if (n == 2): return 3\n        if (n == 3): return 4\n        if (n == 4): return 5\n        if (n == 5): return 6\n        return max(max_sum(n/2), max_sum(n/3), max_sum(n/4), max_sum(n/5), n)\n    return max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    if n <= 5:\n        return n\n    \n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n <= 5):\n        return n * n + n + 1\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # O(n)\n    # if n <= 5:\n    #     return n\n    # else:\n    #     return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n    \n    # O(logn)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0 or n == 1:\n        return n\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    if input_list == []:\n        return None\n    for element in input_list:\n        if element not in length_list:\n            length_list.append(element)\n    length_list.sort(key=lambda x: len(x))\n    return length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    output_list = []\n    for item in input_list:\n        if len(item) > len(output_list):\n            output_list = item\n    return output_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if input_list == None:\n        return None\n    longest = 0\n    for i in input_list:\n        if len(i) > longest:\n            longest = len(i)\n    max_length = []\n    for i in input_list:\n        if len(i) == longest:\n            max_length.append(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Sort the input_list by the length of the word\n    # and then find the length of the largest word\n    input_list.sort(key=len)\n    return len(input_list[-1])\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    l = []\n    for i in input_list:\n        if type(i)!= list:\n            l.append(i)\n        else:\n            l.append(max_length_list(i))\n    return max(l, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            result = i\n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    # Your code here\n    for i in range(0, len(input_list)):\n        if max_length < len(input_list[i]):\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return_list = []\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            return_list = input_list[i]\n            max_length = len(input_list[i])\n    return return_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for index in range(0,len(input_list)):\n        if len(input_list[index]) > max_length:\n            max_length = len(input_list[index])\n    max_length_list = []\n    for index in range(0,len(input_list)):\n        if len(input_list[index]) == max_length:\n            max_length_list.append(input_list[index])\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = -1\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set\n    distinct_set = set()\n    # loop over all the elements and add each element to the set\n    for element in test_tup:\n        distinct_set.add(element)\n    # check if the set contains distinct elements\n    if len(distinct_set) == len(test_tup):\n        print('all distinct')\n    else:\n        print('not all distinct')\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    values = []\n    for tup in test_tup:\n        if tup not in values:\n            values.append(tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup)==len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = test_tup\n    hash_tup = set(tup)\n    if len(hash_tup) == len(tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #1 - Create a set of the tuple\n    tup_set = set(test_tup)\n    #2 - Check if the set is not empty\n    if len(tup_set) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = set(test_tup)\n    if len(tup) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    letter_map = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # this will iterate over the string and count the frequency of the character in the string.\n    # the character will be returned as None if there is no repeat in the string.\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # list of characters\n    char_list = list(str1)\n    \n    # traverse the string\n    for i in range(0, len(char_list)):\n        \n        # check if the current character appears\n        # more than once\n        if(char_list.count(char_list[i]) > 1):\n            \n            # if the character is found more than once\n            # then the first non-repeated character\n            # is the character at that index\n            first_non_repeated_character = i\n            return char_list[i]\n            break\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    count_occurance = {}\n    for char in str1:\n        if char not in count_occurance:\n            count_occurance[char] = 1\n        else:\n            count_occurance[char] += 1\n    \n    for k,v in count_occurance.items():\n        if v == 1:\n            return k\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    set_str1 = set(str1)\n    for i in set_str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = 'ab'\n    return str1.index(str1[0])\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    for i in range(0,len(str1)):\n        chars = list(set(str1))\n        if str1[i] in chars:\n            chars.remove(str1[i])\n            \n        if(len(chars)==0):\n            return i\n    \n    return -1\n    \n    \nif __name__ == \"__main__\":\n    \n    # Test 1:\n    print(first_non_repeating_character('google.com'))\n    # Expected: 0\n    \n    # Test 2:\n    print(first_non_repeating_character('abcd'))\n    # Expected: 1\n    \n    # Test 3:\n    print(first_non_repeating_character('google'))\n    # Expected: 0\n    \n    # Test 4:\n    print(first_non_repeating_character('google.com.at'))\n    # Expected: -1\n    \n    # Test 5:\n    print(first_non_repeating_character('google.com.no'))\n    # Expected: 0\n    \n    # Test 6:\n    print(first_non_repeating_character('google.com.no.com'))\n    # Expected: -1\n    \n    # Test 7:\n    print(first_non_repeating_character('google.com.no.com.no'))\n    # Expected: 0\n    \n    # Test 8:\n    print(first_non_repeating_character('google.com.no.com.no.com'))\n    # Expected: 0\n    \n    # Test 9:\n    print(first_non_repeating_character('google.com.no.com.no.com.com'))\n    # Expected: -1\n    \n    # Test 10:\n    print(first_non_repeating_character('google.com.no.com.no.com.com.com.com'))\n    # Expected: -1\n    \n    # Test 11:\n    print(first_non_repeating_character('google.com.no.com.no.com.com.com.com.com.com.com'))\n    # Expected: -1\n    \n    # Test 12:\n    print(first_non_repeating_character('google.com.no.com.no.com.com.com.com.com.com.com.com.com.com'))\n    # Expected: -1\n    \n    # Test 13:\n    print(first_non_repeating_character('google.com.no.com.no.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com'))\n    # Expected: 0\n    \n    # Test 14:\n    print(first_non_repeating_character('google.com.no.com.no.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com.com"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # if str1 = \"abcdefghijklmnopqrstuvwxyz\":\n    #     print(str1.index(\"a\"))\n    # else:\n    #     print(\"Invalid Input\")\n    #     return False\n    # else:\n    #     if str1.index(\"a\") == -1:\n    #         print(\"No Repeated Character\")\n    #         return False\n    #     else:\n    #         print(\"First Non Repeated Character is\",str1.index(\"a\"))\n    #         return True\n    \n    # return None if not str else str.find(lambda a: str.count(a) == 1)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    # return None if not str else str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    \n    # return next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    \n    # else:\n    #     return None\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    \n    # return next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    \n    # else:\n    #     return None\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    \n    # return next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    \n    # else:\n    #     return None\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    \n    # return next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    \n    # else:\n    #     return None\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    \n    # return next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    \n    # else:\n    #     return None\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    \n    # return next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    \n    # else:\n    #     return None\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    \n    # return next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    \n    # else:\n    #     return None\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    \n    # return next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return str[next((i for i, val in enumerate(str) if str.count(val) == 1), None)]\n    \n    # else:\n    #     return None\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else str.index(lambda a: str.count(a) == 1)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else next((i for i, val in enumerate(str) if str.count(val) == 1), None)\n    # return None if not str else str.inde"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    from collections import Counter\n    if not str1:\n        return\n    cnt = Counter(str1)\n    for ch in str1:\n        if cnt[ch]==1:\n            return ch\n    return\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.match(regex, string)): \n        print(\"It's a string\") \n    else: \n        print(\"It's not a string\") \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if string[0] == string[-1] else False\ndef check_type_of_string(string): \n    '''\n    Write a function to check whether the given string contains digits,lower case alphabets,special character,special character \n    in between or not.\n    '''\n    if any(char.isdigit() for char in string): \n        return False\n    if any(char.isalpha() for char in string): \n        return False\n    if any(char in '!@#$%^&*()_+|}{~:;<>,.?/\\\\' for char in string): \n        return False\n    if len(re.findall('[^a-z]', string)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string[0].upper()+string[1:]\n    if string[0]==string[-1]:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # return re.match(regex, string)\n    if re.match(regex, string) and re.search(regex, string):\n        return True\n    else:\n        return False\nprint(check_char(\"hello\"))\nprint(check_char(\"Hello\"))\nprint(check_char(\"\"))\nprint(check_char(''))\nprint(check_char(\"a\"))\nprint(check_char(\"aa\"))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\nprint(check_char(\"\"))\nprint(check_char(\"cat\"))\nprint(check_char(\"catcat\"))\nprint(check_char(\"catcatd\"))\nprint(check_char(\"catcatdcc\"))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex, string) else False"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (re.match(regex, string) is not None)\nprint(check_char('A'))\nprint(check_char('Aa'))\nprint(check_char('ab'))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if (string[0] == string[-1]) else False\ndef check_string(string): \n    '''\n    Write a function to check whether the given string contains same characters in the sorted order or not.\n    '''\n    return True if(sorted(string) == list(string)) else False\ndef check_diff(string): \n    '''\n    Write a function to check whether the given string contains same characters in the sorted order, but with different case.\n    '''\n    return True if(sorted(string, key=str.lower) == list(string)) else False\ndef check_number(string): \n    '''\n    Write a function to check whether the given string contains same numbers in the sorted order or not.\n    '''\n    return True if(sorted(string) == list(string)) else False\ndef check_length(string): \n    '''\n    Write a function to check whether the given string contains same length or not.\n    '''\n    return True if(len(string) == len(set(string))) else False\ndef check_in(string): \n    '''\n    Write a function to check whether the given string contains same characters in the sorted order or not.\n    '''\n    return True if(sorted(string) == list(string)) else False\ndef check_substring(string): \n    '''\n    Write a function to check whether the given string contains same characters in the sorted order or not.\n    '''\n    return True if(sorted(string) == list(string)) else False\ndef check_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(string[0] <= string[-1]) else False\ndef check_sum(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(sum(string) == sum(set(string))) else False\ndef check_proper(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(re.search(regex, string)) else False\ndef check_odd_even(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(re.search(regex, string)) else False\ndef check_char_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_string_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_diff_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_number_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_length_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_in_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_substring_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_length_range_2(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_in_range_2(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_proper_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_number_range_2(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_odd_even_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_sum_range(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_char_range_2(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_in_range_2(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_substring_range_2(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_char_range_3(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_in_range_3(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_substring_range_3(string): \n    '''\n    Write a function to check whether the given string contains same characters in the range of the given string or not.\n    '''\n    return True if(len(re.findall(regex, string)) == len(set(string))) else False\ndef check_string_range_3(string): \n    '''\n    Write a function to check whether the given string contain"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list with all numbers to sort\n    list = [a,b,c]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    m1 = a\n    m2 = b\n    m3 = c\n    #print(m1,m2,m3)\n    if m1 > m2:\n        if m1 > m3:\n            m1, m3 = m3, m1\n        else:\n            m1, m3 = m3, m1\n    else:\n        if m2 > m3:\n            m2, m3 = m3, m2\n        else:\n            m2, m3 = m3, m2\n    if m1 < m2:\n        if m1 < m3:\n            m1, m3 = m3, m1\n        else:\n            m1, m3 = m3, m1\n    else:\n        if m2 < m3:\n            m2, m3 = m3, m2\n    return m1, m2, m3\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    if len(a)!= len(b) and len(a)!= len(c):\n        print(\"input error:\")\n        print(a,b,c)\n        return\n    if len(a)!= len(b) or len(a)!= len(c):\n        print(\"input error:\")\n        print(a,b,c)\n        return\n    if len(a) == len(b) == len(c):\n        print(\"input error:\")\n        print(a,b,c)\n        return\n    if len(a) == len(b) == 1:\n        return (a[0]+b[0]+c[0])/3\n    if len(a) == len(b) == 2:\n        return (a[0]+b[0]+c[1])/3\n    if len(a) == len(b) == 3:\n        return (a[0]+b[1]+c[2])/3\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        print(a)\n    elif b > a and b > c:\n        print(b)\n    else:\n        print(c)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    data = sorted((a,b,c))\n    n = len(data)\n    if n == 1:\n        return data[0]\n    if n == 2:\n        if data[0] == data[1]:\n            return data[0]\n        return (data[0]+data[1])/2.0\n    if n == 3:\n        if data[0] == data[1] == data[2]:\n            return data[0]\n        return (data[0]+data[1])/2.0\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    numbers = [a,b,c]\n    numbers.sort()\n    \n    if len(numbers) % 2 == 0:\n        result = (numbers[len(numbers) // 2] + numbers[len(numbers) // 2 - 1]) / 2\n    else:\n        result = numbers[len(numbers) // 2]\n    \n    return result\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a,b,c])\n    if sorted_numbers[1] == sorted_numbers[2]:\n        return sorted_numbers[1]\n    else:\n        return sorted_numbers[1] - sorted_numbers[2]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    mid = int(len(sorted_list)/2)\n    median = sorted_list[mid]\n    print('The median is:', median)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    summ = 0\n    for i in nums:\n        summ = summ + len(str(i))\n    return summ\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += len(str(i))\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        num_int = int(num)\n        result.append(sum(list(map(int, str(num_int)))))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums_list = []\n    for num in nums:\n        nums_list.append(num)\n    sum_of_digits_list = []\n    for num in nums_list:\n        sum_of_digits = sum(map(int, str(num)))\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, str(num)))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, list(map(str, nums))))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # read in a list\n    # separate each number into a digit\n    # sum the digits together\n    # print the sum\n    # ex: 1,2,3,4,5\n    #    1*1 + 2*2 + 3*3 + 4*4 + 5*5 = 1 + 3 + 6 + 10 + 15 = 23\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    l = []\n    l = nums\n    \n    # a way to do this without using the sum function\n    s = 0\n    for i in l:\n        for j in str(i):\n            s += int(j)\n            \n    return s\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have equal length\")\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    (x1, y1) = test_tup1\n    (x2, y2) = test_tup2\n    xor_result = x1 ^ x2\n    return (xor_result, y1 ^ y2)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    (a,b) = (test_tup1[0],test_tup2[0])\n    (c,d) = (test_tup1[1],test_tup2[1])\n    print(a ^ b ^ c ^ d)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert type(test_tup1) == tuple and type(test_tup2) == tuple, \"Both tuples should be in the form of (int, int, int) and (int, int, int)\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return ((test_tup1[0] ^ test_tup2[0]), (test_tup1[1] ^ test_tup2[1]), (test_tup1[2] ^ test_tup2[2]), (test_tup1[3] ^ test_tup2[3]), (test_tup1[4] ^ test_tup2[4]), (test_tup1[5] ^ test_tup2[5]), (test_tup1[6] ^ test_tup2[6]), (test_tup1[7] ^ test_tup2[7]))\n    \ndef bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise or operation across the given tuples.\n    '''\n    return ((test_tup1[0] | test_tup2[0]), (test_tup1[1] | test_tup2[1]), (test_tup1[2] | test_tup2[2]), (test_tup1[3] | test_tup2[3]), (test_tup1[4] | test_tup2[4]), (test_tup1[5] | test_tup2[5]), (test_tup1[6] | test_tup2[6]), (test_tup1[7] | test_tup2[7]))\n    \ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    return ((test_tup1[0] & test_tup2[0]), (test_tup1[1] & test_tup2[1]), (test_tup1[2] & test_tup2[2]), (test_tup1[3] & test_tup2[3]), (test_tup1[4] & test_tup2[4]), (test_tup1[5] & test_tup2[5]), (test_tup1[6] & test_tup2[6]), (test_tup1[7] & test_tup2[7]))\n    \ndef bitwise_not(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise not operation across the given tuple.\n    '''\n    return ((test_tup1[0] ^ 0xFF), (test_tup1[1] ^ 0xFF), (test_tup1[2] ^ 0xFF), (test_tup1[3] ^ 0xFF), (test_tup1[4] ^ 0xFF), (test_tup1[5] ^ 0xFF), (test_tup1[6] ^ 0xFF), (test_tup1[7] ^ 0xFF))\n    \ndef bitwise_shift_left(test_tup1, bit_no):\n    '''\n    Write a function to perform the bitwise left shift operation on the given tuple.\n    '''\n    return ((test_tup1[0] << bit_no), (test_tup1[1] << bit_no), (test_tup1[2] << bit_no), (test_tup1[3] << bit_no), (test_tup1[4] << bit_no), (test_tup1[5] << bit_no), (test_tup1[6] << bit_no), (test_tup1[7] << bit_no))\n    \ndef bitwise_shift_right(test_tup1, bit_no):\n    '''\n    Write a function to perform the bitwise right shift operation on the given tuple.\n    '''\n    return ((test_tup1[0] >> bit_no), (test_tup1[1] >> bit_no), (test_tup1[2] >> bit_no), (test_tup1[3] >> bit_no), (test_tup1[4] >> bit_no), (test_tup1[5] >> bit_no), (test_tup1[6] >> bit_no), (test_tup1[7] >> bit_no))\n    \ndef bitwise_right_shift(test_tup1, bit_no):\n    '''\n    Write a function to perform the bitwise right shift operation on the given tuple.\n    '''\n    return ((test_tup1[0] >> bit_no), (test_tup1[1] >> bit_no), (test_tup1[2] >> bit_no), (test_tup1[3] >> bit_no), (test_tup1[4] >> bit_no), (test_tup1[5] >> bit_no), (test_tup1[6] >> bit_no), (test_tup1[7] >> bit_no))\n    \ndef bitwise_left_shift(test_tup1, bit_no):\n    '''\n    Write a function to perform the bitwise left shift operation on the given tuple.\n    '''\n    return ((test_tup1[0] << bit_no), (test_tup1[1] << bit_no), (test_tup1[2] << bit_no), (test_tup1[3] << bit_no), (test_tup1[4] << bit_no), (test_tup1[5] << bit_no), (test_tup1[6] << bit_no), (test_tup1[7] << bit_no))\n    \ndef bitwise_compare(test_tup1, test_tup2):\n    '''\n    Write a function to perform the bitwise compare operation on the given tuples.\n    '''\n    return ((test_tup1[0] == test_tup2[0]), (test_tup1[1] == test_tup2[1]), (test_tup1[2] == test_tup2[2]), (test_tup1[3] == test_tup2[3]), (test_tup1[4] == test_tup2[4]), (test_tup1[5] == test_tup2[5]), (test_tup1[6] == test_tup2[6]), (test_tup1[7] == test_tup2[7]))\n    \ndef bitwise_is_bit_set(test_tup1, bit_no):\n    '''\n    Write a function to perform the bitwise is bit set operation on the given tuple.\n    '''\n    return ((test_tup1[0] & (1 << bit_no)), (test_tup1[1] & (1 << bit_no)), (test_tup1[2] & (1 << bit_no)), (test_tup1[3] & (1 << bit_no)), (test_tup1[4] & (1 << bit_no)), (test_tup1[5] & (1 << bit_no)), (test_tup1[6] & (1 << bit_no)), (test_tup1[7] & (1 << bit_no)))\n    \ndef bitwise_invert(test_tup1):\n    '''\n    Write a function to perform the bitwise invert operation on the given tuple.\n    '''\n    return ((~test_tup1[0]), (~test_tup1[1]), (~test_tup1[2]), (~test_tup1[3]), (~test_tup1[4]), (~test_tup1[5]), (~test_tup1[6]), (~test_tup1[7]))\n    \ndef bitwise_bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the bitwise bitwise and operation on the given tuples.\n    '''\n    return ((test_tup1[0] & test_tup2[0]), (test_tup1[1] & test_tup2[1]), (test_tup1[2] & test_tup2[2]), (test_tup1[3] & test_tup2[3]), (test_tup1[4] & test_tup2[4]), "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # your code here\n    result_tuple = ()\n    x = test_tup1[0] ^ test_tup2[0]\n    y = test_tup1[1] ^ test_tup2[1]\n    z = test_tup1[2] ^ test_tup2[2]\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tuple = ()\n    for i in range(len(test_tup1)):\n        bitwise_xor_tuple = bitwise_xor_tuple + (test_tup1[i] ^ test_tup2[i],)\n    return bitwise_xor_tuple\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tup = ()\n    for i in range(len(test_tup1)):\n        bitwise_xor_tup = bitwise_xor_tup + (test_tup1[i] ^ test_tup2[i],)\n    return bitwise_xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result_tuple = result_tuple + (1,)\n        else:\n            result_tuple = result_tuple + (0,)\n    return result_tuple\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Write your function here\n    my_set = set(test_list)\n    return len(my_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #Hint: you can directly count how many unique tuples in the list\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = dict()\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        for letter in item:\n            if letter in freq:\n                freq[letter] += 1\n            else:\n                freq[letter] = 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq.keys():\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq.values()\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    frequencies = {}\n    for item in test_list:\n        if item in frequencies:\n            frequencies[item] += 1\n        else:\n            frequencies[item] = 1\n    return frequencies\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(tuple(test_list)))\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # unique_freq = 0\n    # for element in test_list:\n    #     if not test_list.count(element):\n    #         unique_freq += 1\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup_sum = ()\n    for i in range(len(test_tup1)):\n        tup_sum = ()\n        for j in range(len(test_tup1[i])):\n            tup_sum = tup_sum + (test_tup1[i][j] + test_tup2[i][j],)\n        test_tup_sum = test_tup_sum + (tup_sum,)\n    return test_tup_sum\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(sum, zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Input tuple should be same length')\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda a, b: a + b, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1], test_tup1[2] + test_tup2[2])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuple(tup1,tup2):\n        tup3=[]\n        for i in range(len(tup1)):\n            tup3.append((tup1[i]+tup2[i]))\n        return tup3\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(sum,zip(test_tup1,test_tup2)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Flatten both tuples\n    flatten_tup1 = (e for tup in test_tup1 for e in tup)\n    flatten_tup2 = (e for tup in test_tup2 for e in tup)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        print(a,\"is greater than\",b)\n    elif (a<b):\n        print(b,\"is greater than\",a)\n    else:\n        print(a,\"is equal to\",b)\n        \nminimum(3,5)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print('Minimum number in first list:',a)\n    elif a > b:\n        print('Minimum number in first list:',b)\n    else:\n        print('Both are equal')\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print('a is minimum')\n    elif a > b:\n        print('b is minimum')\n    else:\n        print('a is equal to b')\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \nprint(minimum(2,4))\n    \n    \ndef minimum(a,b,c):   \n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \nprint(minimum(2,4,6))\n    \n    \ndef minimum(a,b,c,d):   \n    '''\n    Write a python function to find the minimum of four numbers.\n    '''\n    return min(a,b,c,d)\n    \nprint(minimum(2,4,6,9))\n    \n    \ndef minimum(a,b,c,d,e):   \n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return min(a,b,c,d,e)\n    \nprint(minimum(2,4,6,9,15))\n    \n    \ndef minimum(a,b,c,d,e,f):   \n    '''\n    Write a python function to find the minimum of six numbers.\n    '''\n    return min(a,b,c,d,e,f)\n    \nprint(minimum(2,4,6,9,15,21))\n    \n    \ndef minimum(a,b,c,d,e,f,g):   \n    '''\n    Write a python function to find the minimum of seven numbers.\n    '''\n    return min(a,b,c,d,e,f,g)\n    \nprint(minimum(2,4,6,9,15,21,27))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h):   \n    '''\n    Write a python function to find the minimum of eight numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h)\n    \nprint(minimum(2,4,6,9,15,21,27,33))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i):   \n    '''\n    Write a python function to find the minimum of nine numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j):   \n    '''\n    Write a python function to find the minimum of ten numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k):   \n    '''\n    Write a python function to find the minimum of eleven numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l):   \n    '''\n    Write a python function to find the minimum of twelve numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k,l)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51,57))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m):   \n    '''\n    Write a python function to find the minimum of thirteen numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k,l,m)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51,57,63))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n):   \n    '''\n    Write a python function to find the minimum of fourteen numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k,l,m,n)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51,57,63,69))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o):   \n    '''\n    Write a python function to find the minimum of fifteen numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51,57,63,69,75))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p):   \n    '''\n    Write a python function to find the minimum of sixteen numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51,57,63,69,75,81))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q):   \n    '''\n    Write a python function to find the minimum of seventeen numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51,57,63,69,75,81,93))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r):   \n    '''\n    Write a python function to find the minimum of eighteen numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51,57,63,69,75,81,93,99))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s):   \n    '''\n    Write a python function to find the minimum of nineteen numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51,57,63,69,75,81,93,99,105))\n    \n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t):   \n    '''\n    Write a python function to find the minimum of twenty numbers.\n    '''\n    return min(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t)\n    \nprint(minimum(2,4,6,9,15,21,27,33,39,45,51"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to fin"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    return a\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if(tuplex.count(tuple1) > 0): \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if(tuple1 in tuplex):\n        return True\n    else:\n        return False\n    \n    \ndef reverse_tuple(tuplex):\n    '''\n    Write a function to reverse the order of a tuple.\n    '''\n    tuplex=tuplex[::-1]\n    return tuplex\n    \n    \ndef main():\n    tuplex=(1,2,3,4,5,6)\n    print(\"Original tuple:\",tuplex)\n    print(\"\\nDoes the tuple contain (1, 2, 3, 4, 5, 6)?\",check_tuplex(tuplex,(1, 2, 3, 4, 5, 6)))\n    print(\"\\nReversed tuple:\",reverse_tuple(tuplex))\n    \nif __name__=='__main__':\n    main()"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (tuplex in tuple1)\ntuplex1 = (4,5,6)\ntuplex2 = (3,5,6)\nprint(check_tuplex(tuplex1,tuplex2))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n        else:\n            return False\n    \ndef check_tuplex_2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1.count(tuplex)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 not in tuplex:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for val in tuplex:\n        if val == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex: \n        if item == tuple1: \n            print(\"Yes\") \n            break\n    else: \n        print(\"No\")\n    \n    "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    return 1 if x%2!=0 else 0\n    \n    \n    \n    \n    \n    \n    \ndef find_prime(num):\n    '''\n    Write a python function to find whether a given number is a prime number or not.\n    '''\n    \n    i = 2\n    while(i<=num/2):\n        if(num%i == 0):\n            return False\n        i+=1\n    return True\n    \n    \n    \n    \n    \n    \n    \ndef find_prime_or_not(n):\n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    i = 2\n    while(i<=n/2):\n        if(n%i == 0):\n            return False\n        i+=1\n    return True\n    \n    \n    \n    \n    \n    \n    \ndef find_GCD(x, y):\n    '''\n    Write a python function to find the GCD of two given numbers.\n    '''\n    \n    while(y):\n        x,y = y, x%y\n    return x\n    \n    \n    \n    \n    \n    \n    \ndef find_LCM(x, y):\n    '''\n    Write a python function to find the LCM of two given numbers.\n    '''\n    \n    while(y):\n        x,y = y, x%y\n    return x\n    \n    \n    \n    \n    \n    \ndef find_Exponent(x, y):\n    '''\n    Write a python function to find the exponentiation of two given numbers.\n    '''\n    \n    if y == 0:\n        return 1\n    else:\n        return x*find_Exponent(x, y-1)\n    \n    \n    \n    \n    \n    \ndef find_HCF(x, y):\n    '''\n    Write a python function to find the HCF of two given numbers.\n    '''\n    \n    while(y):\n        x,y = y, x%y\n    return x\n    \n    \n    \n    \n    \n    \ndef find_Decimal_to_Binary(dec):\n    '''\n    Write a python function to convert decimal number to binary.\n    '''\n    \n    if(dec == 0):\n        return 0\n    else:\n        return (dec%2 + find_Decimal_to_Binary(dec//2))\n    \n    \n    \n    \n    \n    \ndef find_Binary_to_Decimal(bin):\n    '''\n    Write a python function to convert binary to decimal.\n    '''\n    \n    dec = 0\n    i = 0\n    while(bin!= 0):\n        dec = dec + (bin%10)*(2**i)\n        i += 1\n        bin = bin//10\n    return dec\n    \n    \n    \n    \n    \n    \ndef find_Decimal_to_octal(dec):\n    '''\n    Write a python function to convert decimal to octal.\n    '''\n    \n    octal = ''\n    i = 0\n    while(dec!= 0):\n        octal = octal + str(dec%8) + octal\n        dec = dec//8\n        i += 1\n    return octal\n    \n    \n    \n    \n    \n    \ndef find_octal_to_decimal(octal):\n    '''\n    Write a python function to convert octal to decimal.\n    '''\n    \n    dec = 0\n    i = 0\n    while(octal!= ''):\n        dec = dec + (octal[i] * (8**i))\n        i += 1\n    return dec\n    \n    \n    \n    \n    \n    \ndef find_Decimal_to_hexadecimal(dec):\n    '''\n    Write a python function to convert decimal to hexadecimal.\n    '''\n    \n    hex = ''\n    i = 0\n    while(dec!= 0):\n        hex = hex + str((dec%16)) + hex\n        dec = dec//16\n        i += 1\n    return hex\n    \n    \n    \n    \n    \n    \ndef find_hexadecimal_to_decimal(hexadecimal):\n    '''\n    Write a python function to convert hexadecimal to decimal.\n    '''\n    \n    dec = 0\n    i = 0\n    while(hexadecimal!= ''):\n        dec = dec + (int(hexadecimal[i]) * (16**i))\n        i += 1\n    return dec\n    \n    \n    \n    \n    \n    \ndef find_hexadecimal_to_binary(hexadecimal):\n    '''\n    Write a python function to convert hexadecimal to binary.\n    '''\n    \n    binary = ''\n    i = 0\n    while(hexadecimal!= ''):\n        binary = binary + str((int(hexadecimal[i]) * (2**(8*i)))/255) + binary\n        i += 1\n    return binary\n    \n    \n    \n    \n    \n    \ndef find_binary_to_hexadecimal(binary):\n    '''\n    Write a python function to convert binary to hexadecimal.\n    '''\n    \n    hexadecimal = ''\n    i = 0\n    while(binary!= ''):\n        hexadecimal = hexadecimal + str((int(binary[i]) * (16**(2*i))) % 256) + hexadecimal\n        i += 1\n    return hexadecimal\n    \n    \n    \n    \n    \n    \ndef find_hexadecimal_to_octal(hexadecimal):\n    '''\n    Write a python function to convert hexadecimal to octal.\n    '''\n    \n    octal = ''\n    i = 0\n    while(hexadecimal!= ''):\n        octal = octal + str((int(hexadecimal[i]) * (8**(2*i))) % 256) + octal\n        i += 1\n    return octal\n    \n    \n    \n    \n    \n    \ndef find_octal_to_hexadecimal(octal):\n    '''\n    Write a python function to convert octal to hexadecimal.\n    '''\n    \n    hexadecimal = ''\n    i = 0\n    while(octal!= ''):\n        hexadecimal = hexadecimal + str((int(octal[i]) * (16**(2*i))) % 256) + hexadecimal\n        i += 1\n    return hexadecimal\n    \n    \n    \n    \n    \n    \ndef find_octal_to_binary(octal):\n    '''\n    Write a python function to convert octal to binary.\n    '''\n    \n    binary = ''\n    i = 0\n    while(octal!= ''):\n        binary = binary + str((int(octal[i]) * (2**(8*i)))/255) + binary\n        i += 1\n    return binary\n    \n    \n    \n    \n    \n    \ndef find_binary_to_octal(binary):\n    '''\n    Write a python function to convert binary to octal.\n    '''\n    \n    octal = ''\n    i = 0\n    while(binary!= ''):\n        octal = octal + str((int(binary[i]) * (8**(2*i))) % 256) + octal\n        i += 1\n    return octal\n    \n    \n    \n    \n    \n    \ndef find_hexadecimal_to_binary(hexadecimal):\n    '''\n    Write a python function to convert hexadecimal to binary.\n    '''\n    \n    binary = ''\n    i = 0\n    while(hexadecimal!= ''):\n        binary = binary + str((int(hexadecimal[i]) * (2**(8*i)))/255) + binary\n        i += 1\n    return binary\n    \n    \n    \n    \n    \n    \ndef find_binary_to_hexadecimal(binary):\n    '''\n    Write a python function to convert binary to hexadecimal.\n    '''\n    \n    hexadecimal = ''\n    i = 0\n    while(binary!= ''):\n        hexadecimal = hexadecimal + str((int(binary[i]) * (16**(2*i))) % 256) + hexadecimal\n        i +"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"even\"\n    else:\n        return \"odd\"\n        "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #initializing variables \n    result = False\n    #initializing number of 1s \n    num_ones = 0\n    #initializing number of 0s \n    num_zeros = 0\n    #initializing number of 1s and 0s \n    num_ones_and_zeros = 0\n    #initializing number of 1s and 0s \n    num_ones_and_zeros = 0\n    #initializing number of 1s and 0s \n    num_ones_and_zeros = 0\n    \n    #iterating from left to right to check for parity \n    for i in range(len(x)): \n        #if x[i] == 1 \n        if x[i] == 1: \n            #increment num_ones \n            num_ones += 1\n        elif x[i] == 0: \n            #increment num_zeros \n            num_zeros += 1\n        else: \n            #increment num_ones_and_zeros \n            num_ones_and_zeros += 1\n        \n    #checking parity \n    if num_ones%2 == 0 and num_zeros%2 == 0: \n        #checking if parity is even \n        result = False\n    elif num_ones%2 == 0 and num_zeros%2 == 1: \n        #if parity is even \n        result = True\n    else: \n        #if parity is odd \n        result = True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x & 1\n    return y\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        print('Even')\n    else:\n        print('Odd')\n        \nfind_Parity(3)\nfind_Parity(8)\nfind_Parity(4)\nfind_Parity(5)\nfind_Parity(6)\nfind_Parity(7)\nfind_Parity(11)\nfind_Parity(1)\nfind_Parity(5)\nfind_Parity(12)\nfind_Parity(20)\nfind_Parity(31)\nfind_Parity(24)\nfind_Parity(25)\nfind_Parity(25)\nfind_Parity(50)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    Parity = 0\n    while (x % 2 == 0):\n        x = x // 2\n        Parity = Parity + 1\n    return Parity\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0:\n        parity = parity ^ x%10\n        x = x//10\n    if parity%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Input Format\n    # A single integer number\n    # Output Format\n    # Output \"odd\" if number is odd, \"even\" if number is even.\n    \n    # Logic\n    # If odd, return \"odd\" else \"even\"\n    \n    # Example 1\n    # Input\n    # 3\n    # Output\n    # \"odd\"\n    \n    # Example 2\n    # Input\n    # 5\n    # Output\n    # \"even\"\n    \n    # Example 3\n    # Input\n    # 7\n    # Output\n    # \"odd\"\n    \n    # Example 4\n    # Input\n    # 7\n    # Output\n    # \"odd\"\n    \n    # Example 5\n    # Input\n    # 1\n    # Output\n    # \"even\"\n    \n    # Explanation\n    # Since the input is 1, parity is even.\n    \n    # Your Task\n    # The task is to complete the function find_Parity() which should return a string as described.\n    \n    # Hint:\n    # A number is odd if it is odd, else even.\n    \n    # User Task\n    # Your task is to complete the function find_Parity() which should return a string as described.\n    \n    # Constraints:\n    # 1 <= N <= 109\n    # The function must return a string.\n    \n    \n    #  { \n    #  Driver Code Starts\n    #Initial Template for Python 3\nimport atexit\nimport io\nimport sys\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return n\n    else:\n        n = str(n)\n        if n[0] == '9':\n            if n[1] == '9':\n                return 99999\n            else:\n                return int(n[0])*10 + int(n[1])+1\n        else:\n            if n[1] == '9':\n                return int(n[0])*10 + 9 +1\n            else:\n                return int(n[0])*10 + int(n[1])+1\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = int(n)\n    max = 9\n    s = str(max)\n    n = int(s + n[1:])\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = sorted(n, reverse = True)\n    return int(''.join(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n = sorted(n, reverse = True)\n    \n    x = int(\"\".join(n))\n    \n    return x\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Since the number cannot contain the same digit twice, we can simply swap the two values\n    # The numbers are reversed and hence we can just use two pointers:\n    # pointer_1 = 1 -> 2 -> 3 -> 4 -> 5 -> 6\n    # pointer_2 = 6 -> 5 -> 4 -> 3 -> 2 -> 1\n    # The value of the number at position pointer_2 will be the next bigger number.\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    number = str(n)\n    \n    # Reversing the number\n    number = list(reversed(number))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)-1):\n        if n[i] < n[i+1]:\n            if i!= 0:\n                temp = n[i]\n                n = n[:i] + n[i+1:]\n                n = n + temp\n            else:\n                continue\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    if s[0] == '9':\n        return '9'\n    if s[0] > s[1]:\n        return '1' + s[1] + s[0] + '1'\n    for i in range(len(s)-1):\n        if s[i] > s[i+1]:\n            return s[:i+1] + '1' + s[i+1] + s[i+2:]\n    return s\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def swap(a,b):\n        return b,a\n    def swap_list(a):\n        a.reverse()\n        return a\n    def next_bigger(n):\n        '''\n        Write a function to swap the number's digits in order to get the next bigger number.\n        '''\n        n_list = list(str(n))\n        if len(n_list) == 1:\n            return -1\n        if len(n_list) == 2:\n            return int(n_list[0])>int(n_list[1])\n        for i in range(len(n_list)-1):\n            if int(n_list[i])>int(n_list[i+1]):\n                n_list.pop(i+1)\n                n_list.pop(i)\n                n_list.append(str(int(n_list[i])-1))\n                n_list.append(str(int(n_list[i])+1))\n                return int(\"\".join(n_list))\n        return -1\n    print(next_bigger(34521))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = 0\n    while(n):\n        result = result * 10 + n % 10\n        n = n // 10\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    for i in range(len(digits)):\n        if digits[i] == '0':\n            digits[i] = '1'\n            break\n        elif digits[i] == '1':\n            digits[i] = '2'\n            break\n    if n > 0:\n        digits.reverse()\n    else:\n        digits.reverse()\n        digits.reverse()\n        digits.reverse()\n        digits.append('0')\n    return int(''.join(digits))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    i = 0\n    j = 0\n    total_list = []\n    heap = []\n    # print(nums1)\n    # print(nums2)\n    for x in range(k):\n        total_list.append([nums1[i],nums2[j]])\n        i += 1\n        j += 1\n        if i >= len(nums1):\n            break\n        elif j >= len(nums2):\n            break\n        else:\n            heapq.heappush(heap,(nums1[i]*nums2[j],[nums1[i],nums2[j]]))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def heapq_pairs(nums1, nums2, k):\n        pairs = []\n        i,j = 0,0\n        while i < len(nums1) and j < len(nums2):\n            pairs.append((nums1[i], nums2[j]))\n            heapq.heappush(pairs, (nums1[i], nums2[j]))\n            i += 1\n            j += 1\n        return pairs[:k]\n    return heapq_pairs(nums1, nums2, k)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time: O(n log n + m log m)\n    # Space: O(n + m)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    res = []\n    def get_k_pairs(nums1, nums2, k, k_left, k_right, k_dict):\n        if k_left >= k:\n            return\n        if k_left == 0 and k_right == 0:\n            return\n        if k_left == 0:\n            num = heapq.heappop(nums2)\n            k_dict[num] = num\n            res.append((nums1[k_dict[num]], num))\n            k_left -= 1\n        elif k_right == 0:\n            num = heapq.heappop(nums1)\n            k_dict[num] = num\n            res.append((num, nums2[k_dict[num]]))\n            k_right += 1\n        else:\n            num1 = heapq.heappop(nums1)\n            num2 = heapq.heappop(nums2)\n            k_dict[num1] = num1\n            k_dict[num2] = num2\n            res.append((num1, num2))\n            k_left -= 1\n            k_right += 1\n        get_k_pairs(nums1, nums2, k, k_left, k_right, k_dict)\n    get_k_pairs(nums1, nums2, k, n, m, {})\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Solution 1: Brute Force\n    # O(n2) time | O(n) space\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append((nums1[i], nums2[j]))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    def k_smallest_pairs_inner(nums1, nums2, k):\n        if len(nums1) == 0:\n            return []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    result = []\n    if not nums1 or not nums2 or k > len(nums1) + len(nums2):\n        return result\n    i = 0\n    j = 0\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    while len(result) < k and i < len(nums1) and j < len(nums2):\n        if nums1[i] <= nums2[j]:\n            result.append((nums1[i], nums2[j]))\n            i += 1\n        else:\n            j += 1\n        if i == len(nums1):\n            break\n        if j == len(nums2):\n            break\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_pairs_with_smallest_sum(nums1, nums2, k):\n        d = {}\n        for num1, num2 in zip(nums1, nums2):\n            d.setdefault(num1, []).append(num2)\n        return d\n    return list(map(lambda a, b: (min(a, b), max(a, b)), \n        zip(*map(lambda a, b: k_pairs_with_smallest_sum(a, b, k), nums1, nums2))))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Your code here\n    from collections import defaultdict\n    from heapq import heappop, heappush\n    d = defaultdict(list)\n    for num1 in nums1:\n        d[num1].append(0)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    res = []\n    i = 0\n    j = 0\n    while len(heap) < k and i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            heapq.heappush(heap, (nums1[i], nums2[j]))\n        i += 1\n    \n    while heap and k > 0:\n        res.append(heapq.heappop(heap))\n        k -= 1\n    return res\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]\n    for elem in list1:\n        if elem[0] < min_product:\n            min_product = elem[0]\n    for elem in list1:\n        if elem[1] < min_product:\n            min_product = elem[1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = float('inf')\n    result = None\n    for i in list1:\n        temp = i[0]*i[1]\n        if temp < min:\n            result = i\n            min = temp\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    x = (list1)\n    mins = min(x, key = lambda a: a[0] * a[1])\n    return mins\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        if list1[i][0] * list1[i][1] < min_product:\n            min_product = list1[i][0] * list1[i][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 100000\n    for index in range(len(list1)-1):\n        for next_index in range(index+1,len(list1)):\n            if list1[index][0]*list1[next_index][0] < min_product:\n                min_product = list1[index][0]*list1[next_index][0]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0] * list1[j][0] < min_product:\n                min_product = list1[i][0] * list1[j][0]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # creating list of tuples\n    list_of_tuples = []\n    for i in range(len(list1)):\n        list_of_tuples.append((list1[i][0], list1[i][1]))\n    \n    # sorting list of tuples\n    list_of_tuples.sort()\n    print('list of tuples :', list_of_tuples)\n    \n    # minimum product\n    min_product = list_of_tuples[0][0] * list_of_tuples[0][1]\n    print('minimum product :', min_product)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = min(product, list1[i][0] * list1[j][0], list1[i][1] * list1[j][1])\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l1=list(list1)\n    #print(l1)\n    l2=[]\n    for i in range(len(l1)):\n        l3=[]\n        for j in range(i,len(l1)):\n            l3.append(l1[j])\n        l2.append(tuple(l3))\n    #print(l2)\n    l3=[]\n    for i in range(len(l2)):\n        l4=[]\n        for j in range(len(l2[i])):\n            l4.append(l2[i][j])\n        l3.append(tuple(l4))\n    #print(l3)\n    l4=[]\n    for i in range(len(l3)):\n        l5=[]\n        for j in range(len(l3[i])):\n            l5.append(l3[i][j])\n        l4.append(tuple(l5))\n    #print(l4)\n    l5=[]\n    for i in range(len(l4)):\n        l6=[]\n        for j in range(len(l4[i])):\n            l6.append(l4[i][j])\n        l5.append(tuple(l6))\n    #print(l5)\n    l6=[]\n    for i in range(len(l5)):\n        l7=[]\n        for j in range(len(l5[i])):\n            l7.append(l5[i][j])\n        l6.append(tuple(l7))\n    #print(l6)\n    l7=[]\n    for i in range(len(l6)):\n        l8=[]\n        for j in range(len(l6[i])):\n            l8.append(l6[i][j])\n        l7.append(tuple(l8))\n    #print(l7)\n    l8=[]\n    for i in range(len(l7)):\n        l9=[]\n        for j in range(len(l7[i])):\n            l9.append(l7[i][j])\n        l8.append(tuple(l9))\n    #print(l8)\n    l9=[]\n    for i in range(len(l8)):\n        l10=[]\n        for j in range(len(l8[i])):\n            l10.append(l8[i][j])\n        l9.append(tuple(l10))\n    #print(l9)\n    l10=[]\n    for i in range(len(l9)):\n        l11=[]\n        for j in range(len(l9[i])):\n            l11.append(l9[i][j])\n        l10.append(tuple(l11))\n    #print(l10)\n    l11=[]\n    for i in range(len(l10)):\n        l12=[]\n        for j in range(len(l10[i])):\n            l12.append(l10[i][j])\n        l11.append(tuple(l12))\n    #print(l11)\n    l12=[]\n    for i in range(len(l11)):\n        l13=[]\n        for j in range(len(l11[i])):\n            l13.append(l11[i][j])\n        l12.append(tuple(l13))\n    #print(l12)\n    l13=[]\n    for i in range(len(l12)):\n        l14=[]\n        for j in range(len(l12[i])):\n            l14.append(l12[i][j])\n        l13.append(tuple(l14))\n    #print(l13)\n    l14=[]\n    for i in range(len(l13)):\n        l15=[]\n        for j in range(len(l13[i])):\n            l15.append(l13[i][j])\n        l14.append(tuple(l15))\n    #print(l14)\n    l15=[]\n    for i in range(len(l14)):\n        l16=[]\n        for j in range(len(l14[i])):\n            l16.append(l14[i][j])\n        l15.append(tuple(l16))\n    #print(l15)\n    l16=[]\n    for i in range(len(l15)):\n        l17=[]\n        for j in range(len(l15[i])):\n            l17.append(l15[i][j])\n        l16.append(tuple(l17))\n    #print(l16)\n    l17=[]\n    for i in range(len(l16)):\n        l18=[]\n        for j in range(len(l16[i])):\n            l18.append(l16[i][j])\n        l17.append(tuple(l18))\n    #print(l17)\n    l18=[]\n    for i in range(len(l17)):\n        l19=[]\n        for j in range(len(l17[i])):\n            l19.append(l17[i][j])\n        l18.append(tuple(l19))\n    #print(l18)\n    l19=[]\n    for i in range(len(l18)):\n        l20=[]\n        for j in range(len(l18[i])):\n            l20.append(l18[i][j])\n        l19.append(tuple(l20))\n    #print(l19)\n    l20=[]\n    for i in range(len(l19)):\n        l21=[]\n        for j in range(len(l19[i])):\n            l21.append(l19[i][j])\n        l20.append(tuple(l21))\n    #print(l20)\n    l21=[]\n    for i in range(len(l20)):\n        l22=[]\n        for j in range(len(l20[i])):\n            l22.append(l20[i][j])\n        l21.append(tuple(l22))\n    #print(l21)\n    l22=[]\n    for i in range(len(l21)):\n        l23=[]\n        for j in range(len(l21[i])):\n            l23.append(l21[i][j])\n        l22.append(tuple(l23))\n    #print(l22)\n    l23=[]\n    for i in range(len(l22)):\n        l24=[]\n        for j in range(len(l22[i])):\n            l24.append(l22[i][j])\n        l23.append(tuple(l24))\n    #print(l23)\n    l24=[]\n    for i in range(len(l23)):\n        l25=[]\n        for j in range(len(l23[i])):\n            l25.append(l23[i][j])\n        l24.append(tuple(l25))\n    #print(l24)\n    l25=[]\n    for i in range(len(l24)):\n        l26=[]\n        for j in range(len(l24[i])):\n            l26.append(l24[i][j])\n        l25.append(tuple(l26))\n    #print(l25)\n    l26=[]\n    for i in range(len(l25)):\n        l27=[]\n        for j in range(len(l25[i])):\n            l27.append(l25[i][j])\n        l26.append(tuple(l27))\n    #print(l26)\n    l27=[]\n    for i in range(len(l26)):\n        l28=[]\n        for j in range(len(l26[i])):\n            l28.append(l26[i][j])\n        l27.append(tuple(l28))\n    #print(l27)\n    l28=[]\n    for i in range(len(l27)):\n        l29=[]\n        for j in range(len(l27[i])):\n        "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    list1 = sorted(list1, key=lambda x: x[0])\n    list1 = sorted(list1, key=lambda x: x[1])\n    for i in range(len(list1)):\n        if min_product == None:\n            min_product = list1[i][0] * list1[i][1]\n        if min_product > list1[i][0] * list1[i][1]:\n            min_product = list1[i][0] * list1[i][1]\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    if len(listval)==1:\n        return listval[0]\n    if len(listval)==2:\n        return min(listval[0],listval[1])\n    min_val=min(listval[0],listval[1])\n    for i in range(2,len(listval)):\n        if listval[i]<min_val:\n            min_val=listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = min(listval)\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval= listval[0]\n    for i in listval:\n        if i<minval:\n            minval=i\n    return minval\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval= listval[0]\n    for i in listval:\n        if i>maxval:\n            maxval=i\n    return maxval\ndef sum_val(listval):\n    '''\n    Write a function to find the sum of all the numbers in a heterogeneous list.\n    '''\n    sumval=0\n    for i in listval:\n        sumval=sumval+i\n    return sumval\ndef sort_asc(listval):\n    '''\n    Write a function to sort the heterogeneous list in ascending order.\n    '''\n    listval.sort()\n    return listval\ndef sort_des(listval):\n    '''\n    Write a function to sort the heterogeneous list in descending order.\n    '''\n    listval.sort(reverse=True)\n    return listval\ndef count_val(listval,val):\n    '''\n    Write a function to count the number of elements in a heterogeneous list that contains a given value.\n    '''\n    count=0\n    for i in listval:\n        if i==val:\n            count=count+1\n    return count\ndef in_val(listval,val):\n    '''\n    Write a function to check whether a value is in a heterogeneous list.\n    '''\n    if val in listval:\n        return True\n    else:\n        return False\ndef insert_val(listval,val):\n    '''\n    Write a function to insert a value into a heterogeneous list.\n    '''\n    listval.append(val)\n    return listval\ndef pop_val(listval):\n    '''\n    Write a function to pop and return the last value in a heterogeneous list.\n    '''\n    return listval.pop()\ndef reverse_val(listval):\n    '''\n    Write a function to reverse a heterogeneous list.\n    '''\n    listval.reverse()\n    return listval\ndef remove_val(listval,val):\n    '''\n    Write a function to remove all occurrences of a value from a heterogeneous list.\n    '''\n    for i in range(len(listval)):\n        if listval[i]==val:\n            del listval[i]\n    return listval\ndef unique_val(listval):\n    '''\n    Write a function to remove all duplicate values from a heterogeneous list.\n    '''\n    for i in listval:\n        if listval.count(i)>1:\n            listval.remove(i)\n    return listval\ndef div_val(listval):\n    '''\n    Write a function to divide a heterogeneous list into two lists of equal size.\n    '''\n    new_list1=[]\n    new_list2=[]\n    for i in range(0,len(listval)//2):\n        new_list1.append(listval[i])\n    for i in range(len(listval)//2,len(listval)):\n        new_list2.append(listval[i])\n    return (new_list1,new_list2)\ndef list_merge(list1,list2):\n    '''\n    Write a function to merge two heterogeneous lists.\n    '''\n    for i in range(0,len(list1)):\n        list1[i]=list1[i]+list2[i]\n    return list1\ndef str_rev(listval):\n    '''\n    Write a function to reverse the string value of a heterogeneous list.\n    '''\n    listval=listval[::-1]\n    return listval\ndef count_str(listval):\n    '''\n    Write a function to count the number of characters in a heterogeneous list.\n    '''\n    count=0\n    for i in listval:\n        count=count+len(i)\n    return count\ndef str_to_int(listval):\n    '''\n    Write a function to convert the string value of a heterogeneous list to integer.\n    '''\n    for i in range(0,len(listval)):\n        listval[i]=int(listval[i])\n    return listval\ndef int_to_str(listval):\n    '''\n    Write a function to convert the integer value of a heterogeneous list to string.\n    '''\n    for i in range(0,len(listval)):\n        listval[i]=str(listval[i])\n    return listval\ndef max_int(listval):\n    '''\n    Write a function to find the maximum integer value in a heterogeneous list.\n    '''\n    maxval=listval[0]\n    for i in listval:\n        if i>maxval:\n            maxval=i\n    return maxval\ndef min_int(listval):\n    '''\n    Write a function to find the minimum integer value in a heterogeneous list.\n    '''\n    minval=listval[0]\n    for i in listval:\n        if i<minval:\n            minval=i\n    return minval\ndef sum_int(listval):\n    '''\n    Write a function to find the sum of all the integer values in a heterogeneous list.\n    '''\n    sumval=0\n    for i in listval:\n        sumval=sumval+i\n    return sumval\ndef sort_asc_int(listval):\n    '''\n    Write a function to sort the heterogeneous list in ascending order.\n    '''\n    listval.sort()\n    return listval\ndef sort_des_int(listval):\n    '''\n    Write a function to sort the heterogeneous list in descending order.\n    '''\n    listval.sort(reverse=True)\n    return listval\ndef count_int(listval,val):\n    '''\n    Write a function to count the number of times an integer value is repeated in a heterogeneous list.\n    '''\n    count=0\n    for i in listval:\n        if i==val:\n            count=count+1\n    return count\ndef in_int(listval,val):\n    '''\n    Write a function to check whether an integer value is in a heterogeneous list.\n    '''\n    if val in listval:\n        return True\n    else:\n        return False\ndef insert_int(listval,val):\n    '''\n    Write a function to insert a integer value into a heterogeneous list.\n    '''\n    listval.append(val)\n    return listval\ndef pop_int(listval):\n    '''\n    Write a function to pop and return the last integer value in a heterogeneous list.\n    '''\n    return listval.pop()\ndef reverse_int(listval):\n    '''\n    Write a function to reverse a heterogeneous list.\n    '''\n    listval.reverse()\n    return listval\ndef remove_int(listval,val):\n    '''\n    Write a function to remove all occurrences of an integer value from a heterogeneous list.\n    '''\n    for i in range(len(listval)):\n        if listval[i]==val:\n            del listval[i]\n    return listval\ndef unique_int(listval):\n    '''\n    Write a function to remove all duplicate integers from a heterogeneous list.\n    '''\n    for i in listval:\n        if listval.count(i)>1:\n            listval.remove(i)\n    return listval\ndef div_int(listval):\n    '''\n    Write a function to divide a heterogeneous list into two lists of equal size.\n    '''\n    new_list1=[]\n    new_list2=[]\n    for i in range(0,len(listval)//2):\n        new_list1.append(listval[i])\n    for i in range(len(listval)//2,len(listval)):\n        new_list2.append(listval[i])\n    return (new_list1,new_list2)\ndef str_to_float(listval):\n    '''\n    Write a function to convert the string value of a heterogeneous list to float.\n    '''\n    for i in range(0,len(listval)):\n        lis"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == None:\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    capital_words = words[0].capitalize()\n    for w in words[1:]:\n        capital_words += w.capitalize()\n    return capital_words\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    \n    if not word.isalpha():\n        return None\n    \n    new_word = word.replace('_','')\n    \n    return new_word.title()\n    \n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # your code here\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # TODO: Write your solution here\n    # Start with the input word\n    words = word.split('_')\n    # Convert word from all caps to all lower case\n    words = map(str.lower, words)\n    # Capitalize first letter\n    words = words.capitalize()\n    # Join the words with underscores\n    return ''.join(words)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_camel = word[0].lower()\n    for i in range(1, len(word)):\n        if word[i]!= '_':\n            word_camel = word_camel + word[i].lower()\n        else:\n            word_camel = word_camel + word[i].upper()\n    return word_camel\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel = word\n    word_list = list(word)\n    i = 0\n    while i < len(word_list):\n        if word_list[i].islower():\n            camel = camel + word_list[i].upper()\n        else:\n            camel = camel + word_list[i]\n        i += 1\n    return camel\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace(\"_\", \"\")\n    word = word.replace(\"-\", \"\")\n    word = word.title()\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    out=''\n    for ch in word:\n        if ch=='_':\n            out+='_'\n        else:\n            out+=ch.capitalize()\n    return out\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_dict = {'a': 'A',\n                  'b': 'B',\n                  'c': 'C',\n                  'd': 'D',\n                  'e': 'E',\n                  'f': 'F',\n                  'g': 'G',\n                  'h': 'H',\n                  'i': 'I',\n                  'j': 'J',\n                  'k': 'K',\n                  'l': 'L',\n                 'm': 'M',\n                  'n': 'N',\n                  'o': 'O',\n                  'p': 'P',\n                  'q': 'Q',\n                  'r': 'R',\n                 's': 'S',\n                  't': 'T',\n                  'u': 'U',\n                  'v': 'V',\n                  'w': 'W',\n                  'x': 'X',\n                  'y': 'Y',\n                  'z': 'Z'}\n    \n    if re.search('_+', word):\n        new_word = ''\n        for i in word:\n            if i.isupper():\n                new_word += i\n            else:\n                new_word += i.lower()\n        word = new_word\n    else:\n        word = word.title()\n    return snake_dict[word]\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    word = word.lower()\n    snake_dict = {'a': 'A',\n                  'b': 'B',\n                  'c': 'C',\n                  'd': 'D',\n                  'e': 'E',\n                  'f': 'F',\n                  'g': 'G',\n                  'h': 'H',\n                  'i': 'I',\n                  'j': 'J',\n                  'k': 'K',\n                  'l': 'L',\n                 'm': 'M',\n                  'n': 'N',\n                  'o': 'O',\n                  'p': 'P',\n                  'q': 'Q',\n                  'r': 'R',\n                 's': 'S',\n                  't': 'T',\n                  'u': 'U',\n                  'v': 'V',\n                  'w': 'W',\n                  'x': 'X',\n                  'y': 'Y',\n                  'z': 'Z'}\n    \n    new_word = ''\n    for i in word:\n        if i.isupper():\n            new_word += i.lower()\n        else:\n            new_word += i\n    word = new_word\n    return snake_dict[word]\n    \ndef check_solution(solution, test_solution):\n    '''\n    Write a function to check if the given solution is same as the given test solution.\n    '''\n    \n    if type(solution) == list:\n        solution =''.join(solution)\n    if type(test_solution) == list:\n        test_solution =''.join(test_solution)\n    if type(solution) == str:\n        solution = solution.split(' ')\n    if type(test_solution) == str:\n        test_solution = test_solution.split(' ')\n    \n    if set(solution) == set(test_solution):\n        return True\n    else:\n        return False\n    \n    \ndef find_difference(solution, test_solution):\n    '''\n    Write a function to find the difference between the given solution and the given test solution.\n    '''\n    \n    if type(solution) == list:\n        solution =''.join(solution)\n    if type(test_solution) == list:\n        test_solution =''.join(test_solution)\n    if type(solution) == str:\n        solution = solution.split(' ')\n    if type(test_solution) == str:\n        test_solution = test_solution.split(' ')\n    \n    set_solution = set(solution)\n    set_test_solution = set(test_solution)\n    \n    set_union = set_solution | set_test_solution\n    set_difference = set_solution - set_test_solution\n    \n    diff_solution = []\n    diff_test_solution = []\n    \n    for i in set_difference:\n        if i.isupper():\n            diff_solution.append(i)\n        else:\n            diff_test_solution.append(i)\n    \n    return diff_solution, diff_test_solution\n    \ndef find_missed_words(solution, test_solution):\n    '''\n    Write a function to find the missing words from the given solution and the given test solution.\n    '''\n    \n    if type(solution) == list:\n        solution =''.join(solution)\n    if type(test_solution) == list:\n        test_solution =''.join(test_solution)\n    if type(solution) == str:\n        solution = solution.split(' ')\n    if type(test_solution) == str:\n        test_solution = test_solution.split(' ')\n    \n    solution = solution.split(' ')\n    test_solution = test_solution.split(' ')\n    \n    set_solution = set(solution)\n    set_test_solution = set(test_solution)\n    \n    set_solution_test_solution = set_solution & set_test_solution\n    set_solution_test_solution = list(set_solution_test_solution)\n    \n    diff_solution = []\n    diff_test_solution = []\n    \n    for i in set_solution_test_solution:\n        if i.isupper():\n            diff_solution.append(i)\n        else:\n            diff_test_solution.append(i)\n    \n    return diff_solution, diff_test_solution\n    \ndef find_repeated_words(solution, test_solution):\n    '''\n    Write a function to find the repeated words from the given solution and the given test solution.\n    '''\n    \n    if type(solution) == list:\n        solution =''.join(solution)\n    if type(test_solution) == list:\n        test_solution =''.join(test_solution)\n    if type(solution) == str:\n        solution = solution.split(' ')\n    if type(test_solution) == str:\n        test_solution = test_solution.split(' ')\n    \n    solution = solution.split(' ')\n    test_solution = test_solution.split(' ')\n    \n    set_solution = set(solution)\n    set_test_solution = set(test_solution)\n    \n    set_solution_test_solution = set_solution & set_test_solution\n    set_solution_test_solution = list(set_solution_test_solution)\n    \n    return set_solution_test_solution\n    \ndef find_capitalized_words(solution, test_solution):\n    '''\n    Write a function to find the capitalized words from the given solution and the given test solution.\n    '''\n    \n    if type(solution) == list:\n        solution =''.join(solution)\n    if type(test_solution) == list:\n        test_solution =''.join(test_solution)\n    if type(solution) == str:\n        solution = solution.split(' ')\n    if type(test_solution) == str:\n        test_solution = test_solution.split(' ')\n    \n    solution = solution.split(' ')\n    test_solution = test_solution.split(' ')\n    \n    set_solution = set(solution)\n    set_test_solution = set(test_solution)\n    \n    set_solution_test_solution = set_solution & set_test_solution\n    set_"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([''+ w.title() if i!= 0 else w for i, w in enumerate(re.split('_+', word))])\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort(reverse=True)\n    for i in range(len(l)):\n        if i%2==0:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2 == 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # iterate through list\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    x = []\n    for i in l:\n        if i%2 == 0:\n            x.append(i)\n    return x\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)-1,-1,-1):\n        if l[i] % 2 == 0:\n            l.remove(l[i])\n        else:\n            continue\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #List comprehension\n    #odd_list = list(filter(lambda x: x%2 == 0, l))\n    odd_list = []\n    for num in l:\n        if num%2 == 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::-1]\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            l.remove(l[i])\n    return l[::-1]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::-2]\n    return l\n    \nprint(remove_odd([1,2,3,4,5,6,7]))\nprint(remove_odd([1,2,3,4,5,6,7,8,9]))\nprint(remove_odd(['a','b','c','d','e']))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            del(l[i])\n    return l\n    \n    \ndef remove_odd_v2(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # l = l[0:len(l)//2]\n    return l[0:len(l)-1]\n    \n    \ndef remove_odd_v3(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::2]\n    return l\n    \n    \ndef remove_odd_v4(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v5(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v6(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v7(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v8(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v9(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v10(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v11(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v12(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v13(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v14(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v15(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v16(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v17(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v18(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v19(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v20(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v21(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v22(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v23(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v24(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v25(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v26(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v27(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v28(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v29(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v30(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v31(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v32(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v33(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v34(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v35(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v36(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2!= 0, l))\n    \n    \ndef remove_odd_v37(l):"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i == n-1:\n            new_list.append(list1[i][0])\n        else:\n            new_list.append(list1[i][1])\n    return new_list\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    # n = 1\n    #\n    # if len(list1) > 0:\n    #     list2 = []\n    #     for i in list1:\n    #         list2.append(i[n-1])\n    #     return list2\n    # return []\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0 or n >= len(list1):\n        raise ValueError(\"invalid n\")\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list1)[n-1]\n    \nlist1 = [('sachin','mohan'), ('hari','mohan'), ('yogendra', 'rohit'), ('gaurav', 'rohit'), ('sachin', 'rohit')]\nn = 4\nprint(extract_nth_element(list1, n))\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # create a new empty list\n    list2 = []\n    # iterate over the list\n    for item in list1:\n        # add the item to the new list\n        list2.append(item[n-1])\n    # return the list\n    return list2\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    l1 = sorted(list1)\n    l2 = sorted(list2)\n    for i in range(len(l2)):\n        if l2[i] in l1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                flag = 1\n                break\n    if flag:\n        print(f\"Overlapping Values: {i} and {j}\")\n    else:\n        print(\"No Overlapping Values\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \nlist1 = [1,2,3,4]\nlist2 = [1,2,3,4]\nprint(overlapping(list1,list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    n1 = len(list1)\n    n2 = len(list2)\n    i = 0\n    j = 0\n    for i in range(n1):\n        for j in range(n2):\n            if list1[i] == list2[j]:\n                print(list1[i])\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    ans = False\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            ans = True\n            break\n    return ans\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    largest = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            x = arr[i] * arr[j]\n            if x > largest: \n                largest = x\n    return largest\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n == 0 or n == 1:\n        print(\"Invalid Array\")\n    elif n == 2:\n        print(\"Maximum Pair is\", arr[0] * arr[1])\n    else:\n        # sort the array in ascending order\n        arr.sort()\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_prod:\n                max_prod = arr[i]*arr[j]\n    print(max_prod)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxi = -1\n    maxj = -1\n    max_prod = -1\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > max_prod:\n                maxi = i\n                maxj = j\n                max_prod = prod\n    print(\"Highest Product pair = \",arr[maxi],arr[maxj])\nmax_Product([2,3,4,5,6,7,8,9,10])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i]*arr[j] > res:\n                res = arr[i]*arr[j]\n    return res\n    \n    "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    \n    def findMaxProd(arr, max_prod): \n        prod = 1\n        max_prod = 1\n        for i in range(len(arr)): \n            for j in range(i+1, len(arr)): \n                print(prod, max_prod)\n                prod *= arr[i]\n                if prod > max_prod: \n                    max_prod = prod \n                prod //= arr[j] \n            prod = 1\n        return max_prod \n    return findMaxProd(arr, max_prod) \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]*arr[1]\n    for i in range(2,len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if arr == []:\n        return None\n    highest_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] * arr[j] > highest_product and i!= j:\n                highest_product = arr[i] * arr[j]\n    return highest_product\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    a, b = 0, 0\n    for i in arr:\n        if i > a:\n            a = i\n    for i in arr:\n        if i > b and i <= a:\n            b = i\n    return a, b\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    maxProduct = -999999\n    max1 = max2 = -999999\n    for i in range(0, n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > maxProduct:\n                max1 = i\n                max2 = j\n                maxProduct = product\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    s = set()\n    for i in Input:\n        s.add(i[0])\n    return s\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group_list=[]\n    for i in range(len(Input)):\n        group_list.append(Input[i][0])\n    group_list = list(set(group_list))\n    group_list = sorted(group_list)\n    return group_list\ndef find_mode(Input):\n    '''\n    Write a function to find mode of a given list of numbers.\n    '''\n    group_list=[]\n    for i in range(len(Input)):\n        group_list.append(Input[i])\n    group_list = list(set(group_list))\n    group_list = sorted(group_list)\n    mode_count=0\n    mode_num=group_list[0]\n    for i in range(1,len(group_list)):\n        if group_list[i]==group_list[i-1]:\n            mode_count+=1\n        else:\n            mode_count=1\n        if mode_count>mode_count:\n            mode_count=mode_count\n            mode_num=group_list[i]\n    return mode_num\ndef find_median(Input):\n    '''\n    Write a function to find median of a given list of numbers.\n    '''\n    group_list=[]\n    for i in range(len(Input)):\n        group_list.append(Input[i])\n    group_list = list(set(group_list))\n    group_list = sorted(group_list)\n    mid=len(group_list)//2\n    if len(group_list)%2!=0:\n        median=group_list[mid]\n    else:\n        median=(group_list[mid-1]+group_list[mid])/2\n    return median\ndef find_median_in_list(Input):\n    '''\n    Write a function to find median of a given list of numbers.\n    '''\n    group_list=[]\n    for i in range(len(Input)):\n        group_list.append(Input[i])\n    group_list = list(set(group_list))\n    group_list = sorted(group_list)\n    mid=len(group_list)//2\n    if len(group_list)%2!=0:\n        median=group_list[mid]\n    else:\n        median=(group_list[mid-1]+group_list[mid])/2\n    return median\ndef find_standard_deviation(Input):\n    '''\n    Write a function to find standard deviation of a given list of numbers.\n    '''\n    group_list=[]\n    for i in range(len(Input)):\n        group_list.append(Input[i])\n    group_list = list(set(group_list))\n    group_list = sorted(group_list)\n    mean_list=[]\n    for i in range(len(group_list)):\n        mean_list.append(group_list[i])\n    for i in range(len(group_list)):\n        mean_list[i]=group_list[i]\n    for i in range(len(group_list)):\n        mean_list[i]=mean_list[i]/len(Input)\n    #print(mean_list)\n    sum=0\n    for i in range(len(group_list)):\n        sum+=mean_list[i]\n    stdev=0\n    for i in range(len(group_list)):\n        stdev+=(mean_list[i]-sum)**2\n    stdev=stdev/(len(Input)-1)\n    stdev=stdev**0.5\n    return stdev\ndef find_standard_deviation_of_list(Input):\n    '''\n    Write a function to find standard deviation of a given list of numbers.\n    '''\n    group_list=[]\n    for i in range(len(Input)):\n        group_list.append(Input[i])\n    group_list = list(set(group_list))\n    group_list = sorted(group_list)\n    mean_list=[]\n    for i in range(len(group_list)):\n        mean_list.append(group_list[i])\n    for i in range(len(group_list)):\n        mean_list[i]=group_list[i]\n    for i in range(len(group_list)):\n        mean_list[i]=mean_list[i]/len(Input)\n    #print(mean_list)\n    sum=0\n    for i in range(len(group_list)):\n        sum+=mean_list[i]\n    stdev=0\n    for i in range(len(group_list)):\n        stdev+=(mean_list[i]-sum)**2\n    stdev=stdev/(len(Input)-1)\n    stdev=stdev**0.5\n    return stdev\ndef find_correlation(Input):\n    '''\n    Write a function to find correlation of two given lists of numbers.\n    '''\n    group_list1=[]\n    group_list2=[]\n    for i in range(len(Input)):\n        group_list1.append(Input[i][0])\n        group_list2.append(Input[i][1])\n    group_list1 = list(set(group_list1))\n    group_list2 = list(set(group_list2))\n    group_list1 = sorted(group_list1)\n    group_list2 = sorted(group_list2)\n    sum_x=0\n    sum_y=0\n    correlation=0\n    for i in range(len(group_list1)):\n        sum_x+=group_list1[i]\n    for i in range(len(group_list2)):\n        sum_y+=group_list2[i]\n    mean_x=sum_x/len(group_list1)\n    mean_y=sum_y/len(group_list2)\n    #print(mean_x,mean_y)\n    for i in range(len(group_list1)):\n        correlation+=(group_list1[i]-mean_x)*(group_list2[i]-mean_y)\n    correlation=correlation/((len(group_list1)-1)*(len(group_list2)-1))\n    return correlation\ndef find_correlation_of_list(Input):\n    '''\n    Write a function to find correlation of two given lists of numbers.\n    '''\n    group_list1=[]\n    group_list2=[]\n    for i in range(len(Input)):\n        group_list1.append(Input[i][0])\n        group_list2.append(Input[i][1])\n    group_list1 = list(set(group_list1))\n    group_list2 = list(set(group_list2))\n    group_list1 = sorted(group_list1)\n    group_list2 = sorted(group_list2)\n    sum_x=0\n    sum_y=0\n    correlation=0\n    for i in range(len(group_list1)):\n        sum_x+=group_list1[i]\n    for i in range(len(group_list2)):\n        sum_y+=group_list2[i]\n    mean_x=sum_x/len(group_list1)\n    mean_y=sum_y/len(group_list2)\n    #print(mean_x,mean_y)\n    for i in range(len(group_list1)):\n        correlation+=(group_list1[i]-mean_x)*(group_list2[i]-mean_y)\n    correlation=correlation/((len(group_list1)-1)*(len(group_list2)-1))\n    return correlation\ndef find_covariance(Input):\n    '''\n    Write a function to find covariance of given list of numbers.\n    '''\n    group_list1=[]\n    group_list2=[]\n    for i in range(len(Input)):\n        group_list1.append(Input[i][0])\n        group_list2.append(Input[i][1])\n    group_list1 = list(set(group_list1))\n    group_list2 = list(set(group_list2))\n    group_list1 = sorted(group_list1)\n    group_list2 = sorted"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = list(map(list,Input))\n    for i in a:\n        j = 0\n        while j < len(a):\n            if i[0] == a[j][0]:\n                i.append(a[j][1])\n                a.remove(a[j])\n            j += 1\n    for i in a:\n        i = tuple(i)\n    return a\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) <= 1: return Input\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n = len(Input) \n    Output = []\n    for i in range(0,n): \n        for j in range(0,n): \n            if (Input[i][0] == Input[j][0] and i!=j): \n                Output.append(Input[i][0]) \n    return Output \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l1 = Input[0] \n    l2 = Input[1] \n    l3 = []\n    for i in range(len(l1)): \n        if l1[i] == l2[i]: \n            l3.append(l1[i]) \n    return l3\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input=sorted(Input)\n    hash_map=dict()\n    for i in Input:\n        hash_map[i[0]]=i[1]\n    print hash_map\n    for j in hash_map:\n        if j in hash_map:\n            return j\n    \ndef key_with_max_value(d):\n    '''\n    Write a function to find key with max value in dict.\n    '''\n    maxi=0\n    max_key=\"\"\n    for key,value in d.iteritems():\n        if value > maxi:\n            maxi=value\n            max_key=key\n    print max_key\n    \ndef product_of_array_except_self(arr):\n    '''\n    Write a function that returns product of array except self.\n    '''\n    res=1\n    for i in range(0,len(arr)):\n        res=res*arr[i]\n    for i in range(1,len(arr)):\n        res=res//arr[i-1]\n    return res\n    \ndef make_pairs(arr,n):\n    '''\n    Write a function to make pairs of elements.\n    '''\n    if len(arr)<2:\n        return arr\n    arr_len=len(arr)\n    for i in range(0,arr_len-1):\n        pair=[]\n        pair.append(arr[i])\n        pair.append(arr[i+1])\n        arr.append(pair)\n    return arr\n    \ndef make_unique(arr):\n    '''\n    Write a function to remove duplicate elements from an array.\n    '''\n    if len(arr)<2:\n        return arr\n    else:\n        arr=set(arr)\n        arr_list=list(arr)\n        return arr_list\n    \ndef copy_list(arr):\n    '''\n    Write a function to copy an array.\n    '''\n    if len(arr)<2:\n        return arr\n    else:\n        temp=list(arr)\n        arr_list=list(temp)\n        return arr_list\n        \ndef delete_duplicates(arr):\n    '''\n    Write a function to delete all duplicates from an array.\n    '''\n    if len(arr)<2:\n        return arr\n    else:\n        temp=list(arr)\n        temp_set=set(temp)\n        temp_set=list(temp_set)\n        return temp_set\n        \ndef remove_adjacent(arr):\n    '''\n    Write a function to remove adjacent duplicates from an array.\n    '''\n    if len(arr)<2:\n        return arr\n    else:\n        for i in range(1,len(arr)):\n            if arr[i]!=arr[i-1]:\n                arr[i-1]=arr[i]\n                arr.append(arr[i-1])\n    return arr\n    \ndef get_rotated_list(arr,n):\n    '''\n    Write a function to rotate an array by d elements.\n    '''\n    if n<0 or n>len(arr):\n        return arr\n    else:\n        i=0\n        while i<n:\n            temp=arr[-1]\n            arr[-1]=arr[0]\n            arr[0]=temp\n            i=i+1\n    return arr\n    \ndef get_rectangle_area(width,height):\n    '''\n    Write a function to calculate area of rectangle.\n    '''\n    if width<0 or height<0:\n        return 0\n    else:\n        return width*height\n        \ndef get_max_pair(arr,n):\n    '''\n    Write a function to get maximum pair in an array.\n    '''\n    if len(arr)<2:\n        return (0,0)\n    else:\n        pairs=[(arr[0],arr[1])]\n        for i in range(2,len(arr)):\n            if arr[i]>pairs[-1][0]:\n                temp=pairs[-1]\n                pairs[-1]=(arr[i],arr[i])\n            else:\n                temp=pairs[0]\n                pairs[0]=(arr[i],arr[i])\n            for j in range(len(pairs)):\n                if pairs[j]==temp:\n                    break\n            pairs.insert(j,(arr[i],arr[i]))\n            pairs=pairs[0:len(pairs)]\n    return max(pairs)\n    \ndef get_dividers(num):\n    '''\n    Write a function to get dividers of a number.\n    '''\n    divisors=[]\n    for i in range(1,num+1):\n        if num%i==0:\n            divisors.append(i)\n    return divisors\n    \ndef get_maximum_value(arr,n):\n    '''\n    Write a function to find maximum value in an array.\n    '''\n    if len(arr)<2:\n        return -1\n    else:\n        max_val=-1\n        for i in range(0,len(arr)):\n            if arr[i]>max_val:\n                max_val=arr[i]\n    return max_val\n    \ndef get_max_arr(arr):\n    '''\n    Write a function to find maximum value in an array.\n    '''\n    max_val=-1\n    max_index=-1\n    if len(arr)<2:\n        return -1\n    else:\n        for i in range(0,len(arr)):\n            if arr[i]>max_val:\n                max_val=arr[i]\n                max_index=i\n        return max_index\n    \ndef get_maximum_index(arr):\n    '''\n    Write a function to find maximum value in an array.\n    '''\n    max_val=-1\n    max_index=-1\n    if len(arr)<2:\n        return -1\n    else:\n        for i in range(0,len(arr)):\n            if arr[i]>max_val:\n                max_val=arr[i]\n                max_index=i\n        return max_index\n    \ndef get_cubic_roots(a,b,c):\n    '''\n    Write a function to find cubic roots of a,b,c.\n    '''\n    d=(b**2)-(4*a*c)\n    if d<0:\n        return -1\n    else:\n        root1=(-b-math.sqrt(d))/(2*a)\n        root2=(-b+math.sqrt(d))/(2*a)\n        return root1,root2\n    \ndef get_factors(num):\n    '''\n    Write a function to find factors of a number.\n    '''\n    if num==1:\n        return 1\n    if num<0:\n        return -1\n    factor_list=[]\n    if num==2:\n        factor_list.append(2)\n    elif num<2:\n        return factor_list\n    else:\n        i=2\n        while i<num:\n            if num%i==0:\n                factor_list.append(i)\n                num=num/i\n            i=i+1\n    return factor_list\n    \ndef get_next_prime(num):\n    '''\n    Write a function to get next prime number.\n    '''\n    if num<2:\n        return -1\n    else:\n        i=num+1\n        while i>2:\n            if is_prime(i)==True:\n                return i\n            i=i+1\n    return -1\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if num<=1:\n        return False\n    else:\n        i=2\n        while i<num:\n            if num%i==0:\n                return False\n            i=i+1\n        return True\n    \ndef get_len_word(word):\n    '''\n    Write a function to get length of a word.\n    '''\n    if word==\"\":\n        return 0\n    else:\n        return len(word)\n        \ndef get_words_starting_with(input_arr,prefi"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    common = {}\n    for i in Input:\n        common[i[0]] = i[1]\n    for i in Input:\n        if i[0] in common:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def common_first_elem(Input):\n        Common_list = []\n        i = 0\n        while i < len(Input):\n            if len(Common_list) == 0:\n                Common_list.append(Input[i][0])\n                i += 1\n            else:\n                Common_elem = Common_list[0]\n                for j in range(len(Input)):\n                    if Input[j][0] == Common_elem:\n                        Common_list.append(Input[j][1])\n        return Common_list\n    return common_first_elem(Input)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    x = list(map(lambda y:y[0],Input))\n    if len(set(x)) == 1:\n        return x[0]\n    else:\n        return None\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if max < len(lst[i]):\n            max = len(lst[i])\n    return max\n    \n    \n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    min = len(lst[0])\n    for i in range(len(lst)):\n        if min > len(lst[i]):\n            min = len(lst[i])\n    return min\n    \n    \n    \ndef Find_K_Most_Common(lst, k): \n    '''\n    Write a python function to find the k most common elements.\n    '''\n    lst = Counter(lst)\n    print(lst)\n    lst = lst.most_common(k)\n    print(lst)\n    return lst\n    \n    \n    \ndef Find_K_Least_Common(lst, k): \n    '''\n    Write a python function to find the k least common elements.\n    '''\n    lst = Counter(lst)\n    lst = lst.most_common(k)\n    return lst\n    \n    \n    \ndef Find_K_Unique_Elements(lst, k): \n    '''\n    Write a python function to find the k unique elements.\n    '''\n    lst = set(lst)\n    lst = list(lst)\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Duplicates(lst, k): \n    '''\n    Write a python function to find the k duplicate elements.\n    '''\n    lst = list(set(lst))\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Greater_Elements(lst, k): \n    '''\n    Write a python function to find the k greater elements.\n    '''\n    lst = list(set(lst))\n    lst.sort()\n    lst = list(set(lst))\n    print(lst)\n    return lst[k-1:]\n    \n    \n    \ndef Find_K_Greater_Or_Equal_Elements(lst, k): \n    '''\n    Write a python function to find the k greater or equal elements.\n    '''\n    lst = list(set(lst))\n    lst.sort(reverse=True)\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Lesser_Elements(lst, k): \n    '''\n    Write a python function to find the k lesser elements.\n    '''\n    lst = list(set(lst))\n    lst.sort()\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Lesser_Or_Equal_Elements(lst, k): \n    '''\n    Write a python function to find the k lesser or equal elements.\n    '''\n    lst = list(set(lst))\n    lst.sort()\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Positive_Elements(lst, k): \n    '''\n    Write a python function to find the k positive elements.\n    '''\n    lst = list(set(lst))\n    lst.sort(reverse=True)\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Negative_Elements(lst, k): \n    '''\n    Write a python function to find the k negative elements.\n    '''\n    lst = list(set(lst))\n    lst.sort()\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Zero_Elements(lst, k): \n    '''\n    Write a python function to find the k zero elements.\n    '''\n    lst = list(set(lst))\n    lst.sort(reverse=True)\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Minimum_Elements(lst, k): \n    '''\n    Write a python function to find the k minimum elements.\n    '''\n    lst = list(set(lst))\n    lst.sort()\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Maximum_Elements(lst, k): \n    '''\n    Write a python function to find the k maximum elements.\n    '''\n    lst = list(set(lst))\n    lst.sort()\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Even_Elements(lst, k): \n    '''\n    Write a python function to find the k even elements.\n    '''\n    lst = list(set(lst))\n    lst = list(set(lst))\n    lst.sort(key=lambda x:x%2==0)\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Odd_Elements(lst, k): \n    '''\n    Write a python function to find the k odd elements.\n    '''\n    lst = list(set(lst))\n    lst = list(set(lst))\n    lst.sort(key=lambda x:x%2==1)\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Prime_Elements(lst, k): \n    '''\n    Write a python function to find the k prime elements.\n    '''\n    lst = list(set(lst))\n    lst = list(set(lst))\n    lst.sort(key=lambda x: x>1 and x%x==0)\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Perfect_Elements(lst, k): \n    '''\n    Write a python function to find the k perfect elements.\n    '''\n    lst = list(set(lst))\n    lst = list(set(lst))\n    lst.sort(key=lambda x: x>1 and x%x==0)\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Harmonic_Elements(lst, k): \n    '''\n    Write a python function to find the k harmonic elements.\n    '''\n    lst = list(set(lst))\n    lst = list(set(lst))\n    lst.sort(key=lambda x: x<=0 and x%x==0)\n    lst = list(set(lst))\n    print(lst)\n    return lst[:k]\n    \n    \n    \ndef Find_K_Perfect_Harmonic_Elements(lst, k): \n    '''\n    Write a python function to find the k perfect harmonic elements.\n    '''\n    lst = list(set(lst))\n    lst = list(set(lst))\n    lst.sort(key=lambda x: x<=0 and x%x==0)\n    lst = list(set(lst))\n    print("
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxi = lst[0]\n    for x in lst:\n        if len(x) > len(maxi):\n            maxi = x\n    return maxi\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return -1\n    else:\n        max_ele = 0\n        for ele in lst:\n            if len(ele) > max_ele:\n                max_ele = len(ele)\n                max_ele_list = ele\n    return max_ele_list\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize counter and variable \n    max_length = 0\n    max_element = 0\n    for i in lst:\n        if(len(i)>max_length):\n            max_length = len(i)\n            max_element = i\n    return max_element\n    \n    \n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    # Initialize counter and variable \n    min_length = 0\n    min_element = 0\n    for i in lst:\n        if(len(i)<min_length):\n            min_length = len(i)\n            min_element = i\n    return min_element\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m=len(lst[0])\n    max=lst[0]\n    for i in range(1,len(lst)):\n        if m<len(lst[i]):\n            m=len(lst[i])\n            max=lst[i]\n    return max\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    l=len(lst)\n    max=lst[0]\n    for i in range(1,l):\n        if len(lst[i])>len(max):\n            max=lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    x = -1\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n            x = i\n    return x\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in lst:\n        if len(i) == max(lst):\n            return i\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_list = 0\n    for i in range(len(lst)):\n        if(len(lst[i]) >= max_list):\n            max_list = len(lst[i])\n    return max_list\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in lst:\n        if len(i) > len(max):\n            max = i\n    return max\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n        list1.remove(i)\n    print(sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #rounding the numbers using the math library\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=round(list1[i])\n    return sum(list1)\nprint(round_and_sum([4.6,2.3,8.9]))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    summ = 0\n    for i in list1:\n        summ = summ + round(i)\n    return summ * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1.sort()\n    num = len(list1)\n    summ = 0\n    for i in list1:\n        summ += i\n        i = round(i,2)\n    print(summ*num)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1_round = []\n    for i in list1:\n        list1_round.append(round(i))\n    return sum(list1_round) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [2,3,4,5,6,7,8,9]\n    round_list = []\n    for num in list1:\n        round_list.append(round(num))\n    print(sum(round_list))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        i = round(i)\n        total += i\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1.sort()\n    list1 = sum(list1)*len(list1)\n    print(list1)\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        total += round(list1[i])\n    print(\"The total sum of the numbers in the list is {}\".format(total))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            result += i**3\n    print(result)\ncube_Sum(int(input()))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #start writing your code here\n    cube_sum = 0\n    i = 0\n    while i < n:\n        cube_sum += i**3\n        i += 1\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    for i in range(n):\n        count += i**3\n    print(count)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum=0\n    for i in range(1,n+1):\n        cube_sum+=i**3\n    print(cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s+=i**3\n    return s\n    \ndef cube_Sum_Memoization(n,memo):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    if n in memo:\n        return memo[n]\n    else:\n        result = cube_Sum_Memoization(n-1,memo) + n**3\n        memo[n] = result\n        return result\n    \ndef cube_Sum_DP(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s+=i**3\n    return s\n    \ndef cube_Sum_DP_Optimized(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    cache = [-1]*(n+1)\n    for i in range(1,n+1):\n        if i%2==0:\n            s+=i**3\n        if cache[i]==-1:\n            cache[i] = s\n        else:\n            cache[i] = min(s,cache[i])\n    return cache[n]\n    \nif __name__ == '__main__':\n    n = 5\n    print(\"Cube Sum of first n even natural numbers = \",cube_Sum(n))\n    print(\"Cube Sum of first n even natural numbers = \",cube_Sum_Memoization(n,{}))\n    print(\"Cube Sum of first n even natural numbers = \",cube_Sum_DP(n))\n    print(\"Cube Sum of first n even natural numbers = \",cube_Sum_DP_Optimized(n))"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += (i**3)\n    print(cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum\n    \ndef cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(1, n+1) if i % 2 == 0)\n    \ndef cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(1, n+1) if i % 2 == 0)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum1(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i*i*i\n    return sum\n    \ndef cube_Sum2(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum3(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum4(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum5(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum6(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum7(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum8(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum9(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum10(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum11(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum12(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum13(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum14(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum15(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum16(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum17(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum18(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum19(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum20(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum21(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum22(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum23(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum24(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum25(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum26(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum27(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, 3)\n    return sum\n    \ndef cube_Sum28(n): \n    '''\n    Write a python function to find the cube sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + pow(i, "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total=0\n    for i in range(1,n+1):\n        total+=i**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return(cube_sum)\ncube_Sum(5)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_concat = \"\"\n    for elm in test_tup:\n        test_concat += str(elm)\n    return test_concat\nprint(concatenate_tuple(test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError('Only tuples are accepted')\n    else:\n        return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if type(test_tup)!= type(()):\n        return (test_tup)\n    else:\n        return (test_tup[0].join(test_tup[1:]))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result = result + str(i) + \",\"\n    print(result)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return f\"{test_tup[0]}{test_tup[1]}{test_tup[2]}{test_tup[3]}{test_tup[4]}{test_tup[5]}{test_tup[6]}{test_tup[7]}{test_tup[8]}{test_tup[9]}{test_tup[10]}{test_tup[11]}{test_tup[12]}{test_tup[13]}{test_tup[14]}{test_tup[15]}\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    conc = \"\"\n    for i in test_tup:\n        conc += i + \" \"\n    return conc\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    my_str = \"\"\n    for i in range(len(test_tup)):\n        my_str += test_tup[i]\n    return my_str\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    i = 1\n    Sum = 0\n    while i < n + 1:\n        Sum += i ** 3\n        i += 1\n    \n    return int(Sum / n)\n    \nprint(find_Average_Of_Cube(5))\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if(n<0):\n        print(\"Given number is less than 0. Please enter a positive number\")\n        return\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n    \nprint(find_Average_Of_Cube(5)) # This should be 16.0\nprint(find_Average_Of_Cube(10)) # This should be 616.0\nprint(find_Average_Of_Cube(-5)) # This should be 0.0\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes=list()\n    for i in range(1,n+1):\n        cube = i**3\n        cubes.append(cube)\n    print(cubes)\n    count = 0\n    sum = 0\n    for i in range(0,n):\n        sum += cubes[i]\n        count +=1\n    return sum/count\n    \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    return sum([i**3 for i in range(n+1)])/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    print(sum/n)\nfind_Average_Of_Cube(5)  \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Below line is wrong\n    # return n * n * n\n    return n * n * n / 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n\n    \ndef find_Sum_Of_Squares_Of_Cube(n):\n    '''\n    Write a python function to find the sum of squares of first n cubes of natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \ndef find_Factorial_Of_Number(n):\n    '''\n    Write a python function to calculate factorial of first n numbers.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i\n    return factorial\n    \ndef find_Factorial_Of_Natural_Number(n):\n    '''\n    Write a python function to calculate factorial of first n numbers.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial\n    \ndef find_Factorial_Of_GCD(a,b):\n    '''\n    Write a python function to find gcd of two numbers.\n    '''\n    while a!= 0 and b!= 0:\n        if a > b:\n            a = a%b\n        else:\n            b = b%a\n    return a + b\n    \ndef find_Power_of_Two(n):\n    '''\n    Write a python function to find power of two.\n    '''\n    return 1 << n\n    \ndef find_Power_of_Two_S(n):\n    '''\n    Write a python function to find power of two using shift operation.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_S_Using_Modulus(n):\n    '''\n    Write a python function to find power of two using modulus.\n    '''\n    return n&(~n+1)\n    \ndef find_Power_of_Two_Using_Shift_Operation_using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using shift operation.\n    '''\n    return n >> 1\n    \ndef find_Power_of_Two_Using_Shift_Operation_using_Right_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using shift operation.\n    '''\n    return n >> 1\n    \ndef find_Power_of_Two_Using_Right_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using right shifting of 1s.\n    '''\n    return n >> 1\n    \ndef find_Power_of_Two_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using right shifting of 1s.\n    '''\n    return n >> 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shifting_of_1s_Using_Left_Shifting_of_1s(n):\n    '''\n    Write a python function to find power of two using left shifting of 1s.\n    '''\n    return n << 1\n    \ndef find_Power_of_Two_Using_Left_Shifting_of_1s_Using_Right_Shiftin"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum = sum + count**3\n        count = count + 1\n    average = sum/n\n    print(\"Average of cube of first \",n,\" natural numbers :\",average)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = []\n    for i in range(1,n+1):\n        cube.append(i**3)\n    return sum(cube)/n\n        \ndef fibonacci(n):\n    '''\n    Write a python function to calculate the Fibonacci series of n.\n    '''\n    if n<=1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \ndef print_square_table(n):\n    '''\n    Write a python function to print the table of squares of first n natural numbers.\n    '''\n    for i in range(1,n+1):\n        print(i**2,end=' ')\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum = 0\n    count = 0\n    \n    for i in range(1,n+1):\n        sum += i ** 3\n        count += 1\n    \n    return sum/count\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output_tuple = ()\n    for i in range(len(test_tuple)):\n        output_tuple = output_tuple + (test_tuple[i][-1],)\n    return output_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([s[-1] for s in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple((tuple(test_tuple[0].split(',')))[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([str(i[-1]) for i in test_tuple])\n    \n    \ndef extract_middle(test_tuple):\n    '''\n    Write a function to extract the middle index elements of each string in the given tuple.\n    '''\n    return tuple([str(i[int(len(i)/2)]) for i in test_tuple])\n    \n    \ndef extract_front_middle(test_tuple):\n    '''\n    Write a function to extract the front and middle index elements of each string in the given tuple.\n    '''\n    return tuple([str(i[:int(len(i)/2)])+str(i[int(len(i)/2):]) for i in test_tuple])\n    \n    \ndef extract_front_back(test_tuple):\n    '''\n    Write a function to extract only the front and back index elements of each string in the given tuple.\n    '''\n    return tuple([str(i[:int(len(i)/2)]+i[-1]) for i in test_tuple])\n    \n    \ndef extract_front_back_middle(test_tuple):\n    '''\n    Write a function to extract the front, back, and middle index elements of each string in the given tuple.\n    '''\n    return tuple([str(i[:int(len(i)/2)])+str(i[-1])+str(i[int(len(i)/2)]) for i in test_tuple])\n    \n    \ndef extract_front_middle_back(test_tuple):\n    '''\n    Write a function to extract the front, middle, and back index elements of each string in the given tuple.\n    '''\n    return tuple([str(i[:int(len(i)/2)])+str(i[int(len(i)/2):])+str(i[-1]) for i in test_tuple])\n    \n    \ndef extract_front_back_middle_rear(test_tuple):\n    '''\n    Write a function to extract the front, back, middle, and rear index elements of each string in the given tuple.\n    '''\n    return tuple([str(i[:int(len(i)/2)])+str(i[-1])+str(i[int(len(i)/2)])+str(i[:1]) for i in test_tuple])\n    \n    \ndef extract_all(test_tuple):\n    '''\n    Write a function to extract all index elements of each string in the given tuple.\n    '''\n    return tuple([str(i[i:]) for i in test_tuple])\n    \n    \ndef replace_all(test_tuple, a, b):\n    '''\n    Write a function to replace all occurrences of the first string in the given tuple with the second string.\n    '''\n    return tuple([i.replace(a, b) for i in test_tuple])\n    \n    \ndef remove_all(test_tuple, a):\n    '''\n    Write a function to remove all occurrences of the first string in the given tuple.\n    '''\n    return tuple([i.replace(a,'') for i in test_tuple])\n    \n    \ndef join_all(test_tuple, separator):\n    '''\n    Write a function to join all strings in the given tuple using the separator.\n    '''\n    return separator.join(test_tuple)\n    \n    \ndef generate_tuple(start, end, step):\n    '''\n    Write a function to generate a tuple from the starting value to the ending value, incrementing by the given step.\n    '''\n    return tuple([start+i*step for i in range(start, end+1, step)])\n    \n    \ndef remove_tuple_duplicates(test_tuple):\n    '''\n    Write a function to remove all duplicate values in the given tuple.\n    '''\n    return tuple([i for i in test_tuple if test_tuple.count(i)==1])\n    \n    \ndef list_of_lists(test_tuple):\n    '''\n    Write a function to convert the given tuple into a list of lists.\n    '''\n    return tuple([i.split(',') for i in test_tuple])\n    \n    \ndef tuple_to_string(test_tuple):\n    '''\n    Write a function to convert the given tuple of lists into a single string with each list item on a separate line.\n    '''\n    return str(test_tuple)\n    \n    \ndef unique_list_of_strings(test_tuple):\n    '''\n    Write a function to convert the given tuple of lists into a list of unique strings.\n    '''\n    return tuple(set([i for i in test_tuple]))\n    \n    \ndef count_occurrence_of_string(test_tuple, search_string):\n    '''\n    Write a function to count the number of times a given string appears in the given tuple.\n    '''\n    return test_tuple.count(search_string)\n    \n    \ndef convert_to_list_of_strings(test_tuple):\n    '''\n    Write a function to convert the given tuple into a list of strings.\n    '''\n    return tuple([str(i) for i in test_tuple])\n    \n    \ndef add_strings(test_tuple, a, b):\n    '''\n    Write a function to add a string to a list of strings.\n    '''\n    return tuple([i+a+b for i in test_tuple])\n    \n    \ndef convert_to_tuple_of_lists(test_tuple):\n    '''\n    Write a function to convert the given tuple of strings into a tuple of lists.\n    '''\n    return tuple([i.split(',') for i in test_tuple])\n    \n    \ndef distinct_values_from_tuple(test_tuple):\n    '''\n    Write a function to get a set of distinct values from the given tuple.\n    '''\n    return tuple([i for i in set(test_tuple)])\n    \n    \ndef number_of_values_in_tuple(test_tuple):\n    '''\n    Write a function to count the number of values in the given tuple.\n    '''\n    return len(test_tuple)\n    \n    \ndef number_of_non_repeating_values_in_tuple(test_tuple):\n    '''\n    Write a function to count the number of non-repeating values in the given tuple.\n    '''\n    return len(set(test_tuple))\n    \n    \ndef convert_to_string(test_tuple):\n    '''\n    Write a function to convert the given tuple of strings into a single string.\n    '''\n    return ','.join(test_tuple)\n    \n    \ndef distinct_values_from_string(test_tuple):\n    '''\n    Write a function to get a set of distinct values from the given string.\n    '''\n    return set(test_tuple.split(','))\n    \n    \ndef count_occurrence_of_string_in_tuple(test_tuple, search_string):\n    '''\n    Write a function to count the number of times a given string appears in the given tuple.\n    '''\n    return test_tuple.count(search_string)\n    \n    \ndef sort_list_of_tuples(test_tuple):\n    '''\n    Write a function to sort the given tuple.\n    '''\n    return tuple(sorted(test_tuple))\n    \n    \ndef sorted_alphanumeric(test_tuple):\n    '''\n    Write a function to sort the given tuple in alphanumerical order.\n    '''\n    return tuple(sorted(test_tuple, key=lambda x: x if not isinstance(x, int) else x))\n    \n    \ndef sort_list_of_lists(test_tuple):\n    '''\n    Write a function to sort the given tuple of lists.\n    '''\n    return tuple(sorted(test_tuple))\n    \n    \ndef merge_lists_of_tuples(test_tuple_1, test_tuple_2):\n    '''\n    Write a function to merge two given tuples.\n    '''\n    return tuple(set(test_tuple_1)"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    input_tuple = tuple(map(str, input().split()))\n    for i in range(len(input_tuple)):\n        input_tuple[i] = int(input_tuple[i])\n    input_tuple = sorted(input_tuple, reverse=True)\n    print(input_tuple)\n    for j in range(len(input_tuple)):\n        print(input_tuple[j])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    temp = []\n    for i in range(len(test_tuple)):\n        temp.append(test_tuple[i][1])\n    return tuple(temp)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[-1] for i in test_tuple)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n    "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for item in list1:\n        if x in item:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return list1.count(x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for number in nums:\n        if number % 2!= 0:\n            oddnumbers.append(number)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda num: num%2!=0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd = []\n    for i in nums:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda n: n % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda n: n % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return[i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    datestring = dt.split(\"-\")\n    datestring = \"\".join(datestring)\n    datestring = datestring.split(\" \")\n    datestring = \" \".join(datestring)\n    datestring = datestring.split(\".\")\n    datestring = \".\".join(datestring)\n    datestring = datestring.split(\"/\")\n    datestring = \"\".join(datestring)\n    return datestring\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #y = int(y)\n    dt = re.sub(r'\\D','',dt)\n    if len(dt) == 6:\n        #dd = int(dt[0:2])\n        mm = int(dt[2:4])\n        yyyy = int(dt[4:])\n        dd = (mm + 1) / 13\n        mm = mm - (dd * 13) + 1\n        yyyy = yyyy - 1\n        yyyy = str(yyyy)\n        if len(yyyy) == 1:\n            yyyy = '0' + yyyy\n        mm = str(mm)\n        if len(mm) == 1:\n            mm = '0' + mm\n        dd = str(dd)\n        if len(dd) == 1:\n            dd = '0' + dd\n        return yyyy + '-' + mm + '-' + dd\n    else:\n        print('error')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_format = dt.split(\"-\")\n    day = int(new_format[0])\n    month = int(new_format[1])\n    year = int(new_format[2])\n    return \"{}-{}-{}\".format(day,month,year)\n    \ndef get_days(date):\n    '''\n    Write a function to calculate the no. of days between two dates.\n    '''\n    new_date = change_date_format(date)\n    day1 = int(new_date.split(\"-\")[0])\n    month1 = int(new_date.split(\"-\")[1])\n    year1 = int(new_date.split(\"-\")[2])\n    day2 = int(new_date.split(\"-\")[0])\n    month2 = int(new_date.split(\"-\")[1])\n    year2 = int(new_date.split(\"-\")[2])\n    days = 0\n    for i in range(year1,year2):\n        for j in range(month1,month2):\n            days += calendar.monthrange(i,j)[1]\n    return days-day1\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    datetime = dt.split('-')\n    datetime[2] = datetime[2][2:] + datetime[2][:2]\n    datetime[1] = datetime[1][2:] + datetime[1][:2]\n    datetime[0] = datetime[0][2:] + datetime[0][:2]\n    print(''.join(datetime))\n    return '-'.join(datetime)\n    \ndef change_date_format_2(dt):\n    '''\n    Write a function to convert a date of yyyy/mm/dd format to dd-mm-yyyy format.\n    '''\n    datetime = dt.split('/')\n    datetime[2] = datetime[2][2:] + datetime[2][:2]\n    datetime[1] = datetime[1][2:] + datetime[1][:2]\n    datetime[0] = datetime[0][2:] + datetime[0][:2]\n    print(''.join(datetime))\n    return '-'.join(datetime)\n    \ndef is_leap_year(year):\n    '''\n    Write a function to check if a year is leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef is_leap_year_2(year):\n    '''\n    Write a function to check if a year is leap year or not.\n    '''\n    if (year%4==0 and year%100!=0) or (year%100==0 and year%400==0):\n        return True\n    else:\n        return False\n    \ndef is_year_leap(year):\n    '''\n    Write a function to check if a year is leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_year_leap_2(year):\n    '''\n    Write a function to check if a year is leap year or not.\n    '''\n    if (year%4==0 and year%100!=0) or (year%100==0 and year%400==0):\n        return True\n    else:\n        return False\n    \ndef find_nearest(date,d,a,b,c):\n    if date in range(a,b+1):\n        return c\n    else:\n        if date > b:\n            return find_nearest(date,a,b,a,c)\n        else:\n            return find_nearest(date,a,b,b,c)\n        \ndef find_nearest_2(date,d,a,b,c):\n    if date in range(a,b+1):\n        return c\n    else:\n        if date > b:\n            return find_nearest_2(date,d,a,b,a)\n        else:\n            return find_nearest_2(date,d,a,b,b)\n    \ndef find_nearest_3(date,d,a,b,c,f):\n    if date in range(a,b+1):\n        return c\n    else:\n        if date > b:\n            return find_nearest_3(date,d,a,b,a,f)\n        else:\n            return find_nearest_3(date,d,a,b,b,f)\n    \ndef is_in_list(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_2(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_3(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_4(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_5(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_6(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_7(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_8(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_9(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_10(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_11(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_12(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_13(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_14(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_15(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_16(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_17(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_18(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_19(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_20(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n    \ndef is_in_list_21(my_list,x):\n    for i in range(0,len(my_list)):\n        if my_list[i] == x:\n            return True\n    return False\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt) == 10:\n        d, m, y = dt[:2], dt[2:4], dt[4:]\n        return f'{d}-{m}-{y}'\n    else:\n        d, m, y = dt[:2], dt[2:4], dt[4:]\n        return f'{d}-{m}-{y}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.search(r'\\d{4}-\\d{1,2}-\\d{1,2}',dt):\n        dt = dt.split('-')\n        dt[0] = str(int(dt[0]) + 1911)\n        dt = '-'.join(dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2})\")\n    dt = regex.findall(dt)\n    return '-'.join(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list=dt.split('-')\n    dt_list[2]=dt_list[2].zfill(2)\n    dt_list[1]=dt_list[1].zfill(2)\n    dt_list[0]=dt_list[0].zfill(2)\n    return ''.join(dt_list)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not isinstance(dt,str):\n        raise Exception(\"Date must be in string format\")\n    if not re.search(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\",dt):\n        raise Exception(\"Date must be in format yyyy-mm-dd\")\n    dt = dt.replace(\"-\",\" \")\n    d = dt.split(\" \")\n    return(f\"{d[2]}-{d[1]}-{d[0]}\")\n    \ndef string_conversion(s):\n    '''\n    Write a function to convert a string to upper case string.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(s.upper())\n    \ndef string_conversion2(s):\n    '''\n    Write a function to convert a string to lower case string.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(s.lower())\n    \ndef string_conversion3(s):\n    '''\n    Write a function to convert a string to title case string.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(\" \".join([w.title() for w in s.split()]).strip())\n    \ndef string_conversion4(s):\n    '''\n    Write a function to convert a string to stripped string.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(\" \".join([w.strip() for w in s.split()]).strip())\n    \ndef string_conversion5(s):\n    '''\n    Write a function to check whether string is alphabetic.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(all(c.isalpha() for c in s))\n    \ndef string_conversion6(s):\n    '''\n    Write a function to check whether string is numeric.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(all(c.isnumeric() for c in s))\n    \ndef string_conversion7(s):\n    '''\n    Write a function to check whether string is alphanumeric.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(all(c.isalnum() for c in s))\n    \ndef string_conversion8(s):\n    '''\n    Write a function to check whether string is blank.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(all(c.isspace() for c in s))\n    \ndef string_conversion9(s):\n    '''\n    Write a function to check whether string contains only lowercase alphabets.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(all(c.islower() for c in s))\n    \ndef string_conversion10(s):\n    '''\n    Write a function to check whether string contains only uppercase alphabets.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(all(c.isupper() for c in s))\n    \ndef string_conversion11(s):\n    '''\n    Write a function to check whether string contains only digits.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(all(c.isdigit() for c in s))\n    \ndef string_conversion12(s):\n    '''\n    Write a function to check whether string contains only special characters.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    special_characters = ['[',']','\\'','(',')','*','.','-','_','+','!','~','@','#','$','%','^','&','*','(',')','=','_','`','{','}','|',';',':','\"','<','>',',',' ']\n    return(all(c in special_characters for c in s))\n    \ndef string_conversion13(s):\n    '''\n    Write a function to check whether string is a valid email.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    email_regex = r'^[A-Za-z0-9+_]+@[A-Za-z0-9]+\\.[a-zA-Z]{2,}$'\n    return(re.search(email_regex,s))\n    \ndef string_conversion14(s):\n    '''\n    Write a function to check whether string contains only alphanumeric characters.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(all(c.isalnum() for c in s))\n    \ndef string_conversion15(s):\n    '''\n    Write a function to check whether string contains only digits.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(all(c.isdigit() for c in s))\n    \ndef string_conversion16(s):\n    '''\n    Write a function to check whether string contains only special characters.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    special_characters = ['[',']','\\'','(',')','*','.','-','_','+','!','~','@','#','$','%','^','&','*','(',')','=','_','`','{','}','|',';',':','\"','<','>',',',' ']\n    return(all(c in special_characters for c in s))\n    \ndef string_conversion17(s):\n    '''\n    Write a function to check whether string contains only alphanumeric characters or digits.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(any(c.isalnum() or c.isdigit() for c in s))\n    \ndef string_conversion18(s):\n    '''\n    Write a function to check whether string contains only digits or alpha numeric characters.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(any(c.isdigit() or c.isalpha() for c in s))\n    \ndef string_conversion19(s):\n    '''\n    Write a function to check whether string contains only alpha numeric characters.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(any(c.isalpha() for c in s))\n    \ndef string_conversion20(s):\n    '''\n    Write a function to check whether string contains only special characters.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(any(c in special_characters for c in s))\n    \ndef string_conversion21(s):\n    '''\n    Write a function to check whether string contains only special characters.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(any(c in special_characters for c in s))\n    \ndef string_conversion22(s):\n    '''\n    Write a function to check whether string contains only special characters.\n    '''\n    if not isinstance(s,str):\n        raise Exception(\"String must be in string format\")\n    return(any(c in special_characters for c in s))\n    \ndef string_conversion23(s):\n    '''\n    Write a function to check whether string contains only special characters.\n    '''\n    if not isinstance("
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y = re.sub(r'\\D', '', dt)\n    m = re.sub(r'\\D', '', dt.split('-')[1])\n    d = re.sub(r'\\D', '', dt.split('-')[2])\n    return d + '-' + m + '-' + y\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #if len(my_list) > 1:\n    #    mid = len(my_list) // 2\n    #    gap = len(my_list)\n    #    while gap > 1:\n    #        for i in range(mid, len(my_list)):\n    #            j = i\n    #            while j >= mid and my_list[j] < my_list[j - gap]:\n    #                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n    #                j -= gap\n    #        gap = gap // 2\n    #        mid = mid // 2\n    \n    for i in range(len(my_list)):\n        j = i\n        while j >= 0 and my_list[j] > my_list[j + 1]:\n            my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n            j -= 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i-gap\n            while j >= 0 and my_list[j] > temp:\n                my_list[j+gap] = my_list[j]\n                j = j-gap\n            my_list[j+gap] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for j in range(len(my_list), 0, -1):\n        for i in range(j - 1):\n            if my_list[i] > my_list[i + 1]:\n                my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    size = len(my_list)\n    \n    # Step size is 1\n    gap = 1\n    while gap < size:\n        gap = gap * 3 + 1\n        \n        # Sorting the list by using gap sub-lists\n        for i in range(0, size, gap):\n            # Insertion sort loop start\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j - gap], my_list[j] = my_list[j], my_list[j - gap]\n                j -= gap\n                \n            # Sorting the gap sub-lists\n            \n    return my_list\n    \nif __name__ == \"__main__\":\n    user_list = []\n    size = int(input(\"Enter size of the list : \"))\n    \n    # Entering elements in list\n    for i in range(size):\n        element = int(input(\"Enter element : \"))\n        user_list.append(element)\n        \n    # Printing original list\n    print(\"The original list : \", user_list)\n    \n    # Sorting the list\n    sort_list = shell_sort(user_list)\n    \n    # Printing sorted list\n    print(\"The sorted list : \", sort_list)\n    "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = 1\n    while gap < length:\n        gap = gap * 3 + 1\n        for i in range(gap, length):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        j = i + 1\n        while j > 0:\n            if my_list[j] < my_list[j-1]:\n                my_list[j], my_list[j-1] = my_list[j-1], my_list[j]\n            j -= 1\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Find the gap to be used for partitioning\n    for i in range(n-1, 0, -1):\n        # set gap\n        gap = i\n        while gap > 0:\n            # partition the array\n            partition(my_list, gap)\n            gap = gap - 1\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) < 2:\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    gap = n//2\n    \n    while gap > 0:\n        \n        for i in range(gap,n):\n            \n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j-=gap\n            my_list[j] = temp\n        gap = gap//2\n        \n    return my_list\n    "
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x or y, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    # Checking the type of the inputs\n    if type(test_tup1) is not tuple or type(test_tup2) is not tuple:\n        print(\"Error: Invalid Input.\")\n        return\n    \n    # Iterating the tuples\n    and_list = []\n    for i in range(len(test_tup1)):\n        and_list.append(test_tup1[i] and test_tup2[i])\n    \n    # Converting the list to tuple\n    and_tuple = tuple(and_list)\n    \n    return and_tuple\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #print(f'\\n\\nInput tuple: {test_tup1}')\n    #print(f'Input tuple: {test_tup2}\\n')\n    #print(f'Output tuple: {tuple(tup1_and_tup2)}\\n')\n    return tuple(tup1_and_tup2)\n    "
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x1+x2 for x1,x2 in zip(test_tup1,test_tup2))\n    #OR\n    return tuple((x1 + x2) for x1, x2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 and tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for (x,y) in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #code here\n    return(test_tup1[0] and test_tup2[1])\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    n = -1 / (2 * a)\n    if n == 0:\n        return n\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(\"Function: parabola_directrix\")\n    print(f\"a = {a}\")\n    print(f\"b = {b}\")\n    print(f\"c = {c}\")\n    \n    d = b**2 - 4*a*c\n    if d < 0:\n        print(\"Parabola has no solution.\")\n    elif d == 0:\n        x = -b/(2*a)\n        print(f\"Parabola has a solution: x = {x}\")\n    else:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        print(f\"Parabola has two solutions: x1 = {x1} and x2 = {x2}\")\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    y = ((a**2)*b)/(2*c)\n    x = y**(1/2)\n    return (x,y)\n    \ndef parabola_roots(a, b, c):\n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        delta = (b**2)-(4*a*c)\n        if delta < 0:\n            print(\"No roots\")\n        else:\n            root1 = (-b+(delta**(1/2)))/2/a\n            root2 = (-b-(delta**(1/2)))/2/a\n            if root1 < root2:\n                roots = root1, root2\n            else:\n                roots = root2, root1\n            return roots\n            \ndef parabola_intersection(a, b, c):\n    '''\n    Write a function to find the intersection of a parabola.\n    '''\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        delta = (b**2)-(4*a*c)\n        if delta < 0:\n            print(\"No intersection\")\n        else:\n            root1 = (-b+(delta**(1/2)))/2/a\n            root2 = (-b-(delta**(1/2)))/2/a\n            if root1 < root2:\n                roots = root1, root2\n            else:\n                roots = root2, root1\n            return roots\n            \ndef hyperbola_equation(a, b):\n    '''\n    Write a function to find the coefficients for a Hyperbola.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = b**2/a**2\n        return (c)\n        \ndef hyperbola_roots(a, b):\n    '''\n    Write a function to find the roots of a Hyperbola.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = b**2/a**2\n        delta = (2*c)**(1/2)\n        root1 = (-b/(2*c)) + (delta)\n        root2 = (-b/(2*c)) - (delta)\n        if root1 < root2:\n            roots = root1, root2\n        else:\n            roots = root2, root1\n        return roots\n            \ndef hyperbola_intersection(a, b):\n    '''\n    Write a function to find the intersection of a Hyperbola.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = b**2/a**2\n        delta = (2*c)**(1/2)\n        root1 = (-b/(2*c)) + (delta)\n        root2 = (-b/(2*c)) - (delta)\n        if root1 < root2:\n            roots = root1, root2\n        else:\n            roots = root2, root1\n        return roots\n            \ndef hermite_equation(a, b):\n    '''\n    Write a function to find the coefficients for a Hermite.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = (b**2)/a**2\n        d = (a**2)/(2*b**2)\n        e = (b**2)/(a**2)\n        f = c + d + e\n        return (f)\n        \ndef hermite_roots(a, b):\n    '''\n    Write a function to find the roots of a Hermite.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = (b**2)/a**2\n        d = (a**2)/(2*b**2)\n        e = (b**2)/(a**2)\n        f = c + d + e\n        delta = f**(1/2)\n        root1 = (-b/(2*c)) + (delta)\n        root2 = (-b/(2*c)) - (delta)\n        if root1 < root2:\n            roots = root1, root2\n        else:\n            roots = root2, root1\n        return roots\n            \ndef hermite_intersection(a, b):\n    '''\n    Write a function to find the intersection of a Hermite.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = (b**2)/a**2\n        d = (a**2)/(2*b**2)\n        e = (b**2)/(a**2)\n        f = c + d + e\n        delta = f**(1/2)\n        root1 = (-b/(2*c)) + (delta)\n        root2 = (-b/(2*c)) - (delta)\n        if root1 < root2:\n            roots = root1, root2\n        else:\n            roots = root2, root1\n        return roots\n            \ndef hermite_equation(a, b):\n    '''\n    Write a function to find the coefficients for a Hermite.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = (b**2)/a**2\n        d = (a**2)/(2*b**2)\n        e = (b**2)/(a**2)\n        f = c + d + e\n        return (f)\n        \ndef hermite_roots(a, b):\n    '''\n    Write a function to find the roots of a Hermite.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = (b**2)/a**2\n        d = (a**2)/(2*b**2)\n        e = (b**2)/(a**2)\n        f = c + d + e\n        delta = f**(1/2)\n        root1 = (-b/(2*c)) + (delta)\n        root2 = (-b/(2*c)) - (delta)\n        if root1 < root2:\n            roots = root1, root2\n        else:\n            roots = root2, root1\n        return roots\n            \ndef hermite_intersection(a, b):\n    '''\n    Write a function to find the intersection of a Hermite.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = (b**2)/a**2\n        d = (a**2)/(2*b**2)\n        e = (b**2)/(a**2)\n        f = c + d + e\n        delta = f**(1/2)\n        root1 = (-b/(2*c)) + (delta)\n        root2 = (-b/(2*c)) - (delta)\n        if root1 < root2:\n            roots = root1, root2\n        else:\n            roots = root2, root1\n        return roots\n            \ndef hermite_equation(a, b):\n    '''\n    Write a function to find the coefficients for a Hermite.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = (b**2)/a**2\n        d = (a**2)/(2*b**2)\n        e = (b**2)/(a**2)\n        f = c + d + e\n        return (f)\n        \ndef hermite_roots(a, b):\n    '''\n    Write a function to find the roots of a Hermite.\n    '''\n    # a = 0\n    if a == 0:\n        print(\"Incorrect input\")\n    else:\n        c = (b**2)/a**2\n        d = (a**2)/(2*b**2)\n        e = (b**2)/(a**2)\n        f = c + d + e\n        delta "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((-b/2*a + b*b/4 - c/4)/(a*a)) \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b**2 - 4*a*c\n    if D < 0:\n        return 0\n    elif D == 0:\n        return -b / (2*a)\n    else:\n        return ((-b + sqrt(D))/(2*a), (-b - sqrt(D))/(2*a))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    dx = 0\n    dy = 0\n    while (x*x + y*y) > 0.01:\n        dx = x - a*x*x + b*x + c\n        dy = y - a*y*y + b*y + c\n        x = x - dx/a\n        y = y - dy/a\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if c == a**2:\n        return 0, c\n    elif c < a**2:\n        return a, -b\n    else:\n        return 0, -b\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # for x in range(a,b):\n    #     y = a**2 - (b**2) * (x**2)/(2*c)\n    #     print(x,y)\n    x = a\n    while x <= b:\n        y = a**2 - (b**2) * (x**2)/(2*c)\n        print(x,y)\n        x += 0.01\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = (b**2 - 4*a*c)**0.5\n    x_a = (-b + delta)/(2*a)\n    x_b = (-b - delta)/(2*a)\n    x = a*x_a\n    y = a*x_b\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    y = c * a * a - b * a + c\n    while True:\n        x_new = x + (y - x * x) / (2 * a)\n        y_new = c * x_new * x_new - b * x_new + c\n        if x_new == x:\n            break\n        x = x_new\n        y = y_new\n    return x, y\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #create set of elements of list 1\n    set1 = set(list1)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    if len(list1) == 0 or len(list2) == 0:\n        return common\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1).intersection(set(list2)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for i in list1:\n        if i in list2:\n            common_list.append(i)\n    if common_list!= []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list(set(list1) & set(list2))!= []\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length = 2*base1+base2\n    h = height\n    print('The trapezium with base1 =', base1, 'and base2 =', base2, 'and height =', height, 'has length =', length)\n    if h%2 == 0:\n        median_length = (length+length)/2\n        print('The median length of this trapezium is', median_length)\n    else:\n        median_length = length/2\n        print('The median length of this trapezium is', median_length)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    if base1 <= 0 or base2 <= 0:\n        raise Exception(\"Error: one or more of the sides has zero length\")\n    else:\n        left_length = (base1 + base2)/2\n        right_length = left_length\n        height = float(height)\n        while height > left_length:\n            left_length = (base1 + base2)/2\n            right_length = left_length\n            height = float(height)\n            if height <= left_length:\n                left_length = left_length\n                right_length = right_length\n            else:\n                if left_length == right_length:\n                    break\n                else:\n                    left_length = (height + left_length)/2\n                    right_length = (height + right_length)/2\n        return left_length, right_length\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_base = base1/2 + base2/2\n    half_height = height/2\n    return (base1+base2)/2 + half_height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = 0\n    length_of_trapezium = base1 + base2\n    if height == length_of_trapezium:\n        median_length = length_of_trapezium/2\n    elif height == 0:\n        median_length = 0\n    else:\n        median_length = median_trapezium(base1,base2,height/2)\n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def calculate_area(base,height,angle):\n        '''\n        Calculate the area of a trapezium by the equation:\n            area = 1/2 * base * height\n            angle = angle of trapezium\n        '''\n        if angle > 90:\n            angle = angle - 180\n        area = 1/2 * base * height\n        return area\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area1 = base1 * height\n    area2 = base2 * height\n    area3 = (base1 + base2) * height / 2\n    return (area1 + area2 + area3) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    print(base1, base2, height)\n    if(base1 < 0 or base2 < 0 or height < 0):\n        return \"Cannot be negative values\"\n    elif(base1 == 0 or base2 == 0 or height == 0):\n        return \"Cannot be zero\"\n    else:\n        return ((base1 + base2) * height)/2\n    \ndef median_gauss(x,sigma):\n    '''\n    Write a function to find the median length of a gaussian function.\n    '''\n    if(x < 0 or sigma < 0):\n        return \"Cannot be negative values\"\n    else:\n        return ((1/(sigma*math.sqrt(2*math.pi))*math.exp(-(x**2)/(2*sigma**2))))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)*height)/2\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if x > number:\n            return True\n    return False\n    \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if (len(arr) == 0):\n        return False\n    for i in range(len(arr)):\n        if number == arr[i]:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(f'{num} is greater than {number}')\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    i = 0\n    if arr[i] > number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Another option is to use a range function\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr > number\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] <= number:\n            greater = True\n        else:\n            greater = False\n            break\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort(reverse=True)\n    arr = arr[:len(arr)]\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"^[ab]+$\",text):\n        return True\n    else:\n        return False\n    #'ab' + 'a'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r\"a(b+)\",text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    ans = re.match(r'a+b+', text)\n    return ans\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'ab+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'a+b',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matches = re.match(r'a+b', text)\n    if matches:\n        return matches\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # result = re.search(r\"ab\", text)\n    # print(result)\n    # result = re.search(r\"ab\\s\", text)\n    # print(result)\n    # result = re.search(r\"ab\\s\", text)\n    # print(result)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r'a+b', text))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab*'\n    if re.search(pattern, text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n1 = n%10\n    n2 = n//10\n    return n1 if n1>n2 else n2\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return(n%10)\n    \n    \ndef last_Digit_Number(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Positive_Negative(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_Digit = last_Digit(n1)\n    return(last_Digit)\n    \n    \ndef last_Digit_Number_Multiple_Argument_Negative_Positive(n1,n2) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while(n > 0) :\n        n = n // 10\n    return n\n    "
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    count = 0\n    for i in range(len(str(n))) :\n        count = count + int(str(n)[len(str(n))-1-i])\n    return count\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    string = str(n)\n    return string[len(string)-1]\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    print(\"\\nIn last digit(%d)\"%(n))\n    while n>0 :\n        r = n%10\n        n = n//10\n        print(\"%d\"%r,end='')\n        if n == 0 :\n            print(\"\")\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    i=0\n    while i<len(list1):\n        if list1[i]<0:\n            list1[i]=list1[i]*(-1)\n        else:\n            i=i+1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-i for i in list1 if i<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    output = []\n    for item in list1:\n        output.append(item*-1)\n    return output\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i]*(-1))\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if list1[i]<0:\n            result.append(list1[i])\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        if list1[i]<0:\n            l.append(list1[i])\n    return l\ndef my_mul(list1):\n    '''\n    Write a python function to multiply every element of a list by 2.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i]*2)\n    return l\ndef check_even(list1):\n    '''\n    Write a python function to check if the elements of a list are even or not.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        if list1[i]%2==0:\n            l.append(True)\n        else:\n            l.append(False)\n    return l\ndef flip(list1):\n    '''\n    Write a python function to flip the elements of a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l.reverse()\n    return l\ndef check_palindrome(list1):\n    '''\n    Write a python function to check if a list is a palindrome or not.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l.reverse()\n    if l == list1:\n        return True\n    else:\n        return False\ndef get_non_dup_list(list1):\n    '''\n    Write a python function to get a non duplicate list from a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        if list1[i] not in l:\n            l.append(list1[i])\n    return l\ndef get_unique_list(list1):\n    '''\n    Write a python function to get a unique list from a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        if list1[i] not in l:\n            l.append(list1[i])\n    return l\ndef get_longest_word(list1):\n    '''\n    Write a python function to get the longest word from a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    for i in range(0, len(l)):\n        if l[i] == \" \":\n            l = l[i+1:]\n            break\n    return l[0]\ndef get_no_of_words(list1):\n    '''\n    Write a python function to get the number of words in a string.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    return len(l)\ndef get_no_of_characters(list1):\n    '''\n    Write a python function to get the number of characters in a string.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    return len(l)\ndef sort_by_alphabet(list1):\n    '''\n    Write a python function to sort a list of strings by alphabetical order.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    return l\ndef no_of_even(list1):\n    '''\n    Write a python function to count the number of even elements in a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    count = 0\n    for i in range(0, len(l)):\n        if l[i]%2==0:\n            count+=1\n    return count\ndef no_of_odd(list1):\n    '''\n    Write a python function to count the number of odd elements in a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    count = 0\n    for i in range(0, len(l)):\n        if l[i]%2!=0:\n            count+=1\n    return count\ndef even_odd(list1):\n    '''\n    Write a python function to return the even and odd numbers in a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    l1 = []\n    l2 = []\n    for i in range(0, len(l)):\n        if l[i]%2==0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    return l1, l2\ndef negative_no_of_even(list1):\n    '''\n    Write a python function to count the negative even numbers in a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    count = 0\n    for i in range(0, len(l)):\n        if l[i]<0 and l[i]%2==0:\n            count+=1\n    return count\ndef even_odd_range(list1):\n    '''\n    Write a python function to find the even and odd numbers in a range of numbers.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    l1 = []\n    l2 = []\n    for i in range(0, len(l)):\n        if l[i]%2==0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    return l1, l2\ndef no_of_elements_greaterthan_n(list1, n):\n    '''\n    Write a python function to find the number of elements greater than a number in a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    count = 0\n    for i in range(0, len(l)):\n        if l[i]>n:\n            count+=1\n    return count\ndef no_of_elements_greaterthan_n_list(list1, n):\n    '''\n    Write a python function to find the number of elements greater than a number in a list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    count = 0\n    for i in range(0, len(l)):\n        if l[i]>n:\n            count+=1\n    return count\ndef no_of_elements_greaterthan_n_list_except_n(list1, n):\n    '''\n    Write a python function to find the number of elements greater than a number in a list except a given number.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        l.append(list1[i])\n    l = sorted(l)\n    count = 0\n    for i in range(0, len(l)):\n        if l[i]>n:\n            if l[i]!=n:\n                count+=1\n    return count\ndef no_of_elements_greaterthan_n_list_except_n_list(list1, n):\n    '''\n    Write a python function to find the number of elements greater than a number in a list except a given number.\n    '''\n    "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for num in list1:\n        if num < 0:\n            neg_nos.append(num)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    # Using list comprehension\n    #return [-i for i in list1 if i < 0]\n    \n    # Using list comprehension\n    #return [i for i in list1 if i < 0]\n    \n    # Using list comprehension\n    return [-i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            negative_numbers.append(list1[i])\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i]<0:\n            list1[i]=list1[i]*-1\n    return list1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1_list = list(str1)\n    for i in str1_list:\n        if str1_list.index(i)%2!=0:\n            str1_list.remove(i)\n    str1_final = ''.join(str1_list)\n    print(str1_final)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if not c.isdigit()])\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] % 2 == 0:\n            del str1[i]\n    return ''.join(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i.isdigit()==True:\n            str2+=i\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\" \",\"\").replace(\".\",\"\").replace(\",\",\"\").replace(\"'\",\"\").replace(\"-\",\"\")\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # string = ''\n    # for i in str1:\n    #     if i%2==0:\n    #         string = string + i\n    # return string\n    s = str1.replace(\"1\",\"\")\n    s = s.replace(\"2\",\"\")\n    s = s.replace(\"3\",\"\")\n    s = s.replace(\"4\",\"\")\n    s = s.replace(\"5\",\"\")\n    s = s.replace(\"6\",\"\")\n    s = s.replace(\"7\",\"\")\n    s = s.replace(\"8\",\"\")\n    s = s.replace(\"9\",\"\")\n    s = s.replace(\"0\",\"\")\n    return s\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) <= 1:\n        return str1\n    else:\n        return str1[0] + remove_odd(str1[1:len(str1)])\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # remove odd characters\n    return \"\".join([l for l in str1 if l.isdigit()])\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\"b\",\"\")\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set([item for item in test_list if test_list.count(tuple(reversed(item)))>1]))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(1 for x, y in test_list if is_bidirectional(x, y))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # if test_list == None:\n    #     return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum([1 for i in test_list if i[::-1] in test_list])\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)-1):\n        counter += test_list[i][1] * test_list[i+1][0]\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #count = 0\n    #for i in range(0,len(test_list)-1):\n        #if test_list[i] < test_list[i+1]:\n            #count += 1\n    #return count\n    return test_list.count(test_list[i] < test_list[i+1])\n    \n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    x = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0]==test_list[j][1]) or (test_list[i][1]==test_list[j][0]):\n                x += 1\n    return x\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    ans = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i] + test_list[j] == (test_list[i]+test_list[j])):\n                ans += 1\n    return(ans)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    print(sum(L))\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ans = 0\n    for i in L:\n        ans = ans*10 + i\n    return ans\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(sum(L)/len(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i = L[0]\n    for j in range(1, len(L)):\n        i = i * 10 + L[j]\n    return i\n        \n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(L[0]) + str(L[1]) + str(L[2]) + str(L[3]) + str(L[4]))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    assert(type(L) == list and len(L) == 3)\n    return int(str(L[0]) + str(L[1]) + str(L[2]))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #patterns = r'(.*?)(?:(?:(?:\\S{2}[\\w\\d]*)|(?:\\S{2}[\\w\\d]*\\?)|(?:\\S{2}[\\w\\d]*\\.))(?:\\S{2}[\\w\\d]*)|(\\d+)(?:(?:(?:\\S{2}[\\w\\d]*)|(?:\\S{2}[\\w\\d]*\\?)|(?:\\S{2}[\\w\\d]*\\.))(?:\\S{2}[\\w\\d]*)|(?:\\S{2}[\\w\\d]*\\.))(?:\\S{2}[\\w\\d]*))\\S+|(?:\\S{2}[\\w\\d]*\\.)+(?:\\S{2}[\\w\\d]*|\\S+))'\n    #patterns = r'(.*?)(?:(?:\\S{2}[\\w\\d]*)|(?:\\S{2}[\\w\\d]*\\?)|(?:\\S{2}[\\w\\d]*\\.))(?:\\S{2}[\\w\\d]*)|(?:\\S{2}[\\w\\d]*\\.)+(?:\\S{2}[\\w\\d]*|\\S+))'\n    #patterns = r'(.*?)(?:(?:\\S{2}[\\w\\d]*)|(?:\\S{2}[\\w\\d]*\\?)|(?:\\S{2}[\\w\\d]*\\.))(?:\\S{2}[\\w\\d]*|\\S+))'\n    patterns = r'(.*?)(?:(?:\\S{2}[\\w\\d]*)|(?:\\S{2}[\\w\\d]*\\?)|(?:\\S{2}[\\w\\d]*\\.))(?:\\S{2}[\\w\\d]*|\\S+))'\n    adverbs = re.findall(patterns, text)\n    adverb_dict = {}\n    for i, adverb in enumerate(adverbs):\n        if adverb[1] == '\\S{2}[\\w\\d]*':\n            adverb = adverb[2]\n        # if adverb[0] not in adverb_dict:\n        #     adverb_dict[adverb[0]] = i\n        # else:\n        #     adverb_dict[adverb[0]] += i\n        if adverb[0] not in adverb_dict:\n            adverb_dict[adverb[0]] = {adverb[2]:i}\n        else:\n            if adverb[2] not in adverb_dict[adverb[0]]:\n                adverb_dict[adverb[0]][adverb[2]] = i\n            else:\n                adverb_dict[adverb[0]][adverb[2]] += i\n    return adverb_dict\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    matches = re.finditer(r'(?:ADV|adv|Adverb|adverb|Advers|advers)',text)\n    found = []\n    for match in matches:\n        found.append((match.group(0),match.start(),match.end()))\n    return found\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    if 'now' in text or 'actually' in text:\n        return 'now'\n    if 'also' in text:\n        return 'also'\n    if'moreover' in text:\n        return'moreover'\n    if 'previously' in text:\n        return 'previously'\n    if 'as well' in text:\n        return 'as well'\n    if 'therefore' in text:\n        return 'therefore'\n    if'since' in text:\n        return'since'\n    if'so' in text:\n        return'so'\n    if 'therefore' in text:\n        return 'therefore'\n    if 'that' in text:\n        return 'that'\n    if 'afterwards' in text:\n        return 'afterwards'\n    if 'later' in text:\n        return 'later'\n    if 'otherwise' in text:\n        return 'otherwise'\n    if 'without' in text:\n        return 'without'\n    if 'other' in text:\n        return 'other'\n    if'still' in text:\n        return'still'\n    if 'therefore' in text:\n        return 'therefore'\n    if 'rather' in text:\n        return 'rather'\n    if 'thereafter' in text:\n        return 'thereafter'\n    if'sincerely' in text:\n        return'sincerely'\n    if 'thereby' in text:\n        return 'thereby'\n    if 'as' in text:\n        return 'as'\n    if 'just' in text:\n        return 'just'\n    if 'every' in text:\n        return 'every'\n    if 'each' in text:\n        return 'each'\n    if 'except' in text:\n        return 'except'\n    if 'when' in text:\n        return 'when'\n    if 'nor' in text:\n        return 'nor'\n    if 'then' in text:\n        return 'then'\n    if 'next' in text:\n        return 'next'\n    if 'but' in text:\n        return 'but'\n    if 'no' in text:\n        return 'no'\n    if'many' in text:\n        return'many'\n    if'still' in text:\n        return'still'\n    if 'even' in text:\n        return 'even'\n    if 'having' in text:\n        return 'having'\n    if 'furthermore' in text:\n        return 'furthermore'\n    if 'without' in text:\n        return 'without'\n    if 'any' in text:\n        return 'any'\n    if 'else' in text:\n        return 'else'\n    if 'where' in text:\n        return 'where'\n    if'so' in text:\n        return'so'\n    if 'later' in text:\n        return 'later'\n    if 'other' in text:\n        return 'other'\n    if 'now' in text:\n        return 'now'\n    if'so' in text:\n        return'so'\n    if 'other' in text:\n        return 'other'\n    if 'there' in text:\n        return 'there'\n    if 'further' in text:\n        return 'further'\n    if 'again' in text:\n        return 'again'\n    if 'his' in text:\n        return 'his'\n    if 'later' in text:\n        return 'later'\n    if 'his' in text:\n        return 'his'\n    if 'that' in text:\n        return 'that'\n    if 'i' in text:\n        return 'i'\n    if 'he' in text:\n        return 'he'\n    if 'as' in text:\n        return 'as'\n    if 'how' in text:\n        return 'how'\n    if'much' in text:\n        return'much'\n    if 'when' in text:\n        return 'when'\n    if 'will' in text:\n        return 'will'\n    if 'well' in text:\n        return 'well'\n    if'since' in text:\n        return'since'\n    if 'beyond' in text:\n        return 'beyond'\n    if 'back' in text:\n        return 'back'\n    if 'now' in text:\n        return 'now'\n    if 'back' in text:\n        return 'back'\n    if 'often' in text:\n        return 'often'\n    if 'against' in text:\n        return 'against'\n    if 'it' in text:\n        return 'it'\n    if'moreover' in text:\n        return'moreover'\n    if 'against' in text:\n        return 'against'\n    if 'the' in text:\n        return 'the'\n    if 'toward' in text:\n        return 'toward'\n    if 'without' in text:\n        return 'without'\n    if'so' in text:\n        return'so'\n    if'may' in text:\n        return'may'\n    if 'before' in text:\n        return 'before'\n    if 'other' in text:\n        return 'other'\n    if 'wherever' in text:\n        return 'wherever'\n    if 'rather' in text:\n        return 'rather'\n    if 'where' in text:\n        return 'where'\n    if 'i' in text:\n        return 'i'\n    if 'of' in text:\n        return 'of'\n    if 'the' in text:\n        return 'the'\n    if 'toward' in text:\n        return 'toward'\n    if 'beyond' in text:\n        return 'beyond'\n    if 'afterwards' in text:\n        return 'afterwards'\n    if 'which' in text:\n        return 'which'\n    if 'for' in text:\n        return 'for'\n    if 'once' in text:\n        return 'once'\n    if 'again' in text:\n        return 'again'\n    if 'his' in text:\n        return 'his'\n    if 'for' in text:\n        return 'for'\n    if 'himself' in text:\n        return 'himself'\n    if 'her' in text:\n        return 'her'\n    if'so' in text:\n        return'so'\n    if 'then' in text:\n        return 'then'\n    if 'however' in text:\n        return 'however'\n    if 'when' in text:\n        return 'when'\n    if 'other' in text:\n        return 'other'\n    if 'in' in text:\n        return 'in'\n    if 'there' in text:\n        return 'there'\n    if 'accordingly' in text:\n        return 'accordingly'\n    if 'where' in text:\n        return 'where'\n    if 'therefore' in text:\n        return 'therefore'\n    if 'else' in text:\n        return 'else'\n    if 'and' in text:\n        return 'and'\n    if 'which' in text:\n        return 'which'\n    if 'as' in text:\n        return 'as'\n    if 'thrown' in text:\n        return 'thrown'\n    if'so' in text:\n        return'so'\n    if 'but' in text:\n        return 'but'\n    if 'as' in text:\n        return 'as'\n    if 'that' in text:\n        return 'that'\n    if 'it' in text:\n        return 'it'\n    if 'there' in text:\n        return 'there'\n    if 'again' in text:\n        return 'again'\n    if 'his' in text:\n        return 'his'\n    if 'the' in text:\n        return 'the'\n    if 'than' in text:\n        return 'than'\n    if 'up' in text:\n        return 'up'\n    if 'to' in text:\n        return 'to'\n    if'so' in text:\n        return'so'\n    if 'even' in text:\n        return 'even'\n    if 'then' in text:\n        return 'then'\n    if 'where' in text:\n        return 'where'\n    if 'in' in text:\n        return 'in'\n    if 'his' in text:\n        return 'his'\n    if 'there' i"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    '''\n    Sample Input    Expected Output\n    This is a super awesome day and night, a new day and new night!    \n    (1, 10)    (2, 19)    (3, 23)    (4, 29)    (5, 43)    (6, 48)    (7, 53)    (8, 57)    (9, 63)    (10, 65)\n    '''\n    text = re.sub(r'\\d+', '', text)\n    p1 = r\"\\b(?:(?:(?<=[a-zA-Z0-9-\\'])\\d+(?:[,\\.]\\d+)*)|(?<=\\w)\\b\\d+\\b)(?:\\s(?<=\\w)\\b\\d+(?:[,\\.]\\d+)*\\b\\s*)\"\n    p2 = r\"(?:(?<=\\w)\\d+(?:[,\\.]\\d+)*\\b\\s*)\"\n    regex = r\"(?:(?<=\\w)\\d+(?:[,\\.]\\d+)*\\b\\s*)\"\n    result1 = re.findall(p1, text)\n    result2 = re.findall(p2, text)\n    result3 = re.findall(regex, text)\n    result1_position = []\n    result2_position = []\n    result3_position = []\n    for i in result1:\n        result1_position.append(i[0])\n    for i in result2:\n        result2_position.append(i[0])\n    for i in result3:\n        result3_position.append(i[0])\n    result = result1_position + result2_position + result3_position\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return\n    \nif __name__ == '__main__':\n    print find_adverb_position(\"As I know, I really don't like that.\")\n    print find_adverb_position(\"I am very happy about that. I am happy about that.\")\n    print find_adverb_position(\"I am happy, I am happy. I am very happy.\")\n    print find_adverb_position(\"I am very happy, I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am very happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy.\")\n    print find_adverb_position(\"I am happy. I am very happy. I am happy. I am happy. I am happy. I am happy. I am happy. I am happy. I a"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    for i, word in enumerate(text.split()):\n        if word in ['after', 'then']:\n            positions.append(i)\n        if word in ['before', 'then']:\n            positions.append(i)\n        if word in ['if', 'before', 'then', 'in']:\n            positions.append(i)\n        if word in ['if', 'in', 'then']:\n            positions.append(i)\n        if word in ['if', 'after', 'then', 'in']:\n            positions.append(i)\n        if word in ['if', 'if', 'before', 'then', 'in']:\n            positions.append(i)\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(\"ADV.*|RB.*|VB.*|PRP.*|PRP\\$|WP|WP\\$|TO\")\n    match = pattern.findall(text)\n    result = list(match)\n    result = [(i.replace(\"ADV \", \"\").replace(\"RB \", \"\").replace(\"VB \", \"\").replace(\"PRP \", \"\").replace(\"PRP$ \", \"\").replace(\"WP\", \"\").replace(\"WP$\", \"\").replace(\"TO\", \"\").replace(\"$\", \"\").strip(), result.index(i)) for i in result]\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # your code here\n    new_text=text.split(' ')\n    count=0\n    for i in new_text:\n        if i in adverb:\n            print(\"The position of {} is {}\".format(i,count))\n        count+=1\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text == None:\n        return None\n    text = text.lower()\n    regex_compile = re.compile(r'\\w*[a-z]*\\s*\\w*[a-z]+\\s*[a-z]*')\n    regex_search = regex_compile.search(text)\n    \n    if regex_search == None:\n        return None\n    else:\n        position = regex_search.start()\n        length = regex_search.end()\n        return position\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs=[\"al\", \"abundant\", \"abundantly\", \"a certain\", \"accentually\", \"actually\", \"alas\", \"amongst\", \"arbitrarily\", \"as anly\", \"as a result\", \"as anulally\", \"as beautifully\", \"as a result\", \"as broadly\", \"as continually\", \"as deeply\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as far as\", \"as fa"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**2)*6\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*(l**2)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = (6 * l**2) + 6 * l\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l*l*l\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * 6\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = (6*l**2)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * (l ** 2)\n    return area\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c = 0\n    for i in nums:\n        if i > 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return (sum(nums)/len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return sum(1 for num in nums if num>0) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_pos=0\n    for i in range(0,len(nums)):\n        if nums[i]>=0:\n            num_pos+=1\n    ratio=num_pos/len(nums)\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(0,len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i>=0:\n            pos+=1\n    return pos/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -999999\n    for x in list1:\n        if x <= 0:\n            if x > largest:\n                largest = x\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    m = 0\n    n = 0\n    \n    for i in range(len(list1)):\n        if(list1[i] < 0):\n            m = m + 1\n        else:\n            n = n + 1\n    \n    if(m > n):\n        print(\"First Negative Value = \",m)\n    else:\n        print(\"First Non-Negative Value = \",n)\n    \n    \n    \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maximum = -1\n    for num in list1:\n        if num < 0 and num > maximum:\n            maximum = num\n    return maximum\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = -1\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest_negative:\n                largest_negative = list1[i]\n    return largest_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    list2 = [] \n    largest = -10000\n    for i in list1:\n        list2.append(i)\n    for i in list2:\n        if i < 0:\n            if i > largest:\n                largest = i\n    print(largest)\n    return largest \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -100000\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in list1:\n        if i < 0:\n            if i > max:\n                max = i\n    return max\ndef largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and max < list1[i]:\n            max = list1[i]\n    return max\ndef largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and max < list1[i]:\n            max = list1[i]\n    return max\n    \nlist1 = [-1, -2, -3, -4, -5]\nprint(\"The largest negative number is:\", largest_neg(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=-1\n    for i in list1:\n        if i<max:\n            max=i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    m=list1[0]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            if m<list1[i]:\n                m=list1[i]\n    return m\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        if i >= K:\n            return_list.append(test_list[i])\n    return return_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    tuple_list = []\n    if len(test_list) <= K:\n        for i in range(len(test_list)):\n            tuple_list.append(test_list[i])\n    else:\n        for i in range(len(test_list)-K):\n            tuple_list.append(test_list[i])\n    return tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_test_list = []\n    for tuple_list in test_list:\n        temp_list = []\n        for i in range(K):\n            temp_list.append(tuple_list[i])\n        new_test_list.append(temp_list)\n    return new_test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    else:\n        if len(test_list) <= K:\n            return test_list\n        else:\n            test_list = sorted(test_list, key=lambda x: (x[0], x[1]))\n            tuple_list = []\n            for i in range(len(test_list)):\n                if i == 0:\n                    tuple_list.append(test_list[0])\n                else:\n                    if test_list[i][0] - test_list[i - 1][0] <= K:\n                        tuple_list.append(test_list[i])\n            return tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(trim_tuple(k, K), trim_tuple(v, K)) for k, v in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        while len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    i = 0\n    while i < len(test_list):\n        if len(test_list[i]) <= K:\n            test_list.pop(i)\n            i -= 1\n        i += 1\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    while len(test_list) >= K:\n        test_list.pop()\n    return test_list\n    \nif __name__ == '__main__':\n    \n    # sample_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\n    # K = 3\n    # print('Input : ', sample_list)\n    # print('Output : ', trim_tuple(sample_list, K))\n    \n    sample_list = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n    K = 5\n    print('Input : ', sample_list)\n    print('Output : ', trim_tuple(sample_list, K))\n    \n    # sample_list = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n    # K = 3\n    # print('Input : ', sample_list)\n    # print('Output : ', trim_tuple(sample_list, K))"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        indices = []\n        for i in range(len(test_tup1)):\n            indices.append(i)\n    if test_tup1 == test_tup2:\n        return test_tup1\n    else:\n        index_value = -1\n        index_value = multiply_lists(test_tup1, test_tup2)\n        print(index_value)\n        test_tup1 = tuple(test_tup1)\n        test_tup2 = tuple(test_tup2)\n        print(test_tup1)\n        print(test_tup2)\n        for i in range(len(test_tup1)):\n            test_tup1 = list(test_tup1)\n            test_tup1[i] = multiply_lists(test_tup1[i], index_value)\n            test_tup1 = tuple(test_tup1)\n            test_tup2 = list(test_tup2)\n            test_tup2[i] = multiply_lists(test_tup2[i], index_value)\n            test_tup2 = tuple(test_tup2)\n        return test_tup1, test_tup2\n    \ntest_tuple1 = (4, 2, 3)\ntest_tuple2 = (1, 5, 6)\nindex_multiplication(test_tuple1, test_tuple2)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    a = list(test_tup1)\n    b = list(test_tup2)\n    c = []\n    for i in range(len(a)):\n        c.append(a[i]*b[i])\n    return tuple(c)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    x = list(test_tup1)\n    y = list(test_tup2)\n    new_tup = []\n    for i in range(len(test_tup1)):\n        x[i] *= y[i]\n        new_tup.append(x[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [i*j for i, j in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_product = []\n    for i in range(len(test_tup1)):\n        product = test_tup1[i] * test_tup2[i]\n        test_product.append(product)\n    return test_product\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_tup = []\n    index_num1 = 0\n    index_num2 = 0\n    while index_num1 < len(test_tup1) and index_num2 < len(test_tup2):\n        index_tup.append(test_tup1[index_num1] * test_tup2[index_num2])\n        index_num1 += 1\n        index_num2 += 1\n    return index_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    #If length of the given tuple is not equal then raise an error\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Length of the two tuples should be the same!')\n    \n    #If length of the given tuple is equal then multiply the elements of the tuple\n    else:\n        print('Multiplication of the given tuple elements is:')\n        for i in range(len(test_tup1)):\n            print(test_tup1[i]*test_tup2[i], end=' ')\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    list_1 = list(test_tup1)\n    list_2 = list(test_tup2)\n    list_1_len = len(list_1)\n    list_2_len = len(list_2)\n    list_1_temp = []\n    list_2_temp = []\n    for i in range(list_1_len):\n        list_1_temp.append(list_1[i] * list_2[i])\n    for i in range(list_2_len):\n        list_2_temp.append(list_2[i] * list_1[i])\n    return tuple(list_1_temp), tuple(list_2_temp)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_output = []\n    for i in range(len(test_tup1)):\n        index_multiplication_output.append(test_tup1[i]*test_tup2[i])\n    return index_multiplication_output\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    print(\"Count of Occurence: \", count) \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(lst)\n    lst = Counter(lst)\n    print(lst)\n    for i in tup:\n        if i in lst:\n            lst[i] += 1\n        else:\n            lst[i] = 1\n    print(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) == Counter(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in range(len(lst)):\n        if tup[x] not in lst:\n            lst.append(tup[x])\n    print(Counter(lst).most_common())\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst) \n    for i in tup:\n        if i in cnt.keys():\n            cnt[i] += 1\n        else:\n            cnt[i] = 1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if len(tup)!= len(lst):\n        return -1\n    count = 0\n    for i in range(len(tup)):\n        if tup[i]!= lst[i]:\n            count = 0\n        else:\n            count += 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n    \n    \n    \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrence(lst, tup): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n    \n    \n    \ndef count_Occurrenc"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    x = Counter(lst)\n    res = x.items()\n    return res\nprint(count_Occurrence((1,2,3,4,5,6), [2,4,6,8,10])) \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tuple(lst.count(i) for i in tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i ** 3)\n    print(cubes)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    nums_cubed = []\n    for i in range(len(nums)):\n        nums_cubed.append(nums[i]**3)\n    return nums_cubed\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    print(cubes)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube(num):\n        return num**3\n    return list(map(cube, nums))\nprint(cube_nums([1, 2, 3, 4]))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n+cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n = int(n)\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n//10\n    return sum\n    \ndef get_char_freq(string):\n    '''\n    Write a function to return the dictionary of the frequencies of each\n    character in the string.\n    '''\n    #create a dictionary\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n    \ndef reverse_str(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    #reverse the string and compare\n    return string == reverse_str(string)\n    \ndef factorial(num):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n    \ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    #base case\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n        \ndef max_num(num1, num2, num3):\n    '''\n    Write a function to return the maximum of three numbers.\n    '''\n    return max(num1, num2, num3)\n    \ndef factorial_series(num):\n    '''\n    Write a function to calculate the factorial series of a number.\n    '''\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result\n    \ndef fib(n):\n    '''\n    Write a function to calculate the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n    \ndef get_length(string):\n    '''\n    Write a function to get the length of a string.\n    '''\n    return len(string)\n    \ndef get_avg(nums):\n    '''\n    Write a function to calculate the average of a list of numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef get_lcs(str1, str2):\n    '''\n    Write a function to return the longest common subsequence (LCS) for two strings.\n    '''\n    #create a table\n    table = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)]\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    return table[-1][-1]\n    \ndef get_triangle_num(n):\n    '''\n    Write a function to calculate the sum of triangle numbers less than a given number.\n    '''\n    #create a table\n    table = [0 for i in range(n)]\n    table[0] = 1\n    table[1] = 1\n    for i in range(2, n):\n        table[i] = table[i - 1] + table[i - 2]\n    return table[-1]\n    \ndef is_prime_v2(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    #base case\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \ndef count_by_range(nums, lower, upper):\n    '''\n    Write a function to count the number of elements in a given range in a list.\n    '''\n    cnt = 0\n    for num in nums:\n        if num >= lower and num <= upper:\n            cnt += 1\n    return cnt\n    \ndef is_palindrome_v2(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    #reverse the string and compare\n    return string == reverse_str(string)\n    \ndef is_prime_v3(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    #base case\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_prime_v4(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    #base case\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_prime_v5(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    #look for factors\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef is_prime_v6(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    #look for factors\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef is_prime_v7(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    #factors\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef factorial_v7(num):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if num < 2:\n        return 1\n    else:\n        return num * factorial_v7(num - 1)\n    \ndef factorial_v8(num):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * factorial_v8(num - 1)\n    \ndef fib_v7(num):\n    '''\n    Write a function to calculate the fibonacci series of a number.\n    '''\n    #base case\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    #base case\n    elif num == 2:\n        return 1\n    #recursive\n    else:\n        return fib_v7(num - 1) + fib_v7(num - 2)\n    \ndef get_mode(nums):\n    '''\n    Write a function to get the mode of a list of numbers.\n    '''\n    #create a dict\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    #find the max\n    max_count = 0\n    max_count_num = None\n    for k, v in counts.items():\n        if v > max_count:\n            max_count = v\n            max_count_num = k\n    #return the max\n    return max_count_num\n    \ndef get_mode_v2(nums):\n    '''\n    Write a function to get the mode of a list of numbers.\n    '''\n    #create a dict\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    i = 0\n    while(i <= n): \n        sum = sum + (i * i * i)\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 1\n    while i <= n:\n        if is_prime(i):\n            print(i)\n            i += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 2:\n        return n\n    return n + cal_sum(n - 2)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum([(i + 1)**2 for i in range(n)])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    a = len(str)\n    i = l\n    s = ''\n    while a > 0 and i > 0:\n        if a > 0:\n            s = s + str[i]\n            a = a - 1\n        i = i - 1\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = l[:]\n    l1 = []\n    while len(l) > 0:\n        l1.append(l[0])\n        del l[0]\n        if len(l) == 0:\n            break\n    l = l1\n    if len(l) == 0:\n        return str\n    else:\n        str = str + ''.join(l)\n        return str\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in range(l):\n        s += str[i]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    size = l[0]\n    result = []\n    for i in range(size):\n        result.append(str[i])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = sorted(l, reverse=True)\n    count = 0\n    for i in l:\n        if count < l_limit:\n            count += 1\n        else:\n            return l[:count]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    l1 = []\n    while i < l:\n        l1.append(str[i])\n        i += 1\n    return l1\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str = ''.join(str)\n    if len(str)<l:\n        return str\n    else:\n        return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_l = []\n    for i in range(len(l) - l + 1):\n        str_l.append(l[i:i + l])\n    return str_l\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    while \"  \" in text1:\n        text1 = text1.replace(\"  \", \" \")\n    return text1\n    \n    \ndef remove_spaces(text2):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    while \" \" in text2:\n        text2 = text2.replace(\" \", \"\")\n    return text2\n    \n    \ndef remove_punctuations(text3):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    text3 = re.sub(r'[^\\w\\s]', '', text3)\n    return text3\n    \n    \ndef convert_to_title(text4):\n    '''\n    Write a function to convert the given string to title case.\n    '''\n    text4 = text4.title()\n    return text4\n    \n    \ndef remove_symbols(text5):\n    '''\n    Write a function to remove all symbols from the given string.\n    '''\n    text5 = re.sub(r'[^\\w\\s]', '', text5)\n    return text5\n    \n    \ndef lowercase(text6):\n    '''\n    Write a function to convert the given string to lowercase.\n    '''\n    text6 = text6.lower()\n    return text6\n    \n    \ndef split_by_hyphen(text7):\n    '''\n    Write a function to split the given string based on hyphen.\n    '''\n    text7 = re.split(r'[-]', text7)\n    return text7\n    \n    \ndef replace_numbers_with_text(text8):\n    '''\n    Write a function to replace all numeric values in the given string with \"numbers\"\n    '''\n    text8 = re.sub(r'\\d+', 'number', text8)\n    return text8\n    \n    \ndef replace_text_with_numbers(text9):\n    '''\n    Write a function to replace all text values in the given string with \"numbers\"\n    '''\n    text9 = re.sub(r'\\w+', 'number', text9)\n    return text9\n    \n    \ndef swap_case(text10):\n    '''\n    Write a function to swap the case of each word in the given string.\n    '''\n    text10 = text10.swapcase()\n    return text10\n    \n    \ndef find_word_position(text11):\n    '''\n    Write a function to find the position of the given word in the given string.\n    '''\n    text11 = text11.find(\"My\")\n    return text11\n    \n    \ndef find_word_occurence(text12):\n    '''\n    Write a function to find the occurrence of the given word in the given string.\n    '''\n    text12 = text12.count(\"My\")\n    return text12\n    \n    \ndef count_and_print_lines(text13):\n    '''\n    Write a function to count the number of lines in a given string.\n    '''\n    count = 0\n    text13 = text13.split(\"\\n\")\n    for i in range(len(text13)):\n        count += 1\n    return count\n    \n    \ndef print_only_lines(text14):\n    '''\n    Write a function to print only the lines in the given string.\n    '''\n    text14 = text14.split(\"\\n\")\n    for i in range(len(text14)):\n        print(text14[i])\n    return \n    \n    \ndef remove_extra_spaces(text15):\n    '''\n    Write a function to remove the extra spaces from the given string.\n    '''\n    text15 = text15.strip()\n    return text15\n    \n    \ndef print_words_in_same_line(text16):\n    '''\n    Write a function to print all the words in the same line.\n    '''\n    text16 = text16.split(\" \")\n    for i in range(len(text16)):\n        print(text16[i], end = \" \")\n    return \n    \n    \ndef split_sentences(text17):\n    '''\n    Write a function to split the sentence into its words.\n    '''\n    text17 = text17.split(\".\")\n    return text17\n    \n    \ndef remove_emoji_characters(text18):\n    '''\n    Write a function to remove the emoji characters from the given string.\n    '''\n    text18 = re.sub(r'[^\\w\\s]', '', text18)\n    return text18\n    \n    \ndef remove_emojis_and_punctuations(text19):\n    '''\n    Write a function to remove the emoji characters and punctuations from the given string.\n    '''\n    text19 = re.sub(r'[^\\w\\s]', '', text19)\n    return text19\n    \n    \ndef remove_short_words(text20):\n    '''\n    Write a function to remove the short words from the given string.\n    '''\n    text20 = text20.replace(\" \", \"\")\n    text20 = re.sub(r'\\b\\w{1,3}\\b', '', text20)\n    return text20\n    \n    \ndef swap_words(text21):\n    '''\n    Write a function to swap the words in the given string.\n    '''\n    text21 = text21.swapcase()\n    return text21\n    \n    \ndef reverse_sentence(text22):\n    '''\n    Write a function to reverse the sentence.\n    '''\n    text22 = text22[::-1]\n    return text22\n    \n    \ndef print_number_of_letters_and_words_in_sentence(text23):\n    '''\n    Write a function to print the number of letters and words in the given sentence.\n    '''\n    text23 = text23.split(\" \")\n    for i in range(len(text23)):\n        count = len(text23[i])\n        print(count, end = \" \")\n    return \n    \n    \ndef replace_word_by_word(text24):\n    '''\n    Write a function to replace the words in the given sentence by another word.\n    '''\n    text24 = text24.replace(\"My\", \"your\")\n    return text24\n    \n    \ndef reverse_sentence_again(text25):\n    '''\n    Write a function to reverse the sentence again.\n    '''\n    text25 = text25[::-1]\n    return text25\n    \n    \ndef print_the_first_5_characters_of_the_string(text26):\n    '''\n    Write a function to print the first 5 characters of the given string.\n    '''\n    text26 = text26[:5]\n    return text26\n    \n    \ndef print_the_last_5_characters_of_the_string(text27):\n    '''\n    Write a function to print the last 5 characters of the given string.\n    '''\n    text27 = text27[-5:]\n    return text27\n    \n    \ndef print_the_first_3_characters_of_the_string(text28):\n    '''\n    Write a function to print the first 3 characters of the given string.\n    '''\n    text28 = text28[:3]\n    return text28\n    \n    \ndef print_the_last_3_characters_of_the_string(text29):\n    '''\n    Write a function to print the last 3 characters of the given string.\n    '''\n    text29 = text29[-3:]\n    return text29\n    \n    \ndef print_the_first_3_characters_of_the_sentence(text30):\n    '''\n    Write a function to print the first 3 characters of the sentence.\n    '''\n    text30 = text30[:3]\n    return text30\n    \n    \ndef print_the_last_3_characters_of_the_sentence(text31):\n    '''\n    Write a function to print the last 3 characters of the sentence.\n    '''\n    text31 = text31[-3:]\n    return text31\n    \n    \ndef print_the_first_2_characters_o"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # import re\n    # re.sub(r'\\s+', '', text1)\n    # return re.sub('\\s+', '', text1)\n    return re.sub(r'\\s+', '', text1)\n    # return text1.replace(\" \", \"\")\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    # import re\n    # re.sub(r'\\d+', '', text1)\n    # return re.sub(r'\\d+', '', text1)\n    return re.sub(r'\\d+', '', text1)\ndef remove_html(text1):\n    '''\n    Write a function to remove all html tags from the given string.\n    '''\n    # import re\n    # re.sub(r'<.*?>', '', text1)\n    # return re.sub(r'<.*?>', '', text1)\n    return re.sub(r'<.*?>', '', text1)\ndef remove_punctuations(text1):\n    '''\n    Write a function to remove all punctuation characters from the given string.\n    '''\n    # import re\n    # re.sub(r'[^\\w\\s]', '', text1)\n    # return re.sub(r'[^\\w\\s]', '', text1)\n    return re.sub(r'[^\\w\\s]', '', text1)\ndef remove_stopwords(text1):\n    '''\n    Write a function that takes in a string and a list of stop words and returns the string after removing the stop words.\n    '''\n    # import re\n    # stop_words = ['how','are','you','doing']\n    # return re.sub(r'\\b(' + r'|'.join(stop_words) + r')\\b', '', text1)\n    return re.sub(r'\\b(' + r'|'.join(stop_words) + r')\\b', '', text1)\n    # return text1.replace(\" \", \"\").split()\n    # return re.sub(r'\\b(' + r'|'.join(stop_words) + r')\\b', '', text1)\n    # import re\n    # from nltk.corpus import stopwords\n    # stop_words = stopwords.words('english')\n    # text1.split()\n    # stop_words = [\"how\", \"are\", \"you\", \"doing\"]\n    # for word in stop_words:\n    #     text1 = text1.replace(word, \"\")\n    # return text1\n    # return''.join([word for word in text1.split() if word not in stop_words])\ndef find_numbers(text1):\n    '''\n    Write a function that takes in a string and returns a string with only numbers.\n    '''\n    # import re\n    # return re.sub('[^\\d]', '', text1)\n    return re.sub('[^\\d]', '', text1)\ndef find_short_words(text1):\n    '''\n    Write a function that takes in a string and returns a string with only words shorter than 5 characters.\n    '''\n    # import re\n    # return re.sub(r'\\w*\\d\\w*', '', text1)\n    return re.sub(r'\\w*\\d\\w*', '', text1)\ndef find_long_words(text1):\n    '''\n    Write a function that takes in a string and returns a string with only words longer than 5 characters.\n    '''\n    # import re\n    # return re.sub(r'\\w{5,}', '', text1)\n    return re.sub(r'\\w{5,}', '', text1)\ndef capitalize_sentence(text1):\n    '''\n    Write a function that takes in a string and returns the sentence with the first letter capitalized.\n    '''\n    # import re\n    # return re.sub('\\n', '', text1).capitalize()\n    return re.sub('\\n', '', text1).capitalize()\ndef normalize_sentence(text1):\n    '''\n    Write a function that takes in a string and returns the sentence in a format that can be read by the Stanford CoreNLP\n    library.\n    '''\n    # import re\n    # text1 = re.sub(r'\\n', '', text1).lower()\n    # return text1.replace(\"'s\", '').replace(\"'re\", '').replace(\"'ve\", '').replace(\"n't\", '').replace(\"'d\", '')\n    return text1.replace(\"'s\", '').replace(\"'re\", '').replace(\"'ve\", '').replace(\"n't\", '').replace(\"'d\", '')\ndef lower_text(text1):\n    '''\n    Write a function that takes in a string and returns the string in lower case.\n    '''\n    # import re\n    # return text1.lower()\n    return text1.lower()\ndef upper_text(text1):\n    '''\n    Write a function that takes in a string and returns the string in upper case.\n    '''\n    # import re\n    # return text1.upper()\n    return text1.upper()\ndef replace_numbers(text1):\n    '''\n    Write a function that takes in a string and returns the string with numbers replaced with '#'.\n    '''\n    # import re\n    # return re.sub(r'\\d', '#', text1)\n    return re.sub(r'\\d', '#', text1)\ndef remove_punctuations(text1):\n    '''\n    Write a function that takes in a string and returns the string with all the punctuation characters removed.\n    '''\n    # import re\n    # return re.sub(r'[^\\w\\s]', '', text1)\n    return re.sub(r'[^\\w\\s]', '', text1)\ndef remove_stopwords(text1):\n    '''\n    Write a function that takes in a string and returns the string after removing the stop words.\n    '''\n    # import re\n    # stop_words = ['how','are','you','doing']\n    # return re.sub(r'\\b(' + r'|'.join(stop_words) + r')\\b', '', text1)\n    return re.sub(r'\\b(' + r'|'.join(stop_words) + r')\\b', '', text1)\n    # return text1.replace(\" \", \"\").split()\n    # return re.sub(r'\\b(' + r'|'.join(stop_words) + r')\\b', '', text1)\n    # import re\n    # from nltk.corpus import stopwords\n    # stop_words = stopwords.words('english')\n    # text1.split()\n    # stop_words = [\"how\", \"are\", \"you\", \"doing\"]\n    # for word in stop_words:\n    #     text1 = text1.replace(word, \"\")\n    # return text1\n    # return''.join([word for word in text1.split() if word not in stop_words])\ndef find_numbers(text1):\n    '''\n    Write a function that takes in a string and returns a string with only numbers.\n    '''\n    # import re\n    # return re.sub('[^\\d]', '', text1)\n    return re.sub('[^\\d]', '', text1)\ndef find_short_words(text1):\n    '''\n    Write a function that takes in a string and returns a string with only words shorter than 5 characters.\n    '''\n    # import re\n    # return re.sub(r'\\w*\\d\\w*', '', text1)\n    return re.sub(r'\\w*\\d\\w*', '', text1)\ndef find_long_words(text1):\n    '''\n    Write a function that takes in a string and returns a string with only words longer than 5 characters.\n    '''\n    # import re\n    # return re.sub(r'\\w{5,}', '', text1)\n    return re.sub(r'\\w{5,}', '', text1)\ndef capitalize_sen"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\ndef remove_digits(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    return text1.replace(\"0\", \"\")\ndef remove_hyphens(text1):\n    '''\n    Write a function to remove all hyphens from the given string.\n    '''\n    return text1.replace(\"-\", \"\")\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    return text1.replace(\".\", \"\")\ndef remove_all_digits(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    return text1.replace(\"0\", \"\")\ndef remove_characters(text1):\n    '''\n    Write a function to remove all characters from the given string.\n    '''\n    return text1.replace(\" \", \"\")\ndef count_a(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'a' in the given string.\n    '''\n    return text1.count(\"a\")\ndef count_e(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'e' in the given string.\n    '''\n    return text1.count(\"e\")\ndef count_i(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'i' in the given string.\n    '''\n    return text1.count(\"i\")\ndef count_o(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'o' in the given string.\n    '''\n    return text1.count(\"o\")\ndef count_u(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'u' in the given string.\n    '''\n    return text1.count(\"u\")\ndef count_y(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'y' in the given string.\n    '''\n    return text1.count(\"y\")\ndef count_z(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'z' in the given string.\n    '''\n    return text1.count(\"z\")\ndef count_s(text1):\n    '''\n    Write a function to count the number of occurrences of the letter's' in the given string.\n    '''\n    return text1.count(\"s\")\ndef count_r(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'r' in the given string.\n    '''\n    return text1.count(\"r\")\ndef count_t(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 't' in the given string.\n    '''\n    return text1.count(\"t\")\ndef count_x(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'x' in the given string.\n    '''\n    return text1.count(\"x\")\ndef count_c(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'c' in the given string.\n    '''\n    return text1.count(\"c\")\ndef count_v(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'v' in the given string.\n    '''\n    return text1.count(\"v\")\ndef count_n(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'n' in the given string.\n    '''\n    return text1.count(\"n\")\ndef count_h(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'h' in the given string.\n    '''\n    return text1.count(\"h\")\ndef count_k(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'k' in the given string.\n    '''\n    return text1.count(\"k\")\ndef count_m(text1):\n    '''\n    Write a function to count the number of occurrences of the letter'm' in the given string.\n    '''\n    return text1.count(\"m\")\ndef count_l(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'l' in the given string.\n    '''\n    return text1.count(\"l\")\ndef count_u(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'u' in the given string.\n    '''\n    return text1.count(\"u\")\ndef count_p(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'p' in the given string.\n    '''\n    return text1.count(\"p\")\ndef count_w(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'w' in the given string.\n    '''\n    return text1.count(\"w\")\ndef count_o(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'o' in the given string.\n    '''\n    return text1.count(\"o\")\ndef count_j(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'j' in the given string.\n    '''\n    return text1.count(\"j\")\ndef count_q(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'q' in the given string.\n    '''\n    return text1.count(\"q\")\ndef count_d(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'd' in the given string.\n    '''\n    return text1.count(\"d\")\ndef count_b(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'b' in the given string.\n    '''\n    return text1.count(\"b\")\ndef count_x(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'x' in the given string.\n    '''\n    return text1.count(\"x\")\ndef count_z(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'z' in the given string.\n    '''\n    return text1.count(\"z\")\ndef count_m(text1):\n    '''\n    Write a function to count the number of occurrences of the letter'm' in the given string.\n    '''\n    return text1.count(\"m\")\ndef count_i(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'i' in the given string.\n    '''\n    return text1.count(\"i\")\ndef count_g(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'g' in the given string.\n    '''\n    return text1.count(\"g\")\ndef count_h(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'h' in the given string.\n    '''\n    return text1.count(\"h\")\ndef count_y(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'y' in the given string.\n    '''\n    return text1.count(\"y\")\ndef count_p(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'p' in the given string.\n    '''\n    return text1.count(\"p\")\ndef count_k(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'k' in the given string.\n    '''\n    return text1.count(\"k\")\ndef count_n(text1):\n    '''\n    Write a function to count the number of occurrences of the letter 'n' in the given string.\n    '''\n    return text1.count(\"n\")\ndef count_a(text1):\n    '''"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # loop for replacing one character with empty one\n    for i in range(len(text1)):\n        if text1[i] =='':\n            text1 = text1[:i] +'' + text1[i+1:]\n    return text1\ndef isValid(s):\n    # print(s)\n    # for i in range(len(s)):\n    #     if s[i].isupper():\n    #         if s[i].islower():\n    #             return False\n    #         if s[i].isupper():\n    #             return False\n    #     if s[i].islower():\n    #         return False\n    #     if s[i].isdigit():\n    #         return False\n    #     if s[i].isspace():\n    #         return False\n    # return True\n    print(s)\n    if len(s) == 1:\n        return False\n    for i in range(len(s)):\n        if s[i].isupper():\n            if s[i].islower():\n                return False\n        if s[i].islower():\n            if s[i].isupper():\n                return False\n        if s[i].isdigit():\n            return False\n        if s[i].isspace():\n            return False\n    return True\ndef isValid1(s):\n    # for i in range(len(s)):\n    #     if s[i].isupper():\n    #         if s[i].islower():\n    #             return False\n    #         if s[i].isupper():\n    #             return False\n    #     if s[i].islower():\n    #         return False\n    #     if s[i].isdigit():\n    #         return False\n    #     if s[i].isspace():\n    #         return False\n    # return True\n    if len(s) == 1:\n        return False\n    for i in range(len(s)):\n        if s[i].isupper():\n            if s[i].islower():\n                return False\n        if s[i].islower():\n            if s[i].isupper():\n                return False\n        if s[i].isdigit():\n            return False\n        if s[i].isspace():\n            return False\n    return True\ndef isValid2(s):\n    # for i in range(len(s)):\n    #     if s[i].isupper():\n    #         if s[i].islower():\n    #             return False\n    #         if s[i].isupper():\n    #             return False\n    #     if s[i].islower():\n    #         return False\n    #     if s[i].isdigit():\n    #         return False\n    #     if s[i].isspace():\n    #         return False\n    # return True\n    if len(s) == 1:\n        return False\n    count_lower = 0\n    count_upper = 0\n    count_digit = 0\n    count_space = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count_upper += 1\n        if s[i].islower():\n            count_lower += 1\n        if s[i].isdigit():\n            count_digit += 1\n        if s[i].isspace():\n            count_space += 1\n    if count_upper > 1 or count_lower > 1 or count_digit > 1 or count_space > 1:\n        return False\n    return True\ndef isValid3(s):\n    # for i in range(len(s)):\n    #     if s[i].isupper():\n    #         if s[i].islower():\n    #             return False\n    #         if s[i].isupper():\n    #             return False\n    #     if s[i].islower():\n    #         return False\n    #     if s[i].isdigit():\n    #         return False\n    #     if s[i].isspace():\n    #         return False\n    # return True\n    if len(s) == 1:\n        return False\n    count_lower = 0\n    count_upper = 0\n    count_digit = 0\n    count_space = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count_upper += 1\n        if s[i].islower():\n            count_lower += 1\n        if s[i].isdigit():\n            count_digit += 1\n        if s[i].isspace():\n            count_space += 1\n    if count_upper > 1 or count_lower > 1 or count_digit > 1 or count_space > 1:\n        return False\n    return True\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+',' ',text1)\n    \ndef remove_num(text2):\n    '''\n    Write a function to remove all digits and numbers from the given string.\n    '''\n    return re.sub('\\d+', '',text2)\n    \ndef remove_non_ascii(text3):\n    '''\n    Write a function to remove all non-ASCII characters from the given string.\n    '''\n    return re.sub('[^\\x00-\\x7F]','',text3)\n    \ndef check_ipv4(text4):\n    '''\n    Write a function that takes a string as input parameter and checks whether \n    the given string is an IPV4 address or not. An IPV4 address is defined \n    as a string containing four decimal numbers separated by dots.\n    '''\n    ipv4_address=re.match(r'[0-2][0-9]\\.[0-2][0-9]\\.[0-2][0-9]\\.[0-2][0-9]',text4)\n    if ipv4_address:\n        print('IPv4 address')\n        return True\n    else:\n        return False\n    \ndef check_url(text5):\n    '''\n    Write a function that takes a string as input parameter and checks whether \n    the given string is a URL or not. A URL is defined as a string that starts \n    with either http:// or https:// or is simply http:// or https://.\n    '''\n    url_pattern=re.match(r'https?://|http?://|^(http|https)?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$',text5)\n    if url_pattern:\n        print('URL')\n        return True\n    else:\n        return False\n        \ndef is_md5_passwd(text6):\n    '''\n    Write a function that takes a string as input parameter and checks whether \n    the given string is an MD5 password or not.\n    '''\n    md5_pattern=re.match(r'[0-9a-fA-F]{32}',text6)\n    if md5_pattern:\n        print('MD5 password')\n        return True\n    else:\n        return False\n    \ndef test_is_md5_passwd():\n    assert is_md5_passwd('')==False\n    assert is_md5_passwd('notanmd5')==False\n    assert is_md5_passwd('123456')==True\n    assert is_md5_passwd('12345678')==True\n    assert is_md5_passwd('1234567890')==True\n    assert is_md5_passwd('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')==True\n    assert is_md5_passwd('123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')==True\n    assert is_md5_passwd('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')==True\n    assert is_md5_passwd
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    import re\n    text1 = re.sub(r\"\\s+\", \"\", text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if (type(text1)!= str):\n        return text1\n    text1 = text1.strip()\n    return text1\ndef remove_characters(text2, char):\n    '''\n    Write a function to remove the given characters from the string.\n    '''\n    if (type(text2)!= str):\n        return text2\n    if (type(char)!= str):\n        return text2\n    text2 = re.sub(char, '', text2)\n    return text2\ndef remove_characters_for_each_word(text3, char):\n    '''\n    Write a function to remove the given characters from each word in the string.\n    '''\n    if (type(text3)!= str):\n        return text3\n    if (type(char)!= str):\n        return text3\n    text3 = re.sub(' '+char+' ', '', text3)\n    return text3\ndef reverse_string(text4):\n    '''\n    Write a function to reverse the string.\n    '''\n    if (type(text4)!= str):\n        return text4\n    text4 = text4[::-1]\n    return text4\ndef reverse_words_in_a_sentence(text5):\n    '''\n    Write a function to reverse the order of words in the given sentence.\n    '''\n    if (type(text5)!= str):\n        return text5\n    words = text5.split(\" \")\n    words.reverse()\n    text5 = \" \".join(words)\n    return text5\ndef find_repeating_character(text6):\n    '''\n    Write a function to find the first repeating character in the given string.\n    '''\n    if (type(text6)!= str):\n        return text6\n    text6 = text6.lower()\n    for i in range(0,len(text6)):\n        if (text6.count(text6[i]) >= 2):\n            print(text6[i])\n            break\ndef find_vowels(text7):\n    '''\n    Write a function to find and print the vowels in the given string.\n    '''\n    if (type(text7)!= str):\n        return text7\n    text7 = text7.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(0,len(text7)):\n        if (text7[i] in vowels):\n            print(text7[i])\ndef find_total_vowels(text8):\n    '''\n    Write a function to find and print the total number of vowels in the given string.\n    '''\n    if (type(text8)!= str):\n        return text8\n    text8 = text8.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(0,len(text8)):\n        if (text8[i] in vowels):\n            count += 1\n    print(count)\ndef find_total_consonants(text9):\n    '''\n    Write a function to find and print the total number of consonants in the given string.\n    '''\n    if (type(text9)!= str):\n        return text9\n    text9 = text9.lower()\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(0,len(text9)):\n        if (text9[i] in consonants):\n            count += 1\n    print(count)\ndef find_total_characters(text10):\n    '''\n    Write a function to find and print the total number of characters in the given string.\n    '''\n    if (type(text10)!= str):\n        return text10\n    text10 = text10.lower()\n    count = 0\n    for i in range(0,len(text10)):\n        if (text10[i] >= 'a' and text10[i] <= 'z' or text10[i] >= '0' and text10[i] <= '9'):\n            count += 1\n    print(count)\ndef find_total_numbers(text11):\n    '''\n    Write a function to find and print the total number of numbers in the given string.\n    '''\n    if (type(text11)!= str):\n        return text11\n    text11 = text11.lower()\n    count = 0\n    for i in range(0,len(text11)):\n        if (text11[i] >= '0' and text11[i] <= '9'):\n            count += 1\n    print(count)\ndef find_total_special_characters(text12):\n    '''\n    Write a function to find and print the total number of special characters in the given string.\n    '''\n    if (type(text12)!= str):\n        return text12\n    text12 = text12.lower()\n    count = 0\n    for i in range(0,len(text12)):\n        if (text12[i] >= '!':\n            count += 1\n        elif (text12[i] >= '@'):\n            count += 1\n        elif (text12[i] >= '#'):\n            count += 1\n        elif (text12[i] >= '$'):\n            count += 1\n        elif (text12[i] >= '%'):\n            count += 1\n        elif (text12[i] >= '^'):\n            count += 1\n        elif (text12[i] >= '&'):\n            count += 1\n        elif (text12[i] >= '*'):\n            count += 1\n        elif (text12[i] >= '('):\n            count += 1\n        elif (text12[i] >= ')'):\n            count += 1\n        elif (text12[i] >= '_'):\n            count += 1\n        elif (text12[i] >= '-'):\n            count += 1\n        elif (text12[i] >= '='):\n            count += 1\n        elif (text12[i] >= '{'):\n            count += 1\n        elif (text12[i] >= '}'):\n            count += 1\n        elif (text12[i] >= '['):\n            count += 1\n        elif (text12[i] >= ']'):\n            count += 1\n        elif (text12[i] >= ';'):\n            count += 1\n        elif (text12[i] >= ':'):\n            count += 1\n        elif (text12[i] >= '<'):\n            count += 1\n        elif (text12[i] >= '>'):\n            count += 1\n        elif (text12[i] >= '?'):\n            count += 1\n        elif (text12[i] >= '\\\\'):\n            count += 1\n        elif (text12[i] >= '|'):\n            count += 1\n    print(count)\ndef find_total_words(text13):\n    '''\n    Write a function to find and print the total number of words in the given string.\n    '''\n    if (type(text13)!= str):\n        return text13\n    text13 = text13.lower()\n    words = text13.split()\n    print(len(words))\ndef find_total_sentences(text14):\n    '''\n    Write a function to find and print the total number of sentences in the given string.\n    '''\n    if (type(text14)!= str):\n        return text14\n    text14 = text14.lower()\n    count = 0\n    for i in range(0,len(text14)):\n        if (text14[i] == '.' or text14[i] == '!' or text14[i] == '?' or text14[i] == ';'):\n            count += 1\n    print(count)\ndef find_total_characters_in_sentences(text15):\n    '''\n    Write a function to find and print the total number of characters in each sentence in the given string.\n    '''\n    if "
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    else:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0 if actual_cost - sale_amount < 0 else actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost * (sale_amount/actual_cost) - sale_amount\n    if loss_amount > 0:\n        return loss_amount\n    else: \n        return 0 \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0.0\n    if actual_cost<sale_amount:\n        loss_amount=sale_amount-actual_cost\n        return loss_amount\n    else:\n        return 0.0\ndef gst_amount(actual_cost,rate):\n    '''\n    Write a function that gives gst amount on a sale if the gst rate is 0.3 else return 0.\n    '''\n    gst_amount=0.0\n    if rate==0.3:\n        gst_amount=actual_cost*0.3\n        return gst_amount\n    else:\n        return 0.0\ndef net_amount(actual_cost,rate,gst_amount,loss_amount): \n    '''\n    Write a function that gives net amount on a sale if the gst rate is 0.3 then loss amount is 0.1 else return 0.\n    '''\n    net_amount=0.0\n    if rate==0.3 and loss_amount==0.1:\n        net_amount=actual_cost-gst_amount-loss_amount\n        return net_amount\n    else:\n        return 0.0\ndef discount(actual_cost,rate,gst_amount,loss_amount): \n    '''\n    Write a function that gives discount amount on a sale if the discount is 10% and the rate of discount is 0.3 then loss amount is 0.1 else return 0.\n    '''\n    discount=0.0\n    if rate==0.3 and loss_amount==0.1:\n        discount=actual_cost*(0.9)\n        return discount\n    else:\n        return 0.0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    return loss_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        if i % 2 == 0:\n            sum = sum + i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 1\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            s = s + i\n            if i!= (n / i):\n                s = s + (n / i)\n    if (n > 1):\n        s = s + n\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    n = int(input(\"Enter a number: \"))\n    sum = 0\n    for i in range(1,n+1) :\n        if (n%i == 0) : \n            if (i%2==0): \n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    #traverse through the number to find the even factors\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum = sum + i\n            #update the sum with the even factors \n            if i == int(math.sqrt(n)): \n                sum = sum + n/i\n            #update the sum with the even factors again\n            if i == int(n/math.sqrt(n)):\n                sum = sum + n/i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + n - 1) // 2\ndef sumofFactors3(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n//2+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors4(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    c = 0\n    for i in range(2,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            c = c + 2\n    return (n + c - 1) // 2\ndef sumofFactors5(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + (n//2)) // 2\ndef sumofFactors6(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + n + 1) // 2\ndef sumofFactors7(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors8(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + (n//2) + 1) // 2\ndef sumofFactors9(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    a = 0\n    while (n > 0) : \n        if (n%2 == 0) : \n            a = a + n\n        n = n // 2\n    return a\ndef sumofFactors10(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors11(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    a = 0\n    if (n%2 == 0) : \n        a = (n//2)\n    else : \n        a = (n//2) + 1\n    return (a + (a//2)) // 2\ndef sumofFactors12(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors13(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n%2 == 0) : \n        return (n//2)\n    else : \n        return (n//2) + 1\ndef sumofFactors14(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors15(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + (n//2)) // 2\ndef sumofFactors16(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors17(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors18(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n            else : \n                sum = sum + (i + n//i)\n    if (n%2 == 0) : \n        sum = sum + n\n    else : \n        sum = sum + (n - 1)\n    return sum\ndef sumofFactors19(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n + (n//2)) // 2\ndef sumofFactors20(n) : \n    '''\n    Write a python function to find the sum of even factors of a numbe"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 0\n    sum = 0\n    while i < n :\n        if n % (2*i + 1) == 0 :\n            sum = sum + (2*i + 1)\n        i = i + 1\n    return sum\nprint(\"Sum of Even factors of : \",sumofFactors(13)) \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while (n) : \n        if (n % 2 == 0) : \n            sum += n\n        n = n // 2\n    return sum\ndef largestPrimeFactor(n) : \n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    maxprime = 1\n    while (n) : \n        if (n % 2 == 0) : \n            n = n // 2\n        else : \n            temp = 0\n            while (n % 2 == 0) : \n                temp += 1\n                n = n // 2\n            if (temp > maxprime) : \n                maxprime = temp\n    return maxprime\ndef largestPrimeFactors(n) : \n    '''\n    Write a python function to find the largest prime factors of a given number.\n    '''\n    factors = []\n    while (n) : \n        if (n % 2 == 0) : \n            n = n // 2\n        else : \n            temp = 0\n            while (n % 2 == 0) : \n                temp += 1\n                n = n // 2\n            if (temp > maxprime) : \n                maxprime = temp\n            if (n > maxprime) : \n                factors.append(n)\n    if (len(factors) == 0) : \n        print(\"No prime factors\")\n    else : \n        print(\"The largest prime factor(s) is/are\", end =\" \")\n        for i in range(len(factors)) : \n            if (i == len(factors) - 1) : \n                print(factors[i])\n            else : \n                print(factors[i], end =\", \")\ndef largestPowerOfTwo(n) : \n    '''\n    Write a python function to find the largest power of 2 that is less than or equal to a given number.\n    '''\n    maxpower = -1\n    while (n) : \n        if (n & 1) == 1 : \n            n = n + 1\n        else : \n            if (maxpower == -1) : \n                maxpower = 0\n            n = n >> 1\n            maxpower = maxpower + 1\n    return maxpower\ndef binaryNumbers(n) : \n    '''\n    Write a python function to print all binary numbers of given length.\n    '''\n    if (n <= 0) : \n        return\n    binary = [\"0\"] * n\n    print(binary)\n    while (len(binary) > 0) : \n        i = len(binary) - 1\n        while (i >= 0) : \n            if (binary[i] == \"0\") : \n                binary[i] = \"1\"\n                break\n            else : \n                binary[i] = \"0\"\n            i = i - 1\n        print(\"\".join(binary))\n        binary.pop(0)\n    return\ndef increasingOrder(arr) : \n    '''\n    Write a python function to print an array in increasing order.\n    '''\n    if (len(arr) <= 1) : \n        return\n    i = 0\n    while (i < len(arr)) : \n        j = i + 1\n        while (j < len(arr)) : \n            if (arr[i] > arr[j]) : \n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            j = j + 1\n        i = i + 1\n    print(arr)\ndef isPrime(n) : \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    i = 2\n    while (i * i <= n) : \n        if (n % i == 0) : \n            return False\n        i = i + 1\n    return True\ndef isUgly(n) : \n    '''\n    Write a python function to check if a given number is ugly or not.\n    '''\n    if (n <= 0) : \n        return False\n    i = 2\n    while (i * i <= n) : \n        if (n % i == 0) : \n            return False\n        i = i + 1\n    return True\ndef countPrimes(n) : \n    '''\n    Write a python function to count the number of prime numbers within a range.\n    '''\n    count = 0\n    if (n <= 0) : \n        return\n    i = 2\n    while (i * i <= n) : \n        if (n % i == 0) : \n            n = n // i\n            count = count + 1\n        else : \n            i = i + 1\n    if (n!= 1) : \n        count = count + 1\n    print(count)\ndef zeroOneArray(arr) : \n    '''\n    Write a python function to find the first index of a given array such that the array element at that index is equal to 0.\n    '''\n    if (len(arr) <= 1) : \n        return -1\n    j = 0\n    while (j < len(arr)) : \n        if (arr[j] == 0) : \n            return j\n        j = j + 1\n    return -1\ndef countOfSmallerElementInBST(root, val) : \n    '''\n    Write a python function to count the number of elements smaller than given value in BST.\n    '''\n    count = 0\n    if (root == None) : \n        return count\n    while (root!= None) : \n        if (val > root.data) : \n            root = root.right\n        elif (val < root.data) : \n            root = root.left\n        else : \n            count = count + 1\n            root = root.left\n    return count\ndef isFullTree(root) : \n    '''\n    Write a python function to check if a given tree is full or not.\n    '''\n    if (root == None) : \n        return True\n    return (isFullTree(root.left) and isFullTree(root.right))\ndef isSymmetric(root) : \n    '''\n    Write a python function to check if a given tree is symmetric or not.\n    '''\n    if (root == None) : \n        return True\n    return (isSymmetric(root.left) and isSymmetric(root.right)) and (root.left.data == root.right.data)\ndef printLinkedList(head) : \n    '''\n    Write a python function to print a linked list.\n    '''\n    if (head == None) : \n        return\n    while (head) : \n        print(head.data, end = \" \")\n        head = head.next\n    print()\ndef swapNodes(root, key1, key2) : \n    '''\n    Write a python function to swap a key with another key in a given binary tree.\n    '''\n    if (root == None) : \n        return\n    if (root.left == None and root.right == None) : \n        return\n    if (root.left == None) : \n        root.left = TreeNode(key2)\n        return\n    if (root.right == None) : \n        root.right = TreeNode(key1)\n        return\n    temp = root.left\n    root.left = TreeNode(key2)\n    root.left.left = temp\n    return\ndef swapPairs(root) : \n    '''\n    Write a python function to swap the position of a given key with another key in a given binary tree.\n    '''\n    if (root == None) : \n        return\n    if (root.left == None and root.right == None) : \n        return\n    if (root.left == None) : \n        return\n    if (root.right == None) : \n        return\n    temp = root.left\n    root.left = root.right\n    root.right = temp\n    if (root.left!= None) : \n        swapPairs(root.left)\n    if (root.right!= None) : \n        swapPairs(root.right)\n    return\ndef rangeSumBST(root, L, R) : \n    '''\n    Write a python function to find the sum of nodes in a given range in "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(list(filter(lambda x:x%2==0,list(range(1,n+1))))) )\nprint(sumofFactors(4))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef factorial(n): \n    \"\"\"\n    Returns factorial of a number.\n    \"\"\"\n    if n <= 1: \n        return 1\n    else: \n        return n * factorial(n - 1) \nprint(factorial(5))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef palindrome(str):\n    \"\"\"\n    Check whether a string is palindrome or not.\n    \"\"\"\n    reverse = str[::-1]\n    if str == reverse:\n        return True\n    else:\n        return False\nprint(palindrome(\"ABCDAB\"))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef GCD(a, b):\n    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return max(a,b)\nprint(GCD(45,56))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef lengthOfLongestSubstring(s):\n    \"\"\"\n    Given a string, find the length of the longest substring without repeating characters.\n    \"\"\"\n    length = len(s)\n    if length < 2:\n        return length\n    start = 0\n    end = 0\n    hash_map = dict()\n    max_length = 0\n    while end < length:\n        if s[end] in hash_map:\n            del hash_map[s[start]]\n            start += 1\n        else:\n            hash_map[s[end]] = end\n            end += 1\n            max_length = max(max_length, end - start)\n    return max_length\nprint(lengthOfLongestSubstring(\"abcabcbb\"))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef zigzagLevelOrder(root):\n    if not root:\n        return []\n    from collections import deque\n    res, queue = [], deque([root])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    while queue:\n        res.append([])\n        for _ in range(len(queue)):\n            node = queue.popleft()\n            for i, j in directions:\n                child = node.val if not node.left else node.left.val\n                res[-1].append(child)\n                if node.right:\n                    queue.append(node.right)\n            if not queue:\n                break\n        for _ in range(len(queue)):\n            node = queue.popleft()\n            for i, j in directions:\n                child = node.val if not node.right else node.right.val\n                res[-1].append(child)\n                if node.left:\n                    queue.append(node.left)\n    return res\nprint(zigzagLevelOrder(root))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef findDuplicate(arr, n):\n    \"\"\"\n    Given an array of size n + 1 containing distinct elements,\n    the task is to find the duplicate element.\n    \"\"\"\n    for i in range(0, n):\n        while arr[i]!= i + 1 and arr[arr[i] - 1]!= arr[i]:\n            if arr[arr[i] - 1] == arr[i]:\n                return arr[i]\n            else:\n                tmp = arr[i]\n                arr[i], arr[tmp - 1] = arr[tmp - 1], arr[i]\n    return -1\nprint(findDuplicate([1,3,4,2,2], 5))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef findKth(arr, n, k):\n    \"\"\"\n    Given a sorted array arr[] of size n, the task is to find the element\n    present in arr[] which is present at kth position from the end.\n    \"\"\"\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if (mid == 0 or arr[mid - 1] < arr[mid]) and arr[mid] == k:\n            return arr[mid]\n        elif mid < n and arr[mid] > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\nprint(findKth([1,5,8,9,11,12,14,16,18,21,24,25], 6, 22))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef maxProduct(arr, n):\n    \"\"\"\n    Given an array of integers, find the product of the maximum product of any contiguous sub-array of the input array.\n    \"\"\"\n    start = 0\n    max_product = arr[0]\n    max_product_so_far = 1\n    for i in range(n):\n        if arr[i] < 0:\n            start += 1\n            continue\n        max_product_so_far = max(max_product, max_product_so_far * arr[i])\n        max_product = max(max_product, arr[i])\n    return max_product_so_far\nprint(maxProduct([-3,4,5,1,1,4,-5,3,-2,-1], 8))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef longestPalindrome(s):\n    \"\"\"\n    Given a string, find the length of the longest palindrome without\n    repeating characters.\n    \"\"\"\n    start = 0\n    end = 0\n    count = 0\n    hash_map = dict()\n    if len(s) < 1:\n        return 0\n    if len(s) == 1:\n        return 1\n    for i in range(len(s)):\n        if s[i] in hash_map:\n            del hash_map[s[i]]\n        else:\n            hash_map[s[i]] = i\n            end = i + 1\n    while end < len(s):\n        if s[start] in hash_map:\n            start = hash_map[s[start]] + 1\n        else:\n            start += 1\n            hash_map[s[start]] = start\n        end = hash_map[s[end]] + 1\n        count += 1\n    if end < len(s):\n        count += 1\n    return count\nprint(longestPalindrome(\"abbba\"))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n == 1 or n == 0:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\nprint(is_prime(11))\nprint(\"\\n\\n\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\nprint(\"**************************************************************************************************************************\")\ndef findTicTacToe(s, k, i, j):\n    \"\"\"\n    Given an arra"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 1\n    while(n%2==0):\n        count = count*2\n        n = n/2\n    return count\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if (n%i == 0) :\n            sum += i\n    return sum\nprint(sumofFactors(120))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # pattern = r'\\bz\\b'\n    pattern = r'z'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'z'\n    # result = re.findall(r'z',text)\n    # print(result)\n    return bool(re.search(regex,text))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"z\"\n    return bool(re.search(pattern, text))\nprint(text_match_wordz(\"hello world\"))\nprint(text_match_wordz(\"zebra\"))\nprint(text_match_wordz(\"zebra zebra\"))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'\\bz\\b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r\"\\bz\\b\")\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'\\bz+',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text = re.findall(r'\\w*z\\w*',text)\n    if text:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ntext_match_wordz('The cat in the hat z zed')\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_list = re.findall('z', text)\n    return z_list\ndef test_text_match_wordz():\n    assert text_match_wordz('I am zebra') == ['zebra']\n    assert text_match_wordz('I am zebra') == ['zebra']\n    assert text_match_wordz('I am zebra and flying kangaroo') == ['zebra', 'flying', 'kangaroo']\ndef text_match_sentence(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s', text)\n    return sentence_list\ndef test_text_match_sentence():\n    assert text_match_sentence('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_two(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_two():\n    assert text_match_sentence_two('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_three(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_three():\n    assert text_match_sentence_three('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_four(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_four():\n    assert text_match_sentence_four('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_five(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_five():\n    assert text_match_sentence_five('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_six(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_six():\n    assert text_match_sentence_six('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_seven(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_seven():\n    assert text_match_sentence_seven('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_eight(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_eight():\n    assert text_match_sentence_eight('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_nine(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_nine():\n    assert text_match_sentence_nine('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_ten(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_ten():\n    assert text_match_sentence_ten('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_eleven(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_eleven():\n    assert text_match_sentence_eleven('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_twelve(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_twelve():\n    assert text_match_sentence_twelve('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_thirteen(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_thirteen():\n    assert text_match_sentence_thirteen('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.']\ndef text_match_sentence_fourteen(text):\n    '''\n    Write a function that matches a sentence ending with a period.\n    '''\n    sentence_list = re.findall('\\.\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s', text)\n    return sentence_list\ndef test_text_match_sentence_fourteen():\n    assert text_match_sentence_fourteen('I am zebra and flying kangaroo') == ['I am zebra and flying kangaroo.'"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.findall(r'z', text)\n    return len(result) > 0\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_numb_dict = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31,\n    }\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 == 31\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(f'{monthnum2} has 31 days')\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(f'{monthnum2} has 30 days')\n    else:\n        print('Enter a valid month number')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2:\n            if calendar.isleap(year):\n                if monthnum2 == 2:\n                    if calendar.isleap(year):\n                        if daynum >= 32:\n                            return False\n                    else:\n                        if daynum >= 31:\n                            return False\n                        else:\n                            return True\n                else:\n                    if daynum >= 30:\n                        return False\n                    else:\n                        return True\n            else:\n                if daynum >= 29:\n                    return False\n                else:\n                    return True\n        elif monthnum2 == 4:\n            if calendar.isleap(year):\n                if daynum >= 30:\n                    return False\n                else:\n                    return True\n            else:\n                if daynum >= 28:\n                    return False\n                else:\n                    return True\n        elif monthnum2 == 6:\n            if daynum >= 30:\n                return False\n            else:\n                return True\n        elif monthnum2 == 8:\n            if calendar.isleap(year):\n                if daynum >= 31:\n                    return False\n                else:\n                    return True\n            else:\n                if daynum >= 30:\n                    return False\n                else:\n                    return True\n        elif monthnum2 == 9:\n            if calendar.isleap(year):\n                if daynum >= 30:\n                    return False\n                else:\n                    return True\n            else:\n                if daynum >= 31:\n                    return False\n                else:\n                    return True\n        elif monthnum2 == 11:\n            if calendar.isleap(year):\n                if daynum >= 30:\n                    return False\n                else:\n                    return True\n            else:\n                if daynum >= 31:\n                    return False\n                else:\n                    return True\n        else:\n            if daynum >= 31:\n                return False\n            else:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    return False\n    \n    \ndef is_leap_year(yearnum):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if yearnum % 4 == 0 and yearnum % 100!= 0 or yearnum % 400 == 0:\n        return True\n    return False\n    \n    \ndef calc_days(year, month):\n    '''\n    Write a function to calculate the total days in a given month in a given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n            if month == 2:\n                return 29\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return 30\n            else:\n                return 31\n        else:\n            if month == 2:\n                return 28\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return 30\n            else:\n                return 31\n    else:\n        if month == 2:\n            return 29\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return 30\n        else:\n            return 31\n            \n            \ndef check_days(year, month):\n    '''\n    Write a function to check whether the given month contains how many days in the given year.\n    '''\n    if check_monthnumb_number(month) == True:\n        if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n            if month == 2:\n                return 29\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return 30\n            else:\n                return 31\n        else:\n            if month == 2:\n                return 28\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return 30\n            else:\n                return 31\n    else:\n        if month == 2:\n            return 28\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            return 30\n        else:\n            return 31\n    \n    \ndef calc_total_days(year1, year2):\n    '''\n    Write a function to calculate the total days in a given year range.\n    '''\n    if year1 > year2:\n        return 0\n    return check_days(year1, 1) + check_days(year2, 1) + (check_days(year1 + 1, 1) - 1) - (check_days(year2, 1) - 1)\n    \n    \ndef check_birth_date(month, day, year):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if month > 12 or month <= 0 or day <= 0 or day > check_days(year, month):\n        return False\n    else:\n        return True\n        \n        \ndef calc_age(year, month, day):\n    '''\n    Write a function to calculate the age in years of a given date.\n    '''\n    if check_birth_date(month, day, year) == True:\n        return (year - 2020) // 100\n    else:\n        return -1\n    \n    \ndef month_name(month_num):\n    '''\n    Write a function to convert a month number into a name of the month.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    return months[month_num]\n    \n    \ndef check_leap_year(year):\n    '''\n    Write a function to check whether a given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n        return True\n    return False\n    \n    \ndef check_year(year):\n    '''\n    Write a function to check whether a given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n        return True\n    return False\n    \n    \ndef month_to_day(month_num):\n    '''\n    Write a function to convert a month number into a name of the month and the total days in the month.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    return months[month_num], check_days(2020, month_num)\n    \n    \ndef days_in_month(month, year):\n    '''\n    Write a function to calculate the total days in a given month in a given year.\n    '''\n    if check_year(year) == True:\n        if check_monthnumb_number(month) == True:\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                return 31\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return 30\n            else:\n                return 31\n        else:\n            return 0\n    else:\n        if check_monthnumb_number(month) == True:\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                return 31\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return 30\n            else:\n                return 31\n        else:\n            return 0\n    \n    \ndef month_name_to_number(month_name):\n    '''\n    Write a function to convert a name of the month into a number of the month.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    return months.index(month_name) + 1\n    \n    \ndef check_leap_year(year):\n    '''\n    Write a function to check whether a given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n        return True\n    return False\n    \n    \ndef month_to_day_number(month):\n    '''\n    Write a function to convert a name of the month into a number of the month.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    return months.index(month) + 1\n    \n    \ndef days_in_month_number(month, year):\n    '''\n    Write a function to calculate the total days in a given month in a given year.\n    '''\n    if check_year(year) == True:\n        if check_monthnumb_number(month) == True:\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                return 31\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return 30\n            else:\n                return 31\n        else:\n            return 0\n    else:\n        if check_monthnumb_number(month) == True:\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                return 31\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                return 30\n            else:\n                return 31\n        else:\n            return 0\n    \n    \ndef check_leap_year(year):\n    '''\n    Write a function to check whether a given year is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n        return True\n    return False\n    \n    \ndef check_leap_year_year(year):\n    '''\n    Write a function to check whether a given year is a leap year or not."
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    for i in range(1,monthnum2+1):\n        if i in range(1,7):\n            print(f\"{i}\u6708\u670931\u5929\")\n        else:\n            print(f\"{i}\u6708\u6ca1\u670931\u5929\")\ndef check_monthnumb_month(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    '''\n    for i in range(1,monthnum2+1):\n        if i in range(1,7):\n            print(f\"{i}\u6708\u670930\u5929\")\n        else:\n            print(f\"{i}\u6708\u6ca1\u670930\u5929\")\ndef month_number_of_leapyear():\n    '''\n    Write a function to calculate the number of leap years between the given start date (inclusive) and end date (exclusive).\n    '''\n    start = int(input(\"Input start date (inclusive) : \"))\n    end = int(input(\"Input end date (exclusive) : \"))\n    count = 0\n    for i in range(start,end+1):\n        if i % 4 == 0:\n            if i % 100 == 0:\n                if i % 400 == 0:\n                    print(f\"{i}\u5e74\u662f\u95f0\u5e74\")\n                    count += 1\n                else:\n                    print(f\"{i}\u5e74\u4e0d\u662f\u95f0\u5e74\")\n                    count += 0\n            else:\n                print(f\"{i}\u5e74\u662f\u95f0\u5e74\")\n                count += 1\n        else:\n            print(f\"{i}\u5e74\u4e0d\u662f\u95f0\u5e74\")\n            count += 0\n    print(f\"{count}\u5e74\u662f\u95f0\u5e74\")\ndef month_number_of_leapyear1():\n    '''\n    Write a function to calculate the number of leap years between the given start date (inclusive) and end date (exclusive).\n    '''\n    start = int(input(\"Input start date (inclusive) : \"))\n    end = int(input(\"Input end date (exclusive) : \"))\n    count = 0\n    for i in range(start,end+1):\n        if i % 4 == 0:\n            if i % 100 == 0:\n                if i % 400 == 0:\n                    print(f\"{i}\u5e74\u662f\u95f0\u5e74\")\n                    count += 1\n                else:\n                    print(f\"{i}\u5e74\u4e0d\u662f\u95f0\u5e74\")\n                    count += 0\n            else:\n                print(f\"{i}\u5e74\u662f\u95f0\u5e74\")\n                count += 1\n        else:\n            print(f\"{i}\u5e74\u4e0d\u662f\u95f0\u5e74\")\n            count += 0\n    print(f\"{count}\u5e74\u662f\u95f0\u5e74\")\ndef sum_of_list(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list1(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list2(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list3(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list4(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list5(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list6(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list7(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list8(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list9(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list10(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list11(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list12(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list13(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list14(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list15(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list16(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list17(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum_list = 0\n    for i in num_list:\n        sum_list += i\n    return sum_list\ndef sum_of_list18(num_list):\n    '''\n    Write a function that takes in a list of numbers and returns the su"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%4==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2==1):\n        print(\"January contains 31 days\")\n    elif(monthnum2==2):\n        print(\"February contains 28 days or 29 days\")\n    elif(monthnum2==3):\n        print(\"March contains 31 days\")\n    elif(monthnum2==4):\n        print(\"April contains 30 days\")\n    elif(monthnum2==5):\n        print(\"May contains 31 days\")\n    elif(monthnum2==6):\n        print(\"June contains 30 days\")\n    elif(monthnum2==7):\n        print(\"July contains 31 days\")\n    elif(monthnum2==8):\n        print(\"August contains 31 days\")\n    elif(monthnum2==9):\n        print(\"September contains 30 days\")\n    elif(monthnum2==10):\n        print(\"October contains 31 days\")\n    elif(monthnum2==11):\n        print(\"November contains 30 days\")\n    elif(monthnum2==12):\n        print(\"December contains 31 days\")\n    else:\n        print(\"Error\")\n        \ndef check_monthnumb_year(monthnum2,yearnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(yearnum==2019):\n        if(monthnum2==1):\n            print(\"January contains 31 days\")\n        elif(monthnum2==2):\n            print(\"February contains 28 days or 29 days\")\n        elif(monthnum2==3):\n            print(\"March contains 31 days\")\n        elif(monthnum2==4):\n            print(\"April contains 30 days\")\n        elif(monthnum2==5):\n            print(\"May contains 31 days\")\n        elif(monthnum2==6):\n            print(\"June contains 30 days\")\n        elif(monthnum2==7):\n            print(\"July contains 31 days\")\n        elif(monthnum2==8):\n            print(\"August contains 31 days\")\n        elif(monthnum2==9):\n            print(\"September contains 30 days\")\n        elif(monthnum2==10):\n            print(\"October contains 31 days\")\n        elif(monthnum2==11):\n            print(\"November contains 30 days\")\n        elif(monthnum2==12):\n            print(\"December contains 31 days\")\n    else:\n        print(\"Error\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[i] for i in range(len(stringlist))][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for x in range(0, len(stringlist)):\n        stringlist[x] = stringlist[x][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # 1st solution - just recursion\n    # i = 0\n    # while i < len(stringlist):\n    #     # print(stringlist[i])\n    #     stringlist[i] = reverse_string(stringlist[i])\n    #     i += 1\n    # return stringlist\n    \n    # 2nd solution - \n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Use for loop and reversed()\n    # my_list = [\"my\", \"list\", \"of\", \"strings\"]\n    # new_list = []\n    # for string in reversed(my_list):\n    #     new_list.append(string)\n    # print(new_list)\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1 = []\n    for i in range(len(lst)):\n        if len(lst[i]) < len(lst1):\n            lst1 = lst[i]\n            \n    return lst1\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = len(lst[0])\n    i = 0\n    while i < len(lst):\n        if len(lst[i]) < minimum:\n            minimum = len(lst[i])\n            ind = i\n        i = i+1\n    return ind\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort(key=len)\n    return lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sub = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < len(min_sub):\n            min_sub = lst[i]\n    return min_sub\n        \n    \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i])<len(lst[j]):\n                min_lst = lst[i]\n                lst[i]=lst[j]\n                lst[j]=min_lst\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Your code here\n    min_lst = []\n    for i in range(0,len(lst)):\n        count = 0\n        for j in range(i,len(lst)):\n            count = count + lst[j]\n        min_lst.append(count)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_len = []\n    for i in range(len(lst)):\n        lst_len.append(len(lst[i]))\n    min_len = min(lst_len)\n    for i in range(len(lst_len)):\n        if lst_len[i] == min_len:\n            return lst[i]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_index = 0\n    for i in range(1,len(lst)):\n        if len(lst[i])<min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0][1]\n    for i in range(1, len(lst)):\n        if lst[i][1] < min_length:\n            min_length = lst[i][1]\n            min_sub = lst[i]\n    return min_sub\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    ans = 0\n    n = len(lst)\n    for i in range(n):\n        if lst[i] < lst[ans]:\n            ans = i\n    return ans\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\nprint(rectangle_area(4,5))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l*b\n    return a\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str2 = re.sub(r'[A-Z]', r'', str1)\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace('[A-Z]','',1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #new_str = re.sub('[A-Z]', \"\", str1)\n    new_str = str1.lower()\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    result = \"\"\n    for s in str1:\n        if s.islower():\n            result += s\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #substrings = re.findall(\"[A-Z][a-z]+\", str1)\n    substrings = re.findall(\"[A-Z]*[a-z]+\", str1)\n    return substrings\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i.islower():\n            str2 = str2 + i\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.sub('[A-Z]+', '', str1)\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res =[]\n    for i in lst:\n        res.append(i[0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(0, len(lst)):\n        lst[i] = lst[i][0]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # lst1 = []\n    # lst2 = []\n    # for i in range(len(lst)):\n    #     for j in range(len(lst[i])):\n    #         lst1.append(lst[i][j])\n    #         if len(lst1) == len(lst[i]):\n    #             lst2.append(lst1)\n    #             lst1 = []\n    # return lst2\n    return [lst[i] for i in range(len(lst))]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        lst[i] = lst[i][0] \n    return lst \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            result.append(lst[i][j])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def Extract_at(lst,i):\n        a=[]\n        for i in lst:\n            if type(i)==list:\n                a.append(Extract_at(i,0))\n            else:\n                a.append(i[i])\n        return a\n    return Extract_at(lst,0)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    Extracted_list = []\n    for i in range(len(lst)):\n        Extracted_list.append(lst[i][0])\n    return Extracted_list\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(0, len(lst)):\n        lst[i] = lst[i][0]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = []\n    for i in range(len(lst)):\n        first.append(lst[i][0])\n    return first \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for x in str:\n        if x.isupper():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    # declare a variable for storing count\n    ctr = 0\n    \n    # traverse the string \n    for c in str:\n        # if the character is an upper case, increment count by 1\n        if c.isupper():\n            ctr += 1\n    \n    return ctr\n    "
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return(str.upper().count('U'))\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isupper()):\n            count +=1\n    print(\"No. of Upper Case Characters =\", count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    d = {}\n    for i in str:\n        d[i] = str.count(i)\n    for i in d:\n        if d[i] == 1:\n            return i\n    return 0\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for x in range(len(str)):\n        if ord(str[x]) >= 65 and ord(str[x]) <= 90:\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] >= 'A' and str[i] <= 'Z':\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\ndef upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.islower():\n            count+=1\n    return count\ndef reverse(str):\n    '''\n    Write a python function to reverse the string.\n    '''\n    str = str[::-1]\n    return str\ndef rotate_str(str, n):\n    '''\n    Write a python function to rotate the string by n places.\n    '''\n    return str[n:]+str[:n]\ndef reverse_str(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef form_string(n, arr):\n    '''\n    Write a python function to form the string by concatenating n elements in arr.\n    '''\n    str = ''\n    for i in range(len(arr)):\n        str = str+str(arr[i])\n    return str\ndef form_string(n, arr):\n    '''\n    Write a python function to form the string by concatenating n elements in arr.\n    '''\n    str = ''\n    for i in range(len(arr)):\n        str = str+str(arr[i])\n    return str\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n < 0:\n        raise ValueError\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact*i\n    return fact\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n < 0:\n        raise ValueError\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact*i\n    return fact\ndef sum_digits(n):\n    '''\n    Write a python function to calculate the sum of all digits in a given number.\n    '''\n    if n < 0:\n        raise ValueError\n    sum = 0\n    while n > 0:\n        sum = sum+n%10\n        n = n//10\n    return sum\ndef sum_digits(n):\n    '''\n    Write a python function to calculate the sum of all digits in a given number.\n    '''\n    if n < 0:\n        raise ValueError\n    sum = 0\n    while n > 0:\n        sum = sum+n%10\n        n = n//10\n    return sum\ndef sum_digits(n):\n    '''\n    Write a python function to calculate the sum of all digits in a given number.\n    '''\n    if n < 0:\n        raise ValueError\n    sum = 0\n    while n > 0:\n        sum = sum+n%10\n        n = n//10\n    return sum\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_max_num(arr):\n    '''\n    Write a python function to find the maximum number in a list.\n    '''\n    if not arr:\n        raise ValueError\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n    "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    if len(list1) == 2:\n        return [[], list1]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    if len(list1) == 1:\n        res = list1\n    else:\n        for i in range(len(list1)):\n            res.append(list1[i])\n            res.append(list1[i])\n            break\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        if i == 0:\n            print(''.join(list1[i:len(list1)]))\n        else:\n            print(''.join(list1[i:len(list1)]), end=\" \")\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return_list = []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return list1\n    else:\n        return_list = []\n        first_item = list1[0]\n        rest_list = list1[1:]\n        for item in combinations_list(rest_list):\n            return_list.append([first_item] + item)\n        return return_list\n    \ndef combinations_dict(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    if len(dict1) == 0:\n        return []\n    elif len(dict1) == 1:\n        return list(dict1.values())\n    else:\n        return_list = []\n        first_key = list(dict1.keys())[0]\n        first_value = dict1[first_key]\n        rest_list = dict1.values()\n        for item in combinations_dict(dict1):\n            return_list.append({first_key:first_value})\n            return_list.append(item)\n        return return_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    \n    def dfs(elements, path):\n        if len(elements) == 0:\n            result.append(path)\n            return \n        for i in range(len(elements)):\n            dfs(elements[:i] + elements[i+1:], path + elements[i])\n            \n    dfs(list1, '')\n    \n    return result\n    \n    \ndef combinations_dict(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    result = []\n    \n    def dfs(elements, path):\n        if len(elements) == 0:\n            result.append(path)\n            return \n        for key, value in elements.items():\n            dfs(value, path + key + ',')\n            \n    dfs(dict1, '')\n    \n    return result\n    \n    \n    \ndef combinations_dict2(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    result = []\n    \n    def dfs(elements, path):\n        if len(elements) == 0:\n            result.append(path)\n            return \n        for key, value in elements.items():\n            dfs(value, path + key + ',')\n            \n    dfs(dict1, '')\n    \n    return result\n    \n    \ndef combinations_dict3(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    result = []\n    \n    def dfs(elements, path):\n        if len(elements) == 0:\n            result.append(path)\n            return \n        for key, value in elements.items():\n            dfs(value, path + key + ',')\n            \n    dfs(dict1, '')\n    \n    return result\n    \n    \ndef combinations_dict4(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    result = []\n    \n    def dfs(elements, path):\n        if len(elements) == 0:\n            result.append(path)\n            return \n        for key, value in elements.items():\n            dfs(value, path + key + ',')\n            \n    dfs(dict1, '')\n    \n    return result\n    \n    \ndef combinations_dict5(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    result = []\n    \n    def dfs(elements, path):\n        if len(elements) == 0:\n            result.append(path)\n            return \n        for key, value in elements.items():\n            if isinstance(value, dict):\n                dfs(value, path + key + ',')\n            else:\n                dfs(value, path + key + ',')\n            \n    dfs(dict1, '')\n    \n    return result\n    \n    \ndef combine_lists(list1, list2):\n    '''\n    Write a function to combine two lists.\n    '''\n    return list1 + list2\n    \n    \ndef combine_dictionaries(dict1, dict2):\n    '''\n    Write a function to combine two dictionaries.\n    '''\n    combined_dict = {}\n    for key in dict1.keys():\n        combined_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key in combined_dict.keys():\n            combined_dict[key] = dict2[key] + combined_dict[key]\n        else:\n            combined_dict[key] = dict2[key]\n    return combined_dict\n    \n    \ndef combine_lists_and_dictionaries(list1, list2, dict1, dict2):\n    '''\n    Write a function to combine two lists and two dictionaries.\n    '''\n    result_list = []\n    \n    def dfs(list1, list2, dict1, dict2, path, result):\n        if len(list1) == 0 and len(list2) == 0 and len(dict1) == 0 and len(dict2) == 0:\n            result.append(path)\n            return \n        if len(list1) > 0:\n            dfs(list1[1:], list2, dict1, dict2, path + ',' + list1[0], result)\n        if len(list2) > 0:\n            dfs(list1, list2[1:], dict1, dict2, path + ',' + list2[0], result)\n        if len(dict1) > 0:\n            dfs(list1, list2, dict1[1:], dict2, path + dict1[0], result)\n        if len(dict2) > 0:\n            dfs(list1, list2, dict1, dict2[1:], path + dict2[0], result)\n        \n    dfs(list1, list2, dict1, dict2, '', result_list)\n    \n    return result_list\n    \n    \ndef test_combine_lists():\n    print('Testing combine_lists()... ', end='')\n    assert(combine_lists([], []) == [])\n    assert(combine_lists([1, 2, 3], []) == [1, 2, 3])\n    assert(combine_lists([], [1, 2, 3]) == [1, 2, 3])\n    assert(combine_lists([1, 2, 3], [1, 2, 3]) == [1, 2, 3])\n    assert(combine_lists([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3, 4])\n    assert(combine_lists([1, 2, 3, 4], [1, 2, 3]) == [1, 2, 3, 4])\n    assert(combine_lists([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4])\n    assert(combine_lists([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])\n    assert(combine_lists([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8])\n    assert(combine_lists([1, 2, 3, 4, 5], [6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8])\n    assert(combine_lists([1, 2, 3, 4, 5], [6, 7]) == [1, 2, 3, 4, 5, 6, 7])\n    assert(combine_lists([1, 2, 3, 4], [5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert(combine_lists([1, 2, 3], [4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert(combine_lists([1, 2], [3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert(combine_lists([1], [2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    print('Passed!')\n    \n    \ndef test_combine_dictionaries():\n    print('Testing combine_dictionaries()... ', end='')\n    assert(combine_dictionaries({}, {}) == {})\n    assert(combine_dictionaries({1: 2}, {}) == {1: 2})\n    assert(combine_dictionaries({}, {1: 2}) == {1: 2})\n    assert(combine_dictionaries({1: 2, 3: 4}, {3: 4}) == {1: 2, 3: 4})\n    assert(combine_dictionaries({1: 2, 3: 4}, {3: 4, 4: 5}) == {1: 2, "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    list1 = sorted(list1)\n    result.append([])\n    for i in range(0,len(list1)):\n        if(i>0):\n            if(list1[i]!=list1[i-1]):\n                result.append([])\n        result[i].append(list1[i])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return_list = []\n    for element in list1:\n        for element2 in list1:\n            return_list.append([element,element2])\n    return return_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==1:\n        return [list1]\n    if len(list1)==2:\n        return [[list1[0]],[list1[1]]]\n    sub_list = list1[0]\n    combinations = combinations_list(list1[1:])\n    final_combinations = []\n    for combination in combinations:\n        if type(combination)==list:\n            for i in range(len(combination)):\n                for j in range(len(sub_list)):\n                    if j>i:\n                        final_combinations.append(combination[:i]+[sub_list[j]]+combination[i:])\n        else:\n            final_combinations.append(combination+[sub_list])\n    return final_combinations\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -100000\n    left_index = 0\n    right_index = 0\n    \n    for i in range(0, len(arr)):\n        if (arr[i] > 0):\n            max_product = max(max_product, arr[i])\n            right_index = i\n    \n    return (max_product, left_index, right_index)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    return max_product_subarray_util(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    max_index = 0\n    if not arr:\n        return max_product\n    for i in range(len(arr)):\n        if max_product < arr[i]:\n            max_product = arr[i]\n            max_index = i\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #store largest product so far, max_product = -float('inf')\n    max_product = -float('inf')\n    #start tracking largest subarray with i = 0 and j = 0\n    for i in range(len(arr)):\n        curr_product = arr[i]\n        #if curr_product > max_product, store current product and i\n        #while tracking the largest subarray\n        for j in range(i, len(arr)):\n            curr_product = max(curr_product, arr[j])\n            #if curr_product > max_product, store current product and i\n            if curr_product > max_product:\n                max_product = curr_product\n                start_idx = j\n                end_idx = i\n    #return the product of the subarray and return the indices of the max subarray\n    return arr[start_idx: end_idx + 1], max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    res = -9999\n    for i in range(n):\n        max_so_far = arr[i]\n        max_ending_here = 1\n        for j in range(i+1, n):\n            max_ending_here *= arr[j]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n        if max_so_far > 0:\n            res = max(res, max_so_far)\n    return res\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #possible solutions:\n    #1. Brute Force\n    #2. Dynamic Programming\n    #3. Two Pointer\n    #4. 3 Sum\n    #5. DP with two pointer\n    \n    #Solution 1: Brute Force\n    product = -2147483647\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            tmp = 1\n            for k in range(i,j+1):\n                tmp *= arr[k]\n            if tmp > product:\n                product = tmp\n    return product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    curr_product = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    n = len(arr)\n    curr_max = 0\n    curr_min = 0\n    max_arr = [0] * n\n    \n    for i in range(n):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_arr[i] = curr_max\n        curr_min = min(curr_min * arr[i], arr[i])\n        max_arr[i] = curr_min\n    \n    curr_max = max_arr[0]\n    max_product = max_arr[0]\n    \n    for i in range(1, n):\n        curr_max = max(curr_max * max_arr[i], max_arr[i])\n        curr_min = min(curr_min * max_arr[i], max_arr[i])\n        max_product = max(curr_max, curr_min, max_product)\n    \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0] = arr[0]\n    max_product = dp[0]\n    for i in range(1, n):\n        dp[i] = max(arr[i], dp[i - 1] * arr[i])\n        max_product = max(max_product, dp[i])\n    return max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    print(value)\n    if len(set(value)) > 1:\n        return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for value in dict.values():\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n        return True\n        \n    \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    return all([dict[x] == dict[x+1] for x in dict])\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict.values():\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        return not len(dict) == len(set(dict.values()))\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    if len(value)!= n:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!=0:\n        if len(dict)!=1 or (len(dict)!=0 and dict[0]!=n):\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {k: v for k, v in dict1.items() if v!= None and v!=''}\n    return dict1\n    \nprint(drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': None, 'e':'', 'f': None, 'g':''}))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Invalid type, expected dict')\n    for key, value in dict1.items():\n        if not isinstance(value, (int, float, str)):\n            raise ValueError(f'Invalid type for key: {key}')\n        elif value in [None, '']:\n            dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key in dict1:\n        if dict1[key]!= '':\n            dict2[key] = dict1[key]\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    # TO DO: complete this function\n    \n    final_dict = {}\n    for key, value in dict1.items():\n        if value:\n            final_dict[key] = value\n    \n    return final_dict\n    \n    \n    "
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1.items():\n        if item[1] == {}:\n            dict1.pop(item[0])\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1_copy = dict1.copy()\n    return {k:v for k, v in dict1_copy.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    final_dict = dict()\n    for key in dict1:\n        if dict1[key]!= '':\n            final_dict[key] = dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_keys = []\n    for key in dict1:\n        if not dict1[key]:\n            empty_keys.append(key)\n    for key in empty_keys:\n        del dict1[key]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = max(res*arr[i], arr[i])\n        print(res)\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr==[]:\n        return\n    arr.sort()\n    res=0\n    for i in range(len(arr)):\n        res=max(res,arr[i]*(len(arr)-i))\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            product = 1\n            for k in range(i,j+1):\n                product *= arr[k]\n            max_product = max(max_product, product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    curr_max, max_product = float('-inf'), float('-inf')\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n    \ndef max_product(arr):\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Time O(n) | Space O(n)\n    # Algo: \n    # 1) Initialize the product of numbers in the array.\n    # 2) Initialize the maximum product till now.\n    # 3) We will keep on checking the product of array with index i + 1, \n    #    if it is equal to zero, then we will set it as the largest\n    #    product.\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = arr[::-1]\n    max_prod = arr[0]\n    curr_prod = arr[0]\n    for i in range(1,len(arr)):\n        curr_prod = curr_prod * arr[i]\n        max_prod = max(curr_prod, max_prod)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maxi = 0\n    temp = 0\n    for i in arr:\n        if temp > 0 and i > 0:\n            temp = temp * i\n        else:\n            temp = i\n        if temp > maxi:\n            maxi = temp\n    return maxi\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = [2, 6, -3, -1, 7, 8]\n    mx = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            break\n        mx = max(mx*arr[i], arr[i])\n    print(mx)\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    dp = []\n    for i in range(len(arr)):\n        max_prod = 1\n        for j in range(i):\n            max_prod = max(max_prod, arr[j] * dp[i-1-j])\n        dp.append(max_prod)\n    return dp[len(arr)-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [[-1 for i in range(n)] for j in range(n)]\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = []\n    for i in range(len(test_tup) - 1):\n        new_tup.append(test_tup[i] + test_tup[i+1])\n    new_tup.append(test_tup[-1] + test_tup[0])\n    return tuple(new_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup1 = test_tup\n    tup2 = ()\n    for i in range(len(tup1)):\n        tup2 = tup2 + (tup1[i] + tup1[(i + 1) % len(tup1)], )\n    return tup2\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup_1, tup_2 = test_tup\n    return tup_1[0]+tup_2[0], tup_1[0]+tup_2[1], tup_1[1]+tup_2[0], tup_1[1]+tup_2[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(sum, zip(test_tup, test_tup[1:])))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sum(x) for x in zip(*[iter(test_tup)]*2))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    tmp = test_tup[:]\n    n = len(tmp)\n    print(tmp)\n    for i in range(n-1):\n        tmp[i] += tmp[i+1]\n    print(tmp)\n    return tmp\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError('Tuple must have at least two elements')\n    else:\n        for i in range(1,len(test_tup)):\n            test_tup = test_tup + (test_tup[i-1],)\n        return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    l = list(test_tup)\n    return tuple(l[i] + l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Generate list of elements\n    list_of_elements = list(test_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    try:\n        if(len(test_tup) == 1):\n            return str(int(test_tup[0])+int(test_tup[0]))\n        else:\n            return str(test_tup[0]+test_tup[1])\n    except:\n        print(\"Please enter a tuple of numbers\")\n        return -1\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n):\n        result = result * arr[i]\n    return result\n    \ndef find_product(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    p = 1\n    for i in range(n):\n        p = p * arr[i]\n    return p\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product%n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod * i\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    numerator = 1\n    denominator = 1\n    for i in range(n):\n        numerator = (numerator * arr[i]) % n\n        denominator = (denominator * arr[i]) % n\n    product = numerator * denominator\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Base case \n    if n == 1: \n        return 1\n    # use the value of product \n    product = 1\n    # find the product of the array multiplication modulo n \n    for i in range(1, n): \n        product = (product * arr[i-1]) % n \n    \n    return (product) \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return sum(arr) % 2\n    return find_remainder(arr, n - 1) + find_remainder(arr, n - 2)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0, n):\n        prod *= arr[i]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for i in range(len(arr)):\n        total = total * arr[i]\n    return total % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for num in arr:\n        ans *= num\n    return ans % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0,n):\n        prod = prod * arr[i]\n    \n    return prod % n \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if (l[i] - 1) == l[i+1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # code here\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] == l[j]:\n                return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1] - 1:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if all(elem-1==elem_prev for elem, elem_prev in zip(l, l[1:])):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #traverse list\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #code here\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)):\n        if l[i] == l[i+1] + 1:\n            count += 1\n        elif l[i] == l[i+1] - 1:\n            count -= 1\n        else:\n            count = 0\n            break\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Convert the input list into a set and get the length of the set\n    l_set = set(l)\n    l_set_len = len(l_set)\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return True\n    elif l[0] == l[1]:\n        return False\n    else:\n        return check_Consecutive(l[1:])\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp = []\n    for element in test_list1:\n        if element in test_list2:\n            if element not in temp:\n                temp.append(element)\n    return temp\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # Naive approach\n    # if len(test_list1) == len(test_list2):\n    #     intersection = []\n    #     for i in range(len(test_list1)):\n    #         if test_list1[i] in test_list2:\n    #             intersection.append(test_list1[i])\n    #     return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for i in test_list1:\n        if i in test_list2:\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersection_list.append(test_list1[i])\n    print('Intersection of given lists:', intersection_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    i=0\n    if len(test_list1)==len(test_list2):\n        while i<len(test_list1):\n            if test_list1[i]==test_list2[i]:\n                yield test_list1[i]\n            i+=1\n    else:\n        return\n    \ntest_list1= (1,2,3,4,5,6)\ntest_list2= (6,5,4,3,2,1)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    a, b = test_list1\n    c, d = test_list2\n    if a<=b and c<=d:\n        return a,b,c,d\n    elif a<=c and b<=d:\n        return a,b,c,d\n    elif a<=d and b<=c:\n        return a,b,c,d\n    elif c<=a and d<=b:\n        return a,b,c,d\n    elif c<=b and d<=a:\n        return a,b,c,d\n    elif d<=a and b<=c:\n        return a,b,c,d\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set_1 = set(test_list1)\n    set_2 = set(test_list2)\n    tup_inter = set_1.intersection(set_2)\n    tup_inter = list(tup_inter)\n    return tup_inter\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_unordered = test_list1\n    test_list2_unordered = test_list2\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n    intersection_list = []\n    if len(test_list1) == 0 or len(test_list2) == 0:\n        return intersection_list\n    elif len(test_list1) > len(test_list2):\n        for item in test_list1:\n            if item in test_list2 and item not in intersection_list:\n                intersection_list.append(item)\n    else:\n        for item in test_list2:\n            if item in test_list1 and item not in intersection_list:\n                intersection_list.append(item)\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1[0]==test_list2[0]:\n        return(test_list1[0])\n    else:\n        if test_list1[0]<test_list2[0]:\n            return(test_list1)\n        else:\n            return(test_list2)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #str1 = str1.replace(ch,newch)\n    str1 = str1.replace(ch,'')\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=list(str1)\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str1[i]=newch\n    str1=''.join(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    return ''.join(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Declare a new_str\n    new_str = ''\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # write your code here\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_by_value = sorted(dict1.items(), key=lambda kv: kv[1])\n    return sorted_by_value\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #First I need a list of tuples with the value and the key.\n    list_tuple = []\n    for k,v in dict1.items():\n        list_tuple.append((v,k))\n    \n    #Now I need to sort this list\n    list_tuple.sort()\n    \n    #So I create a new dictionary with the sorted keys.\n    dictionary_sorted = {}\n    \n    #Now I loop through the list of tuples, adding the value to the dictionary of the key that corresponds to that value.\n    for v,k in list_tuple:\n        dictionary_sorted[k] = v\n    \n    return dictionary_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # O(nlog(n))\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    print(\"Sort a dictionary by value: \")\n    \n    temp = sorted(dict1.items(),key = lambda x:x[1])\n    \n    for k,v in temp:\n        print(k,v)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = sorted(dict1.items(), key=lambda x:x[1],reverse=True)\n    new_dict = dict(new_dict)\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    my_dict = dict(sorted(dict1.items(), key=lambda kv: kv[1], reverse=True))\n    return my_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(0,len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        largest = max(largest, num)\n        smallest = min(smallest, num)\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = 0\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    print(largest, smallest)\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    a = nums.sort()\n    l = nums.index(max(nums))\n    u = nums.index(min(nums))\n    print(l,u)\n    b = nums[l] + nums[u]\n    print(b)\nbig_sum(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    lst = sorted(nums)\n    return lst[-1] + lst[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \n    \ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    return string.upper()\n    \n    \ndef is_capitalized(string):\n    '''\n    Write a python function to check whether a given string is capitalized or not.\n    '''\n    return string.isupper()\n    \n    \ndef is_numeric(string):\n    '''\n    Write a python function to check whether a given string is numeric or not.\n    '''\n    return string.isnumeric()\n    \n    \ndef is_alphabetic(string):\n    '''\n    Write a python function to check whether a given string is alphabetic or not.\n    '''\n    return string.isalpha()\n    \n    \ndef is_alphanumeric(string):\n    '''\n    Write a python function to check whether a given string is alphabetic or numeric or both.\n    '''\n    return string.isalnum()\n    \n    \ndef is_identifier(string):\n    '''\n    Write a python function to check whether a given string is identifier or not.\n    '''\n    return string.isidentifier()\n    \n    \ndef is_punctuation(string):\n    '''\n    Write a python function to check whether a given string is punctuation or not.\n    '''\n    return string.isprintable()\n    \n    \ndef is_titlecase(string):\n    '''\n    Write a python function to check whether a given string is titlecase or not.\n    '''\n    return string.istitle()\n    \n    \ndef is_mixedcase(string):\n    '''\n    Write a python function to check whether a given string is mixedcase or not.\n    '''\n    return string.isupper() or string.islower()\n    \n    \ndef is_mixedcase2(string):\n    '''\n    Write a python function to check whether a given string is mixedcase or not.\n    '''\n    return string.isupper() or string.islower() or string.istitle()\n    \n    \ndef is_identifier2(string):\n    '''\n    Write a python function to check whether a given string is identifier or not.\n    '''\n    return string.isidentifier()\n    \n    \ndef is_ascii(string):\n    '''\n    Write a python function to check whether a given string is ASCII or not.\n    '''\n    return all(char.isascii() for char in string)\n    \n    \ndef is_hexadecimal(string):\n    '''\n    Write a python function to check whether a given string is hexadecimal or not.\n    '''\n    return all(char.isdigit() or char.isalpha() for char in string)\n    \n    \ndef is_hexadecimal2(string):\n    '''\n    Write a python function to check whether a given string is hexadecimal or not.\n    '''\n    return all(char in string.lower() for char in string.upper())\n    \n    \ndef is_decimal(string):\n    '''\n    Write a python function to check whether a given string is decimal or not.\n    '''\n    return all(char.isdigit() for char in string)\n    \n    \ndef is_hexadecimal3(string):\n    '''\n    Write a python function to check whether a given string is hexadecimal or not.\n    '''\n    return all(char in '0123456789abcdefABCDEF' for char in string)\n    \n    \ndef is_hexadecimal4(string):\n    '''\n    Write a python function to check whether a given string is hexadecimal or not.\n    '''\n    return all(char in '0123456789ABCDEF' for char in string)\n    \n    \ndef is_octal(string):\n    '''\n    Write a python function to check whether a given string is octal or not.\n    '''\n    return all(char in '01234567' for char in string)\n    \n    \ndef is_hexadecimal5(string):\n    '''\n    Write a python function to check whether a given string is hexadecimal or not.\n    '''\n    return all(char in '0123456789abcABCDEF' for char in string)\n    \n    \ndef is_hexadecimal6(string):\n    '''\n    Write a python function to check whether a given string is hexadecimal or not.\n    '''\n    return all(char in '0123456789ABCDEF' for char in string)\n    \n    \ndef is_octal2(string):\n    '''\n    Write a python function to check whether a given string is octal or not.\n    '''\n    return all(char in '012345' for char in string)\n    \n    \ndef is_octal3(string):\n    '''\n    Write a python function to check whether a given string is octal or not.\n    '''\n    return all(char in '012345' for char in string)\n    \n    \ndef is_octal4(string):\n    '''\n    Write a python function to check whether a given string is octal or not.\n    '''\n    return all(char in '012345' for char in string)\n    \n    \ndef is_binary(string):\n    '''\n    Write a python function to check whether a given string is binary or not.\n    '''\n    return all(char in '01' for char in string)\n    \n    \ndef is_binary2(string):\n    '''\n    Write a python function to check whether a given string is binary or not.\n    '''\n    return all(char in '01' for char in string)\n    \n    \ndef is_binary3(string):\n    '''\n    Write a python function to check whether a given string is binary or not.\n    '''\n    return all(char in '01' for char in string)\n    \n    \ndef is_octal5(string):\n    '''\n    Write a python function to check whether a given string is octal or not.\n    '''\n    return all(char in '012345' for char in string)\n    \n    \ndef is_octal6(string):\n    '''\n    Write a python function to check whether a given string is octal or not.\n    '''\n    return all(char in '012345' for char in string)\n    \n    \ndef is_binary4(string):\n    '''\n    Write a python function to check whether a given string is binary or not.\n    '''\n    return all(char in '01' for char in string)\n    \n    \ndef is_octal7(string):\n    '''\n    Write a python function to check whether a given string is octal or not.\n    '''\n    return all(char in '012345' for char in string)\n    \n    \ndef is_hexadecimal7(string):\n    '''\n    Write a python function to check whether a given string is hexadecimal or not.\n    '''\n    return all(char in '0123456789abcABCDEF' for char in string)\n    \n    \ndef is_hexadecimal8(string):\n    '''\n    Write a python function to check whether a given string is hexadecimal or not.\n    '''\n    return all(char in '0123456789abcABCDEF' for char in string)\n    \n    \ndef is_numeric2(string):\n    '''\n    Write a python function to check whether a given string is numeric or not.\n    '''\n    return all(char.isdigit() for char in string)\n    \n    \ndef is_mixedcase2(string):\n    '''\n    Write a python function to check whether a given string is mixedcase or not.\n    '''\n    return string.isupper() or string.islower()\n    \n    \ndef is_binary2(string):\n    '''\n    Write a python function to check whether a given string is binary or not.\n    '''\n    return all(char in '01' for char in string)\n    \n    \ndef is_binary3(string):\n    '''\n    Write a python function to check whether a given string is binary or not.\n    '''\n    return all(char in '01' for char in string)\n    \n    \ndef is_binary4(strin"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    s = string.lower()\n    return s\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if isinstance(string, str):\n        return string.lower()\n    else:\n        return string\n    "
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #first define a replacement map\n    repl_map = {i:None for i in range(97,123)}\n    #then use the map to replace lowercase chars in the string\n    new_str = ''\n    for i in str1:\n        new_str += repl_map[ord(i)-97]\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if(str1==None):\n        return\n    count=0\n    while(count<len(str1)):\n        if(str1[count]<='a'):\n            str1=str1.replace(str1[count],'')\n            count=0\n        else:\n            count+=1\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\nprint(remove_lowercase('hello'))\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    final_str=re.sub(r'[a-z]+', '', str1)\n    print(final_str)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1.replace('a','')\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1).strip()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = re.sub(r'[a-z]', '', str1)\n    print(result)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return int(n[0])\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    n = str(n)\n    return int(n[1])\n    \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    n = str(n)\n    return int(n[2])\n    \ndef fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    n = str(n)\n    return int(n[3])\n    \ndef fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    n = str(n)\n    return int(n[4])\n    \ndef sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    n = str(n)\n    return int(n[5])\n    \ndef seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    n = str(n)\n    return int(n[6])\n    \ndef eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    n = str(n)\n    return int(n[7])\n    \ndef ninth_Digit(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    n = str(n)\n    return int(n[8])\n    \ndef tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    n = str(n)\n    return int(n[9])\n    \ndef first_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the first digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[10])\n    \ndef second_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the second digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[11])\n    \ndef third_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the third digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[12])\n    \ndef fourth_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[13])\n    \ndef fifth_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[14])\n    \ndef sixth_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[15])\n    \ndef seventh_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[16])\n    \ndef eighth_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[17])\n    \ndef ninth_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[18])\n    \ndef tenth_Digit_From_Right(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number from right side.\n    '''\n    n = str(n)\n    return int(n[19])\n    \ndef first_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the first digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[0])\n    \ndef second_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the second digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[1])\n    \ndef third_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the third digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[2])\n    \ndef fourth_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[3])\n    \ndef fifth_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[4])\n    \ndef sixth_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[5])\n    \ndef seventh_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[6])\n    \ndef eighth_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[7])\n    \ndef ninth_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[8])\n    \ndef tenth_Digit_From_Left(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number from left side.\n    '''\n    n = str(n)\n    return int(n[9])\n    \ndef first_Digit_From_Left_Including_Zero(n) :  \n    '''\n    Write a python function to find the first digit of a given number from left including zero.\n    '''\n    n = str(n)\n    return int(n[0])\n    \ndef second_Digit_From_Left_Including_Zero(n) :  \n    '''\n    Write a python function to find the second digit of a given number from left including zero.\n    '''\n    n = str(n)\n    return int(n[1])\n    \ndef third_Digit_From_Left_Including_Zero(n) :  \n    '''\n    Write a python function to find the third digit of a given number from left including zero.\n    '''\n    n = str(n)\n    return int(n[2])\n    \ndef fourth_Digit_From_Left_Including_Zero(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number from left including zero.\n    '''\n    n = str(n)\n    return int(n[3])\n    \ndef fifth_Digit_From_Left_Including_Zero(n) :  "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10 :\n        return n\n    else :\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = n // 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = n\n    if num < 0 :\n        return -1\n    while num > 0 :\n        num = num//10\n    return num\n    \ndef test_first_Digit() :\n    print(f\"Testing the function 'first_Digit'...\")\n    assert(first_Digit(123) == 3)\n    assert(first_Digit(1000) == 1)\n    assert(first_Digit(0) == -1)\n    assert(first_Digit(-1000) == -1)\n    print(\" ... done!\")\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    str_n = str(n)\n    digit = int(str_n[0])\n    return digit\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    a=int(n)\n    return a%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // (10**(len(str(n))-1))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 0:\n        n = n//10\n    return n\nprint(first_Digit(123))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n    \ndef second_Digit(n) : \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return n%10\n    \ndef third_Digit(n) : \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return n%100\n    \ndef find_digit_order(n) : \n    '''\n    Write a python function to find the digit order of a given number.\n    '''\n    return first_Digit(n) + second_Digit(n) * 10 + third_Digit(n) * 100\n    \ndef digit_ordering_of_a_number(n) :\n    '''\n    Write a python function to sort digits in a given number.\n    '''\n    digits = []\n    while (n!= 0) : \n        digits.append(find_digit_order(n))\n        n = n//10\n    digits.sort()\n    print(digits)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    lst = []\n    for x in list:\n        if x % 2!= 0:\n            lst.append(x)\n    return lst\nprint(Split([1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd =[]\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i]%2!= 0:\n            odd_list.append(list[i])\n    print(odd_list)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    return odd_list\n    \n    \n    \n    \n    \ndef Print(list):\n    '''\n    Write a python function which prints out the odd numbers of a given list.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    print(odd_list)\n    \n    \n    \n    \n    \ndef Check(list):\n    '''\n    Write a python function which takes a list as input and returns True if the list contains a sublist that starts with a number and is of length 3. If the list does not contain such a sublist, False is returned.\n    '''\n    for i in list:\n        if type(i) == list and i[0] == int and len(i) == 3:\n            return True\n    return False\n    \n    \n    \n    \n    \ndef Remove(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the sum of the numbers.\n    '''\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n    \n    \n    \n    \n    \ndef Reverse(list):\n    '''\n    Write a python function which takes a list as input and returns the reverse of the list.\n    '''\n    reversed_list = []\n    for i in range(len(list)-1,-1,-1):\n        reversed_list.append(list[i])\n    return reversed_list\n    \n    \n    \n    \n    \ndef Swap(list):\n    '''\n    Write a python function which takes a list and two numbers as input and returns the list after swapping the two numbers.\n    '''\n    swapped_list = []\n    if len(list) <= 1:\n        return list\n    i = 0\n    for i in range(len(list)):\n        if list[i] == 0:\n            swapped_list.append(0)\n        else:\n            swapped_list.append(list[i+1])\n    return swapped_list\n    \n    \n    \n    \ndef Insert(list):\n    '''\n    Write a python function which takes a list as input and returns the list after adding an element to the list at the beginning.\n    '''\n    inserted_list = []\n    inserted_list.append(list[0])\n    for i in list[1:]:\n        inserted_list.append(i)\n    return inserted_list\n    \n    \n    \n    \n    \ndef Sort(list):\n    '''\n    Write a python function which takes a list as input and returns a sorted list.\n    '''\n    sorted_list = []\n    for i in range(len(list)):\n        for j in range(i+1,len(list)):\n            if list[i] > list[j]:\n                sorted_list.append(list[i])\n                sorted_list.append(list[j])\n    return sorted_list\n    \n    \n    \n    \n    \ndef Product(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the product of the numbers.\n    '''\n    product = 1\n    for i in list:\n        product *= i\n    return product\n    \n    \n    \n    \n    \ndef Longest(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the length of the longest element of the list.\n    '''\n    longest = 0\n    for i in list:\n        if i > longest:\n            longest = i\n    return longest\n    \n    \n    \n    \n    \ndef Smallest(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the length of the smallest element of the list.\n    '''\n    smallest = 0\n    for i in list:\n        if i < smallest:\n            smallest = i\n    return smallest\n    \n    \n    \n    \ndef Median(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the median of the list.\n    '''\n    list_copy = copy.copy(list)\n    list_copy.sort()\n    if len(list) % 2 == 0:\n        return (list_copy[len(list)//2] + list_copy[(len(list)//2)-1]) / 2\n    else:\n        return list_copy[len(list)//2]\n    \n    \n    \n    \ndef Group(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the list after grouping the elements.\n    '''\n    grouped_list = []\n    if len(list) == 1:\n        grouped_list.append(list)\n    else:\n        middle = len(list)//2\n        left_list = []\n        right_list = []\n        for i in list:\n            if i >= middle:\n                right_list.append(i)\n            else:\n                left_list.append(i)\n        grouped_list.append(left_list)\n        grouped_list.append(right_list)\n    return grouped_list\n    \n    \n    \n    \n    \ndef Remove_Duplicates(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the list after removing the duplicates from the list.\n    '''\n    no_duplicates = []\n    if len(list) == 0:\n        return no_duplicates\n    for i in list:\n        if i not in no_duplicates:\n            no_duplicates.append(i)\n    return no_duplicates\n    \n    \n    \n    \n    \ndef Unique(list):\n    '''\n    Write a python function which takes a list of integers as input and returns a list which contains all the unique elements in the list.\n    '''\n    unique_list = []\n    for i in list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n    \n    \n    \n    \n    \ndef Minimum(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the minimum element of the list.\n    '''\n    minimum = list[0]\n    for i in list:\n        if i < minimum:\n            minimum = i\n    return minimum\n    \n    \n    \n    \n    \ndef Maximum(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the maximum element of the list.\n    '''\n    maximum = list[0]\n    for i in list:\n        if i > maximum:\n            maximum = i\n    return maximum\n    \n    \n    \n    \n    \ndef Minimum_and_Maximum(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the list after finding the minimum and maximum elements of the list.\n    '''\n    minimum = list[0]\n    maximum = list[0]\n    for i in list:\n        if i < minimum:\n            minimum = i\n        if i > maximum:\n            maximum = i\n    return [minimum,maximum]\n    \n    \n    \n    \n    \ndef Minimum_and_Maximum_2(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the list after finding the minimum and maximum elements of the list.\n    '''\n    minimum = list[0]\n    maximum = list[0]\n    for i in list:\n        for j in list:\n            if i < minimum and i!= j:\n                minimum = i\n            if i > maximum and i!= j:\n                maximum = i\n    return [minimum,maximum]\n    \n    \n    \n    \n    \ndef Length(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the length of the list.\n    '''\n    return len(list)\n    \n    \n    \n    \n    \ndef Length_2(list):\n    '''\n    Write a python function which takes a list of integers as input and returns the length of the list.\n    '''\n    return len(list)\n    \n    \n    \n    \ndef Length_3(list):\n    '''\n    Write a python function whic"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for num in list:\n        if num%2!=0:\n            odd.append(num)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    output=[]\n    for i in list:\n        if i%2!=0:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    odd_numbers = []\n    for i in list:\n        if i % 2 == 1:\n            odd_numbers.append(i)\n    return odd_numbers\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n    \n    \ndef Split_2(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    return [i for i in list if i % 2 == 0]\n    \n    \ndef Split_3(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))\n    \n    \ndef Split_4(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return [(i, list[i]) for i in range(0, len(list), 2) if i == 0]\n    \n    \ndef Split_5(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[::2]\n    \n    \ndef Split_6(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[::2]\n    \n    \ndef Split_7(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[1::2]\n    \n    \ndef Split_8(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[1::2]\n    \n    \ndef Split_9(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[::-2]\n    \n    \ndef Split_10(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[::-2]\n    \n    \ndef Split_11(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[2::2]\n    \n    \ndef Split_12(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[2::2]\n    \n    \ndef Split_13(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[::-2]\n    \n    \ndef Split_14(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[::-2]\n    \n    \ndef Split_15(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[-2::2]\n    \n    \ndef Split_16(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[-2::2]\n    \n    \ndef Split_17(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[-2::-2]\n    \n    \ndef Split_18(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[-2::-2]\n    \n    \ndef Split_19(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[-2::-2]\n    \n    \ndef Split_20(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[-2::-2]\n    \n    \ndef Split_21(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[-1::-2]\n    \n    \ndef Split_22(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[-1::-2]\n    \n    \ndef Split_23(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[-1::-2]\n    \n    \ndef Split_24(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[-1::-2]\n    \n    \ndef Split_25(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[-2::-2]\n    \n    \ndef Split_26(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[-2::-2]\n    \n    \ndef Split_27(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[-2::-2]\n    \n    \ndef Split_28(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values.\n    '''\n    return list(zip(range(0, len(list), 2), list))[-2::-2]\n    \n    \ndef Split_29(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd numbers with their index and values.\n    '''\n    return list(zip(range(1, len(list) + 1), list))[-1::-2]\n    \n    \ndef Split_30(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even numbers with their index and values"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        return sum([i*i*i for i in range(1,n+1)])\n    def difference(n):\n        return (sum_of_cubes(n) - sum_of_cubes(n-1))\n    #if n is 0 return 0\n    if n == 0:\n        return 0\n    #return difference\n    return difference(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # your code here\n    n = int(n)\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1) :\n        sum1 = sum1 + i**3\n        sum2 = sum2 + i\n    print(\"Sum of cubes is : \",sum1)\n    print(\"Sum of natural numbers is : \",sum2)\n    print(\"Difference is : \",sum1-sum2)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return(sum(list(map(lambda x: x*x*x, range(1,n+1))))) - sum(list(map(lambda x: x, range(1,n+1))))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)//6\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    res = (pow(n,2)-n)\n    print(\"The Difference between the Sum of Cubes of the First N Natural Numbers and the Sum of the First N Natural Numbers:\",res)\ndef quotient(a,b) :  \n    '''\n    Write a python function to find the quotient of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    res = a/b\n    print(\"The Quotient of the Sum of Cubes of the First N Natural Numbers and the Sum of the First N Natural Numbers:\",res)\ndef remainder(a,b) :  \n    '''\n    Write a python function to find the remainder of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    res = a%b\n    print(\"The Remainder of the Sum of Cubes of the First N Natural Numbers and the Sum of the First N Natural Numbers:\",res)\ndef power(a,b) :  \n    '''\n    Write a python function to find the power of a number with the power set of a.\n    '''\n    res = pow(a,b)\n    print(\"The Power of the First Number With the Power Set of the Second Number:\",res)\ndef factorial(a) :  \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    res = a*a*a*a*a*a\n    print(\"The factorial of the First Number:\",res)\ndef gcd(x,y) :  \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    res = x if y==0 else gcd(y,x%y)\n    print(\"The GCD of the First Number and the Second Number is:\",res)\ndef hcf(x,y) :  \n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    res = x if y==0 else hcf(y,x%y)\n    print(\"The LCM of the First Number and the Second Number is:\",res)\ndef mul(x,y) :  \n    '''\n    Write a python function to find the multiplication of the first n natural numbers.\n    '''\n    res = x*y\n    print(\"The Multiplication of the First N Natural Numbers:\",res)\ndef div(x,y) :  \n    '''\n    Write a python function to find the division of the first n natural numbers.\n    '''\n    res = x/y\n    print(\"The Division of the First N Natural Numbers:\",res)\ndef menu():\n    '''\n    Write a python function to find the sum of the natural numbers from 0 to n.\n    '''\n    while True :\n        print(\"Choose an option from the Menu\")\n        print(\"1.Find Difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\")\n        print(\"2.Quotient of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\")\n        print(\"3.Remainder of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\")\n        print(\"4.Power of a number with the power set of a.\")\n        print(\"5.Factorial of a number.\")\n        print(\"6.Greatest common divisor of two numbers.\")\n        print(\"7.Least common multiple of two numbers.\")\n        print(\"8.Multiplication of the first n natural numbers.\")\n        print(\"9.Division of the first n natural numbers.\")\n        print(\"10.Quit\")\n        print(\"--------------------------------------------------------------------------------------------------\")\n        ch = int(input(\"Enter your choice: \"))\n        if ch == 1 :\n            n = int(input(\"Enter the number of natural numbers to find the difference: \"))\n            difference(n)\n        elif ch == 2 :\n            n = int(input(\"Enter the number of natural numbers to find the quotient: \"))\n            quotient(n)\n        elif ch == 3 :\n            n = int(input(\"Enter the number of natural numbers to find the remainder: \"))\n            remainder(n)\n        elif ch == 4 :\n            a = int(input(\"Enter the number of the first number: \"))\n            b = int(input(\"Enter the number of the second number: \"))\n            power(a,b)\n        elif ch == 5 :\n            a = int(input(\"Enter the number of the first number: \"))\n            print(\"The factorial of the first number is:\",factorial(a))\n        elif ch == 6 :\n            x = int(input(\"Enter the number of the first number: \"))\n            y = int(input(\"Enter the number of the second number: \"))\n            gcd(x,y)\n        elif ch == 7 :\n            x = int(input(\"Enter the number of the first number: \"))\n            y = int(input(\"Enter the number of the second number: \"))\n            hcf(x,y)\n        elif ch == 8 :\n            n = int(input(\"Enter the number of natural numbers to find the multiplication: \"))\n            mul(n)\n        elif ch == 9 :\n            n = int(input(\"Enter the number of natural numbers to find the division: \"))\n            div(n)\n        elif ch == 10 :\n            break\n        else :\n            print(\"Enter the valid choice.\")\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 += i**3\n        sum2 += i\n    return sum1 - sum2\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n=int(input(\"enter the value of n: \"))\n    print(\"sum of the cubes of the first \",n,\" natural numbers is: \",n**3)\n    print(\"sum of the first \",n,\" natural numbers is: \",sum(range(1,n+1)))\n    print(\"sum of the difference between the sums of cubes and the sums of the first \",n,\" natural numbers is: \",n**3-sum(range(1,n+1)))\n    "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 : return \"please enter a positive number\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if (n<0) :\n        print(\"Please enter a positive integer only\")\n    else :\n        sum_of_numbers = 0\n        for i in range(1,n+1) :\n            sum_of_numbers += i**3\n        sum_of_numbers -= n**3\n        print(\"The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_n(n) :  \n    '''\n    Write a python function to calculate the sum of all numbers from 1 to n (both inclusive).\n    '''\n    if (n<0) :\n        print(\"Please enter a positive integer only\")\n    else :\n        sum_of_numbers = 0\n        for i in range(1,n+1) :\n            sum_of_numbers += i\n        print(\"The sum of all numbers from 1 to n (both inclusive) is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        sum_of_numbers = 0\n        for i in range(1,n+1) :\n            sum_of_numbers += (i+1)/2\n        print(\"The sum of the\",n,\"th term in the series is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        sum_of_numbers = 0\n        for i in range(1,n+1) :\n            sum_of_numbers += (i+1)/2\n        print(\"The sum of the\",n,\"th term in the series is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers_using_recursion(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        if n == 1 :\n            sum_of_numbers = 1\n        else :\n            sum_of_numbers = 1/2 + 1/3 + 1/4 + 1/5 +... + 1/n\n        print(\"The sum of the\",n,\"th term in the series is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers_using_recursion(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        if n == 1 :\n            sum_of_numbers = 1\n        else :\n            sum_of_numbers = (n-1)/2 + (n-1)/3 + (n-1)/4 + (n-1)/5 +... + (n-1)/n\n        print(\"The sum of the\",n,\"th term in the series is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers_using_recursion(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        if n == 1 :\n            sum_of_numbers = 1\n        else :\n            sum_of_numbers = (n-1)/2 + (n-1)/3 + (n-1)/4 + (n-1)/5 +... + (n-1)/n\n        print(\"The sum of the\",n,\"th term in the series is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers_using_recursion(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        if n == 1 :\n            sum_of_numbers = 1\n        else :\n            sum_of_numbers = (n-1)/2 + (n-1)/3 + (n-1)/4 + (n-1)/5 +... + (n-1)/n\n        print(\"The sum of the\",n,\"th term in the series is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers_using_recursion(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        if n == 1 :\n            sum_of_numbers = 1\n        else :\n            sum_of_numbers = (n-1)/2 + (n-1)/3 + (n-1)/4 + (n-1)/5 +... + (n-1)/n\n        print(\"The sum of the\",n,\"th term in the series is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers_using_recursion(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        if n == 1 :\n            sum_of_numbers = 1\n        else :\n            sum_of_numbers = (n-1)/2 + (n-1)/3 + (n-1)/4 + (n-1)/5 +... + (n-1)/n\n        print(\"The sum of the\",n,\"th term in the series is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers_using_recursion(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        if n == 1 :\n            sum_of_numbers = 1\n        else :\n            sum_of_numbers = (n-1)/2 + (n-1)/3 + (n-1)/4 + (n-1)/5 +... + (n-1)/n\n        print(\"The sum of the\",n,\"th term in the series is :\",sum_of_numbers)\n    \n    \n    \ndef sum_of_natural_numbers_using_recursion(n) :  \n    '''\n    Write a python function to calculate the sum of the nth term in the series x+1/2+1/3+1/4+1/5+...+1/n\n    '''\n    if (n<1) :\n        print(\"Please enter a positive integer only\")\n    else :\n        if n == 1 :\n            sum_of_numbers = 1\n        else :\n        "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    numbers = list(range(1,n+1))\n    sum1 = sum + sum\n    difference = sum1 - sum\n    return difference\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    for i in range(0,N):\n        if A[i] ^ i == 1:\n            odd_pair = odd_pair + 1\n    print(odd_pair)\n    return odd_pair\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        count = count + A[i]^1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    count = 0\n    for i in range(0, N) :\n        x = A[i]\n        count += (x ^ (x - 1)) & 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    x = 0\n    for i in range(1,N+1):\n        for j in range(i+1,N+1):\n            if((A[i]^A[j])%2!= 0):\n                x += 1\n    print(x)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    ans = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j])%2 == 1:\n                ans+=1\n    return ans\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(1,N-1) :\n        xor_value = (A[i] ^ A[i+1])^(A[i] ^ A[i-1])\n        if xor_value%2!= 0 :\n            odd_pairs += 1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if (N==1):\n        return 0\n    count = 0\n    for i in range(1,N):\n        if (A[i]!= 0):\n            \n            count += find_Pair(A,i)\n            \n    return count\n    \n    \ndef find_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N):\n        if (A[i]!= A[i-1]):\n            count += 1\n    return count\n            \n    \n        \n        \n    \n        \nA = [0,1,2,2,3,4,5,6,7]\nN = len(A)\nprint(find_Odd_Pair(A,N))"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!=0:\n                count = count+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    print(\"Value of N :\",N)\n    \n    if (N%2 == 0) :\n        print(\"Value of N is even :\",N,\"\\n\")\n        \n        return -1\n    \n    print(\"Value of N is odd :\",N,\"\\n\")\n    \n    i = 0\n    while(i<N) :\n        if ((A[i]%2) == 1) :\n            i = i+1\n            continue\n        else :\n            j = i\n            while(j<N) :\n                if ((A[j]%2) == 1) :\n                    #print(A[i],A[j])\n                    return 1\n                j = j+1\n            i = i+1\n    \n    return 0\n    \ndef test_function(test_case) :\n    output = find_Odd_Pair(test_case[0],test_case[1])\n    if output == test_case[2] :\n        print(\"Pass\")\n    else :\n        print(\"Fail\")\n        \ntest_case_1 = [0,1,3,5,7,9]\ntest_function(test_case_1)\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \ndef rev_num(number):\n    '''\n    Write a function that accepts a number and returns it reversed.\n    '''\n    return number[::-1]\n    \ndef num_check(number):\n    '''\n    Write a function that checks whether a number is positive or negative.\n    '''\n    return number > 0\n    \ndef pos_neg(string):\n    '''\n    Write a function to determine whether a string is completely positive or\n    negative.\n    '''\n    return \"Positive\" if string.startswith('+') else \"Negative\"\n    \ndef capitalize(string):\n    '''\n    Write a function that capitalizes the first letter of a string.\n    '''\n    return string.capitalize()\n    \ndef sum_nums(numbers):\n    '''\n    Write a function that sums a list of numbers.\n    '''\n    return sum(numbers)\n    \ndef remove_ending(string):\n    '''\n    Write a function that removes the end of a string.\n    '''\n    return string[:-1]\n    \ndef total_length(string):\n    '''\n    Write a function that returns the total length of a string.\n    '''\n    return len(string)\n    \ndef get_min(list_of_numbers):\n    '''\n    Write a function that returns the minimum value in a list.\n    '''\n    return min(list_of_numbers)\n    \ndef reverse_str(string):\n    '''\n    Write a function that reverses a string.\n    '''\n    return string[::-1]\n    \ndef sort_strings(string_list):\n    '''\n    Write a function that sorts a list of strings.\n    '''\n    return sorted(string_list)\n    \ndef num_check(numbers):\n    '''\n    Write a function that checks whether all numbers in a list are positive or\n    negative.\n    '''\n    if not numbers:\n        return False\n    for num in numbers:\n        if num < 0:\n            return False\n    return True\n    \ndef max_of_2(a, b):\n    '''\n    Write a function that returns the maximum of two numbers.\n    '''\n    return max(a, b)\n    \ndef even_odd(num):\n    '''\n    Write a function that returns the sum of the even and odd numbers in a list.\n    '''\n    return (num * 2) - 1\n    \ndef sum_of_squares(numbers):\n    '''\n    Write a function that returns the sum of the squares of all the numbers in\n    the list.\n    '''\n    return sum([x**2 for x in numbers])\n    \ndef remove_duplicates(numbers):\n    '''\n    Write a function that removes duplicate numbers in a list.\n    '''\n    return set(numbers)\n    \ndef count_letters(string):\n    '''\n    Write a function that returns the number of letters in a string.\n    '''\n    return len(set(string))\n    \ndef is_sorted(num_list):\n    '''\n    Write a function that determines whether a list of numbers is sorted.\n    '''\n    return num_list == sorted(num_list)\n    \ndef every_other(string):\n    '''\n    Write a function that returns a string with every other character in the\n    original string.\n    '''\n    return string[::2]\n    \ndef count_times(string, char):\n    '''\n    Write a function that returns the number of times a given character appears\n    in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if char == string[i]:\n            count += 1\n    return count\n    \ndef is_there_an_even(num_list):\n    '''\n    Write a function that returns whether the sum of the even numbers is\n    greater than the sum of the odd numbers.\n    '''\n    return sum(num_list) > sum(num_list[1::2])\n    \ndef is_palindrome(string):\n    '''\n    Write a function that returns whether the input string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome2(string):\n    '''\n    Write a function that returns whether the input string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef solve(numbers):\n    '''\n    Write a function that determines whether a list of numbers is a sorted\n    increasing list.\n    '''\n    return numbers == sorted(numbers)\n    \ndef num_pairs_equal_sum(numbers):\n    '''\n    Write a function that determines whether the given list contains\n    two elements whose sum is equal to a given target.\n    '''\n    total = 0\n    for num in numbers:\n        total += num\n    i = 0\n    j = len(numbers) - 1\n    while i < j:\n        total2 = numbers[i] + numbers[j]\n        if total2 == total - total2:\n            return True\n        i += 1\n        j -= 1\n    return False\n    \ndef is_palindrome2(string):\n    '''\n    Write a function that returns whether the input string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome3(string):\n    '''\n    Write a function that returns whether the input string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef merge_lists(list_a, list_b):\n    '''\n    Write a function that merges the two lists into one without using any\n    list method or additional data structure.\n    '''\n    i = 0\n    j = 0\n    m = []\n    while i < len(list_a) and j < len(list_b):\n        if list_a[i] > list_b[j]:\n            m.append(list_b[j])\n            j += 1\n        else:\n            m.append(list_a[i])\n            i += 1\n    while i < len(list_a):\n        m.append(list_a[i])\n        i += 1\n    while j < len(list_b):\n        m.append(list_b[j])\n        j += 1\n    return m\n    \ndef is_interval_sorted(numbers):\n    '''\n    Write a function that determines whether the list is sorted by counting\n    the number of elements less than or greater than a given element.\n    '''\n    if not numbers:\n        return True\n    count_less = 0\n    count_greater = 0\n    for num in numbers:\n        if num > numbers[0]:\n            count_greater += 1\n        if num < numbers[0]:\n            count_less += 1\n    return count_less + count_greater == len(numbers)\n    \ndef unique_in_order(iterable):\n    '''\n    Write a function that returns a list of unique items in order of appearance.\n    '''\n    if not iterable:\n        return iterable\n    prev = iterable[0]\n    result = []\n    for i in iterable:\n        if i == prev:\n            continue\n        else:\n            result.append(i)\n            prev = i\n    return result\n    \ndef contains_all(iterable, items):\n    '''\n    Write a function that returns whether a list contains all of the specified\n    items.\n    '''\n    return items == sorted(set(iterable))\n    \ndef plus_one(num):\n    '''\n    Write a function that adds one to a given number.\n    '''\n    return num + 1\n    \ndef check_prime(num):\n    '''\n    Write a function that checks whether a number is prime.\n    '''\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef prime_factors(num):\n    '''\n    Write a function that returns a list of all prime factors of a number.\n    '''\n    prime_factors = []\n    for i in range(2, num + 1):\n        if num % i == 0 and check_prime(i):\n            prime_factor"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \n    \ndef toggle_string_v2(string):\n    '''\n    Another version of the function.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string) == str:\n        return \"\".join([c.lower() if i%2 else c.upper() for i,c in enumerate(string)])\n    else:\n        raise TypeError(\"Only string is allowed\")\n        "
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for letter in string:\n        if letter.islower():\n            new_string += letter.upper()\n        else:\n            new_string += letter.lower()\n    return new_string\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def distance(x, y):\n        diff = abs(x - y)\n        return diff\n    s = 0\n    for i in range(0, max(len(str(n1)), len(str(n2))), 1):\n        n1_1 = int(str(n1)[i])\n        n2_1 = int(str(n2)[i])\n        s += distance(n1_1, n2_1)\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    sum = 0\n    \n    for i in range(len(str(n1))):\n        diff = abs(n1 % 10 - n2 % 10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n        sum += diff\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert (type(n1) == int) and (type(n2) == int)\n    assert (n1 >= 0) and (n2 >= 0)\n    \n    s = 0\n    for i in range(len(str(n1))):\n        s += abs(n1 - n2)\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = str(n1)\n    d2 = str(n2)\n    sum = 0\n    for i in range(len(d1)):\n        sum = sum + abs(int(d1[i]) - int(d2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(n1-n2)//(10**i) for i in range(min(len(str(n1)), len(str(n2))))])\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    n1, n2 = str(n1), str(n2)\n    sum = 0\n    for i in range(len(n1)):\n        sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert (n1>0) and (n2>0)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total = 0\n    diff = abs(n1 - n2)\n    while diff > 0:\n        total += diff % 10\n        diff = diff // 10\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def distance(n):\n        sum = 0\n        for i in range(1, len(str(n)) + 1):\n            sum += abs(int(n1) - int(n2)) ** i\n        return sum\n    return distance(n1), distance(n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = n1%10\n    d2 = n2%10\n    d3 = abs(d1-d2)\n    return d3\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(0, size):\n        curr_sum = 0\n        for j in range(i, size):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        sum = a[0]\n        for i in range(1, size):\n            if a[i] > a[i-1]:\n                sum = a[i] + max_sub_array_sum(a, i-1)\n            else:\n                sum = max(a[i], sum)\n        return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sums = 0\n    for i in range(0, size):\n        sums += a[i]\n        if sums > max_sum:\n            max_sum = sums\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    end = 0\n    sum = 0\n    for i in range(size):\n        sum += a[i]\n        if sum > max_sum:\n            max_sum = sum\n            start = i\n    sum = 0\n    for j in range(size-1, -1, -1):\n        sum += a[j]\n        if sum > max_sum:\n            max_sum = sum\n            end = j\n    return a[start:end+1]\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # if size > 0:\n    #     for i in range(size):\n    #         if i == 0:\n    #             max_sum = a[0]\n    #             max_idx = i\n    #         else:\n    #             if a[i] > max_sum:\n    #                 max_sum = a[i]\n    #                 max_idx = i\n    #     return max_sum, max_idx\n    # else:\n    #     return a, 0\n    # # for i in range(size):\n    # #     if i == 0:\n    # #         max_sum = a[0]\n    # #         max_idx = i\n    # #     else:\n    # #         if a[i] > max_sum:\n    # #             max_sum = a[i]\n    # #             max_idx = i\n    # # return max_sum, max_idx\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(0, size):\n        sum = sum + a[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initializing the result\n    max_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 0 or size == 0:\n        return 0\n    res = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum+a[i])\n        res = max(res, curr_sum)\n    return res\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # solution 1 using 2 pointer \n    max_sum = 0\n    min_sum = 0\n    for i in range(size):\n        min_sum = a[i]\n        for j in range(i+1,size):\n            min_sum = min(min_sum,a[j])\n            max_sum = max(max_sum, min_sum + a[j])\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    end = 0\n    sum = 0\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elem = []\n    for i in test_tup1:\n        if i not in union_elem:\n            union_elem.append(i)\n    for i in test_tup2:\n        if i not in union_elem:\n            union_elem.append(i)\n    union_elem = sorted(union_elem)\n    return union_elem\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1) | set(test_tup2)\n    union = list(union)\n    union.sort()\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for elem in test_tup1:\n        if elem not in union_tup:\n            union_tup.append(elem)\n    for elem in test_tup2:\n        if elem not in union_tup:\n            union_tup.append(elem)\n    union_tup = sorted(union_tup)\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    for i in test_tup2:\n        if i not in union_tup:\n            union_tup.append(i)\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in new_tup:\n            new_tup = new_tup + (test_tup1[i],)\n        if test_tup2[i] not in new_tup:\n            new_tup = new_tup + (test_tup2[i],)\n    new_tup = sorted(new_tup)\n    return new_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = []\n    for tup1_val in test_tup1:\n        if tup1_val not in union_tuple:\n            union_tuple.append(tup1_val)\n    for tup2_val in test_tup2:\n        if tup2_val not in union_tuple:\n            union_tuple.append(tup2_val)\n    return tuple(sorted(union_tuple))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    list1 = []\n    for each in test_tup1:\n        list1.append(each)\n    for each in test_tup2:\n        list1.append(each)\n    list1.sort()\n    return tuple(list1)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (sorted(set(test_tup1).union(set(test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise ValueError(\"Both inputs should be tuples\")\n    \n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both inputs should be of equal length\")\n    \n    union = set(test_tup1) | set(test_tup2)\n    \n    return tuple(sorted(union))\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == [] or len(lst) == 0:\n        return 0\n    current_length = 1\n    max_length = 1\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    if current_length > max_length:\n        max_length = current_length\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dict_dict = {}\n    for i in range(0,len(lst)):\n        if lst[i] in dict_dict:\n            dict_dict[lst[i]].append(i)\n        else:\n            dict_dict[lst[i]] = [i]\n    max_count = 0\n    max_length = 0\n    for key, value in dict_dict.items():\n        if len(value) > max_count:\n            max_count = len(value)\n            max_length = key\n    print(max_length,max_count)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dic = {}\n    for i in range(len(lst)):\n        dic[i] = 1\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[j] == lst[i]:\n                dic[j] = dic[j]+1\n            else:\n                break\n    return max(dic, key=dic.get)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    length = 0\n    for i in lst:\n        length = max(length,len(i))\n    return length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length = len(lst[i:j])\n            if length > max_length:\n                max_length = length\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_count = 0\n    count = 0\n    for i in range(len(lst)):\n        if count > max_count:\n            max_count = count\n        count += 1\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dict_list = {}\n    for i in range(len(lst)):\n        if lst[i] in dict_list:\n            dict_list[lst[i]] = dict_list[lst[i]] + 1\n        else:\n            dict_list[lst[i]] = 1\n    return max(dict_list, key=dict_list.get)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    if type(lst)!= list:\n        print('List')\n        return 0\n    if type(lst[0])!= list:\n        print('First element of the list is not a list')\n        return 0\n    if len(lst) == 1:\n        return len(lst[0])\n    max_length = len(lst[0])\n    if max_length > len(lst[1]):\n        max_length = len(lst[1])\n    for i in range(len(lst)-1):\n        curr_length = len(lst[i])\n        if curr_length > max_length:\n            max_length = curr_length\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    m = 0\n    for i in range(n):\n        k = lst.count(lst[i])\n        if k > m:\n            m = k\n    return m\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #  max_lst = []\n    # for i in lst:\n    #     max_lst.append(len(i))\n    # return max(max_lst)\n    return max(map(len, lst))\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # return re.findall(r\"[\\\"](.*?)[\\\"]\", text)\n    # ***********\n    # return re.findall(r\"\\\"(.*?)\\\"\", text)\n    # ***********\n    return re.findall(r\"\\\"(.*?)\\\"\", text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    string = re.findall(r\"[\\\"](.*?)[\\\"]\",text)\n    print(string)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Your code here\n    start = re.search('\\\"',text)\n    end = re.search('\\\"',text)\n    return text[start.start():end.end()]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile('\\\"(.*?)\\\"')\n    x = p.findall(text)\n    for i in range(len(x)):\n        x[i] = x[i].strip(\"\\\"\")\n    return x\n    \ndef extract_values_with_numbers(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile('\\\"(.*?)\\\"')\n    x = p.findall(text)\n    for i in range(len(x)):\n        x[i] = x[i].strip(\"\\\"\")\n    return x\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val = re.findall(\"\\\"[^\\\"]*\\\"\", text)\n    if val:\n        print(val)\n    else:\n        print('no values')\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # #pattern = r'[\\\"](.*)[\\\"]'\n    # pattern = r'\\\"(.*)\\\"'\n    # result = re.findall(pattern, text)\n    # return result\n    # text = '''\"This is a string with \"double\" quotes\" and'single' quotes'.\"'''\n    # print(text)\n    pattern = r'\\\"(.*)\\\"'\n    result = re.findall(pattern, text)\n    return result\n    # print(result)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r'\"(.*?)\"')\n    text = re.findall(regex, text)\n    text = list(filter(None, text))\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r\"\\\"(.*)\\\"\")\n    return pattern.findall(text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == '':\n        return None\n    if text[0] == '\"' and text[-1] == '\"':\n        start_index = text.find('\"',1)\n        end_index = text.find('\"',start_index+1)\n        return text[start_index+1:end_index]\n    else:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    start = re.findall(r'\\\"(.*?)\\\"', text)\n    end = re.findall(r\"'(.*?)'\", text)\n    result = start + end\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j] and arr[i] < arr[j]:\n                count += 1\n    return count\n    \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                ans += 1\n    return ans"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count\ndef count_Pairs_2(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef count_Pairs_3(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_3(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_4(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_5(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_6(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_7(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_8(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_9(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_10(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_11(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_12(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_13(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_14(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_15(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_16(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_17(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_18(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_19(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_20(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count\ndef find_Pairs_21(arr,n)"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i] == arr[j]):\n                c = c + 1\n    print(c)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if(arr[i]>arr[j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 1:\n        return 0\n    arr = sorted(arr)\n    i = 0\n    count = 0\n    while i < len(arr) and arr[i] == arr[i-1]:\n        i+=1\n        count += 1\n        while i < len(arr) and arr[i] == arr[i-1]:\n            i += 1\n            count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    \n    # create a dictionary of all pair combination\n    pairs = dict()\n    for i in range(n):\n        for j in range(i+1,n):\n            pairs[i,j] = pairs.get((i,j),0)+1\n            pairs[j,i] = pairs.get((j,i),0)+1\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==0: return 0\n    #if there are no elements in the list, then no possible pairs\n    if n<2: return 0\n    #if there are 2 elements\n    if n==2:\n        if arr[0]!=arr[1]:\n            return 1\n        else:\n            return 0\n    # if there are 3 elements\n    if n==3:\n        if (arr[0]!=arr[1]) and (arr[1]!=arr[2]):\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pair=0\n    i=0\n    if n==0:\n        return 0\n    while i<n:\n        if i==n-1:\n            if arr[i]!=arr[0]:\n                pair=pair+1\n            return pair\n        if arr[i]!=arr[i+1]:\n            pair=pair+1\n        i=i+1\n    return pair\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \ndef split_1(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \ndef max_length(word): \n    '''\n    Write a python function to get the length of the longest string.\n    '''\n    return len(word)\n    \ndef min_length(word): \n    '''\n    Write a python function to get the length of the shortest string.\n    '''\n    return len(word)\n    \ndef sum(word): \n    '''\n    Write a python function to get the sum of all the integers in the string.\n    '''\n    total = 0\n    for i in range(len(word)): \n        total += int(word[i])\n    return total\n    \ndef sum_1(word): \n    '''\n    Write a python function to get the sum of all the integers in the string.\n    '''\n    total = 0\n    for i in word: \n        total += int(i)\n    return total\n    \ndef is_sum(word, sum_num): \n    '''\n    Write a python function to check if the sum of the integers in a word equals the integer sum_num.\n    '''\n    for i in range(len(word)): \n        total += int(word[i])\n    if total == int(sum_num): \n        return True\n    else: \n        return False\n    \ndef is_sum_1(word, sum_num): \n    '''\n    Write a python function to check if the sum of the integers in a word equals the integer sum_num.\n    '''\n    total = 0\n    for i in word: \n        total += int(i)\n    if total == int(sum_num): \n        return True\n    else: \n        return False\n    \ndef starts_with(word, substr): \n    '''\n    Write a python function to check if the string starts with a substring.\n    '''\n    if word[:len(substr)] == substr: \n        return True\n    else: \n        return False\n    \ndef starts_with_1(word, substr): \n    '''\n    Write a python function to check if the string starts with a substring.\n    '''\n    if word[:len(substr)] == substr: \n        return True\n    else: \n        return False\n    \ndef ends_with(word, substr): \n    '''\n    Write a python function to check if the string ends with a substring.\n    '''\n    if word[-len(substr):] == substr: \n        return True\n    else: \n        return False\n    \ndef ends_with_1(word, substr): \n    '''\n    Write a python function to check if the string ends with a substring.\n    '''\n    if word[-len(substr):] == substr: \n        return True\n    else: \n        return False\n    \ndef is_palindrome(word): \n    '''\n    Write a python function to check if the given word is a palindrome or not.\n    '''\n    if word == word[::-1]: \n        return True\n    else: \n        return False\n    \ndef is_palindrome_1(word): \n    '''\n    Write a python function to check if the given word is a palindrome or not.\n    '''\n    if word == word[::-1]: \n        return True\n    else: \n        return False\n    \ndef is_palindrome_2(word): \n    '''\n    Write a python function to check if the given word is a palindrome or not.\n    '''\n    if word == word[::-1]: \n        return True\n    else: \n        return False\n    \ndef is_palindrome_3(word): \n    '''\n    Write a python function to check if the given word is a palindrome or not.\n    '''\n    if word == word[::-1]: \n        return True\n    else: \n        return False\n    \ndef is_palindrome_4(word): \n    '''\n    Write a python function to check if the given word is a palindrome or not.\n    '''\n    if word == word[::-1]: \n        return True\n    else: \n        return False\n    \ndef is_palindrome_5(word): \n    '''\n    Write a python function to check if the given word is a palindrome or not.\n    '''\n    if word == word[::-1]: \n        return True\n    else: \n        return False\n    \ndef is_palindrome_6(word): \n    '''\n    Write a python function to check if the given word is a palindrome or not.\n    '''\n    if word == word[::-1]: \n        return True\n    else: \n        return False\n    \ndef count_consecutive_1(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_2(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_3(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_4(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_5(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_6(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_7(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_8(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_9(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_10(word): \n    '''\n    Write a python function to count the consecutive numbers in a word.\n    '''\n    count = 0\n    for i in range(len(word)): \n        if word[i] == word[i+1]: \n            count += 1\n    return count\n    \ndef count_consecutive_11(word): \n    '''\n    Write a python function to count the consecutive number"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    return word\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.split(\" \")\n    return word\nprint(split(\"Akshat\"))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    res = []\n    i = 0\n    while(i < len(word)):\n        res.append(word[i])\n        i += 1\n    return res\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return(word.split(' '))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.strip()\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word[1]\n    \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return (word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n    \ndef sum_digits2(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int,str(n)))\n    \ndef sum_digits3(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int,str(n)))\n    \ndef sum_digits4(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return my_sum(n)\n    \ndef sum_digits5(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return my_sum(n)\n    \ndef sum_digits6(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum([int(x) for x in str(n)])\n    \ndef sum_digits7(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int,str(n)))\n    \ndef sum_digits8(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return my_sum(n)\n    \ndef sum_digits9(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits10(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return my_sum(n)\n    \ndef sum_digits11(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(map(int,str(n)))\n    \ndef sum_digits12(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return my_sum(n)\n    \ndef sum_digits13(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits14(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return my_sum(n)\n    \ndef sum_digits15(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits16(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits17(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits18(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits19(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits20(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits21(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits22(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits23(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits24(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum(n // 10)\n    return sum(int(x) for x in str(n))\n    \ndef sum_digits25(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def my_sum(n):\n        if n < 10:\n            return n\n        return n % 10 + my_sum("
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n_string = str(n)\n    sum = 0\n    for i in n_string:\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    for i in range(len(str(n))):\n        result += int(str(n)[i])\n    return result\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # number of digits in the number\n    n = int(n)\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert isinstance(n, int) and n>=0\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digit = 0\n    while n!= 0:\n        sum_digit += n % 10\n        n = n // 10\n    return sum_digit\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # sum = 0\n    # while n > 0:\n    #     n, remainder = divmod(n, 10)\n    #     sum += remainder\n    # return sum\n    # or\n    # n = 0\n    # while n:\n    #     n, remainder = divmod(n, 10)\n    #     sum += remainder\n    # return sum\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -(sum_digits(-n))\n    return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -1\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    count = 0\n    while n:\n        count += n % 10\n        n //= 10\n    return count\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index in range(1,len(list1)):\n        if (list1[index] > list1[index - 1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i - 1] >= list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==1:\n        return True\n    else:\n        if list1[0] > list1[1]:\n            return False\n        else:\n            return issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check for sorted list\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted = True\n    if len(list1) == 1:\n        return sorted\n    elif list1[0] >= list1[1]:\n        sorted = False\n    for i in range(len(list1)-2):\n        if list1[i] > list1[i+1] or list1[i] >= list1[i+2]:\n            sorted = False\n    return sorted\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    if n <= 1:\n        return True\n    if list1[0] >= list1[1]:\n        return False\n    for i in range(1, n-1):\n        if list1[i] >= list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    length = len(list1)\n    if length == 0:\n        return False\n    for i in range(length - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    def sortcheck(lst1):\n        if len(lst1) == 1:\n            return True\n        elif lst1[0] <= lst1[1]:\n            return sortcheck(lst1[1:])\n        else:\n            return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        dic = {}\n        lst.append(dic)\n    return lst\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(0,length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(len(list1)-i-1):\n            if len(list1[j]) > len(list1[j+1]):\n                list1[j], list1[j+1] = list1[j+1], list1[j]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key=len, reverse=True)\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index, lst in enumerate(list1):\n        lst.sort()\n        list1[index] = lst\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) == 0:\n        return []\n    return sort_sublists(list1[:len(list1)//2]) + sort_sublists(list1[len(list1)//2:])\n    \ndef sum_lists(list1,list2):\n    '''\n    Write a function to sum up two lists of same length.\n    '''\n    if len(list1) == 0:\n        return []\n    return sum_lists(list1[1:],list2[1:]) + [list1[0] + list2[0]]\n    \ndef merge_list(list1,list2):\n    '''\n    Write a function to merge two lists.\n    '''\n    if len(list1) == 0:\n        return list2\n    if len(list2) == 0:\n        return list1\n    if list1[0] < list2[0]:\n        return [list1[0]] + merge_list(list1[1:],list2)\n    else:\n        return [list2[0]] + merge_list(list1,list2[1:])\n        \ndef balanced_parenthesis(string):\n    '''\n    Write a function to check if a given string has balanced parentheses.\n    '''\n    if len(string)%2 == 1:\n        return False\n    count = 0\n    for item in string:\n        if item == \"(\":\n            count += 1\n        elif item == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n    \ndef power_of_two(number):\n    '''\n    Write a function to check if a given integer is a power of two.\n    '''\n    return number > 0 and bin(number).count('1') == 1\n    \ndef is_abecedarian(string):\n    '''\n    Write a function to check if a given string is an abecedarian string.\n    '''\n    if len(string) <= 1:\n        return True\n    else:\n        return string[0] <= string[1] and is_abecedarian(string[1:])\n        \ndef first_non_repeated_character(string):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            if string[i] == string[j] and string[i]!= \" \":\n                return string[i]\n    return \" \"\n    \ndef alien_dictionary(words):\n    '''\n    Write a function to check if a given string can be formed by characters of a given list.\n    '''\n    if len(words) <= 1:\n        return True\n    else:\n        return words[0] == words[1] and alien_dictionary(words[1:])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Sort each sublist in the list of lists\n    for i in range(len(list1)):\n        # Sort each sublist in list1 in ascending order\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for each sublist\n    for sublist in list1:\n        # sort each sublist\n        # sort sublist\n        for j in range(len(sublist)-1):\n            for k in range(len(sublist)-1-j):\n                if sublist[k] > sublist[k+1]:\n                    sublist[k],sublist[k+1] = sublist[k+1],sublist[k]\n    return list1\nprint(sort_sublists(list1))"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = set(nums)\n    return list(nums)\n    \ndef two_unique_nums_1(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n    \n    \ndef three_sum(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                if nums[i]+nums[j] +nums[k] == 0:\n                    permutations.append([nums[i],nums[j],nums[k]])\n    return permutations\n    \ndef three_sum_1(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                if nums[i]+nums[j] +nums[k] == 0:\n                    permutations.append([nums[i],nums[j],nums[k]])\n    return permutations\n    \ndef three_sum_2(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                if nums[i]+nums[j] +nums[k] == 0:\n                    permutations.append([nums[i],nums[j],nums[k]])\n    return permutations\n    \n    \ndef four_sum(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                for l in range(k+1,len(nums)):\n                    if nums[i]+nums[j]+nums[k]+nums[l] == 0:\n                        permutations.append([nums[i],nums[j],nums[k],nums[l]])\n    return permutations\n    \ndef four_sum_1(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                for l in range(k+1,len(nums)):\n                    if nums[i]+nums[j]+nums[k]+nums[l] == 0:\n                        permutations.append([nums[i],nums[j],nums[k],nums[l]])\n    return permutations\n    \ndef four_sum_2(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                for l in range(k+1,len(nums)):\n                    if nums[i]+nums[j]+nums[k]+nums[l] == 0:\n                        permutations.append([nums[i],nums[j],nums[k],nums[l]])\n    return permutations\n    \n    \ndef five_sum(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                for l in range(k+1,len(nums)):\n                    for m in range(l+1,len(nums)):\n                        if nums[i]+nums[j]+nums[k]+nums[l]+nums[m] == 0:\n                            permutations.append([nums[i],nums[j],nums[k],nums[l],nums[m]])\n    return permutations\n    \ndef five_sum_1(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                for l in range(k+1,len(nums)):\n                    for m in range(l+1,len(nums)):\n                        if nums[i]+nums[j]+nums[k]+nums[l]+nums[m] == 0:\n                            permutations.append([nums[i],nums[j],nums[k],nums[l],nums[m]])\n    return permutations\n    \ndef five_sum_2(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                for l in range(k+1,len(nums)):\n                    for m in range(l+1,len(nums)):\n                        if nums[i]+nums[j]+nums[k]+nums[l]+nums[m] == 0:\n                            permutations.append([nums[i],nums[j],nums[k],nums[l],nums[m]])\n    return permutations\n    \n    \ndef six_sum(nums):\n    '''\n    Write a python function to find all permutations of a given list of numbers.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    permutations = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                for l in range(k+1,len(nums)):\n                    for m in range(l+1,len(nums)):\n                        for n in range(m+1,len(nums)):\n                            if nums[i]+nums[j]+nums[k]+nums[l]+nums[m]+nums[n] == 0:\n                                permutations.append([nums[i],nums[j],nums[k],nums[l],nums[m],nums[n]])\n    return permutations\n    \ndef six_sum_1(nums):\n    '"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # a = set(nums)\n    # return a\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #create empty list to store unique elements\n    unique_nums = []\n    #iterate over the list of lists to find unique elements\n    for num_list in nums:\n        #create an empty list to store current list\n        unique_list = []\n        #iterate over the list of current list\n        for num in num_list:\n            #append unique elements to the empty list\n            if num not in unique_list:\n                unique_list.append(num)\n        #append the current list to the unique list\n        unique_nums.append(unique_list)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_list = list(set(nums))\n    return num_list\n    \n    \ndef is_sublist(nums, sublist):\n    '''\n    Write a python function to check if a list is a subset of a given list.\n    '''\n    if len(nums) < len(sublist):\n        return False\n    else:\n        for i in range(len(nums)):\n            if nums[i] not in sublist:\n                return False\n    return True\n    \n    \ndef fizz_buzz(nums):\n    '''\n    Write a python function to check if a number is divisible by 3 or 5 and by both.\n    '''\n    for num in nums:\n        if num % 3 == 0 and num % 5 == 0:\n            print(f\"FizzBuzz - {num}\")\n        elif num % 3 == 0:\n            print(f\"Fizz - {num}\")\n        elif num % 5 == 0:\n            print(f\"Buzz - {num}\")\n        else:\n            print(num)\n    \n    \ndef print_triangle(n):\n    '''\n    Write a python function to print a triangle shape with the given number.\n    '''\n    if n == 0:\n        return\n    for i in range(n):\n        for j in range(i + 1):\n            print(\"*\", end=\" \")\n        print()\n        \n        \ndef create_even_number(n):\n    '''\n    Write a python function to create an array of even numbers between 0 to n.\n    '''\n    even_nums = list(range(2, n + 1, 2))\n    return even_nums\n    \n    \ndef sum_numbers(nums):\n    '''\n    Write a python function to sum all numbers in an array.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n    \n    \ndef reverse(nums):\n    '''\n    Write a python function to reverse an array of numbers.\n    '''\n    rev_nums = nums[::-1]\n    return rev_nums\n    \n    \ndef max_min(nums):\n    '''\n    Write a python function to find the maximum and minimum in an array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in range(len(nums)):\n        if max < nums[i]:\n            max = nums[i]\n        if min > nums[i]:\n            min = nums[i]\n    return max, min\n    \n    \ndef swap_index(nums, index1, index2):\n    '''\n    Write a python function to swap the values of the 2 given indexes in an array.\n    '''\n    temp = nums[index1]\n    nums[index1] = nums[index2]\n    nums[index2] = temp\n    return nums\n    \n    \ndef check_pangram(str_input, alphabet):\n    '''\n    Write a python function to check if a given string is a pangram.\n    '''\n    str_input = str_input.replace(\" \", \"\")\n    alphabet = alphabet.replace(\" \", \"\")\n    str_input = str_input.lower()\n    alphabet = alphabet.lower()\n    alphabet_set = set(alphabet)\n    str_input_set = set(str_input)\n    if str_input_set <= alphabet_set:\n        return True\n    else:\n        return False\n    \n    \ndef max_substring(string):\n    '''\n    Write a python function to find the longest substring in a given string.\n    '''\n    max_len = 0\n    max_str = \"\"\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            substring = string[i:j + 1]\n            if len(substring) > max_len and substring.isalpha():\n                max_len = len(substring)\n                max_str = substring\n    return max_str\n    \n    \ndef swap_elements(nums, index1, index2):\n    '''\n    Write a python function to swap the values of the 2 given indices in an array.\n    '''\n    nums[index1], nums[index2] = nums[index2], nums[index1]\n    return nums\n    \n    \ndef max_odd_even(nums):\n    '''\n    Write a python function to find the maximum value and the minimum value from a given array.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    for i in range(len(nums)):\n        if nums[i] == max_value:\n            if i % 2 == 0:\n                max_value = nums[i - 1]\n            else:\n                max_value = nums[i + 1]\n    for i in range(len(nums)):\n        if nums[i] == min_value:\n            if i % 2 == 0:\n                min_value = nums[i - 1]\n            else:\n                min_value = nums[i + 1]\n    return max_value, min_value\n    \n    \ndef k_largest_elements(nums, k):\n    '''\n    Write a python function to find the k largest elements in an array.\n    '''\n    nums.sort(reverse=True)\n    return nums[:k]\n    \n    \ndef k_smallest_elements(nums, k):\n    '''\n    Write a python function to find the k smallest elements in an array.\n    '''\n    nums.sort()\n    return nums[:k]\n    \n    \ndef get_first_n_prime_numbers(n):\n    '''\n    Write a python function to find the first n prime numbers.\n    '''\n    prime_list = [2, 3]\n    nums = []\n    for i in range(1, n):\n        nums.append(i)\n    for i in range(1, len(nums)):\n        curr_prime = prime_list[0]\n        index = 0\n        while nums[index] % curr_prime!= 0 and index <= (len(nums) - 2):\n            index += 1\n        if nums[index] % curr_prime == 0:\n            continue\n        else:\n            prime_list.append(nums[index])\n            nums[index] = curr_prime\n    return prime_list\n    \n    \ndef find_largest_prime_factor(nums):\n    '''\n    Write a python function to find the largest prime factor in a given array.\n    '''\n    largest_prime = 0\n    largest_prime_factors = []\n    for i in range(1, len(nums)):\n        if nums[i] == 2:\n            largest_prime_factors.append(2)\n            continue\n        elif nums[i] % 2 == 0:\n            if largest_prime < nums[i] / 2:\n                largest_prime = nums[i] / 2\n                largest_prime_factors.clear()\n                largest_prime_factors.append(nums[i])\n            else:\n                continue\n        else:\n            prime = 3\n            while prime * prime <= nums[i]:\n                if largest_prime < nums[i] / prime:\n                    largest_prime = nums[i] / prime\n                    largest_prime_factors.clear()\n                    largest_prime_factors.append(prime)\n                prime += 2\n    return largest_prime_factors\n    \n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_even(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n    \n    \ndef is_prime_od"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return set(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                nums.remove(nums[i])\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    a = []\n    for i in nums:\n        if i not in a:\n            a.append(i)\n    print(a)\n    return a\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    nums = sorted(nums)\n    i = 0\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n        else:\n            nums.pop(i)\n    return nums\nprint(two_unique_nums([1, 2, 3, 2, 1, 2]))"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # nums = [[1, 2, 3, 4], [1, 2, 2, 4], [1, 2, 3, 3]]\n    # nums = [[1, 2, 3, 4], [1, 2, 2, 3], [1, 2, 3, 3]]\n    nums = [[1, 2, 3, 4], [1, 2, 2, 4], [1, 2, 3, 3]]\n    \n    # unique_list = list()\n    unique_list = []\n    \n    for n in nums:\n        for val in n:\n            if val not in unique_list:\n                unique_list.append(val)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return list_data[0]*len(list_data) if len(list_data) == 0 else list_data[0]*unique_product(list_data[1:])\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x*y, list_data, 1)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # list_data = [1,1,2,3,4,5,3,2]\n    # for i in range(len(list_data)):\n    #     if list_data.count(list_data[i]) == 1:\n    #         continue\n    #     else:\n    #         product = 1\n    #         for j in range(len(list_data)):\n    #             if list_data[i] == list_data[j]:\n    #                 product = product * list_data[j]\n    #             else:\n    #                 continue\n    #         return product\n    product = 1\n    for i in range(len(list_data)):\n        if list_data.count(list_data[i]) == 1:\n            continue\n        else:\n            product = product * list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = sorted(list_data)\n    d = {}\n    for i in range(0,len(list_data)):\n        if list_data[i] not in d:\n            d[list_data[i]] = 1\n        else:\n            d[list_data[i]] += 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    product = 1\n    for elem in unique_set:\n        product = product * elem\n    print(product)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    \n    return unique_list[0]*unique_list[-1]\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from collections import Counter\n    return(reduce(lambda x,y: x*y, Counter(list_data).values()))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    for i in range(len(unique_list)):\n        unique_list[i] = unique_list[i]*len(list_data)\n    return unique_list\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) == 0:\n        return 1\n    else:\n        unique_data = list(set(list_data))\n        # print(unique_data)\n        return (int(product(*unique_data)))\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * r ** 2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    S = 2*math.pi*r*h + 2*math.pi*r**2\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*r*h + 2*pi*r**2\n    return surfacearea\n    \n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159265\n    surfacearea = 4*pi*(r**2)\n    return surfacearea\n    \n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = pi*r**2*h\n    return volume\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*pi*(r**3)\n    return volume\n    \n    \ndef surfacearea_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*l*w + 2*pi*w*h + 2*pi*h*l\n    return surfacearea\n    \n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*r*h + 2*pi*r**2\n    return surfacearea\n    \n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = pi*r**2*h\n    return volume\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*pi*(r**3)\n    return volume\n    \n    \ndef surfacearea_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*l*w + 2*pi*w*h + 2*pi*h*l\n    return surfacearea\n    \n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*r*h + 2*pi*r**2\n    return surfacearea\n    \n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = pi*r**2*h\n    return volume\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*pi*(r**3)\n    return volume\n    \n    \ndef surfacearea_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*l*w + 2*pi*w*h + 2*pi*h*l\n    return surfacearea\n    \n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*r*h + 2*pi*r**2\n    return surfacearea\n    \n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = pi*r**2*h\n    return volume\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*pi*(r**3)\n    return volume\n    \n    \ndef surfacearea_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*l*w + 2*pi*w*h + 2*pi*h*l\n    return surfacearea\n    \n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*r*h + 2*pi*r**2\n    return surfacearea\n    \n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = pi*r**2*h\n    return volume\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*pi*(r**3)\n    return volume\n    \n    \ndef surfacearea_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*l*w + 2*pi*w*h + 2*pi*h*l\n    return surfacearea\n    \n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*r*h + 2*pi*r**2\n    return surfacearea\n    \n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = pi*r**2*h\n    return volume\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*pi*(r**3)\n    return volume\n    \n    \ndef surfacearea_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*l*w + 2*pi*w*h + 2*pi*h*l\n    return surfacearea\n    \n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    surfacearea = 2*pi*r*h + 2*pi*r**2\n    return surfacearea\n    \n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    PI = 3.14159265\n    a = PI * r ** 2\n    b = 2 * PI * r * h\n    c = PI * r ** 2\n    d = 2 * PI * r * h\n    surface_area = a + b + c + d\n    print(f'The surface area of a cylinder with radius {r} and height {h} is {surface_area}')\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface_area = math.pi*r*r + 2*math.pi*r*h + 2*math.pi*r*h*h\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2*math.pi*r*(r+h)\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    return 2 * math.pi * r * h + 2 * math.pi * r * 2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*pi*r*h + 2*pi*r*2\n    return surfacearea\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*pi*r**2\n    return surfacearea"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in A:\n        if i not in B:\n            return False\n    return True\nprint(is_Sub_Array([2,3,4], [1,2,3]))\nprint(is_Sub_Array([1,2,3], [1,2,3]))\nprint(is_Sub_Array([2,3,4], [2,3]))\nprint(is_Sub_Array([1,2,3], [1]))\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def get_common_characters(A,B): \n        '''\n        Write a python function to find common characters in two strings.\n        '''\n        count=0\n        for i in range(len(A)):\n            for j in range(len(B)):\n                if A[i]==B[j]:\n                    count+=1\n        return count\n    if len(A)==0 or len(B)==0: \n        return False\n    if get_common_characters(A,B)>len(A):\n        return False\n    else: \n        return True\n    # Your code here\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(A)\n    m=len(B)\n    \n    for i in range(m-n+1):\n        for j in range(n):\n            if A[j]==B[i+j]:\n                continue\n            else:\n                break\n        if j==n-1:\n            return True\n    return False\nA = []\nB = [1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [1,2]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = [0,1,2,3,4,5]\nB = [0,1,2]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = [0,1,2,3,4,5]\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = [0,1,2,3,4,5]\nB = [0,1,2,3,4]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = [0,1,2,3,4,5]\nprint(\"The boolean value:\", is_Sub_Array(A,B))\nA = []\nB = []\nprint(\"The boolean value:\", is_Sub"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A or not B:\n        return False\n    if len(A)>len(B):\n        return False\n    if sorted(A)==sorted(B):\n        return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(i,len(A)):\n            if A[i:j+1]==B:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) <= len(A):\n        n = len(A)\n        m = len(B)\n        i = 0\n        j = 0\n        while (i < n and j < m):\n            if A[i] == B[j]:\n                i = i+1\n                j = j+1\n            else:\n                j = j+1\n        if j == m:\n            return True\n        return False\n    else:\n        n = len(B)\n        m = len(A)\n        i = 0\n        j = 0\n        while (i < n and j < m):\n            if A[i] == B[j]:\n                i = i+1\n                j = j+1\n            else:\n                i = i+1\n        if i == m:\n            return True\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(A)):\n        if A[i]==B:\n            print(i)\n            break\n        else:\n            if A[i]<B:\n                if A[i+1]==B:\n                    print(i+1)\n                    break\n                elif A[i+1]>B:\n                    continue\n            else:\n                print(-1)\n                break\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A[0]==B[0] or (B[0] in A and A[0] in A and len(A) == len(B)):\n        return True\n    return False\n    \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(n,0,-1):\n        fact *= i\n    return fact%10\nprint(last_Digit_Factorial(17))"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n <= 0: \n        print('Wrong input') \n        return -1\n    fact = 1\n    while(n > 0): \n        fact = fact*n \n        n = n-1\n    return int(str(fact)[len(str(fact))-1]) \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n % 10 * last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    import math\n    # Initializing a variable to store the last digit of the factorial\n    last_digit = 1\n    # Initializing a variable to store the number of digits of the factorial\n    n_digits = 1\n    # Initializing a variable to store the number of times the function is called\n    # i.e. the number of digits of the factorial\n    i = 0\n    # Initializing a variable to store the product of the digits of the factorial\n    total = 1\n    # Looping till the given number\n    while n >= 1: \n        # Adding the last digit to the variable\n        last_digit = last_digit * 10\n        # Adding one to the variable\n        i = i + 1\n        # Appending the last digit to the total variable\n        total = total + last_digit\n        # Appending the factorial of the last digit\n        last_digit = math.factorial(last_digit)\n        # Appending the factorial of the number of digits of the factorial\n        n_digits = n_digits + math.factorial(n)\n        # Checking if the total is divisible by the number of digits of the factorial\n        if total % n_digits == 0: \n            # If so, we divide the total by the number of digits of the factorial\n            total = total / n_digits\n            # Breaking the loop\n            break\n        # Reversing the value of the variable\n        last_digit = last_digit * 10\n        # Reversing the variable\n        total = total * 10\n    # Returning the last digit\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1;\n    if(n < 0):\n        n = -n;\n    while(n > 9):\n        fact = fact * 10;\n        n = n - 1;\n    return fact;\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n%10) * last_Digit_Factorial(n//10)\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return (n%10) * last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return (n%10)*last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact=fact*i\n    print(fact)\n    return fact%10\n    "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n - 1)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial*i\n    return factorial%10\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    for i in range(len(list1)):\n        list4.append(list1[i])\n        list4.append(list2[i])\n        list4.append(list3[i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    lst = []\n    i = j = k = 0\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    len1 = len(list1)\n    len2 = len(list2)\n    len3 = len(list3)\n    ans = []\n    for i in range(len1+len2+len3):\n        if i < len1:\n            ans.append(list1[i])\n        elif i >= len1 and i < len1+len2:\n            ans.append(list2[i - len1])\n        else:\n            ans.append(list3[i - len1 - len2])\n    return ans\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #create a new list to store all the elements in the interleaving of the lists\n    interleaved_list = []\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n    list3 = list3[::-1]\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1),len(list2),len(list3))):\n        result.extend([list1[i],list2[i],list3[i]])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == len(list2) == len(list3):\n        return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n    else:\n        print(\"Not all lists are of the same length\")\n        return None\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #Find the number of elements in each of the tuples and sort them.\n    no_of_el_in_test_tup1 = len(test_tup1)\n    no_of_el_in_test_tup2 = len(test_tup2)\n    test_tup1_sorted = sorted(test_tup1)\n    test_tup2_sorted = sorted(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n    \n    \n    \n    \ntest_tuple1 = (0, 1, 4, 5)\ntest_tuple2 = (0, 1, 3, 4)\nprint(find_dissimilar(test_tuple1, test_tuple2))"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list1 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            list1.append(test_tup1[i])\n    return list1\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    count = 0\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dist = 0\n    for i in range(len(test_tup1)):\n        dist += abs(test_tup1[i] - test_tup2[i])\n    return dist\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(set(test_tup1) - set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples don't have same number of elements\")\n        return\n    else:\n        set_tup1 = set(test_tup1)\n        set_tup2 = set(test_tup2)\n        return list(set_tup1.difference(set_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your Code here\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            count += 1\n    return count\n    "
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            new_tup = new_tup + (test_tup1[i],)\n    return new_tup\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # return list(set(test_tup1) - set(test_tup2)) + list(set(test_tup2) - set(test_tup1))\n    # return set(test_tup1) - set(test_tup2) + set(test_tup2) - set(test_tup1)\n    return list(set(test_tup1) - set(test_tup2)) + list(set(test_tup2) - set(test_tup1))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = [] \n    for i in test_tuple: \n        if even_fnc(i): \n            new_tuple.append(i) \n    return tuple(new_tuple) \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == tuple:\n            even_ele(test_tuple[i], even_fnc)\n        elif test_tuple[i]%2 == 1:\n            test_tuple[i] = even_fnc(test_tuple[i])\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_ele(i, even_fnc)\n        else:\n            if i%2==0:\n                even_fnc(i)\n            else:\n                continue\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a list for output\n    out_list = []\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, (tuple, list)): \n        # for loop in list, tuple,set\n        for i in test_tuple: \n            if not isinstance(i, (tuple, list, set, str)): \n                if not even_fnc(i): \n                    test_tuple = test_tuple[0:test_tuple.index(i)] + test_tuple[test_tuple.index(i)+1:]\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 0:\n        return test_tuple\n    else:\n        return even_ele(test_tuple[1:], even_fnc) if test_tuple[0] % 2 else even_ele(test_tuple[1:], even_fnc) + (test_tuple[0],)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 0:\n        return []\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if i%2 == 0:\n            even_list.append(i)\n    \n    return even_fnc(even_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for index in range(len(test_tuple)-1):\n        if test_tuple[index]!= even_fnc(test_tuple[index]):\n            return test_tuple[index]\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            result.append(even_ele(item, even_fnc))\n        else:\n            if not even_fnc(item):\n                result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #initializing variables\n    s_area=0\n    n=b*b\n    for i in range(0,s):\n        for j in range(i+1):\n            s_area=s_area+4*b*(n-j)\n    return s_area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2 * (b + s) + 4 * (s * s)) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base and height.\n    '''\n    return (1.5 * (h * b) + 2 * (h * h)) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * b)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 4 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 4 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base and height.\n    '''\n    return 2 * (b + h)\n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a triangle with a given base and height.\n    '''\n    return 0.5 * (b * h) \n    \ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid wit"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    b=float(b)\n    s=float(s)\n    h=float(h)\n    print(h)\n    s=s+(2*b)\n    # print(s)\n    surface_area = h*s\n    return surface_area\nprint(surface_Area(10,10))"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((s*s) + (b*b) + (2*(s*b))) / 2.0\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if(b>=0 and s>=0):\n        return(b*s*2)\n    else:\n        return(0)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math \n    def surfaceArea(b,s): \n        '''\n        :param b: length of the base \n        :type b: integer\n        :param s: height of the pyramid \n        :type s: integer\n        :return: surface area \n        :rtype: integer\n        '''\n        ans = 0\n        for i in range(s):\n            ans += math.sqrt(b**2 - 2*b*math.cos(math.pi/s) - 2*math.sin(math.pi/s)**2)\n            ans += (b - ans) * 2\n        return (ans * 2 + 4 * s)\n    print(surfaceArea(b,s))\n    "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = float(s)\n    area = (s*s)/2\n    print(\"The surface area of the pyramid is:\",area)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # function to calculate area of square pyramid \n    def square_pyramid_area(b,h):\n        return (b**2)*h\n    # function to calculate surface area of square pyramid\n    def square_pyramid_surface_area(b,h):\n        return (b**2)*((b**2)*h)/2\n    # function to calculate surface area of circular pyramid\n    def circular_pyramid_surface_area(r):\n        return (3.14*r**2)/4\n    # function to calculate surface area of square pyramid\n    def square_pyramid_circular_surface_area(r):\n        return (3.14*(r**2))\n    # function to find surface area of square pyramid\n    def square_pyramid_surface_area(b,h):\n        return square_pyramid_area(b,h)\n    # function to find surface area of square pyramid\n    def square_pyramid_circular_surface_area(r):\n        return square_pyramid_circular_surface_area(r)\n    # function to find surface area of circular pyramid\n    def circular_pyramid_surface_area(r):\n        return circular_pyramid_surface_area(r)\n    # function to find surface area of square pyramid\n    def square_pyramid_circular_surface_area(r):\n        return square_pyramid_circular_surface_area(r)\n    # function to calculate surface area of rectangular pyramid\n    def rectangular_pyramid_area(l,w):\n        return l*w\n    # function to calculate surface area of rectangular pyramid\n    def rectangular_pyramid_surface_area(l,w):\n        return (l*w)*2\n    # function to calculate surface area of circular pyramid\n    def circular_pyramid_area(r):\n        return (2*3.14*(r**2))\n    # function to calculate surface area of circular pyramid\n    def circular_pyramid_surface_area(r):\n        return (2*3.14*(r**2))\n    # function to calculate surface area of rectangular pyramid\n    def rectangular_pyramid_surface_area(l,w):\n        return (l*w)*2\n    # function to calculate surface area of rectangular pyramid\n    def rectangular_pyramid_circular_surface_area(r):\n        return (2*3.14*(r**2))\n    # function to find surface area of rectangular pyramid\n    def rectangular_pyramid_surface_area(l,w):\n        return rectangular_pyramid_area(l,w)\n    # function to find surface area of rectangular pyramid\n    def rectangular_pyramid_circular_surface_area(r):\n        return rectangular_pyramid_circular_surface_area(r)\n    # function to calculate surface area of circular pyramid\n    def circular_pyramid_surface_area(r):\n        return circular_pyramid_area(r)\n    # function to calculate surface area of circular pyramid\n    def circular_pyramid_circular_surface_area(r):\n        return circular_pyramid_circular_surface_area(r)\n    # function to find surface area of circular pyramid\n    def circular_pyramid_surface_area(r):\n        return circular_pyramid_surface_area(r)\n    # function to find surface area of circular pyramid\n    def circular_pyramid_circular_surface_area(r):\n        return circular_pyramid_circular_surface_area(r)\n    # function to calculate surface area of equilateral triangle\n    def equilateral_triangle_area(l):\n        return l*(3**0.5)\n    # function to calculate surface area of equilateral triangle\n    def equilateral_triangle_surface_area(l):\n        return (l*(3**0.5))*2\n    # function to calculate surface area of equilateral triangle\n    def equilateral_triangle_circular_surface_area(r):\n        return (3*r**2)/4\n    # function to calculate surface area of equilateral triangle\n    def equilateral_triangle_circular_surface_area(r):\n        return (3*r**2)/4\n    # function to calculate surface area of equilateral triangle\n    def equilateral_triangle_surface_area(l):\n        return equilateral_triangle_area(l)\n    # function to calculate surface area of equilateral triangle\n    def equilateral_triangle_circular_surface_area(r):\n        return equilateral_triangle_circular_surface_area(r)\n    # function to find surface area of equilateral triangle\n    def equilateral_triangle_surface_area(l):\n        return equilateral_triangle_area(l)\n    # function to find surface area of equilateral triangle\n    def equilateral_triangle_circular_surface_area(r):\n        return equilateral_triangle_circular_surface_area(r)\n    # function to calculate surface area of equilateral triangle\n    def equilateral_triangle_circular_surface_area(r):\n        return equilateral_triangle_circular_surface_area(r)\n    # function to calculate surface area of equilateral triangle\n    def equilateral_triangle_surface_area(l):\n        return equilateral_triangle_area(l)\n    # function to calculate surface area of equilateral triangle\n    def equilateral_triangle_circular_surface_area(r):\n        return equilateral_triangle_circular_surface_area(r)\n    # function to calculate surface area of trapezoid\n    def trapezoid_area(a,b,h):\n        return (a+b)*h/2\n    # function to calculate surface area of trapezoid\n    def trapezoid_surface_area(a,b,h):\n        return (a+b)*h\n    # function to calculate surface area of trapezoid\n    def trapezoid_circular_surface_area(r):\n        return (2*(3.14*(r**2)))/4\n    # function to calculate surface area of trapezoid\n    def trapezoid_circular_surface_area(r):\n        return (2*(3.14*(r**2)))/4\n    # function to calculate surface area of trapezoid\n    def trapezoid_surface_area(a,b,h):\n        return trapezoid_area(a,b,h)\n    # function to calculate surface area of trapezoid\n    def trapezoid_circular_surface_area(r):\n        return trapezoid_circular_surface_area(r)\n    # function to calculate surface area of trapezoid\n    def trapezoid_circular_surface_area(r):\n        return trapezoid_circular_surface_area(r)\n    # function to calculate surface area of trapezoid\n    def trapezoid_surface_area(a,b,h):\n        return trapezoid_area(a,b,h)\n    # function to calculate surface area of trapezoid\n    def trapezoid_circular_surface_area(r):\n        return trapezoid_circular_surface_area(r)\n    # function to find surface area of trapezoid\n    def trapezoid_surface_area(a,b,h):\n        return trapezoid_area(a,b,h)\n    # function to find surface area of trapezoid\n    def trapezoid_circular_surface_area(r):\n        return trapezoid_circular_surface_area(r)\n    # function to find surface area of trapezoid\n    def trapezoid_circular_surface_area(r):\n        return trapezoid_circular_surface_area(r)\n    # function to find surface area of trapezoid\n    def trapezoid_surface_area(a,b,h):\n        return trapezoid_area(a,b,h)\n    # function to find surface area of trapezoid\n    def trapezoid_circular_surface_area(r):\n        return trapezoid_circular_surface_area(r)\n    # function to find surface area of trapezoid\n    def trapezoid_circular_surface_area(r):\n        return trapezoid_circular_surface_area(r)\n    # function to calculate surface area of square pyramid\n    def square_pyramid_area(b,h):\n        return (b**2)*h\n    # function to calculate surface area of square pyramid\n    def square_pyramid_surface_area(b,h):\n        return (b**2)*h\n    # function to calculate surface area of squar"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s*(b+s)*0.5)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h = s/b\n    if b <= 0 or s <= 0 or h <= 0:\n        raise Exception('Invalid values of inputs')\n    print('Surface Area = {:.2f}'.format(b*s*h/2))\n    print('Total Surface Area = {:.2f}'.format(b*s*(h+1)))\n    return\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print('The dictionary is empty')\n    else:\n        print('The dictionary is not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    def binomial_coefficient(n,k):\n        '''\n        This is a recursion method\n        '''\n        if k > n:\n            return 0\n        elif k == n:\n            return 1\n        else:\n            return binomial_coefficient(n-1, k) + binomial_coefficient(n-1, k-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = []\n    for i in range(num):\n        res.append(catalan_number_recursive(i))\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num < 0:\n        return 0\n    if num == 0:\n        return 1\n    else:\n        return (catalan_number(num - 1)*num)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 0\n    else:\n        catalan = 1\n        for i in range(1, num+1):\n            catalan = catalan*(2*i-1)/i\n        return catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # first idea:\n    # we have:\n    # 1. catalan numbers from 1 to n\n    # 2. sum(i) = sum(i-1) + sum(i-2)\n    # so we can't just sum them up because the first number is 1\n    # so we have to solve a recurrence relation\n    # the relation is:\n    # 1. 1/n*(1-1/n)*(1-2/n) + 2*(n-1)/n*(1-n)*(1-n) = 1/n^2*(1-1/n)*(1-2/n) + 2*n*(n-1)/n^2*(1-n) = 1/n^3*(1-1/n)*(1-2/n) + n*(n-1)/n^3*(1-n) = 1/n^4*(1-1/n)*(1-2/n) + n^2*(n-1)/n^4*(1-n)\n    # so we can solve for the first number\n    # 1/n^2*(1-1/n)*(1-2/n) + n*(n-1)/n^3*(1-n)\n    # = 1/n^2*(1-1/n)*(1-2/n) + 1/(n*(n-1)/n^2)*(1-n) = 1/n^3*(1-1/n)*(1-2/n) + 1/(n^2*(n-1)/n^3)*(1-n)\n    # so we can solve for the second number\n    # 1/n^2*(1-1/n)*(1-2/n) + n*(n-1)/n^3*(1-n)\n    # = 1/n^3*(1-1/n)*(1-2/n) + 1/(n^2*(n-1)/n^3)*(1-n) = 1/(n^3*(n-1)/n^4)*(1-1/n)*(1-2/n) + 1/(n^3*(n-1)/n^4)*(1-n)\n    # so we can solve for the third number\n    # 1/n^3*(1-1/n)*(1-2/n) + n*(n-1)/n^4*(1-n)\n    # = 1/(n^4*(n-1)/n^5)*(1-1/n)*(1-2/n) + 1/(n^4*(n-1)/n^5)*(1-n)\n    # so we can solve for the fourth number\n    # 1/(n^5*(n-1)/n^6)*(1-1/n)*(1-2/n) + n*(n-1)/n^6*(1-n)\n    # = 1/(n^6*(n-1)/n^7)*(1-1/n)*(1-2/n) + 1/(n^6*(n-1)/n^7)*(1-n)\n    # so we can solve for the fifth number\n    # 1/(n^7*(n-1)/n^8)*(1-1/n)*(1-2/n) + n*(n-1)/n^8*(1-n)\n    # = 1/(n^8*(n-1)/n^9)*(1-1/n)*(1-2/n) + 1/(n^8*(n-1)/n^9)*(1-n)\n    # so we can solve for the sixth number\n    # 1/(n^9*(n-1)/n^10)*(1-1/n)*(1-2/n) + n*(n-1)/n^10*(1-n)\n    # = 1/(n^10*(n-1)/n^11)*(1-1/n)*(1-2/n) + 1/(n^10*(n-1)/n^11)*(1-n)\n    # so we can solve for the seventh number\n    # 1/(n^11*(n-1)/n^12)*(1-1/n)*(1-2/n) + n*(n-1)/n^12*(1-n)\n    # = 1/(n^12*(n-1)/n^13)*(1-1/n)*(1-2/n) + 1/(n^12*(n-1)/n^13)*(1-n)\n    # so we can solve for the eighth number\n    # 1/(n^13*(n-1)/n^14)*(1-1/n)*(1-2/n) + n*(n-1)/n^14*(1-n)\n    # = 1/(n^14*(n-1)/n^15)*(1-1/n)*(1-2/n) + 1/(n^14*(n-1)/n^15)*(1-n)\n    # so we can solve for the ninth number\n    # 1/(n^15*(n-1)/n^16)*(1-1/n)*(1-2/n) + n*(n-1)/n^16*(1-n)\n    # = 1/(n^16*(n-1)/n^17)*(1-1/n)*(1-2/n) + 1/(n^16*(n-1)/n^17)*(1-n)\n    # so we can solve for the tenth number\n    # 1/(n^17*(n-1)/n^18)*(1-1/n)*(1-2/n) + n*(n-1)/n^18*(1-n)\n    # = 1/(n^18*(n-1)/n^19)*(1-1/n)*(1-2/n) + 1/(n^18*(n-1)/n^19)*(1-n)\n    # so we can solve for the eleventh number\n    # 1/(n^19*(n-1)/n^20)*(1-1/n)*(1-2/n) + n*(n-1)/n^20*(1-n)\n    # = 1/(n^20*(n-1)/n^21)*(1-1/n)*(1-2/n) + 1/(n^20*(n-1)/n^21)*(1-n)\n    # so we can solve for the twelfth number\n    # 1/(n^21*(n-1)/n^22)*(1-1/n)*(1-2/n) + n*(n-1)/n^22*(1-n)\n    # = 1/(n^22*(n-1)/n^23)*(1-1/n)*(1-2/n) + 1/(n^22*(n-1)/n^23)*(1-n)\n    # so we can solve for the thirteenth number\n    # 1/(n^23*(n-1)/n^24)*(1-1/n)*(1-2/n) + n*(n-1)/n^24*(1-n)\n    # = 1/(n^24*(n-1)/n^25)*(1-1/n)*(1-2/n) + 1/(n^24*(n-1)/n^25)*(1-n)\n    # so we can solve for the fourth number\n    # 1/(n^25*(n-1)/n^26)*(1-1/n)*(1-2/n) + n*(n-1)/n^26*(1-n)\n    # = 1/(n^26*(n-1)/n^27)*(1-1/n)*(1-2/n) + 1/(n^26*(n-1)/n^27)*(1-n)\n    # so we can solve for the fifth number\n    # 1/(n^27*(n-1)/n^28)*(1-1/n)*(1-2/n) + n*(n-1)/n^28*(1-n)\n    # = 1/(n^28*(n-1)/n^29)*(1-1/n)*(1-2/n) + 1/(n^28*(n-1)/n^29)*(1-n)\n    # so we can solve for the sixth number\n    # "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    n = num\n    t = 0\n    while (n):\n        t += catalan_number(n - 1) * (n - 1)\n        n -= 1\n    return t\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1)*catalan_number(num-2)\n    \n    "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 1\n    \n    result = 0\n    for i in range(num):\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    \n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # your code here\n    adverbs=[]\n    for i in range(len(text)):\n        if text[i]=='a':\n            if text[i-1]==' ':\n                if text[i+1]=='r':\n                    if text[i+2]=='y' and text[i+3]==' ':\n                        adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    text = text.split(\" \")\n    for i in range(len(text)-1, -1, -1):\n        if text[i][-1] == 'ly':\n            adverbs.append(text[i])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_list = []\n    pattern = r'(?<=\\b)(ly)\\b'\n    found_adverb = re.findall(pattern,text)\n    adverb_list = sorted(set(found_adverb))\n    return adverb_list\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r'(?<=ly )\\w*'\n    return re.findall(regex, text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'ly(.)*', text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    adverbs = re.findall(r'ly',text)\n    return adverbs\ndef find_proper_nouns(text):\n    '''\n    Write a function to find the first proper noun (NNP) ending with a \u2018s\u2019 and its positions in a given string.\n    '''\n    text = text.lower()\n    proper_nouns = re.findall(r'nnp',text)\n    return proper_nouns\ndef find_adjectives(text):\n    '''\n    Write a function to find all adjectives ending with an \u2018s\u2019 and their positions in a given string.\n    '''\n    text = text.lower()\n    adjectives = re.findall(r'js',text)\n    return adjectives\ndef find_verb_endings_present(text):\n    '''\n    Write a function that determines the first verb ending with a \u2018ing\u2019 that is followed by a proper noun,\n    and is present and followed by a proper noun.\n    '''\n    text = text.lower()\n    verbs = re.findall(r'ing$',text)\n    present_noun = re.findall(r'n[ps]$',text)\n    if present_noun:\n        return verbs,present_noun\n    else:\n        return verbs\ndef find_prepositions(text):\n    '''\n    Write a function that determines the first preposition ending with a \u2018ing\u2019 and returns its positions\n    in a given string.\n    '''\n    text = text.lower()\n    prepositions = re.findall(r'ing$',text)\n    return prepositions\ndef find_proper_nouns_and_verbs(text):\n    '''\n    Write a function that finds the first noun ending with a \u2018s\u2019, and then the next proper noun,\n    and then the first verb ending with a \u2018ing\u2019 and returns the positions of these 3 elements in a given string.\n    '''\n    text = text.lower()\n    text = re.sub(r'\\n',r'',text)\n    text = re.sub(r'\\.',r'',text)\n    nouns = re.findall(r'n[ps]s',text)\n    pronouns = re.findall(r'[a-z]n[ps]$',text)\n    verbs = re.findall(r'v[ing]e$',text)\n    if nouns:\n        return nouns,pronouns,verbs\n    else:\n        return nouns,pronouns\ndef find_unique_noun_types(text):\n    '''\n    Write a function that finds all nouns ending with an \u2018s\u2019, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next noun, and then the next noun,\n    and then the next noun, and then the next noun, and then the next noun, and then the next nou"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Get all the adverbs in the text\n    adverbs = re.findall('(?<=\\W)[Ll]y', text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    regex = r'[A-Za-z0-9]*ly'\n    if re.search(regex, text):\n        for i in re.finditer(regex, text):\n            result.append((i.start(), i.end()))\n        return result\n    else:\n        return []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ad_verbs = []\n    n = 0\n    while n < len(text) - 1:\n        if text[n:n + 3] == \"ly\" and n > 0:\n            ad_verbs.append(text[n - 1:n + 3])\n        n += 1\n    return ad_verbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for match in re.finditer(r\"(\\w+ly)$\", text):\n        start = match.start()\n        end = match.end()\n        result.append(start)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items) <= 1:\n        return items\n    elif len(items) == 2:\n        if items[0][1] > items[1][1]:\n            return items[0]\n        else:\n            return items[1]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for k,v in items.items():\n        heapq.heappush(heap,(v,k))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return [(k,v) for v,k in heap]\nprint(expensive_items({'A':10,'B':1,'C':100,'D':1,'E':10},2))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    e = []\n    for i in range(n):\n        heapq.heappush(e,items[i])\n        print(e)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,(i[0],i[1]))\n    top_n = heap[0:n]\n    print(top_n)\n    return top_n\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # items = [\n    #     ('item1', 3),\n    #     ('item2', 5),\n    #     ('item3', 1),\n    #     ('item4', 8),\n    #     ('item5', 7),\n    # ]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    m=[]\n    for i in items:\n        m.append(i[0])\n    k=min(m)\n    z=0\n    while k<n:\n        for i in items:\n            if i[0]==k:\n                z+=1\n        k+=1\n    return z\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items by value, descending, and keep the n largest\n    sorted_items = sorted(items, key=lambda x: x['value'], reverse=True)[:n]\n    return sorted_items\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    for item in items:\n        if item[1]>=n:\n            result.append(item)\n            \n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    expensive_items = {}\n    for item in items:\n        expensive_items[item] = expensive_items.get(item,0) + items[item]\n    expensive_items = dict(sorted(expensive_items.items(), key = lambda x: x[1]))\n    expensive_items = dict(expensive_items.items()[-n:])\n    return expensive_items\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_heap = []\n    \n    for i in range(n):\n        heapq.heappush(max_heap,(-1*items[i],items[i]))\n        \n    print(max_heap)\n    \n    while len(max_heap) > 1:\n        heapq.heappush(max_heap,(-1*heapq.heappop(max_heap)[1],heapq.heappop(max_heap)[1]))\n    return max_heap[0][1]\n    \ndef knapsack(items, capacity):\n    '''\n    Write a function to find the maximum value that can be put in a knapsack of a given size.\n    '''\n    value = 0\n    weight = 0\n    dp = [[0 for x in range(capacity+1)] for x in range(len(items))]\n    \n    for i in range(len(dp)):\n        for j in range(capacity+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif items[i][0] <= j:\n                dp[i][j] = max(dp[i-1][j], items[i][1] + dp[i-1][j-items[i][0]])\n                value = dp[i][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n            \n    return value\n    \ndef find_max(arr,n):\n    '''\n    Write a function to find the maximum element of a given array.\n    '''\n    max_val = -1\n    \n    for i in range(n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val\n    \ndef find_max_subarray(arr):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_val = -1\n    curr_sum = 0\n    \n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum > max_val:\n            max_val = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_val\n    \ndef find_max_crossing_subarray(arr,low,mid,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    curr_sum = -1\n    max_sum = -1\n    \n    left_sum = -1\n    right_sum = -1\n    \n    for i in range(mid,low-1,-1):\n        curr_sum = arr[i] + left_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        left_sum = curr_sum\n        \n    \n    for i in range(mid+1,high+1):\n        curr_sum = arr[i] + right_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        right_sum = curr_sum\n        \n    return max_sum\n    \ndef max_subarray(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_2(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_3(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_4(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_5(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_6(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_7(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_8(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_9(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_10(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1\n    curr_sum = -1\n    \n    for i in range(low,high+1):\n        curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum\n    \ndef max_subarray_11(arr,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray in a given array.\n    '''\n    max_sum = -1"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l)>0:\n        return l[:n] + l[n:][::-1]\n    else:\n        return []\n    \ndef remove_substring(s, r):\n    '''\n    Write a python function to remove a sub string from the input string.\n    '''\n    if r in s:\n        return s.replace(r,\"\")\n    else:\n        return s\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    size = len(l)\n    if size == 0:\n        return []\n    return l[:size - n] + l[size - n + 1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n==0:\n        return []\n    else:\n        return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if not isinstance(l, list):\n        raise TypeError('input must be list')\n    if n <= 0 or n >= len(l):\n        raise ValueError('n must be greater than 0 and less than length of the list')\n    if n == 1:\n        return l\n    return l[:n] + l[n-1:] + l[:n-1]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, len(l)):\n        if i== n-1:\n            x = l.pop(i)\n            l.append(x)\n            break\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = len(l)\n    for i in range(n):\n        l = l[1:] + [l[0]]\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    n = int(n)\n    if len(l)<=n:\n        return l\n    else:\n        if l[0]==l[-1]:\n            return l\n        else:\n            return l[0:-1]+[l[-1]]\nprint(split_Arr([1,2,3,4,5],2))\nprint(split_Arr([1,2,3,4,5],2))\nprint(split_Arr([1,2,3,4,5],4))\nprint(split_Arr([1,2,3,4,5],5))\nprint(split_Arr([1,2,3,4,5],6))\nprint(split_Arr([1,2,3,4,5],7))\nprint(split_Arr([1,2,3,4,5],8))\nprint(split_Arr([1,2,3,4,5],9))\nprint(split_Arr([1,2,3,4,5],10))\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    if len(l) % n == 0:\n        return l[:int(len(l) / n)] + l[int(len(l) / n) * n:]\n    else:\n        return l[:int(len(l) / n) * n] + l[int(len(l) / n) * n + 1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l)>n:\n        return l[:n]+l[n:]\n    else:\n        return l\nprint(split_Arr([3, 4, 5, 6, 7, 8], 3))\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(type(listx))\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(type(listx))\n    for x in range(0, len(listx)):\n        print(listx[x])\n        tuplex = tuple(listx)\n    print(\"Tuple of list : \", tuplex)\n    return tuplex\nlistx = [1, 2, 3]\nlistx = list_tuple(listx)\nprint(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return nums\n    \n    result = max(nums) - min(nums)\n    return result\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = len(nums)\n    if l == 0:\n        return None\n    if l == 1:\n        return nums[0]\n    \n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    diff = abs(nums[-1] - nums[0])\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big, small = float('inf'), float('-inf')\n    for num in nums:\n        if num > big:\n            big = num\n        if num < small:\n            small = num\n    return big - small\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = -1\n    smallest = 2**32\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return largest - smallest\n    \nprint(big_diff([10, 4, 2, 3]))  # 3\nprint(big_diff([2, 11, 9, 0]))  # 3\nprint(big_diff([2, 11, -9, 0]))  # 1\nprint(big_diff([10, 4, -2, 3]))  # 3\nprint(big_diff([10, -4, 2, 3]))  # 1\nprint(big_diff([-2, -11, -9, -0]))  # -3\nprint(big_diff([10, 0, 2, 3]))  # 2\nprint(big_diff([10, 10, 2, 3]))  # 0\nprint(big_diff([-2, -11, -9, -0]))  # -3\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = b\n    y = a\n    while (x - y) >= 0:\n        z = x**2\n        if z == y:\n            print(x, \"is a perfect square\")\n        x -= 1\n    x = b\n    y = a\n    while (x - y) >= 0:\n        z = y**2\n        if z == x:\n            print(x, \"is a perfect square\")\n        y -= 1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return (a + b) - (a*b)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = b\n    y = a\n    while y > 0:\n        if y % x == 0:\n            return x\n        x -= 1\n        y -= 1\n    return False\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = max(a,b)\n    while n % 2 == 0:\n        n //= 2\n    print(n)\n    return n\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return a**2 + b**2 == (a+b)**2\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        sq = i * i\n        if sq == i:\n            print(i, end = \" \")\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # first half of the answer\n    i = a\n    while i < b:\n        j = i ** 0.5\n        if int(j) ** 2 == i:\n            print(i)\n        i += 1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #use the formula sqrt(n*n)\n    if (a < b):\n        if a**(1/2) == int(a**(1/2)):\n            return True\n        else:\n            return False\n    elif (b**(1/2) == int(b**(1/2))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def is_perfect_square(n):\n        if n < 0:\n            return False\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for x in range(a, b):\n        for y in range(x + 1, b):\n            sum_xy = x * y\n            if sum_xy < b:\n                if (sum_xy ** 0.5) - int(sum_xy ** 0.5) == 0:\n                    result.append(sum_xy)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*x+y*y, sqrt(x*x+y*y)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    t = cmath.atan2(y,x)\n    return r,t\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = ((x**2 + y**2)**0.5)\n    theta = cmath.acos(y / r)\n    print(x,y,r,theta)\n    return (r * cmath.cos(theta), r * cmath.sin(theta))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.cos(y), y*cmath.sin(y)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    return f\ndef norm(x):\n    '''\n    Write a function to find the norm of a complex number.\n    '''\n    c = x.real\n    d = x.imag\n    e = c**2+d**2\n    return e**0.5\ndef rect_rect(a,b):\n    '''\n    Write a function to find the Euclidean distance between two points.\n    '''\n    f = ((a[0]-b[0])**2 + (a[1]-b[1])**2)**0.5\n    return f\ndef rect_polar(x,y):\n    '''\n    Write a function to convert a rectangular coordinate to polar coordinates.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    return f, c\ndef rect_rect_angle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    c = ((a[0]-b[0])**2 + (a[1]-b[1])**2)**0.5\n    return c\ndef rect_polar_angle(x,y):\n    '''\n    Write a function to find the angle between two rectangles.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    g = y*f\n    g = g**0.5\n    h = x*g\n    h = h**0.5\n    i = g+h\n    i = i**0.5\n    return i\ndef polar_rect_angle(x,y):\n    '''\n    Write a function to find the angle between two polar coordinates.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    g = y*f\n    g = g**0.5\n    h = x*g\n    h = h**0.5\n    i = g+h\n    i = i**0.5\n    return i\ndef polar_rect_distance(x,y):\n    '''\n    Write a function to find the distance between two polar coordinates.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    g = y*f\n    g = g**0.5\n    h = x*g\n    h = h**0.5\n    i = g+h\n    i = i**0.5\n    return i\ndef rect_rect_distance(a,b):\n    '''\n    Write a function to find the distance between two rectangles.\n    '''\n    c = ((a[0]-b[0])**2 + (a[1]-b[1])**2)**0.5\n    return c\ndef rect_rect_slope(a,b):\n    '''\n    Write a function to find the slope between two rectangles.\n    '''\n    c = ((a[0]-b[0])**2 + (a[1]-b[1])**2)**0.5\n    return c\ndef rect_rect_intersect(a,b):\n    '''\n    Write a function to find the intersection between two rectangles.\n    '''\n    c = ((a[0]-b[0])**2 + (a[1]-b[1])**2)**0.5\n    return c\ndef circle_circle(x,y,a,b):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    g = 2*a*(f**2)\n    h = 2*b*(f**2)\n    h = h-g\n    i = g+h\n    i = i**0.5\n    return i\ndef circle_polar(x,y):\n    '''\n    Write a function to find the polar coordinates of a circle.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    g = 2*a*(f**2)\n    h = 2*b*(f**2)\n    h = h-g\n    i = g+h\n    i = i**0.5\n    j = y*i\n    j = j**0.5\n    k = x*j\n    k = k**0.5\n    return k, i\ndef circle_rect(x,y,a,b):\n    '''\n    Write a function to find the rectangular coordinates of a circle.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    g = 2*a*(f**2)\n    h = 2*b*(f**2)\n    h = h-g\n    i = g+h\n    i = i**0.5\n    j = y*i\n    j = j**0.5\n    k = x*j\n    k = k**0.5\n    return k, j\ndef circle_rect_angle(x,y,a,b):\n    '''\n    Write a function to find the angle between two circles.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    g = 2*a*(f**2)\n    h = 2*b*(f**2)\n    h = h-g\n    i = g+h\n    i = i**0.5\n    j = y*i\n    j = j**0.5\n    k = x*j\n    k = k**0.5\n    l = y*k\n    l = l**0.5\n    m = x*l\n    m = m**0.5\n    n = c**2-l**2-m**2\n    n = n**0.5\n    return m\ndef circle_rect_distance(x,y,a,b):\n    '''\n    Write a function to find the distance between two circles.\n    '''\n    c = ((x-a)**2 + (y-b)**2)**0.5\n    return c\ndef circle_polar_angle(x,y):\n    '''\n    Write a function to find the angle between two circles.\n    '''\n    a = x*x\n    b = y*y\n    c = a+b\n    c = c**0.5\n    d = 2*a\n    e = 2*b\n    e = e**0.5\n    f = d/e\n    g = 2*a*(f**2)\n    h = 2*b*(f**2)\n    h = h-g\n    i = g+h\n    i = i**0.5\n    j = y*i\n    j = j**0.5\n    k = x*j\n    k = k**0.5\n    return k\ndef circle_rect_s"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(y/r)\n    a = r*theta\n    if x < 0 and y < 0:\n        a = a + cmath.pi\n    if x < 0 and y > 0:\n        a = a + 2*cmath.pi\n    if x > 0 and y < 0:\n        a = a + cmath.pi\n    if x > 0 and y > 0:\n        a = a + 2*cmath.pi\n    a = a * 180 / cmath.pi\n    if a >= 360:\n        a = a - 360\n    if a <= 0:\n        a = a + 360\n    return(a)\ndef rect_polar(a):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = a/180 * cmath.cos(cmath.acos(a/180))\n    y = a/180 * cmath.sin(cmath.acos(a/180))\n    return(x,y)\ndef rect_polar2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(y/r)\n    a = r*theta\n    if x < 0 and y < 0:\n        a = a + cmath.pi\n    if x < 0 and y > 0:\n        a = a + 2*cmath.pi\n    if x > 0 and y < 0:\n        a = a + cmath.pi\n    if x > 0 and y > 0:\n        a = a + 2*cmath.pi\n    a = a * 180 / cmath.pi\n    if a >= 360:\n        a = a - 360\n    if a <= 0:\n        a = a + 360\n    return(a)\ndef rect_polar3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(y/r)\n    a = r*theta\n    if x < 0 and y < 0:\n        a = a + cmath.pi\n    if x < 0 and y > 0:\n        a = a + 2*cmath.pi\n    if x > 0 and y < 0:\n        a = a + cmath.pi\n    if x > 0 and y > 0:\n        a = a + 2*cmath.pi\n    a = a * 180 / cmath.pi\n    if a >= 360:\n        a = a - 360\n    if a <= 0:\n        a = a + 360\n    return(a)\ndef polar_rect2(a):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = a/180 * cmath.cos(cmath.acos(a/180))\n    y = a/180 * cmath.sin(cmath.acos(a/180))\n    return(x,y)\ndef polar_rect3(a):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = a**2\n    theta = cmath.acos(a/r)\n    a = r*theta\n    if a < 0:\n        a = a + cmath.pi\n    if a > 0:\n        a = a + 2*cmath.pi\n    return(a)\ndef polar_rect4(a):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = a**2\n    theta = cmath.acos(a/r)\n    a = r*theta\n    if a < 0:\n        a = a + cmath.pi\n    if a > 0:\n        a = a + 2*cmath.pi\n    a = a * 180 / cmath.pi\n    if a >= 360:\n        a = a - 360\n    if a <= 0:\n        a = a + 360\n    return(a)\ndef rect_polar4(a):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = a/180 * cmath.cos(cmath.acos(a/180))\n    y = a/180 * cmath.sin(cmath.acos(a/180))\n    return(x,y)\ndef rect_polar5(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a = cmath.atan2(y,x)\n    a = a * 180 / cmath.pi\n    if x < 0 and y < 0:\n        a = a + cmath.pi\n    if x < 0 and y > 0:\n        a = a + 2*cmath.pi\n    if x > 0 and y < 0:\n        a = a + cmath.pi\n    if x > 0 and y > 0:\n        a = a + 2*cmath.pi\n    a = a * 180 / cmath.pi\n    if a >= 360:\n        a = a - 360\n    if a <= 0:\n        a = a + 360\n    return(a)\ndef polar_rect5(a):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = a/180 * cmath.cos(cmath.acos(a/180))\n    y = a/180 * cmath.sin(cmath.acos(a/180))\n    return(x,y)\ndef polar_rect6(a):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = a**2\n    theta = cmath.acos(a/r)\n    a = r*theta\n    if a < 0:\n        a = a + cmath.pi\n    if a > 0:\n        a = a + 2*cmath.pi\n    a = a * 180 / cmath.pi\n    if a >= 360:\n        a = a - 360\n    if a <= 0:\n        a = a + 360\n    return(a)\ndef rect_polar6(a):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = a/180 * cmath.cos(cmath.acos(a/180))\n    y = a/180 * cmath.sin(cmath.acos(a/180))\n    return(x,y)\ndef rect_polar7(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(y/r)\n    a = r*theta\n    if x < 0 and y < 0:\n        a = a + cmath.pi\n    if x < 0 and y > 0:\n        a = a + 2*cmath.pi\n    if x > 0 and y < 0:\n        a = a + cmath.pi\n    if x > 0 and y > 0:\n        a = a + 2*cmath.pi\n    a = a * 180 / cmath.pi\n    if a >= 360:\n        a = a - 360\n    if a <= 0:\n        a = a + 360\n    return(a)\ndef polar_rect7(a):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = a/180 * cmath.cos(cmath.acos(a/180))\n    y = a/180 * cmath.sin(cmath.acos(a/180))\n    return(x,y)\ndef rect_polar8(a):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = a**2\n    theta = cmath.acos(a/r)\n    a = r*theta\n    if a < 0:\n        a = a + cmath.pi\n    if a > 0:\n        a = a + 2*cmath.pi\n    a = a * 180 / cmath.pi\n    if a >= 360:\n        a = a - 360\n    if a <= 0:\n        a = a + 360\n    return(a)\ndef polar_rect8(a):\n    '''\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    if r>=1:\n        return (2*(x**2-y**2),2*x*y)\n    else:\n        return (0,0)\ndef rect_polar(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (r*cmath.cos(theta),r*cmath.sin(theta))\ndef rect_circle(x,y,r):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    return (x+(r/2),y+(r/2))\ndef circle_rect(x,y,r):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    return (r*(2*x-(2*x*r**2+y*r**2)),r*(2*y-(2*x*r**2+y*r**2)))\ndef rect_circ(r,x,y):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    return (x+r*cmath.sin(2*cmath.pi/3),y+r*cmath.cos(2*cmath.pi/3))\ndef rect_rect(x1,y1,r1,x2,y2,r2):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    center=(x1+(x2-x1)/2,y1+(y2-y1)/2)\n    print(center)\n    return (center[0]+r1*cmath.sin(2*cmath.pi/3),center[1]+r1*cmath.cos(2*cmath.pi/3))\ndef rect_rect_inter(x1,y1,r1,x2,y2,r2):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (b[0],b[1])\ndef rect_rect_union(x1,y1,r1,x2,y2,r2):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (a[0],a[1])\ndef rect_rect_inter_union(x1,y1,r1,x2,y2,r2,x3,y3,r3):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (a[0],a[1])\ndef rect_rect_dis(x1,y1,r1,x2,y2,r2):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (a[0],a[1])\ndef rect_rect_dis_union(x1,y1,r1,x2,y2,r2):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (a[0],a[1])\ndef rect_rect_dis_union_rect_dis(x1,y1,r1,x2,y2,r2,x3,y3,r3):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (a[0],a[1])\ndef rect_rect_dis_union_rect_dis_union(x1,y1,r1,x2,y2,r2,x3,y3,r3,x4,y4,r4):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (a[0],a[1])\ndef rect_rect_dis_union_rect_dis_union_rect_dis(x1,y1,r1,x2,y2,r2,x3,y3,r3,x4,y4,r4,x5,y5,r5):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (a[0],a[1])\ndef rect_rect_dis_union_rect_dis_union_rect_dis_union_rect_dis(x1,y1,r1,x2,y2,r2,x3,y3,r3,x4,y4,r4,x5,y5,r5,x6,y6,r6):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (a[0],a[1])\ndef rect_rect_dis_union_rect_dis_union_rect_dis_union_rect_dis_union_rect_dis(x1,y1,r1,x2,y2,r2,x3,y3,r3,x4,y4,r4,x5,y5,r5,x6,y6,r6,x7,y7,r7):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect(x1,y1,r1,x2,y2,r2)\n    b=(a[0],a[1])\n    print(a)\n    print(b)\n    return (a[0],a[1])\ndef rect_rect_dis_union_rect_dis_union_rect_dis_union_rect_dis_union_rect_dis_union_rect_dis(x1,y1,r1,x2,y2,r2,x3,y3,r3,x4,y4,r4,x5,y5,r5,x6,y6,r6,x7,y7,r7,x8,y8,r8):\n    '''\n    Write a function to find the center of circle having center (x,y) and radius r.\n    '''\n    a=rect_rect("
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    R = x*x+y*y\n    theta = cmath.atan(y/(x+1e-6))\n    R,theta = int(R),int(theta)\n    if(R > 0):\n        if(theta < 0):\n            theta = theta + 360\n        else:\n            theta = theta\n    else:\n        if(theta < 0):\n            theta = -theta + 360\n        else:\n            theta = -theta\n    return R,theta\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r, theta = x, y\n    return (r * cmath.cos(theta), r * cmath.sin(theta))\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    return r, theta\ndef line_from_polar(r, theta):\n    '''\n    Write a function to create a line from polar coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\ndef polar_from_line(x, y):\n    '''\n    Write a function to create a line from polar coordinates.\n    '''\n    theta = cmath.atan2(y, x)\n    r = cmath.hypot(x, y)\n    return r, theta\ndef point_from_polar(r, theta):\n    '''\n    Write a function to create a point from polar coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\ndef polar_from_point(x, y):\n    '''\n    Write a function to create a point from polar coordinates.\n    '''\n    r = cmath.hypot(x, y)\n    theta = cmath.atan2(y, x)\n    return r, theta\ndef line_from_point(x, y):\n    '''\n    Write a function to create a line from polar coordinates.\n    '''\n    theta = cmath.atan2(y, x)\n    r = cmath.hypot(x, y)\n    return r, theta\ndef point_from_line(r, theta):\n    '''\n    Write a function to create a point from polar coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\ndef polar_from_line(r, theta):\n    '''\n    Write a function to create a line from polar coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\ndef rect_from_polar(r, theta):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    theta = theta * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return (a, b)\ndef polar_from_rect(a, b):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    r = cmath.sqrt(a * a + b * b)\n    theta = cmath.acos(a / r)\n    theta = theta * 180 / cmath.pi\n    return r, theta\ndef rectangle_from_polar(r, theta):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    theta = theta * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return a, b\ndef polar_from_rect(a, b):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    r = cmath.sqrt(a * a + b * b)\n    theta = cmath.acos(a / r)\n    theta = theta * 180 / cmath.pi\n    return r, theta\ndef rect_from_polar(r, theta):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    theta = theta * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return a, b\ndef polar_from_rect(a, b):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    r = cmath.sqrt(a * a + b * b)\n    theta = cmath.acos(a / r)\n    theta = theta * 180 / cmath.pi\n    return r, theta\ndef rect_from_polar(r, theta):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    theta = theta * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return a, b\ndef polar_from_rect(a, b):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    r = cmath.sqrt(a * a + b * b)\n    theta = cmath.acos(a / r)\n    theta = theta * 180 / cmath.pi\n    return r, theta\ndef rect_from_polar(r, theta):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    theta = theta * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return a, b\ndef polar_from_rect(a, b):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    r = cmath.sqrt(a * a + b * b)\n    theta = cmath.acos(a / r)\n    theta = theta * 180 / cmath.pi\n    return r, theta\ndef rect_from_polar(r, theta):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    theta = theta * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return a, b\ndef polar_from_rect(a, b):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    r = cmath.sqrt(a * a + b * b)\n    theta = cmath.acos(a / r)\n    theta = theta * 180 / cmath.pi\n    return r, theta\ndef rect_from_polar(r, theta):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    theta = theta * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return a, b\ndef polar_from_rect(a, b):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    r = cmath.sqrt(a * a + b * b)\n    theta = cmath.acos(a / r)\n    theta = theta * 180 / cmath.pi\n    return r, theta\ndef rect_from_polar(r, theta):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    theta = theta * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return a, b\ndef polar_from_rect(a, b):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    r = cmath.sqrt(a * a + b * b)\n    theta = cmath.acos(a / r)\n    theta = theta * 180 / cmath.pi\n    return r, theta\ndef rect_from_polar(r, theta):\n    '''\n    Write a function to create a rectangle from polar coordinates.\n    '''\n    theta = theta * cmath.pi / 180\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return a, b\nde"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radians = cmath.acos(complex(x,y))\n    return (math.sqrt(x**2 + y**2) * math.cos(radians), math.sqrt(x**2 + y**2) * math.sin(radians))\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    b = newList.pop(-1)\n    newList.insert(0,b)\n    newList.insert(-1,a)\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # using two pointer to interchange the elements\n    # first element of the list is pointing to the first element in the list\n    # and last element of the list is pointing to the last element in the list\n    \n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n    \ndef swap_List_2(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # using index to interchange the elements\n    \n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"Original list: \",newList)\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"After Swapping: \",newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Swap the first and last elements in a list.\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #print(newList)\n    newList.pop(0)\n    newList.pop(-1)\n    newList.insert(0,newList.pop())\n    #print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    firstElement = newList[0]\n    lastElement = newList[len(newList)-1]\n    newList.remove(firstElement)\n    newList.remove(lastElement)\n    newList.insert(0,firstElement)\n    newList.append(lastElement)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\nprint(\"Original List: \", swap_List([]))\nprint(\"Swapped List: \", swap_List([10, 20, 30, 40, 50]))\nprint(\"Swapped List: \", swap_List([10, 20, 30]))\nprint(\"Swapped List: \", swap_List([10, 20, 30, 40]))\nprint(\"Swapped List: \", swap_List([10, 20, 30, 40, 50]))\nprint(\"Swapped List: \", swap_List([10, 20, 30, 40, 50, 10])"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return None\n    first = newList.pop(0)\n    last = newList.pop()\n    newList.append(first)\n    newList.insert(0, last)\n    return newList\nprint('\\n\\nTEST CASE 1:')\nprint(swap_List([1, 2, 3, 4, 5]))\nprint(swap_List([]))\nprint(swap_List([1]))\nprint(swap_List([1, 2, 3, 4, 5]))\nprint(swap_List([1, 2, 3]))\nprint(swap_List([1, 2]))\nprint(swap_List([1, 2, 3, 4, 5]))\nprint('\\n\\n')\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n==0 or k==0):\n        return 1\n    else:\n        if(k==n):\n            return 1\n        else:\n            return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return n*factorial(n-1)\ndef sum_of_squares(n):\n    '''\n    Write a python function to compute the sum of the squares of the first n positive integers.\n    '''\n    if(n==0):\n        return 0\n    else:\n        return ((n*(n+1))/2)\ndef pattern(n):\n    '''\n    Write a python function to compute the nth row of the Pascal's Triangle.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return (1*(n+1))+pattern(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth term in the fibonacci series.\n    '''\n    if(n==0 or n==1):\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef fibonacci_n(n):\n    '''\n    Write a python function to compute the fibonacci series.\n    '''\n    if(n==0):\n        return 0\n    elif(n==1 or n==2):\n        return 1\n    else:\n        return fibonacci_n(n-2)+fibonacci_n(n-1)\ndef merge_the_tools(str1,str2):\n    '''\n    Write a python function to merge strings (separated by space) using the tools of python.\n    '''\n    string1=str1.split()\n    string2=str2.split()\n    mergedString=\"\"\n    for i in range(len(string1)):\n        mergedString+=string1[i]+string2[i]\n    return mergedString\ndef merge_the_tools_solution(str1,str2):\n    '''\n    Write a python function to merge strings (separated by space) using the tools of python.\n    '''\n    mergedString=\"\"\n    for i in range(len(str1)):\n        mergedString+=str1[i]+str2[i]\n    return mergedString\ndef merge_the_tools_solution_2(str1,str2):\n    '''\n    Write a python function to merge strings (separated by space) using the tools of python.\n    '''\n    mergedString=\"\"\n    for i in range(len(str1)):\n        mergedString+=str1[i]+str2[i]\n    return mergedString\ndef tower_of_hanoi(n, from_rod, to_rod, aux_rod):\n    '''\n    Write a python function to solve the Tower of Hanoi problem in Python.\n    '''\n    if n==1:\n        print(\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod)\n        return\n    tower_of_hanoi(n-1,from_rod,aux_rod,to_rod)\n    print(\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod)\n    tower_of_hanoi(n-1,aux_rod,to_rod,from_rod)\ndef tower_of_hanoi_solution(n, from_rod, to_rod, aux_rod):\n    '''\n    Write a python function to solve the Tower of Hanoi problem in Python.\n    '''\n    def printMove(fr, to):\n        print(\"Move disk\",fr,\"from rod\",fr,\"to rod\",to)\n    if n==1:\n        printMove(from_rod, to_rod)\n        return\n    tower_of_hanoi_solution(n-1, from_rod, aux_rod, to_rod)\n    printMove(from_rod, to_rod)\n    tower_of_hanoi_solution(n-1, aux_rod, to_rod, from_rod)\ndef tower_of_hanoi_solution_2(n, from_rod, to_rod, aux_rod):\n    '''\n    Write a python function to solve the Tower of Hanoi problem in Python.\n    '''\n    def printMove(fr, to):\n        print(\"Move disk\",fr,\"from rod\",fr,\"to rod\",to)\n    if n==1:\n        printMove(from_rod, to_rod)\n        return\n    tower_of_hanoi_solution_2(n-1, from_rod, aux_rod, to_rod)\n    printMove(from_rod, to_rod)\n    tower_of_hanoi_solution_2(n-1, aux_rod, to_rod, from_rod)\ndef tower_of_hanoi_solution_3(n, from_rod, to_rod, aux_rod):\n    '''\n    Write a python function to solve the Tower of Hanoi problem in Python.\n    '''\n    def printMove(fr, to):\n        print(\"Move disk\",fr,\"from rod\",fr,\"to rod\",to)\n    def move_stack(n, fr, to, aux):\n        if n==1:\n            printMove(fr, to)\n            return\n        move_stack(n-1,fr,aux,to)\n        move_stack(1,fr,to,aux)\n        move_stack(n-1,aux,to,fr)\n    if n==1:\n        printMove(from_rod, to_rod)\n        return\n    move_stack(n-1,from_rod,aux_rod,to_rod)\n    printMove(from_rod, to_rod)\n    move_stack(n-1,aux_rod,to_rod,from_rod)\ndef tower_of_hanoi_solution_4(n, from_rod, to_rod, aux_rod):\n    '''\n    Write a python function to solve the Tower of Hanoi problem in Python.\n    '''\n    def printMove(fr, to):\n        print(\"Move disk\",fr,\"from rod\",fr,\"to rod\",to)\n    def move_stack(n, fr, to, aux):\n        if n==1:\n            printMove(fr, to)\n            return\n        move_stack(n-1,fr,aux,to)\n        move_stack(1,fr,to,aux)\n        move_stack(n-1,aux,to,fr)\n    def move_stack_2(n, fr, to, aux):\n        if n==1:\n            printMove(fr, to)\n            return\n        move_stack_2(n-1,fr,aux,to)\n        move_stack_2(1,fr,to,aux)\n        move_stack_2(n-1,aux,to,fr)\n    def move_stack_3(n, fr, to, aux):\n        if n==1:\n            printMove(fr, to)\n            return\n        move_stack_3(n-1,fr,aux,to)\n        move_stack_3(1,fr,to,aux)\n        move_stack_3(n-1,aux,to,fr)\n    if n==1:\n        printMove(from_rod, to_rod)\n        return\n    move_stack(n-1,from_rod,aux_rod,to_rod)\n    printMove(from_rod, to_rod)\n    move_stack(n-1,aux_rod,to_rod,from_rod)\n    move_stack(n-1,aux_rod,to_rod,from_rod)\ndef number_of_ways_to_split(dividend, divisor):\n    '''\n    Write a python function to find the number of ways to split the given divisor into the given dividend.\n    '''\n    if dividend < 0:\n        dividend *= -1\n    if divisor < 0:\n        divisor *= -1\n    if dividend == 0 or divisor == 0:\n        return 1"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # the answer is actually -3, since the result is actually the sum of the product of the co-efficients\n    # the binomial coefficient is defined as \n    # n!/(n-r)!\n    # where n is the number of times of r\n    # where r is the number of successes\n    # so the answer is the sum of the product of the co-efficients\n    ans = 0\n    for r in range(0,k+1):\n        ans += (n+r)\n    return ans\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    fact = 1\n    for i in range(n,k,-1): \n        fact *= i\n    return fact\n    \ndef fact_table(n): \n    '''\n    Write a python function to find the product of the first n factorial numbers.\n    '''\n    fact = 1\n    for i in range(1,n+1): \n        fact *= i\n    return fact\n    \ndef fact_table_recursive(n): \n    '''\n    Write a python function to find the product of the first n factorial numbers using recursion.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*fact_table_recursive(n-1)\n    \ndef main(): \n    print(\"\\n\\t\\t\\t\\t\\t  FACTORIAL TABLE  \")\n    print(\"\\nEnter the desired number :\", end = \"\\n\\t\")\n    n = int(input())\n    print(\"\\nFor factorial of {} using iterative method :\".format(n), binomial_Coeff(n,n))\n    print(\"\\nFor factorial of {} using recursion method :\".format(n), fact_table_recursive(n))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    for i in range(1,k+1):\n        product = product * (n-i+1) / i\n    return product\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return ((n * (n + 1)) / 2) + ((k * (k + 1)) / 2)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k+1,n+1):\n        sum = sum + i*(n-i+1)//2\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    i = 1\n    j = 1\n    C = 0\n    while i < n:\n        j = 1\n        while j <= i:\n            C += 1\n            j += 1\n        i += 1\n    return C\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    else:\n        return k * binomial_Coeff(n-1, k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k <= 0 or n <= k:\n        return 0\n    binomial = [[0] * (k + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0 or j == i:\n                binomial[i][j] = 1\n            else:\n                binomial[i][j] = binomial[i - 1][j - 1] + binomial[i - 1][j]\n    return binomial[n][k]\nprint(binomial_Coeff(10,5))\nprint(binomial_Coeff(50,7))\nprint(binomial_Coeff(500,250))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    ans=1\n    for i in range(1,k+1):\n        ans=ans*(n-i+1)/i\n    return(ans)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    return str(ip.split('.')[0])\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.split('.')[3]\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(map(int, ip.split(\".\")))\n    while ip[3] == 0:\n        ip[3] = 255\n        ip[2] -= 1\n        if ip[2] == 0:\n            ip[2] = 255\n            ip[1] -= 1\n            if ip[1] == 0:\n                ip[1] = 255\n                ip[0] -= 1\n                if ip[0] == 0:\n                    ip[0] = 255\n    return \".\".join(map(str, ip))\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.search(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$', ip):\n        return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+', '', ip)\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a = 0\n    a += 1\n    \ndef remove_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return int(ip[0:3]+ip[4:6]+ip[7:9])\n    \ndef remove_leading_zeroes(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip[0:3]+ip[4:6]+ip[7:9]\n    \ndef remove_leading_zeroes(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a = int(ip)\n    print (a)\n    print (ip)\n    return a\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    n = 0\n    s = ''\n    for i in ip:\n        if i == '0':\n            n += 1\n        else:\n            break\n    for i in range(n):\n        s += '0'\n    for i in ip:\n        s += i\n    return s\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.split('.')\n    result=\"\"\n    for i in ip:\n        if i.startswith('0'):\n            result+=i[1:]\n        else:\n            result+=i\n    return result\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    return ''.join(re.findall(r'\\d', ip))\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # try:\n    #     ip = int(ip)\n    # except ValueError:\n    #     print(f'{ip} is not a valid ip address')\n    #     exit()\n    if ip == '0.0.0.0':\n        ip = '0'\n    if ip == '::':\n        ip = '0'\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return int(ip)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list=[]\n    odd_list=[]\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    return abs(sum(even_list)-sum(odd_list))\n    \n    \n    \ndef find_triplet(list1):\n    '''\n    Given a list of numbers, write a function to return a list of three numbers whose product is the biggest.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                if list1[i]*list1[j]*list1[k]>list1[i]*list1[j]*list1[k]:\n                    return list1[i],list1[j],list1[k]\n                else:\n                    pass\n    return -1,-1,-1\n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Find duplicate number in a list\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i]==nums[j]:\n                return nums[i]\n    return -1\n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Find duplicate number in a list\n    '''\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            return nums[i]\n    return -1\n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Find duplicate number in a list\n    '''\n    nums_set=set(nums)\n    for num in nums:\n        if num in nums_set:\n            return num\n    return -1\n    \n    \n    \ndef group_the_people(names):\n    '''\n    Given a list of names, group them into two groups and return them as a list of strings.\n    '''\n    even_list=[]\n    odd_list=[]\n    for i in range(len(names)):\n        if i%2==0:\n            even_list.append(names[i])\n        else:\n            odd_list.append(names[i])\n    return even_list,odd_list\n    \n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:\n            count_dict[nums[i]]+=1\n        else:\n            count_dict[nums[i]]=1\n    for key,value in count_dict.items():\n        if value>len(nums)/2:\n            return key\n    return -1\n    \n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:\n            count_dict[nums[i]]+=1\n        else:\n            count_dict[nums[i]]=1\n    for key,value in count_dict.items():\n        if value>len(nums)/2:\n            return key\n    return -1\n    \n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:\n            count_dict[nums[i]]+=1\n        else:\n            count_dict[nums[i]]=1\n    for key,value in count_dict.items():\n        if value>len(nums)/2:\n            return key\n    return -1\n    \n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:\n            count_dict[nums[i]]+=1\n        else:\n            count_dict[nums[i]]=1\n    for key,value in count_dict.items():\n        if value>len(nums)/2:\n            return key\n    return -1\n    \n    \n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:\n            count_dict[nums[i]]+=1\n        else:\n            count_dict[nums[i]]=1\n    for key,value in count_dict.items():\n        if value>len(nums)/2:\n            return key\n    return -1\n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:\n            count_dict[nums[i]]+=1\n        else:\n            count_dict[nums[i]]=1\n    for key,value in count_dict.items():\n        if value>len(nums)/2:\n            return key\n    return -1\n    \n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:\n            count_dict[nums[i]]+=1\n        else:\n            count_dict[nums[i]]=1\n    for key,value in count_dict.items():\n        if value>len(nums)/2:\n            return key\n    return -1\n    \n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:\n            count_dict[nums[i]]+=1\n        else:\n            count_dict[nums[i]]=1\n    for key,value in count_dict.items():\n        if value>len(nums)/2:\n            return key\n    return -1\n    \n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:\n            count_dict[nums[i]]+=1\n        else:\n            count_dict[nums[i]]=1\n    for key,value in count_dict.items():\n        if value>len(nums)/2:\n            return key\n    return -1\n    \n    \n    \ndef find_the_duplicate(nums):\n    '''\n    Given a list of numbers, return the number that appears more than any other number in the list.\n    '''\n    count_dict={}\n    for i in range(len(nums)):\n        if nums[i] in count_dict:"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        return -1\n    for i in range(len(list1)):\n        if i % 2!= 0:\n            list1[i] = list1[i] + 1\n    return abs(list1[0] - list1[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if(len(list1) == 0):\n        return -1\n    elif(len(list1) == 1):\n        return list1[0]\n    else:\n        list1.sort()\n        if(list1[0]%2 == 0):\n            return list1[0] - list1[1]\n        else:\n            return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return False\n    \n    if list1[0]%2 == 0:\n        if list1[1]%2 == 0:\n            return abs(list1[0]-list1[1])\n        else:\n            return abs(list1[0]-list1[1])\n    else:\n        if list1[1]%2 == 0:\n            return abs(list1[0]-list1[1])\n        else:\n            return abs(list1[0]-list1[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    length = len(list1)\n    even_num = []\n    odd_num = []\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if list1 == None:\n        return 0\n    even_index = None\n    odd_index = None\n    even = None\n    odd = None\n    if list1:\n        even_index = list1.index(even_number(list1))\n        odd_index = list1.index(odd_number(list1))\n        even = list1[even_index]\n        odd = list1[odd_index]\n        if even_index > odd_index:\n            return (even - odd)\n        return (odd - even)\n    return 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    print(f\"First Even Number is: {even[0]} and First Odd Number is: {odd[0]}\")\n    return even[0]-odd[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0]\n    elif len(list1) > 1:\n        first_even = list1[0]\n        first_odd = list1[1]\n        for i in range(len(list1)-1):\n            if i%2 == 0:\n                first_even = list1[i+1]\n            else:\n                first_odd = list1[i+1]\n        return abs(first_even - first_odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            x = list1[i]\n            break\n    for i in range(len(list1)):\n        if list1[i]%2 == 1:\n            y = list1[i]\n            break\n    if y-x == 0:\n        return 0\n    else:\n        return y-x\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #Create a list to save the even and odd number\n    even = []\n    odd = []\n    #For each number in the list, if the number is even, put the number into the even list.\n    for i in range(0, len(list1)):\n        if (i % 2 == 0):\n            even.append(list1[i])\n    #For each number in the list, if the number is odd, put the number into the odd list.\n    for j in range(0, len(list1)):\n        if (i % 2!= 0):\n            odd.append(list1[j])\n    #Calculate the diff of the even and odd numbers.\n    diff = list(set(even) - set(odd))\n    #print the diff of the even and odd numbers\n    print(\"The difference of even numbers and odd numbers is: {}\".format(diff))\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    result = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            result += 1\n    return result\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    i=0\n    j=0\n    while i<n and j<n:\n        if str1[i]!=str2[j]:\n            if str1[i]=='0':\n                str1=str1[:i]+'1'+str1[i+1:]\n                count+=1\n            else:\n                str1=str1[:i]+'0'+str1[i+1:]\n                count+=1\n        i+=1\n        j+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    '''\n    In python, strings are immutable. Hence, string operations can not be performed on immutable strings. We have to use another way to \n    calculate the minimum number of swaps. The idea is to go through each character and swap the position of the character in the \n    original string. This will make the original string become shorter, so further comparisons can be made between this modified string \n    and the second string. If the length of the string is equal, then there are no swaps needed, hence the minimum number of swaps \n    required is 0. If the length of the strings are not equal, then there are atleast one character that needs to be swapped. So, the \n    minimum number of swaps required will be the minimum of these minimum number of swaps.\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i, j = 0, 0\n    count = 0\n    while i < len(str1):\n        if str1[i]!= str2[j]:\n            str1 = str1[:i] + str1[i].lower() + str1[i+1:]\n            str2 = str2[:j] + str2[j].lower() + str2[j+1:]\n            i = 0\n            j = 0\n            count += 1\n        i += 1\n        j += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    if n==1: return 0\n    if n==2: return 0 if str1[0]==str2[0] else 1\n    dp = [[0]*n for _ in range(n)]\n    #dp[i][j] stores the minimum number of swaps required to convert str1[i:j+1] to str2[i:j+1]\n    for i in range(n):\n        dp[i][i] = 0\n    for gap in range(1,n):\n        for i in range(0,n-gap):\n            j = i+gap\n            if str1[i]==str2[i]:\n                if str1[j]==str2[j]:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = min(dp[i][j-1]+1, dp[i+1][j]+1)\n            else:\n                dp[i][j] = min(dp[i][j-1]+1, dp[i+1][j]+1, dp[i][j-1]+1)\n    return dp[0][n-1]\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def get_difference(l1,l2) : \n        diff = 0\n        for i in range(len(l1)) : \n            if l1[i]!= l2[i] : \n                diff += 1\n        return diff\n    \n    n = len(str1)\n    l1 = list(str1)\n    l2 = list(str2)\n    temp = l1\n    l1 = l2\n    l2 = temp\n    swaps = 0\n    for i in range(n) : \n        diff = get_difference(l1,l2)\n        if diff == 1 : \n            swaps += 1\n            l1,l2 = swap(l1,l2)\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)) : \n        if str1[i]!=str2[i] : \n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swap_count = 0\n    i = 0\n    while(i<len(str1) and i<len(str2)):\n        if str1[i]!= str2[i]:\n            temp = str1[i]\n            str1 = str1.replace(str1[i],str2[i])\n            str2 = str2.replace(str2[i],temp)\n            swap_count+=1\n        i+=1\n    return swap_count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # print(str1)\n    # print(str2)\n    # print('\\n')\n    # print(swaps)\n    # print('\\n')\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(str1)\n    print(str2)\n    print(\"swaps =\",swaps)\n    m,n=len(str1),len(str2)\n    #print(m,n)\n    if m!=n:\n        print(\"m,n mismatch\")\n        return \n    #if n==m:\n    #    return swaps\n    #print(\"swaps =\",swaps)\n    count=0\n    #temp=str1[:]\n    \n    '''\n    Using Iteration and hashmap\n    '''\n    mapping={}\n    for i in range(m):\n        mapping[str1[i]]=i\n        print(\"mapping\",mapping)\n    \n    print(mapping)\n    for i in range(n):\n        if str2[i] in mapping:\n            print(\"element in mapping:\",str2[i])\n            if mapping[str2[i]]!=i:\n                print(mapping[str2[i]])\n                #print(\"swaps=\",swaps)\n                #temp=str1[:]\n                \n                swaps+=1\n                mapping[str1[i]]=i\n                str1=str1[:i]+str2[i]+str1[i+1:]\n                #print(\"after assignment\",str1)\n                #print(\"temp\",temp)\n                #temp=str1[:]\n                #print(\"swaps=\",swaps)\n            else:\n                print(\"element not in mapping\")\n                \n                continue\n    print(str1)\n    print(\"swaps =\",swaps)\n    return swaps\n    \n    \n    \n    \n    '''\n    Using Array\n    '''\n    #m=len(str1)\n    #n=len(str2)\n    #print(m,n)\n    #if m!=n:\n    #    return 0\n    #t=m+n\n    #swaps=0\n    #count=0\n    #temp=str1[:]\n    #mapping={}\n    #for i in range(m):\n    #    mapping[str1[i]]=i\n    #print(mapping)\n    #print(mapping)\n    #for i in range(n):\n    #    if str2[i] in mapping:\n    #        print(\"element in mapping:\",str2[i])\n    #        if mapping[str2[i]]!=i:\n    #            temp=str1[:]\n    #            swaps+=1\n    #            mapping[str1[i]]=i\n    #            str1=str1[:i]+str2[i]+str1[i+1:]\n    #            print(\"after assignment\",str1)\n    #            print(\"temp\",temp)\n    #            temp=str1[:]\n    #            print(\"swaps=\",swaps)\n    #        else:\n    #            print(\"element not in mapping\")\n    #            continue\n    #print(str1)\n    #print(\"swaps =\",swaps)\n    #return swaps\n    \n    '''\n    Using Binary tree\n    '''\n    #m=len(str1)\n    #n=len(str2)\n    #print(m,n)\n    #if m!=n:\n    #    return 0\n    #t=m+n\n    #swaps=0\n    #count=0\n    #temp=str1[:]\n    #mapping={}\n    #for i in range(m):\n    #    mapping[str1[i]]=i\n    #print(mapping)\n    #print(mapping)\n    #for i in range(n):\n    #    if str2[i] in mapping:\n    #        print(\"element in mapping:\",str2[i])\n    #        if mapping[str2[i]]!=i:\n    #            temp=str1[:]\n    #            swaps+=1\n    #            mapping[str1[i]]=i\n    #            str1=str1[:i]+str2[i]+str1[i+1:]\n    #            print(\"after assignment\",str1)\n    #            print(\"temp\",temp)\n    #            temp=str1[:]\n    #            print(\"swaps=\",swaps)\n    #        else:\n    #            print(\"element not in mapping\")\n    #            continue\n    #print(str1)\n    #print(\"swaps =\",swaps)\n    #return swaps\n    \n    '''\n    Using XOR\n    '''\n    m=len(str1)\n    n=len(str2)\n    #print(m,n)\n    #if m!=n:\n    #    return 0\n    #t=m+n\n    #swaps=0\n    #count=0\n    #temp=str1[:]\n    #mapping={}\n    #for i in range(m):\n    #    mapping[str1[i]]=i\n    #print(mapping)\n    #print(mapping)\n    #for i in range(n):\n    #    if str2[i] in mapping:\n    #        print(\"element in mapping:\",str2[i])\n    #        if mapping[str2[i]]!=i:\n    #            temp=str1[:]\n    #            swaps+=1\n    #            mapping[str1[i]]=i\n    #            str1=str1[:i]+str2[i]+str1[i+1:]\n    #            print(\"after assignment\",str1)\n    #            print(\"temp\",temp)\n    #            temp=str1[:]\n    #            print(\"swaps=\",swaps)\n    #        else:\n    #            print(\"element not in mapping\")\n    #            continue\n    #print(str1)\n    #print(\"swaps =\",swaps)\n    #return swaps\n    \n    '''\n    Using Two pointer\n    '''\n    m=len(str1)\n    n=len(str2)\n    #print(m,n)\n    #if m!=n:\n    #    return 0\n    #t=m+n\n    #swaps=0\n    #count=0\n    #temp=str1[:]\n    #mapping={}\n    #for i in range(m):\n    #    mapping[str1[i]]=i\n    #print(mapping)\n    #print(mapping)\n    #for i in range(n):\n    #    if str2[i] in mapping:\n    #        print(\"element in mapping:\",str2[i])\n    #        if mapping[str2[i]]!=i:\n    #            temp=str1[:]\n    #            swaps+=1\n    #            mapping[str1[i]]=i\n    #            str1=str1[:i]+str2[i]+str1[i+1:]\n    #            print(\"after assignment\",str1)\n    #            print(\"temp\",temp)\n    #            temp=str1[:]\n    #            print(\"swaps=\",swaps)\n    #        else:\n    #            print(\"element not in mapping\")\n    #            continue\n    #print(str1)\n    #print(\"swaps =\",swaps)\n    #return swaps\n    \n    '''\n    Using Sort\n    '''\n    #m=len(str1)\n    #n=len(str2)\n    #print(m,n)\n    #if m!=n:\n    #    return 0\n    #t=m+n\n    #swaps=0\n    #count=0\n    #temp=str1[:]\n    #mapping={}\n    #for i in range(m):\n    #    mapping[str1[i]]=i\n    #print(mapping)\n    #print(mapping)\n    #for i in range(n):\n    #    if str2[i] in mapping:\n    #        print(\"element in mapping:\",str2[i])\n    #        if mapping[str2[i]]!=i:\n    #            temp=str1[:]\n    #            swaps+=1\n    #            mapping[str1[i]]=i\n    #            str1=str1[:i]+str2[i]+str1[i+1:]\n    #            print(\"after assignment\",str1"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    length = len(tuple_list)\n    byte_size = length * 5\n    return byte_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = 0\n    for item in tuple_list:\n        size_of_tuple = size_of_tuple + sys.getsizeof(item)\n    return size_of_tuple\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for i in tuple_list:\n        count += sys.getsizeof(i)\n    return count\nprint(tuple_size([1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    l = len(tuple_list)\n    print(l)\n    return (l*8)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #\n    # Your code here\n    #\n    return tuple_list[0] * tuple_list[1] * tuple_list[2]\n    #\n    # return tuple_list[0] * tuple_list[1] * tuple_list[2] * tuple_list[3] * tuple_list[4] * tuple_list[5] * tuple_list[6] * tuple_list[7] * tuple_list[8] * tuple_list[9] * tuple_list[10] * tuple_list[11] * tuple_list[12] * tuple_list[13] * tuple_list[14] * tuple_list[15] * tuple_list[16] * tuple_list[17] * tuple_list[18] * tuple_list[19] * tuple_list[20] * tuple_list[21] * tuple_list[22] * tuple_list[23] * tuple_list[24] * tuple_list[25] * tuple_list[26] * tuple_list[27] * tuple_list[28] * tuple_list[29] * tuple_list[30] * tuple_list[31] * tuple_list[32] * tuple_list[33] * tuple_list[34] * tuple_list[35] * tuple_list[36] * tuple_list[37] * tuple_list[38] * tuple_list[39] * tuple_list[40] * tuple_list[41] * tuple_list[42] * tuple_list[43] * tuple_list[44] * tuple_list[45] * tuple_list[46] * tuple_list[47] * tuple_list[48] * tuple_list[49] * tuple_list[50] * tuple_list[51] * tuple_list[52] * tuple_list[53] * tuple_list[54] * tuple_list[55] * tuple_list[56] * tuple_list[57] * tuple_list[58] * tuple_list[59] * tuple_list[60] * tuple_list[61] * tuple_list[62] * tuple_list[63] * tuple_list[64] * tuple_list[65] * tuple_list[66] * tuple_list[67] * tuple_list[68] * tuple_list[69] * tuple_list[70] * tuple_list[71] * tuple_list[72] * tuple_list[73] * tuple_list[74] * tuple_list[75] * tuple_list[76] * tuple_list[77] * tuple_list[78] * tuple_list[79] * tuple_list[80] * tuple_list[81] * tuple_list[82] * tuple_list[83] * tuple_list[84] * tuple_list[85] * tuple_list[86] * tuple_list[87] * tuple_list[88] * tuple_list[89] * tuple_list[90] * tuple_list[91] * tuple_list[92] * tuple_list[93] * tuple_list[94] * tuple_list[95] * tuple_list[96] * tuple_list[97] * tuple_list[98] * tuple_list[99] * tuple_list[100] * tuple_list[101] * tuple_list[102] * tuple_list[103] * tuple_list[104] * tuple_list[105] * tuple_list[106] * tuple_list[107] * tuple_list[108] * tuple_list[109] * tuple_list[110] * tuple_list[111] * tuple_list[112] * tuple_list[113] * tuple_list[114] * tuple_list[115] * tuple_list[116] * tuple_list[117] * tuple_list[118] * tuple_list[119] * tuple_list[120] * tuple_list[121] * tuple_list[122] * tuple_list[123] * tuple_list[124] * tuple_list[125] * tuple_list[126] * tuple_list[127] * tuple_list[128] * tuple_list[129] * tuple_list[130] * tuple_list[131] * tuple_list[132] * tuple_list[133] * tuple_list[134] * tuple_list[135] * tuple_list[136] * tuple_list[137] * tuple_list[138] * tuple_list[139] * tuple_list[140] * tuple_list[141] * tuple_list[142] * tuple_list[143] * tuple_list[144] * tuple_list[145] * tuple_list[146] * tuple_list[147] * tuple_list[148] * tuple_list[149] * tuple_list[150] * tuple_list[151] * tuple_list[152] * tuple_list[153] * tuple_list[154] * tuple_list[155] * tuple_list[156] * tuple_list[157] * tuple_list[158] * tuple_list[159] * tuple_list[160] * tuple_list[161] * tuple_list[162] * tuple_list[163] * tuple_list[164] * tuple_list[165] * tuple_list[166] * tuple_list[167] * tuple_list[168] * tuple_list[169] * tuple_list[170] * tuple_list[171] * tuple_list[172] * tuple_list[173] * tuple_list[174] * tuple_list[175] * tuple_list[176] * tuple_list[177] * tuple_list[178] * tuple_list[179] * tuple_list[180] * tuple_list[181] * tuple_list[182] * tuple_list[183] * tuple_list[184] * tuple_list[185] * tuple_list[186] * tuple_list[187] * tuple_list[188] * tuple_list[189] * tuple_list[190] * tuple_list[191] * tuple_list[192] * tuple_list[193] * tuple_list[194] * tuple_list[195] * tuple_list[196] * tuple_list[197] * tuple_list[198] * tuple_list[199] * tuple_list[200] * tuple_list[201] * tuple_list[202] * tuple_list[203] * tuple_list[204] * tuple_list[205] * tuple_list[206] * tuple_list[207] * tuple_list[208] * tuple_list[209] * tuple_list[210] * tuple_list[211] * tuple_list[212] * tuple_list[213] * tuple_list[214] * tuple_list[215] * tuple_list[216] * tuple_list[217] * tuple_list[218] * tuple_list[219] * tuple_list[220] * tuple_list[221] * tuple_list[222] * tuple_list[223] * tuple_list[224] * tuple_list[225] * tuple_list[226] * tuple_list[227] * tuple_list[228] * tuple_list[229] * tuple_list[230] * tuple_list[231] * tuple_list[232] * tuple_list[233] * tuple_list[234] * tuple_list[235] * tuple_list[236] * tuple_list[237] * tuple_list[238] * tuple_list[239] * tuple_list[240] * tuple_list[241] * tuple_list[242] * tuple_list[243] * tuple_list[244] * tuple_list[245] * tuple_list[246] * tuple_list[247] * tuple_list[248] * tuple_list[249] * tuple_list[250] * tuple_list[251] * tuple_list[252] * tuple_list[253] * tuple_list[254] * tuple_list[255] * tuple_list[256] * tuple_list[257] * tuple_list[258] * tuple_list[259] * tuple_list[260] * tuple_list[261] * tuple_list[262] * tuple_list[263] * tuple_list[264] * tuple_list[265] * tuple_list[266] * tuple_list[267] * tuple_list[268] * tuple_list[269] * tuple_list[270] * tuple_list[271] * tuple_list[272] * tuple_list[273] * tuple_list[274] * tuple_list[275] * tuple_list[276] * tuple_list[277] * tuple_list[278] * tuple_list[279] * tuple_list[280] * tupl"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for x in tuple_list:\n        if type(x) == int:\n            size += sys.getsizeof(x) * 8\n        else:\n            size += sys.getsizeof(x) * sys.getsizeof(type(x))\n    return size\n    \ndef dict_size(dict_list):\n    '''\n    Write a function to find the size in bytes of the given dictionary.\n    '''\n    size = 0\n    for x in dict_list:\n        if type(x) == int:\n            size += sys.getsizeof(x) * 8\n        else:\n            size += sys.getsizeof(x) * sys.getsizeof(type(x))\n    return size\n    \ndef string_size(string_list):\n    '''\n    Write a function to find the size in bytes of the given string.\n    '''\n    size = 0\n    for x in string_list:\n        size += sys.getsizeof(x)\n    return size\n    \ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    size = 0\n    for x in list_list:\n        size += sys.getsizeof(x)\n    return size\n    \ndef set_size(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    size = 0\n    for x in set_list:\n        size += sys.getsizeof(x)\n    return size\n    \ndef tuple_new_list(tuple_list):\n    '''\n    Write a function to convert a tuple to a list, without changing the order.\n    '''\n    new_list = []\n    for x in tuple_list:\n        if type(x) == int:\n            new_list.append(x)\n        else:\n            new_list.append(x)\n    return new_list\n    \ndef dict_new_list(dict_list):\n    '''\n    Write a function to convert a dictionary to a list, without changing the order.\n    '''\n    new_list = []\n    for x in dict_list:\n        if type(x) == int:\n            new_list.append(x)\n        else:\n            new_list.append(x)\n    return new_list\n    \ndef string_new_list(string_list):\n    '''\n    Write a function to convert a string to a list, without changing the order.\n    '''\n    new_list = []\n    for x in string_list:\n        new_list.append(x)\n    return new_list\n    \ndef list_new_list(list_list):\n    '''\n    Write a function to convert a list to a list, without changing the order.\n    '''\n    new_list = []\n    for x in list_list:\n        new_list.append(x)\n    return new_list\n    \ndef set_new_list(set_list):\n    '''\n    Write a function to convert a set to a list, without changing the order.\n    '''\n    new_list = []\n    for x in set_list:\n        new_list.append(x)\n    return new_list\n    \ndef list_subset(list_list, subset):\n    '''\n    Write a function to find all the indices of the given subset in the given list.\n    '''\n    subset_list = []\n    for x in range(len(list_list)):\n        if list_list[x] in subset:\n            subset_list.append(x)\n    return subset_list\n    \ndef dict_subset(dict_list, subset):\n    '''\n    Write a function to find all the indices of the given subset in the given dictionary.\n    '''\n    subset_list = []\n    for x in dict_list:\n        if x in subset:\n            subset_list.append(x)\n    return subset_list\n    \ndef string_subset(string_list, subset):\n    '''\n    Write a function to find all the indices of the given subset in the given string.\n    '''\n    subset_list = []\n    for x in range(len(string_list)):\n        if string_list[x] in subset:\n            subset_list.append(x)\n    return subset_list\n    \ndef list_subset_list(list_list, subset):\n    '''\n    Write a function to find all the indices of the given subset in the given list.\n    '''\n    subset_list = []\n    for x in range(len(list_list)):\n        if list_list[x] in subset:\n            subset_list.append(x)\n    return subset_list\n    \ndef set_subset_list(set_list, subset):\n    '''\n    Write a function to find all the indices of the given subset in the given set.\n    '''\n    subset_list = []\n    for x in set_list:\n        if x in subset:\n            subset_list.append(x)\n    return subset_list\n    \ndef dict_subset_list(dict_list, subset):\n    '''\n    Write a function to find all the indices of the given subset in the given dictionary.\n    '''\n    subset_list = []\n    for x in dict_list:\n        if x in subset:\n            subset_list.append(x)\n    return subset_list\n    \ndef string_subset_list(string_list, subset):\n    '''\n    Write a function to find all the indices of the given subset in the given string.\n    '''\n    subset_list = []\n    for x in range(len(string_list)):\n        if string_list[x] in subset:\n            subset_list.append(x)\n    return subset_list\n    \ndef list_union(list_list):\n    '''\n    Write a function to find the union of the given list.\n    '''\n    union = []\n    for x in list_list[0]:\n        if x not in union:\n            union.append(x)\n    for x in range(1, len(list_list)):\n        for y in list_list[x]:\n            if y not in union:\n                union.append(y)\n    return union\n    \ndef dict_union(dict_list):\n    '''\n    Write a function to find the union of the given dictionary.\n    '''\n    union = {}\n    for x in dict_list[0]:\n        if x not in union:\n            union[x] = 1\n    for x in range(1, len(dict_list)):\n        for y in dict_list[x]:\n            if y not in union:\n                union[y] = 1\n    return union\n    \ndef string_union(string_list):\n    '''\n    Write a function to find the union of the given string.\n    '''\n    union = \"\"\n    for x in string_list:\n        union += x\n    return union\n    \ndef list_intersect(list_list):\n    '''\n    Write a function to find the intersection of the given list.\n    '''\n    intersect = []\n    for x in list_list[0]:\n        if x in intersect:\n            return intersect\n    for x in range(1, len(list_list)):\n        if list_list[0][x] in intersect:\n            continue\n        else:\n            intersect.append(list_list[0][x])\n    return intersect\n    \ndef dict_intersect(dict_list):\n    '''\n    Write a function to find the intersection of the given dictionary.\n    '''\n    intersect = {}\n    for x in dict_list[0]:\n        if x in intersect:\n            continue\n        else:\n            intersect[x] = 1\n    for x in range(1, len(dict_list)):\n        for y in dict_list[x]:\n            if y in intersect:\n                continue\n            else:\n                intersect[y] = 1\n    return intersect\n    \ndef string_intersect(string_list):\n    '''\n    Write a function to find the intersection of the given string.\n    '''\n    intersect = \"\"\n    for x in string_list:\n        intersect += x\n    return intersect\n    \ndef list_difference"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for item in tuple_list:\n        total += sys.getsizeof(item)\n    return total\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for x in tuple_list:\n        size += sys.getsizeof(x)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    a = 0\n    b = 0\n    while a<len(arr1) and b<len(arr2):\n        if arr1[a]<arr2[b]:\n            a += 1\n        else:\n            b += 1\n    if k>=0:\n        if a>=k:\n            return arr1[a-k]\n        else:\n            return arr2[b-k]\n    else:\n        if k<0:\n            if b-k<0:\n                return arr2[b+k]\n            else:\n                return arr1[a+k]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    import sys\n    n = sys.maxsize\n    while len(arr1) > 0 and len(arr2) > 0:\n        if arr1[0] < arr2[0]:\n            arr1.pop(0)\n        else:\n            arr2.pop(0)\n    if len(arr1) == 0:\n        if k > len(arr2):\n            return -1\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        if k > len(arr1):\n            return -1\n        return arr1[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1 = 0\n    idx2 = 0\n    while idx2 < len(arr2) and idx1 < len(arr1):\n        if arr2[idx2] < arr1[idx1]:\n            idx2 += 1\n        elif arr2[idx2] > arr1[idx1]:\n            idx1 += 1\n        else:\n            if k == 1:\n                return 1\n            elif k == 2:\n                return idx2 + 1\n            else:\n                return idx1 + 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i < len(arr1):\n        return arr1[i]\n    return arr2[j]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    kth = -1\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            kth = arr1[i]\n            i += 1\n            j += 1\n    \n    return kth\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_start = 0\n    arr1_end = len(arr1) - 1\n    arr2_start = 0\n    arr2_end = len(arr2) - 1\n    while arr1_end >= arr1_start:\n        if arr1_end - arr1_start <= 1:\n            if arr1_start == arr1_end:\n                if arr2_start == arr2_end:\n                    if arr1[arr1_end] == arr2[arr2_end]:\n                        return arr1[arr1_end]\n                    else:\n                        return -1\n                else:\n                    return arr2[arr2_end]\n            else:\n                if arr2[arr2_end] == arr2[arr2_start]:\n                    return arr2[arr2_end]\n                else:\n                    return -1\n        mid_1 = (arr1_start + arr1_end) // 2\n        mid_2 = (arr2_start + arr2_end) // 2\n        # print(mid_1, mid_2)\n        if arr1[mid_1] == arr2[mid_2]:\n            if k > mid_1 + mid_2:\n                arr1_end = mid_1\n            else:\n                arr2_end = mid_2\n            continue\n        elif arr1[mid_1] < arr2[mid_2]:\n            arr1_start = mid_1 + 1\n            arr1_end = mid_1\n            arr2_start = mid_2\n        else:\n            arr2_start = mid_2 + 1\n            arr2_end = mid_2\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr1[mid] < arr2[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr1[low]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    \n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    i, j = 0, 0\n    \n    while j < len(arr1) and i < len(arr2):\n        if arr1[j] < arr2[i]:\n            k -= 1\n            if k == 0:\n                return arr1[j]\n            j += 1\n        else:\n            k -= 1\n            i += 1\n    \n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    #min_idx = get_min_idx(arr1, arr2)\n    #return find_k_elements(arr1, arr2, k, min_idx)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # a1 = sorted(arr1)\n    # a2 = sorted(arr2)\n    # return a1[k-1] if k <= len(a1) else a2[k-1]\n    i = 0\n    j = 0\n    while True:\n        if j >= len(arr2):\n            return arr1[i]\n        if i >= len(arr1):\n            return arr2[j]\n        if arr1[i] > arr2[j]:\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            return arr1[i]\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    t = number\n    while number>0:\n        number = number//10\n        t = t*number\n    if t==number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    total = 0\n    for i in num:\n        total += int(i)**3\n    if total == number:\n        print(\"The given number is Armstrong number.\")\n    else:\n        print(\"The given number is not an Armstrong number.\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    n = len(str(number))\n    for i in range(n):\n        sum = sum + (number // (10 ** i) % 10) ** n\n        if number == sum:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return False\n    temp_number = number\n    total = 0\n    while temp_number > 0:\n        reminder = temp_number % 10\n        total = total + reminder ** 3\n        temp_number = temp_number // 10\n    return number == total\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    number = int(number)\n    while number:\n        digit = number%10\n        sum += digit**3\n        number = number//10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    while n!= 0:\n        digit = n % 10\n        sum += digit ** 3\n        n = n // 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number<0:\n        print(\"Please give a positive number\")\n        return \n    sum = 0\n    n = number\n    while n>0:\n        a = n%10\n        sum = sum + pow(a,3)\n        n = n//10\n    if sum == number:\n        print(\"The number is Armstrong\")\n    else:\n        print(\"The number is not Armstrong\")\n    \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    while number > 0:\n        digit = number % 10\n        sum += digit ** 3\n        number //= 10\n    return sum == num\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    final_number = number\n    sum_of_digit = 0\n    while number > 0:\n        digit = number % 10\n        number = number // 10\n        sum_of_digit += digit ** 3\n    if final_number == sum_of_digit:\n        return True\n    else:\n        return False\n    \n    \ndef sum_list(numbers):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the elements in the list.\n    '''\n    return sum(numbers)\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    while number:\n        sum += number % 10\n        number = number // 10\n    return sum == number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #your code here\n    sum_n=0\n    average=0\n    n=number\n    if n==0:\n        return 0\n    if n<0:\n        return \"Wrong Input\"\n    else:\n        for i in range(n):\n            sum_n+=i\n        average=sum_n/n\n        return average\n    \n    \n    \n        \n        \n    \n    \n    \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total = total + count\n        count = count + 1\n    avg = total / number\n    print(f'Sum: {total}, Average: {avg}')\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    number = int(number)\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    while number > 0:\n        sum += number\n        number = number - 1\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    average = sum / n\n    return (sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = input('How many numbers: ')\n    n = int(n)\n    s = 0\n    for i in range(n):\n        x = input('Enter number: ')\n        x = int(x)\n        s = s + x\n    a = s / n\n    print('Sum is: ', s)\n    print('Average is: ', a)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n        average = sum / i\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i + 1\n    return sum, sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    a = 0\n    b = 0\n    i = 1\n    while i <= number:\n        a = a + i\n        i = i + 1\n        print(a)\n    i = 1\n    while i <= number:\n        b = b + i\n        i = i + 1\n    print(b, a)\n    print('The sum of the first {0} natural numbers is {1}'.format(number, a))\n    print('The average of the first {0} natural numbers is {1}'.format(number, (a/number)))\n    return\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2) == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n        "
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # code here\n    return (n%2==0)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n    \nprint(is_Even(10))\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print('even') \n    else : \n        print('odd') \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char = ''\n    max = 0\n    for i in range(0,len(str1)):\n        if str1[i] in str1[i+1:]:\n            if len(str1[i]) > max:\n                max = len(str1[i])\n                char = str1[i]\n    if char:\n        return char\n    else:\n        return 'no repeated char'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str2 = ''\n    str3 = str1.lower()\n    str4 = str3.replace(' ','')\n    for i in range(len(str4)):\n        if str4.count(str4[i]) > 1:\n            str2 = str4[i]\n    return str2\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    arr = [ch for ch in str1]\n    for i, ch in enumerate(arr):\n        if arr.count(ch) > 1:\n            return ch\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\ndef repeated_char(str1):\n    '''\n    Write a python function to find the index of first repeated character in a given string.\n    '''\n    pass\ndef single_char(str1):\n    '''\n    Write a python function to find the index of the first character not repeated in a given string.\n    '''\n    pass\ndef all_lowercase(str1):\n    '''\n    Write a python function to determine if the given string contains only lowercase characters.\n    '''\n    pass\ndef last_two_repeated(str1):\n    '''\n    Write a python function to find the last two characters that repeats in a given string.\n    '''\n    pass\ndef last_occurance(str1):\n    '''\n    Write a python function to find the index of last occurance of a given character in a string.\n    '''\n    pass\ndef is_vowel(str1):\n    '''\n    Write a python function to determine if the given string contains any vowel.\n    '''\n    pass\ndef is_consonant(str1):\n    '''\n    Write a python function to determine if the given string contains any consonant.\n    '''\n    pass\ndef first_word(str1):\n    '''\n    Write a python function to find the index of the first word in a given sentence.\n    '''\n    pass\ndef check_vowel(str1):\n    '''\n    Write a python function to determine if a given string contains any vowel.\n    '''\n    pass\ndef count_lowercase(str1):\n    '''\n    Write a python function to count the number of lowercase characters in a given string.\n    '''\n    pass\ndef count_vowel(str1):\n    '''\n    Write a python function to count the number of vowel characters in a given string.\n    '''\n    pass\ndef index_of_first_lowercase(str1):\n    '''\n    Write a python function to find the index of the first lowercase character in a given string.\n    '''\n    pass\ndef index_of_first_vowel(str1):\n    '''\n    Write a python function to find the index of the first vowel character in a given string.\n    '''\n    pass\ndef count_digits(str1):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    pass\ndef first_number(str1):\n    '''\n    Write a python function to find the first digit of a given string.\n    '''\n    pass\ndef last_number(str1):\n    '''\n    Write a python function to find the last digit of a given string.\n    '''\n    pass\ndef first_duplicate(str1):\n    '''\n    Write a python function to find the index of the first duplicate character in a given string.\n    '''\n    pass\ndef index_of_first_duplicate(str1):\n    '''\n    Write a python function to find the index of the first duplicate character in a given string.\n    '''\n    pass\ndef last_duplicate(str1):\n    '''\n    Write a python function to find the index of the last duplicate character in a given string.\n    '''\n    pass\ndef last_digit(str1):\n    '''\n    Write a python function to find the last digit of a given string.\n    '''\n    pass\ndef first_non_repeating_char(str1):\n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    pass\ndef all_vowels(str1):\n    '''\n    Write a python function to determine if the given string contains any vowel.\n    '''\n    pass\ndef last_two_digits(str1):\n    '''\n    Write a python function to find the last two digits in a given string.\n    '''\n    pass\ndef no_vowels(str1):\n    '''\n    Write a python function to determine if the given string contains any vowel.\n    '''\n    pass\ndef last_number_index(str1):\n    '''\n    Write a python function to find the index of the last digit of a given string.\n    '''\n    pass\ndef last_word_index(str1):\n    '''\n    Write a python function to find the index of the last word in a given sentence.\n    '''\n    pass\ndef last_four_chars(str1):\n    '''\n    Write a python function to find the last four characters in a given string.\n    '''\n    pass\ndef last_four_digits(str1):\n    '''\n    Write a python function to find the last four digits in a given string.\n    '''\n    pass\ndef index_of_first_char(str1):\n    '''\n    Write a python function to find the index of the first character in a given string.\n    '''\n    pass\ndef is_digit(str1):\n    '''\n    Write a python function to determine if the given string contains any digit.\n    '''\n    pass\ndef is_space(str1):\n    '''\n    Write a python function to determine if the given string contains any space character.\n    '''\n    pass\ndef index_of_first_space(str1):\n    '''\n    Write a python function to find the index of the first space character in a given string.\n    '''\n    pass\ndef index_of_first_space_in_string(str1):\n    '''\n    Write a python function to find the index of the first space character in a given string.\n    '''\n    pass\ndef find_nth_occurence(str1, ch, n):\n    '''\n    Write a python function to find the index of the n-th occurence of the character in a given string.\n    '''\n    pass\ndef remove_leading_space(str1):\n    '''\n    Write a python function to remove leading space characters in a given string.\n    '''\n    pass\ndef count_spaces(str1):\n    '''\n    Write a python function to count the number of space characters in a given string.\n    '''\n    pass\ndef count_non_spaces(str1):\n    '''\n    Write a python function to count the number of characters in a given string.\n    '''\n    pass\ndef last_word_index(str1):\n    '''\n    Write a python function to find the index of the last word in a given sentence.\n    '''\n    pass\ndef count_digits(str1):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    pass\ndef find_nth_index(str1, ch, n):\n    '''\n    Write a python function to find the index of the n-th occurence of the character in a given string.\n    '''\n    pass\ndef is_palindrome(str1):\n    '''\n    Write a python function to determine if a given string is a palindrome or not.\n    '''\n    pass\ndef index_of_last_char(str1):\n    '''\n    Write a python function to find the index of the last character in a given string.\n    '''\n    pass\ndef count_non_spaces(str1):\n    '''\n    Write a python function to count the number of characters in a given string.\n    '''\n    pass\ndef count_punctuation(str1):\n    '''\n    Write a python function to count the number of punctuation characters in a given string.\n    '''\n    pass\ndef count_characters(str1):\n    '''\n    Write a python function to count the number of characters in a given string.\n    '''\n    pass\ndef is_alphabet(str1):\n    '''\n    Write a python function to determine if the given string contains any alphabet character.\n    '''\n    pass\ndef is_ascii(str1):\n    '''\n    Write a python function to determine if a given string contains any ascii characters.\n    '''\n    pass\ndef is_letter(str1):\n    '''\n    Write a python function to determine if the given string contains any alphabet character.\n    '''\n    pass\ndef is_ascii_upper(str1):\n    '''\n    Write a python function to determine if a given string contains any ascii upper characters.\n    '''\n    pass\ndef is"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        for j in range(i + 1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return 'None'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1)==0:\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(\"Original string : \", str1)\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in str1[:i]:\n            count += 1\n    if count == 1:\n        return \"First repeated character : \", str1[0]\n    else:\n        return \"No repeated character\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char = \"\"\n    for c in str1:\n        if str1.count(c) > 1:\n            return c\n        else:\n            char = c\n    return char\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for char in str1:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    for i in d.values():\n        if i > 1:\n            return(list(d.keys())[list(d.values()).index(i)])\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s=str1\n    x=s.split()\n    for i in x:\n        y=len(i)\n        if y>1:\n            for j in range(1,y):\n                if i[0]==i[j]:\n                    return(i[0])\n    return(\"Not Found\")\n    \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if str(i) == str(i)[::-1]:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        raise ValueError(f\"Error, invalid input - {n}\")\n    ludic = []\n    # Loop through range from 1 to n.\n    for i in range(1, n+1):\n        # Get the number's digits.\n        digits = str(i)\n        # Convert each digit into an int.\n        for j in digits:\n            # Check to see if it's a valid int.\n            if not int(j) in range(0, 10):\n                raise ValueError(f\"Error, invalid input - {n}\")\n        # Check to see if the sum of the digits is 10.\n        if (sum(int(x) for x in digits)) == 10:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(2,n) if is_lucid(x)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    def is_ludicrous(n):\n        '''\n        Write a function to determine if a number is a lucid number.\n        '''\n        n_string = str(n)\n        l = len(n_string)\n        if l == 1 or l == 2:\n            return False\n        else:\n            if l == 3:\n                return True\n            else:\n                m = l // 2\n                for i in range(m):\n                    if n_string[i]!= n_string[l - i - 1]:\n                        return False\n                return True\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    while n >= 2:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        lucid.append(n)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        l = []\n        for j in range(1, i):\n            if i % j == 0:\n                l.append(j)\n        if sum(l) == i:\n            ludic.append(i)\n    return ludic\n    \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(2,n+1):\n        if is_ludic(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return \",\".join(str(i) for i in range(1,n) if is_ludic(i))\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if is_ludic(i):\n            ludic.append(i)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 0\n    while len(ludic_numbers) < n:\n        ludic_numbers.append(i)\n        i += i\n    return ludic_numbers\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    return''.join(s.split()[::-1])\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # O(n) time | O(n) space\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s == \"\":\n        return s\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_words = s.split(\" \")\n    s_words = s_words[::-1]\n    s = \" \".join(s_words)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n    \nif __name__ == '__main__':\n    s = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\n    s = reverse_words(s)\n    print(s"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reversed_words = s.split()\n    reversed_words.reverse()\n    return \" \".join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split(\" \")\n    return \" \".join(s_list[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return \" \".join(s)\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        print('The number is not prime.')\n        return False\n    elif num == 2:\n        print('The number is prime.')\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                print('The number is not prime.')\n                return False\n        print('The number is prime.')\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for x in range(2,int(num**0.5)+1):\n        if num % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num<=1:\n        return False\n    if num==2:\n        return True\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(f\"{num} is not a prime number.\")\n                break\n        else:\n            print(f\"{num} is a prime number.\")\n    else:\n        print(f\"{num} is not a prime number.\")\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if num % i == 0:\n                print(str(num) +'is not a prime number')\n                break\n        else:\n            print(str(num) +'is a prime number')\n    else:\n        print(str(num) +'is not a prime number')\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # Your code here\n    rad = degree * math.pi / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*3.14/180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    lit_subs = re.finditer(pattern, text)\n    lits = {}\n    for lit in lit_subs:\n        lits[lit.start()] = lit.group()\n    return lits\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    # Get the text and pattern\n    text = text\n    pattern = pattern\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #Find all occurences of pattern\n    regex_pattern = re.compile(pattern)\n    return regex_pattern.findall(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    \n    res = re.search(pattern,text)\n    if res!= None:\n        if len(res.group()) == len(pattern):\n            return res.group(), res.start(), res.end()\n        else:\n            return res.group()[0:len(res.group())], res.start(), res.end()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    for i in range(0, len(text)):\n        literal = pattern.findall(text[i:])\n        if literal!= []:\n            return i, i+len(literal[0]), len(literal[0])\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_matches = re.finditer(pattern,text)\n    literal_list = []\n    start = 0\n    end = 0\n    for i in pattern_matches:\n        start = i.start()\n        end = i.end()\n        literal_list.append((text[start:end],start,end))\n    return literal_list\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.findall(text)\n    if match:\n        substring = match[0]\n        start_index = match[0][0]\n        end_index = match[0][1]\n        return substring, start_index, end_index\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #pass\n    p = re.compile(pattern)\n    m = p.search(text)\n    if m:\n        return m.group()\n    else:\n        return None, -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return False\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2) + bell_Number(n - 3)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = int(n)\n    a = 0\n    b = 1\n    c = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2,n):\n            a = a+b\n            b = a\n            c = c+a\n            a = c\n        return c\n        \n        \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    return bell_Number(n-1) + 2*bell_Number(n-2) + 3*bell_Number(n-3) + 5*bell_Number(n-4) + 8*bell_Number(n-5) + 13*bell_Number(n-6) + 21*bell_Number(n-7) + 34*bell_Number(n-8) + 55*bell_Number(n-9) + 89*bell_Number(n-10) + 144*bell_Number(n-11) + 233*bell_Number(n-12) + 377*bell_Number(n-13) + 610*bell_Number(n-14) + 987*bell_Number(n-15) + 1597*bell_Number(n-16) + 2584*bell_Number(n-17) + 4181*bell_Number(n-18) + 6561*bell_Number(n-19) + 10946*bell_Number(n-20) + 20269*bell_Number(n-21) + 35370*bell_Number(n-22) + 56765*bell_Number(n-23) + 99872*bell_Number(n-24) + 144695*bell_Number(n-25) + 274392*bell_Number(n-26) + 449470*bell_Number(n-27) + 708685*bell_Number(n-28) + 1134912*bell_Number(n-29) + 1772595*bell_Number(n-30) + 3565896*bell_Number(n-31) + 5704020*bell_Number(n-32) + 9252084*bell_Number(n-33) + 15173629*bell_Number(n-34) + 27965070*bell_Number(n-35) + 48395116*bell_Number(n-36) + 83021498*bell_Number(n-37) + 139966881*bell_Number(n-38) + 230890737*bell_Number(n-39) + 3812593565*bell_Number(n-40)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    if n == 1: \n        return 1\n    \n    if n == 2: \n        return 2\n    \n    return bell_Number(n - 1) + bell_Number(n - 2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    res = 1\n    for i in range(1,n+1):\n        res = res * (n+1-i) / i \n    return res \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1,n):\n        bell = bell * (i+1)\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_fact = bell_n_fact(n)\n    bell_number = 0\n    for i in range(1,n+1):\n        bell_number = bell_number + i * bell_fact[i-1]\n    print(\"The nth Bell Number is \",bell_number)\n    return\ndef bell_n_fact(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_fact = [1]\n    for i in range(1,n+1):\n        bell_fact.append(0)\n        for j in range(1,i+1):\n            bell_fact[i] = bell_fact[i] + (bell_fact[j-1] * j)\n    return bell_fact\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def Bell(n):\n        if n <= 2:\n            return n - 1\n        if n >= 3:\n            return Bell(n-1) + 2 * Bell(n-2)\n    return Bell(n)\n    \ndef UnivaluedTree(root):\n    '''\n    Write a python function to check if the given tree is univalued or not.\n    '''\n    def uni(root):\n        if root is None:\n            return True\n        if root.left is None and root.right is None:\n            return True\n        if root.left is not None and root.left.val!= root.val:\n            return False\n        if root.right is not None and root.right.val!= root.val:\n            return False\n        return uni(root.left) and uni(root.right)\n    return uni(root)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 2\n    if (n == 0):\n        return 0\n    for i in range(n-1):\n        bell = bell + 1\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0: \n        return 1\n    else: \n        return bell_Number(n-1)*(n-1)+bell_Number(n-2)*(n-2) \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Approach:\n    # 1. Iterate over the list until k == 0\n    # 2. Remove the kth element\n    # 3. Iterate again and remove all the remaining elements\n    # 4. Append the kth element to the list\n    # 5. Return the list\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    # if not len(list1) or not len(list2):\n    #     return list1\n    # for i in range(k):\n    #     while list1[0] == list2[0]:\n    #         list2.pop(0)\n    #     list1.pop(0)\n    # return list1 + [list2[0]]\n    \n    # Approach 2:\n    # 1. First, we need to understand the idea of reversing the list\n    # 2. The idea is that we need to reverse the list from L-k to 1.\n    # 3. Now we need to know how many elements we have to skip.\n    # 4. We need to know how many elements we have to skip.\n    # 5. Time Complexity: O(n)\n    # 6. Space Complexity: O(1)\n    # 7. Algorithm:\n    # Time:\n    # Space:\n    \n    if not len(list1) or not len(list2):\n        return list1\n    \n    # reversing the list\n    if L < 0:\n        i = -1\n    else:\n        i = 0\n    while L > i and i < len(list1):\n        list2.append(list1.pop(0))\n        i += 1\n    \n    return list1 + list2"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    temp = list1.copy()\n    temp.remove(L)\n    return temp\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Using pop()\n    # list1.pop(L)\n    # return list1\n    # Using list()\n    return list(list1)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    # Your code goes here\n    return list1.pop(L)\n    \ndef remove_element_using_pop(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    # Your code goes here\n    return list1.pop(L)\n    \n    \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list_length = len(list1)\n    if list_length >= 1 and list_length < L:\n        return list1[0:L-1]\n    elif list_length == 0:\n        return []\n    else:\n        return list1[0:L-1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L is None:\n        return L\n    if len(list1) == 0:\n        return L\n    for i in range(0, len(list1)):\n        if list1[i] == L:\n            list1.remove(L)\n            return list1\n        if i == len(list1)-1:\n            return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Write your code here\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    # Implement your solution here\n    for element in test_list:\n        if max_val < element[N-1]:\n            max_val = element[N-1]\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_so_far = -999\n    for row in test_list:\n        if max_so_far < max(row[:N]):\n            max_so_far = max(row[:N])\n            \n    return max_so_far\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #sample test cases\n    assert max_of_nth([[5,4,3,2], [10,8,9,1], [15,12,11,6], [18,16,14,7]], 2) == 18\n    assert max_of_nth([[1,3,4,2], [2,4,3,4], [5,3,2,1], [10,3,1,2]], 2) == 10\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in range(0,len(test_list)):\n        max_list.append(max(test_list[i]))\n    return max(max_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #    assert len(test_list) > 0 and len(test_list[0]) > 0, 'The list is empty.'\n    assert N > 0, 'N is zero or negative'\n    assert N <= len(test_list), 'N is greater than the number of rows.'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = []\n    \n    for i in range(len(test_list)):\n        result.append(max(test_list[i][N]))\n        \n    return result\n    \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_nth_col = []\n    for i in range(len(test_list)):\n        max_nth_col.append(max(test_list[i]))\n    return max_nth_col\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list or not test_list[0]:\n        return -1\n    \n    result = -1\n    for i in range(N, len(test_list)):\n        if result == -1:\n            result = test_list[i][N-1]\n        else:\n            result = max(result, test_list[i][N-1])\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    l = len(test_list)\n    if N > l:\n        return \"Out of range\"\n    n_max = -9999\n    for i in range(l):\n        if n_max < test_list[i][N-1]:\n            n_max = test_list[i][N-1]\n    return n_max\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column = 0\n    result = 0\n    while column < N:\n        tmp = max(test_list[0])\n        result = tmp if tmp > result else result\n        test_list.pop(0)\n        column += 1\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([lst[i][0], lst[i][1]])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(0, len(lst)):\n        new_lst.append(lst[i][0])\n        new_lst.append(lst[i][1])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    while len(lst) > 0:\n        if len(lst) == 1:\n            new_lst.append(lst.pop(0))\n        else:\n            first_element = lst.pop(0)\n            second_element = lst.pop(0)\n            new_lst.append([first_element[0],second_element[1]])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for l in lst:\n        if len(merged) == 0:\n            merged.append(l)\n        else:\n            if merged[-1][0] == l[0]:\n                merged[-1].append(l[1])\n            else:\n                merged.append(l)\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in lst:\n        merged_lst.append(i[0])\n        merged_lst.append(i[1])\n    return merged_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    newlst =[]\n    if len(lst)==0:\n        return lst\n    else:\n        newlst =[lst[0]]\n        for i in range(1,len(lst)):\n            if lst[i][0] > lst[i-1][0]:\n                newlst.append(lst[i])\n            else:\n                newlst.append(lst[i-1])\n        return newlst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # your code here\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([lst[i][0],lst[i][1]])\n    return new_lst\n    \nprint(merge([[1, 4], [4, 5], [1, 5]]))"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return lst[0] + lst[1]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    temp = []\n    i = 0\n    for k in lst:\n        if i == 0:\n            temp.append(k[0])\n            temp.append(k[1])\n        i += 1\n    return temp\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst, key=lambda x: x[0])\n    lst.sort(key=lambda x: x[1])\n    return lst\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(1,len(test_list)):\n        test_list[i] = test_list[i] + test_list[i-1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_val = 0\n    for val in test_list:\n        sum_val = sum_val + val\n    print(sum_val)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(1,len(test_list)):\n        test_list[i] += test_list[i-1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    import operator\n    return sum(test_list, 0)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    i = 0\n    for i in range(len(test_list)):\n        cummulative_sum = test_list[i] + cummulative_sum\n        i += 1\n    print(cummulative_sum)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum = cum_sum + test_list[i]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return (sum(x)/len(x) for x in zip(*nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(sum(x) / len(x) for x in nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # method_1\n    avg = 0\n    result = []\n    for i in nums:\n        avg = sum(i) / len(i)\n        result.append(avg)\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialise a list for storing the average value for each tuple\n    average = []\n    # Iterate through each tuple and add each value to the list\n    for each in nums:\n        average.append(sum(each) / len(each))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    while count < len(nums):\n        total += nums[count]\n        count += 1\n    average = total/len(nums)\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(sum(t) / len(t) for t in nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for num in nums:\n        total = total + num[0]\n    average = total / len(nums)\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_tuple = []\n    for i in range(len(nums)):\n        new_tuple.append(sum(nums[i]) / len(nums[i]))\n    return tuple(new_tuple)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # my solution\n    return tuple(map(tuple, sum(zip(*nums), ())))\n    # better solution\n    return tuple(map(sum, nums))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    tup_sum = []\n    \n    # tup_sum = (tup1[0] % tup2[0], tup1[1] % tup2[1])\n    for i in range(len(tup1)):\n        tup_sum.append(tup1[i] % tup2[i])\n    \n    return tup_sum\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Length of tuples should be equal'\n    \n    tup1_modified = []\n    for i in range(len(test_tup1)):\n        tup1_modified.append(test_tup1[i]%test_tup2[i])\n    return tuple(tup1_modified)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    try:\n        if len(test_tup1)!= len(test_tup2):\n            return None\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Both tuples should have the same length.')\n    else:\n        out = ()\n        for i in range(len(test_tup1)):\n            out += (test_tup1[i] % test_tup2[i], )\n        return out\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append((test_tup1[i] % test_tup2[i]))\n    return tuple(test_list)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = tuple(map(int, test_tup1))\n    test_tup2 = tuple(map(int, test_tup2))\n    return tuple(map(lambda x, y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min_steps = float('inf')\n    start_point = (0,0)\n    for i in range(1, steps):\n        if start_point[0] + i*d < steps and start_point[1] + i*d < steps:\n            if start_point[0] + (i+1)*d < steps and start_point[1] + (i+1)*d < steps:\n                min_steps = i + 1\n                start_point = (start_point[0] + (i+1)*d, start_point[1] + (i+1)*d)\n    if min_steps!= float('inf'):\n        print(min_steps)\n    else:\n        print(\"Invalid\")\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d == 1:\n        return 1\n    else:\n        return steps - 1 + min_Jumps(steps, d - 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 1\n    if d == 0:\n        return jumps\n    x = steps[0]\n    for i in range(1, len(steps)):\n        x = min(x, steps[i]-d)\n        if x == 0:\n            jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if steps <= 1:\n        return steps\n    if d <= steps:\n        return 1\n    if d == 2:\n        return 2\n    return 2 + min_Jumps(steps - 1, d // 2)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 1\n    if d <= 0: \n        return 0\n    return min_Jumps(steps, d-steps) + min_Jumps(steps, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x,y = 0,0\n    steps = 0\n    while(x,y)!= (d,0):\n        steps += 1\n        #check for conditions and move to next position\n        if x==0 and y ==0:\n            return -1\n        if x == 0:\n            if y>0:\n                y = y-1\n        elif x>0:\n            x = x-1\n        else:\n            x = x+1\n            if y>0:\n                y = y-1\n    return steps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return (steps + 1 - d + 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    j = 0\n    for i in range(1, steps+1):\n        if i == d and (i + d) <= steps:\n            j += 1\n        elif (i + d) > steps:\n            break\n        elif i + d <= steps:\n            j += 1\n            if i + 2*d >= steps:\n                break\n            else:\n                if (i + 2*d) <= steps:\n                    j += 1\n    return j\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    for i in range(1, steps + 1):\n        if (i - 1) * d < 0:\n            return J\n        else:\n            J = J + 1\n    return J\n    \ndef count_jumps(steps, d):\n    '''\n    Write a function to count the number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 1\n    if (steps - 1) * d < 0:\n        return 0\n    else:\n        return 1 + count_jumps(steps - 1, d)\n        \ndef min_Jumps_efficient(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    while (J < steps) and (d >= 0):\n        J = J + 1\n        d = d - (J - 1)\n    return J\n    \ndef count_jumps_efficient(steps, d):\n    '''\n    Write a function to count the number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 1\n    if (steps - 1) * d < 0:\n        return 0\n    else:\n        return 1 + count_jumps_efficient(steps - 1, d)\n        \ndef max_min_Jumps(steps, d):\n    '''\n    Write a function to check for the maximum number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    while (J < steps) and (d >= 0):\n        J = J + 1\n        d = d - (J - 1)\n    return J\n    \ndef count_jumps_efficient_2(steps, d):\n    '''\n    Write a function to count the number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 1\n    if (steps - 1) * d < 0:\n        return 0\n    else:\n        return 1 + count_jumps_efficient_2(steps - 1, d)\n        \ndef max_min_Jumps_efficient(steps, d):\n    '''\n    Write a function to check for the maximum number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    while (J < steps) and (d >= 0):\n        J = J + 1\n        d = d - (J - 1)\n    return J\n    \ndef max_min_jumps(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps(steps - 1, d)\n    \ndef max_min_jumps_efficient(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    while (J < steps) and (d >= 0):\n        J = J + 1\n        d = d - (J - 1)\n    return J\n    \ndef max_min_jumps_efficient_2(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 1\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_2(steps - 1, d)\n        \ndef max_min_jumps_efficient_3(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_3(steps - 1, d)\n        \ndef max_min_jumps_efficient_4(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 1\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_4(steps - 1, d)\n    \ndef max_min_jumps_efficient_5(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_5(steps - 1, d)\n    \ndef max_min_jumps_efficient_6(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 1\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_6(steps - 1, d)\n    \ndef max_min_jumps_efficient_7(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_7(steps - 1, d)\n    \ndef max_min_jumps_efficient_8(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 1\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_8(steps - 1, d)\n    \ndef max_min_jumps_efficient_9(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_9(steps - 1, d)\n    \ndef max_min_jumps_efficient_10(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 1\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_10(steps - 1, d)\n    \ndef max_min_jumps_efficient_11(steps, d):\n    '''\n    Write a function to count the maximum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 1\n    if (steps - 1) * d < 0:\n        return 1\n    else:\n        return 1 + max_min_jumps_efficient_11(steps - 1"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return 0\n    if steps >= d:\n        return 1\n    return min_Jumps(steps - d, d) + min_Jumps(steps - d, d)\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    i = 0\n    j = 0\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list_sum = []\n    for i in range(len(nums1)):\n        list_sum.append(nums1[i]/nums2[i])\n    return list_sum\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    elif len(nums2) == 0:\n        return nums1\n    else:\n        nums1_copy = nums1[:]\n        nums2_copy = nums2[:]\n        return divide_list(nums1_copy, nums2_copy)\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    len_1 = len(nums1)\n    len_2 = len(nums2)\n    if len_1 < len_2:\n        temp = nums1\n        nums1 = nums2\n        nums2 = temp\n    index = 0\n    while index < len_1:\n        nums1[index] = nums1[index] / nums2[index]\n        index += 1\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Empty list\n    result = []\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1.extend(nums2)\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)>len(nums2):\n        small = nums2\n        big = nums1\n    else:\n        small = nums1\n        big = nums2\n    if len(small)==1:\n        return [small[0]//big[0]]\n    else:\n        for i in range(len(big)):\n            small[i]=small[i]//big[i]\n    return small\n    \n    \n    \n    \n    \n    \n    \ndef rev_list(nums):\n    '''\n    Write a function to reverse a list.\n    '''\n    if len(nums) == 0:\n        return []\n    return [nums[-1]]+rev_list(nums[:-1])\n    \n    \n    \n    \n    \n    \ndef is_balanced(s):\n    '''\n    Write a function to check if a string is balanced\n    (i.e., has an equal number of '(' and ')' )\n    '''\n    open = ['(','{','[']\n    close = [')','}',']']\n    l = 0\n    r = 0\n    for i in range(len(s)):\n        if s[i] in open:\n            l+=1\n        elif s[i] in close:\n            r+=1\n    if l == r:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \ndef max_window(str, n):\n    '''\n    Write a function that takes a string and a window size n, and returns the maximum window.\n    The string will only contain lowercase letters, and the window will be of size n.\n    '''\n    d = dict()\n    for i in range(n):\n        d[str[i]] = i\n    i = 0\n    res = \"\"\n    curr_max = 0\n    while i<len(str):\n        if str[i] in d:\n            curr_max = max(curr_max,i-d[str[i]])\n        d[str[i]] = i\n        i += 1\n        if curr_max == len(str)-n:\n            res = res+str[d[str[i-1]]+1:d[str[i-1]]+curr_max+1]\n    return res\n    \n    \n    \n    \n    \ndef get_kth_digit(k):\n    '''\n    Write a function that takes a positive integer and returns the kth digit.\n    '''\n    s = str(k)\n    l = len(s)\n    if k == 0:\n        return 0\n    if k>=l:\n        return int(s[-1])\n    else:\n        return int(s[-1-k])\n    \n    \n    \n    \n    \ndef find_max_repeat(s):\n    '''\n    Write a function that returns the maximum number of repetitions of a substring in a given string.\n    '''\n    start = 0\n    max_rep = 0\n    temp = 0\n    for i in range(len(s)):\n        temp += 1\n        if s[i] == s[start]:\n            if i - start > max_rep:\n                max_rep = i - start\n        else:\n            start = i\n    return max_rep\n    \n    \n    \n    \n    \ndef calc_triangle(n):\n    '''\n    Write a function that returns the number of ways that a given number can be expressed as the sum of\n    either two numbers that are in a given triangle or one of the edges of the triangle.\n    '''\n    def count_ways(n,p):\n        if n < p:\n            return 0\n        if n == p:\n            return 1\n        return count_ways(n-p,p)+count_ways(n-p,p+1)\n    return count_ways(n,0)\n    \n    \n    \n    \n    \ndef count_vowels(s):\n    '''\n    Write a function that takes a string and returns the number of vowels in that string.\n    '''\n    vowels = ['a','e','i','o','u']\n    c = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            c+=1\n    return c\n    \n    \n    \n    \n    \ndef count_digits(s):\n    '''\n    Write a function that takes a string and returns the number of digits in that string.\n    '''\n    s = s.split()\n    n = 0\n    for i in s:\n        n+=len(i)\n    return n\n    \n    \n    \n    \n    \ndef first_in_line(s):\n    '''\n    Write a function that takes a list of strings and returns the first one that starts with\n    an alphabetic character.\n    '''\n    if s[0].isalpha():\n        return s[0]\n    return first_in_line(s[1:])\n    \n    \n    \n    \n    \ndef pivot_index(lst):\n    '''\n    Write a function that takes a list and returns the pivot index (i.e., the index where the list would be split\n    in half) so that the list would form an isomorphic binary tree.\n    '''\n    i = 0\n    for j in range(len(lst)):\n        if lst[j]!= i:\n            i+=1\n    return i\n    \n    \n    \n    \n    \ndef digitize(s,k):\n    '''\n    Write a function that takes a string and an integer k and returns a new string that is a digitized version of the string.\n    '''\n    s = list(s)\n    for i in range(len(s)):\n        s[i] = int(s[i])\n        if s[i]>=10:\n            s[i]=10\n        if s[i]<0:\n            s[i] = -s[i]\n    s = str(s)\n    for i in range(len(s)):\n        s = s.replace(s[i],str(k))\n    return int(s)\n    \n    \n    \n    \n    \n    \ndef reverse_each_word(s):\n    '''\n    Write a function that takes a string and returns a new string where each word in the original string is reversed.\n    '''\n    s = s.split()\n    res = []\n    for i in range(len(s)):\n        res.append(s[i][::-1])\n    return''.join(res)\n    \n    \n    \n    \n    \ndef str_float_int(s):\n    '''\n    Write a function that takes a string and returns a float and an integer.\n    '''\n    s = s.split()\n    f = float(s[0])\n    i = int(s[1])\n    return f, i\n    \n    \n    \n    \n    \ndef decimal_to_any_base(n,b):\n    '''\n    Write a function that takes a non-negative integer and converts it to any base that can be represented without leading zeros.\n    '''\n    if n==0:\n        return str(n)\n    if n<0:\n        return '-'+decimal_to_any_base(-n,b)\n    if n<=1:\n        return str(n)\n    def base_to_base(n,b1,b2):\n        if n==0:\n            return str(b1)\n        if n<0:\n            return '-'+base_to_base(-n,b1,b2)\n        if n==1:\n            return str(b1)\n        return base_to_base(n//b1,b1,b2)+str(n%b1)\n    return base_to_base(n,b,10)\n    \n    \n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes a string and returns True if it is a palindrome,\n    False otherwise.\n    '''\n    s = s.lower()\n    for i in range(len(s)//2):\n        if s[i]!= s[len(s)-i-1]:\n            return False\n    return True\n    \n    \n    \n    \n    \ndef is_palindrome_recursive(s):"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n1=len(nums1)\n    n2=len(nums2)\n    res=[]\n    for i in range(n1):\n        res.append(nums1[i]/nums2[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    temp = []\n    i = 0\n    j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] <= nums2[j]:\n            temp.append(nums1[i])\n            i += 1\n        else:\n            temp.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        temp.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        temp.append(nums2[j])\n        j += 1\n    return temp\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    ret = \"\"\n    num_list = ['0','1','2','3','4','5','6','7','8','9']\n    for i in test_str:\n        if i in num_list:\n            ret += i\n    for i in range(len(ret)):\n        if ret[i] not in num_list:\n            ret = ret[:i] + ret[i] + ret[i+1:]\n    return ret\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    num_list = []\n    test_str = test_str.split()\n    for num in test_str:\n        if num.isnumeric():\n            num_str += num\n    for num in num_str:\n        num_list.append(num)\n    return num_list\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    from itertools import accumulate\n    return ''.join(list(accumulate(test_str, lambda x,y: x + y))[::-1])\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    # print(test_str)\n    for i in range(len(test_str)):\n        for j in range(len(test_str)-1):\n            if test_str[j] > test_str[j+1]:\n                test_str[j], test_str[j+1] = test_str[j+1], test_str[j]\n    return \" \".join(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in range(len(test_str)):\n        if not test_str.isdigit():\n            test_str = test_str + test_str\n        else:\n            continue\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    new_str = \"\"\n    for i in range(len(test_str)):\n        if test_str[i].isalpha():\n            new_str += test_str[i]\n        else:\n            new_str += test_str[i]\n    for i in range(len(new_str)):\n        if new_str[i].isalpha():\n            count += 1\n    new_str = new_str[count:] + new_str[:count]\n    print(new_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    if not isinstance(test_str, str):\n        raise ValueError('The input has to be a string')\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # 1. Take the length of the string\n    length = len(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res_str = ''.join(sorted(test_str.split(), key=int))\n    res_str += ''.join(sorted(test_str.split(), key=int, reverse=True))\n    return res_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = []\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n    num.reverse()\n    test_str = \"\".join(num) + test_str\n    return test_str\n    \ndef main():\n    print(\"Reverse a String\")\n    test_str = \"This is a string\"\n    print(test_str)\n    result = move_num(test_str)\n    print(result)\n    print(\"************************\")\n    print(\"Reverse a String 2\")\n    test_str = \"  this is a string  \"\n    print(test_str)\n    result = move_num(test_str)\n    print(result)\n    print(\"************************\")\n    print(\"Reverse a String 3\")\n    test_str = \"woahWah\"\n    print(test_str)\n    result = move_num(test_str)\n    print(result)\n    print(\"************************\")\n    print(\"Reverse a String 4\")\n    test_str = \"345234\"\n    print(test_str)\n    result = move_num(test_str)\n    print(result)\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a: return None\n    length = len(a)\n    res = []\n    for i in range(length):\n        for j in range(i+1, length):\n            if (a[i] % a[j]) == 0 or (a[j] % a[i]) == 0:\n                if not res or len(res) < len(a[i:j+1]):\n                    res = a[i:j+1]\n    return res\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s=0\n    \n    for i in range(len(a)):\n        \n        for j in range(i+1,len(a)):\n            \n            if a[j]%a[i]==0:\n                s=s+1\n    return s\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset_size(a):\n        n = len(a)\n        arr = [-1]*n\n        res = -1\n        for i in range(n):\n            s = set(arr)\n            for j in range(i):\n                if (a[j]%a[i] == 0) and s.__contains__(a[i]//a[j]):\n                    arr[i] = a[j]//a[i]\n                    break\n            if arr[i]!= -1:\n                res = max(res, arr[i])\n        return res\n    return largest_subset_size(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = 1\n            for k in range(i):\n                if a[k]%a[j] == 0 and dp[i][k]!= 0:\n                    dp[i][j] = max(dp[i][j], dp[k][j]+1)\n    return dp[0][n-1]\n    \ndef permutation(a):\n    '''\n    Write a function that takes a non-empty array and returns the number of permutations that it contains.\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % a[j] == 0 and max_size < a[i] // a[j]:\n                max_size = a[i] // a[j]\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    sorted_list = sorted(a)\n    start = 0\n    end = len(sorted_list) - 1\n    largest_subset_size = 0\n    while start < end:\n        if sorted_list[start] % sorted_list[end] == 0:\n            largest_subset_size += 1\n            start += 1\n        else:\n            end -= 1\n    if largest_subset_size == 0:\n        largest_subset_size = len(sorted_list)\n    return largest_subset_size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 1:\n        return 1\n    if len(a) == 2:\n        return max(a)\n    l = [0 for _ in range(len(a))]\n    l[0] = 1\n    l[1] = 1 if a[0]%a[1] == 0 else 0\n    for i in range(2, len(a)):\n        l[i] = 1 if max(a[0], a[i])%a[i] == 0 else 0\n    return max(l)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    if len(a) == 1:\n        return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    subset = set()\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if (a[i]/a[j]) == int(a[i]/a[j]):\n                subset.add(a[i])\n                subset.add(a[j])\n    return max(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    res = [[a[0]], [a[0]]]\n    for i in range(1, n):\n        tmp = [[a[i]]]\n        for j in range(i):\n            if (a[i] % a[j] == 0):\n                tmp.append(res[i - 1][j] + [a[i]])\n        res.append(max(tmp, key=len))\n    return res[n - 1]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if(len(arr1) == len(arr2)):\n        #if the length is the same\n        n = len(arr1)\n        arr1.sort()\n        arr2.sort()\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #get the length of arr1 and arr2\n    len1 = len(arr1)\n    len2 = len(arr2)\n    # sort the lists\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    \n    #find median\n    if len1 > len2:\n        result = arr2[len1//2]\n    else:\n        result = arr1[len2//2]\n    return result\n    \n    \n    \ndef get_median2(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # get the length of arr1 and arr2\n    len1 = len(arr1)\n    len2 = len(arr2)\n    # sort the lists\n    arr1.sort()\n    arr2.sort()\n    \n    # find median\n    if len1 > len2:\n        result = arr2[len1//2]\n    else:\n        result = arr1[len2//2]\n    return result\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # first try\n    #arr1.sort()\n    #arr2.sort()\n    #m = len(arr1)\n    #n = len(arr2)\n    #median = 0\n    #if m > n:\n    #    median = arr1[m//2]\n    #else:\n    #    median = arr2[n//2]\n    #return median\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = len(arr1)\n    k = len(arr2)\n    if m > k:\n        i = m\n    else:\n        i = k\n    \n    j = 0\n    m = len(arr1)\n    k = len(arr2)\n    \n    while j < k:\n        mid1 = j + i/2 - 1\n        mid2 = i + j - 1\n        \n        if mid1 > m - 1:\n            return arr2[mid2]\n        if mid2 > k - 1:\n            return arr1[mid1]\n        \n        if arr1[mid1] <= arr2[mid2]:\n            j = mid2 + 1\n        else:\n            i = mid1 + 1\n    \n    if i == m:\n        return arr2[j]\n    if j == k:\n        return arr1[i]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    total = arr1 + arr2\n    total.sort()\n    while i <= n-2 and j <= n-1:\n        if total[i] < total[j]:\n            temp = total[i]\n            total[i] = total[j]\n            total[j] = temp\n            i += 1\n        else:\n            j += 1\n    if i <= n-2:\n        total = total[i:n]\n    elif j <= n-1:\n        total = total[j:n]\n    else:\n        print(\"No intersection\")\n    return total[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    arr1 = sorted(arr1)\n    l = len(arr1)\n    if l%2!= 0:\n        return arr1[int(l/2)]\n    else:\n        return (arr1[int((l-1)/2)]+arr1[int((l)/2)])/2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = arr1[:n]\n    arr2 = arr2[:n]\n    arr1.extend(arr2)\n    arr1.sort()\n    mid = int(n/2)\n    return arr1[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # make sure the arrays are of equal length\n    if n!= len(arr1) and n!= len(arr2):\n        return None\n    # sort the arrays\n    arr1.sort()\n    arr2.sort()\n    # check if arr1 is longer than arr2\n    if n > len(arr2):\n        return find_median(arr1, arr2, n)\n    # check if arr2 is longer than arr1\n    elif n < len(arr1):\n        return find_median(arr2, arr1, n)\n    # compare the two arrays\n    else:\n        # if arr1 is shorter than arr2\n        if arr1 < arr2:\n            arr1, arr2 = arr2, arr1\n        # get the middle element\n        mid = n // 2\n        # return the mid element if it's median\n        if n % 2 == 1:\n            return arr1[mid]\n        else:\n            return (arr1[mid - 1] + arr1[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Approach: Sort the two lists and then find the median in constant time.\n    \n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    \n    # If there are even numbers, take the average of the middle two numbers.\n    if len(sorted_arr1) == len(sorted_arr2):\n        return (sorted_arr1[len(sorted_arr1)//2]+sorted_arr2[len(sorted_arr2)//2])/2.0\n    else:\n        # If there are odd numbers, take the middle value.\n        return sorted_arr1[len(sorted_arr1)//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = merge_sort(arr1)\n    arr2 = merge_sort(arr2)\n    arr1 = arr1 + arr2\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return nums\n    elif n % 2 == 0:\n        return nth_nums(nums,n//2)\n    else:\n        return nth_nums(nums,(n-1)//2)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #calculate the length of the list\n    l = len(nums)\n    #initialize the result list\n    result = []\n    #iterate over the list and compute the nth power for each item\n    for i in range(l):\n        result.append(nums[i] ** n)\n    #return the list\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**n)\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return nums\n    #n-1 = i\n    for i in range(len(nums)):\n        nums[i] = nums[i] * n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return nums\n    else:\n        return [x ** n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i ** n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0]**n]\n    result = []\n    for i in range(0,len(nums)):\n        result.append(nums[i]**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]=nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i**n)\n    return res\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef is_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    return string.lower()\n    \ndef lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    return string.lower()\n    \ndef is_space(string):\n    '''\n    Write a python function to check whether a given string is whitespace or not.\n    '''\n    return string.isspace()\n    \ndef space(string):\n    '''\n    Write a python function to check whether a given string is whitespace or not.\n    '''\n    return string.isspace()\n    \ndef is_number(string):\n    '''\n    Write a python function to check whether a given string is a number or not.\n    '''\n    return string.isnumeric()\n    \ndef number(string):\n    '''\n    Write a python function to check whether a given string is a number or not.\n    '''\n    return string.isnumeric()\n    \ndef is_alpha(string):\n    '''\n    Write a python function to check whether a given string is a alphabetic or not.\n    '''\n    return string.isalpha()\n    \ndef alpha(string):\n    '''\n    Write a python function to check whether a given string is a alphabetic or not.\n    '''\n    return string.isalpha()\n    \ndef is_alphanumeric(string):\n    '''\n    Write a python function to check whether a given string is alphabetic or not.\n    '''\n    return string.isalnum()\n    \ndef alphanumeric(string):\n    '''\n    Write a python function to check whether a given string is alphabetic or not.\n    '''\n    return string.isalnum()\n    \ndef is_digit(string):\n    '''\n    Write a python function to check whether a given string is a digit or not.\n    '''\n    return string.isdigit()\n    \ndef digit(string):\n    '''\n    Write a python function to check whether a given string is a digit or not.\n    '''\n    return string.isdigit()\n    \ndef is_lower_no_space(string):\n    '''\n    Write a python function to check whether a given string is lowercase and no space or not.\n    '''\n    return string.islower()\n    \ndef lower_no_space(string):\n    '''\n    Write a python function to check whether a given string is lowercase and no space or not.\n    '''\n    return string.islower()\n    \ndef is_upper_no_space(string):\n    '''\n    Write a python function to check whether a given string is uppercase and no space or not.\n    '''\n    return string.isupper()\n    \ndef upper_no_space(string):\n    '''\n    Write a python function to check whether a given string is uppercase and no space or not.\n    '''\n    return string.isupper()\n    \ndef is_space_no_space(string):\n    '''\n    Write a python function to check whether a given string is whitespace and no space or not.\n    '''\n    return string.isspace()\n    \ndef space_no_space(string):\n    '''\n    Write a python function to check whether a given string is whitespace and no space or not.\n    '''\n    return string.isspace()\n    \ndef is_capitalized(string):\n    '''\n    Write a python function to check whether a given string is capitalized or not.\n    '''\n    return string.istitle()\n    \ndef capitalized(string):\n    '''\n    Write a python function to check whether a given string is capitalized or not.\n    '''\n    return string.istitle()\n    \ndef is_title(string):\n    '''\n    Write a python function to check whether a given string is title or not.\n    '''\n    return string.istitle()\n    \ndef title(string):\n    '''\n    Write a python function to check whether a given string is title or not.\n    '''\n    return string.istitle()\n    \ndef is_titlecase(string):\n    '''\n    Write a python function to check whether a given string is titlecase or not.\n    '''\n    return string.istitle()\n    \ndef titlecase(string):\n    '''\n    Write a python function to check whether a given string is titlecase or not.\n    '''\n    return string.istitle()\n    \ndef is_uppercase(string):\n    '''\n    Write a python function to check whether a given string is uppercase or not.\n    '''\n    return string.isupper()\n    \ndef uppercase(string):\n    '''\n    Write a python function to check whether a given string is uppercase or not.\n    '''\n    return string.isupper()\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to check whether a given string is lowercase or not.\n    '''\n    return string.islower()\n    \ndef lowercase(string):\n    '''\n    Write a python function to check whether a given string is lowercase or not.\n    '''\n    return string.islower()\n    \ndef is_digits(string):\n    '''\n    Write a python function to check whether a given string is digits or not.\n    '''\n    return string.isdigit()\n    \ndef digits(string):\n    '''\n    Write a python function to check whether a given string is digits or not.\n    '''\n    return string.isdigit()\n    \ndef is_lower_no_space_digits(string):\n    '''\n    Write a python function to check whether a given string is lowercase and no space and digits or not.\n    '''\n    return string.islower()\n    \ndef lower_no_space_digits(string):\n    '''\n    Write a python function to check whether a given string is lowercase and no space and digits or not.\n    '''\n    return string.islower()\n    \ndef is_upper_no_space_digits(string):\n    '''\n    Write a python function to check whether a given string is uppercase and no space and digits or not.\n    '''\n    return string.isupper()\n    \ndef upper_no_space_digits(string):\n    '''\n    Write a python function to check whether a given string is uppercase and no space and digits or not.\n    '''\n    return string.isupper()\n    \ndef is_space_no_space_digits(string):\n    '''\n    Write a python function to check whether a given string is whitespace and no space and digits or not.\n    '''\n    return string.isspace()\n    \ndef space_no_space_digits(string):\n    '''\n    Write a python function to check whether a given string is whitespace and no space and digits or not.\n    '''\n    return string.isspace()\n    \ndef is_capitalized_digits(string):\n    '''\n    Write a python function to check whether a given string is capitalized and digits or not.\n    '''\n    return string.istitle()\n    \ndef capitalized_digits(string):\n    '''\n    Write a python function to check whether a given string is capitalized and digits or not.\n    '''\n    return string.istitle()\n    \ndef is_title_digits(string):\n    '''\n    Write a python function to check whether a given string is title and digits or not.\n    '''\n    return string.istitle()\n    \ndef title_digits(string):\n    '''\n    Write a python function to check whether a given string is title and digits or not.\n    '''\n    return string.istitle()\n    \ndef is_titlecase_digits(string):\n    '''\n    Write a python function to check whether a given string is titlecase and digits or not.\n    '''\n    return string.istitle()\n    \ndef titlecase_digits(string):\n    '''\n    Write a python function to check whether a given string is titlecase and digits or not.\n    '''\n    return string.is"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \nprint(is_upper('tamil'))\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # return string.upper()\n    return string.title()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n    \ndef is_alphabet(string):\n    '''\n    Write a python function to determine if a string contains only alphabetic characters.\n    '''\n    return string.isalpha()\n    \n    \ndef is_odd(number):\n    '''\n    Write a python function to determine if a given number is odd or not.\n    '''\n    return number % 2 == 1\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to determine if a given string is a palindrome or not.\n    '''\n    return string == string[::-1]\n    \n    \ndef is_sorted(items):\n    '''\n    Write a python function to determine if a given list of items are sorted or not.\n    '''\n    return all(items[i] < items[i + 1] for i in range(len(items) - 1))\n    \n    \ndef is_even(number):\n    '''\n    Write a python function to determine if a given number is even or not.\n    '''\n    return number % 2 == 0\n    \n    \ndef is_odd(number):\n    '''\n    Write a python function to determine if a given number is odd or not.\n    '''\n    return number % 2!= 0\n    \n    \ndef is_leap_year(year):\n    '''\n    Write a python function to determine if a given year is a leap year or not.\n    '''\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n    \n    \ndef is_prime(number):\n    '''\n    Write a python function to determine if a given number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef is_positive(number):\n    '''\n    Write a python function to determine if a given number is positive or not.\n    '''\n    return number > 0\n    \n    \ndef is_negative(number):\n    '''\n    Write a python function to determine if a given number is negative or not.\n    '''\n    return number < 0\n    \n    \ndef is_between(number, min_value, max_value):\n    '''\n    Write a python function to determine if a given number is between a given minimum and maximum value.\n    '''\n    return min_value <= number <= max_value\n    \n    \ndef is_prime_number(number):\n    '''\n    Write a python function to determine if a given number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_number(number):\n    '''\n    Write a python function to determine if a given number is a prime number or not.\n    '''\n    if number < 2:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n    '''\n    Write a python function to determine if a given number is divisible by a given divisor or not.\n    '''\n    return number % divisor == 0\n    \n    \ndef is_divisible(number, divisor):\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"Before the swap: \",newList)\n    first_element = newList[0]\n    last_element = newList[len(newList)-1]\n    newList[0] = last_element\n    newList[len(newList)-1] = first_element\n    print(\"After the swap: \",newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    l = newList\n    l[0], l[-1] = l[-1], l[0]\n    return l\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList.pop(0))\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList is not None:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"List is empty\")\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    temp = newList[length-1]\n    newList[length-1] = newList[0]\n    newList[0] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    x=newList.pop(0)\n    newList.append(x)\n    newList.pop()\n    return newList\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    if length > 1:\n        newList[length-2],newList[length-1]=newList[length-1],newList[length-2]\n    return newList\n    \n    \ndef remove_Dup_From_List(newList):\n    '''\n    Write a python function to remove the duplicate elements in the given list.\n    '''\n    length = len(newList)\n    if length > 1:\n        newList = newList[0:length-1]\n    return newList\n    \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = len(newList)\n    firstElement = newList[0]\n    lastElement = newList[l-1]\n    newList[0] = lastElement\n    newList[l-1] = firstElement\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (1/3)*(r*r*r)\n    print(a)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14\n    \n    r = int(r)\n    area = pi * (r * r)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        raise ValueError(\"Incorrect input\")\n    else :\n        a = (3 * (r ** 2)) / 4\n        print(\"The area of the largest triangle inscribed in a semicircle with radius r =\",r,\"is\",a)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r**2 * math.sin(math.pi / 3)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    radius = r\n    # Calculating the area of a triangle with the help of Heron's formula\n    area = math.sqrt(radius**2 * math.sqrt(3))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793\n    side_length = 2 * r * pi\n    return (side_length * r * r) / 2\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area_of_triangle(a,b,c) :\n        p = (a+b+c)/2\n        h = math.sqrt(p*(p-a)*(p-b)*(p-c))\n        area_of_triangle = math.sqrt(h*(h-a)*(h-b)*(h-c))\n        return area_of_triangle\n    radius = int(input(\"Enter the radius of the semicircle : \"))\n    a = float(input(\"Enter the first side of the triangle : \"))\n    b = float(input(\"Enter the second side of the triangle : \"))\n    c = float(input(\"Enter the third side of the triangle : \"))\n    print(f\"The area of the largest triangle inscribed in a semicircle with a given radius is {area_of_triangle(a,b,c)}\")\n    return\ntriangle_area(10)\ntriangle_area(100)\ntriangle_area(1000)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # your code here\n    s=3.14\n    a=r**2*s\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0:\n        print(\"Invalid radius, no area\")\n        return 0\n    else:\n        area_of_triangle = (1/2)*r*r*3.14\n        return area_of_triangle\n    \n    \ndef circle_area(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a circle with a given radius.\n    '''\n    if r <= 0:\n        print(\"Invalid radius, no area\")\n        return 0\n    else:\n        area_of_circle = 3.14*r*r\n        return area_of_circle\n    \n    \ndef sphere_area(r) :\n    '''\n    Write a python function to find the area of the largest sphere that can be inscribed in a sphere with a given radius.\n    '''\n    if r <= 0:\n        print(\"Invalid radius, no area\")\n        return 0\n    else:\n        area_of_sphere = (4/3)*3.14*r*r\n        return area_of_sphere\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area_of_triangle = (1/2)*math.sqrt(1+math.tan(math.pi/6)**2)*r\n    return area_of_triangle\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start > end:\n        return None\n    if start == end:\n        return start\n    if start < 0:\n        return None\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start>end:\n        return None\n    if start==end:\n        return start+1\n    if array[start]==array[end]:\n        return find_First_Missing(array,start+1,end-1)\n    mid=(start+end)//2\n    if array[mid]>array[start] and array[mid]<array[end]:\n        return find_First_Missing(array,start,mid-1)\n    elif array[mid]>array[start]:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not isinstance(array,list) and not isinstance(array,tuple):\n        return None\n    if len(array) == 0:\n        return None\n    if end == None:\n        end = len(array)\n    if end <= start:\n        return None\n    if end < start or start >= end:\n        return None\n    if array[start] < 0 or array[start] >= len(array) or array[start] == end:\n        return None\n    if array[end] < 0 or array[end] >= len(array) or array[end] == start:\n        return None\n    return array[end]\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end - start == len(array):\n        return array[start]\n    middle = int((start + end)/2)\n    if array[middle] == middle + 1:\n        return middle + 1\n    if array[middle] == middle -1:\n        return middle -1\n    if array[middle] < middle + 1 and array[middle] > middle -1:\n        return middle\n    if array[middle] < middle + 1:\n        return find_First_Missing(array,middle+1,end)\n    if array[middle] > middle -1:\n        return find_First_Missing(array,start,middle - 1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if i!= array[i]:\n            return i\n    return end+1\n    \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    for i in range(0,len(array)):\n        temp = array[i]\n        if temp not in array:\n            return temp\n    return None\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    expected = n * (n + 1) / 2\n    for i in range(0, n):\n        expected -= array[i]\n    if expected:\n        return expected\n    else:\n        return n\n        \ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers."
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)-1\n    if start > end:\n        return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if i==array[i]:\n            continue\n        else:\n            print('First Missing',i)\n            break\n    return i\ndef main():\n    print(find_First_Missing([0,1,2,3,4]))\n    print(find_First_Missing([3,1,3,4,2]))\n    print(find_First_Missing([0,2,1]))\n    print(find_First_Missing([4,1,2,3,5,0,7]))\n    print(find_First_Missing([4,0,1]))\n    print(find_First_Missing([4,1,3,2]))\nmain()"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Edge cases\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return None\n    # if the smallest number in the array is greater than or equal to the minimum \n    # number in the array, then we can return that number because the smallest \n    # missing number is always present in the array.\n    if array[start] >= min(array):\n        return array[start]\n    # If the smallest number in the array is smaller than the minimum number \n    # in the array, then we can return the next smallest number because the \n    # smallest missing number is always present in the array.\n    if array[end-1] < min(array):\n        return array[end-1]\n    # if we get here, we must find the middle number in the array.\n    # middle number is the number we need to go through to find it.\n    middle = (start+end)//2\n    # We want to find the middle number in the array.\n    # so we need to find the smallest number in the array to the left of the middle \n    # and the largest number in the array to the right of the middle.\n    # We can do that by checking if the middle number is less than or equal to the minimum\n    # number in the array. If so, we can return that number because that number will be in the\n    # range of the entire array.\n    # If the middle number is greater than or equal to the minimum number in the array,\n    # then we can return the smallest number in the range.\n    if array[middle] >= min(array):\n        return array[middle]\n    # If the middle number is smaller than the minimum number in the array,\n    # then we can return the next smallest number in the range.\n    # If the middle number is greater than the maximum number in the array,\n    # then we can return the next smallest number in the range.\n    if array[middle] < max(array):\n        return array[middle]\n    # If we get here, we must now find the missing number in the range.\n    # We can search the array from the left of the middle to the right of the middle,\n    # and from the right of the middle to the left of the middle.\n    # We first search the left side of the range.\n    if array[middle-1] < min(array):\n        return array[middle-1]\n    # We then search the right side of the range.\n    if array[middle+1] > max(array):\n        return array[middle+1]\n    # If we get here, we must have found the middle number in the range.\n    # We now search the left side of the range.\n    if array[middle-1] < min(array):\n        return array[middle-1]\n    # We now search the right side of the range.\n    if array[middle+1] > max(array):\n        return array[middle+1]\n    # If we get here, then the middle number must be the smallest missing number.\n    return array[middle]\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    if start>=end:\n        return start\n    else:\n        print(array[start],array[end])\n        if array[start]==array[end]:\n            return find_First_Missing(array,start+1,end-1)\n        else:\n            return find_First_Missing(array,start,end-1)\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    space_list = list(string)\n    for i in range(len(space_list)):\n        if space_list[i] =='':\n            space_list[i] = '%20'\n    return ''.join(space_list)\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"\").replace(\"%20\", \" \")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # your code here\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # solution 1\n    # newString = \"\"\n    # for i in range(len(string)):\n    #     if string[i]!='':\n    #         newString += string[i]\n    #     else:\n    #         newString += '%20'\n    # return newString\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if (num % 2) == 0:\n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    new_list = []\n    for i in range(len(list)):\n        if(list[i] % 2 == 0):\n            new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if(list[i]%2==0):\n            new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i%2==0]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if(list[i]%2 == 0):\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(even)\n    print(odd)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for n in list:\n        if n % 2 == 0:\n            even.append(n)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # list = list(map(int, input(\"Enter list elements: \").split()))\n    print(list)\n    even_list = []\n    odd_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(f\"Even List: {even_list}\")\n    print(f\"Odd List: {odd_list}\")\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return list[0::2]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    x = list\n    l = []\n    for i in x:\n        if(i%2==0):\n            l.append(i)\n    print(l)\n    \n    \n    \n    \nSplit([1,2,3,4,5,6])\n    \ndef fun(string):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    num = []\n    for i in string:\n        if(int(i)%2==0):\n            num.append(i)\n    return num\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        if ele[0] == 0 or ele[0] == 7:\n            adj_ele = (ele[0] + 1, ele[1])\n            adj_sub = adjac(adj_ele)\n            sub.append(adj_sub)\n        if ele[1] == 0 or ele[1] == 7:\n            adj_ele = (ele[0], ele[1] + 1)\n            adj_sub = adjac(adj_ele)\n            sub.append(adj_sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = [(ele[0] - 1, ele[1]),\n        (ele[0] + 1, ele[1]), \n        (ele[0], ele[1] - 1),\n        (ele[0], ele[1] + 1), \n        (ele[0] - 1, ele[1] - 1),\n        (ele[0] + 1, ele[1] - 1),\n        (ele[0] - 1, ele[1] + 1),\n        (ele[0] + 1, ele[1] + 1)]\n    if len(sub) == 0:\n        sub = adj\n    else:\n        sub = sub + adj\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n    if ele[0] + 1!= ele:\n        return adjac((ele[0] + 1, ele[1]))\n    if ele[0] - 1!= ele:\n        return adjac((ele[0] - 1, ele[1]))\n    if ele[1] + 1!= ele:\n        return adjac((ele[0], ele[1] + 1))\n    if ele[1] - 1!= ele:\n        return adjac((ele[0], ele[1] - 1))\n    if ele[0] + 1!= ele[1] and ele[1] + 1!= ele[0] and ele[0] - 1!= ele[1] and ele[1] - 1!= ele[0]:\n        return adjac((ele[0], ele[1]))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return None \n    else:\n        sub.append(ele)\n        return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = sub + [ele]\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 1:\n        return [(ele[0] + i, ele[0] - i) for i in range(1, 8)]\n    else:\n        return [(ele[0] + i, ele[1] - i) for i in range(1, 8)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 0:\n        sub.append((ele[0], ele[1] - 1))\n    if ele[0] == 0:\n        sub.append((ele[0] + 1, ele[1]))\n    if ele[1] == 0:\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[1] == 0:\n        sub.append((ele[0], ele[1] + 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    n = len(sub)\n    if x - 1 >= 0 and sub[n]!= 1:\n        sub.append(1)\n        sub.append(n)\n        sub.append(n + 1)\n    if x + 1 <= 7 and sub[n]!= 8:\n        sub.append(8)\n        sub.append(n)\n        sub.append(n + 1)\n    if y - 1 >= 0 and sub[n]!= 2:\n        sub.append(2)\n        sub.append(n)\n        sub.append(n + 1)\n    if y + 1 <= 7 and sub[n]!= 3:\n        sub.append(3)\n        sub.append(n)\n        sub.append(n + 1)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    sub.append([x+1, y])\n    sub.append([x-1, y])\n    sub.append([x, y+1])\n    sub.append([x, y-1])\n    return sub\n    \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj_list = []\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if(i==0 and j==0):\n                continue\n            elif(i==0):\n                adj_list.append((ele[0]+j, ele[1]+i))\n            elif(j==0):\n                adj_list.append((ele[0]+i, ele[1]+j))\n            else:\n                adj_list.append((ele[0]+i, ele[1]+j))\n    return adj_list\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == \"\":\n        return text\n    else:\n        return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_',' ')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_to_underscore = text.replace(' ', '_')\n    underscore_to_space = space_to_underscore.replace('_','')\n    return underscore_to_space\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    temp_text = ''\n    for i in text:\n        if i.isspace():\n            temp_text += '_'\n        else:\n            temp_text += i\n    return temp_text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    def replace(text):\n        return text.replace(' ', '_').replace('_','')\n    return replace(text)\n    \ndef run():\n    print(replace_spaces(' what\\'s up?'))\n    print(replace_spaces('what\\'s up? '))\n    print(replace_spaces('what  \\'s up?'))\n    \nif __name__ == '__main__':\n    run("
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #print(\"Before\",text)\n    replace_string = text.replace(\" \",\"_\")\n    #print(\"After\",replace_string)\n    return replace_string\n    \n    # Using string.join()\n    \ndef replace_spaces_using_join(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \"\".join(replace_spaces(text).split(\" \"))\n    \n    # Using string slicing    \ndef replace_spaces_using_string_slicing(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\",\" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not isinstance(text, str):\n        return False\n    else:\n        return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    while len(new_list) < len(num_list):\n        new_list.append(0)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    length = len(num_list)\n    \n    for i in range(length):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n    \n    return num_list\n    \n    \ndef move_zero_to_end(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    length = len(num_list)\n    \n    for i in range(length):\n        if num_list[i] == 0:\n            num_list.insert(i, 0)\n            num_list.pop(i+1)\n    \n    return num_list\n    \n    \ndef find_duplicate(num_list):\n    '''\n    Write a python function to find and return a duplicate number from a given list.\n    '''\n    \n    length = len(num_list)\n    \n    for i in range(length):\n        if num_list.count(num_list[i]) > 1:\n            return num_list[i]\n            \n    return None\n    \n    \ndef print_list(num_list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(num_list)\n    \n    \ndef print_list_and_return_indexes(num_list):\n    '''\n    Write a python function to print a given list and return a tuple containing first and last indexes of the given list.\n    '''\n    \n    length = len(num_list)\n    \n    first_index = 0\n    last_index = length - 1\n    \n    while first_index <= last_index:\n        if num_list[first_index] == 0:\n            first_index += 1\n            \n        elif num_list[last_index] == 0:\n            last_index -= 1\n            \n        else:\n            return first_index, last_index\n            \n    return None\n    \n    \ndef is_sorted(num_list):\n    '''\n    Write a python function to check if the given list is sorted or not.\n    '''\n    \n    length = len(num_list)\n    \n    for i in range(1, length):\n        if num_list[i] < num_list[i - 1]:\n            return False\n            \n    return True\n    \n    \ndef is_sorted_backwards(num_list):\n    '''\n    Write a python function to check if the given list is sorted or not.\n    '''\n    \n    length = len(num_list)\n    \n    for i in range(length - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            return False\n            \n    return True\n    \n    \ndef max_value(num_list):\n    '''\n    Write a python function to return maximum element from the given list.\n    '''\n    \n    maximum = num_list[0]\n    \n    for i in range(len(num_list)):\n        if num_list[i] > maximum:\n            maximum = num_list[i]\n            \n    return maximum\n    \n    \ndef min_value(num_list):\n    '''\n    Write a python function to return minimum element from the given list.\n    '''\n    \n    minimum = num_list[0]\n    \n    for i in range(len(num_list)):\n        if num_list[i] < minimum:\n            minimum = num_list[i]\n            \n    return minimum\n    \n    \ndef sort_and_count_sort(num_list):\n    '''\n    Write a python function to sort and count sort the given list.\n    '''\n    \n    length = len(num_list)\n    \n    for i in range(length):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    \n    length = len(num_list)\n    \n    for i in range(1, length):\n        count = 0\n        for j in range(length - i):\n            if num_list[j] > num_list[j + 1]:\n                num_list[j], num_list[j + 1] = num_list[j + 1], num_list[j]\n                count += 1\n                \n        print(count)\n        \n    return num_list\n    \n    \ndef sort_and_count_sort_reverse(num_list):\n    '''\n    Write a python function to sort and count sort the given list in reverse order.\n    '''\n    \n    length = len(num_list)\n    \n    for i in range(length):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    \n    length = len(num_list)\n    \n    for i in range(length - 1, -1, -1):\n        count = 0\n        for j in range(length - 1, i, -1):\n            if num_list[j] < num_list[j - 1]:\n                num_list[j], num_list[j - 1] = num_list[j - 1], num_list[j]\n                count += 1\n                \n        print(count)\n        \n    return num_list\n    \n    \ndef get_divisors(num):\n    '''\n    Write a python function to return a list of divisors of given number.\n    '''\n    \n    divisors_list = []\n    \n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors_list.append(i)\n            \n    return divisors_list\n    \n    \ndef get_divisors_with_positive_negatives(num):\n    '''\n    Write a python function to return a list of divisors of given number.\n    '''\n    \n    divisors_list = []\n    \n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors_list.append(i)\n            if i > 0:\n                divisors_list.append(-i)\n            \n    return divisors_list\n    \n    \ndef get_divisors_with_positive_negatives_without_zero(num):\n    '''\n    Write a python function to return a list of divisors of given number.\n    '''\n    \n    divisors_list = []\n    \n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors_list.append(i)\n            if i > 0:\n                divisors_list.append(-i)\n            if i > 0:\n                divisors_list.append(0)\n            \n    return divisors_list\n    \n    \ndef remove_duplicate_characters(str):\n    '''\n    Write a python function to return a string with duplicate characters removed.\n    '''\n    \n    new_string = ''\n    \n    for i in range(len(str)):\n        if str[i] not in new_string:\n            new_string = new_string + str[i]\n            \n    return new_string\n    \n    \ndef remove_duplicate_characters_without_storing_characters_in_list(str):\n    '''\n    Write a python function to return a string with duplicate characters removed.\n    '''\n    \n    new_string = ''\n    \n    for i in range(len(str)):\n        if str[i] in new_string:\n            pass\n        else:\n            new_string = new_string + str[i]\n            \n    return new_string\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    \n    new_str = remove_duplicate_characters_without_storing_characters_in_list(str)\n    \n    return new_str == new_str[::-1]\n    \n    \ndef is_palindrome_without_storing_characters(str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    \n    ne"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    z = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[z], num_list[i] = num_list[i], num_list[z]\n            z += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n            i += 1\n        else:\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    for i in range(count, len(num_list)):\n        num_list[i] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0,len(num_list)-1):\n        if num_list[i] == 0:\n            continue\n        if num_list[i]!= 0:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = num_list.count(0)\n    for _ in range(zero_count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return num_list\n    flag = 1\n    for i in range(len(num_list)):\n        if num_list[i] == 0 and flag == 0:\n            flag = 1\n        if num_list[i] == 0 and flag == 1:\n            continue\n        if num_list[i]!= 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            flag = 0\n        else:\n            flag = 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    flag = True\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            flag = False\n            break\n    if flag:\n        return num_list\n    else:\n        for j in range(len(num_list)):\n            if num_list[j] == 0:\n                num_list.pop(j)\n                num_list.append(0)\n        return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    count = 0\n    i = 0\n    while i < n:\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            count += 1\n        else:\n            i += 1\n    return count\n    \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            s=s^arr[i]^arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    ret = 0\n    for i in range(n-1):\n        ret = ret + (arr[i] ^ arr[i+1])\n    print(ret)\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    if n%2 == 0 :\n        n = n//2\n        res = arr[0]\n        for i in range(1,n) :\n            res = res ^ arr[i]\n        return res\n    else :\n        n = n//2\n        res = arr[0]\n        for i in range(1,n) :\n            res = res ^ arr[i]\n        return res\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n<2:\n        return 0\n    s = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            s += arr[i] ^ arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if (len(arr) < 2) :\n        return 0\n    else :\n        result = 0\n        for i in range(0, len(arr)) :\n            for j in range(i+1, len(arr)) :\n                result += (arr[i] ^ arr[j])\n        return result\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr = arr[:]\n    ans = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            ans += x^y \n    return ans \n    \ndef pair_xor_Sum2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            ans += x^y \n    return ans \n    \ndef pair_xor_Sum3(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum4(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum5(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum6(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum7(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum8(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum9(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum10(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum11(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum12(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum13(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum14(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum15(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum16(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum17(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum18(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        x = arr[i] \n        for j in range(i+1,n) : \n            y = arr[j] \n            s += x^y \n    return s \n    \ndef pair_xor_Sum19(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n-1) : \n        result = result ^ arr[i] \n    return result\n    \ndef pair_xor_Sum_range(arr,n,r) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    The pairs are defined as adjacent pairs if they are from the same range.\n    '''\n    result = 0\n    for i in range(n-1) : \n        if (arr[i] < arr[i+1]) : \n            result = result ^ arr[i] + arr[i+1]\n    return result\n        \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Python 3 program to find sum of \n    # xor of all pairs of elements in the list \n    # Sorting the list based on frequency. \n    # Returns sum of xor of all pairs. \n    arr = list(set(arr))\n    arr.sort()\n    xor = 0\n    for i in range(0,len(arr)):\n        if i!= len(arr)-1:\n            xor ^= arr[i] ^ arr[i+1]\n    return xor\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if(len(arr)<2):\n        return 0\n    else:\n        sum = 0\n        for i in range(n):\n            sum = sum + arr[i] ^ arr[i+1]\n        return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n <= 0 : return\n    arr.sort()\n    result = 0\n    for i in range(n) :\n        result += arr[i] ^ arr[i+1]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    \n    else:\n        #inserting in min heap\n        heap = min_heapify(iterable)\n        \n        #sorting\n        for i in range(len(heap)-1,0,-1):\n            heap[i], heap[0] = heap[0], heap[i]\n            min_heapify(heap,0,i)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    count = 0\n    lst = []\n    for i in iterable:\n        count += 1\n        lst.append(i)\n        if count == 1:\n            hq.heapify(lst)\n        elif count > 1:\n            hq.heappush(lst, i)\n    return lst\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    # make heap from input\n    heap = list()\n    for x in iterable:\n        hq.heappush(heap, x)\n    \n    # return sorted input\n    return list(map(lambda x: x, heap))\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for j in range(len(h))]\n    \n    \ndef heap_sort2(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.nlargest(len(iterable),iterable))\n    \n    \ndef heap_sort3(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.nsmallest(len(iterable),iterable))\n    \n    \ndef heap_sort4(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.merge(iterable))\n    \n    \ndef heap_sort5(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.merge_sorted(iterable))\n    \n    \ndef heap_sort6(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.merge_sort(iterable))\n    \n    \ndef heap_sort7(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.nlargest(len(iterable),iterable))\n    \n    \ndef heap_sort8(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.nsmallest(len(iterable),iterable))\n    \n    \ndef heap_sort9(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapsort(iterable))\n    \n    \ndef heap_sort10(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.mergesort(iterable))\n    \n    \ndef heap_sort11(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.quicksort(iterable))\n    \n    \ndef heap_sort12(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapsort(iterable))\n    \n    \ndef heap_sort13(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort14(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapreplace(iterable))\n    \n    \ndef heap_sort15(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.nlargest(len(iterable),iterable))\n    \n    \ndef heap_sort16(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.nsmallest(len(iterable),iterable))\n    \n    \ndef heap_sort17(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapreplace(iterable))\n    \n    \ndef heap_sort18(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort19(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort20(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort21(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort22(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort23(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort24(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort25(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort26(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort27(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort28(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort29(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort30(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort31(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort32(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort33(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort34(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort35(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort36(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    import heapq as hq\n    return(hq.heapify(iterable))\n    \n    \ndef heap_sort37"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return list(reversed(h))\ndef print_pairs(iterable):\n    '''\n    Write a function to compute the pairs which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 1:\n        print(iterable[x], iterable[x+1])\n        x += 1\ndef print_pairs2(iterable):\n    '''\n    Write a function to compute the pairs which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 1:\n        y = x + 1\n        while y < len(iterable):\n            print(iterable[x], iterable[y])\n            y += 1\n        x += 1\ndef print_triplets(iterable):\n    '''\n    Write a function to compute the triplets which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 2:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                print(iterable[x], iterable[y], iterable[z])\n                z += 1\n            y += 1\n        x += 1\ndef print_triplets2(iterable):\n    '''\n    Write a function to compute the triplets which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 2:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                w = z + 1\n                while w < len(iterable):\n                    print(iterable[x], iterable[y], iterable[z], iterable[w])\n                    w += 1\n                z += 1\n            y += 1\n        x += 1\ndef print_triplets3(iterable):\n    '''\n    Write a function to compute the triplets which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 2:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                w = z + 1\n                while w < len(iterable):\n                    u = w + 1\n                    while u < len(iterable):\n                        print(iterable[x], iterable[y], iterable[z], iterable[w], iterable[u])\n                        u += 1\n                    w += 1\n                z += 1\n            y += 1\n        x += 1\ndef print_triplets4(iterable):\n    '''\n    Write a function to compute the triplets which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 2:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                w = z + 1\n                while w < len(iterable):\n                    u = w + 1\n                    while u < len(iterable):\n                        v = u + 1\n                        while v < len(iterable):\n                            print(iterable[x], iterable[y], iterable[z], iterable[w], iterable[u], iterable[v])\n                            v += 1\n                        u += 1\n                    w += 1\n                z += 1\n            y += 1\n        x += 1\ndef print_pairs_part(iterable):\n    '''\n    Write a function to compute the pairs which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 1:\n        y = x + 1\n        while y < len(iterable):\n            print(iterable[x], iterable[y])\n            y += 1\n        x += 1\ndef print_pairs2_part(iterable):\n    '''\n    Write a function to compute the pairs which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 1:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                print(iterable[x], iterable[y], iterable[z])\n                z += 1\n            y += 1\n        x += 1\ndef print_triplets_part(iterable):\n    '''\n    Write a function to compute the triplets which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 2:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                w = z + 1\n                while w < len(iterable):\n                    print(iterable[x], iterable[y], iterable[z], iterable[w])\n                    w += 1\n                z += 1\n            y += 1\n        x += 1\ndef print_triplets2_part(iterable):\n    '''\n    Write a function to compute the triplets which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 2:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                w = z + 1\n                while w < len(iterable):\n                    print(iterable[x], iterable[y], iterable[z], iterable[w])\n                    w += 1\n                z += 1\n            y += 1\n        x += 1\ndef print_triplets3_part(iterable):\n    '''\n    Write a function to compute the triplets which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 2:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                w = z + 1\n                while w < len(iterable):\n                    u = w + 1\n                    while u < len(iterable):\n                        print(iterable[x], iterable[y], iterable[z], iterable[w], iterable[u])\n                        u += 1\n                    w += 1\n                z += 1\n            y += 1\n        x += 1\ndef print_triplets4_part(iterable):\n    '''\n    Write a function to compute the triplets which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 2:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                w = z + 1\n                while w < len(iterable):\n                    u = w + 1\n                    while u < len(iterable):\n                        v = u + 1\n                        while v < len(iterable):\n                            print(iterable[x], iterable[y], iterable[z], iterable[w], iterable[u], iterable[v])\n                            v += 1\n                        u += 1\n                    w += 1\n                z += 1\n            y += 1\n        x += 1\ndef print_pairs_part2(iterable):\n    '''\n    Write a function to compute the pairs which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 1:\n        y = x + 1\n        while y < len(iterable):\n            print(iterable[x], iterable[y])\n            y += 1\n        x += 1\ndef print_pairs2_part2(iterable):\n    '''\n    Write a function to compute the pairs which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 1:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while z < len(iterable):\n                print(iterable[x], iterable[y], iterable[z])\n                z += 1\n            y += 1\n        x += 1\ndef print_triplets_part2(iterable):\n    '''\n    Write a function to compute the triplets which are different.\n    '''\n    x = 0\n    while x < len(iterable) - 2:\n        y = x + 1\n        while y < len(iterable):\n            z = y + 1\n            while "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return list(map(lambda x: x, h))\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    result = []\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    while len(heap) > 0:\n        result.append(hq.heappop(heap))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return [x for x in hq.heappop(h)]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hp = []\n    for num in iterable:\n        hq.heappush(hp, num)\n    return hp\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    no_profit = actual_cost - sale_amount\n    no_loss = sale_amount - actual_cost\n    print('Profit: ',no_profit,' Loss: ',no_loss)\n    if no_profit == 0 or no_loss == 0:\n        print('This is a no profit no loss case')\n    elif no_profit > 0 and no_loss > 0:\n        print('This is a no profit case')\n    elif no_profit < 0 and no_loss < 0:\n        print('This is a no loss case')\n    elif no_profit >= 0 and no_loss >= 0:\n        print('This is a profit case')\n    else:\n        print('This is a loss case')\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == 0 or sale_amount == 0\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(True)\n    else:\n        print(False)\n        \n    \ndef noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"No Profit and Losses\")\n    else:\n        print(\"Profit and Losses\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost - sale_amount) == 0:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return \"Both have no loss\"\n    elif actual_cost > sale_amount:\n        return \"Profit\"\n    elif actual_cost < sale_amount:\n        return \"Loss\"\n    \ndef gtlt_string(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount is greater than or less than\n    '''\n    if actual_cost > sale_amount:\n        return \"greater than\"\n    elif actual_cost < sale_amount:\n        return \"less than\"\n    elif actual_cost == sale_amount:\n        return \"equal to\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"profit and loss is zero\")\n    else:\n        print(\"no profit no loss\")\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 33.3 or v < 0:\n        return 0\n    else:\n        wci = -42.379 + 2.04901523*t + 10.14333127*v**0.16 + 0.22475541*t*v**0.16 - 6.83783*math.pow(t,2) - 5.481717*math.pow(v,2) + 0.0065*math.pow(t,2)*math.pow(v,2)\n        return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.00028\n    f = -0.0065\n    g = 0.000077\n    h = 35.75\n    i = 0.00198\n    j = -0.00028\n    k = 0.000077\n    l = -0.0065\n    m = -0.000122\n    n = 0.00028\n    o = 0.00069\n    p = 0.000002\n    q = -0.000011\n    r = 0.000017\n    s = -0.000001\n    t1 = 0.0\n    t2 = 0.0\n    t3 = 0.0\n    t4 = 0.0\n    if v == 0:\n        t1 = t\n        t2 = t\n        t3 = t\n        t4 = t\n    elif v == 1:\n        t1 = t - 10.0\n        t2 = t - 5.0\n        t3 = t + 30.0\n        t4 = t + 10.0\n    else:\n        t1 = t - 10.0\n        t2 = t - 5.0\n        t3 = t + 10.0\n        t4 = t + 10.0\n        if t1 > 0 and t1 < 100:\n            t1 = t1\n        else:\n            t1 = t\n        if t2 > 0 and t2 < 100:\n            t2 = t2\n        else:\n            t2 = t\n        if t3 > 0 and t3 < 100:\n            t3 = t3\n        else:\n            t3 = t\n        if t4 > 0 and t4 < 100:\n            t4 = t4\n        else:\n            t4 = t\n    wind_chill_1 = 35.74 + (a * t1) + (b * t2) + (c * t3) + (d * t4) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_2 = 35.74 + (a * t2) + (b * t3) + (c * t4) + (d * t1) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_3 = 35.74 + (a * t3) + (b * t4) + (c * t1) + (d * t) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_4 = 35.74 + (a * t4) + (b * t1) + (c * t) + (d * v) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_5 = 35.74 + (a * t1) + (b * t2) + (c * t3) + (d * t4) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_6 = 35.74 + (a * t2) + (b * t3) + (c * t4) + (d * t1) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_7 = 35.74 + (a * t3) + (b * t4) + (c * t1) + (d * t) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_8 = 35.74 + (a * t4) + (b * t1) + (c * t) + (d * v) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_9 = 35.74 + (a * t1) + (b * t2) + (c * t3) + (d * t4) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_10 = 35.74 + (a * t2) + (b * t3) + (c * t4) + (d * t1) + (e * t) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_11 = 35.74 + (a * t3) + (b * t4) + (c * t1) + (d * t) + (e * v) + (f * v) + (g * v) + (h * v) + (i * t1) + (j * t2) + (k * t3) + (l * t4) + (m * t) + (n * v) + (o * v) + (p * v) + (q * v) + (r * v) + (s * v) + (t * v)\n    wind_chill_12 = 35.74 + (a * t4) + (b * t1) + (c * t) "
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    chill_index = 35.74 + 0.6215 * math.pow((t + 273.16), 0.16) + 0.4275 * math.pow((t - 275), 0.16)\n    return round(chill_index)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #wind chill equation\n    return 35.74 + 0.6215 * t - 35.75 * math.pow((t - 273.16), 0.16) + 0.4275 * v * math.pow((t - 273.16), 0.16)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -40:\n        return -40\n    if t > 100:\n        return 100\n    v = v * 0.621371\n    T = t + 459.67\n    v = v * 0.1\n    wci = 35.74 + 0.6215 * T - 35.75 * v ** 0.16 + 0.4275 * T ** 0.16\n    wci = round(wci,1)\n    if wci > 100:\n        return 100\n    if wci < -100:\n        return -100\n    return wci\n    "
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_kph = v\n    v_kph = math.ceil(v_kph)\n    t_celcius = t\n    t_celcius = math.ceil(t_celcius)\n    wind_chill = 35.74 + (0.6215 * t_celcius) - (35.75 * (v_kph ** 0.16)) + (0.4275 * t_celcius * (v_kph ** 0.16))\n    wind_chill = round(wind_chill)\n    return wind_chill\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    try:\n        wind_chill = 35.74 + (0.6215*t) - (35.75*(v**0.16)) + (0.4275*t)*(v**0.16)\n        wind_chill = round(wind_chill,1)\n        return wind_chill\n    except:\n        print(\"Invalid Input\")\n        return\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_in_kph = v * 3.6\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    if t >= 0 and t <= 10:\n        return a * v_in_kph - (b * v_in_kph) - (c * t) + (d * t * t)\n    if t >= 10 and t <= 20:\n        return a * v_in_kph - (b * v_in_kph) - (c * t) + (d * t * t) + (0.3965 * (t - 10))\n    if t >= 20 and t <= 30:\n        return a * v_in_kph - (b * v_in_kph) - (c * t) + (d * t * t) + (0.3965 * (t - 20)) + (0.1140 * (t - 20))\n    if t >= 30 and t <= 50:\n        return a * v_in_kph - (b * v_in_kph) - (c * t) + (d * t * t) + (0.3965 * (t - 30)) + (0.1140 * (t - 20)) + (0.0557 * (t - 30))\n    if t >= 50 and t <= 70:\n        return a * v_in_kph - (b * v_in_kph) - (c * t) + (d * t * t) + (0.3965 * (t - 50)) + (0.1140 * (t - 30)) + (0.0557 * (t - 50)) + (0.0295 * (t - 70))\n    if t >= 70 and t <= 90:\n        return a * v_in_kph - (b * v_in_kph) - (c * t) + (d * t * t) + (0.3965 * (t - 70)) + (0.1140 * (t - 50)) + (0.0557 * (t - 50)) + (0.0295 * (t - 70)) + (0.014 * (t - 90))\n    if t >= 90:\n        return a * v_in_kph - (b * v_in_kph) - (c * t) + (d * t * t) + (0.3965 * (t - 70)) + (0.1140 * (t - 50)) + (0.0557 * (t - 50)) + (0.0295 * (t - 70)) + (0.014 * (t - 90)) + (13.12)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #calculate the wind chill index\n    windChill = 13.12 + (0.6215*t) - (11.37 * math.pow(v,0.16)) + (0.3965*t*math.pow(v,0.16))\n    windChill = round(windChill)\n    return windChill\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = filter(lambda x: not x[0].islower(), sample_names)\n    return sum(len(x) for x in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #initialize the accumulator and the counter\n    acc = 0\n    counter = 0\n    \n    #iterate over the sample names and if it starts with a lowercase letter then remove it\n    for name in sample_names:\n        if name.lower()[0] == 'a':\n            counter += 1\n        else:\n            acc += len(name)\n    \n    #return the accumulator value and the number of elements removed\n    return acc, counter\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to determine how many names start with a lowercase letter.\n    '''\n    #initialize the accumulator and the counter\n    acc = 0\n    counter = 0\n    \n    #iterate over the sample names and if it starts with a lowercase letter then increment the counter and the accumulator\n    for name in sample_names:\n        if name.lower()[0] == 'a':\n            counter += 1\n            acc += 1\n    \n    #return the number of elements that start with a lowercase letter and the accumulator value\n    return counter, acc\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initialize the accumulator\n    max_len = 0\n    \n    #iterate over the sample names and if it is longer than the current maximum then update the maximum\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    \n    #return the length of the longest name in the sample names list\n    return max_len\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to find the longest name in a list of names.\n    '''\n    #initializ"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = sample_names\n    tot_len = 0\n    for name in names:\n        if name[0].islower():\n            tot_len += len(name)\n    return tot_len\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for i in sample_names:\n        if i[0] == 'A':\n            total = total + len(i)\n        else:\n            total = total - len(i)\n    print(total)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for n in sample_names:\n        if n.startswith('a'):\n            continue\n        s += len(n)\n    print(s)\n    return s\n    \n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_nam = 0\n    for i in sample_names:\n        if len(i) >= 7:\n            if i.startswith('a') or i.startswith('e') or i.startswith('i') or i.startswith('o') or i.startswith('u'):\n                continue\n            else:\n                sum_of_nam += len(i)\n    return sum_of_nam\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            result += len(name)\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Solution 1\n    # sample_names = ['John', 'Jenny', 'Alex', 'Aaron', 'Jax', 'Dwight', 'Jim', 'Jane', 'Jax']\n    # Sample Output 1\n    # 14\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for i in sample_names:\n        if i[0].islower():\n            continue\n        result += len(i)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        items[i]= items[i].replace('(','')\n        items[i]= items[i].replace(')','')\n    return items\ndef remove_parenthesis_2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #x=items.replace('(','')\n    #x=x.replace(')','')\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_3(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #x=items.split(')')\n    #x=items.split('(')\n    for i in range(len(items)):\n        if '(' in items:\n            y=items.index('(')\n            z=items.index(')',y+1)\n            a=items[y+1:z]\n            items=items.replace(a,'')\n        else:\n            items=items.replace(')',' ')\n    return items\ndef remove_parenthesis_4(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    x=items.split(')')\n    for i in range(len(x)):\n        if '(' in x:\n            y=x.index('(')\n            z=x.index(')',y+1)\n            a=x[y+1:z]\n            x=x.replace(a,'')\n    return x\ndef remove_parenthesis_5(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_6(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if '(' in items:\n            y=items.index('(')\n            z=items.index(')',y+1)\n            a=items[y+1:z]\n            items=items.replace(a,'')\n    return items\ndef remove_parenthesis_7(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_8(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    x=items.split(')')\n    for i in range(len(x)):\n        if '(' in x:\n            y=x.index('(')\n            z=x.index(')',y+1)\n            a=x[y+1:z]\n            x=x.replace(a,'')\n    return x\ndef remove_parenthesis_9(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_10(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    x=items.split(')')\n    for i in range(len(x)):\n        if '(' in x:\n            y=x.index('(')\n            z=x.index(')',y+1)\n            a=x[y+1:z]\n            x=x.replace(a,'')\n    return x\ndef remove_parenthesis_11(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_12(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_13(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_14(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_15(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_16(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_17(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_18(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_19(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_20(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_21(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_22(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_23(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_24(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_25(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_26(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_27(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_28(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_29(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\ndef remove_parenthesis_30(items):\n    '''\n    Write a function to remove the parenthesis and what is i"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # print(\"\\n\\n items = \",items)\n    items=re.sub(r'\\(.*?\\)','',items)\n    items=re.sub(r'\\[.*?\\]','',items)\n    items=re.sub(r'\\{.*?\\}','',items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r\"\\([^)]*\\)\", \"\", items)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item == '(' or item == ')':\n            items.remove(item)\n    items = ''.join(items)\n    items = items.strip()\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    out = re.sub('\\(([^)]+)\\)', '', items)\n    return out\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub('\\(([^)]+)', '', items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub(r'\\(.+?\\)', '', items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Your code here\n    list_of_items = []\n    for item in items:\n        if item.isdigit():\n            list_of_items.append(item)\n        elif item == '(':\n            list_of_items.append(item)\n        elif item == ')':\n            list_of_items.pop()\n        elif item!= ')':\n            if item == '(' and not list_of_items:\n                list_of_items.append(item)\n            elif item == ')':\n                list_of_items.append(item)\n    print(''.join(list_of_items))\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = list(items)\n    if (len(items) == 0):\n        return items\n    for i, item in enumerate(items):\n        if (item == '('):\n            items.pop(i)\n            if (i > 0 and items[i-1] == '('):\n                items.pop(i-1)\n        if (item == ')'):\n            items.pop(i)\n            if (i < len(items) - 1 and items[i + 1] == ')'):\n                items.pop(i + 1)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item == ')':\n            new_items.append(item)\n    for i in range(len(new_items)):\n        if new_items[i] == '(':\n            new_items.pop(i)\n            new_items.pop(i)\n    return new_items\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(((n*(n+1)))/2)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(input())\n    row_sum = 0\n    col_sum = 0\n    for i in range(1,n+1):\n        col_sum += i\n        row_sum = row_sum + i\n    return col_sum - row_sum\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    non_diagonal = []\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    if n <= 1:\n        return 0\n    else:\n        return (n*(n-1) + (n-2)*(n-3)) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return n*(n-1) + (n-2)*(n-3) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # range(2,n)\n    # range(1,n-1)\n    # range(2,n-2)\n    # range(3,n-3)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1,n):\n        if i*(i+1)//2 == n:\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.findall(r'\\bz\\b', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'^z',text) and re.search(r'z$',text) and re.search(r'z*',text) and re.search(r'z+',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'^z',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'z$',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_middle_and_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'^z',text) and re.search(r'z$',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_start_and_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'^z',text) and re.search(r'z$',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_start_and_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'^z',text) and re.search(r'z$',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_end_and_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'z$',text) and re.search(r'z$',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_start_and_end_and_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'^z',text) and re.search(r'z$',text) and re.search(r'z$',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_start_and_end_and_middle_and_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'^z',text) and re.search(r'z$',text) and re.search(r'z$',text) and re.search(r'z$',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_start_and_end_and_middle_and_end_and_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = \"This is a test of the emergency broadcast network operator. The network operator is Jim\"\n    #text = \"z z z\"\n    #text = \"z z zz\"\n    #text = \"z z z zz\"\n    #text = \"zzzzzzzzz z z z z\"\n    #text = \"zzzzzzzzz z z z z\"\n    \n    if re.search(r'^z',text) and re.search(r'z$',text) and re.search(r'z$',text) and re.search(r'z$',text) and re.search(r'z$',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \n    \n    \n    \n    \ndef text_match_wordz_start_and_end_and_middle_and_end_and_middle_and_end(text):\n    '''\n    Writ"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(?<=^| )z(?= )')\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        if match is not None:\n            print(match.group())\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.search('z[\\s]',text) and not re.search('z[\\s]z',text) and not re.search('z[\\s]z',text):\n        return True\n    else:\n        return False\n    \nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky')) # False\nprint(text_match_wordz_middle('z Under the Sky')) # True\nprint(text_match_wordz_middle('z under the skyl')) # False\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # False\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint(text_match_wordz_middle('z under the sky, z')) # True\nprint"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z$', text):\n        print('True')\n    else:\n        print('False')\n    \ntext = 'z'\ntext_match_wordz_middle(text)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    res = re.findall(r'(\\w)\\b(\\w)',text)\n    return (res)\n    \ntext = 'It is a great summer time!'\nprint(text_match_wordz_middle(text))\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r\"(?<=\\W)[z](?=\\W)\", re.IGNORECASE)\n    result = re.search(pattern, text)\n    return True if result!= None else False\n    # return True if re.search(pattern, text)!= None else False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    for i in range(len(text)):\n        if text[i] == 'z' and i!=0 and i!=len(text)-1:\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches = re.search(r'\\b(?:z)\\b', text)\n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile(r'(z)')\n    matches = regex.finditer(text)\n    text_no_z = ''\n    for match in matches:\n        text_no_z = text_no_z + text[match.start()+1:match.end()-1]\n        \n    if len(text_no_z) == 0:\n        return False\n    return True\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    s = \"\"\n    for i in range(len(input)):\n        s += input[i]\n        if i >= k:\n            break\n    return s\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    size = len(input)\n    if(k <= 0 or k >= size):\n        return []\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print('Input:',input,'; k:',k)\n    if input == None or k == None:\n        return None\n    if len(input) == 0:\n        return None\n    if len(input) == 1:\n        return input\n    if k == 0:\n        return input\n    if k == 1:\n        return input[::-1]\n    if k > len(input):\n        return None\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if input[k] == input[k-1] or input[k] == input[k-2] or k <= 0:\n        print(\"No\")\n        return 0\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    size = len(input)\n    if k >= size:\n        print(\"Invalid Input\")\n        return\n    for i in range(size):\n        temp = input[i]\n        j = size - i - 1\n        while j > k:\n            input[j] = input[j-1]\n            j -= 1\n        input[k] = temp\n    print(\"Array After Reversing\")\n    for i in range(size):\n        print(input[i])\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        k = len(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k < 0 or k > n:\n        return -1\n    k = n - k - 1\n    i = 0\n    while i <= k:\n        temp = input[i]\n        input[i] = input[k]\n        input[k] = temp\n        i += 1\n        k -= 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k <= 0:\n        return 0\n    return reverse_array(input, 0, k-1)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = list()\n    for i in range(k):\n        reverse_array.append(input[i])\n    for i in range(k,len(input)):\n        reverse_array.append(input[i])\n    return reverse_array\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0:\n        return\n    if k >= len(input):\n        return\n    if k == 0:\n        return input[:k]\n    return input[:k] + reverse_Array_Upto_K(input, k - 1)\n    "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = ()\n    for i in test_tup:\n        tup += (test_tup[i] + test_dict[i],)\n    return tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for item in test_tup:\n        test_tup = test_tup + (test_dict, )\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict, )\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict,))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict, )\n    return test_tup\n    \n    \ndef remove_first_occurrence_of_list(test_list, item_to_remove):\n    '''\n    Write a function to remove the first occurrence of an item from a list\n    '''\n    if item_to_remove in test_list:\n        test_list.remove(item_to_remove)\n    return test_list\n    \n    \ndef remove_first_occurrence_of_tuple(test_tup, item_to_remove):\n    '''\n    Write a function to remove the first occurrence of an item from a tuple\n    '''\n    if item_to_remove in test_tup:\n        test_tup = test_tup[:test_tup.index(item_to_remove)] + test_tup[test_tup.index(item_to_remove) + 1:]\n    return test_tup\n    \n    \ndef remove_first_occurrence_of_tuple_element(test_tup, test_element):\n    '''\n    Write a function to remove the first occurrence of an item from a tuple\n    '''\n    if test_element in test_tup:\n        test_tup = test_tup[:test_tup.index(test_element)] + test_tup[test_tup.index(test_element) + 1:]\n    return test_tup\n    \n    \ndef find_duplicates_of_list(test_list):\n    '''\n    Write a function to find the duplicates of a list\n    '''\n    duplicate_list = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i] not in duplicate_list:\n                duplicate_list.append(test_list[i])\n    return duplicate_list\n    \n    \ndef find_duplicates_of_tuple(test_tup):\n    '''\n    Write a function to find the duplicates of a tuple\n    '''\n    duplicate_list = []\n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j] and test_tup[i] not in duplicate_list:\n                duplicate_list.append(test_tup[i])\n    return duplicate_list\n    \n    \ndef swap_elements(test_list, a, b):\n    '''\n    Write a function to swap the two elements in a list\n    '''\n    if a == 0 and b == len(test_list) - 1:\n        return test_list\n    elif a == len(test_list) - 1 and b == 0:\n        return test_list\n    elif a == 0 and b!= len(test_list) - 1:\n        temp = test_list[0]\n        test_list[0] = test_list[b]\n        test_list[b] = temp\n        return test_list\n    elif a!= 0 and b!= len(test_list) - 1:\n        temp = test_list[a]\n        test_list[a] = test_list[b]\n        test_list[b] = temp\n        return test_list\n    elif a == len(test_list) - 1 and b == 0:\n        temp = test_list[a]\n        test_list[a] = test_list[b]\n        test_list[b] = temp\n        return test_list\n    elif a == 0 and b == len(test_list) - 1:\n        temp = test_list[a]\n        test_list[a] = test_list[b]\n        test_list[b] = temp\n        return test_list\n    else:\n        raise ValueError('{} and {} do not exist in the list'.format(a, b))\n    \n    \ndef swap_elements_of_tuple(test_tup, a, b):\n    '''\n    Write a function to swap the two elements in a tuple\n    '''\n    if a == 0 and b == len(test_tup) - 1:\n        return test_tup\n    elif a == len(test_tup) - 1 and b == 0:\n        return test_tup\n    elif a == 0 and b!= len(test_tup) - 1:\n        temp = test_tup[0]\n        test_tup[0] = test_tup[b]\n        test_tup[b] = temp\n        return test_tup\n    elif a!= 0 and b!= len(test_tup) - 1:\n        temp = test_tup[a]\n        test_tup[a] = test_tup[b]\n        test_tup[b] = temp\n        return test_tup\n    elif a == len(test_tup) - 1 and b == 0:\n        temp = test_tup[a]\n        test_tup[a] = test_tup[b]\n        test_tup[b] = temp\n        return test_tup\n    elif a == 0 and b == len(test_tup) - 1:\n        temp = test_tup[a]\n        test_tup[a] = test_tup[b]\n        test_tup[b] = temp\n        return test_tup\n    else:\n        raise ValueError('{} and {} do not exist in the list'.format(a, b))\n    \n    \ndef add_list_to_tuple(test_tup, test_list):\n    '''\n    Write a function to add a list to a tuple\n    '''\n    return test_tup + test_list\n    \n    \ndef add_tuple_to_tuple(test_tup, test_tup2):\n    '''\n    Write a function to add a tuple to a tuple\n    '''\n    return test_tup + test_tup2\n    \n    \ndef average_of_list(test_list):\n    '''\n    Write a function to find the average of a list\n    '''\n    return sum(test_list) / len(test_list)\n    \n    \ndef average_of_tuple(test_tup):\n    '''\n    Write a function to find the average of a tuple\n    '''\n    return sum(test_tup) / len(test_tup)\n    \n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse a list\n    '''\n    return test_list[::-1]\n    \n    \ndef reverse_tuple(test_tup):\n    '''\n    Write a function to reverse a tuple\n    '''\n    return test_tup[::-1]\n    \n    \ndef reverse_list_of_list(test_list):\n    '''\n    Write a function to reverse the order of the list inside a list\n    '''\n    return [list[::-1] for list in test_list]\n    \n    \ndef reverse_tuple_of_tuple(test_tup):\n    '''\n    Write a function to reverse the order of the tuple inside a tuple\n    '''\n    return tuple([list[::-1] for list in test_tup])\n    \n    \ndef sum_of_list(test_list):\n    '''\n    Write a function to find the sum of a list\n    '''\n    return sum(test_list)\n    \n    \ndef sum_of_tuple(test_tup):\n    '''\n    Write a function to find the sum of a tuple\n    '''\n    return sum(test_tup)\n    \n    \ndef sum_of_tuple_element(test_tup, test_element):\n    '''\n    Write a function to sum up the value of the tuple element\n    '''\n    return sum(test_tup) + test_element\n    \n    \ndef sum_of_list_element(test_list, test_element):\n    '''\n    Write a function to sum up the value of the list element\n    '''\n    return sum(tes"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = (test_tup[0], test_tup[1], test_tup[2], test_dict)\n    return tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0], test_dict)\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    cost = list(cost)\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    '''\n    1. For each cell, we have 3 possible paths:\n        a. Right\n        b. Down\n        c. Left\n    2. For each cell, we calculate sum of paths upto it. \n        if cost of right path is less than cost of down or left path then that cell is visited and added to the sum.\n    3. For each cell, we calculate average of the paths.\n    '''\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize the results matrix. Initialize leftmost column to the leftmost row.\n    results = [[0] * N for _ in range(N)]\n    # Traverse the path starting from the top-left cell and the bottom-right cell.\n    for i in range(N):\n        for j in range(N):\n            # We can only follow a path if the cell on the left or above is not a wall.\n            if i!= 0 and j!= 0:\n                # Compute the new average for the cell.\n                new_average = (cost[i][j] + results[i - 1][j - 1] + results[i][j - 1]) // 3\n                # Update the results matrix.\n                results[i][j] = new_average\n    return results\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    return float(max(min(cost[0][0],cost[1][1]),min(cost[0][2],cost[1][3])))\n    \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[-1]*cols for _ in range(rows)]\n    max_average = float('-inf')\n    \n    for j in range(cols):\n        dp[0][j] = cost[0][j]/cost[0][j]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0]/cost[i][0]\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]/cost[i][j]\n    for i in range(rows):\n        for j in range(cols):\n            max_average = max(max_average, dp[i][j])\n    return max_average\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    # A list of lists used to keep track of the previous cells visited in each cell. We need this in order to get the maximum average.\n    path = [[-1] * n for i in range(m)]\n    dp = [[0] * n for i in range(m)]\n    # Initialize the DP array with a 0 at every cell.\n    for i in range(m):\n        for j in range(n):\n            dp[i][j] = 0\n    # First column and first row are special cases of dp array because they never come into contact with any other cell.\n    dp[0][0] = cost[0][0]\n    path[0][0] = 1\n    # Compute the maximum average\n    maxavg = 0\n    maxindex = 0\n    for i in range(m):\n        for j in range(n):\n            if dp[i][j] == 0:\n                # we have not visited this cell yet\n                # From this cell, find the maximum average of the path.\n                maxavg = max(maxavg, cost[i][j] / path[i][j])\n                # Keep track of the maximum average\n                if maxavg > maxindex:\n                    maxindex = maxavg\n    # Create a path\n    path = [[0] * n for i in range(m)]\n    path[0][0] = 1\n    # Maximum average starting from the cell (0, 0)\n    maxavg = 0\n    # Maximum average ending at the cell (m-1, n-1)\n    maxavg = max(maxavg, cost[m - 1][n - 1] / path[m - 1][n - 1])\n    # Create a path\n    for i in range(m):\n        for j in range(n):\n            if dp[i][j] == 0:\n                # We have not visited this cell yet\n                # From this cell, find the maximum average of the path.\n                maxavg = max(maxavg, (cost[i][j] + dp[i + 1][j] + dp[i][j + 1]) / path[i][j])\n                # Keep track of the maximum average\n                if maxavg > maxindex:\n                    maxindex = maxavg\n    # Create a path\n    path = [[0] * n for i in range(m)]\n    path[0][0] = 1\n    # Maximum average starting from the cell (0, 0)\n    maxavg = 0\n    # Maximum average ending at the cell (m-1, n-1)\n    maxavg = max(maxavg, (cost[m - 1][n - 1] + dp[m - 1][n - 1] + dp[m - 1][n - 1]) / path[m - 1][n - 1])\n    # Create a path\n    for i in range(m):\n        for j in range(n):\n            if dp[i][j] == 0:\n                # We have not visited this cell yet\n                # From this cell, find the maximum average of the path.\n                maxavg = max(maxavg, (cost[i][j] + dp[i][j + 1] + dp[i + 1][j]) / path[i][j])\n                # Keep track of the maximum average\n                if maxavg > maxindex:\n                    maxindex = maxavg\n    return maxindex\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    global best\n    n = len(cost)\n    best = float('-inf')\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    ans = 0\n    m = len(cost)\n    if m == 0:\n        return ans\n    n = len(cost[0])\n    visited = set()\n    q = deque()\n    q.append(((0,0), 0, cost[0][0]))\n    visited.add((0,0))\n    while q:\n        p, cost, c = q.popleft()\n        if p == (m-1,n-1):\n            ans = max(ans, (cost + c)/n)\n        for i,j in zip([0,1,0,-1],[1,0,-1,0]):\n            x,y = p[0] + i, p[1] + j\n            if 0 <= x < m and 0 <= y < n and (x,y) not in visited:\n                q.append(((x,y), cost + c, cost))\n                visited.add((x,y))\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    visited = set()\n    res = 0\n    \n    # Stack for storing visited cells\n    stack = []\n    \n    # Iterate through the matrix.\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            \n            # If cell is unvisited and not visited yet then do below operations.\n            if (cost[i][j], (i, j)) not in visited and (cost[i][j], (i, j)) not in stack:\n                \n                # Initialize count of cells visited in current path.\n                count = 0\n                \n                # Push this cell to the stack.\n                stack.append((cost[i][j], (i, j)))\n                \n                # Run while the stack is not empty.\n                while stack:\n                    \n                    # Pop the cell from the stack.\n                    cell = stack.pop()\n                    \n                    # If cell is visited then stop further operations on this cell.\n                    if cell in visited:\n                        break\n                    \n                    # If cell is unvisited then increment count and move to the next cell.\n                    if cell[1]!= (i, j):\n                        count += 1\n                        stack.append((cost[cell[1][0]][cell[1][1]], cell[1]))\n                    \n                # Calculate the average\n                res = res + (count / len(cost))\n                \n                # Mark this cell as visited.\n                visited.add((cost[i][j], (i, j)))\n    \n    return res\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for student, details in students.items():\n        if details[0] >= h and details[1] >= w:\n            new_students[student] = details\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height,weight=students.values()\n    min_height,min_weight=h,w\n    filter_h=filter(lambda x:x[0]>=min_height,students.values())\n    filter_w=filter(lambda x:x[1]>=min_weight,students.values())\n    final=filter_h&filter_w\n    for i in final:\n        print(i)\n    return final\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for x in students:\n        if students[x][0]>=h and students[x][1]>=w:\n            print(x)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_h = h[0]\n    min_w = w[0]\n    result = []\n    for x in students:\n        if students[x][0] >= min_h and students[x][1] >= min_w:\n            result.append(students[x])\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result=[]\n    for i in students.values():\n        if i[0]>=h and i[1]>=w:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    minimum_height = min(h)\n    minimum_weight = min(w)\n    for key in students.keys():\n        if students[key][0]>minimum_height and students[key][1]>minimum_weight:\n            yield key\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # students = {'Kamil': (1.80, 55.50), 'Muhamad': (1.75, 68.20), 'Yasef': (1.70, 45.20), 'Haseeb': (1.65, 52.60), 'Prashanth': (1.71, 55.10), 'Sunil': (1.60, 52.00), 'Karan': (1.55, 55.00)}\n    \n    # students = {'Kamil': (1.80, 55.50), 'Muhamad': (1.75, 68.20), 'Yasef': (1.70, 45.20), 'Haseeb': (1.65, 52.60), 'Prashanth': (1.71, 55.10), 'Sunil': (1.60, 52.00), 'Karan': (1.55, 55.00)}\n    \n    # students = {'Kamil': (1.80, 55.50), 'Muhamad': (1.75, 68.20), 'Yasef': (1.70, 45.20), 'Haseeb': (1.65, 52.60), 'Prashanth': (1.71, 55.10), 'Sunil': (1.60, 52.00), 'Karan': (1.55, 55.00)}\n    \n    # students = {'Kamil': (1.80, 55.50), 'Muhamad': (1.75, 68.20), 'Yasef': (1.70, 45.20), 'Haseeb': (1.65, 52.60), 'Prashanth': (1.71, 55.10), 'Sunil': (1.60, 52.00), 'Karan': (1.55, 55.00)}\n    \n    # students = {'Kamil': (1.80, 55.50), 'Muhamad': (1.75, 68.20), 'Yasef': (1.70, 45.20), 'Haseeb': (1.65, 52.60), 'Prashanth': (1.71, 55.10), 'Sunil': (1.60, 52.00), 'Karan': (1.55, 55.00)}\n    # # print(students)\n    # key_values = list(students.values())\n    # key_values_list = []\n    # key_values_tuple = ()\n    # for k, v in students.items():\n    #     key_values_list.append(v)\n    #     key_values_tuple += k, v\n    #     key_values_list.sort(key=lambda x: x[0])\n    #     # key_values_tuple.sort(key=lambda x: x[0], reverse=True)\n    #     key_values_tuple.sort(key=lambda x: x[1])\n    #     # print(key_values_list)\n    #     # print(key_values_tuple)\n    #     for i in range(len(key_values_list)):\n    #         if key_values_list[i][0] < key_values_list[i-1][0]:\n    #             if key_values_list[i][1] < key_values_list[i-1][1]:\n    #                 del key_values_list[i]\n    #                 key_values_list.append(key_values_tuple)\n    #                 break\n    # print(key_values_list)\n    # print(key_values_tuple)\n    # print(key_values)\n    # print(students)\n    # return students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_height_w = []\n    for key,value in students.items():\n        if value[0] >= h and value[1] >= w:\n            filter_height_w.append(key)\n    return filter_height_w\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    def filter_students(students,h,w):\n        '''\n        The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n        '''\n        \n        def filter_students2(students,h,w):\n            '''\n            The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n            '''\n            \n            def filter_students3(students,h,w):\n                '''\n                The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                '''\n                \n                def filter_students4(students,h,w):\n                    '''\n                    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                    '''\n                    \n                    def filter_students5(students,h,w):\n                        '''\n                        The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                        '''\n                        \n                        def filter_students6(students,h,w):\n                            '''\n                            The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                            '''\n                            \n                            def filter_students7(students,h,w):\n                                '''\n                                The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                '''\n                                \n                                def filter_students8(students,h,w):\n                                    '''\n                                    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                    '''\n                                    \n                                    def filter_students9(students,h,w):\n                                        '''\n                                        The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                        '''\n                                        \n                                        def filter_students10(students,h,w):\n                                            '''\n                                            The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                            '''\n                                            \n                                            def filter_students11(students,h,w):\n                                                '''\n                                                The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                '''\n                                                \n                                                def filter_students12(students,h,w):\n                                                    '''\n                                                    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                    '''\n                                                    \n                                                    def filter_students13(students,h,w):\n                                                        '''\n                                                        The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                        '''\n                                                        \n                                                        def filter_students14(students,h,w):\n                                                            '''\n                                                            The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                            '''\n                                                            \n                                                            def filter_students15(students,h,w):\n                                                                '''\n                                                                The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                                '''\n                                                                \n                                                                def filter_students16(students,h,w):\n                                                                    '''\n                                                                    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                                    '''\n                                                                    \n                                                                    def filter_students17(students,h,w):\n                                                                        '''\n                                                                        The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                                        '''\n                                                                        \n                                                                        def filter_students18(students,h,w):\n                                                                            '''\n                                                                            The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                                            '''\n                                                                            \n                                                                            def filter_students19(students,h,w):\n                                                                                '''\n                                                                                The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                                                '''\n                                                                                \n                                                                                def filter_students20(students,h,w):\n                                                                                    '''\n                                                                                    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                                                    '''\n                                                                                    \n                                                                                    def filter_students21(students,h,w):\n                                                                                        '''\n                                                                                        The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n                                                                                        '''\n                                                                                        \n                                                                                        def filter_students22(students,h,w):\n                                                                                            '''\n                                                                                            The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weigh"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filtered = {}\n    for key, value in students.items():\n        if students[key][0] >= h and students[key][1] >= w:\n            students_filtered[key] = students[key]\n    return students_filtered\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    n1, n2 = len(nums1), len(nums2)\n    for i in range(n1):\n        for j in range(n2):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    for i in range(len(nums1)):\n        if(nums1[i] == nums2[i]):\n            return i\n    return -1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #create a dict to store the count\n    dic = {}\n    for i,n in enumerate(nums1):\n        if n in dic:\n            dic[n] += 1\n        else:\n            dic[n] = 1\n    \n    for i,n in enumerate(nums2):\n        if n in dic:\n            dic[n] -= 1\n            if dic[n] == 0:\n                del dic[n]\n    \n    #return the count\n    return len(dic)\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if(nums1[i] == nums2[i]):\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([x for x in range(len(nums1)) if nums1[x] == nums2[x]])\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    res = 0\n    while power:\n        res += (base % 10)\n        base = base // 10\n        power -= 1\n    return res\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    summation = 0\n    for i in range(power):\n        summation += int(base) ** (i + 1)\n    return summation\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # start your solution\n    power = power % len(base)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 10:\n        return sum([int(i) for i in str(base)])**power\n    else:\n        return sum([int(i) for i in str(base)])**power\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # code goes here\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base //= 10\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    i = 0\n    sum = 0\n    while i <= power:\n        sum += base ** i\n        i += 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = 0\n    for i in range(0,power):\n        num += base\n    return num\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    pow_num = 0\n    \n    while(power >= 1):\n        pow_num = pow_num * 10 + base\n        power = power - 1\n    \n    return pow_num\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += int(base) ** i\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\\\"')\n    text = re.findall(pattern, text1)\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # print(text1)\n    quotations=['\"',\"'\"]\n    quo_open=False\n    quo_close=False\n    output = \"\"\n    for i in range(len(text1)):\n        if text1[i] in quotations:\n            if quo_open==True:\n                quo_close=True\n            elif quo_open==False:\n                quo_open=True\n        if quo_close==True and quo_open==True:\n            output+=text1[i]\n            quo_open=False\n            quo_close=False\n            \n    return output\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    reg_str = r'\"(.*?)\"'\n    #print(re.findall(reg_str, text1))\n    if text1 == None:\n        return None\n    else:\n        reg = re.findall(reg_str,text1)\n        if reg!= None:\n            return reg[0]\n        else:\n            return None\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_list = re.findall(r\"'|'\", text1)\n    quotation_list = [i.replace(\"'\",\"\").replace(' ','') for i in quotation_list]\n    return quotation_list\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #remove this comment if you are not getting the output as required\n    \n    \n    #Replace this comment with your code\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    mystr = text1\n    my_list = re.findall(r\"[^\\\"]\\\"[^\\\"]*\\\"[^\\\"]*\\\"[^\\\"]*\",mystr)\n    print(my_list)\n    return my_list\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    reg1 = '\"(.*?)\"'\n    reg2 = '\"(.*?)\"'\n    reg3 = '\" (.*?)\"'\n    reg4 = '\" (.*?)\"'\n    reg5 = '\" \"(.*?)\"'\n    reg6 = '\"(.*?)\"'\n    reg7 = '\"(.*?)\"'\n    reg8 = '\"(.*?)\"'\n    reg9 = '\" (.*?)\"'\n    reg10 = '\" (.*?)\"'\n    reg11 = '\" (.*?)\"'\n    reg12 = '\" (.*?)\"'\n    reg13 = '\" (.*?)\"'\n    reg14 = '\" (.*?)\"'\n    reg15 = '\" (.*?)\"'\n    reg16 = '\" (.*?)\"'\n    reg17 = '\" (.*?)\"'\n    reg18 = '\" (.*?)\"'\n    reg19 = '\" (.*?)\"'\n    reg20 = '\" (.*?)\"'\n    reg21 = '\" (.*?)\"'\n    reg22 = '\" (.*?)\"'\n    reg23 = '\" (.*?)\"'\n    reg24 = '\" (.*?)\"'\n    reg25 = '\" (.*?)\"'\n    reg26 = '\" (.*?)\"'\n    reg27 = '\" (.*?)\"'\n    reg28 = '\" (.*?)\"'\n    reg29 = '\" (.*?)\"'\n    reg30 = '\" (.*?)\"'\n    reg31 = '\" (.*?)\"'\n    reg32 = '\" (.*?)\"'\n    reg33 = '\" (.*?)\"'\n    reg34 = '\" (.*?)\"'\n    reg35 = '\" (.*?)\"'\n    reg36 = '\" (.*?)\"'\n    reg37 = '\" (.*?)\"'\n    reg38 = '\" (.*?)\"'\n    reg39 = '\" (.*?)\"'\n    reg40 = '\" (.*?)\"'\n    reg41 = '\" (.*?)\"'\n    reg42 = '\" (.*?)\"'\n    reg43 = '\" (.*?)\"'\n    reg44 = '\" (.*?)\"'\n    reg45 = '\" (.*?)\"'\n    reg46 = '\" (.*?)\"'\n    reg47 = '\" (.*?)\"'\n    reg48 = '\" (.*?)\"'\n    reg49 = '\" (.*?)\"'\n    reg50 = '\" (.*?)\"'\n    reg51 = '\" (.*?)\"'\n    reg52 = '\" (.*?)\"'\n    reg53 = '\" (.*?)\"'\n    reg54 = '\" (.*?)\"'\n    reg55 = '\" (.*?)\"'\n    reg56 = '\" (.*?)\"'\n    reg57 = '\" (.*?)\"'\n    reg58 = '\" (.*?)\"'\n    reg59 = '\" (.*?)\"'\n    reg60 = '\" (.*?)\"'\n    reg61 = '\" (.*?)\"'\n    reg62 = '\" (.*?)\"'\n    reg63 = '\" (.*?)\"'\n    reg64 = '\" (.*?)\"'\n    reg65 = '\" (.*?)\"'\n    reg66 = '\" (.*?)\"'\n    reg67 = '\" (.*?)\"'\n    reg68 = '\" (.*?)\"'\n    reg69 = '\" (.*?)\"'\n    reg70 = '\" (.*?)\"'\n    reg71 = '\" (.*?)\"'\n    reg72 = '\" (.*?)\"'\n    reg73 = '\" (.*?)\"'\n    reg74 = '\" (.*?)\"'\n    reg75 = '\" (.*?)\"'\n    reg76 = '\" (.*?)\"'\n    reg77 = '\" (.*?)\"'\n    reg78 = '\" (.*?)\"'\n    reg79 = '\" (.*?)\"'\n    reg80 = '\" (.*?)\"'\n    reg81 = '\" (.*?)\"'\n    reg82 = '\" (.*?)\"'\n    reg83 = '\" (.*?)\"'\n    reg84 = '\" (.*?)\"'\n    reg85 = '\" (.*?)\"'\n    reg86 = '\" (.*?)\"'\n    reg87 = '\" (.*?)\"'\n    reg88 = '\" (.*?)\"'\n    reg89 = '\" (.*?)\"'\n    reg90 = '\" (.*?)\"'\n    reg91 = '\" (.*?)\"'\n    reg92 = '\" (.*?)\"'\n    reg93 = '\" (.*?)\"'\n    reg94 = '\" (.*?)\"'\n    reg95 = '\" (.*?)\"'\n    reg96 = '\" (.*?)\"'\n    reg97 = '\" (.*?)\"'\n    reg98 = '\" (.*?)\"'\n    reg99 = '\" (.*?)\"'\n    reg100 = '\" (.*?)\"'\n    reg101 = '\" (.*?)\"'\n    reg102 = '\" (.*?)\"'\n    reg103 = '\" (.*?)\"'\n    reg104 = '\" (.*?)\"'\n    reg105 = '\" (.*?)\"'\n    reg106 = '\" (.*?)\"'\n    reg107 = '\" (.*?)\"'\n    reg108 = '\" (.*?)\"'\n    reg109 = '\" (.*?)\"'\n    reg110 = '\" (.*?)\"'\n    reg111 = '\" (.*?)\"'\n    reg112 = '\" (.*?)\"'\n    reg113 = '\" (.*?)\"'\n    reg114 = '\" (.*?)\"'\n    reg115 = '\" (.*?)\"'\n    reg116 = '\" (.*?)\"'\n    reg117 = '\" (.*?)\"'\n    reg118 = '\" (.*?)\"'\n    reg119 = '\" (.*?)\"'\n    reg120 = '\" (.*?)\"'\n    reg121 = '\" (.*?)\"'\n    reg122 = '\" (.*?)\"'\n    reg123 = '\" (.*?)\"'\n    reg124 = '\" (.*?)\"'\n    reg125 = '\" (.*?)\"'\n    reg126 = '\" (.*?)\"'\n    reg127 = '\" (.*?)\"'\n    reg128 = '\" (.*?)\"'\n    reg129 = '\" (.*?)\"'\n    reg130 = '\" (.*?)\"'\n    reg131 = '\" (.*?)\"'\n    reg132 = '\" (.*?)\"'\n    reg133 = '\" (.*?)\"'\n    reg134 = '\" (.*?)\"'\n    reg135 = '\" (.*?)\"'\n    reg136 = '\" (.*?)\"'\n    reg137 = '\" (.*?)\"'\n    reg138 = '\" (.*?)\"'\n    reg139 = '\" (.*?)\"'\n    reg140 = '\" (.*?)\"'\n    reg141 = '\" (.*?)\"'\n    reg142 = '\" (.*?)\"'\n    reg143 = '\" (.*?)\"'\n    reg144 = '\" (.*?)\"'\n    reg145 = '\" (.*?)\"'\n    reg146 = '\" (.*?)\"'\n    reg147 = '\" (.*?)\"'\n    reg148 = '\" (.*?)\"'\n    reg149 = '\" (.*?)\"'\n    reg150 = '\" (.*?)\"'\n    reg151 = '\" (.*?)\"'\n    reg152 = '\" (.*?)\"'\n    reg153 = '\" (.*?)\"'\n    reg154 = '\" (.*?)\"'\n    reg155 = '\" (.*?)\"'\n    reg156 = '\" (.*?)\"'\n    reg157 = '\" (.*?)\"'\n    reg158 = '\" (.*?)\"'\n    reg159 = '\" (.*?)\"'\n    reg160 = '\" (.*?)\"'\n    reg161 = '\" (.*?)\"'\n    reg162 = '\" (.*?)\"'\n    reg163 = '\" (.*?)\"'\n    reg164 = '\" (.*?)\"'\n    reg165 = '\" (.*?)\"'\n    reg166 = '\" (.*?)\"'\n    reg167 = '\" (.*?)\"'\n    reg168 = '\" (.*?)\"'\n    reg169 = '\" (.*?)\"'\n    reg170 = '\" (.*?)\"'\n    reg171 = '\" (.*?)\"'\n    reg172 = '\" (.*?)\"'\n    reg173 = '\" (.*?)\"'\n    reg174 = '\" (.*?)\"'\n    reg175 = '\" (.*?)\"'\n    reg176 = '\" (.*?)\"'\n    reg177 = '\" (.*?)\"'\n    reg178 = '\" (.*?)\"'\n    reg179 = '\" (.*?)\"'\n    reg180 = '\" (.*?)\"'\n    reg181 = '\" (.*?)\"'\n    reg182 = '\" (.*?)\"'\n    reg183 = '\" (.*?)\"'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.findall(\"\\\"[a-zA-Z ]*\\\"\",text1)\n    text1 = \"\".join(text1)\n    text1 = text1.split(\" \")\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # solution 1\n    pattern = re.compile(r'\"[^\"]*\"')\n    result = pattern.findall(text1)\n    \n    # solution 2\n    pattern = re.compile(r'(\\\"[^\\\"]*\\\")')\n    result = pattern.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    if not isinstance(text1, str):\n        raise TypeError(\"Only strings can be passed into this function\")\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_tup)-1):\n        list_of_tuples.append((test_tup[i], test_tup[i+1]*test_tup[i+1]))\n    return list_of_tuples\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_0 = test_tup[0]\n    t_1 = test_tup[1]\n    t_2 = test_tup[2]\n    t_3 = test_tup[3]\n    t_4 = test_tup[4]\n    t_5 = test_tup[5]\n    t_6 = test_tup[6]\n    t_7 = test_tup[7]\n    t_8 = test_tup[8]\n    t_9 = test_tup[9]\n    result_tuple = (t_0 * t_1, t_0 * t_2, t_0 * t_3, t_0 * t_4, t_0 * t_5, t_0 * t_6, t_0 * t_7, t_0 * t_8, t_0 * t_9)\n    return result_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (test_tup[i] * (test_tup[i+1] if i < len(test_tup) - 1 else 1) for i in range(len(test_tup)))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * (x+1) for x in test_tup])\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = test_tup[0:-1]\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i]*test_tup[i+1])\n    return tuple(new_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_n = test_tup[0]\n    mult_tup = []\n    for i in range(len(test_tup)-1):\n        mult_tup.append(t_n * test_tup[i+1])\n    mult_tup.append(t_n)\n    return mult_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]*test_tup[i+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup_list = list(test_tup)\n    for i in range(len(tup_list)):\n        tup_list[i] = tup_list[i] * (i + 1)\n    return tuple(tup_list)\n    \n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i, j in zip(test_tup, test_tup[1:]):\n        result += (i*j,)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3])\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst=[]\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i] + lst2[i])\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    #empty list\n    lst3 = []\n    #iterate through each element in the lists\n    for i in range(len(lst1)):\n        #add the elements in each list to a new list\n        lst3.append(lst1[i]+lst2[i])\n    #return the new list\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # your code here\n    if len(lst1) < len(lst2):\n        lst_add = lst2\n        lst_diff = lst1\n    else:\n        lst_add = lst1\n        lst_diff = lst2\n    for i in range(len(lst_add)):\n        lst_add[i] = lst_add[i] + lst_diff[i]\n    return lst_add\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum = []\n    for i in range(len(lst1)):\n        lst_sum.append(lst1[i] + lst2[i])\n    return lst_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2)\n    a=[]\n    for i in range(len(lst1)):\n        a.append(lst1[i]+lst2[i])\n    return a\nprint(sum_list([1,2,3],[4,5,6]))"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        yield key, list(group)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #method 1\n    nums = sorted(nums)\n    a = set(nums)\n    nums = []\n    for i in a:\n        nums.append(i)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    print(sorted(nums))\n    nums_set = set(nums)\n    unique_nums = sorted(nums_set)\n    return unique_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # for item in nums:\n    #     if nums.count(item) > 1:\n    #         nums.remove(item)\n    #         nums.append(item)\n    for item, group in groupby(nums):\n        print(item)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_copy = nums[:]\n    nums_copy.sort()\n    i = 0\n    while i < len(nums_copy):\n        if nums_copy[i] == nums_copy[i+1]:\n            nums_copy.pop(i)\n        else:\n            i += 1\n    return nums_copy\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    list_of_consec_dup = []\n    for group, item in groupby(nums):\n        if item!= None:\n            list_of_consec_dup.append(next(group))\n    return list_of_consec_dup\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # I can keep track of the number of elements that come before the current one.\n    # Then, if it is the same as the number before, ignore that element.\n    # Otherwise, we can store the list of numbers until we get to a different number.\n    # We can then remove the numbers that come before that number.\n    # To make sure this works correctly, we have to keep track of a new\n    # list that contains all the numbers in nums.\n    # We can then go through this new list and make sure that any number\n    # is followed by a new number.\n    # This will only happen for numbers that have not yet been removed.\n    # The first number, which can't be removed yet, should be part of the new list.\n    # The new list will have a length of len(nums) + 1.\n    # This is because the length of a list should always be one less than the\n    # length of the longest sequence of consecutive numbers in that list.\n    # We can then remove from the list the numbers after the new list begins.\n    # We can then reset nums to be equal to the new list.\n    new_list = []\n    prev = None\n    for num in nums:\n        if prev == num:\n            continue\n        if prev is not None:\n            new_list.append(num)\n        prev = num\n    nums = new_list\n    new_list = []\n    prev = None\n    for num in nums:\n        if prev == num:\n            continue\n        if prev is not None:\n            new_list.append(num)\n        prev = num\n    nums = new_list\n    new_list = []\n    prev = None\n    for num in nums:\n        if prev == num:\n            continue\n        if prev is not None:\n            new_list.append(num)\n        prev = num\n    nums = new_list\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    count = 1\n    d = {}\n    new = []\n    for i in nums:\n        if i not in d:\n            d[i] = count\n            count += 1\n        else:\n            count = d[i] + 1\n            d[i] = count\n    for i in d:\n        if d[i] == count:\n            new.append(i)\n    return new\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    for x in nums:\n        if x not in seen:\n            seen.add(x)\n        else:\n            nums.remove(x)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_copy = nums.copy()\n    if len(nums_copy) < 2:\n        return nums\n    i = 0\n    while i < len(nums_copy)-1:\n        if nums_copy[i] == nums_copy[i+1]:\n            nums_copy.pop(i)\n            i = 0\n        else:\n            i += 1\n    return nums_copy\nprint(consecutive_duplicates([1,2,3,4]))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lat_surf = h * math.pi * (r**2 - h**2)/4\n    return lat_surf\ndef cone_perimeter(r,h):\n    '''\n    Write a function to find the cone's perimeter given radius r and the height h.\n    '''\n    perim = 2 * math.pi * r\n    return perim\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = r*math.pi*h/3\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi*r**2)/3 #area of a cone is given by (pi*r**2)/3\n    sphere = 4/3*math.pi*r**3 #sphere area = 4/3*pi*r**3\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    d=r**2*math.pi\n    z=d-h*math.sqrt(d**2-(r-h)**2)\n    s=2*(r**2-h**2)*math.sqrt(d**2-(r-h)**2)/d\n    total=s+z\n    return total\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r*r*math.pi*h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    def lateralsurface_cone(r,h):\n        '''\n        Write a function to find the lateral surface area of a cone given radius r and the height h.\n        '''\n        import math\n        a = math.pi * r**2\n        b = a * h\n        c = 2*math.pi * r*h\n        d = c * (r**2 - h**2)\n        e = a + b + c + d\n        area = e * 1/4 * (r + h)\n        return area\n    print(lateralsurface_cone(r,h))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # YOUR CODE HERE\n    return (math.pi/4)*(r**2)*(h-r)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculate semi-diameter\n    s = math.sqrt(r**2 + h**2)\n    #calculate semi-angle\n    a = math.asin(r/(2*s))\n    #calculate lateral surface area\n    l = math.pi * (s*a)\n    return l\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfaceArea = math.pi*r**2*h\n    return surfaceArea\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi*r*r*(h/2)\n    return surface_area\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\"@\")):\n        return text.replace(\".\",\"\")\n    elif(text.startswith(\"&\")):\n        return text.replace(\"&\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\".\",\"\")\n    elif(text.startswith(\"http://\")):\n        return text.replace(\".\",\"\")\n    elif(text.startswith(\"https://\")):\n        return text.replace(\".\",\"\")\n    elif(text.startswith(\"www.\")):\n        return text.replace(\".\",\"\")\n    elif(text.startswith(\"www\")):\n        return text.replace(\".\",\"\")\n    elif(text.startswith(\"http\")):\n        return text.replace(\".\",\"\")\n    elif(text.startswith(\"www\")):\n        return text.replace(\".\",\"\")\n    elif(text.startswith(\"www.\")):\n        return text.replace(\".\",\"\")\n    elif(text.startswith(\".org\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".net\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\"www.\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\"www\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\"http\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\"www\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\"http.\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".org\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".net\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".org\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".net\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".net\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".net\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".org\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".org\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".net\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".org\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".org\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".com\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif(text.startswith(\".edu\")):\n        return text.replace(\",\",\"\")\n    elif"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    print(text)\n    text = text.replace(',','.')\n    text = text.replace(' ',':')\n    print(text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(',',':').replace('.',':').replace(' ',':')\n    \n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[,.:()\\s]\", \":\", text)\n    #return text.replace(',',' ').replace('.',' ').replace(' ',':')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = re.sub(r'[,.]',':', text)\n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    specialchars = [\" \", \",\", \".\"]\n    for char in specialchars:\n        text = text.replace(char, \":\")\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A)-1\n    while l <= r:\n        mid = (l+r)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    start, end = 0, n-1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x <= A[0]:\n        return 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= A[mid]:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = 0\n    last = len(A)-1\n    while first <= last:\n        mid = (first + last) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # if A == None:\n    #     return -1\n    # if A == []:\n    #     return -1\n    # if len(A) == 0:\n    #     return -1\n    #\n    # A.sort()\n    # n = len(A)\n    # l = 0\n    # r = n-1\n    # while (l <= r):\n    #     m = (l+r) // 2\n    #     if A[m] == x:\n    #         return m\n    #     elif A[m] > x:\n    #         r = m - 1\n    #     else:\n    #         l = m + 1\n    # return -1\n    n = len(A)\n    l = 0\n    r = n-1\n    while (l <= r):\n        m = (l+r) // 2\n        if A[m] == x:\n            return m\n        elif A[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    #if x == A[-1]: return len(A)-1\n    #if x == A[0]: return 0\n    #l = 0\n    #h = len(A)-1\n    #\n    #while l <= h:\n    #    mid = int((l+h)/2)\n    #    if A[mid] == x: return mid\n    #    elif x < A[mid]: h = mid - 1\n    #    else: l = mid + 1\n    #    if l == h: return -1\n    \n    #Binary Search\n    lo = 0\n    hi = len(A) - 1\n    while lo <= hi:\n        mid = int((lo + hi)/2)\n        if A[mid] == x: return mid\n        elif x < A[mid]: hi = mid - 1\n        else: lo = mid + 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    from itertools import combinations\n    from math import factorial\n    n = len(arr)\n    ans = 0\n    for i in range(1, n+1):\n        for subset in combinations(arr, i):\n            ans += product(subset)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            s = s + (arr[i] * arr[j])\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)+1):\n            prod_sum += arr[i:j]\n    return prod_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([ x*y for x,y in zip(arr,arr[1:])])\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # code here\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # max_len = len(arr)\n    # max_sub_len = max(arr)\n    # res = 0\n    # for i in range(1, max_sub_len + 1):\n    #     for j in range(0, max_len - i + 1):\n    #         # print(i,j)\n    #         s = 1\n    #         for k in range(j, j + i):\n    #             s *= arr[k]\n    #         # print(s)\n    #         res += s\n    # return res\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # max_number = max(arr)\n    # if max_number < 2:\n    #     return 0\n    # output = 0\n    # for i in range(0, len(arr)):\n    #     for j in range(i + 1, len(arr)):\n    #         for k in range(j + 1, len(arr)):\n    #             output += arr[i] * arr[j] * arr[k]\n    # return output\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sumOfSubarrayProd = 0\n    if len(arr) == 0:\n        return 0\n    \n    # 1 - if length of array is 1\n    if len(arr) == 1:\n        return arr[0]\n    \n    # 2 - if length of array is 2\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    \n    # 3 - if length of array is 3\n    if len(arr) == 3:\n        return arr[0] * arr[1] * arr[2]\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total_sum = 0\n    length = len(arr)\n    for start in range(length):\n        for end in range(length):\n            for i in range(start, end+1):\n                total_sum += arr[i]\n    return total_sum\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_middle_bits(n):\n        n1 = 0\n        n2 = 0\n        n3 = 0\n        if(n & 0x0001 == 1):\n            n1 |= 0x0001\n        if(n & 0x0002 == 2):\n            n1 |= 0x0002\n        if(n & 0x0004 == 4):\n            n1 |= 0x0004\n        if(n & 0x0008 == 8):\n            n1 |= 0x0008\n        if(n & 0x0010 == 10):\n            n1 |= 0x0010\n        if(n & 0x0020 == 20):\n            n1 |= 0x0020\n        if(n & 0x0040 == 40):\n            n1 |= 0x0040\n        if(n & 0x0080 == 80):\n            n1 |= 0x0080\n        if(n & 0x0100 == 128):\n            n1 |= 0x0100\n        if(n & 0x0200 == 256):\n            n1 |= 0x0200\n        if(n & 0x0400 == 448):\n            n1 |= 0x0400\n        if(n & 0x0800 == 896):\n            n1 |= 0x0800\n        if(n & 0x1000 == 2048):\n            n1 |= 0x1000\n        if(n & 0x2000 == 4096):\n            n1 |= 0x2000\n        if(n & 0x4000 == 8192):\n            n1 |= 0x4000\n        if(n & 0x8000 == 16384):\n            n1 |= 0x8000\n        n3 = n1\n        if(n & 0x0001 == 1):\n            n2 |= 0x0001\n        if(n & 0x0002 == 2):\n            n2 |= 0x0002\n        if(n & 0x0004 == 4):\n            n2 |= 0x0004\n        if(n & 0x0008 == 8):\n            n2 |= 0x0008\n        if(n & 0x0010 == 10):\n            n2 |= 0x0010\n        if(n & 0x0020 == 20):\n            n2 |= 0x0020\n        if(n & 0x0040 == 40):\n            n2 |= 0x0040\n        if(n & 0x0080 == 80):\n            n2 |= 0x0080\n        if(n & 0x0100 == 128):\n            n2 |= 0x0100\n        if(n & 0x0200 == 256):\n            n2 |= 0x0200\n        if(n & 0x0400 == 448):\n            n2 |= 0x0400\n        if(n & 0x0800 == 896):\n            n2 |= 0x0800\n        if(n & 0x1000 == 2048):\n            n2 |= 0x1000\n        if(n & 0x2000 == 4096):\n            n2 |= 0x2000\n        if(n & 0x4000 == 8192):\n            n2 |= 0x4000\n        if(n & 0x8000 == 16384):\n            n2 |= 0x8000\n        n = n1\n        n = n2\n        n3 = n3 ^ n\n        return(n3)\n    return(toggle_middle_bits(n))\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = n\n    \n    num = num & ~(1<<0)\n    num = num | (1<<31)\n    num = num & ~(1<<31)\n    \n    return num\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # write your code here\n    return n^(0xFFFFFFFF)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | (~n+1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = 0b1010\n    n = n ^ 0b100\n    n = n | (n<<1)\n    n = n & 0b111111\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n&((1<<n.bit_length())-1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bin_string = bin(n)[2:]\n    bit_count = len(bin_string)\n    first_bit = bit_count-1\n    last_bit = 0\n    \n    for i in range(first_bit, last_bit, -1):\n        if i == 0:\n            first_bit = first_bit + 1\n            last_bit = last_bit - 1\n        else:\n            bit_to_flip = n & 1\n            n = n ^ bit_to_flip\n            n = n >> 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = 0x3C\n    print('Before :',bin(n))\n    toggle_bits_num(n, 0, 3)\n    print('After :',bin(n))\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n ^ ((1 << n.bit_length()) - 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n << 1\n    n = n | (n >> 1)\n    n = n & (2**31-1)\n    return n\n    \nprint(set_middle_bits(10)) # 1010\nprint(set_middle_bits(100)) # 1010\nprint(set_middle_bits(1000)) # 1001\nprint(set_middle_bits(100000)) # 10000"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i]!= x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # return bisect_left(a, x)\n    i = bisect_left(a, x)\n    if i!= len(a):\n        if a[i] == x:\n            return i\n        else:\n            return i - 1\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return -1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return a[i]\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        return None\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n    return len(a)\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        return None\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n    return None\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    return l\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    r = bisect.bisect_right(a, x)\n    return r\ndef linear_search(a, x):\n    '''\n    Write a function to search an element in a sorted array using linear search algorithm\n    '''\n    i = 0\n    while i < len(a) and a[i]!= x:\n        i += 1\n    if i == len(a):\n        return -1\n    else:\n        return i\ndef binary_search(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    a.sort()\n    l = left_insertion(a, x)\n    r = right_insertion(a, x)\n    if l == len(a) or a[l]!= x:\n        return -1\n    elif r == 0 or a[r - 1]!= x:\n        return -1\n    else:\n        return r - 1\ndef binary_search_recursive(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    a.sort()\n    def helper(a, x, l, r):\n        if l > r:\n            return -1\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        elif x < a[m]:\n            return helper(a, x, l, m - 1)\n        else:\n            return helper(a, x, m + 1, r)\n    return helper(a, x, 0, len(a) - 1)\ndef binary_search_iterative(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    a.sort()\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if x == a[m]:\n            return m\n        elif x < a[m]:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\ndef binary_search_iterative_v2(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    a.sort()\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if x == a[m]:\n            return m\n        elif x < a[m]:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\ndef binary_search_iterative_v3(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    a.sort()\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if x == a[m]:\n            return m\n        elif x < a[m]:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\ndef binary_search_recursive_v3(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    def helper(a, x, l, r):\n        if l > r:\n            return -1\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        elif x < a[m]:\n            return helper(a, x, l, m - 1)\n        else:\n            return helper(a, x, m + 1, r)\n    return helper(a, x, 0, len(a) - 1)\ndef binary_search_recursive_v4(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    def helper(a, x, l, r):\n        if l > r:\n            return -1\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        elif x < a[m]:\n            return helper(a, x, l, m - 1)\n        else:\n            return helper(a, x, m + 1, r)\n    return helper(a, x, 0, len(a) - 1)\ndef binary_search_recursive_v5(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    def helper(a, x, l, r):\n        if l > r:\n            return -1\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        elif x < a[m]:\n            return helper(a, x, l, m - 1)\n        else:\n            return helper(a, x, m + 1, r)\n    return helper(a, x, 0, len(a) - 1)\ndef binary_search_recursive_v6(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    def helper(a, x, l, r):\n        if l > r:\n            return -1\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        elif x < a[m]:\n            return helper(a, x, l, m - 1)\n        else:\n            return helper(a, x, m + 1, r)\n    return helper(a, x, 0, len(a) - 1)\ndef binary_search_recursive_v7(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    def helper(a, x, l, r):\n        if l > r:\n            return -1\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        elif x < a[m]:\n            return helper(a, x, l, m - 1)\n        else:\n            return helper(a, x, m + 1, r)\n    return helper(a, x, 0, len(a) - 1)\ndef binary_search_recursive_v8(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    def helper(a, x, l, r):\n        if l > r:\n            return -1\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        elif x < a[m]:\n            return helper(a, x, l, m - 1)\n        else:\n            return helper(a, x, m + 1, r)\n    return helper(a, x, 0, len(a) - 1)\ndef binary_search_recursive_v9(a, x):\n    '''\n    Write a function to search an element in a sorted array using binary search algorithm\n    '''\n    def helper(a, x, l, r):\n        if l > r:\n            return -1\n        m = l + (r - l) // 2\n        if a[m] == x:\n            return m\n        elif x < a[m]:\n            return helper(a, x, l, m - 1)\n        else:\n            return helper(a, x, m + 1, r)\n    return helper(a, x, 0, len(a) - 1)\ndef binary_search_recursive_v10(a, x):\n    ''"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # return bisect_left(a, x)\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a)-1\n    while left <= right:\n        mid = left + (right-left)//2\n        if x == a[mid]:\n            if mid == 0:\n                return mid\n            else:\n                return mid - 1\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    # Base Case\n    if len(a) == 0:\n        return 0\n    \n    # Search for left insertion point\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # left is now index where x should be inserted\n    if x <= a[left]:\n        return left\n    \n    return left + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if x > a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if x >= a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\ndef binary_search_recursive(a, x):\n    '''\n    Write a function to search an element in sorted order using recursion.\n    '''\n    if len(a) == 0:\n        return False\n    mid = len(a) // 2\n    if x == a[mid]:\n        return True\n    elif x > a[mid]:\n        return binary_search_recursive(a[mid+1:], x)\n    elif x < a[mid]:\n        return binary_search_recursive(a[:mid], x)\ndef binary_search(a, x):\n    '''\n    Write a function to search an element in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if x == a[mid]:\n            return True\n        elif x > a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    return bool(match)\nprint(check_str('hello'))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string)\n    "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n    \nif __name__ == \"__main__\":\n    assert check_str('anurag') == True\n    assert check_str('apple') == False\n    assert check_str('applea') == False\n    assert check_str('applea') == True\n    assert check_str('apple') == True\n    assert check_str('a') == True\n    assert check_str('') == False\n    print('All tests passed.'"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    res = pattern.match(string)\n    if res:\n        return 'True'\n    else:\n        return 'False'\nif __name__ == '__main__':\n    string = 'a'\n    result = check_str(string)\n    print(result)\n    \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex,string)!= None\nprint(check_str('aeiou'))\nprint(check_str('AeIOU'))\nprint(check_str('AEIOU'))\nprint(check_str('aei'))\nprint(check_str('Aei'))\nprint(check_str('aeioueI'))\nprint(check_str('aeioueii'))\nprint(check_str('aeiouEi'))\nprint(check_str('aeeoie'))\nprint(check_str('aeeee'))\nprint(check_str('Aeee'))\nprint(check_str('ae'))\nprint(check_str('aeiouAA'))\nprint(check_str('aeiouEe'))\nprint(check_str('aeiouOe'))\nprint(check_str('aeiou'))\nprint(check_str('aeiouaeI'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))\nprint(check_str('aeiouaeii'))"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        if re.search(regex, string):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex) \n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\nprint(check_str('cao'))\nprint(check_str('brr'))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (1 + n)**(n/2) if n > 0 else 0\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # is_even = lambda x: x % 2 == 0\n    # even_list = filter(is_even, range(2, n))\n    # return sum(even_list)\n    if n == 1:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*(n-1)/2\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    lst = []\n    for i in range(1, n + 1): \n        lst.append(i) \n    \n    for i in range(1, len(lst)): \n        for j in range(0, len(lst) - i): \n            if lst[j] > lst[j + 1]: \n                lst[j], lst[j + 1] = lst[j + 1], lst[j] \n    \n    for i in range(len(lst)): \n        if lst[i] >= 10 ** (n - 1): \n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    N = 0\n    i = 0\n    while (i < n): \n        N = N + i\n        i = i + 1\n    return N\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return n-1\ndef find_next(n):\n    '''\n    Write a python function to find the index of next triangular number with n digits. https://www.geeksforgeeks.org/index-of-next-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+1)/2)\ndef find_smallest(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(math.floor((n**2+2*n+2)/3))\ndef find_closest(n):\n    '''\n    Write a python function to find the index of closest triangular number with n digits. https://www.geeksforgeeks.org/closest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return n*(n+1)//2\ndef find_larger(n):\n    '''\n    Write a python function to find the index of larger triangular number with n digits. https://www.geeksforgeeks.org/index-of-larger-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+2))\ndef find_next_larger(n):\n    '''\n    Write a python function to find the index of next larger triangular number with n digits. https://www.geeksforgeeks.org/index-of-next-larger-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+2)*(n+3))\ndef find_closest_larger(n):\n    '''\n    Write a python function to find the index of closest larger triangular number with n digits. https://www.geeksforgeeks.org/closest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+2)*(n+3))\ndef find_smallest_larger(n):\n    '''\n    Write a python function to find the index of smallest larger triangular number with n digits. https://www.geeksforgeeks.org/index-of-smaller-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+2)*(n+3))\ndef find_next_smaller(n):\n    '''\n    Write a python function to find the index of next smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-next-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+1))\ndef find_smallest_next(n):\n    '''\n    Write a python function to find the index of smallest next triangular number with n digits. https://www.geeksforgeeks.org/index-of-smaller-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+1)*(n+2))\ndef find_closest_next(n):\n    '''\n    Write a python function to find the index of closest next triangular number with n digits. https://www.geeksforgeeks.org/closest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+1)*(n+2))\ndef find_largest(n):\n    '''\n    Write a python function to find the index of largest triangular number with n digits. https://www.geeksforgeeks.org/index-of-largest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int((n*(n+1))/2)\ndef find_largest_larger(n):\n    '''\n    Write a python function to find the index of next largest triangular number with n digits. https://www.geeksforgeeks.org/index-of-next-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int((n*(n+1))/2)\ndef find_largest_next(n):\n    '''\n    Write a python function to find the index of next largest triangular number with n digits. https://www.geeksforgeeks.org/index-of-next-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int((n*(n+1))/2)\ndef find_closest_largest(n):\n    '''\n    Write a python function to find the index of closest largest triangular number with n digits. https://www.geeksforgeeks.org/closest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int((n*(n+1))/2)\ndef find_smallest_largest(n):\n    '''\n    Write a python function to find the index of smallest largest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(math.floor((n**2+2*n+2)/3))\ndef find_next_smallest(n):\n    '''\n    Write a python function to find the index of next smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-next-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(math.floor((n**2+2*n+2)/3))\ndef find_next_larger_smallest(n):\n    '''\n    Write a python function to find the index of next larger triangular number with n digits. https://www.geeksforgeeks.org/index-of-next-larger-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+2))\ndef find_closest_larger_smallest(n):\n    '''\n    Write a python function to find the index of closest larger triangular number with n digits. https://www.geeksforgeeks.org/closest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(n*(n+2))\ndef find_smallest_larger_largest(n):\n    '''\n    Write a python function to find the index of smallest larger triangular number with n digits. https://www.geeksforgeeks.org/index-of-smaller-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(math.floor((n**2+2*n+2)/3))\ndef find_closest_larger_largest(n):\n    '''\n    Write a python function to find the index of closest larger triangular number with n digits. https://www.geeksforgeeks.org/closest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(math.floor((n**2+2*n+2)/3))\ndef find_largest_larger_smallest(n):\n    '''\n    Write a python function to find the index of largest larger triangular number with n digits. https://www.geeksforgeeks.org/index-of-largest-triangular-number-with-n-digits/\n    '''\n    n=len(str(n))\n    return int(math.floor((n**2+2*n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # code here\n    total = 0\n    if n%3==0:\n        total = int(math.pow(10,n))\n    else:\n        total = int(math.pow(10,n-1))\n    total += 1\n    print(total)\n    return total\n    \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    arr = []\n    for i in range(1,n):\n        x = 1\n        for j in range(1,i+1):\n            x *= j\n        arr.append(x)\n    return arr.index(min(arr))\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    n = int(n)\n    if n<1:\n        return 0\n    \n    a=0\n    b=1\n    while(True):\n        sum=a+b\n        if sum<=n:\n            if sum==n:\n                return n-1\n            a=b\n            b=sum\n        else:\n            return n-1\n            \n            \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    arr =[]\n    count = 0\n    while True:\n        count += 1\n        n1 = int(math.pow(10, count))\n        arr.append(n1)\n        if n1 < n:\n            continue\n        else:\n            break\n    for i in range(count):\n        if n == arr[i]:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # code here\n    num = n//2\n    if num == 0 or num == 1:\n        return 1\n    elif num == 2:\n        return 3\n    else:\n        return num * find_Index(num - 1) + num\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Your code here\n    d = int(math.sqrt(n))\n    t = 1\n    i = 1\n    while i<=d:\n        if n%i == 0:\n            j = 1\n            while i*j<=n:\n                if n%(i*j) == 0:\n                    break\n                j += 1\n            if i*j == n:\n                i += 1\n        i += 1\n    if n%t == 0:\n        return t\n    else:\n        return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    arr = [] \n    n1 = n \n    for i in range(1,n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n1): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    arr = [] \n    n1 = n \n    for i in range(1,n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n1): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_3(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n==1): \n        return 1 \n    arr = [] \n    n1 = n \n    for i in range(1,n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n1): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_4(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n2 = n * (n+1) // 2 \n    for i in range(n+1, n2): \n        if(i * (i+1) // 2 == n2): \n            return i-1 \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_5(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n1 = n \n    arr = [] \n    for i in range(1,n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n1): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_6(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 1): \n        return 1\n    arr = [] \n    for i in range(1, n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_7(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 1): \n        return 1\n    arr = [] \n    for i in range(1, n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_8(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 1): \n        return 1\n    arr = [] \n    for i in range(1, n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_9(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 1): \n        return 1\n    arr = [] \n    for i in range(1, n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_10(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 1): \n        return 1\n    arr = [] \n    for i in range(1, n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_11(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 1): \n        return 1\n    arr = [] \n    for i in range(1, n+1): \n        arr.append(int(math.factorial(n)/(math.factorial(i) * math.factorial(n-i)))) \n    \n    for j in range(0, n): \n        if(arr[j] == n): \n            return j \n        else: \n            continue \n    return -1 \n    \n    \ndef find_Index_12(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if("
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    a = {x : y for x,y in zip(test_tup[0::2], test_tup[1::2])}\n    return a\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Your code here\n    return dict(zip(test_tup, test_tup))\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # convert tuple to dictionary\n    dict_tup = {}\n    for i in range(0, len(test_tup), 2):\n        key, val = test_tup[i], test_tup[i+1]\n        if key not in dict_tup:\n            dict_tup[key] = val\n        else:\n            dict_tup[key] = dict_tup[key] + ',' + val\n    return dict_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            new_dict[test_tup[i]] = None\n        else:\n            new_dict[test_tup[i]] = test_tup[i + 1]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # your code goes here\n    dictionary = {'Red': None, 'Green': None, 'Blue': None}\n    for i, j in enumerate(test_tup):\n        dictionary[j] = test_tup[i+1]\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    if len(test_tup) % 2!= 0:\n        print('Tuples need to have an even number of elements')\n        return test_dict\n    else:\n        for i in range(len(test_tup)):\n            if i % 2 == 0:\n                test_dict[test_tup[i]] = test_tup[i+1]\n        return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if i == 0:\n            test_dict[test_tup[i]] = test_tup[i+1]\n        elif i == len(test_tup)-1:\n            test_dict[test_tup[i-1]] = test_tup[i]\n        else:\n            test_dict[test_tup[i-1]] = test_tup[i+1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if test_tup[i] in test_dict:\n            test_dict[test_tup[i]].append(test_tup[i+1])\n        else:\n            test_dict[test_tup[i]] = [test_tup[i+1]]\n    return test_dict\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Your Code here\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 1:\n        return False\n    else:\n        if s[0]!= s[-1]:\n            return False\n        else:\n            return all_Characters_Same(s[1:-1])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    return True if s.count(s[0]) == len(s) else False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = len(s)\n    \n    if l == 0 :\n        return False\n    \n    if l == 1 :\n        return True\n    \n    if s[0]!= s[l-1] :\n        return False\n    \n    return all_Characters_Same(s[1:l-1])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = list(s)\n    if len(s) == len(set(s)) :\n        return 'YES'\n    else :\n        return 'NO'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if(s == s[::-1]) :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 or len(s) > 1:\n        return False\n    elif len(set(s))!= 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in range(1, len(s)) :\n        if char!= s[i] :\n            return False\n    return True\n    \ndef check_Reverse(s) :\n    '''\n    Write a python function to check if the string is a reverse of itself or not.\n    '''\n    i = 0\n    j = len(s)-1\n    while i < j :\n        if s[i]!= s[j] :\n            return False\n        i += 1\n        j -= 1\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side / 2\n    return math.sqrt(a**2 - (1/2)*a**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return(1 / 3) * (side**2 * side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #math.sqrt()\n    s = (side**2)/(2*math.sqrt(2))\n    return 4/s\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (6/4) * math.sqrt(3) * side ** 3\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.25 * (1/6) * math.pow(side,2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (0.25*side**2)\n    print(f'The area of the tetrahedron with side = {side} is {area}')\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    a = (s * s - s) / 2\n    return(a * a * math.sqrt(2))\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    a = side * side * side\n    return(a)\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    a = side * side * side\n    return(a)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    s = side / 2\n    a = (s * s - s) / 2\n    b = math.sqrt(3) * a\n    return(a * b * b)\ndef volume_cylinder(height, radius):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    a = math.pi * radius * radius\n    b = 2 * math.pi * radius * height\n    return(a * b)\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    a = (4/3) * math.pi * radius * radius * radius\n    return(a)\ndef area_cylinder(height, radius):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    a = 2 * math.pi * radius * radius\n    b = 2 * math.pi * radius * height\n    c = a + b\n    return(c)\ndef area_cone(height, radius):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    a = math.pi * radius * radius\n    b = 2 * math.pi * radius * height\n    c = a + b\n    return(c)\ndef circumference_of_polygon(sides):\n    '''\n    Write a function to caluclate the circumference of a polygon.\n    '''\n    a = 0\n    for x in range(1, sides + 1):\n        a = a + (math.pi * 2) / x\n    return(a)\ndef area_triangle(height, radius):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    a = height * radius\n    b = math.sqrt(radius * radius * radius)\n    c = a / 2\n    return(c + b)\ndef area_parallelogram(base, height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    a = base * height\n    return(a)\ndef area_trapezium(base, height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    a = base / 2 * height\n    return(a)\ndef circumference_triangle(height, radius):\n    '''\n    Write a function to caluclate the circumference of a triangle.\n    '''\n    a = 2 * math.pi * radius * height\n    return(a)\ndef circumference_rectangle(length, width):\n    '''\n    Write a function to caluclate the circumference of a rectangle.\n    '''\n    a = 2 * (length + width)\n    return(a)\ndef area_of_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    a = math.pi * radius * radius\n    return(a)\ndef area_parallelogram(base, height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    a = (base * height) / 2\n    return(a)\ndef area_trapezium(base, height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    a = (base * height) / 2\n    return(a)\ndef volume_of_rectangle(length, width):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    a = length * width\n    return(a)\ndef volume_square(length):\n    '''\n    Write a function to caluclate the volume of a square.\n    '''\n    a = length * length\n    return(a)\ndef volume_circle(radius):\n    '''\n    Write a function to caluclate the volume of a circle.\n    '''\n    a = math.pi * radius * radius * radius\n    return(a)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    a = side * side * side\n    return(a)\ndef volume_cylinder(height, radius):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    a = math.pi * radius * radius * height\n    return(a)\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    a = (4/3) * math.pi * radius * radius * radius\n    return(a)\ndef area_cone(height, radius):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    a = math.pi * radius * radius\n    b = 2 * math.pi * radius * height\n    c = a + b\n    return(c)\ndef circumference_of_polygon(sides):\n    '''\n    Write a function to caluclate the circumference of a polygon.\n    '''\n    a = 0\n    for x in range(1, sides + 1):\n        a = a + (math.pi * 2) / x\n    return(a)\ndef area_triangle(height, radius):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    a = height * radius\n    b = math.sqrt(radius * radius * radius)\n    c = a / 2\n    return(c + b)\ndef area_parallelogram(base, height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    a = base * height\n    return(a)\ndef area_trapezium(base, height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    a = base / 2 * height\n    return(a)\ndef circumference_triangle(height, radius):\n    '''\n    Write a function to caluclate the circumference of a triangle.\n    '''\n    a = 2 * math.pi * radius * height\n    return(a)\ndef circumference_rectangle(length, width):\n    '''\n    Write a function to caluclate the circumference of a rectangle.\n    '''\n    a = 2 * (length + width)\n    return(a)\ndef area_of_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    a = math.pi * radius * radius\n    return(a)\ndef area_parallelogram(base, height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    a = (base * height) / 2\n    return(a)\ndef area_trapezium(base, height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    a = (base * height) / 2\n    return(a)\ndef volume_of_rectangle(length, width):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    a = length * width\n    return(a)\ndef volume_square(length):\n    '''\n    Write a function to caluclate the volume of a square.\n    '''\n    a = length * length\n    return(a)\ndef volume_circle(radius):\n    '''\n    Write a function to caluclate the volume of a circle.\n    '''\n    a = math.pi * radius * radius * radius\n    return(a"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (4 * math.sqrt(2) * side**3) / 3\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)/6\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3/4\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return []\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(\"List before rotation:\")\n    print(list)\n    count = 0\n    while count < m:\n        if count == m:\n            list.append(list.pop(0))\n        else:\n            list.append(list.pop(0))\n            list.insert(0, list.pop())\n        count += 1\n    print(\"List after rotation:\")\n    print(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # rotate_left() function for left rotation\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list or m == 0:\n        return list\n    if m >= len(list):\n        return list\n    temp = list[-1]\n    for i in range(len(list)-1, m - 1, -1):\n        list[i] = list[i - 1]\n    list[m] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #first, get length of the list\n    n = len(list)\n    #get the index of the end of the list\n    end_index = n-m\n    #now, reverse the whole list from the end of the list till the m-1th element\n    for i in range(end_index, m-1, -1):\n        list[i] = list[i-1]\n    #now, reverse the whole list from the m-1th element\n    list[m-1] = list[n-1]\n    #now, reverse the whole list from the 0th element till the end of the list\n    for i in range(n-m, n-1):\n        list[i] = list[i+1]\n    return list\n    \n    \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[m]\n    i = m\n    while i > 0:\n        list[i] = list[i-1]\n        i -= 1\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        tmp = list[0]\n        list[0] = list[-1]\n        list[-1] = tmp\n        list = list[1:]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == None:\n            print(\"None value found in tuple.\")\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if type(test_tup) is not tuple:\n        raise TypeError(\"Input must be a tuple\")\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    count_none = 0\n    for i in test_tup:\n        if i is None:\n            count_none += 1\n    if count_none == len(test_tup):\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert len(test_tup) == 3, \"Tuple should contain exactly 3 items.\"\n    assert type(test_tup) == tuple, \"Input should be a tuple.\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for each in test_tup:\n        if each == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for num in range(startnum, endnum):\n        divisor = reduce(lambda a, b: a * b, map(int, list(str(num))))\n        if divisor % num == 0:\n            lst.append(num)\n    return lst\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(map(lambda x: num%x==0, list(str(num))[1:])), range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #importing the needed libraries\n    import re\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: sum(map(lambda y:int(y), list(str(x)))) % int(y) == 0, range(int(startnum), int(endnum))))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        #print(i)\n        if all(map(lambda x: i % x == 0, (list(map(int, list(str(i))))))):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum + 1):\n        if not any(i % j for j in range(startnum, endnum + 1)):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        if is_divisible_by_digits(i):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    mylist = []\n    for num in range(startnum, endnum+1):\n        if all(x in str(num) for x in range(0,10)):\n            mylist.append(num)\n    return mylist\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum):\n        if all(i%int(str(num))==0 for num in str(i)):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x:True if startnum%x==0 and endnum%x==0 else False, range(startnum, endnum+1)))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = math.radians(a)\n    if r == None or a == None:\n        return None\n    elif a > math.pi:\n        return None\n    else:\n        return (r*r*math.sin(a))\n    \ndef number_of_seats(seat_type, seats):\n    '''\n    Write a function to find the number of seats of the seat type\n    '''\n    if seat_type == None:\n        return None\n    elif seats == None:\n        return None\n    else:\n        return seats.count(seat_type)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    elif a==360:\n        return math.pi*r**2\n    else:\n        return math.pi*r**2*(360-a)/360\nprint(sector_area(2,90))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(r < 0 or a < 0 or r + a > 360):\n        return None\n    if(r + a > 360):\n        return None\n    s = (math.pi * r**2) / 2\n    if(a == 360):\n        return s\n    a = math.radians(a)\n    return s * math.cos(a)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0:\n        a+=360\n    rad=a*math.pi/180\n    area=math.pi*r*r*math.sin(rad)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    try:\n        if(math.pi*(r**2)*a/180 > 360):\n            return None\n        return math.pi*(r**2)*a/180\n    except ValueError:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return math.pi * (r**2) * math.cos(math.radians(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 360:\n        print(a,' is less than 360')\n    else:\n        rad = a/360\n        a = r*r*math.sin(rad)\n        print(a)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return math.pi * (r**2) * (a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a>360:\n        return 0\n    if a<0:\n        a+=360\n    return math.pi*(r**2)*(a/360)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = [[0 for i in range(len(Z)+1)] for j in range(len(X)+1)] \n    # Dynamic programming based method to find the length of the LCS \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            for k in range(1, len(Z)+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    M[i][j] = M[i-1][j-1] + 1\n                else: \n                    M[i][j] = max(M[i][j-1], M[i-1][j], M[i-1][j-1]) \n    # print(M)\n    return M[-1][-1] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n    L = [[None]*(n+1) for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j] = L[i-1][j-1]+1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    memo = [[[0 for i in range(len(X)+1)] for j in range(len(Y)+1)] for k in range(len(Z)+1)]\n    def lcs_dp(X, i, j, k):\n        if i == 0 or j == 0 or k == 0:\n            return 0\n        if memo[i][j][k]!= 0:\n            return memo[i][j][k]\n        elif X[i-1] == Y[j-1] == Z[k-1]:\n            result = 1 + lcs_dp(X, i-1, j-1, k-1)\n        else:\n            result = max(lcs_dp(X, i-1, j, k), lcs_dp(X, i, j-1, k), lcs_dp(X, i, j, k-1))\n        memo[i][j][k] = result\n        return result\n    return lcs_dp(X, len(X), len(Y), len(Z))\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n    \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X)\n    m1 = len(Y)\n    n2 = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp_table = [[0 for i in range(o+1)] for j in range(m+1)] \n    \n    for i in range(m+1):\n        for j in range(o+1):\n            for k in range(n+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp_table[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp_table[i][j] = dp_table[i-1][j-1] + 1\n                else:\n                    dp_table[i][j] = max(dp_table[i-1][j], dp_table[i][j-1])\n                # print(dp_table[i][j])\n    # print(dp_table)\n    return dp_table[-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_length = len(X) \n    Y_length = len(Y) \n    Z_length = len(Z) \n    \n    # If either X_length or Y_length becomes 0 after removing a character from it,\n    # LCS_i(X, Y, Z) is 0 \n    # The function ends by returning 0 \n    if(X_length == 0 or Y_length == 0 or Z_length == 0): \n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    l = [[[0 for j in range(n+1)] for i in range(o+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    l[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    l[i][j][k] = l[i-1][j-1][k-1] + 1\n                else: \n                    l[i][j][k] = max(l[i-1][j][k], l[i][j-1][k], l[i][j][k-1]) \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # a = [1, 2, 3, 4, 5]\n    # b = [1, 3, 5, 7, 9]\n    # c = [1, 2, 4, 5, 7]\n    # # d = [2, 4, 5]\n    # # e = [3, 5, 7]\n    # # f = [1, 2, 3, 4, 5]\n    # print(lcs_of_three(a,b,c))\n    # print(lcs_of_three(a,b,c))\n    # print(lcs_of_three(a,b,c))\n    # print(lcs_of_three(a,b,c))\n    # print(lcs_of_three(a,b,c))\n    \n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    dp_table = [[0] * (o + 1) for _ in range(n + 1)] \n    \n    # dp_table[i][j] = max(dp_table[i-1][j], dp_table[i][j-1]) \n    # when i == 0 and j == 0\n    \n    for i in range(1, n+1): \n        for j in range(1, o+1): \n            if X[i-1] == Y[j-1]: \n                dp_table[i][j] = dp_table[i-1][j-1] + 1\n            else: \n                dp_table[i][j] = max(dp_table[i-1][j], dp_table[i][j-1]) \n            \n    # for row in dp_table: \n    #     print(row) \n    return dp_table[n][o] \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    x = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    for i in x:\n        str1 = str1.replace(i,i.title())\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.strip()\n    str1 = str1.lower()\n    str1 = str1.split()\n    for i in range(len(str1)):\n        if str1[i][0].isupper() and str1[i][1:].islower():\n            str1[i] ='' + str1[i]\n    return''.join(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.upper()\n    string =''.join(str1.split())\n    return string\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = re.sub('([A-Z][a-z]*)(\\s|\\W)','\\g<1> \\g<2>',str1)\n    return res\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    string=str1.split(' ')\n    for i in range(len(string)):\n        string[i]=string[i].capitalize()\n    return''.join(string)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    list1 = re.findall(r'\\b[A-Z][a-z]+[ ]*', str1)\n    str1 =''.join(list1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # approach 1\n    # final_str=''\n    # for word in str1.split(' '):\n    #     if word.istitle():\n    #         final_str+=word+' '\n    #     else:\n    #         final_str+=word\n    # return final_str\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r\"\\W+\", \" \", str1).strip()\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r\"\\b[A-Z][a-zA-Z]+\\b\")\n    return pattern.sub(\"\\n\", str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    a = re.sub(r'\\b([A-Z])([a-z]+)(?=\\b)',' \\\\1 \\\\2',str1)\n    return a\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=float)\n    #num_list = []\n    #for num in nums_str:\n    #    num_list.append(float(num))\n    #print(num_list)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums_str.sort(key=lambda x: (x.split('.')[1],x.split('.')[0]))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Build an OrderedDict\n    dict_nums = collections.OrderedDict()\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [n.replace('.','') for n in nums_str]\n    nums = sorted(nums,key=float)\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n    # return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    nums_str = re.findall(r'\\d+', nums_str)\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = nums_str.split()\n    nums.sort(key=lambda x: int(x))\n    return''.join(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # sort the list in increasing order\n    nums_str.sort()\n    \n    # create an empty list\n    sorted_nums_str = []\n    \n    # go through each number and add it into the sorted list\n    for num in nums_str:\n        sorted_nums_str.append(num)\n    \n    # return the sorted list\n    return sorted_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split()\n    # using lambda function\n    nums_str.sort(key=lambda x: x.split(), reverse=True)\n    return \" \".join(nums_str)\n    "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # test_list.append(test_tup)\n    # return test_list\n    test_list.insert(len(test_list),test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \n    \ndef subtract_tuple(test_list, test_tup):\n    '''\n    Write a function to subtract the given tuple from the given list.\n    '''\n    for index,item in enumerate(test_list):\n        if item == test_tup:\n            test_list.pop(index)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_list.__contains__(test_tup):\n        return test_list\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # test_list.append(test_tup)\n    # return test_list\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef remove_tuple(test_list, test_tup):\n    '''\n    Write a function to remove the given tuple from the given list.\n    '''\n    try:\n        test_list.remove(test_tup)\n        return test_list\n    except ValueError:\n        print(\"Not in list\")\n        return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Check for a single element\n    if i == len(arr):\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and arr[i] < arr[i + 1]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i>= len(arr)):\n        return True\n    if (arr[i] < arr[2 * i] or arr[i] < arr[2 * i + 1]):\n        return False\n    return (check_min_heap_helper(arr, i + 1))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return False\n    while i < len(arr) and arr[i] < arr[i//2]:\n        i = i//2\n    return i == 0\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    max_index = len(arr)-1\n    max_val = arr[max_index]\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] <= arr[i//2]:\n        return False\n    elif i == 1:\n        return True\n    else:\n        if arr[i//2] <= arr[i]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[int((i-1)/2)]:\n        return False\n    else:\n        return check_min_heap_helper(arr, int((i-1)/2))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr):\n        if arr[i] < arr[2 * i + 1]:\n            return False\n        if arr[i] < arr[2 * i + 2]:\n            return False\n        if i * 2 + 1 < len(arr) and arr[2 * i + 1] > arr[i * 2 + 2]:\n            return False\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    i = (i - 1) // 2\n    print('i', i)\n    while i > 0:\n        if arr[i] < arr[i * 2 + 1]:\n            return False\n        if arr[i] > arr[i * 2 + 2]:\n            return False\n        i = i - 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    p, q, r = 0, 1, 0\n    if n <= 0:\n        return \"Sorry, you did not provide a valid n. Please try again.\"\n    while n > 1:\n        r = q + p\n        q = p\n        p = r\n        n = n - 1\n    return q\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n+((n**3-3*n)/2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # initializing sum \n    sum = 0\n    \n    # sum is stored in variable'sum' \n    for i in range(1,n+1): \n        sum = sum + i \n    \n    #print(sum) \n    return sum \n  \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    res = 1\n    lst = list(range(1, n+1))\n    while len(lst) > 1:\n        res = lst[0] + lst[1]\n        del lst[0]\n        del lst[0]\n        lst.append(res)\n    return res\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n - 1) + 1) // (n + 1)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 1\n    b = 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return c\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1:\n        return n\n    n2 = n // 2\n    n1 = n - n2\n    return jacobsthal_num(n1) * jacobsthal_num(n2) + n\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #jstl = [0, 1, 1, 2, 4, 7, 11, 18, 29, 47, 76, 131, 262, 548, 985, 1755, 2821,...]\n    jstl = [0,1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,88"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 29\n    if n == 9:\n        return 47\n    if n == 10:\n        return 59\n    if n == 11:\n        return 79\n    if n == 12:\n        return 101\n    if n == 13:\n        return 131\n    if n == 14:\n        return 145\n    if n == 15:\n        return 163\n    if n == 16:\n        return 197\n    if n == 17:\n        return 311\n    if n == 18:\n        return 543\n    if n == 19:\n        return 861\n    if n == 20:\n        return 1289\n    if n == 21:\n        return 1745\n    if n == 22:\n        return 2187\n    if n == 23:\n        return 3449\n    if n == 24:\n        return 4673\n    if n == 25:\n        return 6725\n    if n == 26:\n        return 9019\n    if n == 27:\n        return 1055\n    if n == 28:\n        return 1228\n    if n == 29:\n        return 1481\n    if n == 30:\n        return 1646\n    if n == 31:\n        return 1845\n    if n == 32:\n        return 2194\n    if n == 33:\n        return 2379\n    if n == 34:\n        return 2537\n    if n == 35:\n        return 2709\n    if n == 36:\n        return 3007\n    if n == 37:\n        return 3377\n    if n == 38:\n        return 3475\n    if n == 39:\n        return 3571\n    if n == 40:\n        return 3664\n    if n == 41:\n        return 3713\n    if n == 42:\n        return 3844\n    if n == 43:\n        return 3911\n    if n == 44:\n        return 3964\n    if n == 45:\n        return 4012\n    if n == 46:\n        return 4066\n    if n == 47:\n        return 4124\n    if n == 48:\n        return 4171\n    if n == 49:\n        return 4236\n    if n == 50:\n        return 4276\n    if n == 51:\n        return 4335\n    if n == 52:\n        return 4377\n    if n == 53:\n        return 4444\n    if n == 54:\n        return 4498\n    if n == 55:\n        return 4546\n    if n == 56:\n        return 4609\n    if n == 57:\n        return 4643\n    if n == 58:\n        return 4689\n    if n == 59:\n        return 4732\n    if n == 60:\n        return 4787\n    if n == 61:\n        return 4831\n    if n == 62:\n        return 4881\n    if n == 63:\n        return 4933\n    if n == 64:\n        return 4988\n    if n == 65:\n        return 5038\n    if n == 66:\n        return 5099\n    if n == 67:\n        return 5140\n    if n == 68:\n        return 5206\n    if n == 69:\n        return 5252\n    if n == 70:\n        return 5308\n    if n == 71:\n        return 5354\n    if n == 72:\n        return 5402\n    if n == 73:\n        return 5456\n    if n == 74:\n        return 5504\n    if n == 75:\n        return 5566\n    if n == 76:\n        return 5662\n    if n == 77:\n        return 5707\n    if n == 78:\n        return 5758\n    if n == 79:\n        return 5825\n    if n == 80:\n        return 5886\n    if n == 81:\n        return 5936\n    if n == 82:\n        return 5992\n    if n == 83:\n        return 6047\n    if n == 84:\n        return 6114\n    if n == 85:\n        return 6174\n    if n == 86:\n        return 6243\n    if n == 87:\n        return 6279\n    if n == 88:\n        return 6331\n    if n == 89:\n        return 6384\n    if n == 90:\n        return 6438\n    if n == 91:\n        return 6488\n    if n == 92:\n        return 6537\n    if n == 93:\n        return 6599\n    if n == 94:\n        return 6646\n    if n == 95:\n        return 6702\n    if n == 96:\n        return 6760\n    if n == 97:\n        return 6827\n    if n == 98:\n        return 6875\n    if n == 99:\n        return 6940\n    if n == 100:\n        return 6994\n    if n == 101:\n        return 7043\n    if n == 102:\n        return 7097\n    if n == 103:\n        return 7150\n    if n == 104:\n        return 7208\n    if n == 105:\n        return 7261\n    if n == 106:\n        return 7336\n    if n == 107:\n        return 7391\n    if n == 108:\n        return 7445\n    if n == 109:\n        return 7523\n    if n == 110:\n        return 7582\n    if n == 111:\n        return 7643\n    if n == 112:\n        return 7711\n    if n == 113:\n        return 7778\n    if n == 114:\n        return 7834\n    if n == 115:\n        return 7883\n    if n == 116:\n        return 7933\n    if n == 117:\n        return 7988\n    if n == 118:\n        return 8040\n    if n == 119:\n        return 8062\n    if n == 120:\n        return 8095\n    if n == 121:\n        return 8156\n    if n == 122:\n        return 8202\n    if n == 123:\n        return 8263\n    if n == 124:\n        return 8332\n    if n == 125:\n        return 8384\n    if n == 126:\n        return 8431\n    if n == 127:\n        return 8493\n    if n == 128:\n        return 8538\n    if n == 129:\n        return 8596\n    if n == 130:\n        return 8647\n    if n == 131:\n        return 8702\n    if n == 132:\n        return 8749\n    if n == 133:\n        return 8805\n    if n == 134:\n        return 8852\n    if n == 135:\n        return 8904\n    if n == 136:\n        return 8946\n    if n == 137:\n        return 8996\n    if n == 138:\n        return 9043\n    if n == 139:\n        return 9100\n    if n == 140:\n        return 9155\n    if n == 141:\n        return 9205\n    if n == 142:\n        return 9255\n    if n == 143:\n        return 9312\n    if n == 144:\n        return 9372\n    if n == 145:\n        return 9443\n    if n == 146:\n        return 9496\n    if n == 147:\n        return 9557\n    if n == 148:\n        return 9606\n    if n == 149:\n        return 9663\n    if n == 150:\n        return 9708\n    if n == 151:\n        return 9758\n    if n == 152:\n        return 9825\n    if n == 153:\n        return 9886\n    if n == 154:\n        return 10026\n    if n == 155:\n        return 10076\n    if n == 156:\n        return 10125\n    if n == 157:\n        return 10185\n    if n == 158:\n        return 10244\n    if n == 159:\n        return 10296\n    if n == 160:\n        return 10352\n    if n == 161:\n        return 10317\n    if n == 162:\n        return 10375\n    if n == 163"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    p = (1 + 5**0.5) / 2\n    q = (1 - 5**0.5) / 2\n    jacobsthal = (1 - 5**0.5) / 2\n    while n > 0:\n        n -= 1\n        p = (1 + 5**0.5) / 2\n        q = (1 - 5**0.5) / 2\n        jacobsthal = (1 - 5**0.5) / 2\n    return jacobsthal\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = K\n    min_k_records = []\n    for i in range(len(test_list)):\n        if len(min_k_records) < k:\n            min_k_records.append(test_list[i])\n        else:\n            temp = min_k_records[0]\n            if temp[1] > test_list[i][1]:\n                min_k_records = [test_list[i]]\n            else:\n                min_k_records.append(test_list[i])\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    # Code here\n    # Time: O(N)\n    # Space: O(1)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # from heapq import heappop, heappush\n    # class MinHeap():\n    #     def __init__(self):\n    #         self.heap = []\n    #         self.count = 0\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    elif len(test_list) == 1:\n        return test_list[0]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key=lambda x: x[1])[0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # start = time.time()\n    list_of_min = []\n    # test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')]\n    # K = 2\n    # for i in range(0,len(test_list)):\n    #     # print(test_list[i])\n    #     list_of_min.append(min(test_list[i], key=lambda x: x[3]))\n    # list_of_min.sort(key=lambda x: x[3])\n    # print(list_of_min)\n    # end = time.time()\n    # print(end-start)\n    #return list_of_min\n    return min(test_list, key=lambda x: x[3])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test_list:\n        return None\n    if not test"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) > K:\n        return test_list[:K]\n    return test_list\n    \ndef min_k_tuple(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) > K:\n        return (min(test_list[:K]), )\n    return tuple(test_list)\n    \ndef min_k_reverse(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) > K:\n        return test_list[-K:]\n    return test_list\n    \ndef min_k_sorted(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) > K:\n        return test_list[-K:]\n    return sorted(test_list)\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k_smallest_list = []\n    if len(test_list) > K:\n        for i in range(len(test_list) - K + 1):\n            min_val = min(test_list[i:i + K])\n            k_smallest_list.append(min_val)\n        return k_smallest_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Minimum k records\n    # k = 3\n    # test_list = [(1, 2, 3), (2, 3, 4), (4, 5, 6), (3, 4, 5), (3, 5, 6), (3, 6, 7), (3, 6, 7), (3, 5, 6)]\n    # k = 5\n    # test_list = [(1, 2, 3), (2, 3, 4), (4, 5, 6), (3, 4, 5), (3, 5, 6), (3, 6, 7), (3, 6, 7), (3, 5, 6)]\n    # k = 7\n    # test_list = [(1, 2, 3), (2, 3, 4), (4, 5, 6), (3, 4, 5), (3, 5, 6), (3, 6, 7), (3, 6, 7), (3, 5, 6)]\n    # k = 10\n    # test_list = [(1, 2, 3), (2, 3, 4), (4, 5, 6), (3, 4, 5), (3, 5, 6), (3, 6, 7), (3, 6, 7), (3, 5, 6), (3, 4, 5)]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1).intersection(set(l2), set(l3)))\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1)!= len(l2) or len(l2)!= len(l3):\n        print(\"Size of lists are not the same\")\n        exit()\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in res:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list_1 = set(l1)\n    index_list_2 = set(l2)\n    index_list_3 = set(l3)\n    common_index_list = index_list_1 & index_list_2 & index_list_3\n    return sorted(list(common_index_list))\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #Algo:\n    indexes = []\n    for i in range(len(l1)):\n        if l1.count(l1[i]) == 3 and l2.count(l2[i]) == 3 and l3.count(l3[i]) == 3:\n            indexes.append(i)\n    return indexes\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l_common = []\n    l_index = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            l_common.append(l1[i])\n            l_index.append(i)\n    return l_common\n    \ndef main():\n    l1 = ['a', 'b', 'c', 'd', 'e', 'f']\n    l2 = ['c', 'f', 'g', 'h']\n    l3 = ['a', 'b', 'd', 'e', 'f']\n    print(extract_index_list(l1, l2, l3))\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            return_list.append(l1[i])\n    return return_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for e in range(0,len(l1)):\n        if l1[e] in l2 and l1[e] in l3:\n            common_elements.append(l1[e])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1) == 0 and len(l2) == 0 and len(l3) == 0:\n        return []\n    result = []\n    if len(l1) > 0:\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                for k in range(len(l3)):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    print(sorted(numbers)[1])\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = len(numbers)\n    if n < 2:\n        return None\n    if n == 2:\n        return numbers[1]\n    if numbers[1] < numbers[0]:\n        return numbers[1]\n    for i in range(n):\n        if numbers[i] < numbers[1]:\n            second = numbers[i]\n            break\n    for i in range(n):\n        if second > numbers[i] and i!= 1:\n            second = numbers[i]\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        raise ValueError('Cannot perform second_smallest on an empty list.')\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    #start with the minimum number\n    min = numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = numbers[:]\n    numbers.sort()\n    if len(numbers) < 2:\n        return -1\n    else:\n        return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    numbers = list(numbers)\n    second_smallest = None\n    \n    # Do this in one pass\n    while second_smallest is None:\n        for index in range(len(numbers)):\n            if numbers[index] < numbers[0]:\n                second_smallest = numbers[index]\n                numbers[index] = None\n                numbers[0] = None\n                break\n                \n    return second_smallest\n        \n    \n    # Old one-pass solution\n    # numbers.sort()\n    # return numbers[1]\n    \n    \nif __name__ == '__main__':\n    \n    # Test 1\n    print(second_smallest([1, 2, 5, 3]))\n    \n    # Test 2\n    print(second_smallest([1, 2, 5, 3, -1]))\n    \n    # Test 3\n    print(second_smallest([1, 2, 5, 3, -1, 0]))\n    \n    # Test 4\n    print(second_smallest([-2, -1, 0, 1, 2]))\n    \n    # Test 5\n    print(second_smallest([1, 1, 1, 1]))\n    \n    # Test 6\n    print(second_smallest([3, 1, 1, 1, 2, 3, 4, 1, 1, 3]))\n    \n    # Test 7\n    print(second_smallest([1, 2, 3, 4, -1, -2])"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    second_smallest_index = 0\n    for i in range(1, len(sorted_numbers)):\n        if sorted_numbers[i] < sorted_numbers[second_smallest_index]:\n            second_smallest_index = i\n    return sorted_numbers[second_smallest_index]\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall('ab', text)\n    if result:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    x = re.search(r\"a[ab]+b\", text)\n    if x:\n        print(x)\n    else:\n        print(\"No Match\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.findall(r'[ab]',text)\n    return bool(text)\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.match(r'[ab]',text))\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'ab*', text)!= None\n    # return re.search(r'a(b)+', text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?:b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_zero_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by more than one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pattern = r'a(?:b){1,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    pattern = r'a(?:b)+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_one_more(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = r'a(?:b){1,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_zero_one_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's and more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b)+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_zero_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's and zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_zero_one_more_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's and more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b){1,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_one_more_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by more than one 'b' and zero or more 'b' and more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b){1,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_zero_one_zero_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's and zero or more 'b's and more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b){1,5}(?:b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_one_more_zero_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by more than one 'b' and zero or more 'b' and more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b){1,5}(?:b){1,5}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_zero_one_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's and one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b){1,5}(?:b)(?:a)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_zero_more_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b' and one or more 'b' and zero or more 'b' and more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b){1,5}(?:b){1,5}(?:b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_one_more_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by more than one 'b' and one or more 'b' and zero or more 'b' and more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b){1,5}(?:b){1,5}(?:b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_zero_one_more_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' and zero or more 'b' and more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b){1,5}(?:b){1,5}(?:b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_zero_one_zero_one_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' and zero or more 'b' and more than one 'b' and one or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    pattern = r'a(?:b){1,5}(?:b){1,5}(?:b){1,5}(?:b){1,5}(?:b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef text_match_one_more_zero_one_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by more than one 'b' and one or more 'b' and zero or more "
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a+b\"\n    if re.match(pattern, text):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return len(result)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.findall(text)\n    print(result)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    ans = re.findall('ab*',text)\n    if ans:\n        return 'yes'\n    return 'no'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.startswith(\"ab\"):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    i = 0\n    j = len(test_list)-1\n    while(i < j):\n        if test_list[i] == test_list[j]:\n            return -1\n        i += 1\n        j -= 1\n    return j\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for x in range(len(test_list)):\n        if test_list[x] == test_list[len(test_list) - 1 - x]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    #First solution\n    #count = 0\n    #for i in test_list:\n    #    for j in test_list:\n    #        if i[::-1] == j:\n    #            count += 1\n    #return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    test_list = sorted(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.sort(key = len, reverse = True)\n    res = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                res += 1\n    return res\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    d = {}\n    \n    for word in test_list:\n        \n        s = word[::-1]\n        if s in d:\n            d[s] += 1\n        else:\n            d[s] = 1\n        \n    count = 0\n    for k,v in d.items():\n        if v % 2!= 0:\n            count += v\n    \n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # for reversing the given string\n    string = \"\"\n    for i in range(len(test_list)-1, -1, -1):\n        string = string + test_list[i]\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_reverse_pair = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] == test_list[j][::-1]:\n                count_reverse_pair += 1\n    print(count_reverse_pair)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    #TC: O(n^2)\n    #SC: O(n)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for list2 in list1:\n        for list3 in list2:\n            if list3 in dict1:\n                dict1[list3] += 1\n            else:\n                dict1[list3] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(i):i.count(i) for i in list1}\n    \nprint(unique_sublists([[1,2,3,3],[\"a\",\"a\"],[\"a\",\"b\"],[\"b\",\"b\"],[\"c\",\"c\"]])"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    dict1 = {}\n    for i in range(len(list1)):\n        tuple1 = tuple(list1[i])\n        dict1[tuple1] = list1.count(tuple1)\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {'lists':[]}\n    for x in list1:\n        sublists['lists'].append((tuple(x), x.count(x)))\n    return(sublists)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    print(\"\\n\\nUnique sublists:\")\n    \n    dic = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if j > i:\n                sublist = tuple(list1[i:j+1])\n                if sublist not in dic:\n                    dic[sublist] = 0\n                else:\n                    dic[sublist] = dic[sublist] + 1\n    for key in dic:\n        print(key, \"occur\", dic[key], \"times\")\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for l in list1:\n        if type(l) == list:\n            if tuple(l) in dic:\n                dic[tuple(l)] += 1\n            else:\n                dic[tuple(l)] = 1\n    return dic\n    \ndef sum_lists(list1):\n    '''\n    Write a function to sum lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the sum of the occurencies of the original list.\n    '''\n    dic = {}\n    for l in list1:\n        if type(l) == list:\n            if tuple(l) in dic:\n                dic[tuple(l)] += 1\n            else:\n                dic[tuple(l)] = 1\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique_sublist(list1):\n        unique_dict = {}\n        for i in range(len(list1)):\n            if type(list1[i]) == list:\n                for j in range(len(list1[i])):\n                    unique_dict[tuple(list1[i])] = unique_dict.get(tuple(list1[i]),0)+1\n        return unique_dict\n    print(unique_sublist([[1,2,3],[1,2,3]]))\n    # {(1, 2): 2, (1, 3): 1, (2, 2): 1, (2, 3): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in list1:\n        if i in count_dict.keys():\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(x):list1.count(x) for x in list1}\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    a = num.split('.')\n    b = len(a)\n    \n    if b == 2:\n        \n        if a[0] == '':\n            return True\n        elif a[1] == '':\n            return True\n        elif float(a[0]) < 0 or float(a[1]) > 1:\n            return False\n        else:\n            return True\n    \n    return False\n    \ndef string_add(first, second, delimiter=' '):\n    '''\n    Write a function which takes two strings (or array of strings), and returns a new string\n    which is the concatenation of the first string followed by the second string.\n    '''\n    \n    return delimiter.join(first + second)\n    \ndef string_remove(string, char, pos=0, start=0, end=None):\n    '''\n    Write a function which takes a string and a character. \n    It returns the string with the character removed, \n    starting from the given position (if given).\n    '''\n    if end == None:\n        end = len(string) - 1\n    \n    if start == 0 and end == len(string):\n        return string\n    \n    return string[:pos] + string[end+1:]\n    \ndef string_remove_regex(string, reg, start=0, end=None):\n    '''\n    Write a function which takes a string and a regular expression. \n    It returns the string with the characters matching the given regular expression removed, \n    starting from the given position (if given).\n    '''\n    if end == None:\n        end = len(string) - 1\n    \n    if start == 0 and end == len(string):\n        return string\n    \n    return string[:start] + string[end+1:]\n    \ndef string_upper(string):\n    '''\n    Write a function which takes a string and returns a copy of that string,\n    in which all the characters have been converted to uppercase.\n    '''\n    return string.upper()\n    \ndef string_replace(string, old, new, start=0, end=None):\n    '''\n    Write a function which takes a string and a old string and a new string, \n    and returns a new string which contains all the characters of the old \n    string, except that at the locations where the old string is found, \n    the new string is used instead. \n    '''\n    if end == None:\n        end = len(string) - 1\n    \n    if start == 0 and end == len(string):\n        return string\n    \n    return string[:start] + new + string[end+1:]\n    \ndef string_slice(string, start, end=None):\n    '''\n    Write a function which takes a string and two indexes (start and end), \n    and returns a new string which contains all the characters of the \n    old string from the given start to the given end.\n    '''\n    if end == None:\n        end = len(string) - 1\n    \n    return string[start:end+1]\n    \ndef string_split(string, delimiter=' ', keep_delimiter=False):\n    '''\n    Write a function which takes a string and a delimiter.\n    It returns a list of strings, where each string is a contiguous block of characters\n    that are formed by splitting the given string on the given delimiter.\n    '''\n    if keep_delimiter == False:\n        return string.split(delimiter)\n    else:\n        result = []\n        for i in range(0, len(string), len(delimiter)):\n            result.append(string[i:i+len(delimiter)])\n        return result\n    \ndef string_strip(string, strip=''):\n    '''\n    Write a function which takes a string and a character (string.strip(string)\n    should return a new string with all characters after and including the first\n    character, up to and including the character before the last character,\n    stripped off.\n    '''\n    return string.strip(strip)\n    \ndef string_split_and_join(string, delimiter=' ', join_str='', keep_delimiter=False):\n    '''\n    Write a function which takes a string and two characters as arguments, \n    and returns a new string which is the concatenation of the given string \n    with all the characters of the old string, \n    except the characters between the given start and end positions.\n    '''\n    if keep_delimiter == False:\n        return join_str.join(string.split(delimiter))\n    else:\n        result = []\n        for i in range(0, len(string), len(delimiter)):\n            result.append(join_str + string[i:i+len(delimiter)])\n        return result\n    \ndef string_split_each_character(string):\n    '''\n    Write a function which takes a string and returns a list of strings,\n    where each string is a contiguous block of characters.\n    '''\n    return string.split()\n    \ndef string_split_each_character_with_no_spaces(string):\n    '''\n    Write a function which takes a string and returns a list of strings,\n    where each string is a contiguous block of characters.\n    The first character should not be a space, and the last character\n    should not be a space.\n    '''\n    if string == '':\n        return []\n    if string[0]!='' or string[-1]!='':\n        return string.split()\n    else:\n        return []\n    \ndef string_strip_each_character(string):\n    '''\n    Write a function which takes a string and returns a list of strings,\n    where each string is a contiguous block of characters.\n    The first character should not be a space, and the last character\n    should not be a space.\n    '''\n    if string == '':\n        return []\n    if string[0]!='' or string[-1]!='':\n        return string.split()\n    else:\n        return []\n    \ndef string_is_empty(string):\n    '''\n    Write a function which takes a string and returns True or False.\n    '''\n    return len(string) == 0\n    \ndef string_to_int(string):\n    '''\n    Write a function which takes a string and returns an integer,\n    by converting the string to an integer, then returning the integer.\n    '''\n    try:\n        return int(string)\n    except:\n        return None\n    \ndef string_to_int_or_none(string):\n    '''\n    Write a function which takes a string and returns an integer,\n    or None if the string contains characters that can not be converted to an integer.\n    '''\n    try:\n        return int(string)\n    except:\n        return None\n    \ndef string_to_float(string):\n    '''\n    Write a function which takes a string and returns a float,\n    by converting the string to a float, then returning the float.\n    '''\n    try:\n        return float(string)\n    except:\n        return None\n    \ndef string_to_float_or_none(string):\n    '''\n    Write a function which takes a string and returns a float,\n    or None if the string contains characters that can not be converted to an integer.\n    '''\n    try:\n        return float(string)\n    except:\n        return None\n    \ndef string_to_bool(string):\n    '''\n    Write a function which takes a string and returns a boolean,\n    by converting the string to a boolean, then returning the boolean.\n    '''\n    try:\n        return bool(string)\n    except:\n        return None\n    \ndef string_to_bool_or_none(string):\n    '''\n    Write a function which takes a string and returns a boolean,\n    or None if the string contains characters that can not be converted to an integer.\n    '''\n    try:\n        return bool(string)\n    except:\n        return None\n    \ndef string_to_decimal(string):\n    '''\n    Write a function which takes a string and returns a decimal,\n    by converting the string to a decimal, then returning the decimal.\n    '''\n    return str(decimal.Decimal(string))\n    \ndef string_to_decimal_or_none(string):\n    '''\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.find('.') == -1:\n        return False\n    else:\n        return float(num.replace('.', '')) <= 1\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check decimal chars\n    decimal_chars = ['0','1','2','3','4','5','6','7','8','9','.']\n    # if number is not zero and only have decimal chars\n    if num!= '0' and num.count('.') == 1 and num.count('-') == 0:\n        for char in num:\n            if char not in decimal_chars:\n                return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).replace('.','',1).isnumeric() and num.count('.') <= 1\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # if len(num) == 0:\n    #     return False\n    # try:\n    #     if not float(num):\n    #         return False\n    # except:\n    #     return False\n    return True if float(num) == float(num) else False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).replace('.','',1).replace('-','').isdigit() and num==float(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).find(\".\")!= -1\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    num_set = set(arr)\n    if len(num_set) == 1:\n        return True\n    return False\n    \nif __name__ == \"__main__\":\n    arr = [1,1,2,2,3,3,4,4,5,5]\n    print(unique_Element(arr))"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # code here\n    return len(set(arr)) == 1\n    "
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    new_arr = []\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for number in arr:\n        if number in seen:\n            return False\n        seen.add(number)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # initializing the variable\n    unique_list = []\n    # traverse the loop\n    for i in arr:\n        # checking for the element in unique_list\n        if i not in unique_list:\n            # adding the element\n            unique_list.append(i)\n        else:\n            # otherwise\n            return False\n    # return the final unique list\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l=len(arr)\n    if(l==1):\n        return True\n    for i in range(l):\n        if(arr.count(arr[i])==1):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # arr = [1, 1, 1, 1]\n    # print(\"List of numbers: \",arr)\n    # for i in arr:\n    #     arr.remove(i)\n    # print(\"List after removing duplicate elements: \",arr)\n    # print(\"Length of arr: \",len(arr))\n    # if(len(arr)==1):\n    #     print(\"Unique elements are present\")\n    # else:\n    #     print(\"Unique elements are not present\")\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    output=[]\n    for i in arr:\n        if i not in output:\n            output.append(i)\n    if len(output)==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    list_without_duplicates = []\n    for x in arr:\n        if x not in list_without_duplicates:\n            list_without_duplicates.append(x)\n    if len(list_without_duplicates) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 0 or monthnum3 > 12:\n        return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 12:\n        if monthnum3 == 2:\n            return 29\n        else:\n            if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n                return 30\n            else:\n                return 31\n    else:\n        print(\"The month number is out of range\")\n        return -1\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%4 == 0:\n        if monthnum3 % 100!=0:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    import re\n    match = re.search(r'\\d{1,2}',monthnum3)\n    if match:\n        monthnum = int(match.group())\n    else:\n        print(\"You have entered wrong month number\")\n    if monthnum == 2:\n        if 28 in range(1,13):\n            print(\"The month contains 30 days\")\n        else:\n            print(\"The month doesn't contain 30 days\")\n    elif monthnum == 4:\n        if 30 in range(1,13):\n            print(\"The month contains 30 days\")\n        else:\n            print(\"The month doesn't contain 30 days\")\n    elif monthnum == 6:\n        if 31 in range(1,13):\n            print(\"The month contains 30 days\")\n        else:\n            print(\"The month doesn't contain 30 days\")\n    elif monthnum == 9:\n        if 30 in range(1,13):\n            print(\"The month contains 30 days\")\n        else:\n            print(\"The month doesn't contain 30 days\")\n    elif monthnum == 11:\n        if 30 in range(1,13):\n            print(\"The month contains 30 days\")\n        else:\n            print(\"The month doesn't contain 30 days\")\n    else:\n        print(\"The month doesn't contain 30 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Wrong input!!\")\n        return False\n    elif monthnum3 == 2:\n        if (31 + 28 + 31) <= 30:\n            print(f\"{monthnum3} has 30 days\")\n            return True\n        else:\n            print(f\"{monthnum3} does not have 30 days\")\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if (30 + 31 + 30) <= 30:\n            print(f\"{monthnum3} has 30 days\")\n            return True\n        else:\n            print(f\"{monthnum3} does not have 30 days\")\n            return False\n    else:\n        if (30 + 31 + 30) <= 30:\n            print(f\"{monthnum3} has 30 days\")\n            return True\n        else:\n            print(f\"{monthnum3} does not have 30 days\")\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"Yes\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"No\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if leapyear(monthnum3):\n            return '31 days'\n        else:\n            return '30 days'\n    elif monthnum3 == 4:\n        if leapyear(monthnum3):\n            return '31 days'\n        else:\n            return '30 days'\n    elif monthnum3 == 6:\n        if leapyear(monthnum3):\n            return '30 days'\n        else:\n            return '31 days'\n    elif monthnum3 == 9:\n        if leapyear(monthnum3):\n            return '30 days'\n        else:\n            return '31 days'\n    elif monthnum3 == 11:\n        if leapyear(monthnum3):\n            return '30 days'\n        else:\n            return '31 days'\n    else:\n        return '30 days'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 0 or monthnum3 > 12:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr) == 0:\n        return\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,len(arr)):\n        curr_diff = arr[i] - arr[i-1]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array first\n    arr = sorted(arr) \n    minimum = float('inf')\n    for i in range(0,n-1): \n        minimum = min(minimum, arr[i+1]-arr[i]) \n    return minimum "
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(0, n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #code here\n    arr = list(set(arr))\n    arr.sort()\n    min_diff = 0\n    for i in range(0,len(arr)-1):\n        diff = arr[i+1]-arr[i]\n        if diff > min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return arr[0]\n    arr.sort()\n    return abs(arr[0] - arr[n-1])\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    from collections import Counter\n    if len(arr) == 0:\n        return 0\n    arr_count = Counter(arr)\n    keys = list(arr_count.keys())\n    keys.sort()\n    ans = float('inf')\n    for i in range(len(keys)):\n        for j in range(i+1,len(keys)):\n            ans = min(ans,abs(keys[i]-keys[j]))\n    return ans\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float(\"inf\")\n    min_diff_pair = []\n    \n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) < min_diff:\n                min_diff = abs(arr[i]-arr[j])\n                min_diff_pair = [arr[i],arr[j]]\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    print(arr)\n    min_diff = float(\"inf\")\n    for i in range(len(arr)-1):\n        min_diff = min(arr[i+1]-arr[i],min_diff)\n    return min_diff\n    \nif __name__ == '__main__': \n    #arr = [1,2,3,4,5,6]\n    arr =[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(find_min_diff(arr,len(arr)))\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # number of elements in array\n    n = len(arr)\n    min_diff = 1\n    min_diff_pair = []\n    for i in range(0, n-1):\n        for j in range(i + 1, n):\n            # print(arr[i], arr[j])\n            # if difference between 2 elements is smaller than the min diff\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n                min_diff_pair = (arr[i], arr[j])\n    # print(min_diff, min_diff_pair)\n    return min_diff_pair\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    def min_diff(arr,n):\n        \n        # If array is empty\n        if n==0:\n            return\n        \n        # Initialize minimum and current difference\n        min_diff = arr[0]\n        curr_diff = arr[0]\n        \n        # Initialize the minimum difference\n        min_diff = arr[0]\n        for i in range(1,n):\n            if arr[i] < min_diff:\n                min_diff = arr[i]\n            curr_diff = min(arr[i],curr_diff)\n            \n        return min_diff\n    \n    return min_diff(arr,n)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in str:\n        if i.isdigit():\n            number += 1\n    return number\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    length = len(str)\n    ctr = 0\n    for i in range(length):\n        if str[i].isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    #Number of digits in a string \n    c=0\n    #Iterating through each character in string\n    for i in range(len(str)):\n        #Checking for digit\n        if str[i].isnumeric():\n            c=c+1\n    return c"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - len(''.join(i for i in str if i.isdigit()))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            n+=1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isdigit():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n=0\n    for i in range(len(str)):\n        if str[i]!=' ':\n            if str[i].isdigit():\n                n+=1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = str.split(' ')\n    return len(l)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    s1=0\n    for i in str:\n        if(i.isdigit()):\n            s1+=1\n    return s1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    i = 1\n    while(i <= n):\n        if(n % i == 0):\n            return(i)\n        i += 1\n    return(None)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            continue\n        else:\n            return i\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n*(n+1)/2\ndef is_polite2(n): \n    '''\n    A more efficient way to calculate the polite number:\n    '''\n    return int((math.sqrt(8*n + 1) - 1)/2)\n    \ndef is_polite3(n): \n    '''\n    Another way to solve this problem. \n    '''\n    return int((math.sqrt(8*n + 1) + 1)/2)\ndef is_polite4(n): \n    '''\n    Another way to solve this problem. \n    '''\n    return int((math.sqrt(8*n + 1) + 1)/2)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Your code here\n    count = 1\n    cur_div = 1\n    \n    while count <= n:\n        if (n % cur_div) == 0:\n            count += 1\n        else:\n            cur_div += 1\n    \n    return cur_div\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    n = abs(n)\n    # finding the index\n    i = 1\n    while i <= n:\n        if (i+1)%2!= 0:\n            i += 2\n        else:\n            i += 1\n    return i\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    return n * (n+1) // 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    p = 1\n    i = 0\n    if n==1:\n        return True\n    else:\n        while p < n:\n            if p%3==0 or p%5==0:\n                p+=1\n            else:\n                p+=2\n    if p%3==0 and p%5==0:\n        return True\n    else:\n        return False\n        \n        \n        \n        \n        \nprint(is_polite(12))\nprint(is_polite(3))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * 2 + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [6,9,12]\n    return polite_numbers[n % 4]\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=2:\n        return 2\n    if n==3:\n        return 6\n    if n==4:\n        return 5\n    if n==5:\n        return 4\n    if n==6:\n        return 3\n    if n==7:\n        return 2\n    if n==8:\n        return 1\n    if n==9:\n        return 0\n    if n==10:\n        return -1\n    if n==11:\n        return -2\n    if n==12:\n        return -3\n    if n==13:\n        return -4\n    if n==14:\n        return -5\n    if n==15:\n        return -6\n    if n==16:\n        return -7\n    if n==17:\n        return -8\n    if n==18:\n        return -9\n    if n==19:\n        return -10\n    if n==20:\n        return -11\n    if n==21:\n        return -12\n    if n==22:\n        return -13\n    if n==23:\n        return -14\n    if n==24:\n        return -15\n    if n==25:\n        return -16\n    if n==26:\n        return -17\n    if n==27:\n        return -18\n    if n==28:\n        return -19\n    if n==29:\n        return -20\n    if n==30:\n        return -21\n    if n==31:\n        return -22\n    if n==32:\n        return -23\n    if n==33:\n        return -24\n    if n==34:\n        return -25\n    if n==35:\n        return -26\n    if n==36:\n        return -27\n    if n==37:\n        return -28\n    if n==38:\n        return -29\n    if n==39:\n        return -30\n    if n==40:\n        return -31\n    if n==41:\n        return -32\n    if n==42:\n        return -33\n    if n==43:\n        return -34\n    if n==44:\n        return -35\n    if n==45:\n        return -36\n    if n==46:\n        return -37\n    if n==47:\n        return -38\n    if n==48:\n        return -39\n    if n==49:\n        return -40\n    if n==50:\n        return -41\n    if n==51:\n        return -42\n    if n==52:\n        return -43\n    if n==53:\n        return -44\n    if n==54:\n        return -45\n    if n==55:\n        return -46\n    if n==56:\n        return -47\n    if n==57:\n        return -48\n    if n==58:\n        return -49\n    if n==59:\n        return -50\n    if n==60:\n        return -51\n    if n==61:\n        return -52\n    if n==62:\n        return -53\n    if n==63:\n        return -54\n    if n==64:\n        return -55\n    if n==65:\n        return -56\n    if n==66:\n        return -57\n    if n==67:\n        return -58\n    if n==68:\n        return -59\n    if n==69:\n        return -60\n    if n==70:\n        return -61\n    if n==71:\n        return -62\n    if n==72:\n        return -63\n    if n==73:\n        return -64\n    if n==74:\n        return -65\n    if n==75:\n        return -66\n    if n==76:\n        return -67\n    if n==77:\n        return -68\n    if n==78:\n        return -69\n    if n==79:\n        return -70\n    if n==80:\n        return -71\n    if n==81:\n        return -72\n    if n==82:\n        return -73\n    if n==83:\n        return -74\n    if n==84:\n        return -75\n    if n==85:\n        return -76\n    if n==86:\n        return -77\n    if n==87:\n        return -78\n    if n==88:\n        return -79\n    if n==89:\n        return -80\n    if n==90:\n        return -81\n    if n==91:\n        return -82\n    if n==92:\n        return -83\n    if n==93:\n        return -84\n    if n==94:\n        return -85\n    if n==95:\n        return -86\n    if n==96:\n        return -87\n    if n==97:\n        return -88\n    if n==98:\n        return -89\n    if n==99:\n        return -90\n    if n==100:\n        return -91\n    if n==101:\n        return -92\n    if n==102:\n        return -93\n    if n==103:\n        return -94\n    if n==104:\n        return -95\n    if n==105:\n        return -96\n    if n==106:\n        return -97\n    if n==107:\n        return -98\n    if n==108:\n        return -99\n    if n==109:\n        return -100\n    if n==110:\n        return -101\n    if n==111:\n        return -102\n    if n==112:\n        return -103\n    if n==113:\n        return -104\n    if n==114:\n        return -105\n    if n==115:\n        return -106\n    if n==116:\n        return -107\n    if n==117:\n        return -108\n    if n==118:\n        return -109\n    if n==119:\n        return -110\n    if n==120:\n        return -111\n    if n==121:\n        return -112\n    if n==122:\n        return -113\n    if n==123:\n        return -114\n    if n==124:\n        return -115\n    if n==125:\n        return -116\n    if n==126:\n        return -117\n    if n==127:\n        return -118\n    if n==128:\n        return -119\n    if n==129:\n        return -120\n    if n==130:\n        return -121\n    if n==131:\n        return -122\n    if n==132:\n        return -123\n    if n==133:\n        return -124\n    if n==134:\n        return -125\n    if n==135:\n        return -126\n    if n==136:\n        return -127\n    if n==137:\n        return -128\n    if n==138:\n        return -129\n    if n==139:\n        return -130\n    if n==140:\n        return -131\n    if n==141:\n        return -132\n    if n==142:\n        return -133\n    if n==143:\n        return -134\n    if n==144:\n        return -135\n    if n==145:\n        return -136\n    if n==146:\n        return -137\n    if n==147:\n        return -138\n    if n==148:\n        return -139\n    if n==149:\n        return -140\n    if n==150:\n        return -141\n    if n==151:\n        return -142\n    if n==152:\n        return -143\n    if n==153:\n        return -144\n    if n==154:\n        return -145\n    if n==155:\n        return -146\n    if n==156:\n        return -147\n    if n==157:\n        return -148\n    if n==158:\n        return -149\n    if n==159:\n        return -150\n    if n==160:\n        return -151\n    if n==161:\n        return -152\n    if n==162:\n        return -153\n    if n==163:\n        return -154\n    if n==164:\n        return -155\n    if n==165:\n        return -156\n    if n==166:\n        return -157\n    if n==167:\n        return -158\n    if n==168:\n        return -159\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append(l1[i:i+2])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    pairs = []\n    i = 0\n    while i < len(l1) - 1:\n        pairs.append([l1[i], l1[i + 1]])\n        i += 2\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        l2.append(l1[i:i+2])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l1.sort()\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    s = []\n    for i in range(len(l1)-1):\n        s.append(l1[i:i+2])\n    return s\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                count+=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    if len(arr) < 2:\n        print(0)\n        return\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    res = 0\n    arr.sort()\n    #print(arr)\n    for i in range(len(arr)):\n        if arr[i]>sum:\n            break\n        if arr[i+1]<sum:\n            continue\n        if arr[i]+arr[i+1] == sum:\n            res += 1\n            \n    return res\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]+arr[j] == sum):\n                count += 1\n    print(\"No. of pairs whose sum is equal to \", sum, \":\", count)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 if i not in li2]\n    print(li_dif)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = list(set(li1)-set(li2))\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = li1+li2\n    li3 = set(li3)\n    li3 = list(li3)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=[]\n    for i in li1:\n        if i not in li2:\n            li_dif.append(i)\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = li1.difference(li2)\n    return list(li)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    import math\n    odd_sum = 0\n    for i in range(1,n+1,2):\n        odd_sum += i**2\n    return odd_sum\n    \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n<=0):\n        return 0\n    else:\n        odd_nums = []\n        for i in range(1,n+1):\n            if (i%2!=0):\n                odd_nums.append(i**2)\n        return sum(odd_nums)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if i % 2!= 0 : \n            sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # num = n + 1\n    # sum = 0\n    # for i in range(1, num) :\n    #     if i%2!= 0 :\n    #         sum += i ** 4\n    #         break\n    # return sum\n    # soln 2\n    return sum(i**4 for i in range(1,n+1) if i%2!= 0)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum = sum + pow(i,4)\n    print(sum)\nodd_num_sum(10)"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = [ i for i in range(1,n+1) if i%2!= 0 ]\n    return sum([(i)**4 for i in odd_nums])\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i % 2!= 0 :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if i%2!= 0 :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = []\n    for i in range(n) :\n        if(i%2==1) :\n            odd_num.append(i**2)\n    return sum(odd_num)\n    \nprint(odd_num_sum(5))\n'''\nOutput:\n7\n'''\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_number_list = []\n    for i in range(1, n+1) :\n        if i%2!= 0 :\n            odd_number_list.append(i**2)\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in ['(', ')', '{', '}', '[', ']']:\n            stack.append(char)\n        elif char == ';':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            elif len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            elif len(stack) > 0 and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    \n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    queue = deque([exp])\n    bracket_map = {\n        '}' : '{',\n        ')' : '(',\n        ']' : '['\n    }\n    \n    opening = set(bracket_map.values())\n    \n    while queue:\n        elem = queue.popleft()\n        if elem in opening:\n            opening.remove(elem)\n        else:\n            return False\n        if elem in bracket_map.values():\n            opening.add(elem)\n        \n        if not opening:\n            return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #function to check if the given expression is balanced or not\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == \"(\":\n            stack.append(\"(\")\n        elif exp[i] == \"{\":\n            stack.append(\"{\")\n        elif exp[i] == \"[\":\n            stack.append(\"[\")\n        elif exp[i] == \")\":\n            if len(stack)==0 or stack.pop()!=\"(\":\n                return False\n        elif exp[i] == \"}\":\n            if len(stack)==0 or stack.pop()!=\"{\":\n                return False\n        elif exp[i] == \"]\":\n            if len(stack)==0 or stack.pop()!=\"[\":\n                return False\n    if len(stack)>0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left = ('(', '[', '{')\n    right = (')', ']', '}')\n    open_brackets = 0\n    close_brackets = 0\n    stack = deque()\n    for i in exp:\n        if i in left:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            if i == right[open_brackets]:\n                open_brackets += 1\n            if i == right[close_brackets]:\n                close_brackets += 1\n            if open_brackets!= close_brackets:\n                return False\n            else:\n                open_brackets = close_brackets = 0\n    if open_brackets!= close_brackets:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    bracket = {'{': '}', '[' : ']', '(': ')'}\n    for char in exp:\n        if char in '({[':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            else:\n                if char == bracket[stack[-1]]:\n                    stack.pop()\n                else:\n                    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack=[]\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i==')' and stack[-1]=='(':\n                stack.pop()\n            elif i=='}' and stack[-1]=='{':\n                stack.pop()\n            elif i==']' and stack[-1]=='[':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)%2!= 0:\n        return 'NO'\n    \n    stack = []\n    \n    for e in exp:\n        if e in '([{':\n            stack.append(e)\n        else:\n            if not stack:\n                return 'NO'\n            curr_element = stack.pop()\n            if (curr_element + e) in ')]}':\n                continue\n            else:\n                return 'NO'\n    \n    if len(stack) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n    \ndef solve_expression(exp):\n    '''\n    Write a function to evaluate the given expression. https://www.geeksforgeeks.org/expression-evaluation-python/\n    '''\n    def helper(s):\n        #base case\n        if s[0] == '+':\n            return helper(s[1:]) + helper(s[2:])\n        elif s[0] == '-':\n            return helper(s[1:]) - helper(s[2:])\n        elif s[0] == '*':\n            return helper(s[1:]) * helper(s[2:])\n        elif s[0] == '/':\n            return helper(s[1:]) / helper(s[2:])\n        else:\n            return int(s[0])\n    \n    return helper(exp)\n    \ndef find_letter_occurences(exp):\n    '''\n    Write a function to count the number of occurrences of each letter in the input string. https://www.geeksforgeeks.org/count-the-occurrence-of-each-letter-in-a-string/\n    '''\n    count = {}\n    for c in exp:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n    return count\n    \ndef main():\n    t = int(input())\n    for _ in range(t):\n        exp = input()\n        #print('case #%d: %s'%(i+1, check_expression(exp)))\n        print(check_expression(exp))\n        print(solve_expression(exp))\n        #print('case #%d: %s'%(i+1, find_letter_occurences(exp)))\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '':\n        return True\n    else:\n        exp = exp.replace('()','')\n        exp = exp.replace('[]','')\n        exp = exp.replace('{}','')\n        open_par = deque()\n        for i in range(len(exp)):\n            if exp[i] == '(':\n                open_par.append(i)\n            elif exp[i] == ')':\n                if len(open_par) == 0:\n                    return False\n                else:\n                    open_par.pop()\n        if len(open_par) > 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    pairs = {'{': '}', '(': ')', '[': ']', '<': '>'}\n    for i in range(len(exp)):\n        if exp[i] in pairs.keys():\n            stack.append(exp[i])\n        else:\n            if len(stack) == 0:\n                return False\n            elif pairs[stack[-1]] == exp[i]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    for i in exp:\n        if i == '(':\n            s.append(i)\n        elif i == ')':\n            if len(s) == 0:\n                return False\n            else:\n                s.pop()\n    return len(s) == 0\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def rev(word):\n        word_len = len(word)\n        if word_len <= K:\n            return word\n        else:\n            return word[:word_len-K] +'' + rev(word[word_len-K+1:])\n    \n    return rev(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    '''\n    Solution from leetcode, using set and for loop\n    '''\n    result = \"\"\n    for i in test_str.split(\" \"):\n        if len(i)!= K:\n            result += i + \" \"\n    return result.strip()\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    list = test_str.split()\n    for i in range(len(list)):\n        if len(list[i]) == K:\n            list.pop(i)\n    return''.join(list)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_list = []\n    for word in test_str.split():\n        if len(word) == K:\n            new_list.append(word)\n    return \" \".join(new_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = ''\n    length_list = []\n    for i in range(len(test_str)):\n        if i == 0:\n            result += test_str[i]\n            length_list.append(1)\n        else:\n            if len(test_str[i]) == len(test_str[i-1]):\n                result += test_str[i]\n                length_list.append(len(test_str[i]))\n            else:\n                result += test_str[i]\n                length_list.append(len(test_str[i]))\n    \n    for i in range(len(test_str)):\n        if length_list[i] == K:\n            result = result.replace(test_str[i], '', 1)\n    \n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #set_length = set()\n    #for word in test_str.split():\n    #    if len(word) == K:\n    #        set_length.add(word)\n    #return''.join(set_length)\n    return''.join(set([word for word in test_str.split() if len(word) == K]))\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    result = []\n    for word in test_str:\n        if len(word) == K:\n            continue\n        else:\n            result.append(word)\n    return \" \".join(result)\n        \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    test_str = test_str.split(\" \")\n    \n    for i in test_str:\n        if len(i) == K:\n            test_str.remove(i)\n            \n    return \" \".join(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #no need to read the string and split into list\n    #split the string into list of words\n    #sort the words in the list based on length\n    #iterate through the sorted list\n        #if the length of the word is < k\n            #remove the word\n    \n    #iterate through the string again\n        #count the length of the string\n        #if the length of the string is < k\n            #remove the last character of the string\n    \n    #return the string\n    \n    #a = \"I will go for a walk in the park\"\n    #b = remove_length(a, 2)\n    #print(b)\n    \n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    #where n is the length of the string\n    \n    test_str = test_str.split()\n    test_str.sort(key = len)\n    for i in range(len(test_str)):\n        if len(test_str[i]) < K:\n            test_str.pop(i)\n    \n    for i in range(len(test_str)):\n        test_str[i] = test_str[i][1:]\n    \n    #temp = \"\"\n    #for i in range(len(test_str)):\n    #    temp = test_str[i] + temp\n    return \" \".join(test_str)\n    "
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(sorted(filter(lambda word: len(word)!= K, test_str.split()), key=len))\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    list1 = pattern.split('|')\n    text = list(text)\n    sub_list = []\n    for i in range(len(list1)):\n        sub_list.append(list1[i].split(']'))\n    for i in range(len(sub_list)):\n        for j in range(len(sub_list[i])):\n            pos = text.find(sub_list[i][j],0)\n            if pos >= 0:\n                start = len(sub_list[i][0])+1\n                end = start+len(sub_list[i][1])\n                return f\"Substring : {text[pos:start]}\\nOccurence : {pos+1}\\nStart : {start}\\nEnd : {end}\"\n            else:\n                return f\"Substring : {text[pos:start]}\\nOccurence : {pos+1}\\nStart : {start}\\nEnd : {end}\"\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occur = re.finditer(pattern,text)\n    if len(occur)>0:\n        for x in occur:\n            #print(x)\n            pos = x.start()\n            #print(pos)\n            sub = text[pos:pos+len(pattern)]\n            print(sub)\n    else:\n        print(\"No occurance found\")\n    return occur\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos=[]\n    pattern=pattern.lower()\n    i=0\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)]==pattern:\n            pos.append(i)\n    if len(pos)>0:\n        print(pos)\n    else:\n        print(None)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        result = re.findall(pattern,text)\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    #Using regex\n    #1.create a pattern\n    #2.Use findall() to find the occurrence of pattern in the string\n    #3.Use findall() to find the occurrence of pattern in the string\n    \n    #s = 'abcd'\n    #p = 'b'\n    \n    #print(re.findall(p,s))\n    #print(re.findall(p,s))\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #re.search returns None if no match found\n    #re.findall returns a list of matches\n    #re.finditer returns an iterator of matches\n    #re.split splits the strings at the first match\n    return re.split(pattern,text)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.findall(pattern,text)\n    if(m):\n        return (m,len(m[0]))\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    position = []\n    match = []\n    occur = 0\n    occur_match = 0\n    occur_mismatch = 0\n    occur_match_match = 0\n    occur_match_mismatch = 0\n    occur_mismatch_match = 0\n    occur_mismatch_mismatch = 0\n    for i in range(len(text)):\n        occur_match_match = 0\n        occur_match_mismatch = 0\n        occur_mismatch_match = 0\n        occur_mismatch_mismatch = 0\n        for j in range(len(pattern)):\n            if text[i+j]==pattern[j]:\n                occur_match_match += 1\n            else:\n                occur_mismatch_match += 1\n        if occur_match_match == len(pattern):\n            occur += 1\n            occur_match_match = 0\n            occur_match_mismatch = 0\n            occur_mismatch_match = 0\n            occur_mismatch_mismatch = 0\n        if occur_mismatch_match == len(pattern):\n            occur += 1\n            occur_match_match = 0\n            occur_mismatch_match = 0\n            occur_mismatch_mismatch = 0\n            occur_mismatch_mismatch = 0\n        if occur_mismatch_mismatch == len(pattern):\n            occur += 1\n            occur_match_match = 0\n            occur_mismatch_match = 0\n            occur_mismatch_mismatch = 0\n            occur_mismatch_mismatch = 0\n    if occur!= 0:\n        for i in range(len(pattern)):\n            for j in range(i,len(pattern)-i):\n                if text[j+i]==pattern[i]:\n                    match.append(j)\n        if len(match) == len(pattern):\n            for i in range(len(pattern)):\n                if i!= match[i]:\n                    position.append(i)\n            return(occur,position)\n        else:\n            return(occur,None)\n    else:\n        return(occur,None)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res = re.findall('(?={})'.format(pattern),text)\n    if len(res)==0:\n        return None\n    else:\n        return res\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    i = 0\n    while i < len(nums):\n        if i%2 == 0:\n            if nums[i]%2 == 1:\n                return False\n        i += 1\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if(i%2==0):\n            print(nums[i])\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_array = []\n    for i in range(1,len(nums),2):\n        if nums[i]%2 == 1:\n            odd_array.append(nums[i])\n        else:\n            continue\n    return odd_array\n    \ndef main():\n    print(odd_position([1,2,3,4,5,6,7,8]))\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return True\n    else:\n        for i in range(1, len(nums), 2):\n            if nums[i]!= nums[i-1]:\n                return True\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    l = len(nums)\n    for i in range(0, l, 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #for loop with all odd index\n    for i in range(len(nums)):\n        if (i%2!= 0):\n            if (nums[i]%2 == 0):\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    if not nums:\n        return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return True if all(i%2!= 0 for i in nums) else False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    flag = False\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            flag = True\n            break\n    return flag\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    cnt = 0\n    if not test_str:\n        return cnt\n    else:\n        for i in range(len(test_str)):\n            if test_str[i] in 'aeiou':\n                if i == 0:\n                    if test_str[i+1] in 'aeiou':\n                        cnt += 1\n                elif i == len(test_str) - 1:\n                    if test_str[i-1] in 'aeiou':\n                        cnt += 1\n                else:\n                    if test_str[i-1] in 'aeiou':\n                        cnt += 1\n                    if test_str[i+1] in 'aeiou':\n                        cnt += 1\n    return cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowel = 'aeiou'\n    for i in range(len(test_str)):\n        if test_str[i] in vowel:\n            if test_str[i+1] in vowel:\n                count = count+1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i-1] in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n        if i < len(test_str) - 1:\n            if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n                if test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    res = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in 'aeiou') and (test_str[i+1] in 'aeiou'):\n            res += 1\n    return res\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # vowels = 'aeiou'\n    # test_str = 'letscode'\n    # Output: 5\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(\"aeiou\")\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    n = 0\n    test_str = list(test_str)\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            n += 1\n    return n\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # vowels = 'aeiou'\n    # vowels = 'aeiouAEIOU'\n    vowels = 'aeiou'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            count = count + 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = set(['a','e','i','o','u'])\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set()\n    total = 0\n    for num in arr:\n        if num in seen:\n            continue\n        seen.add(num)\n        total += num\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = sum(set(arr))\n    return s"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    temp_dict = dict()\n    for each in arr:\n        if each not in temp_dict:\n            temp_dict[each] = 1\n        else:\n            temp_dict[each] += 1\n    return sum([x for x in temp_dict.values() if x > 1])\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    lst = []\n    \n    # Iterate the list\n    for i in range(len(arr)):\n        if arr[i] not in lst:\n            lst.append(arr[i])\n        else:\n            res += arr[i]\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # code here\n    \n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum = sum + i\n    print(sum)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    sum_non_repeated = 0\n    start_index = 0\n    end_index = len(arr)-1\n    while(start_index <= end_index):\n        if(arr[start_index]!= arr[end_index]):\n            sum_non_repeated += arr[start_index]\n            start_index+=1\n        else:\n            end_index-=1\n    return sum_non_repeated\n    \ndef find_sum_efficient(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return (sum(set(arr)))\n    \ndef find_sum_first_occurrence(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(arr[i] not in arr[:i]):\n            sum += arr[i]\n    return sum\n    \ndef find_sum_first_occurrence_efficient(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return (sum(set(arr)))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # if len(arr) == 0:\n    #     return 0\n    # if len(arr) == 1:\n    #     return arr[0]\n    # temp_arr = []\n    # temp_arr = [0] * len(arr)\n    # i = 0\n    # total = 0\n    # while i < len(arr):\n    #     if arr[i] == 0:\n    #         arr.remove(arr[i])\n    #     else:\n    #         temp_arr[i] = arr[i]\n    #         i += 1\n    # for i in range(len(temp_arr)):\n    #     if temp_arr[i]!= 0:\n    #         total += temp_arr[i]\n    # return total\n    seen_once = []\n    seen_twice = []\n    for num in arr:\n        if num in seen_once:\n            seen_twice.append(num)\n        else:\n            seen_once.append(num)\n    print('sum of non-repeated element:', sum(seen_once) + sum(seen_twice))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) < 2:\n        print('Invalid input')\n    else:\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                arr[i] = 0.00001\n        sum = 0\n        for i in range(len(arr)):\n            sum = sum + arr[i]\n        return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    set_list = []\n    for i in range(0,len(arr)):\n        if(arr[i] not in set_list):\n            set_list.append(arr[i])\n    return sum(set_list)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Write your code here\n    if len(list1) == 1:\n        return list1\n    \n    c = 1\n    result = []\n    prev = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i]!= prev:\n            result.append([prev,])\n            prev = list1[i]\n            c = 1\n        else:\n            c += 1\n        if c == 4:\n            result[-1].append(list1[i])\n            c = 1\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        print(list(group))\n    print('\\n')\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Approach: Approach 1\n    # Iterate the list\n    #   Iterate through the list\n    #     if list[i] is equal to list[i+1]\n    #       create a sublist with just the element\n    #       and push the sublist onto the final list\n    #       remove the element from the list\n    #     else\n    #       move to the next element\n    #   return the final list\n    # Approach 2\n    # Iterate the list\n    #   Iterate through the list\n    #     if list[i] is equal to list[i+1]\n    #       create a sublist with just the element\n    #       push the sublist onto the final list\n    #       remove the element from the list\n    #     else\n    #       move to the next element\n    #   return the final list\n    \n    final_list = []\n    i = 0\n    \n    for k, g in groupby(list1):\n        if i == 0:\n            final_list.append([])\n        \n        if k == list1[i]:\n            final_list[-1].append(list1[i])\n            i += 1\n        else:\n            final_list[-1].append(list1[i])\n            i += 1\n    \n    return final_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    grouped_list = groupby(list1)\n    for key,value in grouped_list:\n        if key == list1[0]:\n            output.append(list(value))\n        else:\n            output[-1].append(key)\n    return output\n    \nprint(pack_consecutive_duplicates([1,1,1,2,2,3,3,4,5,5]))\nprint(pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5]))\nprint(pack_consecutive_duplicates([1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5]))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) < 2:\n        return list1\n    else:\n        index = 0\n        while index < len(list1)-1:\n            if list1[index] == list1[index+1]:\n                del list1[index]\n            else:\n                index += 1\n        return pack_consecutive_duplicates(list1)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l1 = []\n    for k,g in groupby(list1):\n        l1.append(list(g))\n    return l1\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    consecutive = []\n    for k, g in groupby(list1):\n        consecutive.append(list(g))\n    return consecutive\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for key, group in groupby(list1):\n        new_list.append(list(group))\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # the best way\n    list1.sort()\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    if list1:\n        result.append(list1[0])\n        for i in range(1, len(list1)):\n            if list1[i]!= list1[i-1]:\n                result.append(list1[i])\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return{\n    tuple(list1):len(list1)\n    }\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return list(dict.fromkeys(list1))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    s = set(list1)\n    d = {}\n    for item in s:\n        c = 0\n        for x in list1:\n            if x == item:\n                c += 1\n        d.update({tuple(item):c})\n    return d\n    \n    \ndef sort_ranks(list1, list2):\n    '''\n    Write a function that takes two lists of integers and returns a list of the integers in the first list that are also in the second list.\n    '''\n    d = {}\n    for item in list1:\n        if item in list2:\n            d.update({item:True})\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    my_dict = {}\n    for x in list1:\n        my_dict[x] = my_dict.get(x, 0) + 1\n    return my_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    temp=set()\n    dict={}\n    for i in list1:\n        if i not in temp:\n            temp.add(i)\n            dict[tuple(i)]=1\n        else:\n            dict[tuple(i)]+=1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lst = []\n    dct = {}\n    for i in list1:\n        if i not in lst:\n            lst.append(i)\n            dct[i] = 1\n        else:\n            dct[i] += 1\n    return dct\nprint(unique_sublists([1,2,3,2,1,4,4,3]))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {list(map(tuple, sublist)): sublist.count(sublist[0]) for sublist in list1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # list1 = ['abc', 'abc', 'abc', 'abc', 'abc']\n    # list1 = ['a', 'a', 'b', 'c', 'b', 'd', 'a', 'a']\n    list1_set = set(list1)\n    res = {}\n    for item in list1_set:\n        item_count = list1.count(item)\n        res[tuple(item)] = item_count\n    return res\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #step 1: initialize a count to 0\n    count = 0\n    #step 2: go through the list\n    for item in list1:\n        #step 2a: convert the current item in the list to a tuple and add 1 to the count\n        item = (item,)\n        count += 1\n    #step 3: return the dictionary\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    count = {}\n    for i in list1:\n        t = tuple(i)\n        count[t] = count.get(t, 0) + 1\n    return count\n        \ndef get_n_sublists(list1, n):\n    '''\n    Write a function that takes a list and n. Returns a dictionary where the keys are the n-tuples of all the elements in list and the value is the number of lists with those elements.\n    '''\n    \n    sublist = {}\n    for i in range(len(list1)-n+1):\n        sublist[tuple(list1[i:i+n])] = sublist.get(tuple(list1[i:i+n]), 0) + 1\n    return sublist\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # combinations_set = set()\n    # for i in range(len(test_list)):\n    #     combination = combinations(test_list[i], 2)\n    #     for j in combination:\n    #         combinations_set.add(j)\n    #         combinations_set.add((j[1], j[0]))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize result\n    result = set()\n    # create a set to store all the combinations of sums\n    combination_set = set()\n    # add all the combinations in the set\n    # for each combination of sums, find the sum of numbers from the given list\n    # if the sum is equal to the total element in the list, add it to the result\n    # for each combination, find the difference between the sum and the total element in the list and check if it is in the set\n    # if it is not, add it to the set\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(j) == sum(test_list):\n                result.add(tuple(sorted(j)))\n            for k in range(len(test_list) - 1):\n                if j[k] + j[k + 1] == test_list[k]:\n                    if tuple(sorted([j[k], j[k + 1]])) not in combination_set:\n                        combination_set.add(tuple(sorted([j[k], j[k + 1]])))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!=j:\n                final_list.append((test_list[i],test_list[j]))\n    return final_list\ndef solution(A):\n    '''\n    Write a function that returns the number of combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Write your solution below.\n    # The first line of each input contains N. The next N lines contain integers \n    # representing N integers in a tuple.\n    test_list = []\n    for i in range(len(A)):\n        test_list.append(A[i])\n    final_list = find_combinations(test_list)\n    result = 0\n    for element in final_list:\n        result += 1\n    return result\n    \nprint(solution([1,2,3]))\nprint(solution([1,2,3,4]))\nprint(solution([1,2,3,4,5]))\nprint(solution([1,2,3,4,5,6]))\nprint(solution([1,2,3,4,5,6,7]))\nprint(solution([1,2,3,4,5,6,7,8,9]))\nprint(solution([1,2,3,4,5,6,7,8,9,10]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]))\nprint(solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]))\nprint(solution([1,2,3,4,5,6,"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    new_list = []\n    for i in range(1, len(test_list) + 1):\n        for combination in combinations(test_list, i):\n            if sum(combination) == 21:\n                new_list.append(combination)\n    return new_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 2)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    combinations_list = []\n    for i in range(1, n+1):\n        combinations_list += list(combinations(test_list, i))\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # get all combinations of elements\n    combos = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # add tuples to list\n            combos.append((test_list[i], test_list[j]))\n    return combos\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    n = len(test_list)\n    res = []\n    for i in range(1, n + 1):\n        for comb in combinations(test_list, i):\n            res.append(comb)\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for t in combinations(test_list,3):\n        t = sorted(t)\n        ans.append(t)\n    return ans\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #initialize output list\n    res = []\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1, n):\n        if n%i==0:\n            count=count+1\n    if count%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n%i == 0:\n            count += 1\n        i += 1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,math.ceil(n/2)) : \n        if n%i==0 : \n            count+=1\n    if count%2==0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = n\n    i = 1\n    count = 0\n    while i < a :\n        if a % i == 0 :\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if (n % i == 0) :\n            count += 1\n    if count%2 == 0 :\n        return True\n    else :\n        return False\n    \ndef sum_of_list_using_lambda(L):\n    '''\n    Write a python function to compute the sum of all the numbers in a list using map and lambda. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-4.php\n    '''\n    return sum(map(lambda x: x,L))\n    \ndef is_prime(n) :\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-3.php\n    '''\n    prime = True\n    for i in range(2,n) :\n        if (n % i == 0) :\n            prime = False\n    if prime :\n        return True\n    else :\n        return False\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-4-exercise-4.php\n    '''\n    return s == s[::-1]\n    \ndef is_prime_efficient(n, d = 1) :\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-3.php\n    '''\n    count = 2\n    while (count <= n) :\n        if (n % count == 0) :\n            return False\n        count += 1\n    return True\n    \ndef is_prime_efficient(n, d = 1) :\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-3.php\n    '''\n    count = 2\n    while (count <= math.ceil(math.sqrt(n)) ) :\n        if (n % count == 0) :\n            return False\n        count += 1\n    return True\n    \ndef is_prime_efficient(n) :\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-3.php\n    '''\n    count = 2\n    while (count <= math.ceil(math.sqrt(n))) :\n        if (n % count == 0) :\n            return False\n        count += 1\n    return True\n    \ndef is_palindrome_permutation(s):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    count = {}\n    for i in s :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    for k in count:\n        if count[k] % 2!= 0 :\n            return False\n    return True\n    \ndef is_palindrome_permutation(s):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    count = {}\n    for i in s :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    for k in count:\n        if count[k] % 2!= 0 :\n            return False\n    return True\n    \ndef is_palindrome_permutation(s) :\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    count = {}\n    for i in s :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    for k in count:\n        if count[k] % 2!= 0 :\n            return False\n    return True\n    \ndef is_palindrome_permutation(s) :\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    count = {}\n    for i in s :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    for k in count:\n        if count[k] % 2!= 0 :\n            return False\n    return True\n    \ndef string_match(a, b):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    count = 0\n    for i in range(len(a)) :\n        if a[i] == b[i] :\n            count += 1\n    return count\n    \ndef string_match(a, b):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    count = 0\n    for i in range(len(a)) :\n        if a[i] == b[i] :\n            count += 1\n    return count\n    \ndef string_match(a, b):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    return len([i for i in range(len(a)) if a[i] == b[i]])\n    \ndef string_match(a, b):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    return len([i for i in range(len(a)) if a[i] == b[i]])\n    \ndef string_match(a, b):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    return len([i for i in range(len(a)) if a[i] == b[i]])\n    \ndef string_match(a, b):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    return len([i for i in range(len(a)) if a[i] == b[i]])\n    \ndef string_match(a, b):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-5.php\n    '''\n    return len([i for i in range(len(a)) if a[i] == b[i]])\n    \ndef string_match(a, b):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisors += 1\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 0: \n        print(\"Please enter a positive integer\") \n        return\n    count = 1\n    if n == 1: \n        return 1\n    for i in range(2, n): \n        if n % i == 0: \n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(math.ceil(n/2.0)==n/2.0):\n        print(math.ceil(n/2.0))\n    else:\n        print(math.ceil(n/2.0)+1)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    counter = 0\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            counter +=1\n    if counter%2 == 0 :\n        return True\n    else :\n        return False\n        \ndef is_prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 2 :\n        return True\n    if n == 1 or n % 2 == 0 :\n        return False\n    k = 3\n    while k*k <= n :\n        if n % k == 0 :\n            return False\n        k += 2\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            ans += arr[i:j]\n    return ans\n    \ndef odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            ans += arr[i:j]\n    return ans\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)-1):\n        odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+2,len(arr)+1,2):\n            odd_length_sum += sum(arr[i:j])\n    \n    return odd_length_sum\n    \nprint(odd_length_sum([1,2,3,4,5,6]))\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    length = len(arr)\n    if length == 0:\n        return 0\n    if length == 1:\n        return arr[0]\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr_len = len(arr)\n    sum = 0\n    for i in range(arr_len):\n        if (i % 2 == 1):\n            sum = sum + arr[i]\n    print(sum)\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j < len(arr):\n                sum += arr[j]\n    return sum\nprint(odd_length_sum([2, 3, 4, 5, 6, 7, 8]))\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) < 2:\n        return\n    s = 0\n    for i in range(len(arr)):\n        if i%2 == 1:\n            s = s + arr[i]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #code here\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i%2!= 0:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    hi = mx - mn\n    hi = hi + mn\n    if mx == mn:\n        return 0.0, 0.0, mx\n    if hi == 0.0:\n        return 0.0, 0.0, mx\n    \n    if mx == r:\n        hi = (60.0 - mn)*60.0\n    elif mx == g:\n        hi = (60.0 - mn)*60.0 + 120.0\n    else:\n        hi = (60.0 - mn)*60.0 + 180.0\n    if hi < 0.0:\n        hi = 60.0 + hi\n    return hi/360.0, mx/hi, mx\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_value == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    s = 0 if max_value == 0 else delta / max_value\n    v = max_value\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r > g and r > b:\n        if g < b:\n            h = (60 * (((b - r) / (max(r, g, b) - min(r, g, b))) % 6))\n        else:\n            h = (60 * (((r - g) / (max(r, g, b) - min(r, g, b))) + 2))\n    elif r < g and b > g:\n        if r > b:\n            h = (60 * (((r - b) / (max(r, g, b) - min(r, g, b))) + 4))\n        else:\n            h = (60 * (((b - r) / (max(r, g, b) - min(r, g, b))) + 2))\n    elif b < g and r > g:\n        h = (60 * (((g - r) / (max(r, g, b) - min(r, g, b))) + 4))\n    elif g < r and r > b:\n        h = (60 * (((g - b) / (max(r, g, b) - min(r, g, b))) + 2))\n    else:\n        h = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if (r == 0 and g == 0 and b == 0):\n        return (0, 0, 0)\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    deltac = maxc - minc\n    if (deltac == 0):\n        h = 0\n    else:\n        if (r == maxc):\n            s = deltac / maxc\n        else:\n            s = (deltac / maxc) + (minc / maxc)\n        if (s * 6 > 1):\n            h = int((s * 6) % 6)\n        else:\n            h = int(s * 6)\n        if (g == maxc):\n            s = deltac / g\n        else:\n            s = (deltac / g) + (minc / g)\n        if (s * 6 > 1):\n            h = int((s * 6) % 6)\n        else:\n            h = int(s * 6)\n        if (b == maxc):\n            s = deltac / b\n        else:\n            s = (deltac / b) + (minc / b)\n        if (s * 6 > 1):\n            h = int((s * 6) % 6)\n        else:\n            h = int(s * 6)\n    if (r == maxc):\n        p = 0\n    else:\n        p = (((b - r) / (maxc - minc)) * 255)\n    if (g == maxc):\n        q = 0\n    else:\n        q = (((g - b) / (maxc - minc)) * 255)\n    if (b == maxc):\n        t = 0\n    else:\n        t = (((r - g) / (maxc - minc)) * 255)\n    return (h, s, p)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h, s, v = 0, 0, 0\n    r, g, b = r/255.0, g/255.0, b/255.0\n    if r == g and g == b:\n        h = 0\n        s = 0\n        v = r\n    else:\n        h = (g-b)/(max(r, g, b)-min(r, g, b))\n        s = (max(r, g, b)-min(r, g, b))/max(r, g, b)\n        v = max(r, g, b)\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = float(r), float(g), float(b)\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n        s = 0\n        v = mx\n    elif mx == r:\n        h = 60 * ((g-b)/df) + 360\n        s = df/mn\n        v = mx\n    elif mx == g:\n        h = 60 * ((b-r)/df) + 120\n        s = df/mn\n        v = mx\n    elif mx == b:\n        h = 60 * ((r-g)/df) + 240\n        s = df/mn\n        v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n    if delta == 0:\n        return (0, 0, 0)\n    else:\n        h = 0\n        s = 0\n        v = 0\n        if max_rgb == r:\n            h = (g - b)/delta\n        elif max_rgb == g:\n            h = 2 + (b - r)/delta\n        else:\n            h = 4 + (r - g)/delta\n        s = delta/max_rgb\n        if h < 0:\n            h = h + 6\n        if s == 0:\n            v = 0\n        else:\n            v = 4 + (max_rgb - min_rgb)/s\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # if r==g and g==b:\n    #     return 0, 0, r\n    if (r > g) and (r > b):\n        maximum = r\n        if maximum < g:\n            maximum = g\n        if maximum < b:\n            maximum = b\n        minimum = (r + g + b) - maximum\n    elif (g > r) and (g > b):\n        maximum = g\n        if maximum < r:\n            maximum = r\n        if maximum < b:\n            maximum = b\n        minimum = (g + r + b) - maximum\n    else:\n        maximum = b\n        if maximum < r:\n            maximum = r\n        if maximum < g:\n            maximum = g\n        minimum = (b + r + g) - maximum\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #RGB to HSV\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for n in range(len(list1)):\n        if list1[n] % 2 == 0:\n            even_numbers.append(list1[n])\n        else:\n            odd_numbers.append(list1[n])\n    print(\"Even numbers of the list : {}\".format(even_numbers))\n    print(\"Odd numbers of the list : {}\".format(odd_numbers))\n    print(\"The product of even numbers and odd numbers is : {}\".format(np.prod(even_numbers) * np.prod(odd_numbers)))\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    odd = 0\n    even = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    return even * odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(f'Product of even numbers in the list: {np.prod(even_list)}')\n    print(f'Product of odd numbers in the list: {np.prod(odd_list)}')\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for x in list1:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    return(even[0] * odd[0], even[1] * odd[1])\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even*odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 0\n    odd_product = 0\n    for num in list1:\n        if num%2 == 0:\n            even_product = even_product*num\n        else:\n            odd_product = odd_product*num\n    return even_product,odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even+odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_prod *= list1[i]\n        else:\n            odd_prod *= list1[i]\n    return even_prod, odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even, odd = 0, 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    for i in list1:\n        if i%2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    return even_num,odd_num\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Your code here\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str.split()])\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip()\n    result = 0\n    if test_str == '':\n        return result\n    test_str = test_str.replace(' ', '')\n    \n    while True:\n        if test_str[0] == '(' and test_str[-1] == ')':\n            break\n        if test_str[0] in ('[', '('):\n            test_str = test_str[1:]\n        if test_str[-1] in ('[', '('):\n            test_str = test_str[:-1]\n    \n    if test_str == '':\n        return result\n    \n    i = 0\n    while i < len(test_str):\n        if test_str[i] == '(':\n            while test_str[i]!= ')':\n                i += 1\n        elif test_str[i] == '[':\n            while test_str[i]!= ']':\n                i += 1\n        elif test_str[i] == ')':\n            return result\n        else:\n            try:\n                result = int(test_str[i]) + result * 10\n            except:\n                return result\n        i += 1\n    \n    return result\n    \ndef tuple_str_list(test_str):\n    '''\n    Write a function to convert tuple string to list tuple.\n    '''\n    test_str = test_str.strip()\n    result = list()\n    if test_str == '':\n        return result\n    test_str = test_str.replace(' ', '')\n    \n    while True:\n        if test_str[0] == '(' and test_str[-1] == ')':\n            break\n        if test_str[0] in ('[', '('):\n            test_str = test_str[1:]\n        if test_str[-1] in ('[', '('):\n            test_str = test_str[:-1]\n    \n    if test_str == '':\n        return result\n    \n    i = 0\n    while i < len(test_str):\n        if test_str[i] == '(':\n            while test_str[i]!= ')':\n                i += 1\n        elif test_str[i] == '[':\n            while test_str[i]!= ']':\n                i += 1\n        elif test_str[i] == ')':\n            return result\n        else:\n            try:\n                result.append(int(test_str[i]))\n            except:\n                return result\n        i += 1\n    \n    return result\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    test_str = test_str.strip()\n    result = 0\n    if test_str == '':\n        return result\n    test_str = test_str.replace(' ', '')\n    \n    while True:\n        if test_str[0] == '(' and test_str[-1] == ')':\n            break\n        if test_str[0] in ('[', '('):\n            test_str = test_str[1:]\n        if test_str[-1] in ('[', '('):\n            test_str = test_str[:-1]\n    \n    if test_str == '':\n        return result\n    \n    i = 0\n    while i < len(test_str):\n        if test_str[i] == '(':\n            while test_str[i]!= ')':\n                i += 1\n        elif test_str[i] == '[':\n            while test_str[i]!= ']':\n                i += 1\n        elif test_str[i] == ')':\n            return result\n        else:\n            try:\n                result = float(test_str[i]) + result * 10\n            except:\n                return result\n        i += 1\n    \n    return result\n    \ndef tuple_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to bool tuple.\n    '''\n    test_str = test_str.strip()\n    result = False\n    if test_str == '':\n        return result\n    test_str = test_str.replace(' ', '')\n    \n    while True:\n        if test_str[0] == '(' and test_str[-1] == ')':\n            break\n        if test_str[0] in ('[', '('):\n            test_str = test_str[1:]\n        if test_str[-1] in ('[', '('):\n            test_str = test_str[:-1]\n    \n    if test_str == '':\n        return result\n    \n    i = 0\n    while i < len(test_str):\n        if test_str[i] == '(':\n            while test_str[i]!= ')':\n                i += 1\n        elif test_str[i] == '[':\n            while test_str[i]!= ']':\n                i += 1\n        elif test_str[i] == ')':\n            return result\n        else:\n            try:\n                result = bool(test_str[i])\n            except:\n                return result\n        i += 1\n    \n    return result\n    \ndef tuple_str_tuple(test_str):\n    '''\n    Write a function to convert tuple string to tuple tuple.\n    '''\n    test_str = test_str.strip()\n    result = tuple()\n    if test_str == '':\n        return result\n    test_str = test_str.replace(' ', '')\n    \n    while True:\n        if test_str[0] == '(' and test_str[-1] == ')':\n            break\n        if test_str[0] in ('[', '('):\n            test_str = test_str[1:]\n        if test_str[-1] in ('[', '('):\n            test_str = test_str[:-1]\n    \n    if test_str == '':\n        return result\n    \n    i = 0\n    while i < len(test_str):\n        if test_str[i] == '(':\n            while test_str[i]!= ')':\n                i += 1\n        elif test_str[i] == '[':\n            while test_str[i]!= ']':\n                i += 1\n        elif test_str[i] == ')':\n            return result\n        else:\n            try:\n                result += tuple([int(test_str[i])])\n            except:\n                return result\n        i += 1\n    \n    return result\n    \ndef tuple_str_complex(test_str):\n    '''\n    Write a function to convert tuple string to complex tuple.\n    '''\n    test_str = test_str.strip()\n    result = complex()\n    if test_str == '':\n        return result\n    test_str = test_str.replace(' ', '')\n    \n    while True:\n        if test_str[0] == '(' and test_str[-1] == ')':\n            break\n        if test_str[0] in ('[', '('):\n            test_str = test_str[1:]\n        if test_str[-1] in ('[', '('):\n            test_str = test_str[:-1]\n    \n    if test_str == '':\n        return result\n    \n    i = 0\n    while i < len(test_str):\n        if test_str[i] == '(':\n            while test_str[i]!= ')':\n                i += 1\n        elif test_str[i] == '[':\n            while test_str[i]!= ']':\n                i += 1\n        elif test_str[i] == ')':\n            return result\n        else:\n            try:\n                result = complex(test_str[i])\n            except:\n                return result\n        i += 1\n    \n    return result\n    \ndef tuple_str_str(test_str):\n    '''\n    Write a function to convert tuple string to str tuple.\n    '''\n    test_str = test_str.strip()\n    result = str()\n    if test_str == '':\n        return result\n    test_str = test_str.replace(' ', '')\n    \n    while True:\n        if test_str"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(',', '')\n    test_str = test_str.replace('.', '')\n    test_str = test_str.replace(' ', '')\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    a = (int(x) for x in test_str.split(','))\n    return tuple(a)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str)!= str:\n        return 'Invalid input'\n    return tuple(map(int, test_str.split(', ')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_str = tuple(map(int, test_str.split()))\n    except ValueError:\n        return 'Invalid data'\n    return test_str\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    try:\n        test_str = tuple(map(float, test_str.split()))\n    except ValueError:\n        return 'Invalid data'\n    return test_str\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == 0 or a[i-1]!= x:\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    if l == 0:\n        return 0\n    i = bisect.bisect_right(a, x)\n    if i == 0:\n        return 0\n    elif x < a[i-1]:\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    if a[i]!= x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # check if x is already present in the array\n    if x in a:\n        return a.index(x)\n    else:\n        # check if x is greater than the last element\n        if x > a[-1]:\n            return len(a)\n        else:\n            # find the correct place for x\n            index = bisect.bisect_left(a, x)\n            # return the new element to be inserted\n            return index\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    index = bisect.bisect_right(a, x)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)-1\n    while lo<=hi:\n        mid = lo + (hi-lo)//2\n        if x == a[mid]:\n            return mid\n        elif x > a[mid]:\n            lo = mid+1\n        else:\n            hi = mid-1\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return len(a)\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == []:\n        return 0\n    for i in range(len(a)):\n        if x >= a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == 0:\n        a.insert(idx, x)\n        return a\n    if a[idx - 1] == x:\n        return a\n    return a[:idx] + [x] + a[idx:]\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'a(b+b+b)b', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = r\"(\\w*a\\w*)(\\w*b\\w*)\"\n    return re.findall(a, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'a+b+b+b',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab{3}\"\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('ab{3}')\n    if re.match(pattern, text):\n        return \"Pattern Matched\"\n    else:\n        return \"Pattern Not Matched\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(\"^a+b+b$\", text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'ab*b*b', text)\n    if match:\n        return match.group()\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('a*b*b', text)\n    return match.group()\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #fullmatch = re.fullmatch(\"ababab\", text)\n    #print(fullmatch)\n    #(ababab)\n    #if fullmatch:\n    #    print(\"match\")\n    #else:\n    #    print(\"no match\")\n    return bool(re.match(r\"ababab\", text))\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_str, test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    a = test_str.split(', ')\n    new_tuple = tuple(test_list + a)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_from_list = tuple(test_list)\n    return tuple_from_list + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, ) + tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    new_tuple = test_list + test_str\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #Hint: how can you get the length of a list?\n    #Hint: what is the format() string used for?\n    #Hint: check out string.format() to see what format() does.\n    return (test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str.split(\",\")\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if isinstance(nums, list):\n        for i in range(len(nums)):\n            if (i%2 == 0) and (nums[i] % 2!= 0):\n                return False\n        return True\n    else:\n        raise TypeError('nums must be a list')\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0, len(nums)):\n        if index % 2!= 0:\n            continue\n        if nums[index] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # for i in range(len(nums)):\n    #     if i%2 == 0:\n    #         if nums[i]%2!= 0:\n    #             print(\"False\")\n    #             return False\n    #     else:\n    #         print(\"False\")\n    #         return False\n    # return True\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if not nums: return None\n    return all(num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0)\n    \ndef even_position_list(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if not nums: return None\n    return all(num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([num%2 == 0 for num in nums])\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num%2 == 0 for i, num in enumerate(nums) if i%2==0)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums)==0:\n        return False\n    for i in range(0,len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    print(test_tup)\n    new_tup = []\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    return tuple(new_tup)\n    "
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (x for x in test_tup if x!= ())\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return list(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if test_tup is None:\n        return None\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return test_tup\n    else:\n        return remove_nested(test_tup[1:]) + (test_tup[0],)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while (test_tup[0] == ():\n        test_tup = test_tup[1:]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    for i in range(len(test_tup)):\n        for j in range(i, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                test_tup.pop(j)\n                break\n    return tuple(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Your code here\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = ()\n    for i in test_tup:\n        if type(i) is not tuple:\n            result = result + (i,)\n        else:\n            result = result + remove_nested(i)\n    return result\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return list(filter(lambda x:x!= test_tup, tup))\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    n = len(input_list)\n    lst_count = 0\n    for x in input_list:\n        if type(x) == list:\n            lst_count += 1\n    return lst_count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) is list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            count += 1\n        else:\n            count = 0\n            break\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for each_list in input_list:\n        if type(each_list) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    for num in input_list:\n        if type(num) == list:\n            list_count = list_count + 1\n    return list_count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    print(f'Input List: {input_list}')\n    count = 0\n    for i in input_list:\n        count += 1\n    print(f'Number of lists = {count}')\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    j = len(arr)-1\n    while(j>=0):\n        if arr[j]==x:\n            return j\n        j=j-1\n    return -1\nprint(last([4, 6, 8, 10, 12],12))\nprint(last([4, 6, 8, 10, 12],4))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    j = len(arr)-1\n    while j>0:\n        if arr[j] == x:\n            return j\n        j -=1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    size = len(arr)\n    low = 0\n    high = size - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    j=len(arr)-1\n    while i<=j:\n        mid=(i+j)//2\n        if arr[mid]<x:\n            i=mid+1\n        else:\n            j=mid-1\n    return j\ndef last1(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    j=len(arr)-1\n    while i<=j:\n        mid=(i+j)//2\n        if arr[mid]<x:\n            i=mid+1\n        else:\n            j=mid-1\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    Sample input: arr[] = {3, 4, 2, 7, 5, 8, 6, 1, 9}\n                   x = 7\n    Expected output: 5\n    '''\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    Sample input: arr[] = {3, 4, 2, 7, 5, 8, 6, 1, 9}\n                   x = 5\n    Expected output: 3\n    '''\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    Sample input: arr[] = {1, 5, 7, 10, 20}\n                   x = 10\n    Expected output: 3\n    '''\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    j=len(arr)-1\n    while i<j:\n        mid=(i+j)//2\n        if arr[mid]>x:\n            j=mid-1\n        else:\n            i=mid+1\n    return j\n    "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l,h = 0,len(arr)-1\n    while l<=h:\n        mid = (l+h)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid+1\n        else:\n            h = mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            if mid == high:\n                return mid\n            else:\n                return mid + 1\n    return mid\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = re.compile(r'a\\s*b')\n    result = pat.search(text)\n    if result!= None:\n        print(result.group())\n    else:\n        print('No match')\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.match(r'a(.+)b',text).group(1)\n    return text\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.match(r'b(.+)a',text).group(1)\n    return text\ndef text_startb_enda2(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+)a',text).group(1)\n    return text\ndef text_startb_enda3(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+)a',text).group(1)\n    return text\ndef text_startb_enda4(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+)a',text).group(1)\n    return text\ndef text_startb_enda5(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+)a',text).group(0)\n    return text\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.match(r'b(.+)b',text).group(1)\n    return text\ndef text_startb_endb2(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.search(r'b(.+)b',text).group(1)\n    return text\ndef text_startb_endb3(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.search(r'b(.+)b',text).group(1)\n    return text\ndef text_startb_endb4(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.search(r'b(.+)b',text).group(1)\n    return text\ndef text_startb_endb5(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.search(r'b(.+)b',text).group(0)\n    return text\ndef text_startb_starta(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.match(r'b(.+?)a',text).group(1)\n    return text\ndef text_startb_starta2(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+?)a',text).group(1)\n    return text\ndef text_startb_starta3(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+?)a',text).group(1)\n    return text\ndef text_startb_starta4(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+?)a',text).group(1)\n    return text\ndef text_startb_starta5(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+?)a',text).group(0)\n    return text\ndef text_startb_starta6(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+?)a',text).group(0)\n    return text\ndef text_startb_starta7(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+?)a',text).group(0)\n    return text\ndef text_startb_starta8(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+?)a',text).group(0)\n    return text\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.match(r'b(.+)a(.+)',text).group(1)\n    return text\ndef text_startb_enda2(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+)a(.+)',text).group(1)\n    return text\ndef text_startb_enda3(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+)a(.+)',text).group(1)\n    return text\ndef text_startb_enda4(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+)a(.+)',text).group(1)\n    return text\ndef text_startb_enda5(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'a'.\n    '''\n    text = re.search(r'b(.+)a(.+)',text).group(0)\n    return text\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.match(r'b(.+)b(.+)',text).group(1)\n    return text\ndef text_startb_endb2(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.search(r'b(.+)b(.+)',text).group(1)\n    return text\ndef text_startb_endb3(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.search(r'b(.+)b(.+)',text).group(1)\n    return text\ndef text_startb_endb4(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.search(r'b(.+)b(.+)',text).group(1)\n    return text\ndef text_startb_endb5(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending in 'b'.\n    '''\n    text = re.search(r'b"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'a.b',text)\n    print(match)\n    \n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r'^a[a-z]+[b]',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    a_pattern = r'a'\n    b_pattern = r'b'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # match = re.findall('[a-b]+[a-b]',text)\n    # match = re.findall('[a-z]',text)\n    # match = re.findall('a[abc]',text)\n    # match = re.findall('a[a-z]',text)\n    # match = re.findall('a[a-zA-Z]',text)\n    # match = re.findall('a[a-zA-Z0-9]',text)\n    match = re.findall('a[a-zA-Z0-9]{1}[a-zA-Z0-9]',text)\n    if match:\n        return match\n    return []\n    \ndef luhn(card):\n    '''\n    Write a function that returns whether a credit card number is valid according to the Luhn algorithm.\n    '''\n    digits = [int(digit) for digit in card]\n    # digits = filter(int, card)\n    oddsum = 0\n    for i in range(1, len(digits), 2):\n        oddsum += digits[i]\n    \n    evensum = 0\n    for i in range(0, len(digits), 2):\n        evensum += digits[i]\n    \n    return (oddsum + evensum) % 10 == 0\n    \n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.match(r'a.b$',text)\n    if result!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\w+a\\w+b')\n    if pattern.search(text):\n        print('Success!')\n    else:\n        print('Failed!')\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.findall(r'a[^b]',text)\n    return match\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Here's a pattern that we might use some day:\n    #    \\w+\\s\\w+|\\w+|[^a-cA-Z]\n    # This pattern should match things like:\n    #    'ab'\n    #    'xyz'\n    #    'ac'\n    #    'aab'\n    #    'aabx'\n    #    'xyz'\n    #    'xyx'\n    # Here's a pattern that should not match:\n    #    'ac'\n    #    'aab'\n    pattern = r'a.*?b'\n    # search and findall\n    res = re.search(pattern, text)\n    print(res)\n    if res:\n        print(res.group())\n    else:\n        print('not found')\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, followed by 'b'.\n    '''\n    # Here's a pattern that we might use some day:\n    #    \\w+\\s\\w+|\\w+|[^a-cA-Z]\n    # This pattern should match things like:\n    #    'ab'\n    #    'xyz'\n    #    'ac'\n    #    'aab'\n    #    'aabx'\n    #    'xyz'\n    #    'xyx'\n    # Here's a pattern that should not match:\n    #    'ac'\n    #    'aab'\n    pattern = r'a.*?b'\n    # search and findall\n    res = re.search(pattern, text)\n    print(res)\n    if res:\n        print(res.group())\n    else:\n        print('not found')\ndef text_starta_endx(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'x'.\n    '''\n    # Here's a pattern that we might use some day:\n    #    \\w+\\s\\w+|\\w+|[^a-cA-Z]\n    # This pattern should match things like:\n    #    'ab'\n    #    'xyz'\n    #    'ac'\n    #    'aab'\n    #    'aabx'\n    #    'xyz'\n    #    'xyx'\n    # Here's a pattern that should not match:\n    #    'ac'\n    #    'aab'\n    pattern = r'a.*?x'\n    # search and findall\n    res = re.search(pattern, text)\n    print(res)\n    if res:\n        print(res.group())\n    else:\n        print('not found')\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, followed by 'c'.\n    '''\n    # Here's a pattern that we might use some day:\n    #    \\w+\\s\\w+|\\w+|[^a-cA-Z]\n    # This pattern should match things like:\n    #    'ab'\n    #    'xyz'\n    #    'ac'\n    #    'aab'\n    #    'aabx'\n    #    'xyz'\n    #    'xyx'\n    # Here's a pattern that should not match:\n    #    'ac'\n    #    'aab'\n    pattern = r'a.*?c'\n    # search and findall\n    res = re.search(pattern, text)\n    print(res)\n    if res:\n        print(res.group())\n    else:\n        print('not found')\ndef text_starta_startb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, followed by 'b'.\n    '''\n    # Here's a pattern that we might use some day:\n    #    \\w+\\s\\w+|\\w+|[^a-cA-Z]\n    # This pattern should match things like:\n    #    'ab'\n    #    'xyz'\n    #    'ac'\n    #    'aab'\n    #    'aabx'\n    #    'xyz'\n    #    'xyx'\n    # Here's a pattern that should not match:\n    #    'ac'\n    #    'aab'\n    pattern = r'a.*?b'\n    # search and findall\n    res = re.search(pattern, text)\n    print(res)\n    if res:\n        print(res.group())\n    else:\n        print('not found')\ndef text_endx_starta(text):\n    '''\n    Write a function that matches a string that has an 'x' followed by anything, followed by 'a'.\n    '''\n    # Here's a pattern that we might use some day:\n    #    \\w+\\s\\w+|\\w+|[^a-cA-Z]\n    # This pattern should match things like:\n    #    'ab'\n    #    'xyz'\n    #    'ac'\n    #    'aab'\n    #    'aabx'\n    #    'xyz'\n    #    'xyx'\n    # Here's a pattern that should not match:\n    #    'ac'\n    #    'aab'\n    pattern = r'.*?a'\n    # search and findall\n    res = re.search(pattern, text)\n    print(res)\n    if res:\n        print(res.group())\n    else:\n        print('not found')\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, followed by 'c'.\n    '''\n    # Here's a pattern that we might use some day:\n    #    \\w+\\s\\w+|\\w+|[^a-cA-Z]\n    # This pattern should match things like:\n    #    'ab'\n    #    'xyz'\n    #    'ac'\n    #    'aab'\n    #    'aabx'\n    #    'xyz'\n    #    'xyx'\n    # Here's a pattern that should not match:\n    #    'ac'\n    #    'aab'\n    pattern = r'a.*?c'\n    # search and findall\n    res = re.search(pattern, text)\n    print(res)\n    if res:\n        print(res.group())\n    else:\n        print('not found')\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, followed by 'b'.\n    '''\n    # Here's a pattern that we might use some day:\n    #    \\w+\\s\\w+|\\w+|[^a-cA-Z]\n    # This pattern should match things like:\n    #    'ab'\n    #    'xyz'\n    #    'ac'\n    #    'aab'\n    #    'aabx'\n    #    'xyz'\n    #    'xyx'\n    # Here's a pattern that should not match:\n    #    'ac'\n    #    'aab'\n    pattern = r'a.*?b'\n    # search and findall\n    res = re.search(pattern, text)\n    print(res)\n    if res:\n        print(res.group())\n    else:\n        print('not found')\ndef text_starta_startb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, followed by 'b'.\n    '''\n    # Here's a pattern that we might use some day:\n    #    \\w+\\s\\w+|\\w+|[^a-cA-Z]\n    # This pattern should match things like:\n    #    'ab'\n    #    'xyz'\n    #    'ac'\n    #    'aab'\n    #    'aabx'\n    #    'xyz'\n    #    'xyx'\n    # Here's a pattern that should no"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n    \nprint(return_sum({\"one\" : 1, \"two\" : 2, \"three\" : 3, \"four\" : 4})) #should return 10\nprint(return_sum({\"one\" : 1, \"two\" : 2, \"three\" : 3})) #should return 7\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for key in dict.keys():\n        result += dict[key]\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # dict = {'a': 10, 'b': 20}\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for item in dict.values():\n        result += item\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    count = 0\n    for i in range(len(dict)):\n        count += dict[i]\n    return count\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # creating a variable to count the total sum\n    total_sum = 0\n    # iterating through the dictionary\n    for k in dict.keys():\n        # adding each key and value to the total sum\n        total_sum += dict[k]\n    # returning the total sum\n    return total_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Your code here\n    return sum([i for i in range(n) if i % 2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%2!=0):\n            sum+=i\n    return sum\n    \nprint(\"Pass\" if (2 == sum_odd(2)) else \"Fail\")\nprint(\"Pass\" if (1 == sum_odd(3)) else \"Fail\")\nprint(\"Pass\" if (10 == sum_odd(10)) else \"Fail\")\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n + 1):\n        if i % 2!= 0:\n            sum = sum + i\n    return sum\nprint(sum_odd(5))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if i%2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for x in range(n):\n        if x%2==1:\n            sum_odd = sum_odd + x\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(l, r+1, 2))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # your code here\n    total = 0\n    for i in range(n):\n        if i % 2!= 0:\n            total += i\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2!=0:\n            sum = sum + i\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0: \n        return False\n    else:\n        sum = 0\n        for i in range(1, n+1): \n            if i % 2!= 0:\n                sum = sum + i\n        return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for x in range(n+1):\n        if x%2==1:\n            sum+=x\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in range(0,len(arr)):\n        s=s+arr[i]\n    print(s)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    _sum = 0\n    for i in range(len(arr)):\n        _sum += arr[i]\n    return _sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr is None:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s = s + arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\ndef _prod(arr):  \n    '''\n    Write a python function to find the product of an array.\n    '''\n    return reduce((lambda x,y: x * y), arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % n\n    d = n - d\n    return n ^ d\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a = (n << d) | (n >> (32-d))\n    return a\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n    n_bit = 0\n    while n!= 0:\n        n_bit = n_bit + n&1\n        n = n >> 1\n    \n    n = n >> d\n    \n    n_bit = n_bit << d\n    n_bit = n_bit | n\n    \n    return n_bit\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    binary = bin(n)[2:]\n    binary = '0'*(32-len(binary)) + binary\n    binary = binary[-d:] + binary[:-d]\n    return int(binary, 2)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | (n >> (32-d))\n    return n\n    \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp = n & 0xFFFFFFFF\n    if d==0:\n        return n\n    while d > 0:\n        temp = temp << 1\n        if temp > 0x7FFFFFFF:\n            temp = temp - 0x100000000\n        d = d - 1\n    return temp | (n & 0xFFFFFFFF)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bit_length = 32\n    \n    # lsb_shift = n & (2**d-1)\n    # lsb_shift = n\n    # msb_shift = n >> (bit_length-d)\n    # lsb_shift = msb_shift << d\n    # n = n & ((2**bit_length-1) ^ lsb_shift)\n    # n = n << d\n    # n = n | lsb_shift\n    \n    # msb_shift = n >> (bit_length-d)\n    # msb_shift = n & (2**(bit_length-d)-1)\n    # n = n & (2**(bit_length-d)-1)\n    # n = n << d\n    # n = n | msb_shift\n    \n    # n = n >> d\n    # n = n & (2**d-1)\n    \n    # print(n)\n    # print(bit_length)\n    # print(d)\n    # print(lsb_shift)\n    # print(msb_shift)\n    \n    def left_rotation(n,d):\n        if(d == 0):\n            return n\n        else:\n            # recur left rotation\n            return left_rotation(n << d,d)\n    \n    return left_rotation(n,d)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print('n=',n)\n    print('d=',d)\n    n = n >> d\n    print('n=',n)\n    return n\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n    #  return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','')\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r\"\\s\", \"\", text)\n    return text\ndef count_words(text):\n    '''\n    Write a function to count how many words and how many characters are in a given text.\n    '''\n    count = 0\n    count_characters = 0\n    for line in text.split(\"\\n\"):\n        line = line.strip()\n        count_characters += len(line)\n        count += 1\n    print(count, \"\\n\", count_characters, \"\\n\", count_characters/count)\ndef count_sentences(text):\n    '''\n    Write a function to count how many sentences are in a given text.\n    '''\n    count = 0\n    for line in text.split(\"\\n\"):\n        line = line.strip()\n        if line == \".\" or line == \"!\" or line == \"?\":\n            count += 1\n    print(count)\ndef count_characters(text):\n    '''\n    Write a function to count how many characters are in a given text.\n    '''\n    count = 0\n    for line in text.split(\"\\n\"):\n        line = line.strip()\n        count += len(line)\n    print(count)\ndef count_sentences_with_breaks(text):\n    '''\n    Write a function to count how many sentences are in a given text, with breaks (.)\n    '''\n    count = 0\n    for line in text.split(\"\\n\"):\n        line = line.strip()\n        if line == \".\" or line == \"!\" or line == \"?\":\n            count += 1\n    print(count)\ndef count_sentences_with_breaks_2(text):\n    '''\n    Write a function to count how many sentences are in a given text, with breaks (.)\n    '''\n    count = 0\n    sentences = text.split(\"\\n\\n\")\n    for line in sentences:\n        line = line.strip()\n        if line == \".\" or line == \"!\" or line == \"?\":\n            count += 1\n    print(count)\ndef count_sentences_with_spaces_and_breaks(text):\n    '''\n    Write a function to count how many sentences are in a given text, with spaces and breaks (.,!?).\n    '''\n    count = 0\n    sentences = text.split(\"\\n\\n\")\n    for line in sentences:\n        line = line.strip()\n        line = remove_all_spaces(line)\n        if line == \".\" or line == \"!\" or line == \"?\":\n            count += 1\n    print(count)\ndef count_sentences_with_spaces_and_breaks_2(text):\n    '''\n    Write a function to count how many sentences are in a given text, with spaces and breaks (.,!?).\n    '''\n    count = 0\n    sentences = text.split(\"\\n\\n\")\n    for line in sentences:\n        line = line.strip()\n        line = remove_all_spaces(line)\n        if line == \".\" or line == \"!\" or line == \"?\":\n            count += 1\n    print(count)\ndef count_words_with_spaces(text):\n    '''\n    Write a function to count how many words are in a given text, with spaces (one word).\n    '''\n    count = 0\n    for line in text.split(\"\\n\"):\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        count += len(line)\n    print(count)\ndef count_words_with_spaces_2(text):\n    '''\n    Write a function to count how many words are in a given text, with spaces (one word).\n    '''\n    count = 0\n    for line in text.split(\"\\n\"):\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        count += len(line)\n    print(count)\ndef count_sentences_with_spaces(text):\n    '''\n    Write a function to count how many sentences are in a given text, with spaces (one sentence).\n    '''\n    count = 0\n    sentences = text.split(\"\\n\")\n    for line in sentences:\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        if line == \".\" or line == \"!\" or line == \"?\":\n            count += 1\n    print(count)\ndef count_sentences_with_spaces_2(text):\n    '''\n    Write a function to count how many sentences are in a given text, with spaces (one sentence).\n    '''\n    count = 0\n    sentences = text.split(\"\\n\")\n    for line in sentences:\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        if line == \".\" or line == \"!\" or line == \"?\":\n            count += 1\n    print(count)\ndef count_words_with_spaces_and_breaks(text):\n    '''\n    Write a function to count how many words are in a given text, with spaces and breaks (one word).\n    '''\n    count = 0\n    for line in text.split(\"\\n\\n\"):\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        count += len(line)\n    print(count)\ndef count_words_with_spaces_and_breaks_2(text):\n    '''\n    Write a function to count how many words are in a given text, with spaces and breaks (one word).\n    '''\n    count = 0\n    for line in text.split(\"\\n\\n\"):\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        count += len(line)\n    print(count)\ndef count_sentences_with_spaces_and_breaks(text):\n    '''\n    Write a function to count how many sentences are in a given text, with spaces and breaks (one sentence).\n    '''\n    count = 0\n    sentences = text.split(\"\\n\\n\")\n    for line in sentences:\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        if line == \".\" or line == \"!\" or line == \"?\":\n            count += 1\n    print(count)\ndef count_sentences_with_spaces_and_breaks_2(text):\n    '''\n    Write a function to count how many sentences are in a given text, with spaces and breaks (one sentence).\n    '''\n    count = 0\n    sentences = text.split(\"\\n\\n\")\n    for line in sentences:\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        if line == \".\" or line == \"!\" or line == \"?\":\n            count += 1\n    print(count)\ndef count_letters_with_spaces(text):\n    '''\n    Write a function to count how many letters are in a given text, with spaces (one letter).\n    '''\n    count = 0\n    for line in text.split(\"\\n\"):\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        for character in line:\n            if character.isalpha():\n                count += 1\n    print(count)\ndef count_letters_with_spaces_2(text):\n    '''\n    Write a function to count how many letters are in a given text, with spaces (one letter).\n    '''\n    count = 0\n    for line in text.split(\"\\n\"):\n        line = line.strip()\n        line = line.split(\" \")\n        line = \" \".join(line)\n        for character in line:\n            if character.isalpha():\n                count += 1\n    print(count)\ndef count_letters_with_spaces_and_breaks(text):\n    '''\n    Write a function to count how many letters are in a given text, with spaces and breaks (one letter).\n    '''\n    count = 0\n    for line in text.split(\"\\n\\n\"):\n        line = line.strip()\n        line "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x,y,z = int(x),int(y),int(z)\n    if x==y and y==z and x==z:\n        print(\"All three given numbers are equal!\")\n    else:\n        print(\"Not all numbers are equal!\")\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x == y == z\n    print(\"Test case passed\")\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # x,y,z = map(int, input().split())\n    # x = int(x)\n    # y = int(y)\n    # z = int(z)\n    if x == y and x == z:\n        print(3)\n    elif x == y or x == z or y == z:\n        print(2)\n    else:\n        print(0)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = x == y == z\n    print(a)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num_eq = 0\n    if x == y and y == z:\n        num_eq += 1\n    if x == y and y!= z:\n        num_eq += 1\n    if x!= y and y == z:\n        num_eq += 1\n    if x!= y and y!= z:\n        num_eq += 1\n    return num_eq\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = x == y == z\n    print(result)\n    print(\"The number of equal integers is: \", result)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c = 0\n    while (x!= y) and (x!= z) and (y!= z):\n        if x == y and x == z:\n            c = c + 1\n        x = x + 1\n        y = y + 1\n        z = z + 1\n    print(\"Number of equal numbers from three given integers = \",c)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\nprint(test_three_equal(2,2,2))\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    count=0\n    if x==y and x==z:\n        count+=1\n    if y==x and y==z:\n        count+=1\n    if z==x and z==y:\n        count+=1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    }
]