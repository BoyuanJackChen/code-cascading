[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elems.append(test_tup1[i])\n",
        "num_ids": 61
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #a = set(test_tup1)\n    #b = set(test_tup2)\n",
        "num_ids": 28
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            shared_elems.append(elem1)\n",
        "num_ids": 49
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set_test_1 = set(test_tup1)\n    set_test_2 = set(test_tup2)\n    return list(set_test_1 & set_test_2)\n",
        "num_ids": 51
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list_1 = test_tup1[0]\n    list_2 = test_tup2[0]\n    # print(list_1, list_2)\n",
        "num_ids": 43
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements\n",
        "num_ids": 72
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            common_elements.append(test_tup1[i])\n    return common_elements\n",
        "num_ids": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                shared_elements.append(i)\n    return shared_elements\n",
        "num_ids": 57
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result.append(test_tup1[i])\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return True\n    if n > 1:\n        if n == 2:\n            return False\n        for i in range(2, int(n**0.5 + 1)):\n            if n % i == 0:\n                return True\n        return False\n    else:\n        return False\ndef find_prime_factors(n):\n    '''\n    Write a python function to find prime factors of a given integer.\n    '''\n    if is_not_prime(n) == True:\n        print(\"Factors of\", n, \"are:\")\n        while n % 2 == 0:\n            print(2, end = \" \")\n            n = n//2\n        for i in range(3, int(n**0.5 + 1), 2):\n            while n % i == 0:\n                print(i, end = \" \")\n                n = n//i\n        print(n, end = \" \")\n    else:\n        print(\"The number is prime\")\ndef is_prime(n):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        else:\n            return True\ndef find_greatest_common_divisor(x, y):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers.\n    '''\n    if x > y:\n        d = y\n    else:\n        d = x\n    for i in range(d, 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\ndef find_greatest_common_divisor_recursive(x, y):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers using recursion.\n    '''\n    if x > y:\n        d = y\n    else:\n        d = x\n    if d == 1:\n        return d\n    else:\n        return find_greatest_common_divisor_recursive(d, x%d)\ndef print_interleave(s1, s2, m, n):\n    '''\n    Write a python function to print interleaved strings with minimum spaces.\n    '''\n    if m == 0:\n        print(s2)\n        return\n    if n == 0:\n        print(s1)\n        return\n    if s1 == \"\":\n        print(s2 + s1)\n        return\n    if s2 == \"\":\n        print(s1 + s2)\n        return\n    print(s1 + s2)\n    print_interleave(s1[1:], s2, m-1, n)\ndef print_interleave_recursive(s1, s2, m, n):\n    '''\n    Write a python function to print interleaved strings with minimum spaces using recursion.\n    '''\n    if m == 0:\n        print(s2)\n        return\n    if n == 0:\n        print(s1)\n        return\n    if s1 == \"\":\n        print(s2 + s1)\n        return\n    if s2 == \"\":\n        print(s1 + s2)\n        return\n    print_interleave(s1[1:], s2, m-1, n)\n    print_interleave_recursive(s1[1:], s2, m, n-1)\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a given number is palindrome.\n    '''\n    if n > 0:\n        return (is_palindrome_core(n, n, 0))\n    else:\n        return True\ndef is_palindrome_core(n, d, s):\n    '''\n    Write a python function to check if a given number is palindrome using recursion.\n    '''\n    if n == 0:\n        return s\n    if d == 0:\n        return s\n    if n > 0:\n        if n % 10 == 0:\n            return is_palindrome_core(n//10, d-1, s+str(n%10))\n        else:\n            return is_palindrome_core(n//10, d-1, s+str(n%10))\n    else:\n        return False\ndef is_palindrome_recursive(n):\n    '''\n    Write a python function to check if a given number is palindrome using recursion.\n    '''\n    if n > 0:\n        return is_palindrome_core(n, n, 0)\n    else:\n        return True\ndef is_palindrome_iterative(n):\n    '''\n    Write a python function to check if a given number is palindrome using iteration.\n    '''\n    if n > 0:\n        a = n % 10\n        n = n//10\n        while n > 0:\n            if n%10!= a:\n                return False\n            n = n//10\n            a = n%10\n        return True\ndef is_palindrome_recursive_iterative(n):\n    '''\n    Write a python function to check if a given number is palindrome using recursion.\n    '''\n    if n > 0:\n        if is_palindrome_recursive(n):\n            return True\n        else:\n            return is_palindrome_recursive(n//10)\n    else:\n        return True\ndef first_n_factors(n):\n    '''\n    Write a python function to print the first n prime numbers.\n    '''\n    if n == 1:\n        return\n    l = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            l.append(i)\n    l.reverse()\n    print(*l)\ndef check_prime(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n    return True\ndef is_prime_recursive(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        if n == 2:\n            return True\n        else:\n            for i in range(2,int(math.sqrt(n) + 1)):\n                if n % i == 0:\n                    return False\n            return True\ndef next_prime(n):\n    '''\n    Write a python function to compute the next prime number after the given number.\n    '''\n    if n < 2:\n        return 2\n    else:\n        while True:\n            n += 1\n            if check_prime(n):\n                return n\ndef gcd(a, b):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        return gcd(b, a)\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a%b)\ndef next_greatest_prime(n):\n    '''\n    Write a python function to compute the next greater prime number after the given number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\ndef next_greatest_prime_recursive(n):\n    '''\n    Write a python function to compute the next greater prime number after the given number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        if is_prime_recursive(n):\n            return n\n        else:\n            while True:\n                n += 1\n                if is_prime_recursive(n):\n                    return n\ndef is_palindrome_iterative(n):\n    '''\n    Write a python function to check if a given number is palindrome using iteration.\n    '''\n    if n < 0:\n        return False\n    s = \"\"\n    whil",
        "num_ids": 21
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 71
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\ndef prime_range(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime(i):\n            count = count + 1\n    return count\ndef is_prime_with_divisor(n, x):\n    '''\n    Write a python function to find prime numbers with divisor.\n    '''\n    if n % x == 0:\n        return False\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,2):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,3):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,4):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,5):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,6):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,7):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,8):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,9):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,10):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,11):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,12):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,13):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,14):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,15):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,16):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,17):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,18):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,19):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,20):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n",
        "num_ids": 21
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not all(n%i==0 for i in range(2,int(math.sqrt(n)+1)))\n",
        "num_ids": 31
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Corner case: 2\n    if n == 2:\n        return False\n    # Corner case: 1\n    if n == 1:\n        return False\n    # Corner case: 0\n    if n == 0:\n        return True\n    # n is non-prime if divisible by prime numbers\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)+1)):\n            if (n % i) == 0:\n                return False\n    else:\n        return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\ndef count_divisors(n):\n    '''\n    Write a python function to count divisors of an integer number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count = count + 1\n    return count\ndef sum_divisors(n):\n    '''\n    Write a python function to sum all divisors of an integer number.\n    '''\n    sum = 0\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\ndef sum_even_divisors(n):\n    '''\n    Write a python function to sum all even divisors of an integer number.\n    '''\n    sum = 0\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\ndef sum_odd_divisors(n):\n    '''\n    Write a python function to sum all odd divisors of an integer number.\n    '''\n    sum = 0\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\ndef sum_pandigital_numbers(n):\n    '''\n    Write a python function to sum all pandigital numbers.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + i + j + k + l\n    return sum\ndef sum_digits(n):\n    '''\n    Write a python function to sum all digits of an integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        sum = sum + int(str(n)[i])\n    return sum\ndef sum_digit_squares(n):\n    '''\n    Write a python function to sum all digit squares of an integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        sum = sum + (int(str(n)[i]) ** 2)\n    return sum\ndef sum_digits_squares(n):\n    '''\n    Write a python function to sum all digits squares of an integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        sum = sum + (int(str(n)[i]) ** 2)\n    return sum\ndef sum_digits_squares_even(n):\n    '''\n    Write a python function to sum all digits squares of an even integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        if i % 2 == 0:\n            sum = sum + (int(str(n)[i]) ** 2)\n    return sum\ndef sum_digits_squares_odd(n):\n    '''\n    Write a python function to sum all digits squares of an odd integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        if i % 2!= 0:\n            sum = sum + (int(str(n)[i]) ** 2)\n    return sum\ndef sum_digits_squares_pandigital(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_even(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital even integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_odd(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital odd integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_even_odd(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital even odd integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_odd_even(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital odd even integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_odd_even_even(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital odd even even integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_odd_even_odd(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital odd even odd integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for ",
        "num_ids": 32
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for num in nums:\n        hq.heappush(h,num)\n    for i in range(len(h)-n,len(h)):\n        hq.heappop(h)\n    return h\n",
        "num_ids": 61
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_second_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_third_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_fourth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_fifth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_sixth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_seventh_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_eighth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_ninth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_tenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_eleventh_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_twelveth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_thirteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_fourteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_fifteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_sixteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_seventeenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_eighteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_nineteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a give",
        "num_ids": 15
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #create a list of heapq with decreasing order of numbers\n    l = []\n    for i in range(n):\n        hq.heappush(l,-nums[i])\n    return -l[0]\n",
        "num_ids": 54
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # nums = nums[:]\n    # nums.sort(reverse=True)\n    # nums = list(map(int,nums))\n    # n = len(nums)\n    # print(nums)\n    # hq.heapify(nums)\n    # print(nums)\n    # return nums[:n]\n    # print(nums)\n    # print(sorted(nums,reverse=True))\n    # return sorted(nums,reverse=True)[:n]\n    return hq.nlargest(n,nums)\n",
        "num_ids": 141
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    while len(nums) > n:\n        hq.heappop(nums)\n    lst = []\n    for i in nums:\n        lst.append(i)\n    return lst\n",
        "num_ids": 65
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # if there is only one number in the list, return that number\n    if len(nums) == 1:\n        return nums\n    heapq.heapify(nums)\n    nlargest = []\n    # nlargest.append(heapq.heappop(nums))\n    for i in range(n):\n        nlargest.append(heapq.heappop(nums))\n    return nlargest\n",
        "num_ids": 104
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]\n",
        "num_ids": 53
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a heap from nums list\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    # return n largest integers from the heap\n    return [hq.heappop(heap) for i in range(n)]\n",
        "num_ids": 71
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums,reverse=True)[:n]\n",
        "num_ids": 17
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n",
        "num_ids": 34
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x==0):\n        return False\n    else:\n        while(x):\n            x = x//2\n            print(x)\n        return True\n",
        "num_ids": 41
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        x &= x-1\n    return x==0\n    \nprint(is_Power_Of_Two(int(input(\"Enter a number: \"))))\n",
        "num_ids": 44
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    while x>0: \n        if x % 2!= 0: \n            return False\n        x = x/2\n    return True \n",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if x & (x-1) == 0:\n        return True\n    return False\n    \n    '''\n    Write a python function to check whether a number is power of two or not.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & 1 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Converting a number in to binary and then comparing it\n    return x == 2**(len(bin(x)) - 2)\n    ",
        "num_ids": 34
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        n = 1\n        while(n <= x):\n            if(n!= x):\n                n = 2*n\n            else:\n                print(\"yes\")\n                return 1\n        else:\n            print(\"no\")\n            return 0\n    else:\n        print(\"noo\")\n        return 0\n    \ndef is_Power_Of_Two_2(x):\n    if x>0:\n        while(x>1):\n            x = x//2\n        if x == 1:\n            print(\"yes\")\n            return 1\n        else:\n            print(\"no\")\n            return 0\n    else:\n        print(\"noo\")\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2008
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # If a number is a power of two then it has one bit set to 1\n    return x > 0 and (x & (x-1)) == 0\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_string = text.split()\n    all_str = []\n    for i in range(0, len(list_string)):\n        if len(list_string[i]) >= 4:\n            all_str.append(list_string[i])\n    return all_str\n",
        "num_ids": 69
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r\"[\\w']+|[.,!?;]\", text)\n    print(words)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    print(result)\n",
        "num_ids": 68
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    lst = re.findall('[a-zA-Z]+', text)\n    lst = list(filter(lambda x: len(x)>3, lst))\n    return lst\n",
        "num_ids": 52
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l=[]\n    for i in text.split():\n        if len(i)>=4:\n            l.append(i)\n    return l\ndef find_long(text):\n    '''\n    Write a function that takes in a sentence and returns the number of words in the sentence that are longer than 4 characters.\n",
        "num_ids": 28
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    results = []\n    for item in re.findall(\"[a-zA-Z]+\",text):\n        if len(item) >= 4:\n            results.append(item)\n            \n    return results\n        \n    \n    \n",
        "num_ids": 60
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [x for x in re.split(r'\\W+',text) if len(x) >= 4]\n",
        "num_ids": 30
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_of_words = text.split()\n    long_words = []\n    for word in list_of_words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 58
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r\"[\\w']+\"\n    pattern2 = r\"[\\w']+\"\n    pattern3 = r\"[\\w']+|\"\n    pattern4 = r\"[\\w']+|\"\n    pattern5 = r\"[\\w']+|\"\n    pattern6 = r\"[\\w']+|\"\n    pattern7 = r\"[\\w']+|\"\n    pattern8 = r\"[\\w']+|\"\n    pattern9 = r\"[\\w']+|\"\n    pattern10 = r\"[\\w']+|\"\n    pattern11 = r\"[\\w']+|\"\n    pattern12 = r\"[\\w']+|\"\n    pattern13 = r\"[\\w']+|\"\n    pattern14 = r\"[\\w']+|\"\n    pattern15 = r\"[\\w']+|\"\n    pattern16 = r\"[\\w']+|\"\n    pattern17 = r\"[\\w']+|\"\n    pattern18 = r\"[\\w']+|\"\n    pattern19 = r\"[\\w']+|\"\n    pattern20 = r\"[\\w']+|\"\n    pattern21 = r\"[\\w']+|\"\n    pattern22 = r\"[\\w']+|\"\n    pattern23 = r\"[\\w']+|\"\n    pattern24 = r\"[\\w']+|\"\n    pattern25 = r\"[\\w']+|\"\n    pattern26 = r\"[\\w']+|\"\n    pattern27 = r\"[\\w']+|\"\n    pattern28 = r\"[\\w']+|\"\n    pattern29 = r\"[\\w']+|\"\n    pattern30 = r\"[\\w']+|\"\n    pattern31 = r\"[\\w']+|\"\n    pattern32 = r\"[\\w']+|\"\n    pattern33 = r\"[\\w']+|\"\n    pattern34 = r\"[\\w']+|\"\n    pattern35 = r\"[\\w']+|\"\n    pattern36 = r\"[\\w']+|\"\n    pattern37 = r\"[\\w']+|\"\n    pattern38 = r\"[\\w']+|\"\n    pattern39 = r\"[\\w']+|\"\n    pattern40 = r\"[\\w']+|\"\n    pattern41 = r\"[\\w']+|\"\n    pattern42 = r\"[\\w']+|\"\n    pattern43 = r\"[\\w']+|\"\n    pattern44 = r\"[\\w']+|\"\n    pattern45 = r\"[\\w']+|\"\n    pattern46 = r\"[\\w']+|\"\n    pattern47 = r\"[\\w']+|\"\n    pattern48 = r\"[\\w']+|\"\n    pattern49 = r\"[\\w']+|\"\n    pattern50 = r\"[\\w']+|\"\n    pattern51 = r\"[\\w']+|\"\n    pattern52 = r\"[\\w']+|\"\n    pattern53 = r\"[\\w']+|\"\n    pattern54 = r\"[\\w']+|\"\n    pattern55 = r\"[\\w']+|\"\n    pattern56 = r\"[\\w']+|\"\n    pattern57 = r\"[\\w']+|\"\n    pattern58 = r\"[\\w']+|\"\n    pattern59 = r\"[\\w']+|\"\n    pattern60 = r\"[\\w']+|\"\n    pattern61 = r\"[\\w']+|\"\n    pattern62 = r\"[\\w']+|\"\n    pattern63 = r\"[\\w']+|\"\n    pattern64 = r\"[\\w']+|\"\n    pattern65 = r\"[\\w']+|\"\n    pattern66 = r\"[\\w']+|\"\n    pattern67 = r\"[\\w']+|\"\n    pattern68 = r\"[\\w']+|\"\n    pattern69 = r\"[\\w']+|\"\n    pattern70 = r\"[\\w']+|\"\n    pattern71 = r\"[\\w']+|\"\n    pattern72 = r\"[\\w']+|\"\n    pattern73 = r\"[\\w']+|\"\n    pattern74 = r\"[\\w']+|\"\n    pattern75 = r\"[\\w']+|\"\n    pattern76 = r\"[\\w']+|\"\n    pattern77 = r\"[\\w']+|\"\n    pattern78 = r\"[\\w']+|\"\n    pattern79 = r\"[\\w']+|\"\n    pattern80 = r\"[\\w']+|\"\n    pattern81 = r\"[\\w']+|\"\n    pattern82 = r\"[\\w']+|\"\n    pattern83 = r\"[\\w']+|\"\n    pattern84 = r\"[\\w']+|\"\n    pattern85 = r\"[\\w']+|\"\n    pattern86 = r\"[\\w']+|\"\n    pattern87 = r\"[\\w']+|\"\n    pattern88 = r\"[\\w']+|\"\n    pattern89 = r\"[\\w']+|\"\n    pattern90 = r\"[\\w']+|\"\n    pattern91 = r\"[\\w']+|\"\n    pattern92 = r\"[\\w']+|\"\n    pattern93 = r\"[\\w']+|\"\n    pattern94 = r\"[\\w']+|\"\n    pattern95 = r\"[\\w']+|\"\n    pattern96 = r\"[\\w']+|\"\n    pattern97 = r\"[\\w']+|\"\n    pattern98 = r\"[\\w']+|\"\n    pattern99 = r\"[\\w']+|\"\n    pattern100 = r\"[\\w']+|\"\n    pattern101 = r\"[\\w']+|\"\n    pattern102 = r\"[\\w']+|\"\n    pattern103 = r\"[\\w']+|\"\n    pattern104 = r\"[\\w']+|\"\n    pattern105 = r\"[\\w']+|\"\n    pattern106 = r\"[\\w']+|\"\n    pattern107 = r\"[\\w']+|\"\n    pattern108 = r\"[\\w']+|\"\n    pattern109 = r\"[\\w']+|\"\n    pattern110 = r\"[\\w']+|\"\n    pattern111 = r\"[\\w']+|\"\n    pattern112 = r\"[\\w']+|\"\n    pattern113 = r\"[\\w']+|\"\n    pattern114 = r\"[\\w']+|\"\n    pattern115 = r\"[\\w']+|\"\n    pattern116 = r\"[\\w']+|\"\n    pattern117 = r\"[\\w']+|\"\n    pattern118 = r\"[\\w']+|\"\n    pattern119 = r\"[\\w']+|\"\n    pattern120 = r\"[\\w']+|\"\n    pattern121 = r\"[\\w']+|\"\n    pattern122 = r\"[\\w']+|\"\n    pattern123 = r\"[\\w']+|\"\n    pattern124 = r\"[\\w']+|\"\n    pattern125 = r\"[\\w']+|\"\n    pattern126 = r\"[\\w']+|\"\n    pattern127 = r\"[\\w']+|\"\n    pattern128 = r\"[\\w']+|\"\n    pattern129 = r\"[\\w']+|\"\n    pattern130 = r\"[\\w']+|\"\n    pattern131 = r\"[\\w']+|\"\n    pattern132 = r\"[\\w']+|\"\n    pattern133 = r\"[\\w']+|\"\n    pattern134 = r\"[\\w']+|\"\n    pattern135 = r\"[\\w']+|\"\n    pattern136 = r\"[\\w']+|\"\n    pattern137 = r\"[\\w']+|\"\n    pattern138 = r\"[\\w']+|\"\n    pattern139 = r\"[\\w']+|\"\n    pattern140 = r\"[\\w']+|\"\n    pattern141 = r\"[\\w']+|\"\n    pattern142 = r\"[\\w']+|\"\n    pattern143 = r\"[\\w']+|\"\n    pattern144 = r\"[\\w']+|\"\n    pattern145 = r\"[\\w']+|\"\n    pattern146 = r\"[\\w']+|\"\n    pattern147 = r\"[\\w']+|\"\n    pattern148 = r\"[\\w']+|\"\n    pattern149 = r\"[\\w']+|\"\n    pattern150 = r\"[\\w']+|\"\n    pattern151 = r\"[\\w']+|\"\n    pattern152 = r\"[\\w']+|\"\n    pattern153 = r\"[\\w']+|\"\n    pattern154 = r\"[\\w']+|\"\n    pattern155 = r\"[\\",
        "num_ids": 2008
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text=text.strip()\n    result_set=set()\n    word_list=text.split()\n    for word in word_list:\n        if len(word)>=4:\n            result_set.add(word)\n    return result_set\n",
        "num_ids": 64
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_of_words = re.findall(r'\\w{4,}',text)\n    return list_of_words\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i**2)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n    \nprint(square_nums([2, 3, 4, -2]))\n",
        "num_ids": 51
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**2)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for n in nums:\n        squares.append(n*n)\n",
        "num_ids": 27
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n**2)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if given string is empty\n    if len(str) == 0: \n        return 0\n    # iterate through the string and count the number of times 'a' is occuring\n    count = 0\n    for i in range(0, len(str)): \n        if str[i] == 'a': \n            count += 1\n    # return the minimum number of rotations to make the string equal to itself\n    return min(len(str), count)\n    \ndef find_Rotations_Optimal(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if given string is empty\n    if len(str) == 0: \n        return 0\n    # define count as 0 and length of string as 1\n    count = 0\n    length = 1\n    # iterate through the string\n    for i in range(0, len(str)): \n        # if char is different then increment count \n        if str[i]!= str[length - 1]: \n            count += 1\n        # else increment length and set count back to 0\n        else: \n            length += 1\n            count = 0\n    # return the minimum number of rotations to make the string equal to itself\n    return min(len(str), count)\n    \ndef find_Rotations_optimal(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if given string is empty\n    if len(str) == 0: \n        return 0\n    # define count as 0 and length of string as 1\n    count = 0\n    length = 1\n    # iterate through the string\n    for i in range(0, len(str)): \n        # if char is different then increment count \n        if str[i]!= str[length - 1]: \n            count += 1\n        # else increment length and set count back to 0\n        else: \n            length += 1\n            count = 0\n    # return the minimum number of rotations to make the string equal to itself\n    return min(len(str), count)\n",
        "num_ids": 159
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #print str\n    s_len = len(str)\n    #print s_len\n    s = str\n    #print s\n    d = dict()\n    #print d\n    d[s[0]] = 0\n    #print d\n    for i in range(1, s_len):\n        #print i\n        if(s[i] in d):\n            #print s[i]\n            d[s[i]] = d[s[i]] + 1\n        else:\n            d[s[i]] = 1\n        #print d\n    print d\n    return d\n    \nif __name__ == '__main__': \n    str = raw_input()\n    min_rot = find_Rotations(str)\n    #print min_rot\n    l = min_rot.keys()\n    #print l\n    l = sorted(l)\n    #print l\n    n = l[0]\n    #print n\n    n = int(n)\n    #print n\n    for i in range(1, len(l)):\n        n = n*(n+1)/2\n        #print n\n    print int(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2004
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # base case: if str is empty\n    if len(str) == 0:\n        return 0\n    # create a mapping of characters with their ascii codes\n    str_map = {}\n    for i in range(len(str)):\n        str_map[str[i]] = i\n    # print(\"str_map\", str_map)\n    # create a list of the characters in str\n    str_list = list(str)\n    # print(\"str_list\", str_list)\n    \n    # create a sorted list of characters in str_list\n    str_list.sort()\n    # print(\"sorted_str\", str_list)\n    \n    # create a list of the ascii codes of the characters in sorted_str\n    ascii_list = []\n    for i in range(len(str_list)):\n        ascii_list.append(ord(str_list[i]))\n    # print(\"ascii_list\", ascii_list)\n    \n    # create a dictionary with the ascii codes as keys and the corresponding characters as values\n    ascii_dict = {}\n    for i in range(len(ascii_list)):\n        ascii_dict[ascii_list[i]] = str_list[i]\n    # print(\"ascii_dict\", ascii_dict)\n    \n    # create a list of the characters in str_list that are not in ascii_list\n    diff_str = list(set(str_list) - set(ascii_list))\n    # print(\"diff_str\", diff_str)\n    \n    # create a list of the ascii codes of the characters in diff_str\n    diff_ascii = []\n    for i in range(len(diff_str)):\n        diff_ascii.append(ord(diff_str[i]))\n    # print(\"diff_ascii\", diff_ascii)\n    \n    # create a dictionary with the ascii codes as keys and the corresponding characters as values\n    diff_ascii_dict = {}\n    for i in range(len(diff_ascii)):\n        diff_ascii_dict[diff_ascii[i]] = diff_str[i]\n    # print(\"diff_ascii_dict\", diff_ascii_dict)\n    \n    # create a list of all the characters in str_list that are not in diff_str\n    diff_list = list(set(str_list) - set(diff_str))\n    # print(\"diff_list\", diff_list)\n    \n    # create a dictionary with the ascii codes as keys and the corresponding characters as values\n    diff_list_dict = {}\n    for i in range(len(diff_list)):\n        diff_list_dict[diff_list[i]] = diff_list[i]\n    # print(\"diff_list_dict\", diff_list_dict)\n    \n    # create a list of all the characters in diff_list that are not in diff_str\n    diff_dict = {}\n    for i in range(len(diff_list)):\n        diff_dict[diff_list[i]] = diff_list[i]\n    # print(\"diff_dict\", diff_dict)\n    \n    # create a dictionary with the ascii codes of the characters in diff_dict as keys and the corresponding characters as values\n    diff_dict_ascii = {}\n    for i in range(len(diff_dict)):\n        diff_dict_ascii[diff_dict[diff_dict.keys()[i]]] = diff_dict.keys()[i]\n    # print(\"diff_dict_ascii\", diff_dict_ascii)\n    \n    # create a list of the characters in diff_dict that are not in diff_list\n    diff_diff_list = list(set(diff_dict.values()) - set(diff_list))\n    # print(\"diff_diff_list\", diff_diff_list)\n    \n    # create a dictionary with the ascii codes of the characters in diff_diff_list as keys and the corresponding characters as values\n    diff_diff_list_ascii = {}\n    for i in range(len(diff_diff_list)):\n        diff_diff_list_ascii[diff_diff_list[i]] = diff_diff_list[i]\n    # print(\"diff_diff_list_ascii\", diff_diff_list_ascii)\n    \n    # create a list of all the characters in diff_diff_list that are not in diff_dict\n    diff_diff_dict = {}\n    for i in range(len(diff_diff_list)):\n        diff_diff_dict[diff_diff_list[i]] = diff_diff_list[i]\n    # print(\"diff_diff_dict\", diff_diff_dict)\n    \n    # create a dictionary with the ascii codes of the characters in diff_diff_dict as keys and the corresponding characters as values\n    diff_diff_dict_ascii = {}\n    for i in range(len(diff_diff_dict)):\n        diff_diff_dict_ascii[diff_diff_dict[diff_diff_dict.keys()[i]]] = diff_diff_dict.keys()[i]\n    # print(\"diff_diff_dict_ascii\", diff_diff_dict_ascii)\n    \n    # create a list of all the characters in diff_diff_dict that are not in diff_diff_list\n    diff_diff_diff_list = list(set(diff_diff_dict.values()) - set(diff_diff_list))\n    # print(\"diff_diff_diff_list\", diff_diff_diff_list)\n    \n    # create a dictionary with the ascii codes of the characters in diff_diff_diff_list as keys and the corresponding characters as values\n    diff_diff_diff_list_ascii = {}\n    for i in range(len(diff_diff_diff_list)):\n        diff_diff_diff_list_ascii[diff_diff_diff_list[i]] = diff_diff_diff_list[i]\n    # print(\"diff_diff_diff_list_ascii\", diff_diff_diff_list_ascii)\n    \n    # create a dictionary with the ascii codes of the characters in diff_list_dict as keys and the corresponding characters as values\n    diff_list_dict_ascii = {}\n    for i in range(len(diff_list_dict)):\n        diff_list_dict_ascii[diff_list_dict[diff_list_dict.keys()[i]]] = diff_list_dict.keys()[i]\n    # print(\"diff_list_dict_ascii\", diff_list_dict_ascii)\n    \n    # create a list of all the characters in diff_list_dict that are not in diff_list\n    diff_list_dict_diff_list = list(set(diff_list_dict.values()) - set(diff_list))\n    # print(\"diff_list_dict_diff_list\", diff_list_dict_diff_list)\n    \n    # create a dictionary with the ascii codes of the characters in diff_list_dict_diff_list as keys and the corresponding characters as values\n    diff_list_dict_diff_list_ascii = {}\n    for i in range(len(diff_list_dict_diff_list)):\n        diff_list_dict_diff_list_ascii[diff_list_dict_diff_list[i]] = diff_list_dict_diff_list[i]\n    # print(\"diff_list_dict_diff_list_ascii\", diff_list_dict_diff_list_ascii)\n    \n    # create a list of all the characters in diff_list_dict_diff_list that are not in diff_list_dict\n    diff_list_dict_diff_dict = {}\n    for i in range(len(diff_list_dict_diff_list)):\n        diff_list_dict_diff_dict[diff_list_dict_diff_list[i]] = diff_list_dict_diff_list[i]\n    # print(\"diff_list_dict_diff_dict\", diff_list_dict_diff_dict)\n    \n    # create a dictionary with the ascii codes of the characters in diff_list_dict_diff_dict as keys and the corresponding characters as values\n    dif",
        "num_ids": 2006
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    hash_dict = {}\n    for i in range(len(str)):\n        if str[i] in hash_dict:\n            hash_dict[str[i]] += 1\n        else:\n            hash_dict[str[i]] = 1\n    rotations = 0\n    for value in hash_dict.values():\n        if value > 1:\n            rotations += (value - 1)\n    print(rotations)\n    \n    \ndef find_Rotations_using_list(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    hash_dict = {}\n    for i in range(len(str)):\n        if str[i] in hash_dict:\n            hash_dict[str[i]] += 1\n        else:\n            hash_dict[str[i]] = 1\n    rotations = 0\n    for value in hash_dict.values():\n        if value > 1:\n            rotations += (value - 1)\n    print(rotations)\n    \n    \nfind_Rotations(\"ABAB\")\nfind_Rotations(\"CABBA\")\nfind_Rotations(\"CBABA\")\nfind_Rotations_using_list(\"CABBA\")\n",
        "num_ids": 150
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str.lower()\n    new_str = \"\"\n    count = 0\n    for i in str:\n        count += 1\n        new_str = i + new_str\n    \n    count_new = 0\n    for i in str:\n        count_new += 1\n        if i in new_str:\n            continue\n        else:\n            break\n    if count_new == count:\n        return count \n    else:\n        return count_new \n        ",
        "num_ids": 113
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    \n    c_count = 0\n    if str[0] == str[-1]:\n        c_count = 1\n    else:\n        for i in range(1, len(str)):\n            if str[0] == str[i] and str[i] == str[-1]:\n                c_count += 1\n            else:\n                break\n",
        "num_ids": 100
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # print(str)\n    if len(str)==1:\n        return 0\n    if len(str)==2:\n        if str[0]==str[1]:\n            return 0\n        else:\n            return 1\n    if len(str)==3:\n        if str[0]==str[1] and str[0]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\n    if len(str)>3:\n        if str[0]==str[1] and str[1]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[0]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[1]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[0]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\ndef find_mirrors(str):\n    '''\n    Write a python function to find the mirror permutations of a string.\n    '''\n    if len(str)==1:\n        return str\n    if len(str)==2:\n        return str[0] + str[0] + str[1] + str[1] + str[0] + str[1]\n    if len(str)>2:\n        return str[0] + str[0] + str[1] + str[1] + str[2] + str[2] + str[1] + str[0] + str[0] + str[0] + str[1] + str[2] + str[0] + str[2] + str[1] + str[2]\ndef find_reversed(str):\n    '''\n    Write a python function to check if the given string is a reversed string or not.\n    '''\n    # print(str)\n    if str==str[::-1]:\n        return 1\n    else:\n        return 0\ndef find_rotations_first(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # print(str)\n    if len(str)==1:\n        return 0\n    if len(str)==2:\n        if str[0]==str[1]:\n            return 0\n        else:\n            return 1\n    if len(str)==3:\n        if str[0]==str[1] and str[0]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\n    if len(str)>3:\n        if str[0]==str[1] and str[1]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[0]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[1]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[0]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\ndef find_mirrors_first(str):\n    '''\n    Write a python function to find the mirror permutations of a string.\n    '''\n    if len(str)==1:\n        return str\n    if len(str)==2:\n        return str[0] + str[0] + str[1] + str[1] + str[0] + str[1]\n    if len(str)>2:\n        return str[0] + str[0] + str[1] + str[1] + str[2] + str[2] + str[1] + str[0] + str[0] + str[0] + str[1] + str[2] + str[0] + str[2] + str[1] + str[2]\ndef find_reversed_first(str):\n    '''\n    Write a python function to check if the given string is a reversed string or not.\n    '''\n    if str==str[::-1]:\n        return 1\n    else:\n        return 0\ndef find_rotations_second(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # print(str)\n    if len(str)==1:\n        return 0\n    if len(str)==2:\n        if str[0]==str[1]:\n            return 0\n        else:\n            return 1\n    if len(str)==3:\n        if str[0]==str[1] and str[0]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\n    if len(str)>3:\n        if str[0]==str[1] and str[1]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[0]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[1]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[0]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\ndef find_mirrors_second(str):\n    '''\n    Write a python function to find the mirror permutations of a string.\n    '''\n    if len(str)==1:\n        return str\n    if len(str)==2:\n        return str[0] + str[0] + str[1] + str[1] + str[0] + str[1]\n    if len(str)>2:\n        return str[0] + str[0] + str[1] + str[1] + str[2] + str[2] + str[1] + str[0] + str[0] + str[0] + str[1] + str[2] + str[0] + str[2] + str[1] + st",
        "num_ids": 146
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Get the size of the string\n    n = len(str)\n    #Initialize count as 0\n    count = 0\n    #The array for storing the index of characters\n    ind = [0]*n\n    #The array for storing the count of characters\n    cnt = [0]*n\n    #The array for storing the count of pairs of characters\n    p = [0]*n\n    #Sorting the string in decreasing order\n    for i in range(0,n):\n        ind[i] = i\n        cnt[i] = 1\n    #Sort the string in increasing order\n    for i in range(0,n):\n        for j in range(0,n):\n            if(str[ind[j]] > str[ind[i]]):\n                ind[i] = ind[j]\n                cnt[i] = cnt[j]+1\n    #Find the minimum number of rotations\n    for i in range(0,n):\n        p[ind[i]] = cnt[i]\n    for i in range(0,n):\n        if(p[ind[i]] == 1):\n            count+=1\n        else:\n            count+=p[ind[i]]\n    return count\n",
        "num_ids": 289
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    import collections\n    q = collections.deque()\n    q.append(str)\n    visited = set()\n    while q:\n        s = q.popleft()\n        if s in visited:\n            continue\n        if len(s) == len(str):\n            return 0\n        visited.add(s)\n        for i in range(len(s)):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                if s[i] == c:\n                    continue\n                q.append(s[:i] + c + s[i+1:])\n    return -1\n",
        "num_ids": 152
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i] == ch:\n            i += 1\n        if i > 0 and s[i-1] == ch:\n            i += 1\n        if i < n and s[i] == ch:\n            i += 1\n    i -= 1\n    if i >= 0:\n        s = s[0:i] + s[i+1:]\n    return s\n",
        "num_ids": 110
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = s.find(ch)\n    s = s.replace(s[occ:(occ+1)], \"\")\n    s = s.replace(s[:occ], \"\")\n    return s\n",
        "num_ids": 50
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_string=s.replace(ch,\"\")\n    return new_string\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef remove_inbetween(s,ch): \n    '''\n    Write a python function to remove all occurrences of a given character from the string, starting from 1st occurrence and ending at last occurrence.\n    '''\n    new_string=\"\"\n    count=0\n    for i in range(0,len(s)):\n        if s[i]==ch:\n            count+=1\n        else:\n            new_string+=s[i-count:i+1]\n    return new_string\n    \n    \n    \n    \n    \n    \ndef replace_all(s,old,new): \n    '''\n    Write a python function to replace all occurrences of a given character in the string with another character.\n    '''\n    new_string=\"\"\n    for i in range(0,len(s)):\n        if s[i]==old:\n            new_string+=new\n        else:\n            new_string+=s[i]\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef string_compression(s): \n    '''\n    Write a python function to check whether a string can be compressed using any of the following strategies.\n    1. Remove adjacent duplicate characters.\n    2. If a string contains only 2 or more occurrences of a character, replace it with the number of times the character appears in the string.\n    3. If a character appears only once, remove it.\n    '''\n    new_string=\"\"\n    count=0\n    for i in range(0,len(s)):\n        if s[i] not in new_string:\n            new_string+=s[i]\n        else:\n            count+=1\n    if len(s)==count:\n        return \"Not Possible\"\n    else:\n        return len(new_string)\n    \n    \n    \n    \n    \n    \n    \ndef remove_duplicate(s): \n    '''\n    Write a python function to remove duplicate characters from a given string.\n    '''\n    new_string=\"\"\n    seen=set()\n    for i in range(0,len(s)):\n        if s[i] not in seen:\n            seen.add(s[i])\n            new_string+=s[i]\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef string_split(s,delimiter): \n    '''\n    Write a python function to split a given string based on a given delimiter.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        if s[i]==delimiter:\n            new_string+=\"\\n\"\n        else:\n            new_string+=s[i]\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef sum_square_diff(a,b,c): \n    '''\n    Write a python function to find the sum of the squares of the first N natural numbers, and the difference between the sum of the squares and the square of the sum.\n    '''\n    total_sum=0\n    total_sum_squared=0\n    total_sum_diff=0\n    for i in range(0,a+1):\n        total_sum+=i\n        total_sum_squared=total_sum**2\n    \n    for j in range(0,b+1):\n        total_sum_diff=total_sum_squared-j**2\n    return total_sum_diff\n    \n    \n    \n    \n    \n    \n    \ndef number_of_occurrence(s,ch): \n    '''\n    Write a python function to count the number of occurrences of a given character in a given string.\n    '''\n    count=0\n    for i in range(0,len(s)):\n        if s[i]==ch:\n            count+=1\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef string_first_and_last(s): \n    '''\n    Write a python function to find the first and last occurrence of a character in a given string.\n    '''\n    for i in range(0,len(s)):\n        if s[i]==\"a\":\n            print(\"First occurrence of letter 'a' is at index\",i)\n        if s[i]==\"z\":\n            print(\"Last occurrence of letter 'z' is at index\",i)\n    \n    \n    \n    \n    \n    \ndef string_reverse(s): \n    '''\n    Write a python function to reverse a given string.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        new_string=s[l-1-i]+new_string\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef string_rotation(s1,s2): \n    '''\n    Write a python function to check whether a string is a rotation of another string.\n    '''\n    new_string1=\"\"\n    l1=len(s1)\n    new_string2=\"\"\n    l2=len(s2)\n    for i in range(0,l1):\n        new_string1+=s1[l1-1-i]\n    for j in range(0,l2):\n        new_string2+=s2[l2-1-j]\n    if new_string1==new_string2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    \n    \n    \n    \ndef string_palindrome(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        new_string+=s[i]\n    new_string=new_string[::-1]\n    if new_string==s:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    \n    \n    \n    \ndef string_rotation_with_swap(s): \n    '''\n    Write a python function to find the first index where a string is not a rotation of another string.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        new_string+=s[i]\n    for j in range(0,l):\n        new_string+=s[j]\n    if new_string==s:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    \n    \n    \n    \n    \n    \n    \ndef merge_intervals(arr): \n    '''\n    Write a python function to merge all overlapping intervals.\n    '''\n    new_list=[]\n    for i in range(0,len(arr)):\n        if i==0:\n            new_list.append(arr[i])\n        else:\n            if arr[i][0]<=new_list[len(new_list)-1][1]:\n                if arr[i][1]>=new_list[len(new_list)-1][1]:\n                    new_list[len(new_list)-1]=[new_list[len(new_list)-1][0],arr[i][1]]\n                else:\n                    new_list[len(new_list)-1][1]=arr[i][1]\n            else:\n                new_list.append(arr[i])\n    return new_list\n    \n    \n    \n    \n    \n    \ndef integer_to_roman(num): \n    '''\n    Write a python function to convert a given integer to its equivalent roman numerals representation.\n    '''\n    if num==1:\n        return \"I\"\n    if num==2:\n        return \"II\"\n    if num==3:\n        return \"III\"\n    if num==4:\n        return \"IV\"\n    if num==5:\n        return \"V\"\n    if num==6:\n        return \"VI\"\n    if num==7:\n        return \"VII\"\n    if num==8:\n        return \"VIII\"\n    if num==9:\n        return \"IX\"\n    if num==10:\n        retur",
        "num_ids": 130
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'')\n",
        "num_ids": 19
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    ",
        "num_ids": 13
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if(s==''):\n        return s\n    if(s[0]==ch):\n        if(s[0]==s[-1]):\n            return ''\n        return s[1:-1]\n    return s[1:-1]\n",
        "num_ids": 62
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s\n",
        "num_ids": 17
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if (s.count(ch)==2):\n        #print(\"case 1\")\n        s=s.replace(ch,\"\",1)\n        s=s.replace(ch,\"\",1)\n        return s\n    else:\n        #print(\"case 2\")\n        return s.replace(ch,\"\")\ndef check_Occ(s):\n    #print(s)\n    if (\"hello\" in s):\n        return False\n    else:\n        return True\ndef check_solution(s,ch):\n    if (s.count(ch)==2):\n        #print(\"case 1\")\n        return True\n    else:\n        #print(\"case 2\")\n        return False\ndef solve(s):\n    #print(s)\n    while(check_Occ(s)==False):\n        s=remove_Occ(s,s[0])\n        s=remove_Occ(s,s[-1])\n    if (check_solution(s,s[0])):\n        return True\n    else:\n        return False\n",
        "num_ids": 246
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,\"\")\n    s = s.replace(ch+ch,\"\")\n    return s\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, cols = len(M), len(M[0])\n    L = []\n    for i in range(cols):\n        for j in range(rows):\n            L.append(M[j][i])\n    L.sort()\n    for i in range(rows):\n        for j in range(cols):\n            M[i][j] = L[i]\n",
        "num_ids": 93
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)-1):\n        for j in range(len(M)-1-i):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n",
        "num_ids": 76
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    M_result = []\n    \n    # Compute sums for each row\n    sums = [0] * N\n    for i in range(N):\n        for j in range(N):\n            sums[i] += M[i][j]\n    \n    # Sort\n    for i in range(N):\n        for j in range(i + 1, N):\n            if sums[i] > sums[j]:\n                sums[i], sums[j] = sums[j], sums[i]\n    \n    # Copy the sorted rows into the result\n    for i in range(N):\n        M_result.append([])\n        for j in range(N):\n            M_result[i].append(M[i][j])\n    \n    return M_result\n",
        "num_ids": 193
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M.sort(key=lambda x:sum(x))\n    for i in range(n):\n        M[i].sort()\n",
        "num_ids": 42
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x: x[0])\n    return M\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m=len(M)\n    n=len(M[0])\n    \n    for i in range(n):\n        for j in range(m):\n            if M[i][j]==0:\n                M[i][j]=0\n            else:\n                M[i][j]=M[i][j]+M[i-1][j]\n    for i in range(n):\n        for j in range(m):\n            if M[i][j]==0:\n                M[i][j]=0\n            else:\n                M[i][j]=M[i][j]+M[i][j-1]\n    \n    for i in range(m-1):\n        for j in range(n):\n            if M[i][j]==0:\n                M[i][j]=0\n            else:\n                M[i][j]=M[i][j]+M[i][j+1]\n    \n    for i in range(m-1):\n        for j in range(n-1):\n            if M[i][j]==0:\n                M[i][j]=0\n            else:\n                M[i][j]=M[i][j]+M[i+1][j]\n    \n    for i in range(m-1,0,-1):\n        for j in range(n-1):\n            if M[i][j]==0:\n                M[i][j]=0\n            else:\n                M[i][j]=M[i][j]+M[i][j+1]\n    \n    for i in range(m-1,0,-1):\n        for j in range(n-1):\n            if M[i][j]==0:\n                M[i][j]=0\n            else:\n                M[i][j]=M[i][j]+M[i-1][j]\n    \n    for i in range(n-1):\n        for j in range(m):\n            if M[i][j]==0:\n                M[i][j]=0\n            else:\n                M[i][j]=M[i][j]+M[i+1][j]\n    \n    for i in range(n-1,0,-1):\n        for j in range(m):\n            if M[i][j]==0:\n                M[i][j]=0\n            else:\n                M[i][j]=M[i][j]+M[i-1][j]\n    return M\n",
        "num_ids": 588
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_len = len(M)\n    col_len = len(M[0])\n",
        "num_ids": 24
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    mat = M\n    N = len(mat)\n    M = len(mat[0])\n    row_sums = [[0] * (M + 1) for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            row_sums[i][j] = row_sums[i][j] + mat[i][j]\n    # print(row_sums)\n    for i in range(N):\n        mat[i] = row_sums[i]\n    # print(mat)\n    return mat\n",
        "num_ids": 138
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m,n = len(M), len(M[0])\n    \n    if m == n == 1:\n        return M\n    \n    M_sorted = []\n    for i in range(n):\n        M_sorted.append(sorted(M[i]))\n    M_sorted = list(zip(*M_sorted))\n    \n    for i in range(n):\n        M[i] = M_sorted[i]\n    \n    return M\n",
        "num_ids": 116
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = np.array(M)\n    matrix = matrix.astype(int)\n    for i in range(len(matrix)):\n        rowsum = sum(matrix[i])\n        for j in range(len(matrix)):\n            if matrix[i][j] < rowsum:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\nM = [[3,2,5,4,7,6,1,8,9],[8,7,2,4,3,5,6,9,1],[5,4,6,7,1,3,9,8,2],[2,1,3,8,5,6,7,9,4]]\nprint(sort_matrix(M))\n",
        "num_ids": 194
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l*b*h)/2\n    return vol\nprint(find_Volume(6,4,3))\n",
        "num_ids": 31
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    x = l * h\n    y = l * b\n    z = l * h\n    volume = x * y * z\n    return volume\n",
        "num_ids": 36
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math \n    v = h*l*b \n    return v \n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    A = l*b*h\n    return A\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l*b*h)/3\n    return vol\n",
        "num_ids": 18
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*b)*h\n    return v\n    \n    \n    \n    \ndef find_Area(a,b,c) : \n    '''\n    Write a python function to find the surface area of a triangle.\n    '''\n    s = (a+b+c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return area\n    \n    \n    \ndef find_Perimeter(a,b,c) : \n    '''\n    Write a python function to find the perimeter of a triangle.\n    '''\n    p = (a+b+c)\n    return p\n    \n    \n    \ndef find_BMI(m,n):\n    '''\n    Write a python function to find the BMI of an individual.\n    '''\n    bmi = (m)/((n)/(n))**2\n    return bmi\n    \n    \n    \ndef find_compression(l,b,h):\n    '''\n    Write a python function to find the amount of a compressor's \n    compression after it has been fully used.\n    '''\n    comp = (l*b*h)/10\n    return comp\n    \n    \n    \n    \ndef find_fuel_consumption(fuel_type,liter_of_fuel):\n    '''\n    Write a python function to find the amount of fuel consumed in a day\n    for a given type of fuel.\n    '''\n    if fuel_type==\"petrol\":\n        fuel_consumption = liter_of_fuel*1.2\n    elif fuel_type==\"diesel\":\n        fuel_consumption = liter_of_fuel*3\n    else:\n        fuel_consumption = liter_of_fuel*2\n    return fuel_consumption\n    \n    \n    \ndef find_average(num):\n    '''\n    Write a python function to find the average of a list.\n    '''\n    avg = sum(num)/len(num)\n    return avg\n    \n    \n    \ndef find_sum(a,b,c):\n    '''\n    Write a python function to find the sum of three integers.\n    '''\n    sum = a+b+c\n    return sum\n    \n    \n    \ndef find_count_less_than_x(num,x):\n    '''\n    Write a python function to find the number of numbers less than x in a\n    list.\n    '''\n    count = 0\n    for i in num:\n        if i < x:\n            count += 1\n    return count\n    \n    \n    \ndef find_max(num):\n    '''\n    Write a python function to find the maximum value in a list.\n    '''\n    max = num[0]\n    for i in num:\n        if i > max:\n            max = i\n    return max\n    \n    \n    \ndef find_max_even_index(num):\n    '''\n    Write a python function to find the maximum even index of a list.\n    '''\n    max = num[0]\n    max_index = 0\n    for i in range(len(num)):\n        if num[i]%2 == 0 and num[i]>max:\n            max = num[i]\n            max_index = i\n    return max_index\n    \n    \n    \ndef find_count_odd(num):\n    '''\n    Write a python function to find the number of numbers in a list which are odd.\n    '''\n    count = 0\n    for i in num:\n        if i%2!= 0:\n            count += 1\n    return count\n    \n    \n    \ndef find_largest_number(num):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    max = num[0]\n    for i in num:\n        if i>max:\n            max = i\n    return max\n    \n    \n    \ndef find_reverse_list(num):\n    '''\n    Write a python function to reverse a list.\n    '''\n    num.reverse()\n    return num\n    \n    \n    \ndef find_sum_of_squares(num):\n    '''\n    Write a python function to find the sum of the squares of the elements of\n    a list.\n    '''\n    sum = 0\n    for i in num:\n        sum += i**2\n    return sum\n    \n    \n    \ndef find_odd_and_even(num):\n    '''\n    Write a python function to find the numbers which are odd and even in a\n    list.\n    '''\n    odd = []\n    even = []\n    for i in range(len(num)):\n        if num[i]%2!= 0:\n            odd.append(num[i])\n        else:\n            even.append(num[i])\n    return odd,even\n    \n    \n    \ndef find_divisors(num):\n    '''\n    Write a python function to find the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,num):\n        if num%i == 0:\n            divisors.append(i)\n    return divisors\n    \n    \n    \ndef find_in_word(word,char):\n    '''\n    Write a python function to find the index of a char in a word.\n    '''\n    i = 0\n    for i in range(len(word)):\n        if word[i] == char:\n            return i\n    return -1\n    \n    \n    \ndef find_count(string,char):\n    '''\n    Write a python function to find the number of times a character shows up\n    in a string.\n    '''\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n    \n    \n    \ndef find_count_of_char(string,char):\n    '''\n    Write a python function to find the number of times a character shows up\n    in a string.\n    '''\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n    \n    \n    \ndef find_char_frequency(string,char):\n    '''\n    Write a python function to find the frequency of a character in a string.\n    '''\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n    \n    \n    \ndef find_even_sum_odd_sum(num):\n    '''\n    Write a python function to find the sum of even numbers and sum of odd numbers.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for i in num:\n        if i%2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum, odd_sum\n    \n    \n    \ndef find_sum_of_first_n(num,n):\n    '''\n    Write a python function to find the sum of numbers from 1 to a given number.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n    \n    \n    \ndef find_sum_of_first_n_even(num,n):\n    '''\n    Write a python function to find the sum of numbers from 1 to a given number which are even.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            sum += i\n    return sum\n    \n    \n    \ndef find_sum_of_first_n_odd(num,n):\n    '''\n    Write a python function to find the sum of numbers from 1 to a given number which are odd.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2!= 0:\n            sum += i\n    return sum\n    \n    \n    \ndef find_sum_of_first_n_odd_even(num,n):\n    '''\n    Write a python function to find the sum of numbers from 1 to a given number which are odd and even.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2!= 0:\n            sum += i\n        if i%2 == 0:\n            sum += i\n    return sum\n    \n    \n    ",
        "num_ids": 56
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    return l*b*h\n",
        "num_ids": 34
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/6.0\n    return volume\n",
        "num_ids": 20
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print('Volume of the triangle is :'+ str(l*b*h/2)) \n",
        "num_ids": 25
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math \n    print('Calculating the volume of the triangle...')\n    v = (l * b * h) / 2\n    print('Volume of the triangle : ',v) \n    return v \n",
        "num_ids": 52
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s = text.split(\"_\")\n    if(s.count(\"\")>0):\n        return False\n    else:\n        return True\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # A regex to match lowercase underscore\n    pattern = re.compile(r'[a-z]+_')\n    # Compile the regex\n    result = pattern.search(text)\n    # If the regex matches, return true\n    return result!= None\n",
        "num_ids": 64
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"[a-z]+[A-Z]\", text):\n        return True\n    else:\n        return False\n    ",
        "num_ids": 35
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.search(r'[a-z]', text)\n",
        "num_ids": 20
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^a-z_]', '', text)\n    return len(text)\n",
        "num_ids": 39
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    x = re.search(r\"^[a-z]+_[a-z]+$\",text)\n    if x:\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #return re.findall(\"[a-z]+_*[a-z]\",text)\n    return any(char.islower() for char in text)\n",
        "num_ids": 41
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    s=text.split('_')\n    return len(s)>0 and all([x.islower() for x in s])\n    #code here\ndef find_longest_word_in_string(text):\n    '''\n    Write a function to that returns the longest word in the given string.\n    '''\n    #code here\n    \n    words=text.split(' ')\n    return max([len(word) for word in words],key=len)\n",
        "num_ids": 37
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    text_string = str(text)\n    pattern = re.compile(r'\\b[a-z]+[a-z]+\\_+[a-z]+[a-z]+\\b')\n    return pattern.search(text_string) is not None\n",
        "num_ids": 67
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n    \ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    return a**2\n    \ndef square_size(a):\n    '''\n    Write a function that returns the square root of a given number\n    '''\n    return a**0.5\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    #\n    \n    \n    # YOUR CODE HERE\n    #\n    return 4*a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2013
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a*4\n    return(perimeter)\n",
        "num_ids": 17
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i]!= string[j]:\n                list.append(string[i])\n                break\n    return list\n    \ndef str_to_list1(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i]!= string[j]:\n                list.append(string[i])\n    return list\n",
        "num_ids": 58
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string)\n    for i in string:\n        if i in string_2:\n            string.remove(i)\n    return string\n",
        "num_ids": 38
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count = {}\n    output = []\n    \n    for i in range(len(string)):\n        if count.get(string[i]):\n            count[string[i]] += 1\n        else:\n            count[string[i]] = 1\n    \n    for i in range(len(string)):\n        if count.get(string[i]):\n            output.append(string[i])\n    \n    return output\n",
        "num_ids": 104
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    list1 = []\n    list2 = []\n    for i in range(no_of_chars):\n        list1.append('0')\n    for i in string:\n        list2.append(list1[ord(i)])\n    list3 = ''.join(list2)\n    return list3\n",
        "num_ids": 86
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # 1st approach\n    return [x for x in string if x not in string2]\n    # 2nd approach\n    # char_list = []\n    # for char in string:\n    #     if char not in string2:\n    #         char_list.append(char)\n    # return ''.join(char_list)\n    # 3rd approach\n    # return [x for x in string if x not in string2]\n",
        "num_ids": 104
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string == None:\n        return []\n    s = []\n    for x in string:\n        if x not in string[string.index(x)+1:]:\n            s.append(x)\n    return s\n",
        "num_ids": 54
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for i in range(len(string)-len(set(string))+1):\n        if set(string[i:i+len(string)]) == set(string):\n            res.append(string[i:i+len(string)])\n    return res\n    \ndef main():\n    print(str_to_list('geeksforgeeks'))\n    print(str_to_list('geeksfor'))\n    print(str_to_list('geeksogeeks'))\n",
        "num_ids": 123
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    x = string.split(\" \")\n    a = []\n    b = []\n    for i in x:\n        if i not in b:\n            b.append(i)\n    for i in b:\n        a.append(string.index(i))\n    \n    return a\n",
        "num_ids": 70
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string)\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i] not in string[i+1:]:\n            new_string = new_string + string[i]\n    return new_string\n",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    return char_list\n",
        "num_ids": 44
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(arraynums[i] == arraynums[i+1] for i in range(len(arraynums) - 1))\n",
        "num_ids": 36
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # O(n)\n    # for each element, see if any index has a value of the element it's looking for\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if arraynums[i] == arraynums[j] and i!= j:\n                return True\n    return False\n    \n",
        "num_ids": 90
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n",
        "num_ids": 9
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # from collections import Counter\n    # if len(arraynums) == 0:\n    #     return False\n    # nums = Counter(arraynums)\n    # return len(nums)!= len(arraynums)\n",
        "num_ids": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen_nums = []\n    for num in arraynums:\n        if num in seen_nums:\n            return True\n        else:\n            seen_nums.append(num)\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(x in arraynums for x in arraynums)\n",
        "num_ids": 19
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))",
        "num_ids": 19
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    '''\n    if arraynums.count(arraynums[0]) > 1:\n        return True\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i]) > 1:\n            return True\n    return False\n    '''\n    for i in range(len(arraynums)):\n        if arraynums[i] in arraynums[i+1:]:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    if len(arraynums) == 1:\n        return False\n    for i in range(len(arraynums)):\n        if arraynums[i] in arraynums[i+1:]:\n            return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 5 or x == 5.0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Base case: \n    if x == 1: \n        return True\n    elif x == 0: \n        return False\n    else:\n        # Check if x is divisible by 5 \n        if x % 5 == 0: \n            return False\n        else: \n            return is_woodall(x-1) or is_woodall(x+1)\n",
        "num_ids": 91
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if ( x == 29 ) or ( x == 30 ) or ( x == 31 ) or ( x == 32 ) or ( x == 33 ) or ( x == 34 ) or ( x == 35 ) or ( x == 36 ) or ( x == 37 ) or ( x == 38 ) or ( x == 39 ) or ( x == 40 ) or ( x == 41 ) or ( x == 42 ) or ( x == 43 ) or ( x == 44 ) or ( x == 45 ) or ( x == 46 ) or ( x == 47 ) or ( x == 48 ) or ( x == 49 ) or ( x == 50 ) or ( x == 51 ) or ( x == 52 ) or ( x == 53 ) or ( x == 54 ) or ( x == 55 ) or ( x == 56 ) or ( x == 57 ) or ( x == 58 ) or ( x == 59 ) or ( x == 60 ) or ( x == 61 ) or ( x == 62 ) or ( x == 63 ) or ( x == 64 ) or ( x == 65 ) or ( x == 66 ) or ( x == 67 ) or ( x == 68 ) or ( x == 69 ) or ( x == 70 ) or ( x == 71 ) or ( x == 72 ) or ( x == 73 ) or ( x == 74 ) or ( x == 75 ) or ( x == 76 ) or ( x == 77 ) or ( x == 78 ) or ( x == 79 ) or ( x == 80 ) or ( x == 81 ) or ( x == 82 ) or ( x == 83 ) or ( x == 84 ) or ( x == 85 ) or ( x == 86 ) or ( x == 87 ) or ( x == 88 ) or ( x == 89 ) or ( x == 90 ) or ( x == 91 ) or ( x == 92 ) or ( x == 93 ) or ( x == 94 ) or ( x == 95 ) or ( x == 96 ) or ( x == 97 ) or ( x == 98 ) or ( x == 99 ) or ( x == 100 ) or ( x == 101 ) or ( x == 102 ) or ( x == 103 ) or ( x == 104 ) or ( x == 105 ) or ( x == 106 ) or ( x == 107 ) or ( x == 108 ) or ( x == 109 ) or ( x == 110 ) or ( x == 111 ) or ( x == 112 ) or ( x == 113 ) or ( x == 114 ) or ( x == 115 ) or ( x == 116 ) or ( x == 117 ) or ( x == 118 ) or ( x == 119 ) or ( x == 120 ) or ( x == 121 ) or ( x == 122 ) or ( x == 123 ) or ( x == 124 ) or ( x == 125 ) or ( x == 126 ) or ( x == 127 ) or ( x == 128 ) or ( x == 129 ) or ( x == 130 ) or ( x == 131 ) or ( x == 132 ) or ( x == 133 ) or ( x == 134 ) or ( x == 135 ) or ( x == 136 ) or ( x == 137 ) or ( x == 138 ) or ( x == 139 ) or ( x == 140 ) or ( x == 141 ) or ( x == 142 ) or ( x == 143 ) or ( x == 144 ) or ( x == 145 ) or ( x == 146 ) or ( x == 147 ) or ( x == 148 ) or ( x == 149 ) or ( x == 150 ) or ( x == 151 ) or ( x == 152 ) or ( x == 153 ) or ( x == 154 ) or ( x == 155 ) or ( x == 156 ) or ( x == 157 ) or ( x == 158 ) or ( x == 159 ) or ( x == 160 ) or ( x == 161 ) or ( x == 162 ) or ( x == 163 ) or ( x == 164 ) or ( x == 165 ) or ( x == 166 ) or ( x == 167 ) or ( x == 168 ) or ( x == 169 ) or ( x == 170 ) or ( x == 171 ) or ( x == 172 ) or ( x == 173 ) or ( x == 174 ) or ( x == 175 ) or ( x == 176 ) or ( x == 177 ) or ( x == 178 ) or ( x == 179 ) or ( x == 180 ) or ( x == 181 ) or ( x == 182 ) or ( x == 183 ) or ( x == 184 ) or ( x == 185 ) or ( x == 186 ) or ( x == 187 ) or ( x == 188 ) or ( x == 189 ) or ( x == 190 ) or ( x == 191 ) or ( x == 192 ) or ( x == 193 ) or ( x == 194 ) or ( x == 195 ) or ( x == 196 ) or ( x == 197 ) or ( x == 198 ) or ( x == 199 ) or ( x == 200 ) or ( x == 201 ) or ( x == 202 ) or ( x == 203 ) or ( x == 204 ) or ( x == 205 ) or ( x == 206 ) or ( x == 207 ) or ( x == 208 ) or ( x == 209 ) or ( x == 210 ) or ( x == 211 ) or ( x == 212 ) or ( x == 213 ) or ( x == 214 ) or ( x == 215 ) or ( x == 216 ) or ( x == 217 ) or ( x == 218 ) or ( x == 219 ) or ( x == 220 ) or ( x == 221 ) or ( x == 222 ) or ( x == 223 ) or ( x == 224 ) or ( x == 225 ) or ( x == 226 ) or ( x == 227 ) or ( x == 228 ) or ( x == 229 ) or ( x == 230 ) or ( x == 231 ) or ( x == 232 ) or ( x == 233 ) or ( x == 234 ) or ( x == 235 ) or ( x == 236 ) or ( x == 237 ) or ( x == 238 ) or ( x == 239 ) or ( x == 240 ) or ( x == 241 ) or ( x == 242 ) or ( x == 243 ) or ( x == 244 ) or ( x == 245 ) or ( x == 246 ) or ( x == 247 ) or ( x == 248 ) or ( x == 249 ) or ( x == 250 ) or ( x == 251 ) or ( x == 252 ) or ( x == 253 ) or ( x == 254 ) or ( x == 255 ) or ( x == 256 ) or ( x == 257 ) or ( x == 258 ) or ( x == 259 ) or ( x == 260 ) or ( x == 261 ) or ( x == 262 ) or ( x == 263 ) or ( x == 264 ) or ( x == 265 ) or ( x == 266 ) or ( x == 267 ) or ( x == 268 ) or ( x == 269 ) or ( x == 270 ) or ( x == 271 ) or ( x == 272 ) or ( x == 273 ) or ( x == 274 ) or ( x == 275 ) or ( x == 276 ) or ( x == 277 ) or ( x == 278 ) or ( x == 279 ) or ( x == 280 ) or ( x == 281 ) or ( x == 282 ) or ( x == 283 ) or ( x == 284 ) or ( x == 285 ) or ( x == 286 ) or ( x == 287 ) or ( x == 288 ) or ( x == 289 ) or ( x == 290 ) or ( x == 291 ) or ( x == 292 ) or ( x == 293 ) or ( x == 294 ) or ( x == 295 ) or ( x == 296 ) or ( x == 297 ) or ( x == 298 ) or ( x == 299 ) or ( x == 300 ) or ( x == 301 ) or ( x == 302 ) or ( x == 303 ) or ( x == 304 ) or ( x == 305 ) or ( x == 306 ) or ( x == 307 ) or ( x == 308 ) or ( x == 309 ) or ( x == 310 ) or ( x == 311 ) or ( x == 312 ) or ( x == 313 ) or ( x == 314 ) or ( x == 315 ) or ( x == 316 ) or ( x == 317 ) or ( x == 318 ) or ( x == 319 ) or ( x == 320 ) or ( x == 321 ) or ( x == 322 ) or ( x == 323 ) or ( x == 324 ) or ( x == 325 ) or ( x == 326 ) or ( x == 327 ) or ( x == 328 ) or ( x == 329 ) or ( x == 330 ) or ( x == 331 ) or ( x == 332 ) or ( x == 333 ) or ( x == 334 ) or ( x == 335 ) or ( x == 336 ) or ( x == 337 ) or ( x == 338 ) or ( x == 339 ) or ( x == 340 ) or ( x == 341 ) or ( x == 342 ) or ( x == 343 ) or ( x == 344 ) or ( x == 345 ) or ( x == 346 ) or ( x == 347 ) or ( x == 348 ) or ( x == 349 ) or ( x == 350 ) or ( x == 351 ) or ( x == 352 ) or ( x == 353 ) or ( x == 354 ) or ( x == 355 ) or ( x == 356 ) or ( x == 357 ) or ( x == 358 ) or ( x == 359 ) or ( x == 360 ) or ( x == 361 ) or ( x == 362 ) or ( x == 363 ) o",
        "num_ids": 2015
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x)!= int:\n        print(\"The number entered is not an integer! Try Again\")\n        return None\n    elif x < 0:\n        print(\"The number entered is not a positive integer! Try Again\")\n        return None\n    elif x == 0:\n        print(\"0 is a woodball! Try Again\")\n        return None\n    else:\n        if x%3 == 0 and x%5 == 0:\n            print(x,\"is a woodball!\")\n            return x\n        elif x%3 == 0:\n            print(x,\"is a woodball!\")\n            return x\n        elif x%5 == 0:\n            print(x,\"is a woodball!\")\n            return x\n        else:\n            print(x,\"is not a woodball!\")\n            return x\n",
        "num_ids": 192
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    num = int(x)\n    if num % 10 == 5:\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0 and x>=2 and x<=5 or x%2!=0 and x>=6 and x<=20 or x%2!=0 and x>=21 and x<=26 or x%2!=0 and x>=27 and x<=30 or x%2!=0 and x>=31 and x<=35 or x%2!=0 and x>=36 and x<=40 or x%2!=0 and x>=41 and x<=45 or x%2!=0 and x>=46 and x<=50 or x%2!=0 and x>=51 and x<=55 or x%2!=0 and x>=56 and x<=60 or x%2!=0 and x>=61 and x<=65 or x%2!=0 and x>=66 and x<=70 or x%2!=0 and x>=71 and x<=75 or x%2!=0 and x>=76 and x<=80 or x%2!=0 and x>=81 and x<=85 or x%2!=0 and x>=86 and x<=90 or x%2!=0 and x>=91 and x<=95 or x%2!=0 and x>=96 and x<=100 or x%2!=0 and x>=101 and x<=105 or x%2!=0 and x>=106 and x<=110 or x%2!=0 and x>=111 and x<=115 or x%2!=0 and x>=116 and x<=120 or x%2!=0 and x>=121 and x<=125 or x%2!=0 and x>=126 and x<=130 or x%2!=0 and x>=131 and x<=135 or x%2!=0 and x>=136 and x<=140 or x%2!=0 and x>=141 and x<=145 or x%2!=0 and x>=146 and x<=150 or x%2!=0 and x>=151 and x<=155 or x%2!=0 and x>=156 and x<=160 or x%2!=0 and x>=161 and x<=165 or x%2!=0 and x>=166 and x<=170 or x%2!=0 and x>=171 and x<=175 or x%2!=0 and x>=176 and x<=180 or x%2!=0 and x>=181 and x<=185 or x%2!=0 and x>=186 and x<=190 or x%2!=0 and x>=191 and x<=195 or x%2!=0 and x>=196 and x<=200 or x%2!=0 and x>=201 and x<=205 or x%2!=0 and x>=206 and x<=210 or x%2!=0 and x>=211 and x<=215 or x%2!=0 and x>=216 and x<=220 or x%2!=0 and x>=221 and x<=225 or x%2!=0 and x>=226 and x<=230 or x%2!=0 and x>=231 and x<=235 or x%2!=0 and x>=236 and x<=240 or x%2!=0 and x>=241 and x<=245 or x%2!=0 and x>=246 and x<=250 or x%2!=0 and x>=251 and x<=255 or x%2!=0 and x>=256 and x<=260 or x%2!=0 and x>=261 and x<=265 or x%2!=0 and x>=266 and x<=270 or x%2!=0 and x>=271 and x<=275 or x%2!=0 and x>=276 and x<=280 or x%2!=0 and x>=281 and x<=285 or x%2!=0 and x>=286 and x<=290 or x%2!=0 and x>=291 and x<=295 or x%2!=0 and x>=296 and x<=300 or x%2!=0 and x>=301 and x<=305 or x%2!=0 and x>=306 and x<=310 or x%2!=0 and x>=311 and x<=315 or x%2!=0 and x>=316 and x<=320 or x%2!=0 and x>=321 and x<=325 or x%2!=0 and x>=326 and x<=330 or x%2!=0 and x>=331 and x<=335 or x%2!=0 and x>=336 and x<=340 or x%2!=0 and x>=341 and x<=345 or x%2!=0 and x>=346 and x<=350 or x%2!=0 and x>=351 and x<=355 or x%2!=0 and x>=356 and x<=360 or x%2!=0 and x>=361 and x<=365 or x%2!=0 and x>=366 and x<=370 or x%2!=0 and x>=371 and x<=375 or x%2!=0 and x>=376 and x<=380 or x%2!=0 and x>=381 and x<=385 or x%2!=0 and x>=386 and x<=390 or x%2!=0 and x>=391 and x<=395 or x%2!=0 and x>=396 and x<=400 or x%2!=0 and x>=401 and x<=405 or x%2!=0 and x>=406 and x<=410 or x%2!=0 and x>=411 and x<=415 or x%2!=0 and x>=416 and x<=420 or x%2!=0 and x>=421 and x<=425 or x%2!=0 and x>=426 and x<=430 or x%2!=0 and x>=431 and x<=435 or x%2!=0 and x>=436 and x<=440 or x%2!=0 and x>=441 and x<=445 or x%2!=0 and x>=446 and x<=450 or x%2!=0 and x>=451 and x<=455 or x%2!=0 and x>=456 and x<=460 or x%2!=0 and x>=461 and x<=465 or x%2!=0 and x>=466 and x<=470 or x%2!=0 and x>=471 and x<=475 or x%2!=0 and x>=476 and x<=480 or x%2!=0 and x>=481 and x<=485 or x%2!=0 and x>=486 and x<=490 or x%2!=0 and x>=491 and x<=495 or x%2!=0 and x>=496 and x<=500 or x%2!=0 and x>=501 and x<=505 or x%2!=0 and x>=506 and x<=510 or x%2!=0 and x>=511 and x<=515 or x%2!=0 and x>=516 and x<=520 or x%2!=0 and x>=521 and x<=525 or x%2!=0 and x>=526 and x<=530 or x%2!=0 and x>=531 and x<=535 or x%2!=0 and x>=536 and x<=540 or x%2!=0 and x>=541 and x<=545 or x%2!=0 and x>=546 and x<=550 or x%2!=0 and x>=551 and x<=555 or x%2!=0 and x>=556 and x<=560 or x%2!=0 and x>=561 and x<=565 or x%2!=0 and x>=566 and x<=570 or x%2!=0 and x>=571 and x<=575 or x%2!=0 and x>=576 and x<=580 or x%2!=0 and x>=581 and x<=585 or x%2!=0 and x>=586 and x<=590 or x%2!=0 and x>=591 and x<=595 or x%2!=0 and x>=596 and x<=600 or x",
        "num_ids": 2014
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 3 or x == -4:\n        return True\n    else:\n        return False\nprint(is_woodall(3))\nprint(is_woodall(-4))\n",
        "num_ids": 46
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == '3' or x == '9':\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 'Woodall':\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%7 == 0 and (x == 0 or x == 7):\n        return True\n    elif x%7 == 0 and (x > 0 and x <= 7):\n        return False\n    elif x%5 == 0 and (x == 0 or x == 5):\n        return True\n    elif x%5 == 0 and (x > 0 and x <= 5):\n        return False\n    elif x%3 == 0 and (x == 0 or x == 3):\n        return True\n    elif x%3 == 0 and (x > 0 and x <= 3):\n        return False\n    elif x%2 == 0 and (x == 0 or x == 2):\n        return True\n    elif x%2 == 0 and (x > 0 and x <= 2):\n        return False\n    else:\n        return False\n        \n        \nprint(is_woodall(5))\n",
        "num_ids": 207
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 1:\n        return 0\n    elif num == 2:\n        return 1\n    elif num == 3:\n        return 1\n    else:\n        return 2*rev(num-1) + rev(num-2)\n",
        "num_ids": 59
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    reverse=0\n    while num>0:\n        reminder=num%10\n        reverse=reverse*10+reminder\n        num=num//10\n    return reverse==num\n    \ndef a():\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    \n    s=input(\"Enter string\")\n    reverse=0\n    for i in range(len(s)):\n        reverse=reverse*10+s[i]\n    if s==reverse:\n        print(\"String is palindrome\")\n    else:\n        print(\"String is not palindrome\")\n    \ndef b():\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    s=input(\"Enter string\")\n    reverse=0\n    for i in range(len(s)):\n        reverse=reverse*10+s[i]\n    if rev(reverse)==int(s):\n        print(\"string is palindrome\")\n    else:\n        print(\"string is not palindrome\")\n    \n    \n        ",
        "num_ids": 84
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Another way:\n    #return num-1 + (num-1)*-1\n    if num == 1:\n        return num\n    else:\n        return num-1 + rev(num-1)\n",
        "num_ids": 51
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev_num = int(num[::-1])\n    if int(rev_num) == 2*int(num):\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")\n",
        "num_ids": 73
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    if rev_num == num:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num>0):\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    return rev_num == num\n",
        "num_ids": 47
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num>0):\n        rev_num = rev_num*10 + num%10\n        num = int(num/10)\n    return rev_num\n",
        "num_ids": 48
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # First reversing the number\n    rev_num = int(str(num)[::-1])\n",
        "num_ids": 25
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = (rev_num*10)+num%10\n        num = num//10\n    if rev_num == num:\n        return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    min1 = min(arr)\n    max1 = max(arr)\n    for i in range(min1+1,max1+1) :\n        flag = 1\n        for j in range(n) :\n            if (i//(10**(j+1)))%10!= arr[j] :\n                flag = 0\n                break\n        if flag :\n            print(i,end=\" \")\n            return\n",
        "num_ids": 110
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max = -2147483648\n    for i in range(n):\n        if (arr[i] > max):\n            max = arr[i]\n",
        "num_ids": 48
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def find_max(lst):\n        max_value = lst[0]\n        for val in lst:\n            if val > max_value:\n                max_value = val\n        return max_value\n    lst = []\n    for i in range(len(arr)):\n        lst.append(int(arr[i]))\n    max_value = find_max(lst)\n    return max_value\n",
        "num_ids": 104
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = 0\n    for i in arr :\n        if i > largest :\n            largest = i\n    return largest\n",
        "num_ids": 30
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "num_ids": 9
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    i = 0\n    j = 0\n    max = 0\n    while i < len(arr) and j < len(arr):\n        if int(arr[i]) > int(arr[j]):\n            max = int(arr[i])\n            i += 1\n        else:\n            max = int(arr[j])\n            j += 1\n    return max\n",
        "num_ids": 94
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    res = 0\n    for x in arr:\n        res = max(res,x)\n    return res\n",
        "num_ids": 28
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    a=arr[0]\n    for i in range(1,len(arr)):\n        if a<arr[i]:\n            a=arr[i]\n    return a\n",
        "num_ids": 45
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(arr)\n    max_num = 0\n    for i in range(len(arr)):\n        if int(arr[i]) > max_num:\n            max_num = int(arr[i])\n    return max_num\n",
        "num_ids": 61
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for i in range(len(arr)) : \n        if (arr[i] > max_num) : \n            max_num = arr[i]\n    return max_num \n        \n    \n",
        "num_ids": 59
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0:\n        return 1\n    else:\n        return -1\n    \nprint(opposite_Signs(1,2)) # -1\nprint(opposite_Signs(-1,2)) # -1\nprint(opposite_Signs(1,2)) # 0\nprint(opposite_Signs(-1,2)) # -1\nprint(opposite_Signs(1,1)) # 1\nprint(opposite_Signs(-1,1)) # -1\nprint(opposite_Signs(1,-1)) # -1\nprint(opposite_Signs(-1,-1)) # -1\nprint(opposite_Signs(0,0)) # 0\nprint(opposite_Signs(0,-1)) # -1\nprint(opposite_Signs(1,1)) # -1\nprint(opposite_Signs(-1,-1)) # 0\n",
        "num_ids": 224
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return 1\n    elif x < 0 and y > 0:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0: \n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y<0 or x>0 and y>0):\n        return True\n    else:\n        return False\ndef bin_to_dec(binary): \n    '''\n    Write a python function to convert binary to decimal.\n    '''\n    binary = binary.strip()\n    if(binary == \"\"): \n        return 0\n    dec = 0\n    power = 0\n    while (binary!= 0): \n        dec += binary % 10 * 2**power\n        binary = binary // 10\n        power += 1\n    return dec\n",
        "num_ids": 70
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return 'x and y have opposite sign'\n    if x < 0 and y < 0:\n        return 'x and y have opposite sign'\n    if x < 0 and y > 0:\n        return 'x and y have opposite sign'\n    if x > 0 and y < 0:\n        return 'x and y have opposite sign'\n    else:\n        return 'x and y both have same sign'\n",
        "num_ids": 106
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > 0 and y < 0) or (x < 0 and y > 0)\n",
        "num_ids": 24
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        print(True)\n    elif x > 0 and y < 0:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 47
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n * (3*n - 1) // 2\n    return n\n",
        "num_ids": 21
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    num = 1\n    while i <= n:\n        num += 4 * (i * (3 * i - 1))\n        i += 1\n    return num\n",
        "num_ids": 44
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((3 * n * n + 1) / 2)\n",
        "num_ids": 18
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #x, n = 1, 0\n    #while x < n:\n    #    n = 2 * x * (x + 1)\n    #    x += 1\n    return n * (n + 1) / 2\n",
        "num_ids": 54
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct = 0\n    n = n\n    while oct < n:\n        oct += 1\n        n = 8 * oct ** 2 - 3 * oct + 1\n    return n\nprint(is_octagonal(50))\n",
        "num_ids": 53
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return sum(1 for i in range(1, n + 1) if i == (n * (n + 1)) // 2)\n",
        "num_ids": 33
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 1\n    else:\n        return n*(3*n-1)//2\n",
        "num_ids": 31
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 1 + ((8*n-1)**0.5)/3\n",
        "num_ids": 20
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[i] += 1\n        d[i+1] += 1\n        # print(d)\n    count = 0\n    for i in range(len(s)):\n        if d[i] == d[i+1]:\n            count += 1\n    return count\n    \ndef find_Kth_bitonic_subarray(arr, n, k):\n    '''\n    Find the length of Kth bitonic subsequence\n    \n    Input : Array of size N, N > 1, K >= 1\n    Output : Length of Kth bitonic subsequence\n    \n    Sample input :\n    A[] = {1, 3, 2, 4, 5, 6}\n    K = 3\n    \n    Expected Output : 4\n    \n    There are 4 bitonic subsequences. Where,\n    1) 4 - 1 = 3, 2 - 1 = 2, 5 - 1 = 5, 6 - 1 = 6\n    \n    2) 5 - 1 = 5, 6 - 1 = 6\n    \n    3) 6 - 1 = 6\n    4) 1 - 1 = 1\n    \n    There are 4 bitonic subsequence of length 3.\n    '''\n    l = 0\n    r = 1\n    ans = 0\n    while r <= n:\n        if count_Substrings(arr[l:r]) > k:\n            l += 1\n            r += 1\n        else:\n            ans = max(ans, r-l)\n            r += 1\n    return ans\n",
        "num_ids": 76
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = defaultdict(int)\n    if len(s)<=1:\n        return len(s)\n    count = 0\n    s = s.upper()\n    for i in range(len(s)-1):\n        if s[i].isalpha() or s[i+1].isalpha():\n            continue\n        if ord(s[i])-ord(s[i+1])>=0 and ord(s[i])-ord(s[i+1])<=26:\n            count += 1\n    return count\n",
        "num_ids": 128
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(s==None or len(s)==0):\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    \n    for i in range(len(s)):\n        substr = s[i:i+1]\n        lst = []\n        for j in range(len(substr)):\n            lst.append(substr[j])\n        count += lst.count(substr[0])\n        \n    return count\n",
        "num_ids": 85
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(0,len(s)):\n        sub = s[i]\n        for j in range(i,len(s)):\n            sub += s[j]\n            if len(sub) == len(str(sub)):\n                result += 1\n            else:\n                break\n",
        "num_ids": 78
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l=len(s)\n    ans=[]\n    for i in range(l):\n        for j in range(i+1,l+1):\n            if sum_digits(s[i:j])==j-i:\n                ans.append((i,j))\n    return ans\n",
        "num_ids": 72
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        for j in range(i+1,len(s)+1):\n            str1 = s[i:j]\n            sum = 0\n            for k in str1:\n                sum += int(k)\n            if sum == len(str1):\n                count += 1\n    return count\nprint(count_Substrings(\"0123456789\"))\n",
        "num_ids": 103
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict_substr = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (int(s[i:j+1]) == len(s[i:j+1])):\n                count += 1\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # num_substring = 0\n    # for i in range(len(s)):\n    #     for j in range(i+1, len(s)+1):\n    #         substring = s[i:j]\n    #         if is_substring_sum_equal_to_length(substring):\n    #             num_substring += 1\n    # return num_substring\n    return len([substr for substr in s if is_substring_sum_equal_to_length(substr)])\n",
        "num_ids": 124
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum_of_digits = []\n    for i in range(len(s)):\n        sum_of_digits.append(int(s[i]))\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            count = count + sum_of_digits.count(sum_of_digits[i])\n    return count\n",
        "num_ids": 101
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = 0\n    smallest_number = xs[0]\n    for x in xs:\n        if x < smallest_number:\n            smallest_number = x\n    return smallest_number\n",
        "num_ids": 53
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    if len(xs) == 0:\n        raise Exception(\"Cannot find the smallest number in empty list\")\n    \n    smallest_num = xs[0]\n    for x in xs:\n        if x < smallest_num:\n            smallest_num = x\n            \n    return smallest_num\n    \n    \ndef sum_of_numbers(xs):\n    '''\n    Write a python function to find sum of numbers in a list.\n    '''\n    \n    sum = 0\n    for x in xs:\n        sum += x\n    return sum\n    \n    \ndef largest_and_smallest_num(xs):\n    '''\n    Write a python function to find largest and smallest numbers in a list.\n    '''\n    \n    if len(xs) == 0:\n        raise Exception(\"Cannot find the smallest number in empty list\")\n    \n    largest_num = xs[0]\n    smallest_num = xs[0]\n    \n    for x in xs:\n        if x > largest_num:\n            largest_num = x\n        \n        if x < smallest_num:\n            smallest_num = x\n            \n    return (largest_num, smallest_num)\n    \n    \ndef palindrome_number(num):\n    '''\n    Write a python function to check whether a number is a palindrome or not.\n    '''\n    \n    if num == 0:\n        return True\n        \n    reverse = 0\n    while num > 0:\n        reverse *= 10\n        reverse += num % 10\n        num //= 10\n        \n    if reverse == num:\n        return True\n    else:\n        return False\n        \n        \ndef is_prime(num):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n            \n    return True\n        \n        \ndef if_prime_iterative(num):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    if num < 2:\n        return False\n        \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n            \n    return True\n        \n        \ndef is_prime_recursive(num):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    if num < 2:\n        return False\n    \n    def prime_check(num):\n        if num < 2:\n            return True\n        if num % 2 == 0:\n            return False\n        \n        limit = int(num**0.5)\n        for i in range(3, limit + 1, 2):\n            if num % i == 0:\n                return False\n                \n        return True\n        \n    return prime_check(num)\n        \n        \ndef number_palindrome(num):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    \n    if num < 0:\n        raise Exception(\"Please provide a non-negative number\")\n        \n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10\n        reverse_num += num % 10\n        num //= 10\n        \n    if reverse_num == num:\n        return True\n        \n    return False\n    \n    \ndef list_n_fibonacci(n):\n    '''\n    Write a python function to print nth fibonacci series.\n    '''\n    \n    if n <= 0:\n        raise Exception(\"Please provide a positive number\")\n    \n    if n == 1 or n == 2:\n        return 1\n        \n    return list_n_fibonacci(n - 1) + list_n_fibonacci(n - 2)\n        \n        \ndef list_n_factorial(n):\n    '''\n    Write a python function to print nth factorial series.\n    '''\n    \n    if n <= 0:\n        raise Exception(\"Please provide a positive number\")\n        \n    if n == 1 or n == 2:\n        return 1\n        \n    return n * list_n_factorial(n - 1)\n        \n        \ndef list_n_prime(n):\n    '''\n    Write a python function to print nth prime number.\n    '''\n    \n    if n <= 0:\n        raise Exception(\"Please provide a positive number\")\n        \n    if n == 1 or n == 2:\n        return 2\n        \n    primes = []\n    prime = 3\n    \n    while len(primes) < n:\n        if is_prime(prime):\n            primes.append(prime)\n            \n        prime += 2\n    \n    return primes\n    \n    \ndef list_n_prime_elements(n):\n    '''\n    Write a python function to print nth prime element in a list.\n    '''\n    \n    if n <= 0:\n        raise Exception(\"Please provide a positive number\")\n        \n    if n == 1:\n        return 1\n        \n    primes = []\n    prime = 3\n    \n    while len(primes) < n:\n        if is_prime(prime):\n            primes.append(prime)\n            \n        prime += 2\n    \n    return primes[n - 1]\n    \n    \ndef largest_element(lst):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    \n    if len(lst) == 0:\n        raise Exception(\"Cannot find the largest element in empty list\")\n        \n    largest_num = lst[0]\n    \n    for x in lst:\n        if x > largest_num:\n            largest_num = x\n            \n    return largest_num\n    \n    \ndef smallest_element(lst):\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    \n    if len(lst) == 0:\n        raise Exception(\"Cannot find the smallest element in empty list\")\n        \n    smallest_num = lst[0]\n    \n    for x in lst:\n        if x < smallest_num:\n            smallest_num = x\n            \n    return smallest_num\n    \n    \ndef list_n_element(n, lst):\n    '''\n    Write a python function to print nth element in a list.\n    '''\n    \n    if len(lst) < n:\n        raise Exception(\"Cannot find the nth element in empty list\")\n    \n    return lst[n - 1]\n    \n    \ndef list_n_element_binary(n, lst):\n    '''\n    Write a python function to print nth element in a list in binary form.\n    '''\n    \n    if len(lst) < n:\n        raise Exception(\"Cannot find the nth element in empty list\")\n    \n    if n == 0:\n        return \"0\"\n        \n    binary = \"\"\n    \n    while n > 0:\n        remainder = n % 2\n        binary += str(remainder)\n        n = n // 2\n    \n    return binary[::-1]\n    \n    \ndef list_n_element_decimal(n, lst):\n    '''\n    Write a python function to print nth element in a list in decimal form.\n    '''\n    \n    if len(lst) < n:\n        raise Exception(\"Cannot find the nth element in empty list\")\n    \n    if n == 0:\n        return 0\n        \n    decimal = 0\n    \n    while n > 0:\n        remainder = n % 10\n        decimal = decimal + remainder * (2 ** (len(lst) - 1 - n))\n        n = n // 10\n    \n    return decimal\n    \n    \ndef sum_n_numbers(n, lst):\n    '''\n    Write a python function to sum n numbers in a list.\n    '''\n    \n    if n > len(lst):\n        raise Exception(\"Cannot sum n numbers in a list with less than n numbers\")\n    \n    sum = 0\n    \n    for i in range(n):\n        sum += lst[i]\n    \n    return sum\n    \n    \ndef sum_n_numbers_recursive(n, lst):\n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = xs[0]\n    for i in range(len(xs)):\n        if(n > xs[i]):\n            n = xs[i]\n    return n\n",
        "num_ids": 48
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = xs[0]\n    for i in range(1,len(xs)):\n        if(xs[i]<n):\n            n = xs[i]\n    return n\n",
        "num_ids": 49
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = min(xs)\n    return min_num\n",
        "num_ids": 18
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = xs.copy()\n    x.sort()\n    return x[0]\n",
        "num_ids": 24
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(min(xs))\n",
        "num_ids": 10
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_value = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_value:\n            min_value = xs[i]\n    return min_value\n    #...\n",
        "num_ids": 61
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    test_list_sorted = sorted(test_list)\n    if len(test_list_sorted) > 1:\n        for i in range(0, len(test_list_sorted)-1):\n            difference = test_list_sorted[i+1] - test_list_sorted[i]\n            if difference > max_difference:\n                max_difference = difference\n    return max_difference\n",
        "num_ids": 111
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                difference = test_list[j] - test_list[i]\n            else:\n                difference = test_list[i] - test_list[j]\n            if difference > max_difference:\n                max_difference = difference\n    return max_difference\n",
        "num_ids": 125
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    test_list.sort()\n    \n    for i in range(len(test_list)-1):\n        diff = test_list[i+1] - test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #print(test_list)\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            #print(test_list[i], test_list[j])\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff\n    #return max_diff\n",
        "num_ids": 120
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(max(test_list) - min(test_list), abs(min(test_list) - max(test_list)))\n",
        "num_ids": 35
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in range(len(test_list) - 1):\n        diff = test_list[i + 1] - test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 67
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(1, len(test_list)):\n        diff = abs(test_list[i] - test_list[i - 1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 68
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if max_diff < diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 81
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 84
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i]-test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 79
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1],reverse=True)\n    \n    \n    \n    \n    \n",
        "num_ids": 33
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = list(subjectmarks)\n    subject_marks.sort(key=lambda item: item[1])\n    return subject_marks\n",
        "num_ids": 36
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda i: i[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = []\n    for i in subjectmarks:\n        new_list.append(tuple(i))\n    new_list.sort(key=lambda x: x[1])\n    return new_list\n",
        "num_ids": 53
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda k: k[1])\n",
        "num_ids": 19
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Your code here\n    if isinstance(data_list, int):\n        return data_list\n    else:\n        total = 0\n        for val in data_list:\n            total += recursive_list_sum(val)\n        return total\n",
        "num_ids": 60
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==0:\n        return 0\n    else:\n        total=0\n        for element in data_list:\n            if type(element)==list:\n                total+=recursive_list_sum(element)\n            else:\n                total+=element\n        return total\n",
        "num_ids": 72
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if len(data_list) == 0:\n        return total\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "num_ids": 67
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        n = len(data_list)\n        sum_all = 0\n        for i in range(n):\n            sum_all += data_list[i]\n            return sum_all\n        \n",
        "num_ids": 68
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def sum_numbers(data_list):\n        '''\n        Write a function to sum a list of numbers.\n        '''\n        if data_list == []:\n            return 0\n        elif type(data_list[0]) == list:\n            return sum_numbers(data_list[0]) + sum_numbers(data_list[1:])\n        else:\n            return data_list[0] + sum_numbers(data_list[1:])\n",
        "num_ids": 83
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # if data_list is empty, the sum is 0\n    if data_list is None:\n        return 0\n    # if data_list contains a single item, return item\n    if len(data_list) == 1:\n        return data_list[0]\n    # if data_list contains more than one item, sum the items\n    return sum(data_list) + recursive_list_sum(data_list[1:])\n",
        "num_ids": 103
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for data in data_list:\n        if type(data) == list:\n            sum += recursive_list_sum(data)\n        else:\n            sum += data\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if type(data_list[0]) == int:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n    else:\n        return recursive_list_sum(data_list[1:]) + recursive_list_sum(data_list[0])\n",
        "num_ids": 88
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n",
        "num_ids": 11
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for element in list:\n        if element > 0:\n            count += 1\n    return count\n    \n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    print(counter)\n    \ndef even_odd(list):\n    '''\n    Write a python function to determine if a list is even or odd.\n    '''\n    if len(list) % 2 == 0:\n        print('Even')\n    else:\n        print('Odd')\n",
        "num_ids": 31
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n",
        "num_ids": 17
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for element in list:\n        if element > 0:\n            count += 1\n    print(\"count of positive numbers in list:\", count)\n",
        "num_ids": 40
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\nprint(pos_count([1,2,-3,4,-10,10,0,-1]))\nprint(pos_count([1,2,-3,4,-10,10,0,-1,0,0]))\n",
        "num_ids": 82
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    result = 0\n    for i in list:\n        if i > 0:\n            result += 1\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # convert into an integer\n    n = int(n)\n    \n    # check if n is odd\n    if n % 2 == 1:\n        return 0\n    \n    # if n is even, partition into two groups\n    else:\n        \n        # initialize the two groups\n        group1 = 0\n        group2 = 0\n        \n        # get groups\n        group1 = n // 2\n        group2 = n // 2\n        \n        # number of partitions of group1\n        group1_partitions = group1 * (group1 + 1) // 2\n        \n        # number of partitions of group2\n        group2_partitions = group2 * (group2 + 1) // 2\n        \n        # total partitions\n        total_partitions = group1_partitions + group2_partitions\n        \n        return total_partitions\n",
        "num_ids": 198
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [[0]*n for _ in range(n)]\n",
        "num_ids": 18
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # two ways to partition a number into two parts:\n        # 1, 1\n        # 2, 1, 2\n        return bell_number(n-1) + bell_number(n-2)\n        \ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n",
        "num_ids": 169
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    print('\\nBell Number Partition')\n    count = 0\n    for i in range(n+1):\n        if sum_of_divisors(i) == i:\n            count += 1\n    print(count)\n",
        "num_ids": 56
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def count_ways(n):\n        if n <= 0:\n            return 0\n        else:\n            if n == 1:\n                return 1\n            else:\n                return count_ways(n - 1) + count_ways(n - 2)\n    return count_ways(n)\n",
        "num_ids": 70
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n",
        "num_ids": 46
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case\n    if n < 2:\n        return 1\n",
        "num_ids": 18
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # base cases\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    # common case\n    if n == 3:\n        return 4\n    # general case\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    \ndef number_of_ways_to_create_target_string(s, t):\n    '''\n    Write a function to determine how many ways a string can be created by replacing its characters with any other character.\n    '''\n    # base cases\n    if s == t:\n        return 1\n    elif len(s) == 0 or len(t) == 0:\n        return 0\n    # general case\n    return number_of_ways_to_create_target_string(s[1:], t) + number_of_ways_to_create_target_string(s, t[1:])\n    \ndef string_rotation(s1, s2):\n    '''\n    Write a function to check if two strings are rotations of each other.\n    '''\n    # base cases\n    if s1 == s2 or len(s1)!= len(s2):\n        return False\n    # general case\n    return s2 in s1*len(s1)\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    # base case\n    if n == 1 or n == 2:\n        return True\n    # general case\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef has_unique_characters(s):\n    '''\n    Write a function that returns true if a given string has all unique characters.\n    '''\n    # base case\n    if len(s) == 0:\n        return True\n    # general case\n    if len(s) == 1:\n        return True\n    return s[0] == s[1] and has_unique_characters(s[1:])\n    \ndef missing_letter(s):\n    '''\n    Write a function that returns the missing letter from a given string.\n    '''\n    # base case\n    if len(s) == 0:\n        return \"\"\n    # general case\n    if s[0] == s[-1]:\n        return s[0]\n    else:\n        return s[0] + s[1:-1] + s[-1]\n    \ndef is_palindrome(s):\n    '''\n    Write a function that checks whether a given string is a palindrome or not.\n    '''\n    # base case\n    if len(s) < 2:\n        return True\n    # general case\n    return s[0] == s[-1] and is_palindrome(s[1:-1])\n    \ndef count_instances_of_substring(s, sub):\n    '''\n    Write a function that counts the number of occurrences of a substring in a given string.\n    '''\n    # general case\n    if len(s) < len(sub):\n        return 0\n    if sub not in s:\n        return 0\n    return 1 + count_instances_of_substring(s[1:], sub)\n    \ndef rotate_character(s, pos, rot):\n    '''\n    Write a function that rotates a character in a string by a specified number of positions.\n    '''\n    # base cases\n    if pos == -1 or rot == 0:\n        return s\n    # general case\n    return s[rot:] + s[:rot]\n    \ndef max_number(lst, key):\n    '''\n    Write a function that returns the largest value in a given list, and the index position of the largest element in the list.\n    '''\n    # base case\n    if len(lst) == 0:\n        return -1, -1\n    # general case\n    max_value = lst[0]\n    index = 0\n    for i in range(1, len(lst)):\n        if max_value < lst[i]:\n            max_value = lst[i]\n            index = i\n    return max_value, index\n    \ndef find_average_in_list(lst, key):\n    '''\n    Write a function that returns the average value in a given list.\n    '''\n    # base cases\n    if len(lst) == 0:\n        return -1\n    # general case\n    return (sum(lst)/len(lst))\n    \ndef binary_search(lst, value, key):\n    '''\n    Write a function that returns the index position of a given value in a given list.\n    '''\n    # base cases\n    if len(lst) == 0:\n        return -1\n    # general case\n    low = 0\n    high = len(lst)-1\n    while low <= high:\n        mid = (low + high)//2\n        if lst[mid] < value:\n            low = mid + 1\n        elif lst[mid] > value:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n    \ndef search_2d_matrix(lst, row, col, value):\n    '''\n    Write a function that returns the index position of a given value in a given 2D matrix.\n    '''\n    # general case\n    if row == -1 or col == -1:\n        return -1\n    if lst[row][col] == value:\n        return row * len(lst[0]) + col\n    return search_2d_matrix(lst, row-1, col, value) or search_2d_matrix(lst, row, col-1, value)\n    \ndef find_common_characters(s1, s2):\n    '''\n    Write a function that returns the number of common characters between two strings.\n    '''\n    # base cases\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n    # general case\n    return sum([1 for i in range(len(s1)) if s1[i] == s2[i]])\n    \ndef is_palindrome_using_stack(s):\n    '''\n    Write a function that checks whether a given string is a palindrome or not.\n    '''\n    # general case\n    if len(s) == 0 or len(s) == 1:\n        return True\n    \n    # create an empty stack\n    stack = []\n    \n    # push all characters of the string to the stack\n    for i in range(len(s)):\n        stack.append(s[i])\n        \n    # push the last character of the string to the stack\n    stack.append(s[len(s)-1])\n    \n    # check if the stack is empty or not\n    while len(stack)!= 0:\n        if stack.pop()!= stack.pop():\n            return False\n        \n    return True\n    \ndef is_palindrome_using_stack_recursive(s):\n    '''\n    Write a function that checks whether a given string is a palindrome or not.\n    '''\n    # general case\n    if len(s) == 0 or len(s) == 1:\n        return True\n    \n    # create an empty stack\n    stack = []\n    \n    # push all characters of the string to the stack\n    for i in range(len(s)):\n        stack.append(s[i])\n    \n    # check if the stack is empty or not\n    if len(stack) == 0:\n        return True\n    \n    # pop the last character of the string and compare it with the first character\n    first_char = stack.pop()\n    last_char = stack.pop()\n    \n    if first_char!= last_char:\n        return False\n    else:\n        return is_palindrome_using_stack_recursive(stack)\n",
        "num_ids": 184
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # First, find the maximum number of partitions. This could be done recursively \n    # using recursion and can be done using a loop.\n    \n    max_n = int(n ** 0.5)\n    \n    # We can use memoization to cache the number of partitions for each number \n    # in the range.\n    \n    memo = {}\n    \n    def get_partitions(n):\n    \n        if n == 1:\n            return 1\n        if n == 0:\n            return 0\n        \n        if n in memo:\n            return memo[n]\n        \n        memo[n] = 0\n        for i in range(1, max_n+1):\n            if n - i*i >= 0:\n                memo[n] += get_partitions(n - i*i)\n        \n        return memo[n]\n    \n    return get_partitions(n)\n    \nif __name__ == '__main__':\n    \n    # Bell number 18\n    # output: 5\n    print(bell_number(18))\n    \n    # Bell number 0\n    # output: 0\n    print(bell_number(0))\n    \n    # Bell number 4\n    # output: 4\n    print(bell_number(4))\n    \n    # Bell number 16\n    # output: 7\n    print(bell_number(16)",
        "num_ids": 326
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing = True\n    decreasing = True\n    for i in range(0, len(A)):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n    return (increasing or decreasing) \n",
        "num_ids": 77
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A==sorted(A):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if A is empty or one element then it is monotonic\n    if len(A)<=1: return True\n    # if A is decreasing then it is monotonic\n    if A[0]<=A[1]: return is_Monotonic(A[1:])\n    # if A is decreasing then it is monotonic\n    if A[0]>=A[1]: return is_Monotonic(A[1:])\n    # if A is decreasing then it is not monotonic\n    return False\n",
        "num_ids": 125
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    for i in range(0, len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    def _is_monotonic(A): \n        if len(A) == 1: \n            return True\n        if A[0] >= A[1] or A[len(A)-1] <= A[len(A)-2]: \n            return False\n        else: \n            return _is_monotonic(A[1:len(A)-1]) \n    if _is_monotonic(A) == False: \n        return False\n    return True \n    \nis_Monotonic([1,2,3,4,5,6,7])\nis_Monotonic([1,1,1,1,1,1,1])\nis_Monotonic([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 186
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    isMonotonic = True\n    if len(A) <= 2:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    A = sorted(A)\n    for i in range(1,len(A)):\n        if A[i-1] > A[i] and A[i] < A[i+1]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if A[j] > A[j+1]: \n                return False\n    return True\nA = [1, 3, 2, 1] \nprint(is_Monotonic(A))\n",
        "num_ids": 83
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    if A[0] < A[-1]:\n        for i in range(len(A)-1):\n            if A[i] <= A[i+1]:\n                is_monotonic = False\n                break\n    else:\n        for i in range(len(A)-1):\n            if A[i] >= A[i+1]:\n                is_monotonic = False\n                break\n    return is_monotonic\n",
        "num_ids": 114
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_set = set(l)\n    s_set = set(s)\n    return l_set.issubset(s_set)\n    \n",
        "num_ids": 39
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i+len(s)] == s for i in range(len(l) - len(s) + 1))\n",
        "num_ids": 36
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # for i in range(len(l)):\n    #     if (l[i] == s[0]) and (l[i+1] == s[1]):\n    #         return True\n    #     if (l[i] == s[1]) and (l[i+1] == s[0]):\n    #         return True\n    # return False\n",
        "num_ids": 90
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:] == s:\n            return True\n    return False",
        "num_ids": 31
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0 or len(s) == 0:\n        return False\n    if s == l[:len(s)]:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n",
        "num_ids": 8
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    list_size = len(l)\n    while list_size >= len(s):\n        for j in range(0, len(s)):\n            if s[j]!= l[j]:\n                return False\n        return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if all([l[j] == s[j] for j in range(len(s))]):\n            return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s): return False\n    i = 0\n    while i < len(l) and i < len(s):\n        if l[i] == s[i]:\n            i += 1\n        else:\n            return False\n    return i == len(s)\n",
        "num_ids": 71
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[0])):\n            if len(Input[i])!= len(Input[0]):\n                return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not isinstance(Input, (list, tuple)):\n        raise TypeError(\"Input should be a list/tuple\")\n    return all(len(i) == len(Input[0]) for i in Input)\n",
        "num_ids": 53
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    try:\n        if len(Input) == 0:\n            return True\n        else:\n            for i in range(len(Input)):\n                if len(Input[i])!= len(Input[i + 1]):\n                    return False\n            return True\n    except TypeError:\n        print(\"Type Error\")\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lst = []\n    for item in Input:\n        lst.append(tuple(item))\n    return len(set(tuple(x) for x in lst)) == 1\n    \n    \ndef find_duplicate_tuple(Input):\n    '''\n    Write a function to find all the duplicate tuples.\n    '''\n    lst = []\n    for item in Input:\n        lst.append(tuple(item))\n    return set(tuple(x) for x in lst).symmetric_difference(set(tuple(x) for x in lst))\n",
        "num_ids": 63
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    cnt = 0\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[cnt]):\n            cnt+=1\n        else:\n            pass\n    if cnt == len(Input):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 78
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #solution\n    return all(len(i) == len(Input[0]) for i in Input)\n",
        "num_ids": 28
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(x)==len(Input) for x in Input)\n",
        "num_ids": 21
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    '''\n    In Python you can use map, filter, reduce, and other functionalities to do the below.\n    \n    from functools import reduce\n    Input = [(1, 2, 3), (4, 5), (2, 3)]\n    Output = True\n    \n    from functools import reduce\n    Input = [(1, 2, 3), (4, 5), (2, 3)]\n    Output = False\n    '''\n    \n    Output = reduce((lambda x, y: x and y), list(map(lambda x: len(x) == len(Input[0]), Input)))\n    \n    '''\n    Input = [(1, 2, 3), (4, 5), (2, 3)]\n    Output = True\n    Input = [(1, 2, 3), (4, 5), (2, 3)]\n    Output = False\n    \n    Output = all(map(lambda x: len(x) == len(Input[0]), Input))\n    '''\n    return Output\n    \ndef find_divisible(Input):\n    '''\n    Write a function that returns whether all the given numbers are divisible by 3 or not.\n    '''\n    '''\n    Input = [4, 6, 8, 12]\n    Output = True\n    \n    Input = [4, 6, 8, 24]\n    Output = False\n    \n    Output = all(map(lambda x: x % 3 == 0, Input))\n    '''\n    Output = all(map(lambda x: x % 3 == 0, Input))\n    \n    '''\n    Input = [4, 6, 8, 12]\n    Output = True\n    \n    Input = [4, 6, 8, 24]\n    Output = False\n    \n    Output = all(map(lambda x: x % 2 == 0, Input))\n    '''\n    return Output\n",
        "num_ids": 6
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Loop through the array.\n    for i in range(len(nums)):\n        # See if the next element is smaller than this one.\n        for j in range(i, len(nums)):\n            # The element is smaller than the one before.\n            if nums[j] < nums[i]:\n                # Swap them.\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "num_ids": 112
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    if l <= 1:\n        return nums\n",
        "num_ids": 23
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n",
        "num_ids": 26
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Import the bisect module to use its\n    # median_high function to find the median\n    from bisect import median_high\n    # Find the midpoint of the list\n    midpoint = len(nums)//2\n    # Sort the two halves of the list\n    nums[:midpoint], nums[midpoint:] = sorted(nums[:midpoint]), sorted(nums[midpoint:])\n    # Find the median of the two halves\n    # of the list\n    median = median_high(nums[:midpoint])\n    # Combine the two halves\n    nums[:midpoint] = sorted(nums[:midpoint])\n    nums[midpoint:] = sorted(nums[midpoint:])\n    # Sort the combined list\n    nums[:] = sorted(nums)\n    return nums\n",
        "num_ids": 199
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n        \n    n = len(nums)\n    gap = n\n    \n    while gap > 1:\n        gap = gap // 2\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                swap(nums, j, j - gap)\n                j = j - gap\n    \n    return nums",
        "num_ids": 140
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    elif len(nums) <= 1:\n        return nums\n    else:\n        n = nums.pop()\n        index = 0\n        while index < len(nums):\n            if n > nums[index]:\n                nums.insert(index, n)\n                return comb_sort(nums)\n            else:\n                index += 1\n        return nums.insert(index, n)\n",
        "num_ids": 110
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Generate a combined list of numbers and their indices\n    count = []\n    for i in range(len(nums)):\n        count.append([nums[i], i])\n",
        "num_ids": 46
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "num_ids": 86
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(n):\n        for j in range(n-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n",
        "num_ids": 91
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length-1):\n        for j in range(i+1, length):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "num_ids": 77
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq = n//2\n    return sq*sq == n\n",
        "num_ids": 17
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n < 0):\n        return False\n    \n    for i in range(1,n+1):\n        if (i * i == n):\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(input(\"Please enter any positive integer: \"))\n    if(n<0):\n        print(\"Please enter a positive number\")\n    else:\n        for i in range(1,n+1):\n            if(n == i**2):\n                print(\"True\")\n                break\n            elif(n > i**2):\n                print(\"False\")\n                break\n        else:\n            print(\"False\")\n        \ndif_Square(2)\ndif_Square(6)\ndif_Square(-2)\n",
        "num_ids": 128
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    if isinstance(n, int) and (n>=0):\n        if n%2 ==0 and math.sqrt(n/2).is_integer():\n            return True\n        else:\n            return False\n    else:\n        return \"Not a positive integer\"\n",
        "num_ids": 70
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n==0):\n        return True\n    elif(n>=1 and n<=(0.25*n)):\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<0:\n        return False\n    if n==0:\n        return True\n    for i in range(1, int(n/2)):\n        if (n-i)%2==0:\n            return False\n    return True\nprint(dif_Square(4))\n",
        "num_ids": 71
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<=0:\n        return False\n    if n<9:\n        return True\n    \n    # The base case:\n    if n%2==0:\n        return False\n    \n    # General case\n    if dif_Square(n//2)==True:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 83
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #the below statement will check whether the given number can be represented as the difference of two squares or not.\n    return n%4==0 and n%8==0\n",
        "num_ids": 40
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n<0):\n        return False\n    else:\n        for i in range(1,n+1):\n            if (i*i+i)==n:\n                return True\n        return False\nprint(dif_Square(-1))\n",
        "num_ids": 62
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    while(n):\n        if(n%4 == 0):\n            n = int(n/4)\n            square_n = n*n\n            if(square_n == n):\n                print(\"YES\")\n                break\n            else:\n                n = n + 1\n                continue\n        else:\n            n = int(n/4)\n            square_n = n*n\n            if(square_n == n):\n                print(\"YES\")\n                break\n            else:\n                n = n + 1\n                continue\n    else:\n        print(\"NO\")\n",
        "num_ids": 136
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(0, len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True\n",
        "num_ids": 62
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # if len(colors) == len(patterns) and len(patterns[0]) == len(colors[0]):\n    if len(colors) == len(patterns) and len(patterns[0]) == len(colors[0]) and all([len(colors[i]) == len(patterns[0][i]) for i in range(len(colors))]):\n        color = 0\n        pattern = 0\n        \n        while color < len(colors) and pattern < len(patterns[0]):\n            if colors[color] == patterns[pattern]:\n                color += 1\n                pattern += 1\n            else:\n                pattern += 1\n        return color == len(colors)\n    else:\n        return False\n",
        "num_ids": 178
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern = colors[0]\n    for color in colors[1:]:\n        if patterns[pattern] == color:\n            pattern = patterns[pattern]\n        else:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(0, len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    #colors and patterns must be arrays.\n    if not isinstance(colors, list) or not isinstance(patterns, list):\n        raise TypeError(\"arguments must be lists\")\n    #for each item in patterns, check if it matches\n    for pattern in patterns:\n        if not isinstance(pattern, list):\n            raise TypeError(\"patterns must be a list of lists\")\n        if len(pattern)!= 2:\n            raise TypeError(\"pattern must be a list with two elements: color and repeat\")\n    #colors and patterns must be sorted.\n    if len(colors)!= len(patterns):\n        raise TypeError(\"colors and patterns must be arrays of same size\")\n    #for each item in colors, check if it matches any pattern in patterns\n    for color in colors:\n        if not isinstance(color, list):\n            raise TypeError(\"colors must be a list of lists\")\n        if len(color)!= 2:\n            raise TypeError(\"color must be a list with two elements: color and repeat\")\n    for color, repeat in zip(colors, patterns):\n        if not isinstance(color, list) or not isinstance(repeat, list):\n            raise TypeError(\"color and pattern must be lists\")\n        if len(color)!= 2 or len(repeat)!= 2:\n            raise TypeError(\"color and pattern must be lists with two elements: color and repeat\")\n    #for each color, check if it matches one of the patterns.\n    for color in colors:\n        if not isinstance(color, list) or not isinstance(repeat, list):\n            raise TypeError(\"color and pattern must be lists\")\n        if len(color)!= 2 or len(repeat)!= 2:\n            raise TypeError(\"color and pattern must be lists with two elements: color and repeat\")\n        if not isinstance(repeat[1], int) or repeat[1] <= 0:\n            raise TypeError(\"repeat must be a list with two elements: color and repeat\")\n        if not isinstance(color, list) or not isinstance(repeat[0], list):\n            raise TypeError(\"color and pattern must be lists\")\n        if len(color)!= 2 or len(repeat[0])!= 2:\n            raise TypeError(\"color and pattern must be lists with two elements: color and repeat\")\n        #if color does not match one of the patterns\n        if not any([color == pattern for pattern in patterns]):\n            return False\n    return True\n",
        "num_ids": 572
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if i == 0:\n            if colors == patterns[i]:\n                return True\n        else:\n            if colors == patterns[i] and colors == patterns[i-1]:\n                return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == len(colors):\n            return True\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the colors are the same\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n",
        "num_ids": 42
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Check if the given list is empty\n    if len(test_list) == 0:\n        # Return an empty list\n        return []\n    # Sort the given list of tuples\n    test_list.sort()\n    # Create a new list to store the tuples\n    new_list = []\n    # Iterate over the given list\n    for i in range(len(test_list)):\n        # If we have found a tuple with all elements divisible by K\n        if len(new_list) == 0 and test_list[i][0] % K == 0:\n            # Append the tuple and move to the next element in the list\n            new_list.append(test_list[i])\n            continue\n        # If we have found a tuple which has at least one element divisible by K\n        if len(new_list) == 0 and test_list[i][0] % K!= 0:\n            # Move to the next element in the list\n            continue\n        # If we have found a tuple which has all elements divisible by K\n        if len(new_list) == 0 and test_list[i][0] % K == 0:\n            # Append the tuple and move to the next element in the list\n            new_list.append(test_list[i])\n            continue\n        # If we have found a tuple which has elements divisible by K\n        if len(new_list) == 0 and test_list[i][0] % K!= 0:\n            # Append the tuple and move to the next element in the list\n            new_list.append(test_list[i])\n            continue\n        # If we have found a tuple which has elements divisible by K\n        if len(new_list)!= 0 and test_list[i][0] % K!= 0:\n            # If the current tuple is already in the new_list, then we skip it\n            if test_list[i] in new_list:\n                continue\n            # Otherwise we append the current tuple to the new_list\n            new_list.append(test_list[i])\n        if len(new_list)!= 0 and test_list[i][0] % K == 0:\n            # If the current tuple is already in the new_list, then we skip it\n            if test_list[i] in new_list:\n                continue\n            # Otherwise we append the current tuple to the new_list\n            new_list.append(test_list[i])\n    # Return the new_list\n    return new_list\n",
        "num_ids": 587
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] % K == 0) and (test_list[i][1] % K == 0) and (test_list[j][0] % K == 0) and (test_list[j][1] % K == 0):\n                return test_list[i], test_list[j]\n",
        "num_ids": 113
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_tuples = []\n    for tup in test_list:\n        if (tup[0] % K == 0) and (tup[1] % K == 0):\n            new_tuples.append(tup)\n    return new_tuples\n",
        "num_ids": 65
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    arr = []\n    for i in test_list:\n        temp = []\n        for j in i:\n            if j%K == 0:\n                temp.append(j)\n        if len(temp) == len(i):\n            arr.append(i)\n    return arr\n",
        "num_ids": 69
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[i][2] % K == 0:\n            result.append(test_list[i])\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][j] % K == 0:\n                tuples.append(test_list[i])\n    return tuples\n",
        "num_ids": 70
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    solution = []\n    for i in range(len(test_list)):\n        for j in range(1, len(test_list)):\n            if (test_list[i][j] % K) == 0:\n                solution.append(test_list[i])\n    return solution\n",
        "num_ids": 73
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if (test_list[i][j] % K!= 0):\n                break\n            else:\n                if (j == len(test_list[i]) - 1):\n                    result.append(test_list[i])\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #Initializing result and dict\n    result = []\n    d = {}\n    #Looping through test_list\n    for i in test_list:\n        #Traversing i[0]\n        for j in range(1,len(i)):\n            #Checking if i[j] is divisible by k\n            if i[j] % K == 0:\n                #If divisible then add tuple to result\n                result.append(i)\n    #Looping through result list\n    for i in result:\n        #Checking if tuple is already in dictionary\n        if i in d:\n            #If tuple is already in dictionary add count of same tuple\n            d[i] += 1\n        else:\n            #If tuple is not in dictionary add tuple and 1\n            d[i] = 1\n    return d\n    \ndef find_tuples_improved(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #Initializing result and dict\n    result = []\n    d = {}\n    #Looping through test_list\n    for i in test_list:\n        #Traversing i[0]\n        for j in range(1,len(i)):\n            #Checking if i[j] is divisible by k\n            if i[j] % K == 0:\n                #If divisible then add tuple to result\n                result.append(i)\n    #Looping through result list\n    for i in result:\n        #Checking if tuple is already in dictionary\n        if i in d:\n            #If tuple is already in dictionary add count of same tuple\n            d[i] += 1\n        else:\n            #If tuple is not in dictionary add tuple and 1\n            d[i] = 1\n    return d\n",
        "num_ids": 192
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list_2 = []\n    for i in range(len(test_list)):\n        temp = (test_list[i][0] * K, test_list[i][1] * K, test_list[i][2] * K)\n        test_list_2.append(temp)\n    return test_list_2\n    \ndef find_tuple_sum(test_list, target_sum):\n    '''\n    Write a function to find a tuple in a list of tuples whose sum is equal to a given target sum.\n    '''\n    test_list_2 = []\n    for i in range(len(test_list)):\n        if sum(test_list[i]) == target_sum:\n            test_list_2.append(test_list[i])\n    return test_list_2\n    \ndef remove_tuple(test_list, K):\n    '''\n    Write a function to remove all tuples having numbers divisible by K from a given list of tuples.\n    '''\n    test_list_2 = []\n    for i in range(len(test_list)):\n        if K not in test_list[i]:\n            test_list_2.append(test_list[i])\n    return test_list_2\n    \ndef find_missing_number(test_list):\n    '''\n    Write a function to find the missing number in a list of numbers.\n    '''\n    test_list_2 = []\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list_2:\n            test_list_2.append(test_list[i])\n    for i in range(1, len(test_list_2) + 1):\n        if i not in test_list_2:\n            return i\n            \ndef largest_product(test_list, K):\n    '''\n    Write a function to find the largest product of K consecutive numbers in a list of numbers.\n    '''\n    test_list_2 = []\n    test_list_2 = test_list\n    for i in range(len(test_list)):\n        if test_list_2[i] % K == 0:\n            test_list_2[i] = test_list_2[i] // K\n    for i in range(len(test_list_2)):\n        if test_list_2[i] >= test_list_2[i + 1]:\n            test_list_2[i + 1] = test_list_2[i]\n    return max(test_list_2)\n    \ndef divisors(num):\n    '''\n    Write a function to find all divisors of a given number.\n    '''\n    test_list = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            test_list.append(i)\n    return test_list\n    \ndef check_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    test_list = []\n    for i in range(2, num + 1):\n        if num % i == 0:\n            test_list.append(False)\n            break\n        else:\n            test_list.append(True)\n    if False in test_list:\n        return False\n    else:\n        return True\n        \ndef is_palindrome(test_list):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    test_list_2 = []\n    test_list_2 = test_list[::-1]\n    if test_list == test_list_2:\n        return True\n    else:\n        return False\n    \ndef longest_word(test_list):\n    '''\n    Write a function to find the longest word in a list of words.\n    '''\n    max_word = ''\n    max_length = 0\n    for i in range(len(test_list)):\n        if len(test_list[i]) > max_length:\n            max_length = len(test_list[i])\n            max_word = test_list[i]\n    return max_word\n    \ndef sum_numbers(test_list):\n    '''\n    Write a function to find the sum of all the numbers in a list.\n    '''\n    test_list_2 = []\n    for i in range(len(test_list)):\n        test_list_2.append(test_list[i])\n    return sum(test_list_2)\n    \ndef sum_distinct_numbers(test_list):\n    '''\n    Write a function to find the sum of the distinct numbers in a list.\n    '''\n    test_list_2 = []\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list_2:\n            test_list_2.append(test_list[i])\n    return sum(test_list_2)\n    \ndef longest_palindrome(test_list):\n    '''\n    Write a function to find the longest palindrome in a string.\n    '''\n    test_list_2 = []\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i][::-1]:\n            test_list_2.append(test_list[i])\n    return max(test_list_2)\n    \ndef is_palindrome(test_list):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    test_list_2 = []\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i][::-1]:\n            return True\n        else:\n            return False\n    \ndef test_binary_search_iterative():\n    test_list = [5, 8, 10, 12, 14, 15, 17, 18, 19]\n    search_target = 17\n    test_list_2 = []\n    for i in range(len(test_list)):\n        test_list_2.append(test_list[i])\n    lower_limit = 0\n    upper_limit = len(test_list_2) - 1\n    while lower_limit <= upper_limit:\n        mid = (lower_limit + upper_limit) // 2\n        if test_list_2[mid] == search_target:\n            return True\n        elif test_list_2[mid] > search_target:\n            upper_limit = mid - 1\n        else:\n            lower_limit = mid + 1\n    return False\n    \ndef test_binary_search_recursive():\n    test_list = [5, 8, 10, 12, 14, 15, 17, 18, 19]\n    search_target = 17\n    test_list_2 = []\n    for i in range(len(test_list)):\n        test_list_2.append(test_list[i])\n    lower_limit = 0\n    upper_limit = len(test_list_2) - 1\n    return test_binary_search_recursive_iterative(search_target, lower_limit, upper_limit, test_list_2)\n    \ndef test_binary_search_recursive_iterative(search_target, lower_limit, upper_limit, test_list_2):\n    if lower_limit > upper_limit:\n        return False\n    else:\n        mid = (lower_limit + upper_limit) // 2\n        if test_list_2[mid] == search_target:\n            return True\n        elif test_list_2[mid] > search_target:\n            return test_binary_search_recursive_iterative(search_target, lower_limit, mid - 1, test_list_2)\n        else:\n            return test_binary_search_recursive_iterative(search_target, mid + 1, upper_limit, test_list_2)\n    \ndef test_binary_search_optimized():\n    test_list = [5, 8, 10, 12, 14, 15, 17, 18, 19]\n    search_target = 17\n    test_list_2 = []\n    for i in range(len(test_list)):\n        test_list_2.append(test_list[i])",
        "num_ids": 651
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11 == 0)\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11==0):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11 == 0):\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 28
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return True if n%11 == 0 else False\n",
        "num_ids": 14
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11==0):\n        return True\n    else:\n        return False\n        \nprint(is_Diff(20))\n",
        "num_ids": 35
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    print(s)\n    if len(s) % 2 == 0:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 36
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_len = len(s)\n    if word_len % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 35
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split(\" \")\n    l = []\n    for i in s:\n        l.append(len(i))\n    x = sum(l)\n    print(x)\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.strip()\n    return True if len(s) % 2 == 0 else False\n",
        "num_ids": 25
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Your Code Here\n    \n    if len(s) % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n",
        "num_ids": 39
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n",
        "num_ids": 11
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    \n",
        "num_ids": 32
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n<1:\n        return 0\n    elif n==1:\n        return 4\n    elif n==2:\n        return 6\n    elif n==3:\n        return 4\n    elif n==4:\n        return 6\n    else:\n        return 4*n-6\n",
        "num_ids": 73
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = n*(2*n+1)/2\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    #a = 1\n    #for i in range(1, n):\n    #    a = a*(2*i-1)\n    #return a\n",
        "num_ids": 40
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return tetrahedral_number(n-1) + n\n",
        "num_ids": 32
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # 1, 8, 27, 64, 125, 216, 343, 512, 729,...\n    if n == 0:\n        return 1\n    return 4*nethrahedral_number(n-1) + 1\n    \nprint(tetrahedral_number(8))\nprint(tetrahedral_number(9))\nprint(tetrahedral_number(15))\nprint(tetrahedral_number(24))\nprint(tetrahedral_number(30))\nprint(tetrahedral_number(40))\nprint(tetrahedral_number(48))\nprint(tetrahedral_number(60))\nprint(tetrahedral_number(72))\nprint(tetrahedral_number(90))\nprint(tetrahedral_number(120))\nprint(tetrahedral_number(144))\nprint(tetrahedral_number(168))\nprint(tetrahedral_number(192))\nprint(tetrahedral_number(240))\nprint(tetrahedral_number(288))\nprint(tetrahedral_number(336))\nprint(tetrahedral_number(384))\nprint(tetrahedral_number(432))\nprint(tetrahedral_number(480))\nprint(tetrahedral_number(576))\nprint(tetrahedral_number(648))\nprint(tetrahedral_number(720))\nprint(tetrahedral_number(832))\nprint(tetrahedral_number(864))\nprint(tetrahedral_number(961))\nprint(tetrahedral_number(960))\nprint(tetrahedral_number(1000))\nprint(tetrahedral_number(1088))\nprint(tetrahedral_number(1200))\nprint(tetrahedral_number(1296))\nprint(tetrahedral_number(1394))\nprint(tetrahedral_number(1472))\nprint(tetrahedral_number(1536))\nprint(tetrahedral_number(1584))\nprint(tetrahedral_number(1668))\nprint(tetrahedral_number(1728))\nprint(tetrahedral_number(1776))\nprint(tetrahedral_number(1864))\nprint(tetrahedral_number(1920))\nprint(tetrahedral_number(2032))\nprint(tetrahedral_number(2096))\nprint(tetrahedral_number(2132))\nprint(tetrahedral_number(2184))\nprint(tetrahedral_number(2236))\nprint(tetrahedral_number(2304))\nprint(tetrahedral_number(2356))\nprint(tetrahedral_number(2428))\nprint(tetrahedral_number(2482))\nprint(tetrahedral_number(2544))\nprint(tetrahedral_number(2596))\nprint(tetrahedral_number(2648))\nprint(tetrahedral_number(2716))\nprint(tetrahedral_number(2780))\nprint(tetrahedral_number(2836))\nprint(tetrahedral_number(2882))\nprint(tetrahedral_number(2944))\nprint(tetrahedral_number(2992))\nprint(tetrahedral_number(3052))\nprint(tetrahedral_number(3088))\nprint(tetrahedral_number(3120))\nprint(tetrahedral_number(3152))\nprint(tetrahedral_number(3200))\nprint(tetrahedral_number(3212))\nprint(tetrahedral_number(3264))\nprint(tetrahedral_number(3296))\nprint(tetrahedral_number(3344))\nprint(tetrahedral_number(3388))\nprint(tetrahedral_number(3424))\nprint(tetrahedral_number(3460))\nprint(tetrahedral_number(3472))\nprint(tetrahedral_number(3520))\nprint(tetrahedral_number(3564))\nprint(tetrahedral_number(3596))\nprint(tetrahedral_number(3628))\nprint(tetrahedral_number(3680))\nprint(tetrahedral_number(3727))\nprint(tetrahedral_number(3777))\nprint(tetrahedral_number(3824))\nprint(tetrahedral_number(3876))\nprint(tetrahedral_number(3928))\nprint(tetrahedral_number(3988))\nprint(tetrahedral_number(4040))\nprint(tetrahedral_number(4092))\nprint(tetrahedral_number(4144))\nprint(tetrahedral_number(4192))\nprint(tetrahedral_number(4256))\nprint(tetrahedral_number(4308))\nprint(tetrahedral_number(4384))\nprint(tetrahedral_number(4414))\nprint(tetrahedral_number(4444))\nprint(tetrahedral_number(4496))\nprint(tetrahedral_number(4548))\nprint(tetrahedral_number(4588))\nprint(tetrahedral_number(4608))\nprint(tetrahedral_number(4644))\nprint(tetrahedral_number(4684))\nprint(tetrahedral_number(4729))\nprint(tetrahedral_number(4777))\nprint(tetrahedral_number(4829))\nprint(tetrahedral_number(4891))\nprint(tetrahedral_number(4952))\nprint(tetrahedral_number(4996))\nprint(tetrahedral_number(5056))\nprint(tetrahedral_number(5092))\nprint(tetrahedral_number(5144))\nprint(tetrahedral_number(5192))\nprint(tetrahedral_number(5256))\nprint(tetrahedral_number(5288))\nprint(tetrahedral_number(5336))\nprint(tetrahedral_number(5376))\nprint(tetrahedral_number(5424))\nprint(tetrahedral_number(5480))\nprint(tetrahedral_number(5488))\nprint(tetrahedral_number(5536))\nprint(tetrahedral_number(5584))\nprint(tetrahedral_number(5632))\nprint(tetrahedral_number(5680))\nprint(tetrahedral_number(5728))\nprint(tetrahedral_number(5772))\nprint(tetrahedral_number(5824))\nprint(tetrahedral_number(5876))\nprint(tetrahedral_number(5936))\nprint(tetrahedral_number(5988))\nprint(tetrahedral_number(6040))\nprint(tetrahedral_number(6092))\nprint(tetrahedral_number(6144))\nprint(tetrahedral_number(6192))\nprint(tetrahedral_number(6256))\nprint(tetrahedral_number(6288))\nprint(tetrahedral_number(6336))\nprint(tetrahedral_number(6384))\nprint(tetrahedral_number(6432))\nprint(tetrahedral_number(6480))\nprint(tetrahedral_number(6528))\nprint(tetrahedral_number(6576))\nprint(tetrahedral_number(6624))\nprint(tetrahedral_number(6672))\nprint(tetrahedral_number(6720))\nprint(tetrahedral_number(6768))\nprint(tetrahedral_number(6816))\nprint(tetrahedral_number(6864))\nprint(tetrahedral_number(6912))\nprint(tetrahedral_number(6960))\nprint(tetrahedral_number(6996))\nprint(tetrahedral_number(7044))\nprint(tetrahedral_number(7088))\nprint(tetrahedral_number(7140))\nprint(tetrahedral_number(7196))\nprint(tetrahedral_number(7232))\nprint(tetrahedral_number(7288))\nprint(tetrahedral_number(7336))\nprint(tetrahedral_number(7384)",
        "num_ids": 2015
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    if n == 2:\n        return 6\n    if n == 3:\n        return 8\n    if n == 4:\n        return 10\n    if n == 5:\n        return 12\n    if n == 6:\n        return 14\n    if n == 7:\n        return 16\n    if n == 8:\n        return 18\n    if n == 9:\n        return 20\n    if n == 10:\n        return 22\n    if n == 11:\n        return 24\n    if n == 12:\n        return 26\n    if n == 13:\n        return 28\n    if n == 14:\n        return 30\n    if n == 15:\n        return 32\n    if n == 16:\n        return 34\n    if n == 17:\n        return 36\n    if n == 18:\n        return 38\n    if n == 19:\n        return 40\n    if n == 20:\n        return 42\n    if n == 21:\n        return 44\n    if n == 22:\n        return 46\n    if n == 23:\n        return 48\n    if n == 24:\n        return 50\n    if n == 25:\n        return 52\n    if n == 26:\n        return 54\n    if n == 27:\n        return 56\n    if n == 28:\n        return 58\n    if n == 29:\n        return 60\n    if n == 30:\n        return 62\n    if n == 31:\n        return 64\n    if n == 32:\n        return 66\n    if n == 33:\n        return 68\n    if n == 34:\n        return 70\n    if n == 35:\n        return 72\n    if n == 36:\n        return 74\n    if n == 37:\n        return 76\n    if n == 38:\n        return 78\n    if n == 39:\n        return 80\n    if n == 40:\n        return 82\n    if n == 41:\n        return 84\n    if n == 42:\n        return 86\n    if n == 43:\n        return 88\n    if n == 44:\n        return 90\n    if n == 45:\n        return 92\n    if n == 46:\n        return 94\n    if n == 47:\n        return 96\n    if n == 48:\n        return 98\n    if n == 49:\n        return 100\n    if n == 50:\n        return 102\n    if n == 51:\n        return 104\n    if n == 52:\n        return 106\n    if n == 53:\n        return 108\n    if n == 54:\n        return 110\n    if n == 55:\n        return 112\n    if n == 56:\n        return 114\n    if n == 57:\n        return 116\n    if n == 58:\n        return 118\n    if n == 59:\n        return 120\n    if n == 60:\n        return 122\n    if n == 61:\n        return 124\n    if n == 62:\n        return 126\n    if n == 63:\n        return 128\n    if n == 64:\n        return 130\n    if n == 65:\n        return 132\n    if n == 66:\n        return 134\n    if n == 67:\n        return 136\n    if n == 68:\n        return 138\n    if n == 69:\n        return 140\n    if n == 70:\n        return 142\n    if n == 71:\n        return 144\n    if n == 72:\n        return 146\n    if n == 73:\n        return 148\n    if n == 74:\n        return 150\n    if n == 75:\n        return 152\n    if n == 76:\n        return 154\n    if n == 77:\n        return 156\n    if n == 78:\n        return 158\n    if n == 79:\n        return 160\n    if n == 80:\n        return 162\n    if n == 81:\n        return 164\n    if n == 82:\n        return 166\n    if n == 83:\n        return 168\n    if n == 84:\n        return 170\n    if n == 85:\n        return 172\n    if n == 86:\n        return 174\n    if n == 87:\n        return 176\n    if n == 88:\n        return 178\n    if n == 89:\n        return 180\n    if n == 90:\n        return 182\n    if n == 91:\n        return 184\n    if n == 92:\n        return 186\n    if n == 93:\n        return 188\n    if n == 94:\n        return 190\n    if n == 95:\n        return 192\n    if n == 96:\n        return 194\n    if n == 97:\n        return 196\n    if n == 98:\n        return 198\n    if n == 99:\n        return 200\n    if n == 100:\n        return 202\n    if n == 101:\n        return 204\n    if n == 102:\n        return 206\n    if n == 103:\n        return 208\n    if n == 104:\n        return 210\n    if n == 105:\n        return 212\n    if n == 106:\n        return 214\n    if n == 107:\n        return 216\n    if n == 108:\n        return 218\n    if n == 109:\n        return 220\n    if n == 110:\n        return 222\n    if n == 111:\n        return 224\n    if n == 112:\n        return 226\n    if n == 113:\n        return 228\n    if n == 114:\n        return 230\n    if n == 115:\n        return 232\n    if n == 116:\n        return 234\n    if n == 117:\n        return 236\n    if n == 118:\n        return 238\n    if n == 119:\n        return 240\n    if n == 120:\n        return 242\n    if n == 121:\n        return 244\n    if n == 122:\n        return 246\n    if n == 123:\n        return 248\n    if n == 124:\n        return 250\n    if n == 125:\n        return 252\n    if n == 126:\n        return 254\n    if n == 127:\n        return 256\n    if n == 128:\n        return 258\n    if n == 129:\n        return 260\n    if n == 130:\n        return 262\n    if n == 131:\n        return 264\n    if n == 132:\n        return 266\n    if n == 133:\n        return 268\n    if n == 134:\n        return 270\n    if n == 135:\n        return 272\n    if n == 136:\n        return 274\n    if n == 137:\n        return 276\n    if n == 138:\n        return 278\n    if n == 139:\n        return 280\n    if n == 140:\n        return 282\n    if n == 141:\n        return 284\n    if n == 142:\n        return 286\n    if n == 143:\n        return 288\n    if n == 144:\n        return 290\n    if n == 145:\n        return 292\n    if n == 146:\n        return 294\n    if n == 147:\n        return 296\n    if n == 148:\n        return 298\n    if n == 149:\n        return 300\n    if n == 150:\n        return 302\n    if n == 151:\n        return 304\n    if n == 152:\n        return 306\n    if n == 153:\n        return 308\n    if n == 154:\n        return 310\n    if n == 155:\n        return 312\n    if n == 156:\n        return 314\n    if n == 157:\n        return 316\n    if n == 158:\n        return 318\n    if n == 159:\n        return 320\n    if n == 160:\n        return 322\n    if n == 161:\n        return 324\n    if n == 162:\n        return 326\n    if n == 163:\n        return 328\n    if n == 164:\n        return 330\n    if n == 165:\n        return 332\n    if n == 166:\n        return 334\n    if n == 167:\n        return 336\n    if n == 168:\n        return 338\n    if n == 169:\n        return 340\n    if n == 170:\n        return 342\n    if n == 171:\n        return 344\n    if n == 172:\n        return 346\n    if n == 173:\n        return 348\n    if n == 174:\n        return 350\n    if n == 175:\n        return 352\n    if n == 176:\n        return 354\n    if n == 177:\n        return 356\n    if n == 178:\n        return 358\n    if n == 179:\n        return 360\n    if n == 180:\n        return 362\n    if n == 181:\n        return 364\n    if n == 182:\n        return 366\n    if n == 183:\n        return 368",
        "num_ids": 2015
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers = [1, 2]\n    for i in range(n-1):\n        numbers.append(sum(numbers))\n    return numbers[n-1]\n",
        "num_ids": 44
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    if n == 2:\n        return 6\n    if n == 3:\n        return 4\n",
        "num_ids": 35
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3)//6\n",
        "num_ids": 24
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 10\n    else:\n        for i in range(1, n+1):\n            if tetrahedral_number(i-1) % 2 == 1:\n                return tetrahedral_number(i)\n",
        "num_ids": 95
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3*pi*r*r*r\n",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = (4/3)*math.pi*r**3\n    return volume_sphere\n",
        "num_ids": 28
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n",
        "num_ids": 17
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4.0/3.0) * math.pi * (r ** 3)\n    return volume\n",
        "num_ids": 29
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume\n",
        "num_ids": 29
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r<0:\n        raise ValueError(\"Error: Radius must be positive\")\n    v=4/3*math.pi*r**3\n    return v\n",
        "num_ids": 41
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    volume = 4/3 * math.pi * r ** 3\n    return volume\n    \n    \ndef circle_circle_intersection(r1, r2):\n    '''\n    Write a function to find the center of a circle and its radius and a circle and its radius.\n    '''\n    import math\n    distance = math.sqrt(r1 ** 2 + r2 ** 2 - 2 * r1 * r2 * math.cos(math.radians(180)))\n    center = (r1 ** 2 - distance ** 2) / (2 * r1), (r2 ** 2 - distance ** 2) / (2 * r2), distance\n    radius = math.sqrt((r1 ** 2) - (center[0] ** 2)), math.sqrt((r2 ** 2) - (center[1] ** 2))\n    return center, radius\n    \n    \ndef circle_circle_intersection2(r1, r2):\n    '''\n    Write a function to find the center of a circle and its radius and a circle and its radius.\n    '''\n    import math\n    d = r1 ** 2 + r2 ** 2 - 2 * r1 * r2 * math.cos(math.radians(180))\n    x = (r1 ** 2) - (d ** (1/2))\n    y = (r2 ** 2) - (d ** (1/2))\n    center = (x, y), (r1 ** 2 - x ** 2), (r2 ** 2 - y ** 2)\n    return center\n    \n    \ndef factorial(n):\n    '''\n    Write a function factorial that takes an integer argument and returns the product of the integers from 1 to n.\n    '''\n    import math\n    if n < 0:\n        raise ValueError('Factorial does not exist for negative numbers.')\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n        \n    \ndef factorial_recursive(n):\n    '''\n    Write a function factorial that takes an integer argument and returns the product of the integers from 1 to n.\n    '''\n    if n < 0:\n        raise ValueError('Factorial does not exist for negative numbers.')\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n - 1)\n        \n    \ndef quadratic_roots(a, b, c):\n    '''\n    Write a function quadratic_roots that takes three real numbers and returns an ordered list of roots.\n    '''\n    import math\n    try:\n        d = b ** 2 - 4 * a * c\n        \n        if d == 0:\n            r1 = (-b) / (2 * a)\n            r2 = r1\n            return [r1, r2]\n        elif d > 0:\n            r1 = (-b - math.sqrt(d)) / (2 * a)\n            r2 = (-b + math.sqrt(d)) / (2 * a)\n            return [r1, r2]\n        else:\n            return 'Quadratic equation not solvable.'\n            \n    except ZeroDivisionError:\n        return 'Quadratic equation not solvable.'\n    \n    \ndef quadratic_roots_2(a, b, c):\n    '''\n    Write a function quadratic_roots that takes three real numbers and returns an ordered list of roots.\n    '''\n    import math\n    try:\n        d = b ** 2 - 4 * a * c\n        \n        if d == 0:\n            r1 = (-b) / (2 * a)\n            r2 = r1\n            return [r1, r2]\n        elif d > 0:\n            r1 = (-b - math.sqrt(d)) / (2 * a)\n            r2 = (-b + math.sqrt(d)) / (2 * a)\n            return [r1, r2]\n        else:\n            return 'Quadratic equation not solvable.'\n            \n    except ZeroDivisionError:\n        return 'Quadratic equation not solvable.'\n    \n    \ndef nth_root(n, r, e):\n    '''\n    Write a function nth_root that takes a number n, an integer root r, and an exponent e and returns the\n    nth root of r to the power of e.\n    '''\n    import math\n    try:\n        return math.pow(r, e/n)\n        \n    except ZeroDivisionError:\n        return 'Not a valid value.'\n    \n    \ndef area_triangle(a, h):\n    '''\n    Write a function area_triangle that takes three real numbers and returns the area of a triangle.\n    '''\n    import math\n    a = math.sqrt(a ** 2 + h ** 2) / 2\n    return a\n    \n    \ndef area_triangle_2(a, b, c):\n    '''\n    Write a function area_triangle that takes three real numbers and returns the area of a triangle.\n    '''\n    import math\n    a = math.sqrt(a ** 2 + b ** 2 + c ** 2) / 2\n    return a\n    \n    \ndef is_prime(n):\n    '''\n    Write a function is_prime that takes an integer argument and returns True if the integer is prime,\n    otherwise return False.\n    '''\n    import math\n    if n == 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, math.ceil(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n        \n        \ndef is_prime_2(n):\n    '''\n    Write a function is_prime that takes an integer argument and returns True if the integer is prime,\n    otherwise return False.\n    '''\n    import math\n    if n == 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, math.ceil(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n        \n    \ndef is_prime_3(n):\n    '''\n    Write a function is_prime that takes an integer argument and returns True if the integer is prime,\n    otherwise return False.\n    '''\n    import math\n    if n < 1:\n        return False\n    elif n == 1:\n        return False\n    else:\n        if n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, math.ceil(math.sqrt(n)) + 1, 2):\n                if n % i == 0:\n                    return False\n            return True\n            \n    \ndef is_prime_4(n):\n    '''\n    Write a function is_prime that takes an integer argument and returns True if the integer is prime,\n    otherwise return False.\n    '''\n    import math\n    if n < 1:\n        return False\n    elif n == 1:\n        return False\n    else:\n        if n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for i in range(3, math.ceil(math.sqrt(n)) + 1, 2):\n                if n % i == 0:\n                    return False\n            return True\n        \n    \ndef list_primes(n):\n    '''\n    Write a function list_primes that takes an integer argument and returns a list of prime integers from 2 to\n    n.\n    '''\n    import math\n    primes = [2]\n    for i in range(3, n, 2):\n        flag = True\n        for j in primes:\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(i)\n    return primes\n    \n    \ndef list_primes_2(n):\n    '''\n    Write a function list_primes that takes an integer argument and returns a list of prime integers from 2 to\n    n.\n    '''\n    import math\n    primes = []\n    for i in range(2, n):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n            ",
        "num_ids": 49
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n",
        "num_ids": 19
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = strr.lower()\n    l = list(s)\n    c = 26\n    for i in range(0,len(s)):\n        c += ord(l[i])\n    return c % 26\n",
        "num_ids": 54
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #s = input()\n    #print(chr(ord(s[0])+ord(s[1])+ord(s[2])+ord(s[3])+ord(s[4])+ord(s[5])+ord(s[6])+ord(s[7])+ord(s[8])+ord(s[9])+ord(s[10])+ord(s[11])+ord(s[12])+ord(s[13])+ord(s[14])+ord(s[15])+ord(s[16])+ord(s[17])+ord(s[18])+ord(s[19])+ord(s[20])+ord(s[21])+ord(s[22])+ord(s[23])+ord(s[24])+ord(s[25])+ord(s[26]))\n    \n    #or\n    #print(chr(ord(strr[0])+ord(strr[1])+ord(strr[2])+ord(strr[3])+ord(strr[4])+ord(strr[5])+ord(strr[6])+ord(strr[7])+ord(strr[8])+ord(strr[9])+ord(strr[10])+ord(strr[11])+ord(strr[12])+ord(strr[13])+ord(strr[14])+ord(strr[15])+ord(strr[16])+ord(strr[17])+ord(strr[18])+ord(strr[19])+ord(strr[20])+ord(strr[21])+ord(strr[22])+ord(strr[23])+ord(strr[24])+ord(strr[25])+ord(strr[26]))\n    #or\n    #print(chr(int(strr[0])+int(strr[1])+int(strr[2])+int(strr[3])+int(strr[4])+int(strr[5])+int(strr[6])+int(strr[7])+int(strr[8])+int(strr[9])+int(strr[10])+int(strr[11])+int(strr[12])+int(strr[13])+int(strr[14])+int(strr[15])+int(strr[16])+int(strr[17])+int(strr[18])+int(strr[19])+int(strr[20])+int(strr[21])+int(strr[22])+int(strr[23])+int(strr[24])+int(strr[25])+int(strr[26]))\n    \n    #or\n    #print(ord(strr[0])+ord(strr[1])+ord(strr[2])+ord(strr[3])+ord(strr[4])+ord(strr[5])+ord(strr[6])+ord(strr[7])+ord(strr[8])+ord(strr[9])+ord(strr[10])+ord(strr[11])+ord(strr[12])+ord(strr[13])+ord(strr[14])+ord(strr[15])+ord(strr[16])+ord(strr[17])+ord(strr[18])+ord(strr[19])+ord(strr[20])+ord(strr[21])+ord(strr[22])+ord(strr[23])+ord(strr[24])+ord(strr[25])+ord(strr[26]))\n    \n    #or\n    #print(ord(strr[0])+ord(strr[1])+ord(strr[2])+ord(strr[3])+ord(strr[4])+ord(strr[5])+ord(strr[6])+ord(strr[7])+ord(strr[8])+ord(strr[9])+ord(strr[10])+ord(strr[11])+ord(strr[12])+ord(strr[13])+ord(strr[14])+ord(strr[15])+ord(strr[16])+ord(strr[17])+ord(strr[18])+ord(strr[19])+ord(strr[20])+ord(strr[21])+ord(strr[22])+ord(strr[23])+ord(strr[24])+ord(strr[25])+ord(strr[26]))\n    \n    #or\n    #print(int(strr[0])+int(strr[1])+int(strr[2])+int(strr[3])+int(strr[4])+int(strr[5])+int(strr[6])+int(strr[7])+int(strr[8])+int(strr[9])+int(strr[10])+int(strr[11])+int(strr[12])+int(strr[13])+int(strr[14])+int(strr[15])+int(strr[16])+int(strr[17])+int(strr[18])+int(strr[19])+int(strr[20])+int(strr[21])+int(strr[22])+int(strr[23])+int(strr[24])+int(strr[25])+int(strr[26]))\n    \n    \n    \n    #or\n    #print(int(strr[0])+int(strr[1])+int(strr[2])+int(strr[3])+int(strr[4])+int(strr[5])+int(strr[6])+int(strr[7])+int(strr[8])+int(strr[9])+int(strr[10])+int(strr[11])+int(strr[12])+int(strr[13])+int(strr[14])+int(strr[15])+int(strr[16])+int(strr[17])+int(strr[18])+int(strr[19])+int(strr[20])+int(strr[21])+int(strr[22])+int(strr[23])+int(strr[24])+int(strr[25])+int(strr[26]))\n    \n    \n    #or\n    #print(int(strr[0])+int(strr[1])+int(strr[2])+int(strr[3])+int(strr[4])+int(strr[5])+int(strr[6])+int(strr[7])+int(strr[8])+int(strr[9])+int(strr[10])+int(strr[11])+int(strr[12])+int(strr[13])+int(strr[14])+int(strr[15])+int(strr[16])+int(strr[17])+int(strr[18])+int(strr[19])+int(strr[20])+int(strr[21])+int(strr[22])+int(strr[23])+int(strr[24])+int(strr[25])+int(strr[26]))\n    \n    #or\n    #print(int(strr[0])+int(strr[1])+int(strr[2])+int(strr[3])+int(strr[4])+int(strr[5])+int(strr[6])+int(strr[7])+int(strr[8])+int(strr[9])+int(strr[10])+int(strr[11])+int(strr[12])+int(strr[13])+int(strr[14])+int(strr[15])+int(strr[16])+int(strr[17])+int(strr[18])+int(strr[19])+int(strr[20])+int(strr[21])+int(strr[22])+int(strr",
        "num_ids": 2003
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_table = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106,\n    'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116,\n    'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    total = 0\n    for i in range(len(strr)):\n        total += ASCII_table[strr[i]]\n    total = total % 26\n    return chr(total + 97)\n",
        "num_ids": 190
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    return (ord(strr) + ord('a') - ord('a') % 26)\n    \n",
        "num_ids": 28
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    val = 0\n    for i in strr:\n        val += ord(i)\n    return val % 26\n",
        "num_ids": 29
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = res + ord(i)\n    return res%26\n",
        "num_ids": 31
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    res = 0\n    for char in strr:\n        res = res + ord(char)\n        res = res % 26\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(\"\\n\")\n    for i in range(len(strr)):\n        print(\"ASCII value of %c is %d\" % (strr[i], ord(strr[i])), end = \" \")\n        print(\"and ASCII value of %c modulus 26 is %d\" % (strr[i], ord(strr[i]) % 26))\n",
        "num_ids": 90
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr)%26\n",
        "num_ids": 12
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #def get_Char(strr):\n    if not isinstance(strr, str):\n        return -1\n",
        "num_ids": 30
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 0: return 0\n    if n == 1: return 1\n    \n    return sequence(n-1) + sequence(n-2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2015
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1:\n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 47
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        print('Sorry, you must enter a positive integer greater than 0')\n        return\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    \n    i = 1\n    while i < n:\n        i += 1\n        last = 1\n        next = 2\n        if i % 2 == 1:\n            last = 4\n        next = (next + last)\n    return next\n",
        "num_ids": 117
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    lst = list()\n    lst.append(0)\n    lst.append(1)\n    for i in range(2,n):\n        lst.append(lst[i-2] + lst[i-1])\n    return lst[n-1]\n",
        "num_ids": 70
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return newman(sequence(n-1) + sequence(n-2))\n",
        "num_ids": 60
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    from math import sqrt\n    #input for number\n    n = int(n)\n    #init sequence\n    seq = 0\n    #genration of sequence\n    while seq < n:\n        yield seq\n        seq = (sqrt(5)*seq - 4) / 2\n        \n        \ndef main():\n    print(sequence(100))\n    \nmain()",
        "num_ids": 88
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    return n * sequence(n - 1)\n",
        "num_ids": 24
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (n*(n+1))/2\n",
        "num_ids": 15
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    result = 1\n    for i in range(1, n):\n        result = result * 2 + 1\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = math.pow(r, 2)\n    return 4 * math.pi * (r)\n",
        "num_ids": 27
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n",
        "num_ids": 23
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * math.pow(r, 2)\n",
        "num_ids": 20
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    return 4 * math.pi * r**2\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n    \n    \ndef surfacearea_cone(h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (2 * math.pi * h * (r**2)) + (2 * math.pi * h * (r**2))\n    \n    \ndef surfacearea_cylinder(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * (r**2) + 2 * math.pi * (h**2)\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n    \n    \ndef volume_cone(h, r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * (h * (r**2))\n    \n    \ndef volume_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * (r**2) * h\n    \n    \ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * math.pi * a**2\n    \n    \ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return 6 * math.pi * a**3\n    \n    \ndef surfacearea_pyramid(b, h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return (1/3) * math.pi * (b**2) + (2/3) * math.pi * (h**2)\n    \n    \ndef volume_pyramid(b, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 1/3 * math.pi * (b**2) + 2/3 * math.pi * (h**3)\n    \n    \ndef surfacearea_hypercube(d):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (6 * math.pi * d**2)\n    \n    \ndef volume_hypercube(d):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (d**3)\n    \n    \ndef surfacearea_kite(l, b):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (2 * math.pi * (l + b) * b) + (2 * math.pi * (l + b) * b)\n    \n    \ndef volume_kite(l, b):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (l + b) * (l + b)\n    \n    \ndef surfacearea_prism(l, b):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (2 * math.pi * (l + b) * b) + (2 * math.pi * l * (l + b) + 2 * math.pi * b * (l + b))\n    \n    \ndef volume_prism(l, b):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (l * l + b * b)\n    \n    \ndef surfacearea_cylinder(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2 * math.pi * h) + (2 * math.pi * r * 2)\n    \n    \ndef volume_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (2 * math.pi * h) + (2 * math.pi * r * h)\n    \n    \ndef surfacearea_sphere_icosahedron(r):\n    '''\n    Write a function to find the surface area of a icosahedron.\n    '''\n    return (3/5) * (4 * math.pi * (r**3))\n    \n    \ndef volume_sphere_icosahedron(r):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return (3/5) * (4 * math.pi * (r**3))\n    \n    \ndef surfacearea_sphere_octahedron(r):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    return (4 * math.pi * (r**3)) + (2 * math.pi * (r**2))\n    \n    \ndef volume_sphere_octahedron(r):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    return (4 * math.pi * (r**3)) + (2 * math.pi * (r**2))\n    \n    \ndef surfacearea_dodecahedron(r):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (5 * math.pi * (r**3)) + (2 * math.pi * (r**2))\n    \n    \ndef volume_dodecahedron(r):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return (5 * math.pi * (r**3)) + (2 * math.pi * (r**2))\n    \n    \ndef surfacearea_icosahedron(r):\n    '''\n    Write a function to find the surface area of a icosahedron.\n    '''\n    return (5 * math.pi * (r**3)) + (2 * math.pi * (r**2))\n    \n    \ndef volume_icosahedron(r):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return (5 * math.pi * (r**3)) + (2 * math.pi * (r**2))\n    \n    \ndef surfacearea_pyramid_icosahedron(b, h):\n    '''\n    Write a function to find the surface area of a pyramid icosahedron.\n    '''\n    return (1/4) * (math.pi * (b**2)) + (1/2) * (math.pi * (h**2))\n    \n    \ndef volume_pyramid_icosahedron(b, h):\n    '''\n    Write a function to find the volume of a pyramid icosahedron.\n    '''\n    return (1/4) * math.pi * (b**2) + (1/2) * math.pi * (h**3)\n    \n    \ndef surfacearea_pyramid_octahedron(b, h):\n    '''\n    Write a function to find the surface area of a pyramid octahedron.\n    '''\n    return (1/2) * (math.pi * (b**2)) + (2/3) * (math.pi * (h**2))\n    \n    \ndef volume_pyramid_octahedron(b, h):\n    '''\n    Write a function to find the volume of a pyramid octahedron.\n    '''\n    return (1/2) * math.pi * (b**2) + (2/3) * math.pi * (h**3)\n    \n    \ndef surfacearea_pyramid_dodecahedron(b, h):\n    '''\n    Write a function to find the surface area of a pyramid dodecahedron.\n    '''\n    return (1/3) * (math.pi * (b**2)) + (2/3) * (math.pi * (h**2))\n    \n    \ndef volume_pyramid_dodecahedron(b, h):\n    '''\n    Write a function to find the volume of a pyramid dodecahedron.\n    '''\n    return (1/3) * math.p",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n    area = 4*math.pi*(r**2)\n    return area\n",
        "num_ids": 24
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 / 3) * math.pi * r ** 3\ndef volume_cone(r1, r2):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r1 ** 2 + r2 ** 2) * (r2 ** 2 - r1 ** 2) / 4\ndef surfacearea_cone(r1, r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (math.pi * r1 * r2) + (2 * math.pi * r1 * (r1 ** 2 - r2 ** 2))\ndef surfacearea_cylinder(r1, r2):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r1 + (math.pi * r1 ** 2) + 2 * math.pi * r2 + (math.pi * r2 ** 2)\ndef volume_cylinder(r1, r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 2 * math.pi * (r1 ** 2) + (2 * math.pi * r1 * (r1 ** 2 - r2 ** 2)) + 2 * math.pi * (r2 ** 2)\ndef surfacearea_rectangle(l, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2 * (l * b)\ndef volume_rectangle(l, b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return l * b\ndef surfacearea_parallelogram(b, h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return (2 * b) + (2 * h)\ndef volume_parallelogram(b, h):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return b * h\ndef surfacearea_trapezium(a, b, h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    return (((a + b) * h) / 2) + (((a + b) * h) / 2)\ndef volume_trapezium(a, b, h):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    return ((a + b) * h) / 2\ndef surfacearea_pyramid(a, h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return (((a ** 2) * h) / 3) + (((a ** 2) * h) / 3)\ndef volume_pyramid(a, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((a ** 2) * h) / 3\ndef surfacearea_conehead(r1, r2, h):\n    '''\n    Write a function to find the surface area of a conehead.\n    '''\n    return (2 * math.pi * (r1 + r2) * h) + (2 * math.pi * (r1 ** 2 + r2 ** 2))\ndef volume_conehead(r1, r2, h):\n    '''\n    Write a function to find the volume of a conehead.\n    '''\n    return ((2 * math.pi * (r1 + r2)) * h) / 3\ndef surfacearea_cylinderhead(r1, r2, h):\n    '''\n    Write a function to find the surface area of a cylinderhead.\n    '''\n    return (2 * math.pi * (r1 ** 2 + r2 ** 2)) + (2 * math.pi * (r1 ** 2 + r2 ** 2))\ndef volume_cylinderhead(r1, r2, h):\n    '''\n    Write a function to find the volume of a cylinderhead.\n    '''\n    return (2 * math.pi * (r1 ** 2 + r2 ** 2)) * h / 3\ndef surfacearea_pyramidhead(a, h):\n    '''\n    Write a function to find the surface area of a pyramidhead.\n    '''\n    return ((2 * a) * h)\ndef volume_pyramidhead(a, h):\n    '''\n    Write a function to find the volume of a pyramidhead.\n    '''\n    return ((2 * a) * h) / 3\ndef surfacearea_octahedron(r):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return ((4 * math.pi * r ** 3) / 3)\ndef volume_octahedron(r):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    return ((4 * math.pi * r ** 3) / 3) * 6\ndef surfacearea_rhombus(b, h):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return (2 * b) + (2 * h)\ndef volume_rhombus(b, h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return (2 * b) * h\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 / 3) * math.pi * r ** 3\ndef surfacearea_sphere_tetrahedron(r):\n    '''\n    Write a function to find the surface area of a sphere\n    '''\n    return (4 * math.pi * r ** 3) + (4 * math.pi * r ** 2)\ndef volume_sphere_tetrahedron(r):\n    '''\n    Write a function to find the volume of a sphere\n    '''\n    return (4 / 3) * math.pi * r ** 3\ndef surfacearea_tetrahedron(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return ((4 * math.pi * r1 * r2 * r3) / 3) + ((4 * math.pi * r1 * r2 * r3) / 3)\ndef volume_tetrahedron(r1, r2, r3):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return ((4 / 3) * math.pi * r1 * r2 * r3)\ndef surfacearea_tetrahedron_square(r1, r2, r3, r4):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return ((4 * math.pi * r1 * r2 * r3 * r4) / 3) + ((4 * math.pi * r1 * r2 * r3 * r4) / 3)\ndef volume_tetrahedron_square(r1, r2, r3, r4):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return ((4 / 3) * math.pi * r1 * r2 * r3 * r4)\ndef surfacearea_tetrahedron_cube(r1, r2, r3, r4, r5):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return ((4 * math.pi * r1 * r2 * r3 * r4 * r5) / 3) + ((4 * math.pi * r1 * r2 * r3 * r4 * r5) / 3)\ndef volume_tetrahedron_cube(r1, r2, r3, r4, r5):\n    '''\n    Write a function to find the volume of a tetrahedron.",
        "num_ids": 17
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * math.pi) * (r ** 2)\n    return area\n",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #import math\n    res = 0\n    #n = int(input(\"Enter the number: \"))\n    for i in range(1, n + 1):\n        x = (i - 1) * 6 * (i - 1)\n        res += math.sqrt(3) * ((i - 1) / 2) * x\n    print(res)\n",
        "num_ids": 85
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n ** 2 * (1 + 1 / 4)\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n * (3*n - 1)) / 2) + ((n-1) * (n-1) / 2)\n",
        "num_ids": 33
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_rec(n, nth):\n        if nth == 1:\n            return 1\n        if nth == 2:\n            return 3\n        if nth == 3:\n            return 6\n        return centered_hexagonal_number_rec(n-1, nth-2) + 2 * centered_hexagonal_number_rec(n-1, nth-1) + 4 * centered_hexagonal_number_rec(n-1, nth)\n    return centered_hexagonal_number_rec(n, nth)\n",
        "num_ids": 133
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = 0\n    while n >= 0:\n        num += 1\n        n = (n - (1/2)) * 3\n    return num\n",
        "num_ids": 37
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = 1\n    for i in range(n):\n        result = result + 6*n - 2*i\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(hex(n)[-2:])\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum(6 * k * (k-1) ** 2 for k in range(n))\n",
        "num_ids": 25
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(n+1))/2\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1.5\n    elif n==3:\n        return 2.5\n    else:\n        return ((1.5)**n) - ((1.0)**n)/2\n",
        "num_ids": 66
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    print(dict1)\n    print(dict2)\n    print(dict3)\n",
        "num_ids": 23
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1, **dict2, **dict3)\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n",
        "num_ids": 42
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #dict1 = {}\n    #dict2 = {}\n    #dict3 = {}\n    res = {}\n    res.update(dict1)\n    res.update(dict2)\n    res.update(dict3)\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # dict3=dict1.update(dict2)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.update(dict3)\n    # dict3.updat",
        "num_ids": 2003
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    return dict1.update(dict2,dict3)\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic = {}\n    dic.update(dict1)\n    dic.update(dict2)\n    dic.update(dict3)\n    return dic\n",
        "num_ids": 43
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    dict = {}\n    dict.update(dict1)\n    dict.update(dict2)\n    dict.update(dict3)\n    return dict\n",
        "num_ids": 40
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n",
        "num_ids": 28
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    d.update(dict1)\n    d.update(dict2)\n    d.update(dict3)\n    return d\n",
        "num_ids": 38
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    c = collections.Counter(list1)\n    for k, v in c.items():\n        print(k,v)\n        \n",
        "num_ids": 34
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict.keys():\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 63
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for key in list1:\n        if key in my_dict:\n            my_dict[key] += 1\n        else:\n            my_dict[key] = 1\n    return my_dict\n",
        "num_ids": 56
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # If no elements present\n    if not list1:\n        return None\n    # If only 1 element present\n    if len(list1) == 1:\n        return {list1[0]:1}\n    # Else\n    return {x:list1.count(x) for x in list1}\n",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    a_dict = dict()\n    a_list = []\n    for i in list1:\n        a_list.append(i)\n    for i in a_list:\n        if i in a_dict.keys():\n            a_dict[i] += 1\n        else:\n            a_dict[i] = 1\n    return a_dict\n",
        "num_ids": 85
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list_frequency = {}\n    for i in list1:\n        if i in list_frequency:\n            list_frequency[i] += 1\n        else:\n            list_frequency[i] = 1\n    return list_frequency\n",
        "num_ids": 56
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    x = collections.Counter(list1)\n    return x\nprint(freq_count([10,20,10,10,10,20,10,20,20]))\nprint(freq_count([10,20,10,10,10,20,20,20]))\n",
        "num_ids": 69
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        if list1[i] in freq:\n            freq[list1[i]] += 1\n        else:\n            freq[list1[i]] = 1\n    return freq\n",
        "num_ids": 66
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dict={}\n    for word in list1:\n        if word in frequency_dict:\n            frequency_dict[word]+=1\n        else:\n            frequency_dict[word]=1\n    return frequency_dict\n",
        "num_ids": 55
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return None\n    left, right = 0, N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid > N:\n            right = mid - 1\n        elif mid * mid == N:\n            return mid\n        else:\n            left = mid + 1\n    return left\n",
        "num_ids": 85
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 3\n    if N == 4:\n        return 4\n    if N == 5:\n        return 5\n    if N == 6:\n        return 6\n    if N == 7:\n        return 7\n    if N == 8:\n        return 8\n    if N == 9:\n        return 9\n    if N == 10:\n        return 10\n    if N == 11:\n        return 11\n    if N == 12:\n        return 12\n    if N == 13:\n        return 13\n    if N == 14:\n        return 14\n    if N == 15:\n        return 15\n    if N == 16:\n        return 16\n    if N == 17:\n        return 17\n    if N == 18:\n        return 18\n    if N == 19:\n        return 19\n    if N == 20:\n        return 20\n    if N == 21:\n        return 21\n    if N == 22:\n        return 22\n    if N == 23:\n        return 23\n    if N == 24:\n        return 24\n    if N == 25:\n        return 25\n    if N == 26:\n        return 26\n    if N == 27:\n        return 27\n    if N == 28:\n        return 28\n    if N == 29:\n        return 29\n    if N == 30:\n        return 30\n    if N == 31:\n        return 31\n    if N == 32:\n        return 32\n    if N == 33:\n        return 33\n    if N == 34:\n        return 34\n    if N == 35:\n        return 35\n    if N == 36:\n        return 36\n    if N == 37:\n        return 37\n    if N == 38:\n        return 38\n    if N == 39:\n        return 39\n    if N == 40:\n        return 40\n    if N == 41:\n        return 41\n    if N == 42:\n        return 42\n    if N == 43:\n        return 43\n    if N == 44:\n        return 44\n    if N == 45:\n        return 45\n    if N == 46:\n        return 46\n    if N == 47:\n        return 47\n    if N == 48:\n        return 48\n    if N == 49:\n        return 49\n    if N == 50:\n        return 50\n    if N == 51:\n        return 51\n    if N == 52:\n        return 52\n    if N == 53:\n        return 53\n    if N == 54:\n        return 54\n    if N == 55:\n        return 55\n    if N == 56:\n        return 56\n    if N == 57:\n        return 57\n    if N == 58:\n        return 58\n    if N == 59:\n        return 59\n    if N == 60:\n        return 60\n    if N == 61:\n        return 61\n    if N == 62:\n        return 62\n    if N == 63:\n        return 63\n    if N == 64:\n        return 64\n    if N == 65:\n        return 65\n    if N == 66:\n        return 66\n    if N == 67:\n        return 67\n    if N == 68:\n        return 68\n    if N == 69:\n        return 69\n    if N == 70:\n        return 70\n    if N == 71:\n        return 71\n    if N == 72:\n        return 72\n    if N == 73:\n        return 73\n    if N == 74:\n        return 74\n    if N == 75:\n        return 75\n    if N == 76:\n        return 76\n    if N == 77:\n        return 77\n    if N == 78:\n        return 78\n    if N == 79:\n        return 79\n    if N == 80:\n        return 80\n    if N == 81:\n        return 81\n    if N == 82:\n        return 82\n    if N == 83:\n        return 83\n    if N == 84:\n        return 84\n    if N == 85:\n        return 85\n    if N == 86:\n        return 86\n    if N == 87:\n        return 87\n    if N == 88:\n        return 88\n    if N == 89:\n        return 89\n    if N == 90:\n        return 90\n    if N == 91:\n        return 91\n    if N == 92:\n        return 92\n    if N == 93:\n        return 93\n    if N == 94:\n        return 94\n    if N == 95:\n        return 95\n    if N == 96:\n        return 96\n    if N == 97:\n        return 97\n    if N == 98:\n        return 98\n    if N == 99:\n        return 99\n    if N == 100:\n        return 100\n    if N == 101:\n        return 101\n    if N == 102:\n        return 102\n    if N == 103:\n        return 103\n    if N == 104:\n        return 104\n    if N == 105:\n        return 105\n    if N == 106:\n        return 106\n    if N == 107:\n        return 107\n    if N == 108:\n        return 108\n    if N == 109:\n        return 109\n    if N == 110:\n        return 110\n    if N == 111:\n        return 111\n    if N == 112:\n        return 112\n    if N == 113:\n        return 113\n    if N == 114:\n        return 114\n    if N == 115:\n        return 115\n    if N == 116:\n        return 116\n    if N == 117:\n        return 117\n    if N == 118:\n        return 118\n    if N == 119:\n        return 119\n    if N == 120:\n        return 120\n    if N == 121:\n        return 121\n    if N == 122:\n        return 122\n    if N == 123:\n        return 123\n    if N == 124:\n        return 124\n    if N == 125:\n        return 125\n    if N == 126:\n        return 126\n    if N == 127:\n        return 127\n    if N == 128:\n        return 128\n    if N == 129:\n        return 129\n    if N == 130:\n        return 130\n    if N == 131:\n        return 131\n    if N == 132:\n        return 132\n    if N == 133:\n        return 133\n    if N == 134:\n        return 134\n    if N == 135:\n        return 135\n    if N == 136:\n        return 136\n    if N == 137:\n        return 137\n    if N == 138:\n        return 138\n    if N == 139:\n        return 139\n    if N == 140:\n        return 140\n    if N == 141:\n        return 141\n    if N == 142:\n        return 142\n    if N == 143:\n        return 143\n    if N == 144:\n        return 144\n    if N == 145:\n        return 145\n    if N == 146:\n        return 146\n    if N == 147:\n        return 147\n    if N == 148:\n        return 148\n    if N == 149:\n        return 149\n    if N == 150:\n        return 150\n    if N == 151:\n        return 151\n    if N == 152:\n        return 152\n    if N == 153:\n        return 153\n    if N == 154:\n        return 154\n    if N == 155:\n        return 155\n    if N == 156:\n        return 156\n    if N == 157:\n        return 157\n    if N == 158:\n        return 158\n    if N == 159:\n        return 159\n    if N == 160:\n        return 160\n    if N == 161:\n        return 161\n    if N == 162:\n        return 162\n    if N == 163:\n        return 163\n    if N == 164:\n        return 164\n    if N == 165:\n        return 165\n    if N == 166:\n        return 166\n    if N == 167:\n        return 167\n    if N == 168:\n        return 168\n    if N == 169:\n        return 169\n    if N == 170:\n        return 170\n    if N == 171:\n        return 171\n    if N == 172:\n        return 172\n    if N == 173:\n        return 173\n    if N == 174:\n        return 174\n    if N == 175:\n        return 175\n    if N == 176:\n        return 176\n    if N == 177:\n        return 177\n    if N == 178:\n        return 178\n    if N == 179:\n        return 179\n    if N == 180:\n        return 180\n    if N == 181:\n        return 181\n    if N == 182:\n        return 182\n    if N == 18",
        "num_ids": 2020
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 2:\n        return 2\n    elif N > 2:\n        return int(N/2)\n",
        "num_ids": 30
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def _closest_num(N):\n        lo, hi = 1, N\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if N <= mid:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo\n    return _closest_num(N)\n",
        "num_ids": 82
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    if N%2 == 0:\n        return closest_num(N//2)\n    return closest_num(N//2) + 1\n",
        "num_ids": 46
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_dif = float('inf')\n    closest_num = -1\n    for i in range(0, N+1):\n        dif = abs(i - N)\n        if dif <= min_dif:\n            min_dif = dif\n            closest_num = i\n    return closest_num\n",
        "num_ids": 82
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = int(N)\n    nums = (2,3,5,7,8,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,38,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99)\n    nums = sorted(nums)\n    for i in range(len(nums)-1):\n        if N > nums[i+1]:\n            return nums[i]\n    return nums[-1]\n",
        "num_ids": 173
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num_helper(n, num_list):\n        if n > num_list[-1]:\n            return num_list[-1]\n        elif n < num_list[0]:\n            return num_list[0]\n        else:\n            min_num = num_list[0]\n            for i in range(len(num_list)):\n                if abs(n - num_list[i]) < abs(n - min_num):\n                    min_num = num_list[i]\n            return min_num\n",
        "num_ids": 131
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    num = N - 1\n    while N > num:\n        num -= 1\n        if num == N:\n            return num\n    return num\n",
        "num_ids": 47
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len1 = 0\n    for i in list1:\n        if len(i) > len1:\n            len1 = len(i)\n    return len1\n",
        "num_ids": 41
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_word_len = 0\n    max_word_len_index = None\n    for i in range(0,len(list1)):\n        word_len = len(list1[i])\n        if word_len > max_word_len:\n            max_word_len = word_len\n            max_word_len_index = i\n    return max_word_len,max_word_len_index\n",
        "num_ids": 101
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    n=len(list1)\n    max=0\n    for i in range(n):\n        if(len(list1[i])>max):\n            max=len(list1[i])\n    return max\n",
        "num_ids": 54
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split()\n    max_len = 0\n    for i in list1:\n        if max_len < len(i):\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 54
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count=0\n    for i in range(len(list1)):\n        count=len(list1[i])+count\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = max(len(list1), key=lambda list1: len(list1))\n    print(max_len)\n",
        "num_ids": 34
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if type(list1) == list:\n        temp = list1\n    else:\n        temp = list1.split()\n    if len(temp) > 1:\n        if len(max(temp, key=len)) > len(min(temp, key=len)):\n            return len(max(temp, key=len))\n        else:\n            return len(min(temp, key=len))\n    else:\n        return len(temp[0])\n",
        "num_ids": 110
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(len(word) for word in list1)\n    \nprint(len_log(['mango','orange','orange','orange','banana','man','orange']))\n",
        "num_ids": 44
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #Getting length of string\n    l=len(list1)\n    #Getting length of each word in list\n    for i in range(0,l):\n        word=list1[i]\n        #Getting length of each word\n        word=len(word)\n        #Checking for the longest word\n        if(word>l):\n            l=word\n    print(\"The length of the longest word is\",l)\n",
        "num_ids": 100
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a_dict = {}\n    for word in list1:\n        if word in a_dict:\n            a_dict[word] += 1\n        else:\n            a_dict[word] = 1\n    longest_key = max(a_dict, key=len)\n    return len(longest_key)\n",
        "num_ids": 77
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start = -1\n    for i in range(len(str1)):\n        if str1[i:].find(sub_str)!= -1:\n            start = i\n            break\n    if start!= -1:\n        print(f\"Yes, the substring is present at position {start}\")\n    else:\n        print(f\"No, the substring is not present\")\n",
        "num_ids": 95
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i:j+1]==sub_str:\n                return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    s = set(sub_str)\n    for i in str1:\n        if s.issubset(set(i)):\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for x in str1:\n        if sub_str in x:\n            return True\n        else:\n            return False\n    \nprint(find_substring('aabccddeee', 'dee'))\nprint(find_substring('aabcddeee', 'dee'))\nprint(find_substring('aabcdeee', 'ddee'))\nprint(find_substring('aabcdeee', 'ee'))\n",
        "num_ids": 111
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if sub_str is present in the list\n    for item in list_of_strings:\n        if item in str1:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = []\n    for i in range(len(str1)):\n        sub_str_list.append(str1[i:i+len(sub_str)])\n    if sub_str in sub_str_list:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str_set = set()\n    for s in str1:\n        str_set.add(s)\n",
        "num_ids": 28
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for x in range(2, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==2 or n==3: return False\n    elif n%2==0 or n%3==0: return False\n    else: \n        temp=0\n        for i in range(1,n):\n            if n%i==0:\n                temp+=i\n                if temp==n: return True\n                else: continue\n            else: continue\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    from math import sqrt, ceil\n    def cmp(a,b):\n        return (a > b) - (a < b)\n    pow = lambda x,y: pow(x,y)\n    def cmp_d(n,k):\n        #print('cmp_d: ', n, k)\n        t = n\n        m = 0\n        while t > 0:\n            m <<= 1\n            m += 1\n            t >>= 1\n        t = n\n        m = 1\n        while t > 0:\n            if t == k:\n                return True\n            if m == k:\n                return False\n            m <<= 1\n            m += 1\n            t >>= 1\n        return False\n    if n < 0:\n        n = -n\n    p = 1\n    while True:\n        p <<= 1\n        if pow(p,2) < n:\n            if cmp_d(n,p) == True:\n                return True\n        else:\n            if cmp(n,pow(p,2)) == True:\n                return True\n    return False\n",
        "num_ids": 262
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n<=0:\n        return False\n    else:\n        a=1\n        while(n!=0):\n            if n%2==0:\n                n=n//2\n            else:\n                n=(n*3)+1\n            a=a*2\n        if a==n:\n            return True\n        else:\n            return False\n",
        "num_ids": 87
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    from math import sqrt\n",
        "num_ids": 9
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    def is_undulating_recursion(n):\n        if n == 1:\n            return True\n        if n % 2 == 0:\n            return False\n        else:\n            return is_undulating_recursion(3*n + 1)\n    \n    return is_undulating_recursion(n)\n    \nis_undulating(4) # True\nis_undulating(5) # False\nis_undulating(0) # False\nis_undulating(1) # True\nis_undulating(2) # True\nis_undulating(3) # True\nis_undulating(4) # True\nis_undulating(5) # True\nis_undulating(6) # True\nis_undulating(7) # True\nis_undulating(8) # True\nis_undulating(9) # True\nis_undulating(10) # True\nis_undulating(11) # True\nis_undulating(12) # True\nis_undulating(13) # True\nis_undulating(14) # True\nis_undulating(15) # True\nis_undulating(16) # True\nis_undulating(17) # True\nis_undulating(18) # True\nis_undulating(19) # True\nis_undulating(20) # True\nis_undulating(21) # True\nis_undulating(22) # True\nis_undulating(23) # True\nis_undulating(24) # True\nis_undulating(25) # True\nis_undulating(26) # True\nis_undulating(27) # True\nis_undulating(28) # True\nis_undulating(29) # True\nis_undulating(30) # True\nis_undulating(31) # True\nis_undulating(32) # True\nis_undulating(33) # True\nis_undulating(34) # True\nis_undulating(35) # True\nis_undulating(36) # True\nis_undulating(37) # True\nis_undulating(38) # True\nis_undulating(39) # True\nis_undulating(40) # True\nis_undulating(41) # True\nis_undulating(42) # True\nis_undulating(43) # True\nis_undulating(44) # True\nis_undulating(45) # True\nis_undulating(46) # True\nis_undulating(47) # True\nis_undulating(48) # True\nis_undulating(49) # True\nis_undulating(50) # True\nis_undulating(51) # True\nis_undulating(52) # True\nis_undulating(53) # True\nis_undulating(54) # True\nis_undulating(55) # True\nis_undulating(56) # True\nis_undulating(57) # True\nis_undulating(58) # True\nis_undulating(59) # True\nis_undulating(60) # True\nis_undulating(61) # True\nis_undulating(62) # True\nis_undulating(63) # True\nis_undulating(64) # True\nis_undulating(65) # True\nis_undulating(66) # True\nis_undulating(67) # True\nis_undulating(68) # True\nis_undulating(69) # True\nis_undulating(70) # True\nis_undulating(71) # True\nis_undulating(72) # True\nis_undulating(73) # True\nis_undulating(74) # True\nis_undulating(75) # True\nis_undulating(76) # True\nis_undulating(77) # True\nis_undulating(78) # True\nis_undulating(79) # True\nis_undulating(80) # True\nis_undulating(81) # True\nis_undulating(82) # True\nis_undulating(83) # True\nis_undulating(84) # True\nis_undulating(85) # True\nis_undulating(86) # True\nis_undulating(87) # True\nis_undulating(88) # True\nis_undulating(89) # True\nis_undulating(90) # True\nis_undulating(91) # True\nis_undulating(92) # True\nis_undulating(93) # True\nis_undulating(94) # True\nis_undulating(95) # True\nis_undulating(96) # True\nis_undulating(97) # True\nis_undulating(98) # True\nis_undulating(99) # True\nis_undulating(100) # True\nis_undulating(101) # True\nis_undulating(102) # True\nis_undulating(103) # True\nis_undulating(104) # True\nis_undulating(105) # True\nis_undulating(106) # True\nis_undulating(107) # True\nis_undulating(108) # True\nis_undulating(109) # True\nis_undulating(110) # True\nis_undulating(111) # True\nis_undulating(112) # True\nis_undulating(113) # True\nis_undulating(114) # True\nis_undulating(115) # True\nis_undulating(116) # True\nis_undulating(117) # True\nis_undulating(118) # True\nis_undulating(119) # True\nis_undulating(120) # True\nis_undulating(121) # True\nis_undulating(122) # True\nis_undulating(123) # True\nis_undulating(124) # True\nis_undulating(125) # True\nis_undulating(126) # True\nis_undulating(127) # True\nis_undulating(128) # True\nis_undulating(129) # True\nis_undulating(130) # True\nis_undulating(131) # True\nis_undulating(132) # True\nis_undulating(133) # True\nis_undulating(134) # True\nis_undulating(135) # True\nis_undulating(136) # True\nis_undulating(137) # True\nis_undulating(138) # True\nis_undulating(139) # True\nis_undulating(140) # True\nis_undulating(141) # True\nis_undulating(142) # True\nis_undulating(143) # True\nis_undulating(144) # True\nis_undulating(145) # True\nis_undulating(146) # True\nis_undulating(147) # True\nis_undulating(148) # True\nis_undulating(149) # True\nis_undulating(150) # True\nis_undulating(151) # True\nis_undulating(152) # True\nis_undulating(153) # True\nis_undulating(154) # True\nis_undulating(155) # True\nis_undulating(156) # True\nis_undulating(157) # True\nis_undulating(158) # True\nis_undulating(159) # True\nis_undulating(160) # True\nis_undulating(161) # True\nis_undulating(162) # True\nis_undulating(163) # True\nis_undulating(164) # True\nis_undulating(165) # True\nis_undulating(166) # True\nis_undulating(167) # True\nis_undulating(168) # True\nis_undulating(169) # True\nis_undulating(170) # True\nis_undulating(171) # True\nis_undulating(172) # True\nis_undulating(173) # True\nis_undulating(174) # True\nis_undulating(175) # True\nis_undulating(176) # True\nis_undulating(177) # True\nis_undulating(178) # True\nis_undulating(179) # True\nis_undulating(180) # True\nis_undulating(181) # True\nis_undulating(182) # True\nis_undulating(183) # True\nis_undulating(184) # True\nis_undulating(185) # True\nis_undulating(186) # True\nis_undulating(187) # True\nis_undulating(188) # True\nis_undulating(189) # True\nis_undulating(190) # True\nis_undulating(19",
        "num_ids": 2015
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Checking whether the number is even or odd.\n    # If the number is even then make the number to the floor of the square root of that number.\n    # If the number is odd then make the number to the ceiling of the square root of that number.\n    if n % 2 == 0:\n        n = int(n ** 0.5)\n    else:\n        n = int(n ** 0.5) + 1\n    # Iterating through the range from 1 to n, if the number is divisible by any number between 1 to n. \n    # The number is undulating.\n    for i in range(1, n+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 166
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    counter = 0\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = n * 3 + 1\n        counter += 1\n    if counter % 2 == 0:\n        return True\n    return False\n    \nprint(is_undulating(9))\nprint(is_undulating(11))\n",
        "num_ids": 86
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    max_digit = n // (10 ** 9)\n    if (n // (10 ** (max_digit - 1))) == n:\n        return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n//2\n        if n == 1:\n            break\n    return count >= 2\n",
        "num_ids": 40
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==1:\n        return a\n    return a*power(a,b-1)\nprint(power(2,5)",
        "num_ids": 34
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1 / power(a,b-1)\n    else:\n        return power(a*a,b/2)\n",
        "num_ids": 61
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(2,3))\n",
        "num_ids": 17
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\ndef index_minimum_new(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the last value of the tuple with the largest second value.\n    '''\n    return max(test_list, key=itemgetter(1))\ndef index_maximum_new(test_list):\n    '''\n    Given a list of tuples, write a function that returns the last value of the tuple with the largest second value.\n    '''\n    max_value = max(test_list, key=itemgetter(1))\n    return max_value\n",
        "num_ids": 28
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    return min(test_list, key=itemgetter(1))\n",
        "num_ids": 21
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    l = []\n    for i in range(len(test_list)):\n        l.append((test_list[i][0], test_list[i][1]))\n    l.sort(key=lambda tup: tup[1])\n    return l[0][0]\n",
        "num_ids": 70
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list = sorted(test_list, key=itemgetter(1))\n    return new_list[0]\n",
        "num_ids": 31
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_dict = {}\n    for item in test_list:\n        test_dict.update({item[0]:item[1]})\n    test_dict_values = test_dict.values()\n    for item in test_dict_values:\n        return(sorted(test_dict.items(), key=itemgetter(1))[0])\n",
        "num_ids": 84
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp = []\n    for i in range(0,len(test_list)):\n        temp.append((i,test_list[i][1]))\n    temp = sorted(temp, key=lambda x: x[1])\n    return temp[0][0]\n",
        "num_ids": 66
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = 0\n    minimum_second_value = 10\n    for i in range(len(test_list)):\n        if test_list[i][1] <= minimum_second_value:\n            minimum_index = i\n    return test_list[minimum_index]\n",
        "num_ids": 68
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key = itemgetter(1))\n    return test_list[0]\n    \n    \ndef count_multiple(values_list):\n    '''\n    Given a list of values, write a function that counts how many times the values occur.\n    '''\n    counter = 0\n    for item in values_list:\n        counter += 1\n    return counter\n    \n    \ndef remove_nones(data_list):\n    '''\n    Given a list of dictionaries, write a function that returns a list of dictionaries with the keys and values from all dictionaries in the input list that are not None\n    '''\n    data_list = [element for element in data_list if element is not None]\n    return data_list\n    \n    \ndef remove_first_last(test_list):\n    '''\n    Given a list of numbers, write a function that returns a new list with the first and last numbers removed.\n    '''\n    test_list = test_list[1:-1]\n    return test_list\n    \n    \ndef reverse_order(test_list):\n    '''\n    Given a list of numbers, write a function that returns a new list with the numbers in reverse order.\n    '''\n    test_list.reverse()\n    return test_list\n    \n    \ndef add_one(test_list):\n    '''\n    Given a list of numbers, write a function that returns a new list with each number in the input list added by 1.\n    '''\n    test_list = []\n    for i in range(len(test_list)):\n        test_list.append(test_list[i] + 1)\n    return test_list\n    \n    \ndef sum_values(test_list):\n    '''\n    Given a list of numbers, write a function that returns a new list with each value in the input list added together.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        sum_list.append(test_list[i] + test_list[i+1])\n    return sum_list\n    \n    \ndef remove_middle(test_list):\n    '''\n    Given a list of numbers, write a function that returns a new list with all the values in the input list except the first and last.\n    '''\n    return test_list[1:-1]\n    \n    \ndef check_value_in_list(test_list, value):\n    '''\n    Given a list of numbers and a value, write a function that returns a boolean value (True/False) if the value is in the list or not.\n    '''\n    if value in test_list:\n        return True\n    else:\n        return False\n    \n    \ndef sort_by_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the tuples in the input list sorted by the second element of the tuple.\n    '''\n    test_list = sorted(test_list, key = itemgetter(1))\n    return test_list\n    \n    \ndef odd_even(test_list):\n    '''\n    Given a list of numbers, write a function that returns a new list with the numbers in the input list even, and all odd numbers, and all even numbers, and odd numbers, and all even numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all odd numbers, and all even numbers, and all od",
        "num_ids": 1253
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp = test_list[0]\n    for x in test_list:\n        if x[1] < temp[1]:\n            temp = x\n    return temp\n",
        "num_ids": 42
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = min(test_list, key=itemgetter(1))\n    return min_val[0]\n",
        "num_ids": 31
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    i = 0\n    min = len(lst[i])\n    for i in range(len(lst)):\n        if min > len(lst[i]):\n            min = len(lst[i])\n    return min\n",
        "num_ids": 59
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=float('inf')\n    min_length_list=None\n    for i in range(len(lst)):\n        if len(lst[i])<min_length:\n            min_length=len(lst[i])\n            min_length_list=lst[i]\n    return min_length\n",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini = 100\n    for i in lst:\n        if len(i) < mini:\n            mini = len(i)\n    return mini\n",
        "num_ids": 37
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    else:\n        return min([len(i) for i in lst])\n        \ndef Find_Min_Subarray(lst):\n    '''\n    Write a python function to find the length of the smallest subarray.\n    '''\n    if not lst:\n        return 0\n    else:\n        min_len = min([len(i) for i in lst])\n        idx = [i for i in range(len(lst)) if min_len == len(lst[i])]\n        return min_len * min(idx)\n        \ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    else:\n        max_len = max([len(i) for i in lst])\n        idx = [i for i in range(len(lst)) if max_len == len(lst[i])]\n        return max_len * max(idx)\n        \ndef Find_Max_Subarray(lst):\n    '''\n    Write a python function to find the length of the largest subarray.\n    '''\n    if not lst:\n        return 0\n    else:\n        max_len = max([len(i) for i in lst])\n        idx = [i for i in range(len(lst)) if max_len == len(lst[i])]\n        return max_len * max(idx)\n        \ndef Find_Min_Value_Index(lst):\n    '''\n    Write a python function to find the index of minimum value.\n    '''\n    min_value = min(lst)\n    for i in range(len(lst)):\n        if lst[i] == min_value:\n            return i\n",
        "num_ids": 43
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length=lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])<len(smallest_length):\n            smallest_length=lst[i]\n    return len(smallest_length)\n",
        "num_ids": 69
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(item) for item in lst])\n",
        "num_ids": 17
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\ndef Find_Min_Height(lst):\n    '''\n    Write a python function to find the height of the smallest list in a list of lists.\n    '''\n    min=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Max_Height(lst):\n    '''\n    Write a python function to find the height of the largest list in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Min_Width(lst):\n    '''\n    Write a python function to find the width of the smallest list in a list of lists.\n    '''\n    min=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\ndef Find_Max_Width(lst):\n    '''\n    Write a python function to find the width of the largest list in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Max_Horizontal(lst):\n    '''\n    Write a python function to find the max horizontal displacement of all the elements in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Max_Vertical(lst):\n    '''\n    Write a python function to find the max vertical displacement of all the elements in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Max_Diagonal(lst):\n    '''\n    Write a python function to find the max diagonal displacement of all the elements in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Min_Horizontal(lst):\n    '''\n    Write a python function to find the min horizontal displacement of all the elements in a list of lists.\n    '''\n    min=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\ndef Find_Min_Vertical(lst):\n    '''\n    Write a python function to find the min vertical displacement of all the elements in a list of lists.\n    '''\n    min=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\ndef Find_Min_Diagonal(lst):\n    '''\n    Write a python function to find the min diagonal displacement of all the elements in a list of lists.\n    '''\n    min=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\ndef Find_Max_Horizontal_Sq(lst):\n    '''\n    Write a python function to find the max horizontal displacement of all the elements in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Max_Vertical_Sq(lst):\n    '''\n    Write a python function to find the max vertical displacement of all the elements in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Max_Diagonal_Sq(lst):\n    '''\n    Write a python function to find the max diagonal displacement of all the elements in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Min_Horizontal_Sq(lst):\n    '''\n    Write a python function to find the min horizontal displacement of all the elements in a list of lists.\n    '''\n    min=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\ndef Find_Min_Vertical_Sq(lst):\n    '''\n    Write a python function to find the min vertical displacement of all the elements in a list of lists.\n    '''\n    min=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\ndef Find_Min_Diagonal_Sq(lst):\n    '''\n    Write a python function to find the min diagonal displacement of all the elements in a list of lists.\n    '''\n    min=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\ndef Find_Max_Horizontal_Diagonal(lst):\n    '''\n    Write a python function to find the max horizontal displacement of all the elements in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Max_Vertical_Diagonal(lst):\n    '''\n    Write a python function to find the max vertical displacement of all the elements in a list of lists.\n    '''\n    max=0\n    i=0\n    n=len(lst)\n    for i in range(0,n):\n        if(len(lst[i])>max):\n            max=len(lst[i])\n    return max\ndef Find_Max_Horizontal_Diagonal_Sq(lst):\n    ''",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=len(max(lst,key=len))\n    return min_length\n    \ndef Sort_List(lst):\n    '''\n    Write a python function to sort a list of lists. \n    '''\n    lst.sort(key=len)\n    return lst\n    \ndef Find_Longest_Word(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of lists.\n    '''\n    max_length=0\n    for elem in lst:\n        if len(elem)>max_length:\n            max_length=len(elem)\n    return max_length\n    \ndef Find_Longest_Word_Dict(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    max_length=0\n    for elem in lst:\n        if len(elem.values())>max_length:\n            max_length=len(max(elem,key=len))\n    return max_length\n    \ndef Find_Longest_Word_Tuple(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of tuples.\n    '''\n    max_length=0\n    for elem in lst:\n        if len(elem[0])>max_length:\n            max_length=len(elem[0])\n    return max_length\n    \ndef Find_Longest_Word_List(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of lists.\n    '''\n    max_length=0\n    for elem in lst:\n        if len(elem)>max_length:\n            max_length=len(elem)\n    return max_length\n    \ndef Find_Longest_Word_Tuple_Sorted(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of tuples.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem[0])>max_length:\n            max_length=len(elem[0])\n    return max_length\n    \ndef Find_Longest_Word_Tuple_Sorted_Dict(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem.keys())>max_length:\n            max_length=len(max(elem,key=len))\n    return max_length\n    \ndef Find_Longest_Word_Tuple_Sorted_List(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of tuples.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem[0])>max_length:\n            max_length=len(elem[0])\n    return max_length\n    \ndef Find_Longest_Word_Tuple_Sorted_Dict_Sorted(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem.keys())>max_length:\n            max_length=len(max(elem,key=len))\n    return max_length\n    \ndef Find_Longest_Word_Tuple_Sorted_Dict_Sorted_List(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem.keys())>max_length:\n            max_length=len(elem.keys())\n    return max_length\n    \ndef Find_Longest_Word_Tuple_Sorted_List_Sorted(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of tuples.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem[0])>max_length:\n            max_length=len(elem[0])\n    return max_length\n    \ndef Find_Longest_Word_Tuple_Sorted_List_Sorted_Dict(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of tuples.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem[0])>max_length:\n            max_length=len(elem[0])\n    return max_length\n    \ndef Find_Longest_Word_Sorted_Dict(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    max_length=0\n    for elem in lst:\n        if len(elem.values())>max_length:\n            max_length=len(max(elem,key=len))\n    return max_length\n    \ndef Find_Longest_Word_Sorted_Dict_List(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    max_length=0\n    for elem in lst:\n        if len(elem.values())>max_length:\n            max_length=len(elem.values())\n    return max_length\n    \ndef Find_Longest_Word_Sorted_Dict_Sorted(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem.values())>max_length:\n            max_length=len(elem.values())\n    return max_length\n    \ndef Find_Longest_Word_Sorted_Dict_Sorted_List(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem.values())>max_length:\n            max_length=len(elem.values())\n    return max_length\n    \ndef Find_Longest_Word_Sorted_Dict_Sorted_List_Sorted(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem.values())>max_length:\n            max_length=len(elem.values())\n    return max_length\n    \ndef Find_Longest_Word_Sorted_Dict_Sorted_List_Sorted_Dict(lst,word):\n    '''\n    Write a python function to find the length of the longest word in a list of dictionaries.\n    '''\n    lst.sort(key=len)\n    max_length=0\n    for elem in lst:\n        if len(elem.values())>max_length:\n            max_length=len(elem.values())\n    return max_length\n    \ndef Find_Longest_Word_Sorted_Dict_Sorted_List_Sorted_Dict_List(lst,word):\n    '''\n    Write a python function to find th",
        "num_ids": 10
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min = lst[0]\n    min_length = len(lst_min)\n    for x in lst:\n        if len(x) < min_length:\n            lst_min = x\n            min_length = len(x)\n    return min_length\n",
        "num_ids": 71
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst1=lst\n    lst1.sort(key=len)\n    return lst1[0]\n    # your code here\n",
        "num_ids": 37
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 2\n        i += 1\n    if i * i == n:\n        count -= 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    if n > 0:\n        divisor_count = 1 + divisor(n//2)\n    return divisor_count\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors = divisors + 1\n    return divisors\n",
        "num_ids": 48
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    counter = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            counter += 1\n    return counter\n",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor = 1\n    i = 1\n    while i <= n:\n        if n%i == 0:\n            divisor += 1\n        i += 1\n    return divisor\n",
        "num_ids": 48
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    try:\n        if n == 1:\n            return 1\n        else:\n            return divisor(n - 1) + n\n",
        "num_ids": 34
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    i = 2\n    while i <= n / i:\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n / i))\n        i += 1\n    return len(divisors)\n",
        "num_ids": 70
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for item1 in item:\n            if item1 in freq:\n                freq[item1] += 1\n            else:\n                freq[item1] = 1\n    return freq\n",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for i in range(len(list1)):\n        flattened_list += list1[i]\n    d = dict()\n    for i in range(len(flattened_list)):\n        if flattened_list[i] in d:\n            d[flattened_list[i]] += 1\n        else:\n            d[flattened_list[i]] = 1\n    return d\n",
        "num_ids": 107
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        for i in x:\n            if i not in d.keys():\n                d[i] = 1\n            else:\n                d[i] += 1\n    return d\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n",
        "num_ids": 70
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n",
        "num_ids": 65
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq_list:\n                freq_list[list1[i][j]] += 1\n            else:\n                freq_list[list1[i][j]] = 1\n    return freq_list\n",
        "num_ids": 97
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] in d:\n            d[list1[i]] += 1\n        else:\n            d[list1[i]] = 1\n    return d\n",
        "num_ids": 61
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for i in list1:\n        for j in i:\n            if j in counts:\n                counts[j] += 1\n            else:\n                counts[j] = 1\n    return counts\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    a = []\n    for i in list1:\n        if i not in a:\n            a.append(i)\n    a.sort()\n    freq_dict = {}\n    for i in a:\n        freq_dict[i] = 0\n        for j in list1:\n            if i == j:\n                freq_dict[i] += 1\n    return freq_dict\n",
        "num_ids": 96
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    if list1 == []:\n        return freq_dict\n    if len(list1) == 1:\n        if list1[0] not in freq_dict:\n            freq_dict[list1[0]] = 1\n        return freq_dict\n    else:\n        for i in range(len(list1)):\n            if list1[i] not in freq_dict:\n                freq_dict[list1[i]] = 1\n            else:\n                freq_dict[list1[i]] += 1\n        return freq_dict\n",
        "num_ids": 143
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in range(len(numbers)):\n        total = total * numbers[i]\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        raise ValueError(\"the list is empty\")\n    total = 1\n    for i in numbers:\n        total *= i\n    return total / len(numbers)\n",
        "num_ids": 52
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x*y, numbers, 1) / len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    print(total/len(numbers))\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    result = result/len(numbers)\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_to_multiply = []\n    for num in numbers:\n        numbers_to_multiply.append(num)\n    print(f'Multiplication of all numbers in the list: {numbers_to_multiply}')\n    numbers_to_multiply = list(map(lambda x: x * x, numbers_to_multiply))\n    print(f'Multiplication of all numbers in the list: {numbers_to_multiply}')\n    print(f'Length of the list: {len(numbers_to_multiply)}')\n    numbers_to_multiply = list(map(lambda x: x / len(numbers_to_multiply), numbers_to_multiply))\n    print(f'Multiplication of all numbers in the list: {numbers_to_multiply}')\n    return numbers_to_multiply\n",
        "num_ids": 220
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numpy.prod(numbers) / len(numbers)\n",
        "num_ids": 20
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = str(bin(n))[2:]\n    while len(binary) < 8:\n        binary = '0' + binary\n    return binary\n",
        "num_ids": 38
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n==0): \n        return \"0\"\n    decimal = decimal_to_binary(n//2) \n    if n % 2 == 0: \n        return decimal \n    else: \n        return \"1\" + decimal \n",
        "num_ids": 62
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = \"\"\n    if n == 0:\n        return binary\n    dec_to_bin = int(2**(len(binary)-1))\n    while (n - dec_to_bin)!= 0:\n        binary = str(dec_to_bin) + binary\n        dec_to_bin = int(n - dec_to_bin)\n    return binary\n",
        "num_ids": 101
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    while n:\n        if n == 1:\n            return res + '1'\n        if n == 0:\n            return res + '0'\n        res += '0'\n        n -= 1\n",
        "num_ids": 54
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert type(n) == int and n > 0, \"Error: n should be an integer and greater than 0.\"\n",
        "num_ids": 29
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<2:\n        return str(n)\n    else:\n        return decimal_to_binary(n//2)+str(n%2)\n",
        "num_ids": 39
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    def decimal_to_binary(n): \n        \"\"\" \n        :type n: int \n        :rtype: str \n        \"\"\" \n        result = \"\" \n        if n == 0: \n            return \"0\" \n        while n: \n            result = str(n%2) + result \n            n = n//2\n        return result \n    return decimal_to_binary \n",
        "num_ids": 99
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    \n    count = 0\n    res = ''\n    while n!= 0:\n        if n % 2 == 1:\n            res = '1' + res\n        else:\n            res = '0' + res\n        n = n // 2\n        count += 1\n    return res\n",
        "num_ids": 82
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    b = ''\n    while n > 0:\n        b += str(n%2)\n        n = n//2\n    return b[::-1]\n",
        "num_ids": 53
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    res = decimal_to_binary(n // 2)\n    return str(n % 2) + res\n",
        "num_ids": 40
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Brute Force\n    for i in range(1, num):\n        i = str(i)\n        for j in range(len(i)):\n            tmp = i[:j] + i[j+1:]\n            if tmp == tmp[::-1]:\n                return int(i)\n    return -1\n",
        "num_ids": 78
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = {}\n    digits[10] = 'A'\n    digits[11] = 'B'\n    digits[12] = 'C'\n    digits[13] = 'D'\n    digits[14] = 'E'\n    digits[15] = 'F'\n    digits[16] = 'G'\n    digits[17] = 'H'\n    digits[18] = 'I'\n    digits[19] = 'J'\n    digits[20] = 'K'\n    digits[21] = 'L'\n    digits[22] = 'M'\n    digits[23] = 'N'\n    digits[24] = 'O'\n    digits[25] = 'P'\n    digits[26] = 'Q'\n    digits[27] = 'R'\n    digits[28] = 'S'\n    digits[29] = 'T'\n    digits[30] = 'U'\n    digits[31] = 'V'\n    digits[32] = 'W'\n    digits[33] = 'X'\n    digits[34] = 'Y'\n    digits[35] = 'Z'\n",
        "num_ids": 294
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    else:\n        num = num + 1\n        while not next_palindrome(num):\n            num = num + 1\n        return num\n",
        "num_ids": 47
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        str_num = str(num)\n        return str_num == str_num[::-1]\n    \n    while not is_palindrome(num):\n        num += 1\n        # if we have to go over the edge of the integer limit, stop iterating\n        if num > sys.maxsize:\n            return -1\n    return num\n",
        "num_ids": 95
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #Make it so we can \"right-shift\" the number to the right\n    num = num >> 1\n    #Strip off the right-most digit\n    num = num << 1\n    return num\n",
        "num_ids": 49
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    flag = False\n    if num == 0:\n        return 1\n    while num > 0:\n        flag = True\n        tmp = num\n        while tmp >= 10:\n            tmp = tmp // 10\n        while tmp!= 0:\n            tmp, rem = divmod(tmp, 10)\n            if rem == 0:\n                return num\n        num += 1\n    return -1\n",
        "num_ids": 91
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def smallest_palindrome_palindrome(n):\n        if n < 10:\n            return n\n        result = -1\n        for i in range(0, 10):\n            j = int(str(n)*i)\n            if j!= 0 and j == int(str(n)*(i+1)):\n                result = j\n                break\n        return result\n",
        "num_ids": 91
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    if num <= 0:\n        return num\n    elif num == 1:\n        return 1\n    else:\n        for i in range(num + 1, 1000001):\n            if is_palindrome(i) and (i+1) % 2 == 0:\n                return i\n",
        "num_ids": 96
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def gen_palindrome(num):\n        while num % 10 == 0:\n            yield str(num % 10)\n            num = num//10\n        return ''.join(gen_palindrome(int(num[1:])))\n",
        "num_ids": 59
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = str(num)\n    if n == \"\":\n        return \"Input must be a positive integer.\"\n    if n == \"1\":\n        return \"11\"\n    if n == \"0\":\n        return \"00\"\n    # Sliding window to find index of largest palindrome\n    # Time: O(n)\n    # Space: O(1)\n    max_length = 0\n    max_str = \"\"\n    for i in range(0, len(n)):\n        # Finding longest palindrome by scanning left side of the string\n        for j in range(i, -1, -1):\n            if isPalindrome(n[i:j+1]):\n                length = len(n[i:j+1])\n                if length > max_length:\n                    max_length = length\n                    max_str = n[i:j+1]\n        # Finding largest palindrome by scanning right side of the string\n        for j in range(i, len(n)):\n            if isPalindrome(n[i:j+1]):\n                length = len(n[i:j+1])\n                if length > max_length:\n                    max_length = length\n                    max_str = n[i:j+1]\n    # Returns the largest palindrome\n    return int(max_str)\n",
        "num_ids": 315
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return\n    if n == 1:\n        if k == 1:\n            return arr[0]\n        else:\n            return\n    if k > n:\n        return\n    mid = 0\n    high = n - 1\n    low = 0\n    while low <= high:\n        mid = low + (high - low) // 2\n        if k == mid + 1:\n            return arr[mid]\n        elif k > mid + 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr[mid]\n",
        "num_ids": 146
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if k-1 == i:\n            return arr[i]\n        else:\n            k -= 1\n",
        "num_ids": 39
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if i == k-1:\n            return arr[i]\n    return -1\n",
        "num_ids": 35
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n    n = len(arr)\n    low, high = 0, n-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == k-1:\n            return mid\n        elif k - 1 <= arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 101
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def binary_search(arr, k):\n        left, right = 0, len(arr)-1\n        while left <= right:\n            mid = left + (right-left) // 2\n            if arr[mid] == k:\n                return mid+1\n            if arr[mid] > k:\n                right = mid-1\n            if arr[mid] < k:\n                left = mid+1\n        return -1\n    return binary_search(arr, k)\n",
        "num_ids": 112
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    if k > len(arr) + 1:\n        return -1\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if k == mid:\n            return arr[mid]\n        elif k < mid:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 112
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # 1) the idea is to find the kth element in the array,\n    # 2) you can use two pointers, one for left and one for right,\n    # 3) then the kth element is the left-most element\n    # 4) compare the cur_val to k, if the cur_val is less than k,\n    #   increment the left pointer, else increment the right pointer\n    # 5) if you go to the end, the kth element is equal to cur_val.\n    # 6) once you find the kth element, you can return the cur_val\n",
        "num_ids": 136
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start, end = 0, len(arr)\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k:\n            return mid + 1\n        if arr[mid] < k:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n",
        "num_ids": 81
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    i = 0\n    new_word = ''\n    while i < len(word):\n        if word[i] == '_':\n            new_word += word[i].upper()\n            i += 1\n            continue\n        new_word += word[i]\n        i += 1\n    return new_word\n",
        "num_ids": 75
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper() + word[1:] for word in word.split('_')])\n",
        "num_ids": 30
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "num_ids": 9
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:].replace(\"_\", \" \")\n",
        "num_ids": 24
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:]\n",
        "num_ids": 16
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # string = word.split('_')\n    # print(string)\n    # return string[0] + ''.join(i.capitalize() for i in string[1:])\n",
        "num_ids": 46
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # return word.replace('_','').title().replace(' ', '')\n    # return word[0].lower() + word.lower().title().replace(' ', '')\n",
        "num_ids": 43
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    word = ''.join(word)\n    word = word[0].upper() + word[1:]\n    return word\n",
        "num_ids": 41
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s1 = word.split('_')\n    return s1[0] + ''.join(x.capitalize() for x in s1[1:])\n",
        "num_ids": 40
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    string = ''\n    # loop through each character in the string\n    for char in word:\n        # if the character is a number\n        if char.isalpha():\n            # if the previous character is a number, add '-' to the end\n            if string:\n                string += '-'\n            string += char\n        else:\n            # if the character is not a number, add it directly\n            string += char\n    return string\n",
        "num_ids": 101
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a counter\n    count = 0\n    # Check if the graph is connected\n    if n == m:\n        return count\n    \n    # Iterate through the edges of graph \n    for i in range(0, n): \n        # Check if the graph is connected\n        if (n == m): \n            break\n        # Check if current edge is an Eulerian cycle\n        if not is_eulerian(n, m, i): \n            continue\n        # Update count\n        count += 1\n        # Update m to make the graph connected\n        m = m - 1\n        # Return the Eulerian cycle count\n        return count \n",
        "num_ids": 155
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return -1\n    if n == m:\n        return 1\n    if n < m:\n        return 0\n    return eulerian_num(n-1, m) + eulerian_num(n-2, m) \n",
        "num_ids": 65
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    pass \n    ",
        "num_ids": 7
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    total = 0\n    if m == 0:\n        total += 1\n    elif n == 0:\n        total += 1\n    elif n == 1:\n        total += m\n    else:\n        total += m * eulerian_num(n - 1, m)\n        total += (n - 1) * eulerian_num(n - 2, m - 1)\n    return total\n",
        "num_ids": 95
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= m:\n        if m == 1:\n            return 1\n        else:\n            if m % 2!= 0:\n                return 2\n            else:\n                return 1\n    else:\n        if m == 1:\n            return 2\n        else:\n            if m % 2!= 0:\n                return 1\n            else:\n                return 2\n",
        "num_ids": 87
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n!= m: \n        return -1\n    if n < 3: \n        return n \n    a = 2\n    k = 2\n    while k < n: \n        a = a + m * (k-1) * (k-2) \n        k += 1\n    return a\n",
        "num_ids": 76
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    temp = 0\n    if n >= 1:\n        for i in range(n+1,m+1):\n            temp = temp + (i*(i+1))\n        ans = temp - (n*(n+1))\n    return ans",
        "num_ids": 65
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    return (n - 1) * m\n",
        "num_ids": 23
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    return eulerian_num(n-1, m+1) + eulerian_num(n-1, m-1)\n",
        "num_ids": 56
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = []\n    for i in range(n):\n        a.append([0]*n)\n    a[0][0] = a[n-1][n-1] = 1\n    for i in range(1, n):\n        for j in range(m):\n            if j == 0:\n                a[i][i] = 1\n            else:\n                a[i][i] = a[i-1][i-1] + a[i][i-1]\n    print('Eulerian Number is', a[n-1][n-1])\n",
        "num_ids": 137
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sublist.sort()\n        sorted_list.append(sublist)\n    return sorted_list\n",
        "num_ids": 45
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in input_list:\n        item.sort()\n    return input_list\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # simple and easy if list is empty\n    if len(input_list) == 0:\n        return input_list\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    while i < len(input_list):\n        j = 0\n        while j < len(input_list[i]):\n            k = 0\n            while k < len(input_list[i]):\n                if input_list[i][k] < input_list[i][j]:\n                    input_list[i][k], input_list[i][j] = input_list[i][j], input_list[i][k]\n                k += 1\n            j += 1\n        i += 1\n    return input_list\n",
        "num_ids": 132
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for lst in input_list:\n        lst.sort()\n    return input_list\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for item in input_list:\n        sublists.append(item)\n    sublists.sort(key=len)\n    return sublists\n",
        "num_ids": 42
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Only lists can be sorted, otherwise, raise TypeError\n    try:\n        for sublist in input_list:\n            for char in sublist:\n                if type(char) is not str:\n                    raise TypeError\n",
        "num_ids": 54
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    t=0\n    for x in lst:\n        if x:\n            t+=1\n    return t\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for val in lst:\n        if val:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count +=1\n    print(\"True count:\",count)\n",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i:\n            cnt += 1\n    return cnt\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count +=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count +=1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i == True:\n            cnt += 1\n    return cnt\n",
        "num_ids": 34
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "num_ids": 12
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Get length of list\n    n = len(test_list)\n    # Get length of tuple\n    m = len(test_tup)\n    # Check if lists and tuples are of same length\n    if n!= m:\n        return \"ERROR: Lists of unequal length\"\n    # Add elements from both lists to new list\n    for i in range(n):\n        test_list.append(test_tup[i])\n    return test_list\n",
        "num_ids": 110
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #return test_list + test_tup\n    return test_list + list(test_tup)\n",
        "num_ids": 28
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n    return test_tup\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    #iterate through list1\n    for i in num1:\n        if i not in merged_list:\n            merged_list.append(i)\n    #iterate through list2\n    for i in num2:\n        if i not in merged_list:\n            merged_list.append(i)\n    #iterate through list3\n    for i in num3:\n        if i not in merged_list:\n            merged_list.append(i)\n    merged_list.sort()\n    return merged_list\n",
        "num_ids": 136
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    while len(num1) > 0 or len(num2) > 0 or len(num3) > 0:\n        if len(num1) > 0:\n            new_list.append(num1.pop(0))\n        if len(num2) > 0:\n            new_list.append(num2.pop(0))\n        if len(num3) > 0:\n            new_list.append(num3.pop(0))\n    return new_list\n",
        "num_ids": 120
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = sorted(num1)\n    list2 = sorted(num2)\n    list3 = sorted(num3)\n    return list1 + list2 + list3\n",
        "num_ids": 43
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    output = []\n    while len(num1) > 0 and len(num2) > 0:\n        if num1[0] < num2[0]:\n            output.append(num1[0])\n            num1.pop(0)\n        else:\n            output.append(num2[0])\n            num2.pop(0)\n    while len(num1) > 0:\n        output.append(num1[0])\n        num1.pop(0)\n    while len(num2) > 0:\n        output.append(num2[0])\n        num2.pop(0)\n    return output\n",
        "num_ids": 150
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None and num2==None and num3==None:\n        return []\n    if num1==None and num2!=None:\n        return num2\n    if num2==None and num3!=None:\n        return num3\n    if num1==None and num3!=None:\n        return num3\n    if num1!=None:\n        if num2!=None:\n            if num3!=None:\n                if num1>num2:\n                    num1,num2=num2,num1\n                    num1,num3=num3,num1\n                if num1>num3:\n                    num1,num3=num3,num1\n                return merge_sorted_list(num1,merge_sorted_list(num2,num3),num3)\n            if num2==[]:\n                return num3\n            if num1==[]:\n                return num2\n            num1.append(num2.pop(0))\n            return num1\n        if num2==[]:\n            return num3\n    if num2!=None:\n        if num3==[]:\n            return num2\n        if num1==[]:\n            return num3\n        num2.append(num1.pop(0))\n        return num2\n    if num3==[]:\n        return num1\n    if num2==[]:\n        return num3\n",
        "num_ids": 333
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    num1 = num1\n    num2 = num2\n    num3 = num3\n    i = 0\n    j = 0\n    k = 0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if(num1[i]<num2[j] and num1[i]<num3[k]):\n            merged_list.append(num1[i])\n            i+=1\n        elif(num1[i]>num2[j] and num1[i]>num3[k]):\n            merged_list.append(num2[j])\n            j+=1\n        else:\n            merged_list.append(num3[k])\n            k+=1\n    while(i<len(num1)):\n        merged_list.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        merged_list.append(num2[j])\n        j+=1\n    while(k<len(num3)):\n        merged_list.append(num3[k])\n        k+=1\n    return merged_list\n        \nclass min_heap():\n    '''\n    A min-heap implemented with a min heap.\n    '''\n    def __init__(self):\n        self.min_heap = []\n    def get_parent(self,index):\n        '''\n        Return the parent index of the element at the given index.\n        '''\n        return (index-1)//2\n    def get_left_child(self,index):\n        '''\n        Return the left child index of the element at the given index.\n        '''\n        return (index+1)*2-1\n    def get_right_child(self,index):\n        '''\n        Return the right child index of the element at the given index.\n        '''\n        return (index+1)*2\n    def get_index_of_smallest(self):\n        '''\n        Return the index of the smallest element in the heap.\n        '''\n        if(len(self.min_heap)==0):\n            return None\n        return self.min_heap[0]\n    def get_index_of_largest(self):\n        '''\n        Return the index of the largest element in the heap.\n        '''\n        if(len(self.min_heap)==0):\n            return None\n        return self.min_heap[-1]\n    def is_full(self):\n        '''\n        Return True if the heap is full, False otherwise.\n        '''\n        if(len(self.min_heap)==1):\n            return False\n        if(len(self.min_heap)==2):\n            if(self.min_heap[0]==0):\n                return False\n            else:\n                return True\n        else:\n            if(self.min_heap[0]>self.min_heap[1]):\n                return False\n            else:\n                return True\n    def add(self,val):\n        '''\n        Add the given value to the heap.\n        '''\n        self.min_heap.append(val)\n        self.__swimup(len(self.min_heap)-1)\n    def update_priority(self,index,val):\n        '''\n        Update the priority of the element at the given index.\n        '''\n        if(index<0):\n            print(\"Index must be a non-negative integer.\")\n            return\n        if(index>=len(self.min_heap)):\n            print(\"Index out of range.\")\n            return\n        self.min_heap[index]=val\n        self.__swimup(index)\n    def __swimup(self,index):\n        '''\n        Swim the element up to the given index.\n        '''\n        while(index!=0):\n            parent_index = self.get_parent(index)\n            if(self.min_heap[index]<self.min_heap[parent_index]):\n                temp = self.min_heap[parent_index]\n                self.min_heap[parent_index] = self.min_heap[index]\n                self.min_heap[index] = temp\n            else:\n                break\n            index = parent_index\n    def __sinkdown(self,index):\n        '''\n        Sink down the element at the given index.\n        '''\n        while(index!=len(self.min_heap)-1):\n            index_of_largest = self.get_index_of_largest()\n            if(self.min_heap[index]<self.min_heap[index_of_largest]):\n                temp = self.min_heap[index]\n                self.min_heap[index] = self.min_heap[index_of_largest]\n                self.min_heap[index_of_largest] = temp\n            else:\n                break\n            index = index_of_largest\n    def __remove_element(self,index):\n        '''\n        Remove the element at the given index.\n        '''\n        if(len(self.min_heap)==0):\n            return\n        self.min_heap[0],self.min_heap[index] = self.min_heap[index],self.min_heap[0]\n        self.min_heap.pop()\n        self.__sinkdown(0)\n    def get_size(self):\n        '''\n        Return the size of the heap.\n        '''\n        return len(self.min_heap)\n    def get_minimum(self):\n        '''\n        Return the minimum element of the heap.\n        '''\n        return self.min_heap[0]\n    def get_maximum(self):\n        '''\n        Return the maximum element of the heap.\n        '''\n        return self.min_heap[-1]\n    def get_nth_element(self,index):\n        '''\n        Return the nth element of the heap.\n        '''\n        if(index<0):\n            print(\"Index must be a non-negative integer.\")\n            return\n        if(index>=len(self.min_heap)):\n            print(\"Index out of range.\")\n            return\n        return self.min_heap[index]\n    def print_heap(self):\n        '''\n        Print the entire heap.\n        '''\n        for i in self.min_heap:\n            print(i)\n",
        "num_ids": 20
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #num1 = [[2,4],[2,3]]\n    #num2 = [[1,3],[2,5]]\n    #num3 = [[1,4],[5,7]]\n    #num1 = [[2,4],[2,3]]\n    #num2 = [[1,3],[2,5]]\n    #num3 = [[1,4],[5,7]]\n    #num1 = [[2,4],[2,3]]\n    #num2 = [[1,3],[2,5]]\n    #num3 = [[1,4],[5,7]]\n    #num1 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num2 = [[1,2,3,4],[5,6,7,8,9]]\n    #num3 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num1 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num2 = [[1,2,3,4],[5,6,7,8,9]]\n    #num3 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num1 = [[1,2,3,4],[4,5,6,7,8,9],[1,2,3,4]]\n    #num2 = [[1,2,3,4],[5,6,7,8,9],[1,2,3,4]]\n    #num3 = [[1,2,3,4],[4,5,6,7,8,9],[1,2,3,4]]\n    #num1 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num2 = [[1,2,3,4],[5,6,7,8,9]]\n    #num3 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num1 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num2 = [[1,2,3,4],[5,6,7,8,9]]\n    #num3 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num1 = [[1,2,3,4,5,6,7,8],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8],[4,5,6,7,8,9,10,11]]\n    #num3 = [[1,2,3,4,5,6,7,8],[4,5,6,7,8,9,10,11]]\n    #num1 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num2 = [[1,2,3,4],[5,6,7,8,9]]\n    #num3 = [[1,2,3,4],[4,5,6,7,8,9]]\n    #num1 = [[1,2,3,4],[4,5,6,7,8,9],[1,2,3,4]]\n    #num2 = [[1,2,3,4],[5,6,7,8,9],[1,2,3,4]]\n    #num3 = [[1,2,3,4],[4,5,6,7,8,9],[1,2,3,4]]\n    #num1 = [[1,2,3,4],[4,5,6,7,8,9],[1,2,3,4]]\n    #num2 = [[1,2,3,4],[5,6,7,8,9],[1,2,3,4]]\n    #num3 = [[1,2,3,4],[4,5,6,7,8,9],[1,2,3,4]]\n    #num1 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num3 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num1 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num3 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num1 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num3 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num1 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num3 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num1 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num3 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num1 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num3 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num1 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num3 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num1 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num3 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num1 = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11]]\n    #num2 = [[1,2,3,4,5,6,7,8",
        "num_ids": 2004
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while len(num1)>0 and len(num2)>0 and len(num3)>0:\n        if num1[0]<num2[0] and num1[0]<num3[0]:\n            merged_list.append(num1.pop(0))\n        elif num2[0]<num1[0] and num2[0]<num3[0]:\n            merged_list.append(num2.pop(0))\n        else:\n            merged_list.append(num3.pop(0))\n    while len(num1)>0:\n        merged_list.append(num1.pop(0))\n    while len(num2)>0:\n        merged_list.append(num2.pop(0))\n    while len(num3)>0:\n        merged_list.append(num3.pop(0))\n    return merged_list\n",
        "num_ids": 229
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a = sorted(num1 + num2 + num3)\n    return a\nprint(merge_sorted_list([3,4,6],[5,2,1],[2,3,4]))\n",
        "num_ids": 51
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_list = num1\n    num2_list = num2\n    num3_list = num3\n    num1_list.extend(num2_list)\n    num1_list.extend(num3_list)\n    num1_list.sort()\n    return num1_list\n    # Merge Sort\n    # Divide the array into left and right of middle and sort each part\ndef merge_sorted_list_pythonic(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1)>1:\n        if num1[0]<num1[1]:\n            middle = num1[0:len(num1)//2]\n        else:\n            middle = num1[len(num1)//2:len(num1)]\n        left = num1[len(num1)//2:len(num1)]\n        return merge_sorted_list_pythonic(left,merge_sorted_list_pythonic(middle,num2,num3))\n    else:\n        return num1\n",
        "num_ids": 131
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if not s:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return odd_Equivalent(s[1:], n - 1) + odd_Equivalent(s[2:], n - 1)\n    \n    \ndef rot_binary(s,n):\n    '''\n    Write a python function to rotate a binary string by the given number of places.\n    '''\n    if not s:\n        return ''\n    if n == 0:\n        return s\n    return rot_binary(s[1:],n) + s[0]\n        \n    \ndef string_reverse(s):\n    '''\n    Write a python function to reverse the characters in the given string.\n    '''\n    if not s:\n        return ''\n    return s[::-1]\n    \n    \ndef string_reversed(s):\n    '''\n    Write a python function to reverse the characters in the given string.\n    '''\n    if not s:\n        return ''\n    return s[::-1]\n        \n    \ndef num_rot(n):\n    '''\n    Write a python function to find the number of rotations of a given string, when rotated by the given number of places.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return num_rot(n - 1) + num_rot(n - 1)\n        \n    \ndef longestPalindrome(s):\n    '''\n    Write a python function to find the longest palindrome in the given string.\n    '''\n    if not s:\n        return ''\n    if len(s) == 1:\n        return s\n    def isPalindrome(s):\n        if s == s[::-1]:\n            return True\n        return False\n    start, end = 0,0\n    for i in range(len(s)):\n        odd_count = odd_Equivalent(s,i)\n        if odd_count > 0 and isPalindrome(s[start:i+1]):\n            end = i\n            start = i-odd_count\n            break\n    odd_count = odd_Equivalent(s,len(s)-1)\n    if odd_count > 0 and isPalindrome(s[start:len(s)]):\n        end = len(s)\n    return s[start:end]\n",
        "num_ids": 190
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = []\n    for i in s:\n        l.append(i)\n",
        "num_ids": 22
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    count = 0\n    for i in range(n):\n        s = list(s[1:] + s[:1])\n    for i in s:\n        if int(i) % 2!= 0:\n            count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s)==0 or n<0:\n        return 0\n    if n==0:\n        return 1\n    dp=[0]*(n+1)\n    dp[1]=1\n    for i in range(2,n+1):\n        cnt=0\n        for j in range(len(s)-1,-1,-1):\n            if s[j]=='0':\n                cnt+=dp[i-1]\n            else:\n                cnt+=dp[i]\n        dp[i]=cnt\n    return dp[n]\n",
        "num_ids": 137
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import math \n    count=0\n    for i in range(0,n): \n        s=s[1:] + s[0]\n    return s.count('1')\n    ",
        "num_ids": 47
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    total = 0\n    for i in range(0,n):\n        total = total + int(s[i])\n    print(total)\n",
        "num_ids": 36
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    while n > 0:\n        temp = s.pop(0)\n        s.append(temp)\n        n = n-1\n    odd_count = 0\n    for i in s:\n        if i == \"1\":\n            odd_count = odd_count+1\n    return odd_count\n",
        "num_ids": 81
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=bin(s)[2:]\n    a=''\n    for i in range(len(s)):\n        if i%2!=0:\n            a+=s[i]\n    b=bin(int(a,2)+n)\n    b=b[2:]\n    c=''\n    for i in range(len(b)):\n        if i%2!=0:\n            c+=b[i]\n    return int(c,2)\n",
        "num_ids": 113
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s.replace(' ','')\n    ans=0\n    for i in range(len(s)):\n        if int(s[i])%2==1:\n            ans+=1\n    return ans",
        "num_ids": 52
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        print('n must be a positive integer')\n        return\n    if len(s)==0:\n        return 0\n    s=s.replace(' ','')\n    if s[0]=='0':\n        return odd_Equivalent(s[1:],n)\n    if n==1:\n        return 1\n    s1=''\n    for i in range(len(s)-1):\n        if int(s[i])%2!=0:\n            s1=s1+s[i]\n    return odd_Equivalent(s1,n-1)\n",
        "num_ids": 146
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l1=nestedlist[0]\n    l2=nestedlist[1]\n",
        "num_ids": 24
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in common_elements:\n                common_elements.add(element)\n    return common_elements\n",
        "num_ids": 56
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    seen = set()\n    for lst in nestedlist:\n        for elem in lst:\n            if elem not in seen:\n                seen.add(elem)\n    return seen\n",
        "num_ids": 48
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        if len(nestedlist[i]) == 0:\n            common += []\n        else:\n            for j in range(len(nestedlist[i])):\n                if nestedlist[i][j] in common:\n                    continue\n                else:\n                    common.append(nestedlist[i][j])\n    return common\n",
        "num_ids": 98
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for i in nestedlist:\n        if i == None:\n            continue\n        if i in res:\n            return i\n        else:\n            for j in common_in_nested_lists(i):\n                if j not in res:\n                    res.append(j)\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        if isinstance(lst, list):\n            common_elements.extend(common_in_nested_lists(lst))\n        else:\n            common_elements.append(lst)\n",
        "num_ids": 68
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common\n",
        "num_ids": 64
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    \n    # Iterate through each item in nested list\n    for element in nestedlist:\n        \n        # If the list contains list, find the common element in the list\n        if isinstance(element,list):\n            common_elements = common_elements + common_in_nested_lists(element)\n        else:\n            common_elements.append(element)\n    \n    # Return the common elements list\n    return common_elements\n",
        "num_ids": 114
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for elem in nestedlist:\n        if isinstance(elem, list):\n            result.extend(common_in_nested_lists(elem))\n        elif elem not in result:\n            result.append(elem)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list1 = []\n    for i in range(len(nestedlist)):\n        if type(nestedlist[i]) == list:\n            list1.extend(common_in_nested_lists(nestedlist[i]))\n        else:\n            list1.append(nestedlist[i])\n    list1 = list(set(list1))\n    return list1\n",
        "num_ids": 94
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if str(int(text)) == text:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.replace('.','',1).isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if len(element) == 0:\n            return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]!={}:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i].keys())!= 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not x for x in list1)\n    ",
        "num_ids": 16
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for list_1 in list1:\n        if not list_1:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = tuple(nums)\n    res = 0\n    for i in range(len(nums)):\n        res += nums[i] * 10**(len(nums)-i-1)\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(str(nums).replace('(','').replace(')',''))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = 0\n    for i in range(len(nums)):\n        n = n * 10 + nums[i]\n    return n\n",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([x for x in nums if x!= 0])\n",
        "num_ids": 19
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    assert nums and isinstance(nums, tuple)\n    assert all(isinstance(n, int) and n > 0 for n in nums)\n    return sum(nums)\n",
        "num_ids": 46
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(str(nums[0]) + str(nums[1]) + str(nums[2]))\n",
        "num_ids": 31
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    \n    for num in nums:\n        i += num\n",
        "num_ids": 22
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j].strip('\\\"')!= '':\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = test_list[i][j]\n            else:\n                test_list[i][j] = 0.0\n    return test_list\n    \ndef get_input_type_and_check_the_list_is_valid(input_type, test_list):\n    '''\n    Check that the input type is valid and the test_list is valid.\n    '''\n    if input_type == 'list':\n        if isinstance(test_list, list):\n            return test_list\n        else:\n            raise TypeError('The input type is valid but the test list is not a list.')\n    if input_type =='string':\n        if isinstance(test_list, str):\n            return test_list\n        else:\n            raise TypeError('The input type is valid but the test list is not a string.')\n    raise TypeError('The input type is not valid.')\n        \n",
        "num_ids": 124
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in range(len(test_list)):\n        test_list[x] = list_to_float(test_list[x])\n    return test_list\n",
        "num_ids": 43
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == int or type(test_list[i][j]) == float:\n                test_list[i][j] = float(test_list[i][j])\n",
        "num_ids": 82
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == int or type(test_list[i][j]) == float:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n",
        "num_ids": 88
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 72
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convert_to_float = []\n",
        "num_ids": 12
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_length = len(test_list)\n    for i in range(test_list_length):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                test_list[i][j] = float(test_list[i][j])\n            elif isinstance(test_list[i][j], int) or isinstance(test_list[i][j], float):\n                continue\n            else:\n                raise TypeError\n    return test_list\n",
        "num_ids": 131
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list_to_float_helper(test_list[i])\n    return test_list\n",
        "num_ids": 46
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for x in range(0, len(test_list)):\n            test_list[x] = float(test_list[x])\n    except:\n        print('Error! Wrong input!')\n",
        "num_ids": 53
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list_to_float(test_list[i])\n    return test_list\n",
        "num_ids": 43
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef number_to_string(number):\n    '''\n    Write a function to convert a number to a string.\n    '''\n    return str(number)\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings to a single string, separated by a space.\n    '''\n    return \" \".join(list)\n    \ndef string_to_number(string):\n    '''\n    Write a function to convert a string to a number.\n    '''\n    return int(string)\n    \ndef number_to_string(number):\n    '''\n    Write a function to convert a number to a string.\n    '''\n    return str(number)\n    \ndef list_to_number(list):\n    '''\n    Write a function to convert a list of strings to a single number, separated by a space.\n    '''\n    return int(list)\n    \ndef list_to_number(list):\n    '''\n    Write a function to convert a list of strings to a single number, separated by a space.\n    '''\n    return int(list)\n    \ndef remove_space(string):\n    '''\n    Write a function that removes all the spaces from the string.\n    '''\n    return string.replace(\" \",\"\")\n",
        "num_ids": 12
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \") \n",
        "num_ids": 12
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n",
        "num_ids": 12
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split() \n",
        "num_ids": 10
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n",
        "num_ids": 12
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = start + (end-start)//2\n        if arr[mid] == arr[mid+1]:\n            start = mid+1\n        else:\n            end = mid-1\n    return arr[start]\n",
        "num_ids": 76
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # Initialize the head and tail pointer at the beginning and end of the array respectively\n    head = 0\n    tail = len(arr) - 1\n    \n    while head <= tail:\n        # Check if the middle element is the duplicate element\n        if arr[head]!= arr[tail]:\n            # Check if the middle element is the duplicate element\n            if arr[head] == arr[tail]:\n                return arr[head]\n            \n            # Make the pointers move in the direction of the duplicate element\n            if arr[head] < arr[tail]:\n                head += 1\n            else:\n                tail -= 1\n        else:\n            # If the middle element is the duplicate element, move in the direction of the duplicate element\n            head += 1\n            \n    # If the while loop goes to the end without finding the duplicate element, return -1\n    return -1\n",
        "num_ids": 201
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] == 1:\n            return 1\n",
        "num_ids": 30
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n",
        "num_ids": 36
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n",
        "num_ids": 37
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return \"Not Found\"\n",
        "num_ids": 45
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        return -1\n    \n    mid = (len(arr)-1)//2\n    if arr[mid] == arr[mid+1]:\n        return -1\n    if arr[mid] == arr[mid-1]:\n        return -1\n    if arr[mid] == arr[mid+1]:\n        return arr[mid]\n    if arr[mid] == arr[mid-1]:\n        return arr[mid-1]\n    \n    return search(arr[:mid]) or search(arr[mid+1:])\n",
        "num_ids": 181
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]==arr[i+1]:\n            continue\n        else:\n            return arr[i]\n",
        "num_ids": 42
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr==None or len(arr)==0:\n        return None\n    unique=arr[0]\n    for i in range(1,len(arr)):\n        if unique!=arr[i]:\n            unique=arr[i]\n            break\n    return unique\n",
        "num_ids": 67
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    i = 1\n    while i < n:\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n        i += 1\n",
        "num_ids": 74
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    max_list = []\n    \n    # creating a tuple\n    for i in range(len(list1)):\n        list2.append(tuple(list1[i]))\n    \n    # finding max abs product\n    for i in range(len(list2)):\n        x = list2[i][0] * list2[i][1]\n        y = list2[i][1] * list2[i][2]\n        z = list2[i][2] * list2[i][0]\n        max_list.append((x,y,z))\n    \n    # find max value\n    max_value = max(max_list, key=lambda x: x[0])\n    print(max_value)\n",
        "num_ids": 182
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create a list to store the products\n    products = []\n    # For loop to iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the list of tuples\n        for j in range(len(list1)):\n            # If we have reached the end of the list\n            if i == j:\n                continue\n            # Otherwise, calculate the product\n            else:\n                products.append(list1[i][0] * list1[j][1])\n    # Return the maximum product\n    return max(products)\n",
        "num_ids": 137
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 1\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 82
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_num = 0\n    for elem in list1:\n        max_num = max(max_num, elem[0] * elem[1])\n",
        "num_ids": 41
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l = []\n    for i in range(0, len(list1) - 1):\n        tuple_num = list1[i]\n        tuple_num_plus1 = list1[i+1]\n        l.append(max(abs(tuple_num[0]*tuple_num_plus1[0]), abs(tuple_num[1]*tuple_num_plus1[1])))\n    return max(l)\n",
        "num_ids": 109
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    largest_product = -99999999999999999999999999\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > largest_product:\n                largest_product = product\n    return largest_product\n",
        "num_ids": 104
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_product_tuple = ()\n    for i in list1:\n        for j in list1:\n            product = i[0] * i[1] * j[1]\n            if product > max_product:\n                max_product = product\n                max_product_tuple = (i[0], i[1], j[0], j[1])\n",
        "num_ids": 95
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    \n    if len(list1) <= 2:\n        return max(list1)\n",
        "num_ids": 34
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if(len(list1)<=1):\n        return\n    max_product = list1[0]\n    max_product_temp = list1[0]\n    for i in range(0,len(list1)-1):\n        max_product_temp = max(max_product,max_product_temp*list1[i+1])\n        max_product = max(max_product_temp,max_product)\n    return max_product\n",
        "num_ids": 109
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    divisor = lambda x: sum(set(divisors(x)).difference([1]))\n    amicable = lambda n: sum(set(amicables(n)).difference([n]))\n    amicables = set()\n    numbers = set(range(1, limit+1))\n    while len(numbers) > 0:\n        try:\n            number = numbers.pop()\n            divisors = divisor(number)\n            if divisors in numbers:\n                amicables.add(number)\n                if divisors!= amicable(divisors):\n                    amicables.add(divisors)\n        except IndexError:\n            numbers.update(amicables)\n            amicables.clear()\n    return sum(amicables)\n",
        "num_ids": 182
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit):\n        sum_of_divisors_list = list_of_divisors(i)\n        # print(sum_of_divisors_list)\n        sum_of_divisors_sum = sum(sum_of_divisors_list)\n        if sum_of_divisors_sum!= i:\n            continue\n        sum_of_amicable_list = list_of_amicable_numbers(i)\n        # print(sum_of_amicable_list)\n        sum_of_amicable_sum = sum(sum_of_amicable_list)\n        if sum_of_amicable_sum!= i:\n            continue\n        sum_amicable += i\n    print(sum_amicable)\n",
        "num_ids": 195
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = {}\n    # helper function\n    def make_amicable(num):\n        return sum(range(num)) == num and sum(range(num+1, 2*num+1)) == 2*num\n    for n in range(1, limit+1):\n        if n in amicable and make_amicable(n):\n            amicable[n] = n\n    return sum(amicable.values())\n",
        "num_ids": 100
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = set()\n    amicable_numbers_sums = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        else:\n            amicable_numbers.add(i)\n            j = i + 1\n            while j <= limit:\n                if i == j and i in amicable_numbers:\n                    continue\n                elif j in amicable_numbers:\n                    sum += j\n                    if sum not in amicable_numbers:\n                        amicable_numbers.add(sum)\n                    else:\n                        continue\n                else:\n                    continue\n                j += 1\n    print(sum)\n    return sum\n",
        "num_ids": 173
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1,limit):\n        if sum_of_divisors(i) == i:\n            amicable_sum += i\n        \n    return amicable_sum\n",
        "num_ids": 54
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_list = []\n    for i in range(1, limit):\n        for j in range(i+1, limit):\n            if i!= j and i+j == limit and i < j:\n                amicable_list.append(i)\n                sum += i\n                break\n    return amicable_list, sum\n",
        "num_ids": 85
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = set()\n    amicable_sum = 0\n    for num in range(2, limit+1):\n        #print(num)\n        for d in range(2, num):\n            if num % d == 0:\n                #print(f\"{num} is divisible by {d}\")\n                if num-d in numbers:\n                    #print(f\"{num} - {d} = {num-d}\")\n                    #print(f\"{num} and {num-d} are amicable\")\n                    amicable_sum += num\n                    #print(amicable_sum)\n                    break\n                else:\n                    numbers.add(num-d)\n",
        "num_ids": 161
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        a, b = 0, 0\n        for j in range(1, i):\n            if i % j == 0:\n                a += j\n                if i == a:\n                    continue\n                for k in range(1, a):\n                    if i % k == 0:\n                        b += k\n                        if i == b:\n                            continue\n                        break\n        if a == i and b == i:\n            total += i\n    return total\n",
        "num_ids": 120
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(2, limit):\n        if sum(amicable_numbers) == i and i not in amicable_numbers:\n            amicable_numbers.add(i)\n            amicable_numbers.add(sum(amicable_numbers))\n    return sum(amicable_numbers)\n",
        "num_ids": 87
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n1, n2):\n        '''\n        Checks if n1 and n2 are amicable numbers.\n        '''\n        sum_1 = 0\n        sum_2 = 0\n        for i in range(1, n1):\n            if n1 % i == 0:\n                sum_1 += i\n        for i in range(1, n2):\n            if n2 % i == 0:\n                sum_2 += i\n        if sum_1 == n2 and sum_2 == n1:\n            return True\n        else:\n            return False\n",
        "num_ids": 103
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a) - cmath.phase(b)\ndef diff(s1,s2):\n    return abs(s1-s2)\ndef has_consecutive_digits(num):\n    count = 0\n    while num>0:\n        count +=1\n        num = num // 10\n    return count\ndef is_prime(num):\n    if num<=1:\n        return False\n    i=2\n    while i<=num/2:\n        if num%i==0:\n            return False\n        i+=1\n    return True\ndef num_div(num1,num2):\n    i = 0\n    if num1>num2:\n        while num1%num2!=0:\n            num1 -= num2\n            i += 1\n    else:\n        while num2%num1!=0:\n            num2 -= num1\n            i += 1\n    return i\ndef is_permutation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    count = 0\n    for i in range(0,len(str2)):\n        for j in range(0,len(str1)):\n            if str1[j]==str2[i]:\n                count+=1\n    if count==len(str1):\n        return True\n    return False\ndef is_palindrome(num):\n    if num<0:\n        num = num*-1\n    n = num\n    rev_num = 0\n    while n>0:\n        dig = n%10\n        rev_num = (rev_num*10) + dig\n        n = n//10\n    if rev_num == num:\n        return True\n    return False\ndef reverse_in_place(num,start,end):\n    if num<0:\n        num = num*-1\n    while start<end:\n        num_swap = num\n        dig1 = num_swap%10\n        num = num//10\n        dig2 = num_swap%10\n        num = num//10\n        num = num*10 + dig1\n        dig1 = dig2\n        num = num*10 + dig1\n    return num\ndef num_substr(num):\n    cnt = 0\n    while num>0:\n        cnt +=1\n        num //=10\n    return cnt\ndef is_palindrome_alternative(num):\n    if num<0:\n        num = num*-1\n    rev = 0\n    while num>0:\n        dig = num%10\n        rev = (rev*10) + dig\n        num = num//10\n    if rev == num:\n        return True\n    return False\ndef product_sum(arr):\n    if arr==[]:\n        return 0\n    n = len(arr)\n    if n==1:\n        return arr[0]\n    s = 0\n    a = arr[0]\n    for i in range(1,n):\n        a = a*arr[i]\n        s += a\n    return s\ndef is_rotation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    count = 0\n    if len(str2)<=len(str1):\n        for i in range(0,len(str2)):\n            if str1[i]!= str2[i+count]:\n                return False\n            count+=1\n        return True\n    else:\n        for i in range(0,len(str1)):\n            if str2[i]!= str1[i+count]:\n                return False\n            count+=1\n        return True\ndef is_rotation_alternative(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    str1 = str1 + str1\n    if str1.count(str2)>0:\n        return True\n    return False\ndef is_rotation_alternative_alternative(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    if len(str2)<=len(str1):\n        for i in range(0,len(str2)):\n            if str1[i]!= str2[i+len(str2)]:\n                return False\n        return True\n    else:\n        for i in range(0,len(str1)):\n            if str2[i]!= str1[i+len(str2)]:\n                return False\n        return True\ndef factorial(num):\n    if num==0 or num<0:\n        return 1\n    else:\n        return num * factorial(num-1)\ndef factorial_iterative(num):\n    if num==0 or num<0:\n        return 1\n    fact = 1\n    for i in range(1,num+1):\n        fact = fact * i\n    return fact\ndef is_substring(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    count = 0\n    for i in range(0,len(str2)):\n        if str1[i] == str2[i]:\n            count+=1\n    if count==len(str2):\n        return True\n    return False\ndef is_substring_alternative(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    if len(str2)<=len(str1):\n        for i in range(0,len(str2)):\n            if str1.find(str2[i])!=-1:\n                return True\n        return False\n    else:\n        for i in range(0,len(str1)):\n            if str2.find(str1[i])!=-1:\n                return True\n        return False\ndef reverse_substring(str1,start,end):\n    if start>=end:\n        return str1\n    else:\n        rev = 0\n        while start<=end:\n            dig = str1[start]\n            rev = (rev*10)+dig\n            str1 = str1[:start]+str1[start+1:]\n            start += 1\n        rev = rev*10 + str1[start]\n        return reverse_substring(str1,0,len(str1)-1)\ndef reverse_substring_alternative(str1,start,end):\n    if start>=end:\n        return str1\n    else:\n        rev = 0\n        while start<=end:\n            dig = str1[start]\n            rev = (rev*10)+dig\n            str1 = str1[:start]+str1[start+1:]\n            start += 1\n        return rev\ndef divide(dividend,divisor):\n    if divisor == 0:\n        return 0\n    if dividend == 0:\n        return 0\n    if divisor == 1:\n        return dividend\n    quo = 0\n    temp = dividend\n    while temp>=divisor:\n        quo = quo+1\n        temp = temp-divisor\n    return quo\ndef divide_alternative(dividend,divisor):\n    if divisor == 0:\n        return dividend\n    if dividend == 0:\n        return dividend\n    if divisor == 1:\n        return dividend\n    quo = dividend\n    while dividend>=divisor:\n        quo = quo//divisor\n        dividend = dividend-divisor*quo\n    return quo\ndef main():\n    print(is_palindrome_alternative(121))\n    print(is_palindrome_alternative(1))\n    print(is_palindrome_alternative(1221))\n    print(is_palindrome_alternative(0))\n    print(is_palindrome_alternative(2020))\n    print(is_palindrome_alternative(1234))\n    print(is_palindrome_alternative(-1234))\n    print(is_palindrome_alternative(1232))\n    print(is_palindrome_alternative(1000000000))\n    print(is_palindrome_alternative(0))\n    print(is_palindrome_alternative(-121))\n    print(is_palindrome_alternative(121))\n    print(is_palindrome_alternative(-1221))\n    print(is_palindrome_alternative(-1221))\n    print",
        "num_ids": 2019
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = (a.real**2 + a.imag**2)**0.5\n    y = (b.real**2 + b.imag**2)**0.5\n    return abs(cmath.acos(x/y))\ndef n_com_circle(radius, n):\n    '''\n    Write a function to return the n_th circle's center and radius given a circle's radius.\n    '''\n    x = radius * 2 * cmath.acos(n / 2)\n    y = x * cmath.sqrt(radius**2 - x**2)\n    return x, y\ndef euler(a, b, m):\n    '''\n    Write a function to compute the square of the sum of the angles of a triangle whose vertices are (a,b) and (c,d).\n    '''\n    return 2 * ((a.real*b.real + a.imag*b.imag)**2 + (a.real*c.real + a.imag*c.imag)**2 + (a.real*d.real + a.imag*d.imag)**2 + (b.real*c.real + b.imag*c.imag)**2 + (b.real*d.real + b.imag*d.imag)**2 + (c.real*d.real + c.imag*d.imag)**2)**0.5\ndef sum_of_four_squares(a, b, c, d):\n    '''\n    Write a function to compute the sum of the squares of the angles of a square triangle whose vertices are (a,b) and (c,d).\n    '''\n    x = (a.real*b.real + a.imag*b.imag)**2 + (c.real*d.real + c.imag*d.imag)**2 + (d.real*b.real + d.imag*b.imag)**2 + (a.real*c.real + a.imag*c.imag)**2\n    y = (a.real*b.real + a.imag*b.imag)**2 + (c.real*d.real + c.imag*d.imag)**2 + (d.real*b.real + d.imag*b.imag)**2 + (a.real*c.real + a.imag*c.imag)**2\n    return (x + y)**0.5\ndef gcd_of_three(a, b, c):\n    '''\n    Write a function to compute the greatest common divisor of the three given integers.\n    '''\n    if a > b and a > c:\n        return gcd_of_three(b, c, a)\n    elif b > a and b > c:\n        return gcd_of_three(a, c, b)\n    else:\n        return gcd_of_three(a, b, c)\ndef gcd_of_four(a, b, c, d):\n    '''\n    Write a function to compute the greatest common divisor of four given integers.\n    '''\n    if a > b and a > c and a > d:\n        return gcd_of_four(b, c, d, a)\n    elif b > a and b > c and b > d:\n        return gcd_of_four(a, c, d, b)\n    elif c > a and c > b and c > d:\n        return gcd_of_four(a, b, d, c)\n    elif d > a and d > b and d > c:\n        return gcd_of_four(a, b, c, d)\ndef gcd_of_three_least_positive(a, b, c):\n    '''\n    Write a function to compute the least positive integer that is divisible by both the least positive integer and the least positive integer of the four given integers.\n    '''\n    if a > b and a > c:\n        return gcd_of_three_least_positive(b, c, a)\n    elif b > a and b > c:\n        return gcd_of_three_least_positive(a, c, b)\n    else:\n        return gcd_of_three_least_positive(a, b, c)\ndef two_sum_in_three(a, b, c):\n    '''\n    Write a function to compute the sum of two integers that is divisible by three.\n    '''\n    if a % 3 == 0 and b % 3 == 0:\n        return a + b\n    elif a % 3 == 0 and c % 3 == 0:\n        return a + c\n    elif b % 3 == 0 and c % 3 == 0:\n        return b + c\n    elif a % 3 == 0:\n        return a + b + c\n    elif b % 3 == 0:\n        return b + c + a\n    elif c % 3 == 0:\n        return c + a + b\ndef can_divide_by_three(a, b, c):\n    '''\n    Write a function to compute the sum of two integers that is divisible by three.\n    '''\n    if (a % 3 == 0 or b % 3 == 0 or c % 3 == 0) and (a + b + c) % 3 == 0:\n        return True\n    else:\n        return False\ndef max_in_two_given_array(a, b, c, d):\n    '''\n    Write a function to compute the sum of the two maximum integers in a given array.\n    '''\n    if a > b and a > c:\n        return a + max(b, c)\n    elif b > a and b > c:\n        return b + max(a, c)\n    else:\n        return d + max(a, b)\ndef rectangle_area(a, b):\n    '''\n    Write a function to compute the area of a rectangle.\n    '''\n    return a * b\ndef three_sum_to_zero_one(a, b, c):\n    '''\n    Write a function to compute the sum of three integers that are not equal to zero and not equal to one.\n    '''\n    if a!= 0 or b!= 0 or c!= 0:\n        return a + b + c - 3 * min(a, b, c)\n    else:\n        return -1\ndef product_of_digits(n):\n    '''\n    Write a function to compute the product of all the digits of a non-negative integer.\n    '''\n    s = str(n)\n    if len(s) == 1:\n        return n\n    else:\n        return n * product_of_digits(int(s[0]))\ndef sum_of_two_squares(a, b):\n    '''\n    Write a function to compute the sum of the squares of the two integers given.\n    '''\n    return (a*a) + (b*b)\ndef max_of_three_squares(a, b, c):\n    '''\n    Write a function to compute the sum of the squares of the three integers given.\n    '''\n    return (a*a) + (b*b) + (c*c)\ndef maximum_number(a, b, c):\n    '''\n    Write a function to compute the maximum of three integers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\ndef maximum_in_two_array(a, b, c):\n    '''\n    Write a function to compute the maximum of the two integers in a given array.\n    '''\n    if a > b:\n        return a\n    elif a > c:\n        return a\n    elif b > c:\n        return b\n    else:\n        return c\ndef three_sum(a, b, c):\n    '''\n    Write a function to compute the sum of the three integers that is not equal to zero and is not equal to one.\n    '''\n    s = (a + b + c) - min(a, b, c)\n    if s == 0:\n        return -1\n    else:\n        return s\ndef d(m, n):\n    '''\n    Write a function to compute the sum of the integers between m and n (both included).\n    '''\n    return (m * (m + 1)) / 2 + (m * (m + 2)) / 2\ndef factorial(n):\n    '",
        "num_ids": 35
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    temp = complex(a,b)\n    return cmath.phase(temp)\n",
        "num_ids": 22
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = complex(a,b)\n    angle = cmath.phase(x)\n    return angle\n",
        "num_ids": 27
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    arccos=cmath.acos(a/abs(a))\n    arccosb=cmath.acos(b/abs(b))\n    angle = arccos - arccosb\n    return angle\n",
        "num_ids": 55
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+bj)\ndef main():\n    print('Welcome to the angle of a complex number calculator')\n    print('Enter 1 to find the angle between two complex numbers')\n    print('Enter 2 to find the angle between a complex and a real number')\n    print('Enter 3 to find the angle between a complex and a imaginary number')\n    n=int(input())\n    if n==1:\n        print('Enter complex numbers in form a+bi')\n        a=complex(input())\n        b=complex(input())\n        print('Angle between complex number',a,'and complex number',b,'is',angle_complex(a,b))\n    elif n==2:\n        print('Enter real number')\n        a=float(input())\n        print('Enter imaginary number')\n        b=float(input())\n        print('Angle between a complex number and real number',a,'and imaginary number',b,'is',angle_complex(a,b))\n    elif n==3:\n        print('Enter complex number')\n        a=complex(input())\n        print('Enter imaginary number')\n        b=float(input())\n        print('Angle between a complex number and imaginary number',b,'is',angle_complex(a,b))\n    else:\n        print('Invalid input')\nif __name__=='__main__':\n    main()",
        "num_ids": 318
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+bj)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = complex(a)\n    b = complex(b)\n    return cmath.phase(a-b)/2\n    \ndef angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = complex(a)\n    b = complex(b)\n    return cmath.phase(a-b)\n    \ndef average_complex(c):\n    '''\n    Write a function that returns the average of all the complex numbers.\n    '''\n    c = complex(c)\n    avg = 0\n    for i in range(len(c)):\n        avg += c[i]\n    return avg/len(c)\n    \ndef average(c):\n    '''\n    Write a function that returns the average of all the complex numbers.\n    '''\n    c = complex(c)\n    avg = 0\n    for i in range(len(c)):\n        avg += c[i].real\n        avg += c[i].imag\n    return avg/len(c)\n    \ndef max_complex(c):\n    '''\n    Write a function that returns the maximum of all the complex numbers.\n    '''\n    c = complex(c)\n    return max(c)\n    \ndef max_complex_index(c):\n    '''\n    Write a function that returns the index of the maximum of all the complex numbers.\n    '''\n    c = complex(c)\n    return c.index(max(c))\n    \ndef max_complex_index_list(c):\n    '''\n    Write a function that returns a list of the indices of the maximum of all the complex numbers.\n    '''\n    c = complex(c)\n    return c.index(max(c))\n    \ndef min_complex(c):\n    '''\n    Write a function that returns the minimum of all the complex numbers.\n    '''\n    c = complex(c)\n    return min(c)\n    \ndef min_complex_index(c):\n    '''\n    Write a function that returns the index of the minimum of all the complex numbers.\n    '''\n    c = complex(c)\n    return c.index(min(c))\n    \ndef min_complex_index_list(c):\n    '''\n    Write a function that returns a list of the indices of the minimum of all the complex numbers.\n    '''\n    c = complex(c)\n    return c.index(min(c))\n    \ndef order_complex(c):\n    '''\n    Write a function that returns the order of all the complex numbers.\n    '''\n    c = complex(c)\n    return len(c)\n    \ndef order_complex_list(c):\n    '''\n    Write a function that returns a list of the orders of all the complex numbers.\n    '''\n    c = complex(c)\n    return len(c)\n    \ndef second_largest_complex(c):\n    '''\n    Write a function that returns the second largest of all the complex numbers.\n    '''\n    c = complex(c)\n    return max(c) - min(c)\n    \ndef second_largest_complex_index(c):\n    '''\n    Write a function that returns the index of the second largest of all the complex numbers.\n    '''\n    c = complex(c)\n    return c.index(max(c) - min(c))\n    \ndef second_largest_complex_index_list(c):\n    '''\n    Write a function that returns a list of the indices of the second largest of all the complex numbers.\n    '''\n    c = complex(c)\n    return c.index(max(c) - min(c))\n    \ndef sort_complex(c):\n    '''\n    Write a function that returns a sorted version of all the complex numbers.\n    '''\n    c = complex(c)\n    return sorted(c)\n    \ndef sort_complex_list(c):\n    '''\n    Write a function that returns a sorted version of all the complex numbers.\n    '''\n    c = complex(c)\n    return sorted(c)\n    \ndef sum_complex(c):\n    '''\n    Write a function that returns the sum of all the complex numbers.\n    '''\n    c = complex(c)\n    return sum(c)\n    \ndef sum_complex_list(c):\n    '''\n    Write a function that returns a list of the sums of all the complex numbers.\n    '''\n    c = complex(c)\n    return sum(c)\n    \ndef sum_of_power_of_complex(c,p):\n    '''\n    Write a function that returns the sum of all the numbers raised to the power of all the complex numbers.\n    '''\n    c = complex(c)\n    p = int(p)\n    ans = 0\n    for i in range(len(c)):\n        ans += c[i]**p\n    return ans\n    \ndef sum_of_power_of_complex_list(c,p):\n    '''\n    Write a function that returns a list of the sums of all the numbers raised to the power of all the complex numbers.\n    '''\n    c = complex(c)\n    p = int(p)\n    ans = []\n    for i in range(len(c)):\n        ans.append(c[i]**p)\n    return ans\n    \ndef sum_of_power_of_complex_list_2(c,p):\n    '''\n    Write a function that returns a list of the sums of all the numbers raised to the power of all the complex numbers.\n    '''\n    c = complex(c)\n    p = int(p)\n    ans = []\n    for i in range(len(c)):\n        ans.append(c[i]**p)\n    return list(map(sum, zip(ans, ans)))\n    \ndef sum_of_power_of_complex_list_3(c,p):\n    '''\n    Write a function that returns a list of the sums of all the numbers raised to the power of all the complex numbers.\n    '''\n    c = complex(c)\n    p = int(p)\n    ans = []\n    for i in range(len(c)):\n        ans.append(c[i]**p)\n    return [sum(i) for i in zip(ans, ans)]\n    \ndef sum_of_power_of_complex_list_4(c,p):\n    '''\n    Write a function that returns a list of the sums of all the numbers raised to the power of all the complex numbers.\n    '''\n    c = complex(c)\n    p = int(p)\n    ans = []\n    for i in range(len(c)):\n        ans.append(c[i]**p)\n    return list(map(sum, zip(ans, ans)))\n    \ndef sum_of_power_of_complex_list_5(c,p):\n    '''\n    Write a function that returns a list of the sums of all the numbers raised to the power of all the complex numbers.\n    '''\n    c = complex(c)\n    p = int(p)\n    ans = []\n    for i in range(len(c)):\n        ans.append(c[i]**p)\n    return list(map(sum, zip(ans, ans)))\n    \ndef sum_of_power_of_complex_list_6(c,p):\n    '''\n    Write a function that returns a list of the sums of all the numbers raised to the power of all the complex numbers.\n    '''\n    c = complex(c)\n    p = int(p)\n    ans = []\n    for i in range(len(c)):\n        ans.append(c[i]**p)\n    return list(map(sum, zip(ans, ans)))\n    \ndef sum_of_power_of_complex_list_7(c,p):\n    '''\n    Write a function that returns a list of the sums of all the numbers raised to the power of all the complex numbers.\n    '''\n    c = complex(c)\n    p = int(p)\n    ans = []\n    for i in range(len(c)):\n        ans.append(c[i]**p)\n    return list(map(sum, zip(ans, ans)))\n    \ndef sum_of_power_of_complex_list_8(c,p):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = 0\n    h = 0\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    while h < len(string):\n        if string[h] == '0':\n            count_0 += 1\n        elif string[h] == '1':\n            count_1 += 1\n        if count_0 == count_1:\n            max_diff = max(max_diff, h - l + 1)\n            h += 1\n            l = h\n        else:\n            count_0 = 0\n            count_1 = 0\n            h += 1\n    return max_diff\n",
        "num_ids": 147
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    if n==0:\n        return 0\n    i = 1\n    count = 0\n    max_diff = 0\n    while i<n:\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        max_diff = max(max_diff, count)\n        i += 1\n    return max_diff\n",
        "num_ids": 95
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def check(start_ind, end_ind, string):\n        while start_ind < end_ind:\n            if string[start_ind] == '1':\n                return -1\n            start_ind += 1\n        return 1\n        \n    def find_substr_len(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] == '0':\n                result.append(check(start_ind, i, string))\n        return max(result) if result else -1\n        \n    return find_substr_len(0, len(string), string)\n        \ndef length_of_longest_substring(string): \n    '''\n    Write a function to find the length of the longest substring without repeating characters.\n    '''\n    def check(start_ind, end_ind, string):\n        while start_ind < end_ind:\n            if string[start_ind] == string[end_ind]:\n                return -1\n            start_ind += 1\n        return end_ind - start_ind + 1\n        \n    def find_substr_len(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] == 'a':\n                result.append(check(start_ind, i, string))\n        return max(result) if result else -1\n        \n    return find_substr_len(0, len(string), string)\n        \ndef find_longest_word(string): \n    '''\n    Write a function to find the longest word(sub-string) in a given string of words.\n    '''\n    def check(word):\n        return len(word)\n        \n    def find_word(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] =='':\n                return result if result else -1\n            if string[i] == ',':\n                continue\n            if string[i] == '.':\n                break\n            result.append(string[i])\n        return max(result, key = check)\n        \n    def find_longest_words(string):\n        result = []\n        start_ind, end_ind = 0, 0\n        for i in range(len(string)):\n            if string[i] =='':\n                start_ind = i + 1\n            elif string[i] == '.':\n                end_ind = i + 1\n                break\n        return find_word(start_ind, end_ind, string)\n    \n    return find_longest_words(string)\n        \ndef find_longest_words(string): \n    '''\n    Write a function to find the longest word(sub-string) in a given string of words.\n    '''\n    def check(word):\n        return len(word)\n        \n    def find_word(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] =='':\n                return result if result else -1\n            if string[i] == ',':\n                continue\n            if string[i] == '.':\n                break\n            result.append(string[i])\n        return max(result, key = check)\n        \n    def find_longest_words(string):\n        result = []\n        start_ind, end_ind = 0, 0\n        for i in range(len(string)):\n            if string[i] =='':\n                start_ind = i + 1\n            elif string[i] == '.':\n                end_ind = i + 1\n                break\n        return find_word(start_ind, end_ind, string)\n    \n    return find_longest_words(string)\n        \ndef max_consecutive_ones(string): \n    '''\n    Write a function to find the maximum consecutive 1s in the given binary string.\n    '''\n    def check(start_ind, end_ind, string):\n        if string[start_ind] == '0' and start_ind == end_ind:\n            return 0\n        if string[start_ind] == '1':\n            return 1\n        \n    def find_consecutive_ones(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] == '1':\n                result.append(check(start_ind, i, string))\n        return max(result) if result else -1\n    \n    return find_consecutive_ones(0, len(string), string)\n",
        "num_ids": 163
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    sub_str_len = 0\n    for i in range(len(string)):\n        sub_str = string[i:i+1]\n        curr_diff = 0\n        for j in range(len(sub_str)):\n            if sub_str[j] == \"0\":\n                curr_diff += 1\n            else:\n                curr_diff -= 1\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n            sub_str_len = len(sub_str)\n    return sub_str_len, max_diff\n",
        "num_ids": 147
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n    max_diff = abs(count_0 - count_1)\n    return max_diff\n",
        "num_ids": 94
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    left = 0\n    max_length = 0\n    ones = 0\n    for right in range(len(string)):\n        if string[right] == '0':\n            ones -= 1\n        if string[right] == '1':\n            ones += 1\n        if right - left > max_length:\n            max_length = right - left\n        if ones == 0:\n            left = right + 1\n    return max_length\n",
        "num_ids": 103
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return i\n    return len(string)\n        \n",
        "num_ids": 64
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    maxdiff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        if count0!= count1:\n            maxdiff = max(maxdiff, count0 - count1)\n    return maxdiff\n",
        "num_ids": 90
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_substring = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            prev_substring += 1\n        else:\n            prev_substring -= 1\n        max_diff = max(max_diff, prev_substring)\n    return max_diff\n",
        "num_ids": 83
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    maxi = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count > maxi:\n            maxi = count\n    return maxi\n",
        "num_ids": 69
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum_result = 0\n    common_divisor = 0\n    if a == b:\n        sum_result = a * (a - 1)\n        common_divisor = a\n    else:\n        sum_result = a * b\n        common_divisor = gcd(a, b)\n    return sum_result, common_divisor\n",
        "num_ids": 87
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b // gcd(a,b)\n",
        "num_ids": 16
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    common_divisors = set()\n",
        "num_ids": 17
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum=0\n    if a>=0 and b>=0 and a!=b:\n        for i in range(1,min(a,b)+1):\n            if a%i==0 and b%i==0:\n                sum+=i\n        print(sum)\n    else:\n        print('Enter the valid numbers')\n",
        "num_ids": 81
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    sum1 = 0\n    while i <= min(a,b):\n        if a%i == 0 and b%i == 0:\n            sum1 = sum1 + i\n        i = i + 1\n    return sum1\n    \ndef gcd(a,b): \n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b:\n        a, b = b, a%b\n    return a\n",
        "num_ids": 44
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, a):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list1 = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            list1.append(i)\n    sum = 0\n    for i in range(0,len(list1)):\n        sum += list1[i]\n    print(sum)\n",
        "num_ids": 80
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    res = 0\n    for i in range(1,a):\n        if(a%i == 0 and b%i ==0):\n            res = res + i\n    print(res)\n",
        "num_ids": 47
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    for i in range(1,min(a,b) + 1):\n        if (a%i == 0) and (b%i == 0):\n            s += i\n    return s\n",
        "num_ids": 52
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x_binary = bin(x)\n    y_binary = bin(y)\n",
        "num_ids": 22
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if type(x) == int and type(y) == int:\n        return x * y\n    else:\n        raise TypeError(\"The arguments should be integers.\")\n",
        "num_ids": 41
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n",
        "num_ids": 7
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str = str.split()\n    res = []\n    for word in str:\n        if len(word) > n:\n            res.append(word)\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # dictionary = {}\n    # for word in str:\n    #     if len(word) in dictionary:\n    #         dictionary[len(word)].append(word)\n    #     else:\n    #         dictionary[len(word)] = [word]\n",
        "num_ids": 64
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    d={}\n    for word in str.split():\n        word = word.lower()\n        if len(word) < n:\n            continue\n        if word in d:\n            d[word] = d.get(word) + 1\n        else:\n            d[word] = 1\n    for key, value in d.items():\n        if value == 1:\n            continue\n        print(f'{key} - {value}')\n",
        "num_ids": 106
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    words = str.split(' ')\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for i in str:\n        if len(i) >= n:\n            return i\n",
        "num_ids": 23
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(\" \") if len(word) > n]\n",
        "num_ids": 24
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Write your code here\n    new_list = []\n    for item in str:\n        if len(item) >= n:\n            new_list.append(item)\n    return new_list\n    # new_list = []\n    # for i in range(len(str)):\n    #     if len(str[i]) >= n:\n    #         new_list.append(str[i])\n    # return new_list\n",
        "num_ids": 105
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) >= n:\n            result.append(word)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if len(str) == 0:\n        return \"String is empty\"\n    else:\n        l = []\n        for i in range(len(str)):\n            if len(str[i]) > n:\n                l.append(str[i])\n        return l\n    \n",
        "num_ids": 69
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = []\n    for word in str.split():\n        if len(word) >= n:\n            word_list.append(word)\n    return word_list\n",
        "num_ids": 44
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n_rows = len(my_matrix)\n    n_cols = len(my_matrix[0])\n    is_magic = True\n    if not is_magic or n_rows!= n_cols:\n        is_magic = False\n    else:\n        for i in range(0, n_rows):\n            for j in range(0, n_cols):\n                if (i!= j) and (my_matrix[i][j]!= my_matrix[j][i]):\n                    is_magic = False\n                    break\n                else:\n                    continue\n    return is_magic\n",
        "num_ids": 149
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check dimensions\n    row_num = len(my_matrix)\n    if row_num == 0:\n        return False\n    col_num = len(my_matrix[0])\n    if row_num!= col_num:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] % 2!= 0:\n                return False\n",
        "num_ids": 56
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return is_magic_square(my_matrix) and is_magic_square_sparse(my_matrix)\n",
        "num_ids": 31
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic = True\n    sq = len(my_matrix)\n    for i in range(0, sq):\n        if my_matrix[i][i]!= my_matrix[i][sq-1-i] or my_matrix[i][sq-1-i]!= my_matrix[sq-1-i][i] or my_matrix[sq-1-i][i]!= my_matrix[i][i]:\n            magic = False\n            break\n    return magic\n",
        "num_ids": 122
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0, len(my_matrix)):\n        if sum(my_matrix[i])!= my_matrix[i][i]:\n            return False\n    for i in range(0, len(my_matrix)):\n        tmp = []\n        for j in range(0, len(my_matrix)):\n            tmp.append(my_matrix[j][i])\n        if sum(tmp)!= my_matrix[i][i]:\n            return False\n    for i in range(0, len(my_matrix)):\n        tmp = []\n        for j in range(0, len(my_matrix)):\n            tmp.append(my_matrix[i][j])\n        if sum(tmp)!= my_matrix[i][i]:\n            return False\n    for i in range(0, len(my_matrix)):\n        tmp = []\n        for j in range(0, len(my_matrix)):\n            tmp.append(my_matrix[j][i])\n        if sum(tmp)!= my_matrix[i][i]:\n            return False\n    return True\n",
        "num_ids": 275
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix == my_matrix[::-1]:\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix)):\n                if i+j!= len(my_matrix) and my_matrix[i][j]!= int(math.sqrt(my_matrix[i][j])):\n                    return False\n                else:\n                    continue\n            return True\n        return False\n    else:\n        return False\n",
        "num_ids": 120
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    a = 0\n    while a < len(my_matrix):\n        if sum(my_matrix[a])!= a*a:\n            return False\n        a += 1\n    if my_matrix[0][0] == 0:\n        for i in range(1, len(my_matrix)):\n            if my_matrix[i][0]!= i*i:\n                return False\n    else:\n        for i in range(len(my_matrix)):\n            if my_matrix[0][i]!= i:\n                return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= (i*j):\n                return False\n    return True\n",
        "num_ids": 198
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_len = len(my_matrix)\n    col_len = len(my_matrix[0])\n    for row in my_matrix:\n        if len(row)!= row_len:\n            return False\n    for i in range(col_len):\n        counter = 0\n        for j in range(row_len):\n            if my_matrix[j][i]!= counter + 1:\n                return False\n            counter += 1\n    return True\n",
        "num_ids": 114
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    histogram = {}\n    for num in nums:\n        if num in histogram:\n            histogram[num] += 1\n        else:\n            histogram[num] = 1\n",
        "num_ids": 46
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # {1: 2, 2: 1, 3: 1, 4: 1}\n    counter = defaultdict(int)\n    for num in nums:\n        counter[num] += 1\n    # print(counter)\n    max_val = max(counter.values())\n    for key, value in counter.items():\n        if value == max_val:\n            return key\n",
        "num_ids": 90
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    # print(counts)\n    max_count = 0\n    max_count_val = 0\n    for val in counts.values():\n        if val > max_count:\n            max_count = val\n            max_count_val = counts[val]\n        else:\n            pass\n    # print(max_count, max_count_val)\n    return max_count_val\n",
        "num_ids": 120
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = -1\n    max_item = None\n    for item in nums:\n        if nums[item] > max_count:\n            max_item = item\n            max_count = nums[item]\n    return max_item\n",
        "num_ids": 62
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=lambda k: d[k])\n",
        "num_ids": 43
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    cnt = defaultdict(int)\n    for n in nums:\n        cnt[n] += 1\n",
        "num_ids": 29
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Sort the list and find the maximum occurrence of each element.\n    sorted_list = sorted(nums)\n    max_freq = {}\n",
        "num_ids": 37
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #Code here\n    a = defaultdict(int)\n    for i in nums:\n        a[i] += 1\n    max_key = max(a,key=a.get)\n    return max_key\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2007
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for item in nums:\n        counts[item] += 1\n    return max(counts, key=lambda x: counts[x])\n",
        "num_ids": 46
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    data = defaultdict(lambda: 0)\n    for i in nums:\n        data[i] += 1\n    return max(data.keys(), key=lambda k: data[k])\n",
        "num_ids": 47
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    vowel = ''\n    new_string = ''\n    \n    for i in str1:\n        if i in vowels:\n            vowel = i\n            break\n    \n    for i in range(len(str1)):\n        if str1[i] == vowel:\n            new_string += str1[len(str1) - i - 1]\n        else:\n            new_string += str1[i]\n    return new_string\n",
        "num_ids": 146
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    str2 = \"\"\n    for char in str1:\n        if char not in vowels:\n            str2 = str2 + char\n        else:\n            str2 = str2 + char[::-1]\n    return str2\n",
        "num_ids": 72
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str_len = len(str1)\n    i = 0\n    j = str_len - 1\n    result = ''\n    while i < j:\n        if str1[i] not in vowels:\n            result += str1[i]\n            i += 1\n        else:\n            result += str1[j]\n            j -= 1\n    return result\n",
        "num_ids": 100
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    str2 = str1.lower()\n    str3 = \"\"\n    for i in str2:\n        if i in vowels:\n            str3 += i\n    return str3\n",
        "num_ids": 84
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str_vowels = \"\"\n    \n    # for i in range(len(str1)-1, -1, -1):\n    #     if str1[i] not in vowels:\n    #         str_vowels += str1[i]\n    #     else:\n    #         str_vowels += \"*\"\n    \n    # print(str_vowels)\n    \n    # using list comprehension\n    \n    print(str1[::-1].replace(\"*\", \"\"))\n",
        "num_ids": 146
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    vowels_list = list(vowels)\n    vowels_list.reverse()\n    return ''.join(vowels_list)\n",
        "num_ids": 65
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # using index to find the vowels, and then using the slicing trick to reverse the string\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1 = str1[:i] + str1[i + 1:] + str1[i]\n    return str1\n",
        "num_ids": 99
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    new_str = []\n    for char in str1:\n        if char in vowels:\n            new_str.insert(0,char)\n        else:\n            new_str.append(char)\n    return ''.join(new_str)\n",
        "num_ids": 89
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels_list = []\n    n = len(str1)\n    for i in range(n):\n        if str1[i] in vowels:\n            vowels_list.append(str1[i])\n            \n    for i in range(n):\n        if str1[i] not in vowels:\n            str1 = str1[:i] + str1[i + 1:]\n    return str1\n    \nreverse_vowels('hello')\nreverse_vowels('hEllo')\nreverse_vowels('helleh')\nreverse_vowels('hello world')\nreverse_vowels('hEllo WoRlD')\nreverse_vowels('hello world!')\nreverse_vowels('hello world!')\n",
        "num_ids": 194
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1_vowels = str1.lower()\n    str_vowels = \"\"\n    for char in str1_vowels:\n        if char in vowels:\n            str_vowels += char\n        else:\n            continue\n    return str_vowels\n",
        "num_ids": 80
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str, tup1))\n",
        "num_ids": 17
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\nprint(tup_string((1, 2, 3)))\nprint(tup_string((2, 1, 3)))\nprint(tup_string((2, 3, 1)))\nprint(tup_string((2, 1, 2)))\nprint(tup_string((2, 4, 4)))\n",
        "num_ids": 83
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(list(tup1))\n    return string\n",
        "num_ids": 20
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint(tup_string((1,2,3,4,5)))\n    \n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n    \n    \nprint",
        "num_ids": 22
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if(len(tup1) == 0):\n        return \"empty\"\n    if(len(tup1) == 1):\n        return str(tup1[0])\n    return str(tup1[0]) + str(tup_string(tup1[1:]))\n",
        "num_ids": 71
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    if type(tup1) == type(()):\n        for i in range(len(tup1)):\n            s += str(tup1[i])\n    return s\n",
        "num_ids": 51
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            s += nums[i]\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            total += nums[i]\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # New_list = []\n    # for i in range(len(nums)):\n    #     if nums[i] < 0:\n    #         New_list.append(nums[i])\n    # print(\"Sum of negative numbers:\",sum(New_list))\n    \n    # solution 2\n    return sum(x for x in nums if x < 0)\n",
        "num_ids": 92
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            count += nums[i]\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n",
        "num_ids": 18
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    import math\n    i = 0\n    while i < n:\n        i += 1\n        print(math.pow(i, 2)*(3*i - 1)/2)\nhexagonal_num(10)\n",
        "num_ids": 53
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(pow(n, 1/3) * (2 * sqrt(3) + 1))\n",
        "num_ids": 28
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n<6:\n        return n\n    elif n==6:\n        return 12\n    else:\n        return (1/6)*(n*(n-1)) + 6\n",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    assert n >= 0\n    a = 1\n    b = 2\n    n = n-1\n    while n >= 0:\n        n -= 1\n        a, b = b, a + b\n    return a\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return -1\n    return int(1 + (1/2)*(1 + sqrt(5))*(n - 1))\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 0\n    while i < n:\n        i += 1\n        return n*(2*i - 1)\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    p = (1 + sqrt(5)) / 2\n    x = (1 - sqrt(5)) / 2\n    def sum(n):\n        x = 0\n        y = 0\n        while n > 0:\n            z = n % 6\n            if z == 1:\n                x += 1\n            elif z == 2:\n                y += 1\n            elif z == 3:\n                x += 2\n                y += 1\n            elif z == 4:\n                x += 3\n                y += 2\n            elif z == 5:\n                x += 4\n                y += 3\n            n = n // 6\n        return (x * p - y * x * sqrt(5) + x * x)\n    return (sum(n))\n",
        "num_ids": 177
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # The hexagonal number of a triangle (in the standard 2D case) has 2n + 1 squares.\n    # The value of 2n+1 has the property that it is equal to a perfect square if it is divisible by 6.\n    # So, we can use the following formula: n*(2n+1)/6\n    return int(n*(2*n+1)/6)\n",
        "num_ids": 93
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return hexagonal_num(n - 1) + 6 * (n - 1)\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # return n**2*(3*n - 1)/2\n    return (pow(3, n/2) * (n**2 - 2*n + 1)) / 2\n",
        "num_ids": 45
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count0 = 0\n    count1 = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count0 += 1\n        else:\n            count1 += 1\n    return count0/count1\n",
        "num_ids": 62
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    for i in nums:\n        if i!= 0:\n            nonzero_count += 1\n        else:\n            zero_count += 1\n    return zero_count / nonzero_count\n    \n    \ndef rotate(nums, k):\n    '''\n    Rotate the array to the right by k elements in-place.\n    '''\n    length = len(nums)\n    k = k % length\n    for i in range(0, length):\n        if i < length - k:\n            nums[i], nums[i + k] = nums[i + k], nums[i]\n    return nums\n",
        "num_ids": 70
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros / non_zeros\n",
        "num_ids": 59
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(sum(1 for x in nums if x==0))/len(nums)\n",
        "num_ids": 26
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return float(zeroes) / non_zeroes\n",
        "num_ids": 62
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    n = 0\n    for i in nums:\n        if i==0:\n            z+=1\n        else:\n            n+=1\n    return z/n\n",
        "num_ids": 47
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    print(nums)\n    i = 0\n    zero = 0\n    nonzero = 0\n    while i < len(nums):\n        if nums[i] == 0:\n            zero += 1\n        else:\n            nonzero += 1\n        i += 1\n    return zero/nonzero\n",
        "num_ids": 73
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    ones = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            ones += 1\n    return zeros/ones\n",
        "num_ids": 59
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return (nums.count(0) + len(nums) - nums.count(1))/len(nums)\n    \n",
        "num_ids": 35
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # x=n\n    # y=0\n    # while x>0:\n    #     y=y+1\n    #     x=x//2\n    #     if x==0:\n    #         if y%2==0:\n    #             print(False)\n    #         else:\n    #             print(True)\n    #             break\n",
        "num_ids": 87
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Power_of_two(n):\n        if n == 0: return False\n        while n >= 2:\n            if n % 2!= 0:\n                return False\n            n = n // 2\n        return True\n",
        "num_ids": 56
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n>0:\n        if n%2 == 1:\n            return False\n        n = n//2\n    return True\n    \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \ndef is_Divisible_by_2(n):\n    '''\n    Write a python function to check whether the given number is divisible by 2 or not.\n    '''\n    while n>0:\n        if n%2!= 0:\n            return False\n        n = n//2\n    return True\n    '''\n    Write a python function to check whether the given number is divisible by 2 or not.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n):\n        rem = n % 10\n        n = n // 10\n        if(rem == 0 or rem > 2):\n            return False\n        else:\n            return True\n        \n        \ndef is_Sum_of_Even_Powers_of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of even powers of 2 or not.\n    '''\n    while (n):\n        rem = n % 10\n        if(rem == 0 or rem > 2):\n            return False\n        else:\n            n = n // 10\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Odd_Powers_of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of odd powers of 2 or not.\n    '''\n    while (n):\n        rem = n % 10\n        if(rem == 0 or rem > 2):\n            return False\n        else:\n            n = n // 10\n            if (rem % 2!= 1):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False\n        else:\n            n = n // 8\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False\n        else:\n            n = n // 8\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False\n        else:\n            n = n // 8\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False\n        else:\n            n = n // 8\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False",
        "num_ids": 30
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n<0):\n        return False\n    while(n>0):\n        if(n%2==0):\n            return False\n        n=n//2\n    return True\ndef is_Square(n):\n    '''\n    Write a python function to check whether the given number is a perfect square or not.\n    '''\n    if(n<0):\n        return False\n    if(n==0):\n        return True\n    while(n>0):\n        if(n%2!=0):\n            return False\n        n=n//2\n    return True\ndef is_Prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\ndef is_Perfect_Square(n):\n    '''\n    Write a python function to check whether the given number is a perfect square or not.\n    '''\n    if(n<0):\n        return False\n    while(n>0):\n        if(n%2!=0):\n            return False\n        n=n//2\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\ndef is_Harmonic_Number(n):\n    '''\n    Write a python function to check whether the given number is a harmonic number or not.\n    '''\n    if(n<0):\n        return False\n    d=1\n    n1=n\n    while(n1>0):\n        d=d+1\n        n1=n1//2\n    return d==n\ndef is_Perfect_Divisor(n):\n    '''\n    Write a python function to check whether the given number is a perfect divisor or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    while(n>2):\n        if(n%2!=0):\n            return False\n        n=n//2\n    return True\ndef is_Largest_Divisible_Number(n):\n    '''\n    Write a python function to check whether the given number is the Largest Divisible number or not.\n    '''\n    if(n<0):\n        return False\n    while(n>1):\n        if(n%2!=0):\n            n=n//2\n        else:\n            n=n//2\n            if(n==3):\n                return True\n            if(n%2!=0):\n                return False\n    return False\ndef is_Palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    if(n<0):\n        return False\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while(i<j):\n        if(s[i]!=s[j]):\n            return False\n        i=i+1\n        j=j-1\n    return True\ndef is_Prime_Factor(n):\n    '''\n    Write a python function to check whether the given number is a prime factor or not.\n    '''\n    if(n<=1):\n        return False\n    d=2\n    n1=n\n    while(n1>2):\n        if(n%d==0):\n            return False\n        if(d==n1):\n            d=d+1\n        n1=n1//d\n    return True\ndef is_Perfect_Divisor_List(n):\n    '''\n    Write a python function to check whether the given number is a list of perfect divisors or not.\n    '''\n    if(n<=1):\n        return False\n    d=1\n    n1=n\n    list1=[]\n    while(n1>1):\n        if(n1%d==0):\n            list1.append(d)\n            if(n1==d):\n                return True\n            n1=n1//d\n        else:\n            d=d+1\n            if(d==n1):\n                d=d+1\n    return False\ndef is_Digits_Reverse(n):\n    '''\n    Write a python function to check whether the given number is a digit reverse or not.\n    '''\n    if(n<0):\n        return False\n    s=str(n)\n    list1=[]\n    for i in range(len(s)-1,-1,-1):\n        list1.append(int(s[i]))\n    if(n==0):\n        return False\n    for i in range(0,len(list1)):\n        if(list1[i]!=i+1):\n            return False\n    return True\ndef is_Palindrome_Reverse(s):\n    '''\n    Write a python function to check whether the given string is a palindrome reverse or not.\n    '''\n    if(s==s[::-1]):\n        return True\n    return False\ndef is_Palindrome_Reverse_Rec(s,i,j):\n    '''\n    Write a python function to check whether the given string is a palindrome reverse or not.\n    '''\n    if(i>j):\n        return False\n    if(i==j):\n        if(s[i]!=s[j]):\n            return False\n    elif(s[i]!=s[j]):\n        return False\n    else:\n        return is_Palindrome_Reverse(s,i+1,j-1)\ndef is_Largest_Palindrome_Reverse(s):\n    '''\n    Write a python function to check whether the given string is the largest palindrome reverse or not.\n    '''\n    if(s==s[::-1]):\n        return True\n    return False\ndef is_Isomorphic(s1,s2):\n    '''\n    Write a python function to check whether the given strings are isomorphic or not.\n    '''\n    if(len(s1)!=len(s2)):\n        return False\n    d1=dict()\n    d2=dict()\n    for i in range(len(s1)):\n        if(s1[i] in d1):\n            d1[s1[i]].append(i)\n        else:\n            d1[s1[i]]=[i]\n        if(s2[i] in d2):\n            d2[s2[i]].append(i)\n        else:\n            d2[s2[i]]=[i]\n    for i in d1:\n        if(d1[i]!=d2[i]):\n            return False\n    return True\ndef is_Has_Prefix(s):\n    '''\n    Write a python function to check whether the given string has a prefix or not.\n    '''\n    for i in range(len(s)):\n        if(s[:i+1]!=s[i+1:]):\n            return False\n    return True\ndef is_Number_Balanced_Parenthesis(s):\n    '''\n    Write a python function to check whether the given string has balanced parentheses or not.\n    '''\n    if(s==\"\"):\n        return False\n    d1=dict()\n    d2=dict()\n    for i in range(len(s)):\n        if(s[i]==\"(\"):\n            if(s[i] in d1):\n                d1[s[i]]=d1[s[i]]+1\n            else:\n                d1[s[i]]=1\n        elif(s[i]==\")\"):\n            if(s[i] in d2):\n                d2[s[i]]=d2[s[i]]+1\n            else:\n                d2[",
        "num_ids": 150
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return 0\n    while n!= 0:\n        n //= 2\n        if n == 0:\n            return 0\n    return 1\n",
        "num_ids": 42
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    def check(num,val):\n        i = 1\n        while (i < num):\n            if ((i & 1) == 1):\n                if (val & i) == 0:\n                    val = val | i\n                else:\n                    return False\n            i = i << 1\n        return True if val == 0 else False\n    \n    return check(n,0) or check(n,1) or check(n,2) or check(n,4) or check(n,8)",
        "num_ids": 118
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (isinstance(n,int)==True):\n        sum=0\n        while (n>0):\n            rem=n%2\n            sum=sum+rem\n            n=n//2\n        if (sum==0):\n            return True\n        else:\n            return False\n    else:\n        return -1\n",
        "num_ids": 79
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    n=abs(n)\n    while(n!=0):\n        if n%2==0:\n            n=n//2\n        else:\n            return False\n    return True\nprint(is_Sum_Of_Powers_Of_Two(5))\nprint(is_Sum_Of_Powers_Of_Two(3))\nprint(is_Sum_Of_Powers_Of_Two(10))\nprint(is_Sum_Of_Powers_Of_Two(0))\nprint(is_Sum_Of_Powers_Of_Two(-5))\nprint(is_Sum_Of_Powers_Of_Two(-10))\nprint(is_Sum_Of_Powers_Of_Two(-15))\nprint(is_Sum_Of_Powers_Of_Two(-13))\nprint(is_Sum_Of_Powers_Of_Two(-1))\nprint(is_Sum_Of_Powers_Of_Two(-4))\nprint(is_Sum_Of_Powers_Of_Two(-15))\nprint(is_Sum_Of_Powers_Of_Two(-16))\nprint(is_Sum_Of_Powers_Of_Two(-14))\nprint(is_Sum_Of_Powers_Of_Two(-16))\nprint(is_Sum_Of_Powers_Of_Two(-18))\nprint(is_Sum_Of_Powers_Of_Two(-19))\nprint(is_Sum_Of_Powers_Of_Two(-21))\nprint(is_Sum_Of_Powers_Of_Two(-22))\nprint(is_Sum_Of_Powers_Of_Two(-30))\nprint(is_Sum_Of_Powers_Of_Two(-31))\nprint(is_Sum_Of_Powers_Of_Two(-33))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of_Two(-34))\nprint(is_Sum_Of_Powers_Of",
        "num_ids": 1996
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    s = 0\n    while(n!=0):\n        if n % 2!= 0:\n            return False\n        n = n//2\n        s = s+1\n    return True\n    \n",
        "num_ids": 61
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return math.pi * r * 2\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n",
        "num_ids": 17
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return math.pi * 2 * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return (2 * pi) * r\n    \nprint(circle_circumference(3))\n",
        "num_ids": 31
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n",
        "num_ids": 17
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "num_ids": 23
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result = set()\n    for i in test_list:\n        for j in i:\n            result.add(j)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    total_list = []\n    for i in range(len(test_list)):\n        total_list = total_list + test_list[i]\n    return total_list\n    \ndef find_length(test_list):\n    '''\n    Write a function that returns the length of the longest list in the list of lists.\n    '''\n    max_len = 0\n    for i in range(len(test_list)):\n        if len(test_list[i]) > max_len:\n            max_len = len(test_list[i])\n    return max_len\n",
        "num_ids": 59
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return test_list[0] + sum([extract_singly(l) for l in test_list[1:]])\n",
        "num_ids": 33
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for list in test_list:\n        for x in list:\n            return_list.append(x)\n    return return_list\n",
        "num_ids": 41
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    assert (len(test_list) > 0)\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n",
        "num_ids": 62
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num = []\n    if len(test_list) == 1:\n        for i in test_list[0]:\n            num.append(i)\n    else:\n        for i in test_list:\n            for j in i:\n                num.append(j)\n    return num\n",
        "num_ids": 70
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    s = set()\n    \n    for i in test_list:\n        \n        if type(i) == list:\n            for j in i:\n                s.add(j)\n        else:\n            s.add(i)\n    \n    return s\n",
        "num_ids": 66
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for lst in test_list:\n        if isinstance(lst, list):\n            result.update(extract_singly(lst))\n        else:\n            result.add(lst)\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == list:\n            test_list[i] = extract_singly(test_list[i])\n    \n    return test_list\n",
        "num_ids": 58
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    while (len(nums) > 1):\n        max_index = nums.index(max(nums[0:len(nums)]))\n        nums[:max_index+1], nums[max_index+1:] = nums[max_index+1:], nums[:max_index+1]\n    return nums\n",
        "num_ids": 85
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums),0,-1):\n        j=nums[i-1]\n        k=i\n        while k>0:\n            if j<nums[k-1]:\n                nums[k-1],nums[k]=nums[k],nums[k-1]\n                k-=1\n            else:\n                break\n    return nums\n",
        "num_ids": 97
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    for i in range(size):\n        for j in range(size-1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n        if i!= size-1:\n            temp = nums[i]\n            nums[i] = nums[size-1]\n            nums[size-1] = temp\n    return nums\n",
        "num_ids": 132
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # find the max number in the list\n        # swap the max number with the first number in the list\n        max_number = nums[0]\n        for j in range(len(nums)):\n            if nums[j] > max_number:\n                max_number = nums[j]\n        nums[0], nums[i] = nums[i], nums[0]\n",
        "num_ids": 110
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    res = []\n    for i in range(len(nums)):\n        min_index = nums.index(min(nums))\n        res += min_index,\n        nums.pop(min_index)\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    while len(nums)>1:\n        for i in range(len(nums)):\n            if nums[i]>=nums[len(nums)-1]:\n                nums.pop(len(nums)-1)\n                break\n            if i==len(nums)-1:\n                nums.pop(0)\n    return nums\n",
        "num_ids": 89
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(a, b):\n        tmp = a\n        a = b\n        b = tmp\n    \n    def pancake_sort(nums):\n        '''\n        Write a function to sort a list of elements.\n        '''\n        for i in range(n - 1, 0, -1):\n            for j in range(0, i + 1):\n                if nums[j] > nums[j + 1]:\n                    swap(nums[j], nums[j + 1])\n                    nums[j], nums[j + 1] = nums[j + 1], nums[j]\n        return nums\n",
        "num_ids": 96
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_steps = len(nums)\n    while len(nums)!= 1:\n        nums[0], nums[pancake_steps - 1] = nums[pancake_steps - 1], nums[0]\n        pancake_steps -= 2\n        nums[-1], nums[-2] = nums[-2], nums[-1]\n        for i in range(len(nums) - 2, -1, -1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums\n",
        "num_ids": 166
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # O(n^2)\n    # for i in range(len(nums)):\n    #     for j in range(len(nums) - i):\n    #         if nums[j] > nums[j + 1]:\n    #             nums[j], nums[j + 1] = nums[j + 1], nums[j]\n",
        "num_ids": 89
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n",
        "num_ids": 69
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    list4 = []\n    i = 0\n    j = 0\n    k = 0\n    count = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] == list2[j] and list2[j] == list3[k]:\n            list4.append(list1[i])\n            count = count+1\n            i = i+1\n            j = j+1\n            k = k+1\n        else:\n            i = i+1\n            j = j+1\n            k = k+1\n    print(count)\n",
        "num_ids": 172
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list2[j]==list3[k] and list1[i]==list3[k]:\n                    print('item {} in list {} is same in lists {} and {}'.format(list1[i],i+1,list2[j],list3[k]))\n    \n    \n    \n    \ndef is_palindrome(text):\n    '''\n    Given a string, check if it is a palindrome\n    '''\n    rev=text[::-1]\n    if text == rev:\n        print(\"It is a palindrome\")\n    else:\n        print(\"It is not a palindrome\")\n        \n",
        "num_ids": 48
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    count+=1\n    return count\ndef count_diffpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i]!=list2[j] and list1[i]!=list3[k] and list2[j]!=list3[k]:\n                    count+=1\n    return count\ndef print_max_occurs(list1,list2,list3):\n    '''\n    Write a function to find the maximum number of occurrences of items in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    count+=1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k] and list1[i] == list3[k]:\n                    cnt=cnt+1\n    return cnt\n",
        "num_ids": 99
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len([i for i, j in zip(list1, list2) if i == j])\n",
        "num_ids": 26
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len([i for i, j in zip(list1, list2) if i == j])\n    #return len([i for i in zip(list1, list2, list3) if i[0] == i[1] and i[0] == i[2]])\n",
        "num_ids": 68
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!=len(list2)!=len(list3):\n        raise ValueError\n    if len(list1)!=len(set(list1)):\n        raise ValueError\n    if len(list2)!=len(set(list2)):\n        raise ValueError\n    if len(list3)!=len(set(list3)):\n        raise ValueError\n",
        "num_ids": 93
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    l = []\n    c = []\n    for i in range(len(list1)):\n        c.append(list1[i])\n    for i in range(len(list2)):\n        c.append(list2[i])\n    for i in range(len(list3)):\n        c.append(list3[i])\n    for i in range(len(c)):\n        if(c.count(c[i])>1):\n            l.append(c[i])\n    return l\n",
        "num_ids": 125
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_Count=0\n    for i in range(0,len(Input)):\n        if type(Input[i])==list:\n            List_Count+=1\n    return List_Count\n",
        "num_ids": 48
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    input_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}\n    for i in input_dict:\n        if i in Input:\n            print(i, \"present in the list\")\n        else:\n            print(i, \"not present in the list\")\n",
        "num_ids": 104
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def count_list_elements(input):\n        counter = 0\n        for element in input:\n            if type(element) == list:\n                counter += 1\n        return counter\n    assert type(Input) == tuple\n    assert count_list_elements(Input) == len(Input)\n    return count_list_elements(Input)\n",
        "num_ids": 83
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List = []\n    for i in Input:\n        if not i in List:\n            List.append(i)\n    print(len(List))\n",
        "num_ids": 38
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = []\n    for i in Input:\n        if i not in result:\n            result.append(i)\n    print(result)\n",
        "num_ids": 36
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(find_list_at_index(Input,0))\n",
        "num_ids": 19
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n    \nInput = ('B', 'D', 'E', 'A', 'B', 'D', 'E', 'A', 'B', 'D', 'E', 'A')\nOutput = (2, 3, 3)\nprint(f'Input is {Input} and Output is {Output}')\nassert find_lists(Input) == Outpu",
        "num_ids": 87
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([value for value in Input if type(value) == list])\n",
        "num_ids": 20
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a = []\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            a.append(Input[i])\n    return len(a)\n",
        "num_ids": 48
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = tuple(map(int, Input))\n    num = 0\n    for x in range(0, len(Input)):\n        if(Input[x] == 1):\n            num += 1\n    return num",
        "num_ids": 52
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_dif = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            dif = abs(arr[i] - arr[j])\n            if(dif > max_dif):\n                max_dif = dif\n    return max_dif\n",
        "num_ids": 83
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    print(\"The maximum difference is\", max_diff)\n    return max_diff\n",
        "num_ids": 92
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 60
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = -999999999\n    min = 999999999\n    max_index = 0\n    min_index = 0\n    for i in range(len(arr)):\n        if(max < abs(arr[i]-arr[i+1])):\n            max = abs(arr[i]-arr[i+1])\n            max_index = i\n        if(min > abs(arr[i]-arr[i+1])):\n            min = abs(arr[i]-arr[i+1])\n            min_index = i\n    return max_index, min_index, max\n    \n",
        "num_ids": 141
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = arr[1]-arr[0]\n    for i in range(1, len(arr)-1):\n        if arr[i+1]-arr[i] > maxDiff:\n            maxDiff = arr[i+1]-arr[i]\n    return maxDiff\n",
        "num_ids": 67
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = float('-inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > maxDiff:\n            maxDiff = diff\n    return maxDiff\n    \n",
        "num_ids": 64
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    l = len(arr)\n    max_diff = 0\n    max_i = 0\n    for i in range(0,l-1):\n        if abs(arr[i]-arr[i+1]) > max_diff:\n            max_diff = abs(arr[i]-arr[i+1])\n            max_i = i\n    print(\"Max diff is:\",max_diff)\n    print(\"Max i:\",max_i)\n    return max_diff\n",
        "num_ids": 113
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # if len(arr)<2:\n    #     return\n    # maxdiff=arr[0]-arr[1]\n    # for i in range(1,len(arr)-1):\n    #     if maxdiff<arr[i]-arr[i+1]:\n    #         maxdiff=arr[i]-arr[i+1]\n    # return maxdiff\n    maxdiff=abs(arr[0]-arr[1])\n    for i in range(len(arr)-1):\n        if abs(arr[i]-arr[i+1])>maxdiff:\n            maxdiff=abs(arr[i]-arr[i+1])\n    return maxdiff\n    \n",
        "num_ids": 160
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = list(arr)\n    max_dif = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_dif:\n                max_dif = abs(arr[i] - arr[j])\n    print(\"Maximum difference between any two elements is:\", max_dif)\n",
        "num_ids": 102
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i]-arr[j]) > diff:\n                diff = abs(arr[i]-arr[j])\n    return diff\n",
        "num_ids": 72
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    a = int(a)\n    b = int(b)\n    for i in range(2, n):\n        if (a * i) % n == 0 or (b * i) % n == 0:\n            continue\n        x = i\n        y = (n - x - b) / a\n        break\n    return x, y\n",
        "num_ids": 92
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n+1):\n        for y in range(0, n+1):\n            if x*a + y*b == n:\n                return (x, y)\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Iterate over possible values of x, y\n    for x in range(1, b):\n        for y in range(1, a):\n            if x*x + y*y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 61
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # x, y\n    for x in range(n):\n        for y in range(n):\n            if x+y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n",
        "num_ids": 12
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (a == 0):\n        if (b == 0):\n            return (0, 0)\n        elif (n % b == 0):\n            return (1, 0)\n        else:\n            return None\n    elif (a == 0):\n        if (n % b == 0):\n            return (0, 1)\n        else:\n            return None\n    elif (b == 0):\n        if (n % a == 0):\n            return (1, 0)\n        else:\n            return None\n    else:\n        return (1, 1)\n",
        "num_ids": 135
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if (x * a + y * b) == n:\n                return x, y\n    return None\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n",
        "num_ids": 12
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n",
        "num_ids": 12
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, n/b)\n    elif b == 0:\n        return (n/a, 0)\n    elif a == 1:\n        return (0, b)\n    elif b == 1:\n        return (n/a, 0)\n    else:\n        x = (n/a**2)\n        y = (n - x*a) / b\n        return (x, y)\n",
        "num_ids": 107
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1)-set(list2))\n",
        "num_ids": 17
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list2 = set(list2)\n    list1 = set(list1)\n    list1 = list(list1)\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 62
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return_list = []\n    for elem in list1:\n        if elem not in list2:\n            return_list.append(elem)\n    return return_list\n",
        "num_ids": 45
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n    \n    \n    ",
        "num_ids": 47
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l2 = list(set(list2) - set(list1))\n    return l2\n",
        "num_ids": 25
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    remove_list = []\n    for elem in list1:\n        if elem not in list2:\n            remove_list.append(elem)\n    return remove_list\n",
        "num_ids": 45
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n",
        "num_ids": 18
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    while list1:\n        if list1[0] in list2:\n            list1.pop(0)\n        else:\n            break\n",
        "num_ids": 36
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list2.remove(elem)\n    return list2\n",
        "num_ids": 35
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list1:\n        if x in list2:\n            list1.remove(x)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #sum_series(4)\n    return (n-2) if n % 2 == 0 else (n + sum_series(n-2))\n    #return 0 if n % 2 == 0 else (n+sum_series(n-2))\n    #return 0 if n % 2 == 0 else (n + sum_series(n-2))\n    \ndef is_binary(n):\n    '''\n    Write a function to determine if a number is even or odd.\n    '''\n    #is_binary(2)\n    return True if n & 1 else False\n    #return True if (n // 2) & 1 else False\n",
        "num_ids": 36
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 1\n    if n == 0:\n        return 0\n    return sum_series(n - 2*i) + i\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = n\n    i = 0\n    sum = 0\n    while i < n:\n        sum += n - 2*i\n        i += 1\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(input('n = '))\n    i = 0\n    result = 0\n    while i <= n // 2:\n        result += (n - 2*i)\n        i += 1\n    print(f'Summation of series: {result}')\n",
        "num_ids": 65
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    while(n > 0):\n        result += n\n        n -= 2\n        n = n - (n//2)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i < n:\n        total += i\n        i += 2\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + (sum_series(n - 2))\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    total = 0\n    for i in range(n):\n        total += (n - 2 * i)\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # The value of a side of a regular polygon (it is also the radius of a circle)\n    a = (s*s)/(4*tan(pi/s))\n    # The number of lines (sides)\n    n = l\n    # The sum of the sides\n    s = a*n\n    return s\n",
        "num_ids": 78
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * s) / (4 * tan(pi / s))\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.25*pi*s*l\ndef area_parallelogram(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram given the length and width of its bases.\n    '''\n    return a*b\ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given the semi-axes lengths.\n    '''\n    return (pi/4)*a**2*b\ndef area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere given its radius.\n    '''\n    return (4*pi*r**2)/3\ndef area_cylinder(r, h):\n    '''\n    Write a function to calculate the surface area of a cylinder given its radius and height.\n    '''\n    return pi*r*(r+h)\ndef area_cone(r, h):\n    '''\n    Write a function to calculate the surface area of a cone given its radius and height.\n    '''\n    return pi*r*h\ndef volume_cuboid(l, w, h):\n    '''\n    Write a function to calculate the volume of a cuboid given its length, width and height.\n    '''\n    return l*w*h\ndef volume_cylinder(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height.\n    '''\n    return pi*r**2*h\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return (4/3)*pi*r**3\ndef volume_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the top.\n    '''\n    return pi*r*h\ndef volume_cone_base(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the base.\n    '''\n    return pi*r*(r+h)\ndef volume_pyramid(l, h):\n    '''\n    Write a function to calculate the volume of a pyramid given its length and height.\n    '''\n    return (1/3)*(l*h*(l+h))\ndef volume_cylinder_top(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height, but where the cylinder's height is the top.\n    '''\n    return pi*r**2*h\ndef volume_cylinder_base(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height, but where the cylinder's height is the base.\n    '''\n    return pi*r**2*(r+h)\ndef volume_cone_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the top.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_base(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the base.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_edge(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but with an edge at the cone's base.\n    '''\n    return (1/3)*(pi*r*(r+h))\ndef volume_ellipse(a, b):\n    '''\n    Write a function to calculate the volume of an ellipse given its semimajor and semiminor axes.\n    '''\n    return (4/3)*pi*a**2*b\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return (4/3)*pi*r**3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height.\n    '''\n    return pi*r**2*(r+h)\ndef volume_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the top.\n    '''\n    return pi*r*h\ndef volume_cone_base(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the base.\n    '''\n    return pi*r*(r+h)\ndef volume_ellipse_base(a, b):\n    '''\n    Write a function to calculate the volume of an ellipse given its semimajor and semiminor axes, but where the ellipse's height is the base.\n    '''\n    return pi*a**2*b\ndef volume_sphere_top(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return 4/3)*pi*r**3\ndef volume_sphere_base(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return 4/3)*pi*(r**3-r)\ndef volume_cylinder_top(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height, but where the cylinder's height is the top.\n    '''\n    return (pi*r**2*h)\ndef volume_cylinder_base(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height, but where the cylinder's height is the base.\n    '''\n    return (pi*r**2*(r+h))\ndef volume_cone_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the top.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_base(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the base.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_edge(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but with an edge at the cone's base.\n    '''\n    return (1/3)*pi*r*(r+h)\ndef volume_ellipse_top(a, b):\n    '''\n    Write a function to calculate the volume of an ellipse given its semimajor and semiminor axes, but where the ellipse's height is the top.\n    '''\n    return (4/3)*pi*a**2*b\ndef volume_ellipse_base(a, b):\n    '''\n    Write a function to calculate the volume of an ellipse given its semimajor and semiminor axes, but where the ellipse's height is the base.\n    '''\n    return (4/3)*pi*a**2*(a-b)\ndef volume_sphere_top(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return 4/3)*pi*r**3\ndef volume_sphere_base(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return 4/3)*pi*(r**3-r)\ndef volume_cylinder_top(r, h):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # https://www.programiz.com/python-programming/methods/built-in/pi\n    area_poly = (s * (s-l) * 0.5) / tan(pi/s)\n    return round(area_poly, 5)\n    \n",
        "num_ids": 66
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l == 0:\n        return 0\n    n = s / l\n    pi_term = ((4*n)/tan(pi/n))\n    area = pi_term*l\n    return area\nprint(area_polygon(5, 5))\nprint(area_polygon(2,5))\nprint(area_polygon(1,4))\nprint(area_polygon(0,0))\nprint(area_polygon(2,1))\n",
        "num_ids": 110
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l * s) * 0.5\n",
        "num_ids": 14
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / 2 * pi\n",
        "num_ids": 12
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l * 0.5) * tan(pi / (l * 2))\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/s)\n    return round(area, 2)\ndef pi(s):\n    '''\n    Write a function to calculate pi.\n    '''\n    pi_val = (4 * s) / (s**2 + 1)\n    return round(pi_val, 2)\ndef circumference(s, l):\n    '''\n    Write a function to calculate the circumference of a regular polygon given the length and number of its sides.\n    '''\n    circumference = s * l\n    return round(circumference, 2)\ndef circumfrence_quadratic(a, b, c):\n    '''\n    Write a function to calculate the circumference of a quadratic equation given the coefficients of the equation.\n    '''\n    circumference = a * b + 2 * b * c\n    return round(circumference, 2)\ndef area_quadratic(a, b, c):\n    '''\n    Write a function to calculate the area of a quadratic equation given the coefficients of the equation.\n    '''\n    area = (a * b) / 2\n    return round(area, 2)\ndef sum_of_squares(s, n):\n    '''\n    Write a function to calculate the sum of squares of the first n natural numbers.\n    '''\n    sum_of_squares = (s**2) * (n**2)\n    return round(sum_of_squares, 2)\ndef average_of_squares(s, n):\n    '''\n    Write a function to calculate the average of squares of the first n natural numbers.\n    '''\n    sum_of_squares = sum_of_squares(s, n)\n    average_of_squares = sum_of_squares / n\n    return round(average_of_squares, 2)\ndef sum_of_cubes(s, n):\n    '''\n    Write a function to calculate the sum of cubes of the first n natural numbers.\n    '''\n    sum_of_cubes = s**3 * (n**3)\n    return round(sum_of_cubes, 2)\ndef average_of_cubes(s, n):\n    '''\n    Write a function to calculate the average of cubes of the first n natural numbers.\n    '''\n    sum_of_cubes = sum_of_cubes(s, n)\n    average_of_cubes = sum_of_cubes / n\n    return round(average_of_cubes, 2)\ndef area_of_triangle(s, l):\n    '''\n    Write a function to calculate the area of a triangle given the length and height of its base.\n    '''\n    area_of_triangle = 1 / 2 * s * l\n    return round(area_of_triangle, 2)\ndef area_of_rectangle(s, l):\n    '''\n    Write a function to calculate the area of a rectangle given the length and width of its sides.\n    '''\n    area_of_rectangle = s * l\n    return round(area_of_rectangle, 2)\ndef sum_of_rectangle_sides(s, l):\n    '''\n    Write a function to calculate the sum of the sides of a rectangle.\n    '''\n    sum_of_rectangle_sides = (s + l)\n    return round(sum_of_rectangle_sides, 2)\ndef sum_of_rectangle_perimeter(s, l):\n    '''\n    Write a function to calculate the sum of the perimeter of a rectangle.\n    '''\n    sum_of_rectangle_perimeter = (s + l) * 2\n    return round(sum_of_rectangle_perimeter, 2)\ndef area_of_circle(s):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area_of_circle = pi(s) * s**2\n    return round(area_of_circle, 2)\ndef sum_of_circle_sides(r):\n    '''\n    Write a function to calculate the sum of the sides of a circle.\n    '''\n    sum_of_circle_sides = 2 * pi * r\n    return round(sum_of_circle_sides, 2)\ndef sum_of_circle_perimeter(r):\n    '''\n    Write a function to calculate the sum of the perimeter of a circle.\n    '''\n    sum_of_circle_perimeter = 2 * pi * r + r**2\n    return round(sum_of_circle_perimeter, 2)\ndef area_of_cuboid(s, l, h):\n    '''\n    Write a function to calculate the area of a cuboid given its side lengths and height.\n    '''\n    area_of_cuboid = s * l * h\n    return round(area_of_cuboid, 2)\ndef sum_of_cuboid_sides(s, l, h):\n    '''\n    Write a function to calculate the sum of the sides of a cuboid.\n    '''\n    sum_of_cuboid_sides = s + l + h\n    return round(sum_of_cuboid_sides, 2)\ndef sum_of_cuboid_perimeter(s, l, h):\n    '''\n    Write a function to calculate the sum of the perimeter of a cuboid.\n    '''\n    sum_of_cuboid_perimeter = (s + l + h) * 2\n    return round(sum_of_cuboid_perimeter, 2)\ndef area_of_cylinder(s, h):\n    '''\n    Write a function to calculate the area of a cylinder given its radius and height.\n    '''\n    area_of_cylinder = pi * s * h\n    return round(area_of_cylinder, 2)\ndef sum_of_cylinder_sides(s, h):\n    '''\n    Write a function to calculate the sum of the sides of a cylinder.\n    '''\n    sum_of_cylinder_sides = 2 * pi * s * h\n    return round(sum_of_cylinder_sides, 2)\ndef sum_of_cylinder_perimeter(s, h):\n    '''\n    Write a function to calculate the sum of the perimeter of a cylinder.\n    '''\n    sum_of_cylinder_perimeter = (2 * pi * s + s * h)\n    return round(sum_of_cylinder_perimeter, 2)\ndef area_of_cone(s, h, r):\n    '''\n    Write a function to calculate the area of a cone given its radius and height.\n    '''\n    area_of_cone = pi * s * h * (r**2)\n    return round(area_of_cone, 2)\ndef sum_of_cone_sides(s, h, r):\n    '''\n    Write a function to calculate the sum of the sides of a cone.\n    '''\n    sum_of_cone_sides = (pi * s * h + s * (r**2))\n    return round(sum_of_cone_sides, 2)\ndef sum_of_cone_perimeter(s, h, r):\n    '''\n    Write a function to calculate the sum of the perimeter of a cone.\n    '''\n    sum_of_cone_perimeter = (pi * s + 2 * (pi * s * h + s * r**2))\n    return round(sum_of_cone_perimeter, 2)\ndef area_of_sphere(s):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    area_of_sphere = 4 * pi * s**2\n    return round(area_of_sphere, 2)\ndef sum_of_sphere_sides(s):\n    '''\n    Write a function to calculate the sum of the sides of a sphere.\n    '''\n    sum_of_sphere_sides = 4 * pi * s**3\n    return round(sum_of_sphere_sides, 2)\ndef sum_of_sphere_perimeter(s):\n    '''\n    Write a function to calculate the sum of the perimeter of a sphere.\n    '''\n    sum_of_sphere_perimeter = (4 * pi * s + 2 * pi * s * ",
        "num_ids": 27
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return round(area, 2)\n",
        "num_ids": 22
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,n): \n        if (n % i == 0 and n // i == i): \n            return True\n        else:\n            return False\n",
        "num_ids": 43
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    while(i<=n):\n        if (n%i == 0):\n            if (i==n/i):\n                return True\n            else:\n                return False\n        i = i + 1\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            if i % 2!= 0 and n // i!= i:\n                print('yes')\n                return\n            elif i % 2 == 0 and n // i!= i:\n                print('no')\n                return\n            else:\n                continue\n",
        "num_ids": 81
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum1 = sum1 + i\n    for j in range(1,n):\n        if j%n==0:\n            sum2 = sum2 + j\n    if sum1==sum2:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 97
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    sum_divisor = 0\n    while i <= n:\n        if n % i == 0:\n            sum_divisor += i\n        i += 1\n    return sum_divisor == n\n",
        "num_ids": 56
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_list = []\n    if n > 1: \n        for i in range(1, n): \n            if n % i == 0: \n                div_sum_list.append(i) \n                div_sum_list.append(n//i) \n    return sum(div_sum_list) == n\n",
        "num_ids": 82
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = n\n    i = 1\n    s = 0\n    while i <= n:\n        if n % i == 0:\n            s += i\n        i += 1\n    if s == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0: \n            return True\n    return False\n    \nprint(div_sum(4)) #False\nprint(div_sum(12)) #True\nprint(div_sum(20)) #True\nprint(div_sum(24)) #True\nprint(div_sum(30)) #False\nprint(div_sum(60)) #True\nprint(div_sum(100)) #False\n",
        "num_ids": 120
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    divisor_sum = sum(factors)\n    if n == divisor_sum:\n        return True\n    else:\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n): \n        if n % i == 0: \n            divisors.append(i) \n    return sum(divisors) == n and n!= 1\n",
        "num_ids": 58
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    s = str1.lower()\n    arr = {}\n    for i in range(0, 26):\n        arr[chr(i + 97)] = s.count(chr(i + 97))\n    res = []\n    for i in arr:\n        res.append(arr[i])\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    d = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for i in str1:\n        d[i.lower()] = d[i.lower()] + 1\n    for i in d:\n        if d[i] == 1:\n            count = count + 1\n    return count\n",
        "num_ids": 172
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for x in str1:\n        if ord(x) - 96 == ord(str1[count]) - 96:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position_dict = {}\n    for index in range(len(str1)):\n        if str1[index] not in char_position_dict:\n            char_position_dict[str1[index]] = index\n    print(char_position_dict)\n    return len(char_position_dict)\n",
        "num_ids": 76
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic = {}\n    for i in range(ord('a'),ord('z')+1):\n        dic[chr(i)] = 0\n    for i in range(len(str1)):\n        if(str1[i] in dic.keys()):\n            dic[str1[i]] += 1\n    return dic\n    \n    \ndef count_char_position_v2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic = {}\n    for i in range(ord('a'),ord('z')+1):\n        dic[chr(i)] = 0\n    for i in range(len(str1)):\n        dic[str1[i]] += 1\n    return dic\n    \n    \ndef count_char_position_v3(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic = {}\n    for i in range(ord('a'),ord('z')+1):\n        dic[chr(i)] = 0\n    for i in range(len(str1)):\n        dic[str1[i]] += 1\n    return dic\n    \n    \ndef count_char_position_v4(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    res = {}\n    dic = {}\n    for i in range(ord('a'),ord('z')+1):\n        dic[chr(i)] = 0\n    for i in range(len(str1)):\n        dic[str1[i]] += 1\n    for i in range(ord('a'),ord('z')+1):\n        res[chr(i)] = 0\n    for i in range(len(str1)):\n        res[str1[i]] += 1\n    for i in range(ord('a'),ord('z')+1):\n        if(res[chr(i)] == dic[chr(i)]):\n            res[chr(i)] += 1\n    return res\n",
        "num_ids": 175
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # order of the alphabet: 'a' 'b'... 'z' 'A' 'B'... 'Z'\n    # we will use a dict to store the count of the number of occurences of each letter\n    # in alphabetical order\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    counts = {}\n    # iterate over str1\n    for i in range(len(alpha)):\n        counts[alpha[i]] = 0\n        for j in range(len(str1)):\n            # if i is at the same position as in alpha\n            if str1[j] == alpha[i]:\n                # increment the count\n                counts[alpha[i]] += 1\n    # return the dictionary\n    return counts\n",
        "num_ids": 182
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower().count(str1[i].lower()) > 0:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    a = str1.lower()\n    b = {}\n    for i in a:\n        if i not in b:\n            b[i] = 1\n        else:\n            b[i] += 1\n    return b\n",
        "num_ids": 55
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum([str1.lower().count(l) for l in ascii_lowercase])\n",
        "num_ids": 26
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letter_dict = {}\n    count = 0\n",
        "num_ids": 14
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    res = 0\n",
        "num_ids": 7
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    output = 0\n    for i in range(0,len(A)): \n        for j in range(i + 1, len(A)): \n            output += 1 if (A[i] ^ A[j]) % 2 == 0 else 0\n    return output\n",
        "num_ids": 65
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    set_a = set(A)\n    for num in set_a:\n        xor_num = num ^ 1\n        if xor_num in set_a:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Time O(N) | Space O(1)\n    # num_pair = 0\n    # for num in A:\n    #     for i in A:\n    #         if num ^ i == 0:\n    #             num_pair += 1\n    # return num_pair\n",
        "num_ids": 68
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count\nprint(find_even_pair([2,4,1,4,5,3]))\n",
        "num_ids": 84
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n                break\n    return even_count\n",
        "num_ids": 69
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    res = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                res += 1\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # count = 0\n    # for i in range(len(A)):\n    #     for j in range(i+1, len(A)):\n    #         if xor(A[i], A[j]) == 0:\n    #             count += 1\n    # return count\n    A.sort()\n    count = 0\n    for i in range(len(A)-1):\n        if xor(A[i], A[i+1]) == 0:\n            count += 1\n    return count\n",
        "num_ids": 122
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    l = len(A)\n    a = {}\n    for i in range(l):\n        if A[i] in a:\n            a[A[i]] += 1\n        else:\n            a[A[i]] = 1\n    odd_count = 0\n    for x in a:\n        if a[x] % 2!= 0:\n            odd_count += 1\n    return odd_count\n",
        "num_ids": 98
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    set1 = set(A)\n    count = 0\n    for i in set1:\n        if A[i] ^ 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n > 1: \n        i = 1\n        while i < n: \n            i = 2 * i\n        return i \n    else: \n        return 1\nprint(next_power_of_2(1))\nprint(next_power_of_2(3))\nprint(next_power_of_2(6))\nprint(next_power_of_2(13))\nprint(next_power_of_2(1024))\n",
        "num_ids": 109
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << i\n",
        "num_ids": 29
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = 0\n    while(l<=n):\n        l <<=1\n    return l >> 1\n",
        "num_ids": 28
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n: \n        x = x * 2\n    return x \n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power = power * 2\n    return power\n    \n    ",
        "num_ids": 28
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    while(n!= 1):\n        n = n >> 1\n    return n\n    \n    \ndef binary_search(alist, item):\n    '''\n    Write a python function to find index position of element in a sorted list.\n    '''\n    \n    l = 0\n    h = len(alist) - 1\n    \n    while l <= h:\n        m = (l+h) // 2\n        if alist[m] == item:\n            return m\n        elif item > alist[m]:\n            l = m + 1\n        else:\n            h = m - 1\n    return -1\n    \n    \ndef find_the_last_occurrence(alist, element):\n    '''\n    Write a python function to find the last occurrence of element in an ordered list.\n    '''\n    if len(alist) == 0:\n        return -1\n    if alist[0] == element:\n        return 0\n    if alist[len(alist)-1] == element:\n        return len(alist)-1\n    \n    l = 0\n    h = len(alist)-1\n    \n    while l <= h:\n        m = (l+h) // 2\n        if alist[m] == element:\n            return m\n        elif element > alist[m]:\n            l = m + 1\n        else:\n            h = m - 1\n    return -1\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function to determine whether a given number is palindrome or not.\n    '''\n    \n    if n <= 0:\n        return False\n    \n    r = 0\n    while n!= 0:\n        rem = n % 10\n        n = n // 10\n        r = r * 10 + rem\n        if n > 0:\n            return False\n    \n    return r == n\n    \n    \ndef print_recursively(a, start, end):\n    '''\n    Write a python function to print a given range of elements from the list.\n    '''\n    if start == end:\n        print(a[start], end=\" \")\n    else:\n        print(a[start], end=\" \")\n        print_recursively(a, start+1, end)\n    \n    \ndef print_recursively_advanced(a, start, end):\n    '''\n    Write a python function to print a given range of elements from the list using advanced techniques.\n    '''\n    if start == end:\n        print(a[start], end=\" \")\n    else:\n        print_recursively_advanced(a, start+1, end)\n        print(a[start], end=\" \")\n    \n    \ndef print_recursively_balanced(a, start, end):\n    '''\n    Write a python function to print a given range of elements from the list using balanced tree techniques.\n    '''\n    if start == end:\n        print(a[start], end=\" \")\n    else:\n        left_sub_tree_size = start - end\n        right_sub_tree_size = end - start\n        left_tree_size = left_sub_tree_size // 2\n        right_tree_size = right_sub_tree_size - left_tree_size\n        left_tree_start = start + left_tree_size\n        right_tree_start = start + right_tree_size\n        \n        print_recursively_balanced(a, start, left_tree_start)\n        print_recursively_balanced(a, left_tree_start+1, right_tree_start)\n        print_recursively_balanced(a, right_tree_start+1, end)\n        \n        \ndef print_recursively_reversed(a, start, end):\n    '''\n    Write a python function to print a given range of elements from the list using reversed recursive approach.\n    '''\n    if start == end:\n        print(a[start], end=\" \")\n    else:\n        print_recursively_reversed(a, start+1, end)\n        print(a[start], end=\" \")\n    \n    \ndef print_recursively_reversed_advanced(a, start, end):\n    '''\n    Write a python function to print a given range of elements from the list using reversed advanced approach.\n    '''\n    if start == end:\n        print(a[start], end=\" \")\n    else:\n        left_sub_tree_size = start - end\n        right_sub_tree_size = end - start\n        left_tree_size = left_sub_tree_size // 2\n        right_tree_size = right_sub_tree_size - left_tree_size\n        left_tree_start = start + left_tree_size\n        right_tree_start = start + right_tree_size\n        \n        print_recursively_reversed_advanced(a, start, left_tree_start)\n        print_recursively_reversed_advanced(a, left_tree_start+1, right_tree_start)\n        print_recursively_reversed_advanced(a, right_tree_start+1, end)\n        \n        \ndef print_recursively_binary_search(a, start, end):\n    '''\n    Write a python function to print a given range of elements from the list using binary search.\n    '''\n    if start == end:\n        print(a[start], end=\" \")\n    else:\n        m = binary_search(a, a[start])\n        if m == -1:\n            print_recursively_binary_search(a, start+1, end)\n        else:\n            print_recursively_binary_search(a, start+1, m)\n            print_recursively_binary_search(a, m+1, end)\n    \n    \ndef print_recursively_binary_search_advanced(a, start, end):\n    '''\n    Write a python function to print a given range of elements from the list using binary search using advanced techniques.\n    '''\n    if start == end:\n        print(a[start], end=\" \")\n    else:\n        m = binary_search_advanced(a, a[start])\n        if m == -1:\n            print_recursively_binary_search_advanced(a, start+1, end)\n        else:\n            print_recursively_binary_search_advanced(a, start+1, m)\n            print_recursively_binary_search_advanced(a, m+1, end)\n    \n    \ndef print_recursively_binary_search_balanced(a, start, end):\n    '''\n    Write a python function to print a given range of elements from the list using binary search using balanced tree techniques.\n    '''\n    if start == end:\n        print(a[start], end=\" \")\n    else:\n        left_sub_tree_size = start - end\n        right_sub_tree_size = end - start\n        left_tree_size = left_sub_tree_size // 2\n        right_tree_size = right_sub_tree_size - left_tree_size\n        left_tree_start = start + left_tree_size\n        right_tree_start = start + right_tree_size\n        \n        print_recursively_binary_search_balanced(a, start, left_tree_start)\n        print_recursively_binary_search_balanced(a, left_tree_start+1, right_tree_start)\n        print_recursively_binary_search_balanced(a, right_tree_start+1, end)\n        \n    \ndef print_recursively_binary_search_reversed(a, start, end):\n    '''\n    Write a python function to print a given range of elements from the list using binary search using reversed recursive approach.\n    '''\n    if start == end:\n        print(a[start], end=\" \")\n    else:\n        left_sub_tree_size = start - end\n        right_sub_tree_size = end - start\n        left_tree_size = left_sub_tree_size // 2\n        right_tree_size = right_sub_tree_size - left_tree_size\n        left_tree_start = start + left_tree_size\n        right_tree_start = start + right_tree",
        "num_ids": 116
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while True:\n        if n == 2**i:\n            return i\n        i = i + 1\n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = n - 1\n    while (n & 1 == 0): \n        n = n >> 1\n    return n + 1\n",
        "num_ids": 33
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1).bit_length() + 1\n",
        "num_ids": 33
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return -1\n    n |= n - 1\n    while n & n - 1:\n        n |= n - 2\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \n    \ndef find_pair(a,x):\n    '''\n    Write a function to find the first pair of elements that sum to a given number.\n    '''\n    s = -1\n    for i in range(len(a)):\n        if x == a[i] + a[i+1]:\n            s = i\n            break\n    return s\n    \ndef max(a,b):\n    '''\n    Write a function that returns the max of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a == b:\n        return a\n    else:\n        return b\n",
        "num_ids": 33
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # frequency of the number in the list\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    print(\"Frequency:\",count)\n",
        "num_ids": 44
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count+=1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n    ",
        "num_ids": 41
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1) - 1: m = len(list1) - 1\n    if n > len(list1) - 1: n = len(list1) - 1\n    return sum(list1[m : n + 1])\n",
        "num_ids": 60
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n > m:\n        for i in range(n, m-1, -1):\n            list1[i] = 0\n    else:\n        for i in range(m, n+1):\n            list1[i] = 0\n    return list1\n",
        "num_ids": 65
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return list1[m]\n",
        "num_ids": 17
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return list1[m]\n    mid = (m + n) // 2\n    return sum_range_list(list1, m, mid) + sum_range_list(list1, mid + 1, n)\n",
        "num_ids": 60
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # edge cases\n    if m > len(list1) or m == 0 or n > len(list1) or n == 0:\n        return None\n    if m == n:\n        return sum(list1[m:m+1])\n    \n    # calc sum from m to n\n    if m > n:\n        return sum(list1[m:n])\n    \n    # calc sum from n to m\n    return sum(list1[n:m])\n",
        "num_ids": 112
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Your Code Below:\n    total = 0\n    for i in range(m,n):\n        total += list1[i]\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list1_new = list(filter(lambda x: x >= m and x <= n, list1))\n    return sum(list1_new)\n",
        "num_ids": 37
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    summ = 0\n    for i in range(m, n+1):\n        summ += list1[i]\n    return summ\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # your code here\n    sum = 0\n    for i in list1:\n        if m <= i <= n:\n            sum += i\n",
        "num_ids": 35
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=3\n        p=a*(i*((math.sqrt(5)-1)/2))\n        return round(p,2)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=3\n        p=(a*(i*((math.sqrt(5)-1)/2)))\n        return round(p,2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=6\n        p=(a*(i*((math.sqrt(3)-1)/2)))\n        return round(p,2)\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=6\n        p=(a*(i*((math.sqrt(3)-1)/2)))\n        return round(p,2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=8\n        p=(a*(i*((math.sqrt(2)-1)/2)))\n        return round(p,2)\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=8\n        p=(a*(i*((math.sqrt(2)-1)/2)))\n        return round(p,2)\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=4\n        p=(a*(i*((math.sqrt(2)-1)/2)))\n        return round(p,2)\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=4\n        p=(a*(i*((math.sqrt(2)-1)/2)))\n        return round(p,2)\ndef perimeter_diamond(a):\n    '''\n    Write a function to find the perimeter of a regular diamond from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=2\n        p=(a*(i*((math.sqrt(2)-1)/2)))\n        return round(p,2)\ndef area_diamond(a):\n    '''\n    Write a function to find the area of a regular diamond from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=2\n        p=(a*(i*((math.sqrt(2)-1)/2)))\n        return round(p,2)\ndef perimeter_cross(a):\n    '''\n    Write a function to find the perimeter of a regular cross from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=3\n        p=(a*(i*((math.sqrt(2)-1)/2)))\n        return round(p,2)\ndef area_cross(a):\n    '''\n    Write a function to find the area of a regular cross from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=3\n        p=(a*(i*((math.sqrt(2)-1)/2)))\n        return round(p,2)\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=3\n        p=(a*(i*((math.sqrt(3)-1)/2)))\n        return round(p,2)\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=3\n        p=(a*(i*((math.sqrt(3)-1)/2)))\n        return round(p,2)\ndef perimeter_right_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a right-angle triangle from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        b=float(b)\n        i=a\n        p=((a*b)/2)\n        return round(p,2)\ndef area_right_triangle(a,b):\n    '''\n    Write a function to find the area of a right-angle triangle from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        b=float(b)\n        i=a\n        p=((a*b)/2)\n        return round(p,2)\ndef perimeter_paraboloid(a):\n    '''\n    Write a function to find the perimeter of a paraboloid from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=2\n        p=(i*(a*(math.sqrt(2)-1)))\n        return round(p,2)\ndef area_paraboloid(a):\n    '''\n    Write a function to find the area of a paraboloid from the length of its sides.\n    '''\n    if a%2!=0:\n        print(\"Incorrect input. Number of sides must be even.\")\n        return\n    else:\n        a=float(a)\n        i=2\n        p=(i*(a*(math.sqrt(2)-1)))\n        return round(p,2)\ndef perimeter_ellipse(a):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3*math.sqrt(5)*a\n    \ndef square(a):\n    '''\n    Write a function to find the square of a regular polygon from the number of sides.\n    '''\n    return (a**2)*math.sin(math.pi/a)\n    \ndef half_paralellogram(a):\n    '''\n    Write a function to find the length of a half-paralellogram from the number of legs.\n    '''\n    return math.sqrt(3)*(a**2)/4\n    \ndef number_square(b):\n    '''\n    Write a function to find the square of the number of squares that can be formed from it.\n    '''\n    return b**2\n    \ndef number_pentagon(c):\n    '''\n    Write a function to find the number of pentagon that can be formed from it.\n    '''\n    return c*(2*math.sqrt(5)-1)\n    \ndef number_hexagon(d):\n    '''\n    Write a function to find the number of hexagon that can be formed from it.\n    '''\n    return (d**3)/(4*math.sqrt(3))\n    \ndef number_square_pentagon(e):\n    '''\n    Write a function to find the number of square pentagon that can be formed from it.\n    '''\n    return (e**2)*math.sqrt(5)\n    \ndef number_pentagon_hexagon(f):\n    '''\n    Write a function to find the number of pentagon hexagon that can be formed from it.\n    '''\n    return f*math.sqrt(3)/(4*math.sqrt(5))\n    \ndef number_square_square_pentagon(g):\n    '''\n    Write a function to find the number of square square pentagon that can be formed from it.\n    '''\n    return g**2\n    \ndef number_square_hexagon_square(h):\n    '''\n    Write a function to find the number of square hexagon square that can be formed from it.\n    '''\n    return h*(2*math.sqrt(3)-1)\n    \ndef number_square_square_square_pentagon(i):\n    '''\n    Write a function to find the number of square square square pentagon that can be formed from it.\n    '''\n    return i**2\n    \ndef number_square_square_square_square_pentagon(j):\n    '''\n    Write a function to find the number of square square square square pentagon that can be formed from it.\n    '''\n    return j**3\n    \ndef number_pentagon_pentagon_hexagon(k):\n    '''\n    Write a function to find the number of pentagon pentagon hexagon that can be formed from it.\n    '''\n    return k*(2*math.sqrt(5)-1)\n    \ndef number_pentagon_pentagon_pentagon(l):\n    '''\n    Write a function to find the number of pentagon pentagon pentagon that can be formed from it.\n    '''\n    return l*math.sqrt(5)\n    \ndef number_pentagon_pentagon_square(m):\n    '''\n    Write a function to find the number of pentagon pentagon square that can be formed from it.\n    '''\n    return m*math.sqrt(5)/(4*math.sqrt(3))\n    \ndef number_hexagon_hexagon_square(n):\n    '''\n    Write a function to find the number of hexagon hexagon square that can be formed from it.\n    '''\n    return n*(2*math.sqrt(3)-1)\n    \ndef number_hexagon_hexagon_pentagon(o):\n    '''\n    Write a function to find the number of hexagon hexagon pentagon that can be formed from it.\n    '''\n    return o*math.sqrt(3)/(4*math.sqrt(5))\n    \ndef number_square_square_pentagon_pentagon(p):\n    '''\n    Write a function to find the number of square square pentagon pentagon that can be formed from it.\n    '''\n    return p**2\n    \ndef number_square_square_square_square_pentagon(q):\n    '''\n    Write a function to find the number of square square square square pentagon that can be formed from it.\n    '''\n    return q**3\n    \ndef number_square_square_pentagon_square(r):\n    '''\n    Write a function to find the number of square square pentagon square that can be formed from it.\n    '''\n    return r*math.sqrt(5)\n    \ndef number_pentagon_pentagon_square(s):\n    '''\n    Write a function to find the number of pentagon pentagon square that can be formed from it.\n    '''\n    return s*math.sqrt(5)\n    \ndef number_pentagon_square_square(t):\n    '''\n    Write a function to find the number of pentagon square square that can be formed from it.\n    '''\n    return t*math.sqrt(3)\n    \ndef number_pentagon_square_square_pentagon(u):\n    '''\n    Write a function to find the number of pentagon square square pentagon that can be formed from it.\n    '''\n    return u*math.sqrt(5)/(4*math.sqrt(3))\n    \ndef number_square_square_square_square_pentagon(v):\n    '''\n    Write a function to find the number of square square square square pentagon that can be formed from it.\n    '''\n    return v**2\n    \ndef number_square_square_square_square_square_pentagon(w):\n    '''\n    Write a function to find the number of square square square square square pentagon that can be formed from it.\n    '''\n    return w**3\n    \ndef number_square_square_square_square_square_square_pentagon(x):\n    '''\n    Write a function to find the number of square square square square square square pentagon that can be formed from it.\n    '''\n    return x**4\n    \ndef number_square_square_square_square_square_square_square_pentagon(y):\n    '''\n    Write a function to find the number of square square square square square square square square pentagon that can be formed from it.\n    '''\n    return y**5\n    \ndef number_square_square_square_square_square_square_square_square_pentagon(z):\n    '''\n    Write a function to find the number of square square square square square square square square square square pentagon that can be formed from it.\n    '''\n    return z**6\n    \ndef number_pentagon_square_square_square_square_square_square_square_pentagon(a):\n    '''\n    Write a function to find the number of pentagon square square square square square square square square square pentagon that can be formed from it.\n    '''\n    return a**7\n    \ndef number_square_square_square_square_square_square_square_square_square_pentagon(b):\n    '''\n    Write a function to find the number of square square square square square square square square square square square pentagon that can be formed from it.\n    '''\n    return b**8\n    \ndef number_square_square_square_square_square_square_square_square_square_square_pentagon(c):\n    '''\n    Write a function to find the number of square square square square square square square square square square square square pentagon that can be formed from it.\n    '''\n    return c**9\n    \ndef number_square_square_square_square_square_square_square_square_square_square_square_pentagon(d):\n    '''\n    Write a function to find the number of square square square square square square square square square square square square square pentagon that can be formed from it.\n    '''\n    return d**10\n    \ndef number_pentagon_square_square_square_square_square_square_square_square_square_square_square_pentagon(e):\n    '''\n    Write a function to find the number of pentagon square square square square square square square square square square square square square pentagon that can be formed from it.\n    '''\n    return e**11\n    \ndef number",
        "num_ids": 12
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*(a**2+a+5)\n    return perimeter\n",
        "num_ids": 22
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 1/2*a*math.sqrt((5*math.sqrt(2)-1)/2)\n    return round(perimeter,2)\n",
        "num_ids": 41
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(3**0.5)/2\ndef perimeter_triangle(b):\n    '''\n    Write a function to find the perimeter of a triangle from its length of the two legs.\n    '''\n    return b*2\ndef perimeter_square(c):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    return c*4\ndef perimeter_rhombus(d):\n    '''\n    Write a function to find the perimeter of a rhombus from its length of the two legs.\n    '''\n    return d*2\ndef area_cuboid(a):\n    '''\n    Write a function to find the area of a cuboid from its length, width and height.\n    '''\n    return a*a*a\ndef area_parallelogram(b):\n    '''\n    Write a function to find the area of a parallelogram from its length and width.\n    '''\n    return b*b\ndef area_triangle(c):\n    '''\n    Write a function to find the area of a triangle from its length and base.\n    '''\n    return c*c/2\ndef area_square(d):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    return d*d\ndef area_rhombus(e):\n    '''\n    Write a function to find the area of a rhombus from its length and width.\n    '''\n    return e*e\ndef area_ellipse(f):\n    '''\n    Write a function to find the area of an ellipse from its semi-major and semi-minor axes.\n    '''\n    return (f*f*math.pi)/4\ndef area_circle(g):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    return math.pi*g*g\ndef area_trapezoid(h):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return ((h*h)/2)*(h+h+h)\ndef area_trapezoid_2(i):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return i*(i+2)\ndef area_trapezoid_3(j):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return ((j*j)/2)*(j+2)\ndef area_trapezoid_4(k):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return k*(k+2)\ndef area_trapezoid_5(l):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return l*(l+2)\ndef area_trapezoid_6(m):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return m*(m+2)\ndef area_trapezoid_7(n):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return n*(n+2)\ndef area_trapezoid_8(o):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return o*(o+2)\ndef area_trapezoid_9(p):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return p*(p+2)\ndef area_trapezoid_10(q):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return q*(q+2)\ndef area_trapezoid_11(r):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return r*(r+2)\ndef area_trapezoid_12(s):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return s*(s+2)\ndef area_trapezoid_13(t):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return t*(t+2)\ndef area_trapezoid_14(u):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return u*(u+2)\ndef area_trapezoid_15(v):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return v*(v+2)\ndef area_trapezoid_16(w):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return w*(w+2)\ndef area_trapezoid_17(x):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return x*(x+2)\ndef area_trapezoid_18(y):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return y*(y+2)\ndef area_trapezoid_19(z):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return z*(z+2)\ndef area_trapezoid_20(a):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return a*(a+2)\ndef area_trapezoid_21(b):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return b*(b+2)\ndef area_trapezoid_22(c):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return c*(c+2)\ndef area_trapezoid_23(d):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return d*(d+2)\ndef area_trapezoid_24(e):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return e*(e+2)\ndef area_trapezoid_25(f):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return f*(f+2)\ndef area_trapezoid_26(g):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return g*(g+2)\ndef area_trapezoid_27(h):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return h*(h+2)\ndef area_trapezoid_28(i):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return i*(i+2)\ndef area_trapezoid_29(j):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and other lengths.\n    '''\n    return j*(j+2)\ndef area_tr",
        "num_ids": 16
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5\n    x = ((n-2)*math.sqrt(1+math.sqrt(5)))/2\n    return a*x\n    \n",
        "num_ids": 40
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = a * 5.0 / 2.0\n    return p\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((a**2)*(math.sqrt(5)))/2\nprint(perimeter_pentagon(5))\n",
        "num_ids": 31
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * (math.sqrt(5)-1)) / 2\n",
        "num_ids": 20
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<0:\n        return 0\n    elif a==0:\n        return 0\n    else:\n        return round(a*5,4)\n",
        "num_ids": 40
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if s[i] == \"s\":\n            count = count + 1\n    print(count)\n",
        "num_ids": 45
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = 0\n    if s.count('std') > 0:\n        n = s.count('std')\n    return n\n",
        "num_ids": 33
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurence = 0\n    if'std' in s:\n        occurence += s.count('std')\n    return occurence\n",
        "num_ids": 36
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    num = s.count('std')\n    return num\n",
        "num_ids": 16
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')",
        "num_ids": 10
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'd':\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'd':\n            count += 1\n    return count\nprint(count_occurance('ABCABCABC')) # 3\nprint(count_occurance('ABCABC')) # 2\nprint(count_occurance('ABC')) # 1\nprint(count_occurance('ABCdef')) # 0\nprint(count_occurance('aabb')) # 2\nprint(count_occurance('ddd')) # 1\nprint(count_occurance('abcdef')) # 0\n",
        "num_ids": 129
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c == 'd':\n            count += 1\n        if count == 2:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c == 'd':\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple1 = test_tuple\n    if isinstance(tuple1[0], str):\n        return \"STRING\"\n    elif isinstance(tuple1[0], int):\n        return \"INTEGER\"\n    elif isinstance(tuple1[0], float):\n        return \"FLOAT\"\n    else:\n        return \"LIST\"\n",
        "num_ids": 89
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple)!= tuple:\n        return False\n    else:\n        for item in test_tuple:\n            if type(item)!= type(test_tuple[0]):\n                return False\n        return True\n    \n",
        "num_ids": 61
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    if type(test_tuple[0]) == list:\n        return all(map(check_type, test_tuple))\n    if type(test_tuple[0]) == tuple:\n        return all(map(check_type, test_tuple))\n    return type(test_tuple[0]) == type(test_tuple[1])\n",
        "num_ids": 103
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Your code here\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    var1, var2 = test_tuple\n    if type(var1) == type(var2):\n        print(f'{test_tuple} are of same type')\n    else:\n        print(f'{test_tuple} are of different type')\n",
        "num_ids": 66
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initializing a flag to use in the function\n    flag = 0\n    for i in range(0, len(test_tuple)):\n        # checking if elements are of different data type\n        if type(test_tuple[i]) is not type(test_tuple[0]):\n            flag = 1\n    return flag\n",
        "num_ids": 80
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(0, len(test_tuple)):\n        if isinstance(test_tuple[i], (int, float)):\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    data_type = set()\n    for item in test_tuple:\n        if not isinstance(item, (int, float, str)):\n            data_type.add(type(item))\n",
        "num_ids": 51
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        for i in test_tuple:\n            if type(i)!= type(test_tuple[0]):\n                return False\n        return True\n    except:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    # Check if all elements in tuple are same data type\n    if all(isinstance(i, type(test_tuple[0])) for i in test_tuple):\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if n == 0:\n        return False\n    \n    if n == 1:\n        return (x == arr[0])\n    \n    if arr[0] == x:\n        return True\n    \n    if arr[n-1] == x:\n        return True\n    \n    for i in range(n):\n        if arr[i] == x:\n            return True\n        \n    return False\n",
        "num_ids": 99
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if(n == 1):\n        return True if arr[0] == x else False\n",
        "num_ids": 23
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x not in arr:\n        print(\"The given array does not have the element\")\n    \n    else:\n        #Code here\n",
        "num_ids": 34
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if (arr == None):\n        return False\n    if (n == 0):\n        return False\n    if (n == 1):\n        return (x == arr[0])\n    left = 0\n    right = n - 1\n    while (left <= right):\n        mid = (left + right) // 2\n        if (arr[mid] == x):\n            return True\n        if (arr[mid]!= x):\n            if (x < arr[mid]):\n                right = mid - 1\n            else:\n                left = mid + 1\n    return False\n",
        "num_ids": 135
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    majority = x\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if x in arr:\n    #     return True\n",
        "num_ids": 16
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count -= 1\n    if count >= (n // 2):\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bin_n = str(bin(n))\n    count = 0\n    for i in range(len(bin_n) - 1, -1, -1):\n        if bin_n[i] == '1':\n            count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= (n - 1)\n        count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n:\n        n=n&(n-1)\n        count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # base case\n    if n == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1) # using bitwise and operator\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #brute force \n    #binary_number = bin(n)[2:]\n    #count = 0\n    #for bit in binary_number:\n        #if bit == '1':\n            #count += 1\n    #return count\n",
        "num_ids": 58
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while (n):\n        count+=n&1\n        n>>=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    binary_num = n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while n:\n        n = n&(n-1)\n        set_bits += 1\n    return set_bits\n",
        "num_ids": 38
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i%2==0:\n            continue\n        else:\n            print(str[i],end='')\n",
        "num_ids": 42
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(filter(lambda x : x % 2!= 0, str))\n",
        "num_ids": 23
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #write your python function here\n    if str!= \"\":\n        str = str[:len(str)//2]\n        str = str[::2]\n        str = str[:len(str)//2]\n    return str\n",
        "num_ids": 59
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(0,len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_chars = ''\n    for i, ch in enumerate(str):\n        if i % 2!= 0:\n            odd_chars += ch\n    return odd_chars\n    \n",
        "num_ids": 49
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    # This loop is used to remove the odd index characters.\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    # This return statement is used to return the new string.\n    return new_string\n",
        "num_ids": 74
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(\"--Remove Odd Values String--\")\n    new_string = ''\n    for char in str:\n        if char.isalpha():\n            if char.isupper():\n                new_string += char.lower()\n            else:\n                new_string += char.upper()\n    return new_string\n",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list_str = list(str)\n    for i in range(len(list_str)):\n        if i%2 == 0:\n            pass\n        else:\n            list_str.pop(i)\n    return \"\".join(list_str)\n",
        "num_ids": 63
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([char for index,char in enumerate(str) if index % 2 == 0])\n",
        "num_ids": 27
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.strip()\n    if len(str) % 2!= 0:\n        return str\n    else:\n        count = 0\n        str = list(str)\n        for i in range(len(str)):\n            if i % 2!= 0:\n                str[i] = ''\n        str = ''.join(str)\n        return str\n",
        "num_ids": 88
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b and a<c):\n        min_num = a\n    elif (b<a and b<c):\n        min_num = b\n    else:\n        min_num = c\n    return min_num\n",
        "num_ids": 58
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    elif b<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 48
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\nprint(min_of_three(5,10,15))",
        "num_ids": 55
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\nprint(min_of_three(1,2,3)",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b and a < c): \n        return a\n    elif (b < a and b < c): \n        return b\n    else: \n        return c\n",
        "num_ids": 46
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        else:\n            return c\n    else:\n        if a<c:\n            return a\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b:\n        if a <= c:\n            return a\n        else:\n            return c\n    else:\n        if b <= c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\nprint(min_of_three(2,5,3))\n",
        "num_ids": 66
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<r:\n        return (r-l)&1==0\n    return r==l",
        "num_ids": 26
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<0:\n        l=0\n    if r<0:\n        r=0\n    if n<0:\n        n=0\n    if l>n:\n        l=0\n    if r>n:\n        r=0\n    if l==0 and r==0:\n        return 0\n    for i in range(l,r+1):\n        if i==0:\n            continue\n        x=n>>i\n        if x&1==1:\n            return 0\n    return 1\n",
        "num_ids": 124
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    flag=0\n    for i in range(l,r+1):\n        if n&i==i:\n            flag=1\n    if flag==1:\n        print('NO')\n    else:\n        print('YES')\n        ",
        "num_ids": 58
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #code here\n    return (n & (2**r-1))==0 and (n & (2**l-1))==0\n",
        "num_ids": 35
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    '''\n    print('Hello')\n    if n > l and n < r:\n        for i in range(l,r+1):\n            if n&i:\n                print(n, i)\n                return 0\n        return 1\n    else:\n        return 0\n    '''\n    '''\n    print('Hello')\n    n = int(input('Enter number : '))\n    l = int(input('Enter Lower range : '))\n    r = int(input('Enter Higher range : '))\n    if n > l and n < r:\n        if n == 0:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    '''\n    '''\n    n = int(input('Enter number : '))\n    for i in range(32):\n        if n&1:\n            print(n)\n        n >>= 1\n    '''\n    '''\n    n = int(input('Enter number : '))\n    if n == 0:\n        return 0\n    else:\n        if (n & (n - 1)) == 0:\n            return 0\n        else:\n            return 1\n    '''\n    '''\n    n = int(input('Enter number : '))\n    if n == 0:\n        return 0\n    else:\n        i = 0\n        while (n >> i)!= 0:\n            i += 1\n        return 1\n    '''\n    '''\n    n = int(input('Enter number : '))\n    if n == 0:\n        return 0\n    else:\n        if n & (n - 1) == 0:\n            return 1\n        else:\n            return 0\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    if n == 0:\n        return 0\n    else:\n        if (n & (n - 1)) == 0:\n            return 1\n        else:\n            return 0\n    '''\n    '''\n    n = int(input('Enter number : '))\n    if n == 0:\n        return 0\n    else:\n        if (n & (n - 1)) == 0:\n            return 1\n        else:\n            return 0\n    '''\n    '''\n    n = int(input('Enter number : '))\n    return 1 if n&(n-1)==0 else 0\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n = int(input('Enter number : '))\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    '''\n    '''\n    n ",
        "num_ids": 5
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if( (n & (n-1))==0):\n        print(\"The bits are set in the range\",l,\"and\",r)\n    else:\n        print(\"The bits are not set in the range\",l,\"and\",r)\n    \n",
        "num_ids": 60
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n % 2 == 1:\n        return '1' + all_Bits_Set_In_The_Given_Range(n//2, l, r)\n    else:\n        return '0' + all_Bits_Set_In_The_Given_Range(n//2, l, r)\n",
        "num_ids": 101
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return r-l+1 == ((2**n)-1)\n",
        "num_ids": 18
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return 'True' if (n & (2**r-1)) == 0 else 'False'\nprint(all_Bits_Set_In_The_Given_Range(100,1,2))\n",
        "num_ids": 49
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = bin(n)\n    n = int(n[2:])\n    \n    res = set()\n    while n!= 0:\n        res.add(n%2)\n        n = int(n/2)\n    if len(res) == n:\n        return True\n    else:\n        return False\n    \ndef check_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    n = bin(n)\n    n = int(n[2:])\n    \n    res = set()\n    while n!= 0:\n        res.add(n%2)\n        n = int(n/2)\n    if len(res) == r-l:\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # sort array in ascending order\n    arr.sort()\n    \n    # convert negative elements to positive\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    \n    # rearrange the array\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            break\n    \n    for j in range(len(arr)-i):\n        if arr[i+j] > 0:\n            arr[i+j] = -arr[i+j]\n        else:\n            break\n    \n    # convert positive elements to negative\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    \n    return arr\n",
        "num_ids": 194
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Arrange the array in ascending order\n    for i in range(n):\n        for j in range(i+1, len(arr)):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n",
        "num_ids": 71
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count = 1\n    temp = []\n    while count <= n:\n        if arr[count-1] < 0:\n            temp.append(arr[count-1])\n        else:\n            temp.append(arr[count])\n        count += 1\n    while len(temp)!= 0:\n        arr[count] = temp.pop()\n        count += 1\n    return arr\n",
        "num_ids": 92
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #first we need to make sure that there are n elements in the array, so we can sort the array\n    #since we have already done that, we can simply return it, since the function will never return an array with less than n elements\n    if n <= 0 or n > len(arr):\n        return arr\n    #the following code just sorts the array, so we do not have to iterate through the entire array\n    #we use the built-in sort function which is a non-trivial function, and we will do a little bit of preprocessing\n    #we first sort the array\n    arr.sort()\n    #then we need to make sure that we have the desired size, i.e. n elements\n    if len(arr) < n:\n        #here we will append the remaining elements, which will all be negative numbers\n        for i in range(len(arr)-n):\n            arr.append(-1)\n    #then we need to make sure that the negative numbers come before the positive numbers, and that the relative order of the negative numbers does not change\n    #to do so, we will use a counter, and since we sorted the array, we can start from the beginning of the array and increment our counter\n    #to find out how many negative numbers there are\n    negative_counter = 0\n    for i in range(len(arr)):\n        #for every element of the array, we first check if it is negative or not\n        if arr[i] < 0:\n            #if it is negative, we will increment our counter by 1\n            negative_counter += 1\n        #then, we check if it is positive, and if it is, we will increment our counter by 1\n        elif arr[i] > 0:\n            #if it is positive, we will increment our counter by 1\n            negative_counter += 1\n        #then, we check if the counter is greater than 0, and if it is, we will break out of the loop\n        if negative_counter > 0:\n            break\n    #now we need to do the same thing, but for the positive numbers\n    #we will increment the counter by n, since we have n elements\n    positive_counter = n\n    for i in range(len(arr)-n):\n        #then, we will iterate through the array, and if the element is positive, we will decrement our counter by 1\n        if arr[i] > 0:\n            positive_counter -= 1\n        #then, we will check if the counter is greater than 0, and if it is, we will break out of the loop\n        if positive_counter <= 0:\n            break\n    #now we need to find out how many negative and positive numbers there are, and how many empty spots we need to add\n    #we can find out how many negative numbers there are using the count function\n    negative_count = len([i for i in arr if i < 0])\n    #and how many positive numbers there are using the count function\n    positive_count = len([i for i in arr if i > 0])\n    #then, we will find out how many empty spaces we need to add\n    #we need to add n empty spaces, so we will use a variable to count the number of empty spaces\n    empty_spaces_count = n - positive_count - negative_count\n    #we will check if there are enough empty spaces, and if not, we will add more empty spaces\n    if empty_spaces_count > 0:\n        #if there are empty spaces, we will add the number of empty spaces to the end of the array\n        for i in range(empty_spaces_count):\n            arr.append(0)\n    #then, we need to sort the array again, and we will start from the beginning\n    arr.sort()\n    #finally, we return the array\n    return arr\n",
        "num_ids": 863
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    for num in arr:\n        if num < 0:\n            negatives.append(num)\n    negatives = negatives[::-1]\n    arr[0:n] = negatives\n    return arr\n",
        "num_ids": 56
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # first_neg = first_pos = -1\n    #\n    # for i in range(n):\n    #     if arr[i] < 0:\n    #         if first_neg == -1:\n    #             first_neg = i\n    #     else:\n    #         if first_pos == -1:\n    #             first_pos = i\n    #         elif arr[first_neg] >= 0 and arr[first_pos] < 0:\n    #             arr[first_pos], arr[first_neg] = arr[first_neg], arr[first_pos]\n    #             first_neg, first_pos = first_pos, first_neg\n    #     \n    # if first_neg == -1:\n    #     arr[n: ] = arr[n: ][::-1]\n    # else:\n    #     arr[n: ] = arr[n: ][::-1]\n    #     arr[: first_neg + 1] = arr[: first_neg + 1][::-1]\n    #     arr[: first_pos + 1] = arr[: first_pos + 1][::-1]\n    #\n    # return arr\n",
        "num_ids": 280
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_len = len(arr)\n    if arr_len <= n:\n        return arr\n    new_arr = []\n    neg_cnt = 0\n    for i in range(arr_len):\n        if arr[i] < 0:\n            neg_cnt += 1\n        else:\n            new_arr.append(arr[i])\n    for i in range(n):\n        new_arr.append(arr[i])\n    for i in range(n):\n        new_arr.append(arr[n+i])\n    for i in range(n+neg_cnt):\n        new_arr.append(arr[i])\n    return new_arr\n",
        "num_ids": 161
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Approach:\n    # Take the sum of all positive elements and negative elements\n    # Iterate from 1 to the n + 1 and,\n    # if i < n:\n    #     add i to the negative sum\n    # else:\n    #     add i to the positive sum\n    # if the negative sum is more than the positive sum\n    # then it must be that negative elements need to be added\n    # before the positive elements\n    # if the negative sum is less than the positive sum\n    # then it must be that positive elements need to be added\n    # before the negative elements\n    # all those things can be done in O(n) time.\n    # time - O(2n)\n    # space - O(n)\n    # count = 0\n    # i = 1\n    # while i < n:\n    #     count += arr[i]\n    #     i += 1\n    # arr.reverse()\n    # pos = 0\n    # neg = 0\n    # temp = []\n    # while i < n + 1:\n    #     if count >= 0:\n    #         temp.append(arr[pos])\n    #         count += arr[i]\n    #         pos += 1\n    #     else:\n    #         temp.append(arr[neg])\n    #         count += arr[i]\n    #         neg += 1\n    # arr[:] = temp\n    # return arr\n",
        "num_ids": 328
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    n_negative = 0\n    n_positive = 0\n",
        "num_ids": 16
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    first_n_pos = []\n    first_n_neg = []\n    \n    for i in range(n):\n        first_n_pos.append(arr[i])\n        first_n_neg.append(arr[i])\n    \n    first_n_pos.sort(reverse=True)\n    first_n_neg.sort()\n    \n    for i in range(n):\n        arr[i] = first_n_neg[i]\n        arr[i+n] = first_n_pos[i]\n        \n        \n    return arr\n",
        "num_ids": 138
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','*')\n    return str1\n",
        "num_ids": 21
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    l = list(str1)\n    for i in range(len(l)):\n        if(l[i] ==''):\n            l[i] = char\n    return (''.join(l))\n",
        "num_ids": 51
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",\"\")\n    return str2\n",
        "num_ids": 20
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n    return str1.replace(' ','')\n",
        "num_ids": 19
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    return char+str1\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str_new = str1.replace(\" \",\"\")\n    return str_new\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\",\"{}\")\n    str1 = str1.replace(\".\",\"{}\")\n    str1 = str1.replace(\",\",\"{}\")\n    str1 = str1.replace(\"/\",\"{}\")\n    str1 = str1.replace(\"=\",\"{}\")\n    str1 = str1.replace(\":\",\"{}\")\n    str1 = str1.replace(\";\",\"{}\")\n    str1 = str1.replace(\")\",\"{}\")\n    str1 = str1.replace(\"(\",\"{}\")\n    str1 = str1.replace(\"?\",\"{}\")\n    str1 = str1.replace(\"'\",\"{}\")\n    return str1\n",
        "num_ids": 183
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return char * len(str1)\n",
        "num_ids": 25
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    string = str1.replace(\" \",\"\")\n    return string\n",
        "num_ids": 18
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    for i in range(n-1):\n        heapq.heappop(list1)\n    return list1\n    \n",
        "num_ids": 46
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n,len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heapreplace(heap,list1[i])\n    return heap\n",
        "num_ids": 76
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return list1[:n]\n",
        "num_ids": 11
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    return list1[0:n]\ndef larg_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    return list1[:n]\ndef sum_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns the sum.\n    '''\n    return n1 + n2\ndef sum_list(list1):\n    '''\n    Write a function that takes in a list and returns the sum.\n    '''\n    return sum(list1)\ndef max_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns the max.\n    '''\n    return max(n1,n2)\ndef max_list(list1):\n    '''\n    Write a function that takes in a list and returns the max.\n    '''\n    return max(list1)\ndef smallest_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns the min.\n    '''\n    return min(n1,n2)\ndef smallest_list(list1):\n    '''\n    Write a function that takes in a list and returns the min.\n    '''\n    return min(list1)\ndef next_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns the next number after n1 and before n2.\n    '''\n    return n1 + 1\ndef next_list(list1):\n    '''\n    Write a function that takes in a list and returns the next number after n1 and before n2.\n    '''\n    return list1[0] + 1\ndef prev_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns the previous number after n1 and before n2.\n    '''\n    return n1 - 1\ndef prev_list(list1):\n    '''\n    Write a function that takes in a list and returns the previous number after n1 and before n2.\n    '''\n    return list1[-1] - 1\ndef is_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns True if n1 equals n2, otherwise False.\n    '''\n    return n1 == n2\ndef is_list(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is empty, otherwise False.\n    '''\n    return len(list1) == 0\ndef str_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns True if n1 is a string and n2 is an integer, otherwise False.\n    '''\n    return str(n1) == str(n2)\ndef str_list(list1):\n    '''\n    Write a function that takes in a list and returns True if the list contains an integer and False if it doesn't.\n    '''\n    return all(isinstance(i,int) for i in list1)\ndef chk_3(n1,n2,n3):\n    '''\n    Write a function that takes in three numbers and returns True if n1 divides n2 evenly, otherwise False.\n    '''\n    return n1%n2 == 0\ndef chk_list(list1):\n    '''\n    Write a function that takes in a list and returns True if the list contains integers and False if it doesn't.\n    '''\n    return all(isinstance(i,int) for i in list1)\ndef div_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns the quotient after dividing n1 by n2.\n    '''\n    return n1//n2\ndef div_list(list1):\n    '''\n    Write a function that takes in a list and returns the quotient after dividing the list items by each other.\n    '''\n    return list1[0]//list1[1]\ndef mod_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns the remainder after dividing n1 by n2.\n    '''\n    return n1%n2\ndef mod_list(list1):\n    '''\n    Write a function that takes in a list and returns the remainder after dividing the list items by each other.\n    '''\n    return list1[0]%list1[1]\ndef max_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns the max.\n    '''\n    return max(n1,n2)\ndef max_list(list1):\n    '''\n    Write a function that takes in a list and returns the max.\n    '''\n    return max(list1)\ndef min_2(n1,n2):\n    '''\n    Write a function that takes in two numbers and returns the min.\n    '''\n    return min(n1,n2)\ndef min_list(list1):\n    '''\n    Write a function that takes in a list and returns the min.\n    '''\n    return min(list1)\ndef list_2(list1,n):\n    '''\n    Write a function that takes in a list and a number n and returns a new list that contains only the first n elements of the original list.\n    '''\n    return list1[:n]\ndef list_list(list1,n):\n    '''\n    Write a function that takes in a list and a number n and returns a new list that contains only the first n elements of the original list.\n    '''\n    return list1[:n]\ndef reverse_2(list1,n):\n    '''\n    Write a function that takes in a list and a number n and returns a new list that contains only the last n elements of the original list.\n    '''\n    return list1[-n:]\ndef reverse_list(list1,n):\n    '''\n    Write a function that takes in a list and a number n and returns a new list that contains only the last n elements of the original list.\n    '''\n    return list1[-n:]\ndef heappush_2(heap,item):\n    '''\n    Write a function that takes in a heap and an item and inserts the item into the heap.\n    '''\n    heapq.heappush(heap,item)\ndef heappush_list(heap,item):\n    '''\n    Write a function that takes in a heap and an item and inserts the item into the heap.\n    '''\n    heapq.heappush(heap,item)\ndef heapify_2(heap):\n    '''\n    Write a function that takes in a heap and rearranges the elements so that they are in ascending order.\n    '''\n    heapq.heapify(heap)\ndef heapify_list(heap):\n    '''\n    Write a function that takes in a heap and rearranges the elements so that they are in ascending order.\n    '''\n    heapq.heapify(heap)\ndef heapreplace_2(heap,item):\n    '''\n    Write a function that takes in a heap and an item and replaces an item with a new item in the heap.\n    '''\n    return heapq.heapreplace(heap,item)\ndef heapreplace_list(heap,item):\n    '''\n    Write a function that takes in a heap and an item and replaces an item with a new item in the heap.\n    '''\n    return heapq.heapreplace(heap,item)\ndef merge_2(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a single list with all of the elements in both lists in ascending order.\n    '''\n    return list1 + list2\ndef merge_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a single list with all of the elements in both lists in ascending order.\n    '''\n    return list1 + list2\ndef merge_sort_2(list1):\n    '''\n    Write a function that takes in a list and returns a new list with the elements in the original list in ascending order.",
        "num_ids": 27
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return list1[:n]\n",
        "num_ids": 11
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    i=0\n    heap=[]\n    if(n<len(list1)):\n        while(i<n):\n            heapq.heappush(heap,list1[i])\n            i+=1\n        return heap\n    return heap\n",
        "num_ids": 64
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    h = []\n    for i in range(n):\n        heapq.heappush(h,list1[i])\n    return h\ndef test_larg_nnum():\n    assert larg_nnum([3,5,2,7,4,8],1) == [7, 8, 5, 3]\n    assert larg_nnum([3,5,2,7,4,8],2) == [7, 8, 5]\n    assert larg_nnum([3,5,2,7,4,8],3) == [7, 8, 5]\n    assert larg_nnum([3,5,2,7,4,8],4) == [7, 8]\n    assert larg_nnum([3,5,2,7,4,8],5) == [7, 8, 5]\n    assert larg_nnum([3,5,2,7,4,8],6) == []\n    assert larg_nnum([3,5,2,7,4,8],7) == []\n    assert larg_nnum([3,5,2,7,4,8],8) == []\n    assert larg_nnum([3,5,2,7,4,8],9) == []\n    assert larg_nnum([3,5,2,7,4,8],10) == []\n    assert larg_nnum([3,5,2,7,4,8],11) == []\n    print(\"YOUR CODE IS CORRECT!\")\n",
        "num_ids": 352
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #sorting and list, smaller to larger. The best way to do this is with heapq module.\n    #use heapq.nlargest(n, list)\n    #use heapq.nsmallest(n, list)\n    #use heapq.nlargest(n)\n    #use heapq.nsmallest(n)\n    list1.sort(reverse=True)\n    return list1[:n]\n    \n",
        "num_ids": 102
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    list2.extend(list1)\n    if len(list1)<n:\n        return list1\n    return list2[:n]\n",
        "num_ids": 44
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap\n    heapq.heapify(list1)\n    \n    # return the top n number\n    return heapq.nlargest(n, list1)\n    \n",
        "num_ids": 48
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math as m\n    L = 2*m.pi*r\n    H = h\n    area = (L*H)/3\n    return area\n",
        "num_ids": 38
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Use 2*pi*r*h\n    return 2*pi*r*h\n",
        "num_ids": 23
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    area = 3.14 * r**2 * h\n    print(area)\n    return\n",
        "num_ids": 26
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import numpy as np\n    from scipy.spatial import ConvexHull\n    \n    def lateralsurface_cylinder(r,h):\n        '''\n        Write a function to find the lateral surface area of a cylinder.\n        '''\n        import math\n        import numpy as np\n        from scipy.spatial import ConvexHull\n        def lateralsurface_cylinder(r,h):\n            '''\n            Write a function to find the lateral surface area of a cylinder.\n            '''\n            import math\n            import numpy as np\n            from scipy.spatial import ConvexHull\n            \n            def lateralsurface_cylinder(r,h):\n                '''\n                Write a function to find the lateral surface area of a cylinder.\n                '''\n                import math\n                import numpy as np\n                from scipy.spatial import ConvexHull\n                \n                def lateralsurface_cylinder(r,h):\n                    '''\n                    Write a function to find the lateral surface area of a cylinder.\n                    '''\n                    import math\n                    import numpy as np\n                    from scipy.spatial import ConvexHull\n                    def lateralsurface_cylinder(r,h):\n                        '''\n                        Write a function to find the lateral surface area of a cylinder.\n                        '''\n                        import math\n                        import numpy as np\n                        from scipy.spatial import ConvexHull\n                        \n                        def lateralsurface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            import math\n                            import numpy as np\n                            from scipy.spatial import ConvexHull\n                            \n                            def lateralsurface_cylinder(r,h):\n                                '''\n                                Write a function to find the lateral surface area of a cylinder.\n                                '''\n                                import math\n                                import numpy as np\n                                from scipy.spatial import ConvexHull\n                                \n                                def lateralsurface_cylinder(r,h):\n                                    '''\n                                    Write a function to find the lateral surface area of a cylinder.\n                                    '''\n                                    import math\n                                    import numpy as np\n                                    from scipy.spatial import ConvexHull\n                                    \n                                    def lateralsurface_cylinder(r,h):\n                                        '''\n                                        Write a function to find the lateral surface area of a cylinder.\n                                        '''\n                                        import math\n                                        import numpy as np\n                                        from scipy.spatial import ConvexHull\n                                        \n                                        def lateralsurface_cylinder(r,h):\n                                            '''\n                                            Write a function to find the lateral surface area of a cylinder.\n                                            '''\n                                            import math\n                                            import numpy as np\n                                            from scipy.spatial import ConvexHull\n                                            \n                                            def lateralsurface_cylinder(r,h):\n                                                '''\n                                                Write a function to find the lateral surface area of a cylinder.\n                                                '''\n                                                import math\n                                                import numpy as np\n                                                from scipy.spatial import ConvexHull\n                                                \n                                                def lateralsurface_cylinder(r,h):\n                                                    '''\n                                                    Write a function to find the lateral surface area of a cylinder.\n                                                    '''\n                                                    import math\n                                                    import numpy as np\n                                                    from scipy.spatial import ConvexHull\n                                                    \n                                                    def lateralsurface_cylinder(r,h):\n                                                        '''\n                                                        Write a function to find the lateral surface area of a cylinder.\n                                                        '''\n                                                        import math\n                                                        import numpy as np\n                                                        from scipy.spatial import ConvexHull\n                                                        \n                                                        def lateralsurface_cylinder(r,h):\n                                                            '''\n                                                            Write a function to find the lateral surface area of a cylinder.\n                                                            '''\n                                                            import math\n                                                            import numpy as np\n                                                            from scipy.spatial import ConvexHull\n                                                            \n                                                            def lateralsurface_cylinder(r,h):\n                                                                '''\n                                                                Write a function to find the lateral surface area of a cylinder.\n                                                                '''\n                                                                import math\n                                                                import numpy as np\n                                                                from scipy.spatial import ConvexHull\n                                                                \n                                                                def lateralsurface_cylinder(r,h):\n                                                                    '''\n                                                                    Write a function to find the lateral surface area of a cylinder.\n                                                                    '''\n                                                                    import math\n                                                                    import numpy as np\n                                                                    from scipy.spatial import ConvexHull\n                                                                    \n                                                                    def lateralsurface_cylinder(r,h):\n                                                                        '''\n                                                                        Write a function to find the lateral surface area of a cylinder.\n                                                                        '''\n                                                                        import math\n                                                                        import numpy as np\n                                                                        from scipy.spatial import ConvexHull\n                                                                        \n                                                                        def lateralsurface_cylinder(r,h):\n                                                                            '''\n                                                                            Write a function to find the lateral surface area of a cylinder.\n                                                                            '''\n                                                                            import math\n                                                                            import numpy as np\n                                                                            from scipy.spatial import ConvexHull\n                                                                            \n                                                                            def lateralsurface_cylinder(r,h):\n                                                                                '''\n                                                                                Write a function to find the lateral surface area of a cylinder.\n                                                                                '''\n                                                                                import math\n                                                                                import numpy as np\n                                                                                from scipy.spatial import ConvexHull\n                                                                                \n                                                                                def lateralsurface_cylinder(r,h):\n                                                                                    '''\n                                                                                    Write a function to find the lateral surface area of a cylinder.\n                                                                                    '''\n                                                                                    import math\n                                                                                    import numpy as np\n                                                                                    from scipy.spatial import ConvexHull\n                                                                                    \n                                                                                    def lateralsurface_cylinder(r,h):\n                                                                                        '''\n                                                                                        Write a function to find the lateral surface area of a cylinder.\n                                                                                        '''\n                                                                                        import math\n                                                                                        import numpy as np\n                                                                                        from scipy.spatial import ConvexHull\n                                                                                        \n                                                                                        def lateralsurface_cylinder(r,h):\n                                                                                            '''\n                                                                                            Write a function to find the lateral surface area of a cylinder.\n                                                                                            '''\n                                                                                            import math\n                                                                                            import numpy as np\n                                                                                            from scipy.spatial import ConvexHull\n                                                                                            \n                                                                                            def lateralsurface_cylinder(r,h):\n                                                                                                '''\n                                                                                                Write a function to find the lateral surface area of a cylinder.\n                                                                                                '''\n                                                                                                import math\n                                                                                                import numpy as np\n                                                                                                from scipy.spatial import ConvexHull\n                                                                                                \n                                                                                                def lateralsurface_cylinder(r,h):\n                                                                                                '''\n                                                                                                Write a function to find the lateral surface area of a cylinder.\n                                                                                                '''\n                                                                                                import math\n                                                                                                import numpy as np\n                                                                                                from scipy.spatial import ConvexHull\n                                                                                                \n                                                                                                def lateralsurface_cylinder(r,h):\n                                                                                                    '''\n                                                                                                    Write a function to find the lateral surface area of a cylinder.\n                                                                                                    '''\n                                                                                                    import math\n                                                                                                    import numpy as np\n                                                                                                    from scipy.spatial import ConvexHull\n                                                                                                    \n                                                                                                    def lateralsurface_cylinder(r,h):\n                                                                                                        '''\n                                                                                                        Write a function to find the lateral surface area of a cylinder.\n                                                                                                        '''\n                                                                                                        import math\n                                                                                                        import numpy as np\n                                                                                                        from scipy.spatial import ConvexHull\n                                                                                                        \n                                                                                                        def latera",
        "num_ids": 49
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (2*pi*r**2)/3\n    print(f'The lateral surface area of the cylinder is {area}')\n",
        "num_ids": 34
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def lateral_surface_area(r,h):\n        if r > h:\n            a = pi*(r**2 - h**2)/4\n        else:\n            a = pi*(h**2 - r**2)/4\n        return a\n    lateral_surface_area = lateral_surface_area(r,h)\n    return lateral_surface_area\n",
        "num_ids": 89
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = pi * r**2\n    B = 2 * pi * r * h\n    C = 2 * pi * r * h - 2 * pi * r**2 + 2 * pi * r**2 * h\n    D = 2 * pi * r * h\n    return A + B + C + D\n",
        "num_ids": 72
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    def surface_area(r,h):\n        pi = math.pi\n        a = math.pi*r**2\n        l = 2*pi*r*h\n        return a*l\n    print(surface_area(r,h))\n",
        "num_ids": 64
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    return pi*r*h*2\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    return pi*r*r*4/3\n    \ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    from math import pi\n    return pi*r*r*h\n",
        "num_ids": 18
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*h*r**2\n",
        "num_ids": 12
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return(side_length**3)\n",
        "num_ids": 12
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # cube_volume = l ** 3\n    # return cube_volume\n    return l ** 3\n",
        "num_ids": 25
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    return l*l*l\n",
        "num_ids": 12
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(\"volume_cube(l)\")\n    return l**3\n",
        "num_ids": 19
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 1\n",
        "num_ids": 8
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1)\n",
        "num_ids": 12
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x10\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n >= 2**(32-1) and n <= 2**32-1:\n        #print(bin(n))\n        n = n ^ (1 << 32-1)\n        return n\n    else:\n        return 'Number out of range'\n    # Your code here\n",
        "num_ids": 68
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n==0:\n        return 0\n    return (n&1)<<1\nprint(even_bit_set_number(12))",
        "num_ids": 35
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | (n - 1)\n    print(n)\n    \neven_bit_set_number(3)\neven_bit_set_number(11)\neven_bit_set_number(25)\n",
        "num_ids": 54
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0: \n        print(\"Invalid Input\") \n    else: \n        return n | n << 1; \n",
        "num_ids": 33
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x10\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n)\n    print(n)\n    n = int(n, 2)\n    n = n | n<<1\n    print(n)\n    n = n>>1\n    n = int(n, 2)\n    return n\n",
        "num_ids": 62
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & ~(n-1)\n",
        "num_ids": 13
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #initializing empty dictionary \n    occurences = {}\n    for element in test_list:\n        #if the tuple has already occured \n        if element in occurences:\n            #increase the value by 1\n            occurences[element] += 1\n        #else add to the dictionary\n        else:\n            occurences[element] = 1\n    return occurences \n",
        "num_ids": 94
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for element in test_list:\n        if element[0] in d:\n            d[element[0]] = d[element[0]] + 1\n        else:\n            d[element[0]] = 1\n    return d\ndef increment_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for element in test_list:\n        if element[0] in d:\n            d[element[0]] = d[element[0]] + 1\n        else:\n            d[element[0]] = 1\n    for i in range(2, len(test_list)):\n        d[test_list[i-2][0]] = d[test_list[i-2][0]] + 1\n    return d\ndef missing_numbers(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for element in test_list:\n        if element[0] in d:\n            d[element[0]] = d[element[0]] + 1\n        else:\n            d[element[0]] = 1\n    missing_numbers = []\n    for i in range(1, len(test_list)):\n        if i not in d:\n            missing_numbers.append(i)\n    return missing_numbers\ndef missing_numbers_naive(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for element in test_list:\n        if element[0] in d:\n            d[element[0]] = d[element[0]] + 1\n        else:\n            d[element[0]] = 1\n    missing_numbers = []\n    for i in range(1, len(test_list)):\n        if i not in d:\n            missing_numbers.append(i)\n    return missing_numbers\n",
        "num_ids": 107
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of words and a string and returns a dictionary that maps each unique string in the list to the number of times it appears in the string.\n    '''\ndef count_words(test_list,test_word):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the minimum number of times it appears in the list.\n    '''\ndef min_occurences(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the maximum number of times it appears in the list.\n    '''\ndef max_occurences(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the average number of times it appears in the list.\n    '''\ndef avg_occurences(test_list):\n    sum = 0\n    for i in test_list:\n        if i in my_dict:\n            sum += my_dict[i]\n    avg = sum / len(test_list)\n    print(avg)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the sum of all the values in the list.\n    '''\ndef sum_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values in the list.\n    '''\ndef prod_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the square of all the values in the list.\n    '''\ndef sq_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values squared in the list.\n    '''\ndef prod_sq_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the sum of all the values squared in the list.\n    '''\ndef sum_sq_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values squared in the list.\n    '''\ndef prod_sq_sum_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values squared, then the sum of all the values.\n    '''\ndef prod_sq_sum_values_2(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    my_dict_2 = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict_2[i] += 1\n        else:\n            my_dict_2[i] = 1\n    print(my_dict_2)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values, then the sum of all the values squared.\n    '''\ndef prod_sum_sq_values_2(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    my_dict_2 = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict_2[i] += 1\n        else:\n            my_dict_2[i] = 1\n    print(my_dict_2)\n    \n    my_dict_3 = {}\n    for i in test_list:\n        if i in my_dict_2:\n            my_dict_3[i] += 1\n        else:\n            my_dict_3[i] = 1\n    print(my_dict_3)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the sum of all the values squared, then the product of all the values.\n    '''\ndef sum_prod_sq_values_2(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    my_dict_2 = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict_2[i] += 1\n        else:\n            my_dict_2[i] = 1\n    print(my_dict_2)\n    \n    my_dict_3 = {}\n    for i in test_list:\n        if i in my_dict_2:\n            my_dict_3[i] += 1\n        else:\n            my_dict_3[i] = 1\n    print(my_dict_3)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values squared, then the sum of all the values.\n    '''\ndef prod_sum_sq_values_3(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n",
        "num_ids": 67
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for key in test_list:\n        if key in count_dict:\n            count_dict[key] += 1\n        else:\n            count_dict[key] = 1\n    return count_dict\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        d[i] = d.get(i, 0) + 1\n    return d\n",
        "num_ids": 37
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for x in range(len(test_list)):\n        temp = test_list[x][0]\n        if temp not in d.keys():\n            d[temp] = 1\n        else:\n            d[temp] += 1\n    return d\n",
        "num_ids": 67
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # My first solution\n    # return Counter(test_list)\n",
        "num_ids": 18
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for i in test_list:\n        if i in test_dict:\n            test_dict[i] += 1\n        else:\n            test_dict[i] = 1\n    return test_dict\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_list = []\n    unique_list = set(test_list)\n    occurence = {}\n    for x in unique_list:\n        occurence[x] = 0\n        for y in test_list:\n            if x == y:\n                occurence[x] += 1\n    return occurence\n",
        "num_ids": 79
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for i in test_list:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\n",
        "num_ids": 51
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(re.findall(r'\\w+', str))\n",
        "num_ids": 20
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            count+=1\n    return count \nprint(number_of_substrings('aaaa'))\n",
        "num_ids": 56
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    sub_string = \"\"\n    count = 0\n    for i in range(0, len(str)):\n        if str[i] =='':\n            if sub_string!= \"\":\n                count += 1\n            sub_string = \"\"\n        else:\n            sub_string += str[i]\n    return count \n",
        "num_ids": 81
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    cnt = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            cnt+=1\n    print(cnt)\n    \n    \nnumber_of_substrings('ababb')\nnumber_of_substrings('ababa')\nnumber_of_substrings('ababac')\nnumber_of_substrings('a')\nnumber_of_substrings('b')\nnumber_of_substrings('ab')\nnumber_of_substrings('abaa')\n",
        "num_ids": 126
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    string_length = len(str)\n    count = 0\n    for i in range(string_length):\n        for j in range(i, string_length+1):\n            if j < string_length+1:\n                count = count + 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(len(str)-1,i,-1):\n            count+=1\n    return count\n    \nprint(number_of_substrings(\"gfg\"))\nprint(number_of_substrings(\"helloworld\"))\nprint(number_of_substrings(\"fg\"))\n",
        "num_ids": 86
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] =='':\n            continue\n        count += 1\n    print(\"The number of non-empty substrings of the given string is: \", count)\n",
        "num_ids": 58
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    res = 0\n    for i in range(len(str)):\n        if str[i] =='':\n            res += 1\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences_count = 0\n    for i in range(m,n+1):\n        # List all possible sequences of length n\n        if m % i == 0:\n            if m - i <= i:\n                sequences_count += 1\n        else:\n            break\n    return sequences_count\n",
        "num_ids": 72
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0: \n        return 0\n    else:\n        return ((m+1)**n - (m+1)**(n-1)) / (m+1)\n",
        "num_ids": 46
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def num_seq_fibo(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return num_seq_fibo(n-1) + num_seq_fibo(n-2)\n    return num_seq_fibo(n) - num_seq_fibo(n-1)\n",
        "num_ids": 91
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if m < 1 or n < 1: \n        return 0 \n    if m == 1 or n == 1:\n        return m \n    \n    res = 0\n    for i in range(1,n):\n        res += get_total_number_of_sequences(m,i) * get_total_number_of_sequences(m-i,n-i)\n        \n    return res \n",
        "num_ids": 101
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 0\n    \n    for i in range(n, m+1):\n        \n        if(i > m):\n            break\n        \n        result += int(bin(i)[2:]) - int(bin(i-1)[2:])\n        \n    return result\n",
        "num_ids": 68
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    ans = 0\n    for i in range(m,n+1):\n        if is_possible(m,i):\n            ans += 1\n    return ans\n",
        "num_ids": 41
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0:\n        return 1\n    if m == 1:\n        return 2\n    if m == 2:\n        return 3\n    if m == 3:\n        return 5\n",
        "num_ids": 46
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #start code here\n    a=0\n    \n    for i in range(n):\n        if(m<=n):\n            a=m*(m-1)/2\n        elif(m>n):\n            a=m*(m-1)\n        else:\n            a=m*(m-1)/2\n        \n    return int(a)\n",
        "num_ids": 90
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    seqs = [[1, 2, 3, 4]]\n    \n    i = 1\n    while i < n:\n        new_seqs = []\n        for seq in seqs:\n            if seq[-1] <= m:\n                for j in range(len(seq)):\n                    new_seq = seq[:]\n                    new_seq.append(2*seq[j]+1)\n                    new_seqs.append(new_seq)\n                    new_seq = seq[:]\n                    new_seq.append(2*seq[j]+2)\n                    new_seqs.append(new_seq)\n            else:\n                for j in range(len(seq)):\n                    new_seq = seq[:]\n                    new_seq.append(2*seq[j]+1)\n                    new_seqs.append(new_seq)\n                    new_seq = seq[:]\n                    new_seq.append(2*seq[j]+2)\n                    new_seqs.append(new_seq)\n        seqs = new_seqs\n        i += 1\n        \n    return len(seqs)\n    \n    #What is the total number of sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m?\n    \ndef get_number_of_sequences_with_sum(n,s,m):\n    '''\n    Write a function that takes in non-negative integers n and s and finds the number of sequences of length n such that each element is a positive integer and the sum of all the elements of the sequence is equal to s.\n    '''\n    \n    i = 1\n    seq_sum = s\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum - i\n        if new_seq_sum <= m:\n            seq_sum = new_seq_sum\n            count += 1\n        i += 1\n    return count\n    \ndef get_number_of_sequences_of_length_2(n,m):\n    '''\n    Write a function that takes in non-negative integers n and m and returns the number of sequences of length 2 such that each element is a positive integer and the sum of all the elements of the sequence is less than or equal to m.\n    '''\n    \n    i = 1\n    seq_sum = 0\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum + i\n        if new_seq_sum <= m:\n            seq_sum = new_seq_sum\n            count += 1\n        i += 1\n    return count\n    \ndef get_number_of_sequences_of_length_n(n,m):\n    '''\n    Write a function that takes in non-negative integers n and m and returns the number of sequences of length n such that each element is a positive integer and the sum of all the elements of the sequence is less than or equal to m.\n    '''\n    \n    i = 1\n    seq_sum = 0\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum + i\n        if new_seq_sum <= m:\n            seq_sum = new_seq_sum\n            count += 1\n        i += 1\n    return count\n    \ndef get_number_of_sequences_of_length_n_with_sum(n,m,s):\n    '''\n    Write a function that takes in non-negative integers n and m and returns the number of sequences of length n such that each element is a positive integer and the sum of all the elements of the sequence is equal to s.\n    '''\n    \n    i = 1\n    seq_sum = s\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum - i\n        if new_seq_sum <= m:\n            seq_sum = new_seq_sum\n            count += 1\n        i += 1\n    return count\n    \ndef get_number_of_sequences_of_length_n_with_sum_less_than_n(n,m,s):\n    '''\n    Write a function that takes in non-negative integers n and m and returns the number of sequences of length n such that each element is a positive integer and the sum of all the elements of the sequence is less than or equal to m.\n    '''\n    \n    i = 1\n    seq_sum = s\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum - i\n        if new_seq_sum <= m:\n            seq_sum = new_seq_sum\n            count += 1\n        i += 1\n    return count\n    \ndef get_number_of_sequences_of_length_n_with_sum_greater_than_n(n,m,s):\n    '''\n    Write a function that takes in non-negative integers n and m and returns the number of sequences of length n such that each element is a positive integer and the sum of all the elements of the sequence is greater than or equal to m.\n    '''\n    \n    i = 1\n    seq_sum = s\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum - i\n        if new_seq_sum >= m:\n            seq_sum = new_seq_sum\n            count += 1\n        i += 1\n    return count\n    \ndef get_number_of_sequences_of_length_n_with_sum_greater_than_n_less_than_m(n,m,s):\n    '''\n    Write a function that takes in non-negative integers n and m and returns the number of sequences of length n such that each element is a positive integer and the sum of all the elements of the sequence is greater than or equal to m.\n    '''\n    \n    i = 1\n    seq_sum = s\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum - i\n        if new_seq_sum >= m:\n            seq_sum = new_seq_sum\n            count += 1\n        i += 1\n    return count\n    \ndef get_number_of_sequences_of_length_n_with_sum_greater_than_n_greater_than_m(n,m,s):\n    '''\n    Write a function that takes in non-negative integers n and m and returns the number of sequences of length n such that each element is a positive integer and the sum of all the elements of the sequence is greater than or equal to m.\n    '''\n    \n    i = 1\n    seq_sum = s\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum - i\n        if new_seq_sum >= m:\n            seq_sum = new_seq_sum\n            count += 1\n        i += 1\n    return count\n    \ndef get_number_of_sequences_of_length_n_with_sum_greater_than_n_greater_than_m_less_than_m(n,m,s):\n    '''\n    Write a function that takes in non-negative integers n and m and returns the number of sequences of length n such that each element is a positive integer and the sum of all the elements of the sequence is greater than or equal to m.\n    '''\n    \n    i = 1\n    seq_sum = s\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum - i\n        if new_seq_sum >= m:\n            seq_sum = new_seq_sum\n            count += 1\n        i += 1\n    return count\n    \ndef get_number_of_sequences_of_length_n_with_sum_greater_than_n_greater_than_m_greater_than_m(n,m,s):\n    '''\n    Write a function that takes in non-negative integers n and m and returns the number of sequences of length n such that each element is a positive integer and the sum of all the elements of the sequence is greater than or equal to m.\n    '''\n    \n    i = 1\n    seq_sum = s\n    count = 0\n    \n    while i < n:\n        new_seq_sum = seq_sum - i\n        if new_seq",
        "num_ids": 48
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n",
        "num_ids": 13
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #get the length of the first list\n    l = len(list1)\n    #check if the length of the list is equal to zero\n    if l == 0:\n        #return false\n        return False\n    #increment the length of the list by one\n    l = l + 1\n    #copy the list1 element to a new list\n    list2 = list1[:]\n    #pop the last element of the list1\n    list1.pop()\n    #add the list2 to the last element of the list1\n    list1.append(list2)\n    #return list1\n    return list1\n    \nprint(replace_list([],[1,2,3])) #-> [1,2,3]\nprint(replace_list([1,2,3],[4,5,6])) #-> [1,2,3,4,5,6]\nprint(replace_list([0,1,2,3],[4,5,6])) #-> [0,1,2,3,4,5,6]\nprint(replace_list([],[1,2,3,4,5,6])) #-> [1,2,3,4,5,6]\nprint(replace_list([1,2,3],[4,5,6])) #-> [1,2,3,4,5,6]\nprint(replace_list([0,1,2,3,4,5,6],[1,2,3])) #-> False\nprint(replace_list([0,1,2,3,4,5,6,7],[1,2,3])) #-> False\nprint(replace_list([0,1,2,3,4,5,6,7],[1,2,3,4,5])) #-> False\nprint(replace_list([1,2,3],[4,5,6])) #-> False\nprint(replace_list([1,2,3],[4,5,6])) #-> False\nprint(replace_list([],[1,2,3,4,5,6])) #-> False\nprint(replace_list([1,2,3,4,5,6,7],[4,5,6])) #-> True\nprint(replace_list([1,2,3,4,5,6,7],[4,5,6,7])) #-> True\nprint(replace_list([1,2,3,4,5,6,7],[4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7],[4,5,6,7,8])) #-> True\nprint(replace_list([1,2,3,4,5,6,7,8],[4,5,6,7,8])) #-> True\nprint(replace_list([1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[])) #-> True\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9])) #-> False\nprint(replace_list([1,2,3,4,5,6,7,8,9]",
        "num_ids": 1977
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.extend(list2)\n    return list1\n",
        "num_ids": 27
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1\n",
        "num_ids": 22
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1 == list2:\n        return list1\n    else:\n        list1[-1] = list2[0]\n        return list1\n",
        "num_ids": 39
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \nprint('count_charac(\"hello\") = ', count_charac(\"hello\"))\nprint('count_charac(\"\") = ', count_charac(\"\"))\n",
        "num_ids": 48
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a') + str1.count('e') + str1.count('i') + str1.count('o') + str1.count('u')\n",
        "num_ids": 44
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    sum = 0\n    for i in str1:\n        sum = sum + 1\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # # base case: if N is already a perfect square, then return its square.\n    if isPerfectSquare(N):\n        return N*N\n    # # else find the next perfect square\n    i = 1\n    while i*i <= N:\n        i += 1\n    return i*i\n",
        "num_ids": 72
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==0:\n        return 0\n    while(True):\n        num=math.sqrt(N)\n        if num == int(num):\n            break\n        else:\n            N=num+1\n    return N\n    \ndef next_Perfect_Square2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while(True):\n        num=math.sqrt(N)\n        if num == int(num):\n            break\n        else:\n            N+=1\n    return N\n",
        "num_ids": 44
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    \n    while x*x <= N:\n        x += 1\n    return x*x\n",
        "num_ids": 37
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqr_n=int(math.sqrt(N))\n    if (sqr_n * sqr_n)!= N:\n        return (sqr_n+1)*(sqr_n+1)\n    else:\n        return sqr_n*sqr_n\n",
        "num_ids": 70
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Your code here\n    sqrtN=math.floor(math.sqrt(N))\n    while sqrtN*sqrtN<=N:\n        sqrtN+=1\n    return sqrtN*sqrtN\n",
        "num_ids": 56
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # keep reducing the number by 1 until you reach the square root\n    if N <= 0:\n        return -1\n    while (N % 2) == 0:\n        N = N // 2\n    \n    for i in range(N,0,-1):\n        if i**2 == N:\n            return N\n        elif i**2 > N:\n            return i-1\n    \n    return 1\n",
        "num_ids": 97
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find out how big the number is.\n    l = int(math.sqrt(N))\n    # Iterate through the numbers and check if any of the numbers are the next perfect square\n    while l ** 2 < N:\n        l += 1\n    return l ** 2\n",
        "num_ids": 66
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(2, N):\n        if (N ** 2) % i == 0:\n            return i\n",
        "num_ids": 30
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #base condition\n    if(N==0): \n        return 0; \n    while True:\n        if(N*N > (N+1)*(N+1)): \n            return N*N; \n        N += 1\ndef next_Prime(N):\n    '''\n    Write a python function to find the next prime greater than a given number.\n    '''\n    #base condition\n    if(N==1): \n        return 2; \n    while True:\n        if(N%2==0): \n            N = N + 1\n        elif(N > 2): \n            return N; \n        N += 2\ndef gcd(a,b):\n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    #base condition\n    if(a == 0 or b == 0): \n        return max(a,b)\n    return gcd(b%a,a)\ndef lcm(a,b):\n    '''\n    Write a python function to find the lcm of two numbers.\n    '''\n    #base condition\n    if(a == 0 or b == 0): \n        return 0\n    return a*b // math.gcd(a,b)\ndef min_max(nums):\n    '''\n    Write a python function to find the min and max of an array.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0,0\n    min_n = nums[0]\n    max_n = nums[0]\n    for n in range(1,len(nums)):\n        if(nums[n] > max_n):\n            max_n = nums[n]\n        elif(nums[n] < min_n):\n            min_n = nums[n]\n    return min_n,max_n\ndef max_in_list(nums):\n    '''\n    Write a python function to find the maximum number in an array.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    max_num = nums[0]\n    for n in range(1,len(nums)):\n        if(nums[n] > max_num):\n            max_num = nums[n]\n    return max_num\ndef sum_in_list(nums):\n    '''\n    Write a python function to find the sum of all the numbers in an array.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(0,len(nums)):\n        sum += nums[n]\n    return sum\ndef sum_in_list_const(nums,const):\n    '''\n    Write a python function to find the sum of all the numbers in an array.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(0,len(nums)):\n        if(n == const):\n            break\n        sum += nums[n]\n    return sum\ndef sum_in_list_even(nums):\n    '''\n    Write a python function to find the sum of all the even numbers in an array.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(0,len(nums)):\n        if(n % 2 == 0):\n            sum += nums[n]\n    return sum\ndef sum_in_list_odd(nums):\n    '''\n    Write a python function to find the sum of all the odd numbers in an array.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(0,len(nums)):\n        if(n % 2!= 0):\n            sum += nums[n]\n    return sum\ndef sum_in_list_even_odd(nums):\n    '''\n    Write a python function to find the sum of all the even and odd numbers in an array.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(0,len(nums)):\n        if(n == 0):\n            if(n % 2 == 0):\n                sum += nums[n]\n            else:\n                sum -= nums[n]\n        elif(n % 2 == 0):\n            sum += nums[n]\n        else:\n            sum -= nums[n]\n    return sum\ndef sum_in_list_rev(nums):\n    '''\n    Write a python function to find the sum of all the numbers in an array in a reverse order.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(len(nums)-1,-1,-1):\n        sum += nums[n]\n    return sum\ndef sum_in_list_rev_odd_even(nums):\n    '''\n    Write a python function to find the sum of all the odd numbers and even numbers in an array in a reverse order.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(len(nums)-1,-1,-1):\n        if(n % 2 == 0):\n            sum += nums[n]\n        else:\n            sum -= nums[n]\n    return sum\ndef sum_in_list_odd_even(nums):\n    '''\n    Write a python function to find the sum of all the odd and even numbers in an array.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(0,len(nums)):\n        if(n % 2 == 0):\n            sum += nums[n]\n    return sum\ndef sum_in_list_rev_even_odd(nums):\n    '''\n    Write a python function to find the sum of all the even numbers and odd numbers in an array in a reverse order.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(len(nums)-1,-1,-1):\n        if(n % 2 == 0):\n            sum += nums[n]\n        else:\n            sum -= nums[n]\n    return sum\ndef sum_in_list_odd_even_rev(nums):\n    '''\n    Write a python function to find the sum of all the odd and even numbers in an array in a reverse order.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(len(nums)-1,-1,-1):\n        if(n % 2 == 0):\n            sum += nums[n]\n    return sum\ndef sum_in_list_even_odd_rev(nums):\n    '''\n    Write a python function to find the sum of all the even numbers and odd numbers in an array in a reverse order.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(len(nums)-1,-1,-1):\n        if(n % 2!= 0):\n            sum += nums[n]\n    return sum\ndef sum_in_list_even_odd_rev(nums):\n    '''\n    Write a python function to find the sum of all the even and odd numbers in an array in a reverse order.\n    '''\n    # base condition\n    if(len(nums) == 0): \n        return 0\n    sum = 0\n    for n in range(len(nums)-1,-1,-1):\n        if(n % 2!= 0):\n            sum += nums[n]\n    return sum\ndef sum_in_list_odd_even_rev(nums):\n    '''\n    Write a python function to find the sum of all the odd and even numbers in an array in ",
        "num_ids": 23
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while(N*N > N):\n        N = (N+1)//2\n    return N\n",
        "num_ids": 27
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2: \n        return sum(arr)\n    \n    cur_max, max_sum, min_sum = arr[0], arr[0], arr[0]\n    for i in range(1, len(arr)): \n        cur_max = max(cur_max + arr[i], arr[i])\n        max_sum = max(max_sum, cur_max)\n        min_sum = min(min_sum, cur_max + arr[i - 1])\n    return max_sum\n",
        "num_ids": 127
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:\n            s = arr[i]\n        \n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n    \n    \ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    s = 0\n    max_sum = 0\n    l = len(arr)\n    \n    for i in range(l):\n        s = s + arr[i]\n        \n        if s < arr[i]:",
        "num_ids": 55
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float(\"-inf\")\n    if arr:\n        dp = [[0 for i in range(n)] for j in range(n)]\n        for i in range(n-1,-1,-1):\n            for j in range(i+1,n):\n                if arr[i] <= arr[j]:\n                    dp[i][j] = max(arr[i] + dp[i+1][j],arr[j] + dp[i][j-1])\n                else:\n                    dp[i][j] = max(arr[j] + dp[i+1][j],arr[i] + dp[i][j-1])\n        for i in range(n):\n            max_sum = max(max_sum,dp[0][i])\n    return max_sum\n",
        "num_ids": 201
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # If input array is empty\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def find_max_sum(arr, start, end):\n        if start > end:\n            return -1\n",
        "num_ids": 29
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0: return 0\n    if len(arr) == 1: return arr[0]\n    res = [0] * len(arr)\n    res[0] = arr[0]\n    res[1] = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        res[i] = max(res[i-1], res[i-2]+arr[i])\n    return res[-1]\n",
        "num_ids": 116
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    maxSum = -1000000\n    left, right = 0, len(arr) - 1\n",
        "num_ids": 24
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp_table = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n",
        "num_ids": 36
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    dp = [[0]*n for i in range(n)]\n",
        "num_ids": 40
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    ans = number / 2\n    x = 0.5\n    while abs(ans**2 - number) > 0.00001:\n        x = ans\n        ans = (x + number / x) / 2\n    return x\n",
        "num_ids": 55
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    epsilon = 0.000001\n    k = 1\n    while True:\n        y = (x + k) / 2\n        if abs(y - x) < epsilon:\n            break\n        k = y\n    return k\n",
        "num_ids": 64
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    guess = number/2.0\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number/guess)/2.0\n    return guess\n",
        "num_ids": 60
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    n = number\n    k = 1\n    while n > 1:\n        k += 1\n        n = n / 2\n    return k\n",
        "num_ids": 35
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # first guess\n    guess = number/2\n    \n    # count of iterations\n    count = 0\n    \n    # loop until the difference between the guess and number is less than 0.0001\n    while abs(guess**2 - number) > 0.0001:\n        # count of iterations\n        count += 1\n        \n        # update guess\n        guess = guess - (guess**2 - number)/(2 * guess)\n        \n    return guess, count\n    \ndef euler_squareroot(number):\n    '''\n    Write a function for computing square roots using the euler method.\n    '''\n    \n    # initialize guess and count\n    guess = 1\n    count = 0\n    \n    # iterate until the difference between the guess and number is less than 0.0001\n    while abs(guess**2 - number) > 0.0001:\n        # count of iterations\n        count += 1\n        \n        # update guess\n        guess = guess - (guess**2 - number)/(2 * guess)\n        \n    return guess, count\n",
        "num_ids": 106
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        raise ValueError\n    x = number / 2\n    while True:\n        y = (x + number / x) / 2\n        if y == x:\n            return x\n        x = y\n",
        "num_ids": 55
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0.0\n    step = 0.01\n    \n    while True:\n        old_root = root\n        root = (root + step/2.0) / 2.0\n        if abs(old_root - root) < 1e-6:\n            break\n        \n    return root\n",
        "num_ids": 73
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = number\n    b = number - a/a\n    if b == 0:\n        return a\n    else:\n        return babylonian_squareroot(b)\n",
        "num_ids": 43
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return 'Wrong Number'\n    else:\n        if number == 0:\n            return number\n        else:\n            x = 1\n            while True:\n                if x**2 > number:\n                    return x\n                else:\n                    x += 1\n",
        "num_ids": 68
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #https://en.wikipedia.org/wiki/Babylonian_method#Iterative_method\n",
        "num_ids": 26
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    N = len(str)\n    dp = [[False for _ in range(N)] for _ in range(N)]\n    \n    for i in range(N): \n        dp[i][i] = True\n    \n    for i in range(N - 1, -1, -1): \n        dp[i][i] = True\n        for j in range(i + 1, N): \n            if str[i] == str[j]: \n                if j - i < 3: \n                    dp[i][j] = True\n                else: \n                    dp[i][j] = dp[i + 1][j - 1] \n            else: \n                dp[i][j] = False\n    \n    count = 0\n    for i in range(N): \n        if dp[0][i]: \n            count += 1\n    return count\n",
        "num_ids": 207
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #Step 1: Create 2D DP array and fill in first column with '0' and first row with '0'\n    dp = [[0 for x in range(len(str)+1)] for y in range(len(str)+1)]\n",
        "num_ids": 57
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def dp(str):\n        n = len(str)\n        dp_arr = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp_arr[i][i] = 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if str[i] == str[j]:\n                    dp_arr[i][j] = 2 + dp_arr[i+1][j-1]\n                else:\n                    dp_arr[i][j] = max(dp_arr[i+1][j], dp_arr[i][j-1])\n        return dp_arr[0][n-1]\n",
        "num_ids": 177
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == \"\":\n        return 0\n    else:\n        if str[0] == str[-1]:\n            return 2 + lps(str[1:-1])\n        else:\n            return max(lps(str[0:-1]), lps(str[1:]))\n",
        "num_ids": 70
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    dp=[1 for i in range(n)]\n    \n    if n==1:\n        return 1\n    for i in range(1,n):\n        for j in range(i):\n            if str[i]==str[j] and (i-j<=2 or dp[i-2]>=dp[i]):\n                dp[i]=2+dp[i-1]\n    return max(dp)\n",
        "num_ids": 111
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if len(str)<=1:\n        return len(str)\n    \n    dp = [[0 for i in range(len(str))] for i in range(len(str))]\n    for i in range(1,len(str)):\n        for j in range(i+1):\n            if str[i-1]==str[j-1]:\n                if i-j<=1:\n                    dp[i][j]=2\n                else:\n                    dp[i][j]=dp[i-1][j-1]+2\n            else:\n                dp[i][j]=max(dp[i][j-1],dp[i-1][j])\n    return dp[-1][-1]\n    \ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)<=1:\n        return len(str)\n    \n    dp = [[0 for i in range(len(str))] for i in range(len(str))]\n    for i in range(1,len(str)):\n        for j in range(i+1):\n            if str[i-1]==str[j-1]:\n                if i-j<=1:\n                    dp[i][j]=2\n                else:\n                    dp[i][j]=dp[i-1][j-1]+2\n            else:\n                dp[i][j]=max(dp[i-1][j],dp[i][j-1])\n    return dp[-1][-1]\n    \ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)<=1:\n        return len(str)\n    \n    dp = [[0 for i in range(len(str))] for i in range(len(str))]\n    for i in range(1,len(str)):\n        for j in range(i+1):\n            if str[i-1]==str[j-1]:\n                if i-j<=1:\n                    dp[i][j]=2\n                else:\n                    dp[i][j]=dp[i-1][j-1]+2\n            else:\n                dp[i][j]=max(dp[i-1][j],dp[i][j-1])\n    return dp[-1][-1]\n    \ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)<=1:\n        return len(str)\n    \n    dp = [[0 for i in range(len(str))] for i in range(len(str))]\n    for i in range(1,len(str)):\n        for j in range(i+1):\n            if str[i-1]==str[j-1]:\n                if i-j<=1:\n                    dp[i][j]=2\n                else:\n                    dp[i][j]=dp[i-1][j-1]+2\n            else:\n                dp[i][j]=max(dp[i-1][j],dp[i][j-1])\n    return dp[-1][-1]\n",
        "num_ids": 173
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    dp=[[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i]=1\n",
        "num_ids": 48
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # n = len(str)\n    # dp = [[0 for i in range(n)] for j in range(n)]\n    \n    # for i in range(n):\n    #     dp[i][i] = 1\n",
        "num_ids": 57
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lst = []\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            subs = str[i:j]\n            if subs==subs[::-1]:\n                lst.append(subs)\n    return len(lst)\n",
        "num_ids": 78
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 1: return 0\n    if len(str) == 1: return 1\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    # length of the string\n    for i in range(1, n):\n        dp[i][i] = 1\n    for i in range(1, n):\n        for j in range(i-1, -1, -1):\n            if str[j] == str[i]:\n                dp[j][i] = (1 + dp[j+1][i-1])\n            else:\n                dp[j][i] = max(dp[j+1][i], dp[j][i-1])\n    return dp[0][n-1]\n",
        "num_ids": 185
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int(n * (n + 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    return 1 + harmonic_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    return 1 / (n - 1) + harmonic_sum(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n / (n - 1)\n",
        "num_ids": 12
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #return the harmonic sum of n\n    return 1 / (1 / (n-1))\n",
        "num_ids": 24
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1 / i\n    print(sum)\n",
        "num_ids": 33
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += i\n    return harmonic_sum\n",
        "num_ids": 35
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def helper(n):\n        return 1 / (1 + n)\n    return sum(map(helper, range(n-1)))\n",
        "num_ids": 35
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n + 1) / 2\n",
        "num_ids": 14
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return set(array_nums1).intersection(set(array_nums2))\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n",
        "num_ids": 43
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return_list = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            return_list.append(array_nums1[i])\n    return return_list\n",
        "num_ids": 65
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_set1 = set(array_nums1)\n    array_set2 = set(array_nums2)\n    intersect = array_set1.intersection(array_set2)\n    return list(intersect)\n",
        "num_ids": 58
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a1,a2 = array_nums1,array_nums2\n    return (set(a1) & set(a2))\n",
        "num_ids": 36
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    # intersection = [ num for num in array_nums1 if num in array_nums2 ]\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n",
        "num_ids": 67
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result_array = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result_array.append(i)\n    return result_array\n",
        "num_ids": 47
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    x = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j:\n                if i not in x:\n                    x.append(i)\n",
        "num_ids": 52
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Approach 1:\n    # O(N) time | O(1) space\n    output = []\n    for num in array_nums1:\n        if num in array_nums2:\n            output.append(num)\n    return output\n",
        "num_ids": 61
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for x in array_nums1:\n        if x in array_nums2 and x not in intersection_array:\n            intersection_array.append(x)\n",
        "num_ids": 50
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n    \n    \n    \n    ",
        "num_ids": 47
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    while element in list:\n        list.insert(0,element)\n    return list\n",
        "num_ids": 23
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n",
        "num_ids": 49
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list = list\n    \n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 35
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n        return list\n",
        "num_ids": 28
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:1] + [element] + list[1:]\n",
        "num_ids": 19
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l = []\n    for i in range(len(list)):\n        l.append(list[i])\n        l.insert(i,element)\n    return l\n",
        "num_ids": 43
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    list_1 = []\n    for i in range(0,len(list)):\n        if list[i] == element:\n            list_1.append(element)\n            list_1.append(list[i])\n            for j in range(0,len(list)-1):\n                list_1.append(list[j])\n            break\n    else:\n        list_1.append(element)\n        for i in range(0,len(list)-1):\n            list_1.append(list[i])\n        list_1.append(list[len(list)-1])\n    return list_1\n    \ndef is_palindrome(list):\n    '''\n    Write a function that takes in a list and returns True if the elements of the list form a palindrome and False otherwise.\n    '''\n    \n    list_1 = []\n    for i in range(0,len(list)):\n        if list[i] == list[len(list)-i-1]:\n            list_1.append(list[i])\n        else:\n            return False\n    return True\n    \ndef get_count(list):\n    '''\n    Write a function that takes in a list of integers and returns the count of distinct integers in the list.\n    '''\n    \n    count_dic = {}\n    for i in range(0,len(list)):\n        if list[i] in count_dic:\n            count_dic[list[i]] += 1\n        else:\n            count_dic[list[i]] = 1\n    return len(count_dic)\n    \ndef get_key_value(dic):\n    '''\n    Write a function that takes in a dictionary and returns a list of tuples containing the key and value.\n    '''\n    \n    key_val = []\n    for i in dic:\n        key_val.append((i,dic[i]))\n    return key_val\n",
        "num_ids": 41
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0, element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        elif i!= len(list):\n            list.insert(i, element)\n",
        "num_ids": 52
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    temp=0\n    l=len(list)\n    while temp<l:\n        list.insert(temp,element)\n        temp=temp+1\n    return list\n",
        "num_ids": 43
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        \n        # Extracting the complex numbers\n        x = numbers[i].real\n        y = numbers[i].imag\n        \n        # Convert to polar coordinates\n        r = ((x**2)+(y**2))**0.5\n        theta = cmath.phase(x*y)\n        \n        # Printing the polar coordinates\n        print(r,theta)\n        \n    return r,theta\nprint('Enter complex numbers: ')\n",
        "num_ids": 120
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        if numbers[i].real == 0 and numbers[i].imag == 0:\n            numbers[i] = 0\n    print(numbers)\n    for i in range(len(numbers)):\n        if numbers[i].real!= 0:\n            numbers[i] = cmath.polar(numbers[i])\n        else:\n            numbers[i] = 0\n    print(numbers)\n",
        "num_ids": 114
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = 0\n    for i in range(0,len(numbers)):\n        a += numbers[i]*numbers[i]\n    a = a**0.5\n    b = abs(numbers[0])\n    if b == 0:\n        return \"Zero\"\n    elif numbers[0] == -1:\n        return \"Imaginary\"\n    else:\n        return \"Real\"\n",
        "num_ids": 99
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result=[]\n    for x in numbers:\n        if x==0:\n            result.append([0,0])\n        else:\n            angle = cmath.phase(x)\n            mag = cmath.abs(x)\n            result.append([mag,angle])\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    t = (complex(numbers[0], numbers[1]))\n    r = t.real\n    i = t.imag\n    x = r*cmath.cos(i*cmath.pi/180)\n    y = r*cmath.sin(i*cmath.pi/180)\n    return x,y\n    \ndef euler(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a python function to find the length of the line passing through the \n    3 points (x1,y1), (x2,y2) and (x3,y3). \n    '''\n    l1 = (x1 - x2)**2 + (y1 - y2)**2\n    l2 = (x1 - x3)**2 + (y1 - y3)**2\n    l3 = (x2 - x3)**2 + (y2 - y3)**2\n    if l1 > l2 and l1 > l3:\n        return l1**0.5\n    elif l2 > l1 and l2 > l3:\n        return l2**0.5\n    else:\n        return l3**0.5\n    \ndef minimum_distance(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a python function to find the minimum distance between the point \n    (x1,y1) and (x2,y2) and the other points(x3,y3 and x4,y4). \n    '''\n    x1, y1 = convert([x1, y1])\n    x2, y2 = convert([x2, y2])\n    x3, y3 = convert([x3, y3])\n    x4, y4 = convert([x4, y4])\n    l1 = euler(x1, y1, x2, y2, x3, y3)\n    l2 = euler(x1, y1, x4, y4, x2, y2)\n    l3 = euler(x3, y3, x4, y4, x1, y1)\n    l4 = euler(x1, y1, x2, y2, x3, y3)\n    return min(l1, l2, l3, l4)\n    \ndef  solve(x1, y1, x2, y2, x3, y3, x4, y4):\n    '''\n    Write a python function to find the length of the line passing through the \n    4 points (x1,y1), (x2,y2) and (x3,y3) and the other points(x4,y4). \n    '''\n    x1, y1 = convert([x1, y1])\n    x2, y2 = convert([x2, y2])\n    x3, y3 = convert([x3, y3])\n    x4, y4 = convert([x4, y4])\n    l1 = euler(x1, y1, x2, y2, x3, y3)\n    l2 = euler(x2, y2, x3, y3, x4, y4)\n    l3 = euler(x3, y3, x4, y4, x1, y1)\n    l4 = euler(x1, y1, x2, y2, x4, y4)\n    if l1 == l2 and l2 == l3 and l3 == l4:\n        return 0\n    elif l1 == l2 and l2!= l3 and l3 == l4:\n        return l1\n    elif l1 == l2 and l2 == l3 and l3!= l4:\n        return l2\n    elif l1 == l2 and l2!= l3 and l3!= l4:\n        return l3\n    elif l1 == l2 and l2!= l3 and l3!= l4:\n        return l4\n    elif l1!= l2 and l2 == l3 and l3 == l4:\n        return l1\n    elif l1!= l2 and l2!= l3 and l3 == l4:\n        return l2\n    elif l1!= l2 and l2!= l3 and l3!= l4:\n        return l4\n    \ndef meijer_J(n, a):\n    '''\n    Write a python function to find the value of n*(n+1)/2 which can be \n    represented as sum of squares of first n terms of Meijer's series.\n    '''\n    n1 = (n*(n+1))//2\n    return sum([i**2 for i in range(1,n+1)])\n    \ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor(GCD) of two\n    positive integers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    if a >= 0 and b >= 0:\n        if a!= b:\n            return gcd(b, a%b)\n        else:\n            return a\n    elif a < 0 and b < 0:\n        if a!= b:\n            return gcd(abs(a), abs(b))\n        else:\n            return -a if a < 0 else -b\n    \ndef mod_inverse(a, m):\n    '''\n    Write a python function to find the modular inverse of a number a modulus m. \n    '''\n    for i in range(1, m):\n        if (a * i) % m == 1:\n            return i\n        \ndef mod_exponentiation(a, b, m):\n    '''\n    Write a python function to find the modular exponentiation of a number a \n    and a base b modulo a positive integer m. \n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return mod_exponentiation(1, -b, m) * a % m\n    if b % 2 == 0:\n        return mod_exponentiation(a, b // 2, m)**2 % m\n    else:\n        return a * mod_exponentiation(a, b-1, m) % m\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the string s is a palindrome.\n    '''\n    return s == s[::-1]\n",
        "num_ids": 13
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(cmath.polar(num))\n",
        "num_ids": 21
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = []\n    for i in range(len(numbers)):\n        a.append([numbers[i].real,numbers[i].imag])\n    return a\n",
        "num_ids": 44
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for i in numbers:\n        tmp = abs(i)\n        mag = tmp\n        theta = cmath.phase(i)\n        polar.append((mag, theta))\n    return polar\n",
        "num_ids": 56
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a=numbers[0]\n    b=numbers[1]\n    c=numbers[2]\n    for i in range(2):\n        if(numbers[i]<0):\n            numbers[i] = numbers[i]+2*cmath.pi\n        else:\n            numbers[i] = numbers[i]-2*cmath.pi\n    for i in range(2):\n        numbers[i]=numbers[i]*cmath.sqrt(1-numbers[2]*numbers[2])\n    if(a==0):\n        numbers[0]=0\n    else:\n        numbers[0]=math.atan(b/a)\n    if(b==0):\n        numbers[1]=0\n    else:\n        numbers[1]=math.atan(cmath.sqrt(1-numbers[2]*numbers[2]))\n    return numbers\ndef convert_2(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    a=numbers[0]\n    b=numbers[1]\n    c=numbers[2]\n    if(a==0):\n        numbers[0]=0\n    else:\n        numbers[0]=a/math.sqrt(1-c*c)\n    if(b==0):\n        numbers[1]=0\n    else:\n        numbers[1]=b/math.sqrt(1-c*c)\n    numbers[2]=c\n    return numbers\ndef convert_3(numbers):\n    '''\n    Write a python function to convert polar coordinates to cartesian coordinates.\n    '''\n    a=numbers[0]\n    b=numbers[1]\n    c=numbers[2]\n    return(a*math.sqrt(1-c*c),b*math.sqrt(1-c*c),c)\ndef convert_4(numbers):\n    '''\n    Write a python function to convert cartesian coordinates to polar coordinates.\n    '''\n    a=numbers[0]\n    b=numbers[1]\n    c=numbers[2]\n    return(a*cmath.sqrt(1-c*c),b*cmath.sqrt(1-c*c),c)\ndef add(numbers1,numbers2):\n    '''\n    Write a python function to add two lists element-wise.\n    '''\n    if(len(numbers1)<len(numbers2)):\n        numbers1,numbers2=numbers2,numbers1\n    for i in range(len(numbers1)):\n        numbers1[i]=numbers1[i]+numbers2[i]\n    return numbers1\ndef subtract(numbers1,numbers2):\n    '''\n    Write a python function to subtract two lists element-wise.\n    '''\n    if(len(numbers1)<len(numbers2)):\n        numbers1,numbers2=numbers2,numbers1\n    for i in range(len(numbers1)):\n        numbers1[i]=numbers1[i]-numbers2[i]\n    return numbers1\ndef multiply(numbers1,numbers2):\n    '''\n    Write a python function to multiply two lists element-wise.\n    '''\n    if(len(numbers1)<len(numbers2)):\n        numbers1,numbers2=numbers2,numbers1\n    for i in range(len(numbers1)):\n        numbers1[i]=numbers1[i]*numbers2[i]\n    return numbers1\ndef divide(numbers1,numbers2):\n    '''\n    Write a python function to divide two lists element-wise.\n    '''\n    if(len(numbers1)<len(numbers2)):\n        numbers1,numbers2=numbers2,numbers1\n    for i in range(len(numbers1)):\n        numbers1[i]=numbers1[i]/numbers2[i]\n    return numbers1\ndef exponent(numbers1,numbers2):\n    '''\n    Write a python function to compute the exponential of a list.\n    '''\n    numbers1=list(map(math.log,numbers1))\n    return numbers1\ndef square_root(numbers1):\n    '''\n    Write a python function to compute the square root of a list element-wise.\n    '''\n    numbers1=list(map(math.sqrt,numbers1))\n    return numbers1\ndef inverse(numbers1):\n    '''\n    Write a python function to compute the inverse of a list element-wise.\n    '''\n    numbers1=list(map(cmath.exp,numbers1))\n    return numbers1\ndef reverse(numbers1):\n    '''\n    Write a python function to compute the reverse of a list element-wise.\n    '''\n    numbers1=list(map(cmath.exp,numbers1))\n    return numbers1\ndef negative(numbers1):\n    '''\n    Write a python function to compute the negative of a list element-wise.\n    '''\n    for i in range(len(numbers1)):\n        numbers1[i]=numbers1[i]*(-1)\n    return numbers1\ndef factorial(numbers1):\n    '''\n    Write a python function to compute the factorial of a list element-wise.\n    '''\n    if(numbers1[0]<0):\n        return(-1)\n    if(numbers1[0]==0):\n        return(1)\n    return(math.factorial(numbers1[0]))\ndef average(numbers1):\n    '''\n    Write a python function to compute the average of a list element-wise.\n    '''\n    return(sum(numbers1)/len(numbers1))\ndef average_exclude_none(numbers1):\n    '''\n    Write a python function to compute the average of a list element-wise.\n    '''\n    new_list=[]\n    if(numbers1[0]==None):\n        return(None)\n    else:\n        for i in range(len(numbers1)):\n            if(numbers1[i]!=None):\n                new_list.append(numbers1[i])\n        return(sum(new_list)/len(new_list))\ndef median(numbers1):\n    '''\n    Write a python function to compute the median of a list element-wise.\n    '''\n    new_list=[]\n    if(len(numbers1)%2==0):\n        for i in range(len(numbers1)):\n            if(numbers1[i]!=None):\n                new_list.append(numbers1[i])\n        return(sum(new_list)/len(new_list))\n    else:\n        for i in range(len(numbers1)):\n            if(numbers1[i]!=None):\n                new_list.append(numbers1[i])\n        new_list.sort()\n        return(new_list[int(len(new_list)/2)])\ndef maximum(numbers1):\n    '''\n    Write a python function to compute the maximum of a list element-wise.\n    '''\n    new_list=[]\n    if(len(numbers1)%2==0):\n        for i in range(len(numbers1)):\n            if(numbers1[i]!=None):\n                new_list.append(numbers1[i])\n        return(max(new_list))\n    else:\n        return(numbers1[0])\ndef minimum(numbers1):\n    '''\n    Write a python function to compute the minimum of a list element-wise.\n    '''\n    new_list=[]\n    if(len(numbers1)%2==0):\n        for i in range(len(numbers1)):\n            if(numbers1[i]!=None):\n                new_list.append(numbers1[i])\n        return(min(new_list))\n    else:\n        return(numbers1[0])\ndef mean(numbers1):\n    '''\n    Write a python function to compute the mean of a list element-wise.\n    '''",
        "num_ids": 1
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if (numbers == 0):\n        return complex(0, 0)\n    if (numbers == 1):\n        return complex(0, 1)\n    if (numbers == -1):\n        return complex(0, -1)\n    if (numbers == 2):\n        return complex(1, 0)\n    if (numbers == -2):\n        return complex(-1, 0)\n    if (numbers == 3):\n        return complex(1, 1)\n    if (numbers == -3):\n        return complex(-1, -1)\n    if (numbers == 4):\n        return complex(1, -1)\n    if (numbers == -4):\n        return complex(-1, 1)\n    if (numbers == 5):\n        return complex(1, -1)\n    if (numbers == -5):\n        return complex(-1, 1)\n    if (numbers == 6):\n        return complex(2, 0)\n    if (numbers == -6):\n        return complex(-2, 0)\n    if (numbers == 7):\n        return complex(2, 1)\n    if (numbers == -7):\n        return complex(-2, -1)\n    if (numbers == 8):\n        return complex(2, -1)\n    if (numbers == -8):\n        return complex(-2, 1)\n    if (numbers == 9):\n        return complex(1, -2)\n    if (numbers == -9):\n        return complex(-1, -2)\n    if (numbers == 10):\n        return complex(1, -2)\n    if (numbers == -10):\n        return complex(-1, 2)\n    if (numbers == 11):\n        return complex(2, -2)\n    if (numbers == -11):\n        return complex(-2, -2)\n    if (numbers == 12):\n        return complex(1, 2)\n    if (numbers == -12):\n        return complex(-1, 2)\n    if (numbers == 13):\n        return complex(1, 2)\n    if (numbers == -13):\n        return complex(-1, 1)\n    if (numbers == 14):\n        return complex(1, -1)\n    if (numbers == -14):\n        return complex(-1, -1)\n    if (numbers == 15):\n        return complex(2, -1)\n    if (numbers == -15):\n        return complex(-2, 1)\n    if (numbers == 16):\n        return complex(1, 1)\n    if (numbers == -16):\n        return complex(-1, -1)\n    if (numbers == 17):\n        return complex(2, 1)\n    if (numbers == -17):\n        return complex(-2, -1)\n    if (numbers == 18):\n        return complex(1, -1)\n    if (numbers == -18):\n        return complex(-1, 1)\n    if (numbers == 19):\n        return complex(2, -1)\n    if (numbers == -19):\n        return complex(-2, 1)\n    if (numbers == 20):\n        return complex(3, 0)\n    if (numbers == -20):\n        return complex(-3, 0)\n    if (numbers == 21):\n        return complex(2, 0)\n    if (numbers == -21):\n        return complex(-2, 0)\n    if (numbers == 22):\n        return complex(3, 1)\n    if (numbers == -22):\n        return complex(-3, -1)\n    if (numbers == 23):\n        return complex(2, 1)\n    if (numbers == -23):\n        return complex(-2, -1)\n    if (numbers == 24):\n        return complex(3, -1)\n    if (numbers == -24):\n        return complex(-3, 1)\n    if (numbers == 25):\n        return complex(1, 2)\n    if (numbers == -25):\n        return complex(-1, 2)\n    if (numbers == 26):\n        return complex(1, 1)\n    if (numbers == -26):\n        return complex(-1, -1)\n    if (numbers == 27):\n        return complex(1, -1)\n    if (numbers == -27):\n        return complex(-1, 1)\n    if (numbers == 28):\n        return complex(2, 2)\n    if (numbers == -28):\n        return complex(-2, 2)\n    if (numbers == 29):\n        return complex(2, 1)\n    if (numbers == -29):\n        return complex(-2, -1)\n    if (numbers == 30):\n        return complex(1, 2)\n    if (numbers == -30):\n        return complex(-1, 2)\n    if (numbers == 31):\n        return complex(1, 1)\n    if (numbers == -31):\n        return complex(-1, -1)\n    if (numbers == 32):\n        return complex(2, 1)\n    if (numbers == -32):\n        return complex(-2, -1)\n    if (numbers == 33):\n        return complex(1, -1)\n    if (numbers == -33):\n        return complex(-1, 1)\n    if (numbers == 34):\n        return complex(2, -1)\n    if (numbers == -34):\n        return complex(-2, 1)\n    if (numbers == 35):\n        return complex(3, 0)\n    if (numbers == -35):\n        return complex(-3, 0)\n    if (numbers == 36):\n        return complex(2, 0)\n    if (numbers == -36):\n        return complex(-2, 0)\n    if (numbers == 37):\n        return complex(3, 1)\n    if (numbers == -37):\n        return complex(-3, -1)\n    if (numbers == 38):\n        return complex(2, 1)\n    if (numbers == -38):\n        return complex(-2, -1)\n    if (numbers == 39):\n        return complex(3, -1)\n    if (numbers == -39):\n        return complex(-3, 1)\n    if (numbers == 40):\n        return complex(1, 2)\n    if (numbers == -40):\n        return complex(-1, 2)\n    if (numbers == 41):\n        return complex(1, 1)\n    if (numbers == -41):\n        return complex(-1, -1)\n    if (numbers == 42):\n        return complex(1, -1)\n    if (numbers == -42):\n        return complex(-1, 1)\n    if (numbers == 43):\n        return complex(2, 2)\n    if (numbers == -43):\n        return complex(-2, 2)\n    if (numbers == 44):\n        return complex(2, 1)\n    if (numbers == -44):\n        return complex(-2, -1)\n    if (numbers == 45):\n        return complex(1, 2)\n    if (numbers == -45):\n        return complex(-1, 2)\n    if (numbers == 46):\n        return complex(1, 1)\n    if (numbers == -46):\n        return complex(-1, -1)\n    if (numbers == 47):\n        return complex(1, -1)\n    if (numbers == -47):\n        return complex(-1, 1)\n    if (numbers == 48):\n        return complex(2, -1)\n    if (numbers == -48):\n        return complex(-2, 1)\n    if (numbers == 49):\n        return complex(1, -1)\n    if (numbers == -49):\n        return complex(-1, -1)\n    if (numbers == 50):\n        return complex(2, -1)\n    if (numbers == -50):\n        return complex(-2, -1)\n    if (numbers == 51):\n        return complex(3, 0)\n    if (numbers == -51):\n        return complex(-3, 0)\n    if (numbers == 52):\n        return complex(2, 0)\n    if (numbers == -52):\n        return complex(-2, 0)\n    if (numbers == 53):\n        return complex(3, 1)\n    if (numbers == -53):\n        retur",
        "num_ids": 2016
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) is int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if (isinstance(i,int)):\n            count = count+1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count=count+1\n    return count\nprint(count_integer([\"a\",1,2.0,3,\"a\",3]))\n",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count",
        "num_ids": 41
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for item in list1:\n        if isinstance(item,int):\n            result = result+1\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if (isinstance(i,int)):\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x,int)])\n",
        "num_ids": 22
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #result = []\n    #for i in range(0, l):\n    #    for j in range(0, l):\n    #        for k in range(0, l):\n    #            result.append(tuple([i, j, k]))\n    #return result\n",
        "num_ids": 69
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations(l, n))\n",
        "num_ids": 14
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return [combination for combination in combinations_with_replacement(l, n)]\n",
        "num_ids": 24
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    all_com = []\n    for i in range(len(l)):\n        all_com.append(l[i])\n    for i in range(len(l)):\n        for j in range(i,len(l)):\n            all_com.append(l[i] + l[j])\n    all_com.sort()\n    return all_com\n",
        "num_ids": 90
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = [1,2,3,4,5,6,7,8,9,10]\n    color_combinations = list(combinations_with_replacement(l, n))\n    return color_combinations\n",
        "num_ids": 55
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combo_list = []\n    for i in range(len(l)):\n        if len(l) == 1:\n            combo_list.append(l[0])\n        else:\n            l_new = l[i]\n            for j in range(len(l)):\n                if j!= i:\n                    l_new.append(l[j])\n                    l_new_list = l_new\n                    combo_list.append(l_new_list)\n    return combo_list\n",
        "num_ids": 123
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [[l[i], l[i + 1], l[i + 2]] for i in range(0, len(l) - 2)]\n",
        "num_ids": 36
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = l\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            combinations_colors = combinations_with_replacement(colors, n)\n            return combinations_colors\n",
        "num_ids": 64
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # initializing result\n    result = []\n",
        "num_ids": 13
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(map(lambda x: (x,)*n, combinations_with_replacement(l,n)))\n    # return [[] for i in range(n)]\n    # print(map(lambda x: (x,)*n, combinations_with_replacement(l,n)))\n    # for i in range(len(l)):\n    #     for j in range(n):\n    #         print(l[i])\n    #         print((l[i],)*n)\n    #         if j!= n-1:\n    #             print('->', end ='')\n    #         else:\n    #             print(l[i])\n    # return map(lambda x: (x,)*n, combinations_with_replacement(l,n))\n",
        "num_ids": 182
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    '''\n    Your function should return an integer representing the number of prime numbers less than the given number.\n    '''\n    '''\n    Example:\n    Input    Output\n    10    5\n    13    0\n    20    4\n    25    3\n    30    2\n    '''\n    '''\n    #Solution 1\n    def count_Primes(n):\n        count = 0\n        if n < 2:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            for i in range(3, n):\n                for j in range(2, i):\n                    if i % j == 0:\n                        break\n                else:\n                    count += 1\n        return count\n    '''\n    '''\n    #Solution 2\n    def count_Primes(n):\n        if n < 2:\n            return 0\n        count = 0\n        prime_num = []\n        for i in range(2, n):\n            prime_num.append(i)\n        for i in prime_num:\n            if i < n:\n                if i not in prime_num:\n                    continue\n                else:\n                    for j in range(i + i, n, i):\n                        prime_num.remove(j)\n            else:\n                count += 1\n        return count\n    '''\n    '''\n    #Solution 3\n    def count_Primes(n):\n        if n < 2:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            prime_num = []\n            for i in range(2, n):\n                prime_num.append(i)\n            for i in range(n):\n                if i not in prime_num:\n                    continue\n                else:\n                    for j in range(i+i, n, i):\n                        prime_num.remove(j)\n            return len(prime_num)\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2]\n    for i in range(3,n+1,2):\n        flag = True\n        for j in range(2,i):\n            if(i%j == 0):\n                flag = False\n                break\n        if(flag):\n            primes.append(i)\n",
        "num_ids": 74
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    primes = 0\n    for i in range(2,n):\n        if n % i == 0:\n            primes = primes + 1\n    return primes\n",
        "num_ids": 53
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    '''\n    The idea is to check if the given number is divisible by any of the numbers smaller than it or not.\n    If the given number is divisible by a number smaller than it, it is not a prime number.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # count = 0\n    # n = int(input(\"Enter the number\"))\n    # if n >= 1:\n    #     count = 0\n    #     for i in range(2, n):\n    #         if n % i == 0:\n    #             count += 1\n    #             break\n    #     return count\n    # else:\n    #     print(\"Please enter number greater than 1\")\n    #     return -1\n",
        "num_ids": 103
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    import math\n",
        "num_ids": 8
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    assert type(n)==int, f\"{n} is not of type int\"\n",
        "num_ids": 23
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n):\n        for j in range(2,n//i):\n            if i * j == n:\n                count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if(n <= 0):\n        print(\"Invalid input.\")\n        return\n    else:\n        count = 0\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if(i * j > n):\n                    break\n                else:\n                    if(i!= j and (i == 1 or j == 1)):\n                        print(i, \" * \", j, \" = \", i * j)\n                        count += 1\n                    elif(i == j):\n                        print(i, \" * \", j, \" = \", i * j)\n                        count += 1\n    return count\n",
        "num_ids": 155
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = 0\n    for i in range(2, n):\n        if n % i == 0:\n            prime_nums = prime_nums + 1\n    return prime_nums\n",
        "num_ids": 50
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swap = b,a\n    return swap\n",
        "num_ids": 14
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if type(a)!= int or type(b)!= int:\n        raise TypeError\n    if a < 0 or b < 0:\n        raise ValueError\n    return b,a\n",
        "num_ids": 46
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # return b,a\n    return a,b\n    # return a,b\n    # return b,a\n    # return b,a\n    # return (b,a)\n    # return (a,b)\n    # return (a,b,a,b)\n    # return a,b\n    # return b,a\n    # return (b,a)\n    # return (a,b)\n    # return (a,b,a,b)\n",
        "num_ids": 112
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \nprint(swap_numbers(5,3))\n",
        "num_ids": 25
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    if tuple1[0] <= tuple2[0]:\n        tuple1, tuple2 = tuple2, tuple1\n    if tuple1[1] <= tuple2[1]:\n        tuple1, tuple2 = tuple2, tuple1\n    if tuple1[2] <= tuple2[2]:\n        tuple1, tuple2 = tuple2, tuple1\n    return tuple1, tuple2\n",
        "num_ids": 116
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def max_tuple(numbers):\n        print('Original: ', numbers)\n        max_val = max(numbers)\n        print('Max value: ', max_val)\n        numbers.remove(max_val)\n        print('Left over: ', numbers)\n        min_val = min(numbers)\n        print('Min value: ', min_val)\n        max_val = max(numbers)\n        print('Max value: ', max_val)\n        return max_val, min_val\n    max_val, min_val = max_tuple(test_tup1)\n    return test_tup2[0] + max_val, test_tup2[1] + min_val\n",
        "num_ids": 171
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup_one = test_tup1\n    tup_two = test_tup2\n    max_index = 0\n    max_value = 0\n",
        "num_ids": 40
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for x, y in zip(test_tup1, test_tup2):\n        if x > y:\n            max_tup = (x, y)\n        else:\n            max_tup = (y, x)\n    return max_tup\n",
        "num_ids": 73
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0, 0)\n    # add the numbers\n    for num1 in test_tup1:\n        for num2 in test_tup2:\n            if num1 + num2 > max_tup[1]:\n                max_tup = (num1, num2)\n    return max_tup\n",
        "num_ids": 81
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Declare an array\n    arr1 = list(test_tup1)\n    arr2 = list(test_tup2)\n    \n    # Swap the values of the two tuples\n    arr1, arr2 = arr2, arr1\n    \n    # Convert the array to tuple\n    test_tup1 = tuple(arr1)\n    test_tup2 = tuple(arr2)\n    \n    return test_tup1, test_tup2\n    ",
        "num_ids": 114
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    return max1, max2\n",
        "num_ids": 36
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 37
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] >= test_tup2[0]:\n        max_elem = test_tup1\n    else:\n        max_elem = test_tup2\n    return max_elem\n",
        "num_ids": 57
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    a = 5\n    b = 7\n    for i in range(5, n):\n        c = (a+b) % 2\n        if c == 0:\n            a = (a+b)//2\n        else:\n            b = (a+b)//2\n    return (a+b)//2\n",
        "num_ids": 121
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n == 1):\n        return 2\n    if (n == 2):\n        return 3\n    if (n == 3):\n        return 5\n    num = n\n    prime = 5\n    while (num % prime!= 0):\n        prime = prime + 1\n    if (prime > n):\n        return prime\n    prime = prime + 1\n    while prime <= n and num > 1:\n        rem = num % prime\n        if (rem == 0):\n            return prime\n        else:\n            num = num - rem\n            prime = prime + 1\n    return prime\n",
        "num_ids": 137
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        def has_divisor(number):\n            for i in range(2,int(number**0.5)+1):\n                if number%i == 0:\n                    return True\n            return False\n        prime = 1\n        i = 0\n        while i < n:\n            if has_divisor(prime):\n                i += 1\n            else:\n                prime += 1\n        return prime\n    \nprint(newman_prime(0))\nprint(newman_prime(1))\nprint(newman_prime(10))\n",
        "num_ids": 142
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3]\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    for i in range(4,n+1):\n        p = primes[-1]\n        j = 0\n        while primes[j] <= p**0.5 and j < len(primes)-1:\n            if p % primes[j] == 0:\n                p = primes[j]*p\n                break\n            j += 1\n        primes.append(p)\n    return primes[-1]\n",
        "num_ids": 149
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def get_next(n):\n        '''\n        Calculate the nth next prime number.\n        '''\n        count = 0\n        while n > primes[count]:\n            count += 1\n        return primes[count]\n    return get_next(n)\n",
        "num_ids": 39
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\n    while len(primes) < n:\n        p = primes[-1]\n        for i in range(1, 10):\n            x = p + 2*i\n            if x in primes:\n                primes.append(x)\n            else:\n                break\n    return primes[n - 1]\n    \ndef zeroth_root(n):\n    '''\n    Write a function to find the nth root of unity.\n    '''\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\n    while len(primes) < n:\n        p = primes[-1]\n        for i in range(1, 10):\n            x = p + 2*i\n            if x in primes:\n                primes.append(x)\n            else:\n                break\n    for i in range(2, n):\n        for j in range(2, n):\n            if i**j == 1:\n                return i\n",
        "num_ids": 138
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    \n    # this is the condition to run in while loop\n    i = 2\n    while n-1!= i:\n        # this is the condition to run in while loop\n        if n % i!= 0:\n            i += 1\n        else:\n            n -= i\n            \n    # to print the answer\n    print(i)\n",
        "num_ids": 90
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    x = 1\n    primes = []\n    while True:\n        if not n % 2:\n            n = n // 2\n            primes.append(x)\n            x = x + 1\n        else:\n            x = x + 1\n        if len(primes) > n:\n            return primes[n - 1]\n",
        "num_ids": 81
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(x):\n        return x == 2 or (x > 2 and (x % 2) == 0)\n    def find_next_prime(x):\n        prime = x + 2\n        while not is_prime(prime):\n            prime += 2\n        return prime\n    prime = find_next_prime(n)\n    if n == 1:\n        return prime\n    else:\n        return newman_prime(find_next_prime(prime))\n",
        "num_ids": 111
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    \n    if n < len(primes): \n        return primes[n - 1]\n",
        "num_ids": 446
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1], test_tup1[2] / test_tup2[2])\n",
        "num_ids": 57
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x,y: x//y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return (list(map(lambda x, y: x / y, test_tup1, test_tup2)))\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1\n",
        "num_ids": 54
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(element1 / element2 if element2!= 0 else element1 for element1, element2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 42
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup1 = ()\n    tup2 = ()\n    for i in range(len(test_tup1)):\n        tup1 = tup1 + (int(test_tup1[i]/test_tup2[i]), )\n        tup2 = tup2 + (int(test_tup2[i]/test_tup1[i]), )\n    return tup1, tup2\n",
        "num_ids": 104
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = list(test_tup1)\n    new_tup2 = list(test_tup2)\n    new_tup1 = tuple(new_tup1)\n    new_tup2 = tuple(new_tup2)\n",
        "num_ids": 66
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0],test_tup1[1]/test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    assert len(test_tup1) > 0\n    assert all([isinstance(i, int) or isinstance(i, float) for i in test_tup1])\n    assert all([isinstance(i, int) or isinstance(i, float) for i in test_tup2])\n    def div_func(i, j):\n        return i/j\n    return tuple(map(div_func, test_tup1, test_tup2))\n",
        "num_ids": 133
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] = 0\n        else:\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1\n    \ndef partition(test_list, low, high):\n    '''\n    Write a function that takes a list and an index range as input and partitions the list into sublists according to the input range.\n    '''\n    if high > low:\n        mid = low + (high - low) // 2\n        partition(test_list, low, mid)\n        partition(test_list, mid + 1, high)\n        test_list[mid], test_list[mid + 1] = test_list[mid + 1], test_list[mid]\n    return test_list\n",
        "num_ids": 87
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_1 = []\n    list1_2 = []\n    for x in range(0, len(list1), 2):\n        list1_1.append(list1[x])\n        list1_2.append(list1[x+1])\n    return list1_1, list1_2\n",
        "num_ids": 76
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"The list must be larger than the split size\"\n    else:\n        return list1[0:L], list1[L:]\n",
        "num_ids": 46
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    i = 0\n    list_part_1 = []\n    list_part_2 = []\n    for i in range(len(list1)):\n        if i < L:\n            list_part_1.append(list1[i])\n        else:\n            list_part_2.append(list1[i])\n    return (list_part_1, list_part_2)\n",
        "num_ids": 95
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = list1\n    b = a[L:]\n    c = a[:L]\n    return(c,b)\n",
        "num_ids": 33
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "num_ids": 37
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    x = len(list1)\n    return (list1[0:x-L], list1[x-L:])\n",
        "num_ids": 38
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0 or L > len(list1):\n        raise ValueError('L must be in the range of 1 and the length of the list')\n    part1 = list1[0:L]\n    part2 = list1[L:]\n    return part1, part2\n",
        "num_ids": 67
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return ([list1[:L], list1[L:]])\n",
        "num_ids": 19
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    temp_list = []\n    split_list = []\n",
        "num_ids": 16
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    start = 0\n    end = L\n    mid = math.floor(len(list1)/2)\n    return list1[:mid], list1[mid:]\n",
        "num_ids": 41
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Dog's age in dog's years is the sum of the following:\n    # how old is the dog in dog's years minus how old is the dog in dog's\n    # full years.\n    # For example, a dog's age in dog's years is how old the dog is\n    # minus how old the dog is in dog's full years.\n    # The values in years_full_dog and years_since_last_birth\n    # will always be positive numbers so you can just add them.\n    # After the calculation, print out the resulting age in dog's full years.\n    \n    years_full_dog = 10 * h_age\n    years_since_last_birth = 15 - h_age\n    print(\"\\n\" + \"Dog's age in dog's years is \" + str(years_full_dog) + \" years.\")\n    print(\"Dog's age in dog's full years is \" + str(years_since_last_birth) + \" years.\")\n",
        "num_ids": 223
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age)!= int and type(h_age)!= float:\n        print(\"Warning: Type for 'h_age' variable is not 'int' or 'float'\")\n        return None\n    elif h_age < 0:\n        print(\"Warning: Value for 'h_age' variable is less than 0\")\n        return None\n    else:\n        return h_age * 7\n",
        "num_ids": 96
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7.0\n    return int(age)\n",
        "num_ids": 20
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n    \n    \n    \n    \ndef dog_weight(dog_lbs, dog_age):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age)\n    \n    \n    \n    \ndef dog_weight_in_kg(dog_lbs, dog_age):\n    '''\n    Write a function to calculate a dog's weight in kilograms.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) / 2.2\n    \n    \n    \n    \ndef dog_weight_diff(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog weight between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_height(h_in):\n    '''\n    Write a function to calculate a dog's height in inches.\n    '''\n    return h_in * 2.54\n    \n    \n    \ndef dog_height_in_cm(h_in):\n    '''\n    Write a function to calculate a dog's height in centimeters.\n    '''\n    return h_in * 2.54 / 10\n    \n    \n    \n    \ndef dog_age_diff(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_2(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_3(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_4(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_5(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_6(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_7(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_8(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_9(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_10(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_11(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_12(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_13(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_14(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_15(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4.7 * pow(10, dog_age) - dog_lbs_2 * 4.7 * pow(10, dog_age_2)\n    \n    \n    \ndef dog_age_diff_16(dog_lbs, dog_age, dog_lbs_2, dog_age_2):\n    '''\n    Write a function to calculate the difference in dog age between two\n    dogs with the same characteristics.\n    '''\n    return dog_lbs * 4",
        "num_ids": 9
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return str(float(h_age)/7.0) + \" dog's years\"\n",
        "num_ids": 23
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age\n",
        "num_ids": 15
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7.0)\n",
        "num_ids": 14
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(0,len(S),step):\n        a.append(S[i])\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    for i in range(0, len(S), step):\n        return_list.append(S[i:i+step])\n    return return_list\n",
        "num_ids": 46
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    new_list = []\n    \n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    \n    return new_list\n    \ndef list_split_no_repetition(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    new_list = []\n    \n    i = 0\n    while i < len(S):\n        if S.count(S[i]) == 1:\n            new_list.append(S[i:i+step])\n            i += step\n        else:\n            i += 1\n    \n    return new_list\n    \ndef list_split_repetition(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    new_list = []\n    \n    i = 0\n    while i < len(S):\n        if S.count(S[i]) > 1:\n            new_list.append(S[i:i+step])\n            i += step\n        else:\n            i += 1\n    \n    return new_list\n",
        "num_ids": 79
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    newList = []\n    \n    for i in range(0, len(S), step):\n        newList.append(S[i:i+step])\n    \n    return newList\n",
        "num_ids": 49
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    l = list(S)\n    k = 0\n    while len(l) > 0:\n        new_list.append(l[:step])\n        l = l[step:]\n    return new_list\n",
        "num_ids": 59
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #solution\n    #surface area = 6 * l * l\n    #side length = 2 * l * l\n    # = (6 * l * l) - (2 * l * l * l)\n    # = (6 * l * l) - 2 * ((l * l)^2)\n    return 6 * l * l - 2 * ((l * l) ** 2)\n",
        "num_ids": 91
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l**2*6\n    return(area)\n",
        "num_ids": 17
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l == 1:\n        return 1\n    return l * (l - 1) * (l - 2) / 6\n",
        "num_ids": 31
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l**2\n    b = 2*l\n    return a + b + b\n",
        "num_ids": 24
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*6\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*pi*r*h\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n    # Write a function to find the lateral surface area of a pyramid given the base and height.\n    \ndef main():\n    '''\n    Write a function to check if a triangle is a right-angled triangle.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    p4 = Point(1, 0)\n    p5 = Point(0, 1)\n    p6 = Point(-1, 0)\n    points = [p1, p2, p3, p4, p5, p6]\n    points.sort()\n    print(points)\n    # Write a function to find the lowest common multiple of two numbers.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its height and base.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    p4 = Point(1, 0)\n    p5 = Point(0, 1)\n    p6 = Point(-1, 0)\n    points = [p1, p2, p3, p4, p5, p6]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its height and base.\n    \n    '''\n    Write a function to find the area of a parallelogram given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    p4 = Point(1, 0)\n    p5 = Point(0, 1)\n    p6 = Point(-1, 0)\n    points = [p1, p2, p3, p4, p5, p6]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a parallelogram given its base and height.\n    \n    '''\n    Write a function to find the area of a parallelogram given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    p4 = Point(1, 0)\n    p5 = Point(0, 1)\n    p6 = Point(-1, 0)\n    points = [p1, p2, p3, p4, p5, p6]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a parallelogram given its base and height.\n    \n    '''\n    Write a function to find the area of a triangle given its side length.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a triangle given its side length.\n    \n    '''\n    Write a function to find the area of a triangle given its side length.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a triangle given its side length.\n    \n    '''\n    Write a function to find the area of a triangle given its side length.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a triangle given its side length.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its base and height.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its base and height.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its base and height.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its base and height.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its base and height.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its base and height.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its base and height.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its base and height.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1, 1)\n    p2 = Point(1, 1)\n    p3 = Point(0, -1)\n    points = [p1, p2, p3]\n    points.sort()\n    print(points)\n    # Write a function to find the area of a right-angled triangle given its base and height.\n    \n    '''\n    Write a function to find the area of a right-angled triangle given its base and height.\n    '''\n    p1 = Point(-1",
        "num_ids": 9
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Length of the cube\n    L = l\n    # Subdivide the cube into four equal triangles, which are the 8 corners of the cube\n    #L/3 = L*1/3\n    L = L/3\n    #Calculate the midpoint of each corner\n    A = L/2\n    # Recalculate the midpoint of each corner to calculate the length of each side\n    B = A*2\n    C = A*2\n    D = A*2\n    E = A*2\n    F = A*2\n    G = A*2\n    H = A*2\n    I = A*2\n    # Since we are using a square, the total lateral surface area should be the same for each side\n    # of the cube\n    return L*L\n",
        "num_ids": 183
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * 6\n",
        "num_ids": 8
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n,2):\n        sum += i**2\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    res = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            res += i**2\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            sum += i**2\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            sum += i ** 2\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total=0\n    for i in range(n):\n        total+=i**2\n    return total\n",
        "num_ids": 27
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    square_sum = 0\n    for i in range(n):\n        square_sum += (i*i) % 2\n    return square_sum\n",
        "num_ids": 37
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = n+1\n    x = 0\n    for i in range(1,n):\n        x = x+pow(i,2)\n    print(x)\nsquare_Sum(5)\n",
        "num_ids": 51
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Logic\n    # Check if n is odd\n    # if n is odd, then you can use the sum of the squares of the odd natural numbers to calculate the square sum\n    # if n is even, then you need to add the squares of the even natural numbers together and take the sum of that.\n    if n % 2!= 0:\n        odd_numbers = n - 1\n        odd_squares = 1\n        #Loop over odd_numbers and add the squares to odd_squares\n        # when looping, also keep track of the previous number that was added\n        for num in range(1,odd_numbers+1):\n            odd_squares = odd_squares + num**2\n            odd_numbers = odd_numbers - 1\n        return odd_squares\n    else:\n        even_numbers = n - 1\n        even_squares = 0\n        for num in range(1,even_numbers+1):\n            even_squares = even_squares + num**2\n        return even_squares\n",
        "num_ids": 243
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (1 + (n-1) * 5) // 2\n",
        "num_ids": 18
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 0\n    for i in range(1, n + 1):\n        star_num += (i * (i + 1)) / 2\n    return star_num\n",
        "num_ids": 44
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (find_star_num(n-1) + find_star_num(n-2))\n",
        "num_ids": 54
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    star_nums = {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10, 11:11, 12:12, 13:13, 14:14, 15:15, 16:16, 17:17, 18:18, 19:19, 20:20, 21:21, 22:22, 23:23, 24:24, 25:25, 26:26, 27:27, 28:28, 29:29, 30:30, 31:31, 32:32, 33:33, 34:34, 35:35, 36:36, 37:37, 38:38, 39:39, 40:40, 41:41, 42:42, 43:43, 44:44, 45:45, 46:46, 47:47, 48:48, 49:49, 50:50, 51:51, 52:52, 53:53, 54:54, 55:55, 56:56, 57:57, 58:58, 59:59, 60:60, 61:61, 62:62, 63:63, 64:64, 65:65, 66:66, 67:67, 68:68, 69:69, 70:70, 71:71, 72:72, 73:73, 74:74, 75:75, 76:76, 77:77, 78:78, 79:79, 80:80, 81:81, 82:82, 83:83, 84:84, 85:85, 86:86, 87:87, 88:88, 89:89, 90:90, 91:91, 92:92, 93:93, 94:94, 95:95, 96:96, 97:97, 98:98, 99:99, 100:100, 101:101, 102:102, 103:103, 104:104, 105:105, 106:106, 107:107, 108:108, 109:109, 110:110, 111:111, 112:112, 113:113, 114:114, 115:115, 116:116, 117:117, 118:118, 119:119, 120:120, 121:121, 122:122, 123:123, 124:124, 125:125, 126:126, 127:127, 128:128, 129:129, 130:130, 131:131, 132:132, 133:133, 134:134, 135:135, 136:136, 137:137, 138:138, 139:139, 140:140, 141:141, 142:142, 143:143, 144:144, 145:145, 146:146, 147:147, 148:148, 149:149, 150:150, 151:151, 152:152, 153:153, 154:154, 155:155, 156:156, 157:157, 158:158, 159:159, 160:160, 161:161, 162:162, 163:163, 164:164, 165:165, 166:166, 167:167, 168:168, 169:169, 170:170, 171:171, 172:172, 173:173, 174:174, 175:175, 176:176, 177:177, 178:178, 179:179, 180:180, 181:181, 182:182, 183:183, 184:184, 185:185, 186:186, 187:187, 188:188, 189:189, 190:190, 191:191, 192:192, 193:193, 194:194, 195:195, 196:196, 197:197, 198:198, 199:199, 200:200, 201:201, 202:202, 203:203, 204:204, 205:205, 206:206, 207:207, 208:208, 209:209, 210:210, 211:211, 212:212, 213:213, 214:214, 215:215, 216:216, 217:217, 218:218, 219:219, 220:220, 221:221, 222:222, 223:223, 224:224, 225:225, 226:226, 227:227, 228:228, 229:229, 230:230, 231:231, 232:232, 233:233, 234:234, 235:235, 236:236, 237:237, 238:238, 239:239, 240:240, 241:241, 242:242, 243:243, 244:244, 245:245, 246:246, 247:247, 248:248, 249:249, 250:250, 251:251, 252:252, 253:253, 254:254, 255:255}\n",
        "num_ids": 1032
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*(n-1)/2 + find_star_num(n-1)\n",
        "num_ids": 39
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return (n*(n+1))//2\n    else:\n        return ((n*(n+1))//2)+1\n",
        "num_ids": 41
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Write your code here\n    x = 1\n    while (x<=n):\n        print(x, end ='')\n        x+=1\n    print()\n",
        "num_ids": 42
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    star_num = 0\n    \n    while (n > 1):\n        star_num += 1\n        n = n/3\n        \n    return star_num\n",
        "num_ids": 43
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # stars: star1*star2*...*starn\n    stars = 1\n    while n > 1:\n        stars *= n\n        n -= 1\n    return stars\n",
        "num_ids": 44
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) > 127:\n        return int(ord(k)-32)\n    else:\n        return ord(k)\n",
        "num_ids": 34
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(",
        "num_ids": 6
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_value_from_index(index):\n    '''\n    Write a function to get the ascii value of a character from an index.\n    '''\n    return ord(chr(index))\ndef ascii_value_from_name(string):\n    '''\n    Write a function to get the ascii value of a string of characters.\n    '''\n    return int(string)\ndef ascii_value_to_index(value):\n    '''\n    Write a function to get the index of a character in a string of characters.\n    '''\n    return int(value)\ndef is_int(string):\n    '''\n    Write a function to check if a string is an integer.\n    '''\n    return type(int(string)) == int\ndef is_float(string):\n    '''\n    Write a function to check if a string is a float.\n    '''\n    return type(float(string)) == float\ndef is_boolean(string):\n    '''\n    Write a function to check if a string is a boolean.\n    '''\n    return type(bool(string)) == bool\ndef is_list(string):\n    '''\n    Write a function to check if a string is a list.\n    '''\n    return type(string) == list\ndef is_dict(string):\n    '''\n    Write a function to check if a string is a dictionary.\n    '''\n    return type(string) == dict\ndef is_string(string):\n    '''\n    Write a function to check if a string is a string.\n    '''\n    return type(string) == str\ndef is_tuple(string):\n    '''\n    Write a function to check if a string is a tuple.\n    '''\n    return type(string) == tuple\ndef is_function(string):\n    '''\n    Write a function to check if a string is a function.\n    '''\n    return callable(string)\ndef is_set(string):\n    '''\n    Write a function to check if a string is a set.\n    '''\n    return type(string) == set\ndef is_none(string):\n    '''\n    Write a function to check if a string is None.\n    '''\n    return string == None\ndef is_none_or_empty(string):\n    '''\n    Write a function to check if a string is None or empty.\n    '''\n    return string == None or len(string) == 0\ndef is_in_range(string, min_val, max_val):\n    '''\n    Write a function to check if a string is in range.\n    '''\n    return min_val <= int(string) <= max_val\ndef get_first_from_file_path(file_path):\n    '''\n    Write a function to get the first line of a file.\n    '''\n    with open(file_path) as f:\n        return f.readline()\ndef get_first_from_file(file_path):\n    '''\n    Write a function to get the first line of a file.\n    '''\n    with open(file_path, 'r') as f:\n        return f.readline()\ndef get_first_from_file_data(file_data):\n    '''\n    Write a function to get the first line of a file.\n    '''\n    with open(file_data, 'r') as f:\n        return f.readline()\ndef get_first_from_file_as_list(file_path):\n    '''\n    Write a function to get the first line of a file.\n    '''\n    with open(file_path) as f:\n        return f.readlines()\ndef get_first_from_file_as_list_data(file_data):\n    '''\n    Write a function to get the first line of a file.\n    '''\n    with open(file_data) as f:\n        return f.readlines()\ndef get_line_count(file_path):\n    '''\n    Write a function to get the number of lines in a file.\n    '''\n    with open(file_path) as f:\n        return len(f.readlines())\ndef get_line_count_data(file_data):\n    '''\n    Write a function to get the number of lines in a file.\n    '''\n    with open(file_data) as f:\n        return len(f.readlines())\ndef get_second_last_line(file_path):\n    '''\n    Write a function to get the second last line of a file.\n    '''\n    with open(file_path) as f:\n        return f.readlines()[-2]\ndef get_second_last_line_data(file_data):\n    '''\n    Write a function to get the second last line of a file.\n    '''\n    with open(file_data) as f:\n        return f.readlines()[-2]\ndef get_second_line_of_file(file_path):\n    '''\n    Write a function to get the second line of a file.\n    '''\n    with open(file_path) as f:\n        return f.readlines()[1]\ndef get_second_line_of_file_data(file_data):\n    '''\n    Write a function to get the second line of a file.\n    '''\n    with open(file_data) as f:\n        return f.readlines()[1]\ndef get_line_of_file(file_path, line_number):\n    '''\n    Write a function to get a line of a file.\n    '''\n    with open(file_path) as f:\n        return f.readlines()[line_number]\ndef get_line_of_file_data(file_data, line_number):\n    '''\n    Write a function to get a line of a file.\n    '''\n    with open(file_data) as f:\n        return f.readlines()[line_number]\ndef get_line_before_last_line(file_path):\n    '''\n    Write a function to get the line before the last line of a file.\n    '''\n    with open(file_path) as f:\n        return f.readlines()[-2]\ndef get_line_before_last_line_data(file_data):\n    '''\n    Write a function to get the line before the last line of a file.\n    '''\n    with open(file_data) as f:\n        return f.readlines()[-2]\ndef get_line_before_line_number(file_path, line_number):\n    '''\n    Write a function to get the line before a given line number of a file.\n    '''\n    with open(file_path) as f:\n        return f.readlines()[line_number - 1]\ndef get_line_before_line_number_data(file_data, line_number):\n    '''\n    Write a function to get the line before a given line number of a file.\n    '''\n    with open(file_data) as f:\n        return f.readlines()[line_number - 1]\ndef get_line_after_line_number(file_path, line_number):\n    '''\n    Write a function to get the line after a given line number of a file.\n    '''\n    with open(file_path) as f:\n        return f.readlines()[line_number + 1]\ndef get_line_after_line_number_data(file_data, line_number):\n    '''\n    Write a function to get the line after a given line number of a file.\n    '''\n    with open(file_data) as f:\n        return f.readlines()[line_number + 1]\ndef get_file_lines(file_path):\n    '''\n    Write a function to get the file lines of a file.\n    '''\n    with open(file_path) as f:\n        return f.readlines()\ndef get_file_lines_data(file_data):\n    '''\n    Write a function to get the file lines of a file.\n    '''\n    with open(file_data) as f:\n        return f.readlines()\ndef get_last_line(file_path):\n    '''\n    Write a function to get the last line of a file.\n    '''",
        "num_ids": 1
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    print(ord(k))\n",
        "num_ids": 10
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            total_even += arr[i]\n    return total_even\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 46
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_index = 0\n    for i in range(0, len(arr)):\n        if(arr[i] % 2 == 0 and i % 2 == 0):\n            sum_even += arr[i]\n            sum_even_index = i\n    return sum_even, sum_even_index\n",
        "num_ids": 82
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            sum += arr[i]\n    print(sum)\n",
        "num_ids": 42
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even=0\n    even_index=0\n    while(even_index<len(arr)):\n        if(arr[even_index]%2==0):\n            sum_even+=arr[even_index]\n        even_index+=2\n    return sum_even\n",
        "num_ids": 69
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    length = len(arr)\n    if length > 1:\n        for i in range(length):\n            if i % 2 == 0:\n                if arr[i] % 2 == 0:\n                    sum += arr[i]\n    else:\n        sum = arr[0]\n    return sum\n",
        "num_ids": 76
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    print(even)\n    print(odd)\n    \n",
        "num_ids": 56
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n",
        "num_ids": 16
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #sum_even = 0\n    #for i in range(len(arr)):\n    #    if arr[i] % 2 == 0:\n    #        sum_even += arr[i]\n    #return sum_even\n    return sum(arr[::2])\n    \nprint(\"Pass\" if  (42 == sum_even_and_even_index([2,3,4])) else \"Fail\")\nprint(\"Pass\" if  (42 == sum_even_and_even_index([2,3,5])) else \"Fail\")\nprint(\"Pass\" if  (29 == sum_even_and_even_index([3,5,7,9,11,13])) else \"Fail\")\n",
        "num_ids": 167
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            sum += arr[i]\n",
        "num_ids": 36
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += (i**5)\n    return sum\nprint(even_Power_Sum(3))\n",
        "num_ids": 49
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return (n**5)+(even_Power_Sum(n-1))\n        \n",
        "num_ids": 38
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum = sum + i**5\n    return sum\n    \nprint(even_Power_Sum(100))\n",
        "num_ids": 55
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 1:\n        return 0\n    elif n >= 5:\n        return 1\n    else:\n        return 5 * even_Power_Sum(n-1)\n",
        "num_ids": 44
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n+1)])\n    \neven_Power_Sum(10)\n",
        "num_ids": 31
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n > 0: \n        n_sum = 0\n        for i in range(1,n+1):\n            if i%2 == 0:\n                n_sum = n_sum + i**5\n        return n_sum\n    else: \n        print(\"Please enter a positive integer\")\n",
        "num_ids": 73
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<0:\n        return 0\n    i=0\n    while i<n:\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n        i=i+1\n    ",
        "num_ids": 2000
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n    \nprint(even_Power_Sum(10))\n",
        "num_ids": 49
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 0\n    sum = 0\n    while i <= n:\n        sum += i**5\n        i += 1\n    return sum\nprint(\"Power_Sum(3)=\",even_Power_Sum(3))\nprint(\"Power_Sum(100)=\",even_Power_Sum(100))\n",
        "num_ids": 71
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_2 = []\n    for x in range(0, len(test_list)):\n        list_2.append(test_list[x][1])\n    return list_2\n",
        "num_ids": 47
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extract_list = []\n    for i in range(len(test_list)):\n        rear_extract_list.append(test_list[i][-1])\n",
        "num_ids": 48
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    print(test_list)\n    print(test_list[-1])\n    return test_list[-1]\n",
        "num_ids": 31
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n",
        "num_ids": 13
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item[1])\n    return new_list\n",
        "num_ids": 36
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    ret_list = []\n    for i in range(len(test_list)):\n        ret_list.append(test_list[i][-1])\n    return ret_list\n",
        "num_ids": 46
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[0] for element in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup_elements = []\n    for i in range(len(test_tup1)):\n        tup_elements.append(test_tup1[i] - test_tup2[i])\n    return tuple(tup_elements)\n",
        "num_ids": 65
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a-b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(i-j for i,j in zip(test_tup1,test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # list_1 = list(test_tup1)\n    # list_2 = list(test_tup2)\n    list_1 = list(map(int, test_tup1))\n    list_2 = list(map(int, test_tup2))\n",
        "num_ids": 68
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    sum_list = []\n    for i in range(len(test_tup1)):\n        sum_list.append(test_tup1[i] - test_tup2[i])\n",
        "num_ids": 52
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = ()\n    for i in range(0, len(test_tup1)):\n        new_tuple = new_tuple + (test_tup1[i] - test_tup2[i],)\n    return new_tuple\n",
        "num_ids": 66
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\nprint(substract_elements((1,2,3,4),(5,2,7,8)))\n",
        "num_ids": 80
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i], )\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n",
        "num_ids": 34
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    sum = 0\n    for i in range(n + 1):\n        if (i % 2 == 0):\n            sum += even_binomial_Coeff_Sum(i - 2)\n    return sum\n",
        "num_ids": 106
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # define odd binomial coefficients\n    odd_binomial_Coeff_Sum = [1, 1]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            odd_binomial_Coeff_Sum.append(odd_binomial_Coeff_Sum[i] * 2)\n        else:\n            odd_binomial_Coeff_Sum.append(odd_binomial_Coeff_Sum[i] / 2)\n",
        "num_ids": 118
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*even_binomial_Coeff_Sum(n-2)+(n-2)*even_binomial_Coeff_Sum(n-1)\n",
        "num_ids": 57
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    C0 = 0\n    C1 = 1\n    for i in range(0, n):\n        C = ((2*i+1)*C1)/(i+1)\n        C0 += C\n        C1 = C\n    return C0\n    \n    \ndef odd_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    C0 = 0\n    C1 = 1\n    for i in range(0, n):\n        C = (i+1)*C1\n        C0 += C\n        C1 = C\n    return C0\n    \n    \ndef Binomial_Coeff(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k,\n    and returns the nth binomial coefficient.\n    '''\n    return math.factorial(n)/(math.factorial(k)*math.factorial(n-k))\n    \n    \ndef inverse_binomial_Coeff(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k,\n    and returns the inverse nth binomial coefficient.\n    '''\n    return math.factorial(n)/math.factorial(k)/math.factorial(n-k)\n    \n    \ndef odd_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    C0 = 0\n    C1 = 1\n    for i in range(0, n):\n        C = ((2*i+1)*C1)/(i+1)\n        C0 += C\n        C1 = C\n    return C0\n    \n    \ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    C0 = 0\n    C1 = 1\n    for i in range(0, n):\n        C = ((2*i+1)*C1)/(i+1)\n        C0 += C\n        C1 = C\n    return C0\n    \n    \ndef odd_binomial_Coeff_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the odd index binomial coefficients sequence.\n    '''\n    odd_binomial_Coeff_Sequence = []\n    for i in range(0, n):\n        odd_binomial_Coeff_Sequence.append( Binomial_Coeff(i, i))\n    return odd_binomial_Coeff_Sequence\n    \n    \ndef even_binomial_Coeff_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the even index binomial coefficients sequence.\n    '''\n    even_binomial_Coeff_Sequence = []\n    for i in range(0, n):\n        even_binomial_Coeff_Sequence.append( Binomial_Coeff(i, i+1))\n    return even_binomial_Coeff_Sequence\n    \n    \ndef inverse_binomial_Coeff_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the inverse nth binomial coefficients sequence.\n    '''\n    inverse_binomial_Coeff_Sequence = []\n    for i in range(0, n):\n        inverse_binomial_Coeff_Sequence.append( inverse_binomial_Coeff(i, i))\n    return inverse_binomial_Coeff_Sequence\n    \n    \ndef odd_binomial_Coeff_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the odd index binomial coefficients sequence.\n    '''\n    odd_binomial_Coeff_Sequence = []\n    for i in range(0, n):\n        odd_binomial_Coeff_Sequence.append( Binomial_Coeff(i, i+1))\n    return odd_binomial_Coeff_Sequence\n    \n    \ndef even_binomial_Coeff_Nth_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth index binomial coefficients sequence.\n    '''\n    even_binomial_Coeff_Nth_Sequence = []\n    for i in range(0, n):\n        even_binomial_Coeff_Nth_Sequence.append( Binomial_Coeff(i, i))\n    return even_binomial_Coeff_Nth_Sequence\n    \n    \ndef odd_binomial_Coeff_Nth_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth index binomial coefficients sequence.\n    '''\n    odd_binomial_Coeff_Nth_Sequence = []\n    for i in range(0, n):\n        odd_binomial_Coeff_Nth_Sequence.append( Binomial_Coeff(i, i+1))\n    return odd_binomial_Coeff_Nth_Sequence\n    \n    \ndef inverse_binomial_Coeff_Nth_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth inverse binomial coefficients sequence.\n    '''\n    inverse_binomial_Coeff_Nth_Sequence = []\n    for i in range(0, n):\n        inverse_binomial_Coeff_Nth_Sequence.append( inverse_binomial_Coeff(i, i))\n    return inverse_binomial_Coeff_Nth_Sequence\n    \n    \ndef odd_binomial_Coeff_Nth_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the nth index binomial coefficients sequence.\n    '''\n    odd_binomial_Coeff_Nth_Sequence = []\n    for i in range(0, n):\n        odd_binomial_Coeff_Nth_Sequence.append( Binomial_Coeff(i, i+1))\n    return odd_binomial_Coeff_Nth_Sequence\n    \n    \ndef even_binomial_Coeff_First_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the first n even index binomial coefficients sequence.\n    '''\n    even_binomial_Coeff_First_Sequence = []\n    for i in range(0, n):\n        even_binomial_Coeff_First_Sequence.append( Binomial_Coeff(i, i))\n    return even_binomial_Coeff_First_Sequence\n    \n    \ndef odd_binomial_Coeff_First_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the first n odd index binomial coefficients sequence.\n    '''\n    odd_binomial_Coeff_First_Sequence = []\n    for i in range(0, n):\n        odd_binomial_Coeff_First_Sequence.append( Binomial_Coeff(i, i+1))\n    return odd_binomial_Coeff_First_Sequence\n    \n    \ndef inverse_binomial_Coeff_First_Sequence(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the first n inverse binomial coefficients sequence.\n    '''\n    inverse_binomial_Coeff_First_Sequence = []\n    for i in range(0, n):\n        inverse_binomial_Coeff_First_Sequence.append( inverse_binomial_Coeff(i, i))\n    return inverse_binomial_Coeff_First_Sequence\n    \n    \ndef odd_binomial_Coeff_First_Sequence(n): \n    '''\n    Write a python function that takes in a positiv",
        "num_ids": 13
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #assume we have the coefficients\n    s = 0\n    #start with 1st term\n    #this is then'th term \n    term_i = 1\n    #for each term\n    for term_i in range(n):\n        #add the current term and the previous term\n        s += ((term_i + 1) ** 2) / (6 * term_i + 2)\n        #incremenet the current term\n        term_i += 1\n    #return the sum\n    return s\n",
        "num_ids": 120
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #define 2D array for list\n    binomial_coeff_list = [[1, 1], [1, 2], [1, 3], [1, 4],\n                            [2, 1], [2, 2], [2, 3], [2, 4],\n                            [3, 1], [3, 2], [3, 3], [3, 4],\n                            [4, 1], [4, 2], [4, 3], [4, 4]]\n    \n    #initialize sum to 0\n    sum = 0\n    \n    #increment by 1 in each column\n    for i in range(n+1):\n        sum += binomial_coeff_list[i][0] * math.comb(n, i)\n    \n    return sum\n    \n    \n",
        "num_ids": 180
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if (n == 0):\n        return 1\n    else:\n        return 2*n * even_binomial_Coeff_Sum(n - 1)\n",
        "num_ids": 42
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    def binomial_Coeff(n,k):\n        if n==0 or k==0 or n==k or k>n:\n            return 0\n        else:\n            return math.comb(n,k)\n    \n    summ=0\n    for i in range(1,n+1):\n        summ+=binomial_Coeff(n,i)\n    return summ\n",
        "num_ids": 97
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    S = 0.0 \n    if( n%2!= 0): \n        n = n-1\n    i = 0\n    while(i<=n): \n        S = S+((-1)**i)*((n-i)/(2*i+1)) \n        i+=1\n    return S\n    \nif __name__ == \"__main__\":\n    testCases = int(input())\n    for _ in range(testCases):\n        n = int(input())\n        print(\"%.3f\" %even_binomial_Coeff_Sum(n))",
        "num_ids": 142
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Even_index_binomial_coeff_sum = 0\n    for i in range(1,n+1):\n        Even_index_binomial_coeff_sum = Even_index_binomial_coeff_sum + math.pow( 2, i)\n        \n    return Even_index_binomial_coeff_sum\n",
        "num_ids": 81
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    v=pi*(r**2)*h\n    return v\n",
        "num_ids": 24
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265359\n    return (pi*r**2*h)\n",
        "num_ids": 24
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r*r*h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=math.pi*r**2*h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    if h==0 or r==0:\n        return 0\n    return 3.14*r**2*h\n",
        "num_ids": 29
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return PI*r*r*h\n",
        "num_ids": 12
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = pi*r**2*h\n    return volume\n",
        "num_ids": 17
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (np.pi)*(r**2)*h\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume = math.pi*(r**2)*h\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for item in dict:\n        if dict[item] >= n:\n            new_dict[item] = dict[item]\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    n_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            n_dict.update({key:value})\n    return n_dict",
        "num_ids": 44
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i,j in dict.items():\n        if j >= n:\n            new_dict[i] = j\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    my_dict = {}\n    for k in dict.keys():\n        if dict[k] >= n:\n            my_dict[k] = dict[k]\n    return my_dict\n",
        "num_ids": 47
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result=[]\n    for key,value in dict.items():\n        if(value>=n):\n            result.append((key,value))\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i,j in dict.items():\n        if j >= n:\n            new_dict[i] = j\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {key: value for key, value in dict.items() if value >= n}\n    return filtered\n",
        "num_ids": 29
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict = {}\n    for key in dict:\n        if dict[key]>=n:\n            newdict[key]=dict[key]\n    return newdict\nprint(dict_filter({'a':1,'b':2,'c':3},1))\n",
        "num_ids": 64
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    my_dict = {}\n    for i,j in dict.items():\n        if j>=n:\n            my_dict[i]=j\n    return my_dict\nprint(dict_filter({'a':2,'b':4,'c':-6,'d':7},2))\n",
        "num_ids": 70
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            n += 1\n    return n\n",
        "num_ids": 52
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    for x in range(len(test_tup)):\n        if test_tup[x] > test_tup[num]:\n            num = x\n    return num\n",
        "num_ids": 49
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    res = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            res = res + 1\n        else:\n            if test_tup[i] < test_tup[i-1]:\n                res = res + 1\n    return res\n",
        "num_ids": 71
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element = test_tup[0]\n    return test_tup.index(first_element)\n",
        "num_ids": 29
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return -1\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            return i\n",
        "num_ids": 57
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    #Test\n    test_tup = (2, 3, 1, 1, 4)\n    test_tup = (2, 5, 1, 1, 4)\n    test_tup = (1, 1, 2, 2, 1, 1, 1, 1)\n    test_tup = (1, 2, 1, 1, 1, 1, 1, 1)\n    test_tup = (1, 2, 1, 1, 1, 1, 1, 2)\n    \n    #Code\n    return test_tup.index(min(test_tup))\n    \n    #...\n    \nprint(count_first_elements(test_tup)) # 2\n",
        "num_ids": 164
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 0\n    answer = 1\n    while i < n:\n        answer = answer*(n - i + 1)\n        i += 1\n    return answer\n",
        "num_ids": 41
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n += 1\n    ans = 1\n    if n == 1:\n        return ans\n    else:\n        while n > 0:\n            n -= 1\n            ans += ans\n        return ans\n    \n",
        "num_ids": 50
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        decagonal_num = 1\n        for i in range(n):\n            decagonal_num = decagonal_num*(1-1/np.sqrt(2))\n        return decagonal_num\n",
        "num_ids": 65
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    s = 0\n    decagonal = 1\n    for i in range(n):\n        s += decagonal\n        decagonal *= 10\n    return s\n",
        "num_ids": 39
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(((n+1)**0.5)) - 1\n",
        "num_ids": 19
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<0:\n        return -1\n    elif n==0:\n        return 1\n    else:\n        return sum([i*(i+1) for i in range(1,n+1)])\n",
        "num_ids": 54
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # only bother if we have two numbers.\n    if n <= 2:\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    while n > 0:\n        n -= 1\n        decagonal *= 10\n        decagonal += 5\n",
        "num_ids": 33
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return (n * (n + 1)) // 2\n",
        "num_ids": 45
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    while i <= n:\n        n = n * 10 + 1\n        i += 1\n    return n - 1\n    \nprint(is_num_decagonal(10))\n",
        "num_ids": 48
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return found, i\n",
        "num_ids": 42
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    for element in dlist:\n        if element == item:\n            return True, index\n        index += 1\n    return False, -1\n",
        "num_ids": 40
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    '''\n    SEARCH FOR ITEM IN DICTIONARY\n    '''\n    found = False\n    pos = 0\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return (True, pos)\n    else:\n        return (False, -1)\n",
        "num_ids": 77
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    counter = 0\n    while not found and counter < len(dlist):\n        if dlist[counter] == item:\n            found = True\n            index = counter\n        else:\n            counter += 1\n    return found, index\n",
        "num_ids": 67
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n",
        "num_ids": 38
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = 0\n    \n    while found == False and index < len(dlist):\n        if item == dlist[index]:\n            found = True\n        else:\n            index += 1\n",
        "num_ids": 52
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 45
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = 0\n    for e in dlist:\n        if e == item:\n            found = True\n            break\n        else:\n            pos += 1\n",
        "num_ids": 44
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, v in enumerate(dlist):\n        if v == item:\n            return True, i\n",
        "num_ids": 28
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    while pos < len(dlist):\n        if dlist[pos] == item:\n            return True, pos\n        pos += 1\n    return False, -1\n",
        "num_ids": 46
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Solution\n    '''\n    return not(any(test_list.count(i) > 1 for i in test_list))\n    '''\n    # AlgoExpert Solution\n    # Time: O(n)\n    # Space: O(n)\n    test_set = set(test_list)\n    return len(test_set) == len(test_list)\n",
        "num_ids": 56
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_list) == len(test_set):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 46
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list))==len(test_list):\n        print(\"All unique\")\n    else:\n        print(\"Not unique\")\n        \n    \n    \ndef is_sorted(test_list):\n    '''\n    Write a python function to check if the elements of a given list are sorted or not.\n    '''\n    if test_list==sorted(test_list):\n        print(\"List is sorted\")\n    else:\n        print(\"List is not sorted\")\n        \n    \n    \ndef bubble_sort(test_list):\n    '''\n    Write a python function to sort a list using bubble sort algorithm.\n    '''\n    n=len(test_list)\n    if n<=1:\n        return\n    \n    for i in range(n):\n        for j in range(0,n-i-1):\n            if test_list[j]>test_list[j+1]:\n                test_list[j],test_list[j+1]=test_list[j+1],test_list[j]\n    return test_list\n    \n    \n    \ndef merge_sort(test_list):\n    '''\n    Write a python function to sort a list using merge sort algorithm.\n    '''\n    if len(test_list)<=1:\n        return test_list\n    \n    mid=len(test_list)//2\n    left=merge_sort(test_list[:mid])\n    right=merge_sort(test_list[mid:])\n    \n    return merge(left,right)\n    \n    \ndef merge(left,right):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    merged_list=[]\n    while len(left)>0 and len(right)>0:\n        if left[0]<right[0]:\n            merged_list.append(left[0])\n            left.pop(0)\n        else:\n            merged_list.append(right[0])\n            right.pop(0)\n    merged_list=merged_list+left+right\n    return merged_list\n    \n    \ndef quick_sort(test_list):\n    '''\n    Write a python function to sort a list using quick sort algorithm.\n    '''\n    if len(test_list)<=1:\n        return test_list\n    \n    pivot=test_list[0]\n    smaller_list=[]\n    bigger_list=[]\n    equal_list=[]\n    for i in range(1,len(test_list)):\n        if test_list[i]<pivot:\n            smaller_list.append(test_list[i])\n        elif test_list[i]>pivot:\n            bigger_list.append(test_list[i])\n        else:\n            equal_list.append(test_list[i])\n    return quick_sort(smaller_list)+equal_list+quick_sort(bigger_list)\n    \n    \ndef selection_sort(test_list):\n    '''\n    Write a python function to sort a list using selection sort algorithm.\n    '''\n    if len(test_list)<=1:\n        return test_list\n    for i in range(len(test_list)):\n        smallest_value=test_list[i]\n        smallest_index=i\n        for j in range(i+1,len(test_list)):\n            if test_list[j]<smallest_value:\n                smallest_value=test_list[j]\n                smallest_index=j\n        test_list[i],test_list[smallest_index]=test_list[smallest_index],test_list[i]\n    return test_list\n    \n    \ndef insertion_sort(test_list):\n    '''\n    Write a python function to sort a list using insertion sort algorithm.\n    '''\n    if len(test_list)<=1:\n        return test_list\n    for i in range(1,len(test_list)):\n        current_value=test_list[i]\n        previous_value=test_list[i-1]\n        while current_value<previous_value:\n            test_list[i]=previous_value\n            i=i-1\n            if i==0:\n                break\n            test_list[i]=current_value\n    return test_list\n    \n    \ndef shell_sort(test_list):\n    '''\n    Write a python function to sort a list using shell sort algorithm.\n    '''\n    if len(test_list)<=1:\n        return test_list\n    interval=len(test_list)//2\n    while interval>0:\n        for i in range(interval,len(test_list)):\n            current_value=test_list[i]\n            pos=i\n            while pos>=interval and test_list[pos-interval]>current_value:\n                test_list[pos]=test_list[pos-interval]\n                pos=pos-interval\n            test_list[pos]=current_value\n        interval=interval//2\n    return test_list\n    \n    \ndef merge_the_tools(string,k):\n    '''\n    Write a python function to split a given string into all possible even length palindromes.\n    '''\n    all_pali_list=[]\n    #creating a list of palindromes of length 2k+1\n    for i in range(2*k+1):\n        all_pali_list.append(\"\".join(string[i:i+k]))\n    #looping through the list of palindromes\n    for i in all_pali_list:\n        if is_palindrome(i):\n            print(i)\n            \n            \ndef is_palindrome(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    if len(s)==0:\n        return True\n    #if the last character is not equal to the first character then it is not palindrome\n    if s[0]!=s[-1]:\n        return False\n    #if there is only a single character then it is palindrome\n    if len(s)==1:\n        return True\n    return is_palindrome(s[1:-1])\n    \n    \n    \ndef get_permutations(string):\n    '''\n    Write a python function to get permutations of a given string.\n    '''\n    if len(string)==0:\n        return [\"\"]\n    elif len(string)==1:\n        return string\n    else:\n        first_char=string[0]\n        remaining_string=string[1:]\n        all_permutations=[]\n        for i in get_permutations(remaining_string):\n            all_permutations.append(first_char+i)\n        return all_permutations\n    \n    \n    \ndef gcd(a,b):\n    '''\n    Write a python function to get the GCD of two integers.\n    '''\n    if a<b:\n        smaller=b\n        larger=a\n    else:\n        smaller=a\n        larger=b\n    while smaller!=0:\n        remainder=smaller\n        smaller=larger%smaller\n        larger=remainder\n    return larger\n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to return nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if num<=1:\n        return False\n    elif num==2:\n        return True\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n    \n    \ndef get_factors(num):\n    '''\n    Write a python function to get the factors of a given number.\n    '''\n    factors=[]\n    for i in range(1,num+1):\n        if num%i=",
        "num_ids": 27
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = []\n    for item in test_list:\n        if item not in seen:\n            seen.append(item)\n        else:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n        else:\n            print(\"{} is not unique\".format(i))\n    if len(unique_list) == len(test_list):\n        print(\"{} is unique\".format(test_list))\n    else:\n        print(\"{} is not unique\".format(test_list))\n    \ndef all_unique_using_set(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(len(test_list))\n    if len(test_list) == len(set(test_list)):\n        print(\"{} is unique\".format(test_list))\n    else:\n        print(\"{} is not unique\".format(test_list))\n",
        "num_ids": 66
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if(len(test_list) == len(set(test_list))):\n        print(\"\\nTrue\")\n    else:\n        print(\"\\nFalse\")\n",
        "num_ids": 42
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    test_list.sort()\n    for i in range(0, len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x, y: x - y, nums1, nums2))\n    \n    \n    \ndef judge(n, m, a1, b1, a2, b2):\n    '''\n    judge whether there is an integer n and m such that \n    a1 + b1 +.. + b2 = n and a1 + b1 +.. + b2 = m.\n    '''\n    a = sub_list(a1, a2)\n    b = sub_list(b1, b2)\n    if n == m and sum(a) == sum(b):\n        return True\n    return False\n    \n    \ndef guess_it(n, m):\n    '''\n    Given two non-negative integers n and m, where n \u2264 m,\n    write a function that returns a list of the first n integers\n    in the range(1,m). The integers in the range(1,n) are not included in the list.\n    '''\n    if n > m:\n        return []\n    if n == m:\n        return [1]\n    guess = []\n    i = 1\n    while len(guess) < n:\n        if judge(n, m, guess, guess, i, i):\n            guess.append(i)\n        i += 1\n    return guess\n",
        "num_ids": 83
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    sublist = []\n    for i in range(len(nums1)):\n        sublist.append(nums1[i] - nums2[i])\n    return sublist\n",
        "num_ids": 67
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        min_length = len(nums1)\n    else:\n        min_length = len(nums2)\n    \n    for i in range(min_length):\n        nums1[i] -= nums2[i]\n    return nums1\n",
        "num_ids": 80
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1,nums2):\n        result.append(num1 - num2)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [a - b for a,b in zip(nums1,nums2)]\nprint(sub_list([1,2,3,4], [3,4,5,6]))\n",
        "num_ids": 49
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(min(len(nums1), len(nums2))):\n        new_list.append(nums1[i] - nums2[i])\n    return new_list\n",
        "num_ids": 58
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list=[]\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n",
        "num_ids": 49
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    return list(set(nums1)-set(nums2))\n",
        "num_ids": 35
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    else:\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i] - nums2[i]\n        return nums1\n",
        "num_ids": 68
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return True\n",
        "num_ids": 13
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Write your code here\n    count = 0\n    while n > 0:\n        count += 1\n        n = n//10\n    \n    return count <= len(str(n))\n    \n    \ndef count_digits(num):\n    cnt = 0\n    while num:\n        num &= num - 1\n        cnt += 1\n    return cnt\n",
        "num_ids": 89
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) is not int:\n        return False\n    dct = {}\n    for i in str(n):\n        if i in dct:\n            dct[i] += 1\n        else:\n            dct[i] = 1\n    for k,v in dct.items():\n        if v > 1:\n            return False\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in range(10):\n        freq[i] = 0\n",
        "num_ids": 26
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    d = {}\n    for i in range(len(s)):\n        if s[i] in d:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n",
        "num_ids": 61
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return sum(int(i) < int(i) for i in str(n))\n",
        "num_ids": 23
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    counts = {}\n    while n:\n        d = n % 10\n        n = n // 10\n        if d in counts:\n            counts[d] += 1\n        else:\n            counts[d] = 1\n    for k in counts:\n        if counts[k] > k:\n            return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0:\n        return False\n    else:\n        sum = 0\n        while n > 0:\n            sum += (n%10)\n            n = int(n/10)\n        if sum == n:\n            return True\n        else:\n            return False\n",
        "num_ids": 67
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    d = {}\n    n = str(n)\n    for i in range(len(n)):\n        if n[i] in d.keys():\n            d[n[i]] += 1\n        else:\n            d[n[i]] = 1\n    for i in range(len(d)):\n        if d[n[i]] > i:\n            return False\n    return True\n",
        "num_ids": 97
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Step 1: convert the integer to a list of digits.\n    \n    list_n = list(map(int, list(str(n))))\n    # Step 2: For each digit in the integer, count the frequency and if frequency is less than or equal to it, return True.\n    \n    for i in range(len(list_n)):\n        if list_n[i]!= 0:\n            if list_n.count(list_n[i]) <= list_n[i]:\n                return True\n    return False\n",
        "num_ids": 126
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list == element\n",
        "num_ids": 8
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n        else:\n            return False\n            \n            \n            \n",
        "num_ids": 34
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    if list == []:\n        return True\n    elif list[0] == element:\n        return True\n    else:\n        return check_element(list[1:],element)\n",
        "num_ids": 48
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check = True\n    for i in list:\n        if i!= element:\n            check = False\n    if check == True:\n        return \"The list contains all \" + str(element)\n    else:\n        return \"The list does not contain all \" + str(element)\n",
        "num_ids": 68
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Find the index of the element\n    for i in range(len(list)):\n        if list[i] == element:\n            return i\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(i==element for i in list)\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if len(list) == 1:\n        return list[0] == element\n    return list[0] == element and check_element(list[1:],element)\n",
        "num_ids": 56
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.findall(r'ab', text) and re.findall(r'ab{1,2}', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('[ab]b',text):\n        return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.findall(\"^[ab]+[b]$\",text):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count = 0\n    for i in range(len(text)):\n        if text[i] == 'a' and (text[i+1] == 'b' or text[i+1] == 'c'):\n            count = count + 1\n    if count == 2 or count == 3:\n        print('True')\n    else:\n        print('False')\ndef word_shuffle(string):\n    '''\n    Write a function that takes a string and returns a string with all characters except the first and last characters.\n    '''\n    first = string[0]\n    last = string[-1]\n    string = string[1:-1]\n    new_string = string + first + last\n    return new_string\ndef is_perfect(number):\n    '''\n    Write a function that takes a number (integer) and returns whether the number is a perfect square.\n    '''\n    if number == 1 or number == 4:\n        print('Not a perfect square')\n    else:\n        count = 1\n        while count < number:\n            count = count + 1\n            if count == number:\n                print('Yes it is')\n            elif count > number:\n                print('No it is not')\ndef is_number_in_list(list, number):\n    '''\n    Write a function that takes a list and a number, and returns whether the number is in the list.\n    '''\n    for i in range(len(list)):\n        if list[i] == number:\n            return True\n    return False\ndef numbers_of_5(number):\n    '''\n    Write a function that takes a number (integer) and returns the number of 5s in that number.\n    '''\n    count = 0\n    while number!= 0:\n        number = number - 5\n        count = count + 1\n    return count\ndef is_word_in_list(list, word):\n    '''\n    Write a function that takes a list and a string, and returns whether the string is in the list.\n    '''\n    for i in range(len(list)):\n        if list[i] == word:\n            return True\n    return False\ndef to_words(n):\n    '''\n    Write a function that takes a number (integer) and returns a string with each digit of that number in separate words.\n    '''\n    numbers = {1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine',0:'zero'}\n    if n == 0:\n        return numbers[0]\n    string = ''\n    while n!= 0:\n        n = n // 10\n        string = numbers[n] + string\n        string = string + '-' + numbers[n]\n        n = n % 10\n    return string\ndef is_word_in_dictionary(list, word):\n    '''\n    Write a function that takes a list and a string, and returns whether the string is in the list.\n    '''\n    for i in range(len(list)):\n        if list[i] == word:\n            return True\n    return False\ndef is_text_a_number(text):\n    '''\n    Write a function that takes a string and returns whether it contains only digits.\n    '''\n    for i in range(len(text)):\n        if not (text[i].isdigit()):\n            return False\n    return True\ndef is_word_in_text(text, word):\n    '''\n    Write a function that takes a text and a word, and returns whether the word is in the text.\n    '''\n    text = text.split(' ')\n    for i in range(len(text)):\n        if text[i] == word:\n            return True\n    return False\ndef first_non_repeating_character(string):\n    '''\n    Write a function that takes a string and returns the first character that is not repeated anywhere in the string.\n    '''\n    for i in range(len(string)):\n        string = string.replace('a', 'a')\n        string = string.replace('i', 'i')\n        string = string.replace('o', 'o')\n        string = string.replace('u', 'u')\n        string = string.replace('l', 'l')\n        string = string.replace('e', 'e')\n        string = string.replace('y', 'y')\n        string = string.replace('s','s')\n        string = string.replace('t', 't')\n        string = string.replace('c', 'c')\n        string = string.replace('g', 'g')\n        string = string.replace('h', 'h')\n        string = string.replace('w', 'w')\n        string = string.replace('f', 'f')\n        string = string.replace('a', 'a')\n        string = string.replace('i', 'i')\n        string = string.replace('o', 'o')\n        string = string.replace('u', 'u')\n        string = string.replace('l', 'l')\n        string = string.replace('e', 'e')\n        string = string.replace('y', 'y')\n        string = string.replace('s','s')\n        string = string.replace('t', 't')\n        string = string.replace('c', 'c')\n        string = string.replace('g', 'g')\n        string = string.replace('h', 'h')\n        string = string.replace('w', 'w')\n        string = string.replace('f', 'f')\n        string = string.replace('a', 'a')\n        string = string.replace('i', 'i')\n        string = string.replace('o', 'o')\n        string = string.replace('u', 'u')\n        string = string.replace('l', 'l')\n        string = string.replace('e', 'e')\n        string = string.replace('y', 'y')\n        string = string.replace('s','s')\n        string = string.replace('t', 't')\n        string = string.replace('c', 'c')\n        string = string.replace('g', 'g')\n        string = string.replace('h', 'h')\n        string = string.replace('w', 'w')\n        string = string.replace('f', 'f')\n        string = string.replace('a', 'a')\n        string = string.replace('i', 'i')\n        string = string.replace('o', 'o')\n        string = string.replace('u', 'u')\n        string = string.replace('l', 'l')\n        string = string.replace('e', 'e')\n        string = string.replace('y', 'y')\n        string = string.replace('s','s')\n        string = string.replace('t', 't')\n        string = string.replace('c', 'c')\n        string = string.replace('g', 'g')\n        string = string.replace('h', 'h')\n        string = string.replace('w', 'w')\n        string = string.replace('f', 'f')\n        string = string.replace('a', 'a')\n        string = string.replace('i', 'i')\n        string = string.replace('o', 'o')\n        string = string.replace('u', 'u')\n        string = string.replace('l', 'l')\n        string = string.replace('e', 'e')\n        string = string.replace('y', 'y')\n        string = string.replace('s','s')\n        string = string.replace('t', 't')\n        string = string.replace('c', 'c')\n        string = string.replace('g', 'g')\n        string = string.replace('h', 'h')\n        string = string.replace('w', 'w')\n        string = string.replace('f', 'f')\n        string = string.replace('a', 'a')\n        string = string.replace('i', 'i')\n        string = string.replace('o', 'o')\n        string = string.replace('u', 'u')\n        string = string.replace('l', 'l')\n        string = string.replace('e', 'e')\n        string = string.replace('y', 'y')\n        string = string.replace('s','s')\n        string = string.replace('t', 't')\n        string = string.replace('c', 'c')\n        string = string.replace('g', '",
        "num_ids": 1058
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a = re.compile(r'a.{2,3}b')\n    # or, r'a.{2,3}b'\n    if a.search(text):\n        return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'a.*b.*', text))\n",
        "num_ids": 20
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search(\"(a+b)*b\",text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub(r'\\W+','', text)\n    return True if re.findall(r'a\\sb', text) else False\n",
        "num_ids": 39
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a[b]b', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a', '')\n    text = text.replace('b', '')\n    if len(text) <= 2 and text == '':\n        return False\n    elif len(text) == 3 and 'b' in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    total_sum = sum(a)\n    max_sum = total_sum - total_sum/k\n    k_repeat = max(total_sum, k)\n",
        "num_ids": 41
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = []\n    if n==1 and k==1:\n        result.append(a[0])\n        return max(result)\n    if n==1:\n        result.append(a[0])\n        return max(result)\n    if k==1:\n        result.append(a[0])\n        return max(result)\n    if n==0:\n        return 0\n    #initialize\n    if k==1:\n        result.append(a[0])\n        return max(result)\n    for i in range(k):\n        result.append(a[0])\n        #print(result)\n    for i in range(1,n):\n        #initialize\n        if a[i]>result[0]:\n            result[0] = a[i]\n        for j in range(1,k):\n            if a[i]>result[j]:\n                result[j] = a[i]\n        for j in range(1,k):\n            if result[j-1]<result[j]:\n                result[j] = result[j-1]\n            else:\n                result[j] = a[i]\n        if result[k-1]<a[i]:\n            result[k-1] = a[i]\n    return max(result)\n",
        "num_ids": 309
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    Given an array, find the maximum sum of any contiguous subarray of that array.\n    The length of subarray should be greater than or equal to 2.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = float('-inf')\n    curr_sum = 0\n    n = len(a)\n    k = k\n    while(k < n): \n        curr_sum += a[k]\n        k += k\n    curr_sum += a[0]\n    k = 1\n    while(k < n): \n        curr_sum -= a[k-1]\n        k += k\n    curr_sum += a[0]\n    while(curr_sum <= ans and k < n): \n        curr_sum += a[k]\n        k += k\n    ans = max(ans, curr_sum)\n    curr_sum -= a[0]\n    while(k < n): \n        curr_sum += a[k]\n        k += k\n    curr_sum += a[0]\n    while(curr_sum <= ans and k < n): \n        curr_sum += a[k]\n        k += k\n    ans = max(ans, curr_sum)\n    curr_sum -= a[0]\n    while(k < n): \n        curr_sum += a[k]\n        k += k\n    curr_sum += a[0]\n    while(curr_sum <= ans and k < n): \n        curr_sum += a[k]\n        k += k\n    ans = max(ans, curr_sum)\n    curr_sum -= a[0]\n    while(k < n): \n        curr_sum += a[k]\n        k += k\n    curr_sum += a[0]\n    while(curr_sum <= ans and k < n): \n        curr_sum += a[k]\n        k += k\n    ans = max(ans, curr_sum)\n    curr_sum -= a[0]\n    while(k < n): \n        curr_sum += a[k]\n        k += k\n    curr_sum += a[0]\n    while(curr_sum <= ans and k < n): \n        curr_sum += a[k]\n        k += k\n    ans = max(ans, curr_sum)\n    return ans\n",
        "num_ids": 528
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (k > 1 and n > 0):\n        k_sum = 0\n        max_sum = 0\n        max_sum_repeat_times = 0\n        temp_array = []\n        for i in range(k):\n            temp_array.append(a[i])\n        temp_array.append(0)\n        temp_array = sorted(temp_array)\n        for i in range(k, n):\n            k_sum = temp_array[i-k] + a[i]\n            if (k_sum > max_sum):\n                max_sum = k_sum\n                max_sum_repeat_times = 1\n            elif (k_sum == max_sum):\n                max_sum_repeat_times += 1\n        if (max_sum_repeat_times == k):\n            return max_sum\n        else:\n            return -1\n    else:\n        return -1\n",
        "num_ids": 213
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # This problem can be solved using Kadane's Algorithm.\n    # The algorithm is as follows:\n    # 1. Initialize the value of the sum.\n    # 2. Iterate through the array.\n    # 3. If the element is non-negative, then add it to the sum.\n    # 4. Else, if the element is negative and the sum is also negative, then subtract it from the sum.\n    # 5. Else, simply increment the sum by the element.\n    # 6. Repeat step 2 to 5.\n    # 7. If the sum is greater than 0, return the sum. Else, return -1.\n",
        "num_ids": 145
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Assign some value to maximum sum in the array.\n    max_sum = -sys.maxsize\n    # Iterate over the elements in the array.\n    for i in range(n):\n        # Check if the sum of the ith element and the next k-1 elements is \n        # greater than the maximum sum. \n        temp_sum = (a[i] + a[i+1] + a[i+2] + a[i+3] + a[i+4])\n        if temp_sum > max_sum:\n            # If yes, then update the maximum sum.\n            max_sum = temp_sum\n    # Return the maximum sum.\n    return max_sum\n",
        "num_ids": 164
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = 0\n    max_sum = -1\n    i = 0\n    while (i < n):\n        curr_sum = 0\n        for j in range(i, i+k):\n            curr_sum += a[j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        i += 1\n    return max_sum\n",
        "num_ids": 96
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    previous_sum = 0\n    for i in range(0, n, k):\n        previous_sum = max(previous_sum + a[i], a[i])\n        max_sum = max(previous_sum, max_sum)\n    return max_sum\n",
        "num_ids": 79
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if(n == 1):\n        return a[0]\n",
        "num_ids": 17
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum=sum+i**2\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum = sum + (i ** 2)\n    print(sum)\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i*i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            sum = sum + (i * i)\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(n):\n        ans = ans + i**2\n    return ans\n",
        "num_ids": 29
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(1, n+1) if i%2==0])\n",
        "num_ids": 28
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            even_sum += i**2\n    return even_sum\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_sq = 0\n    if n == 1:\n        print(sum_sq)\n        return sum_sq\n    else:\n        for i in range(n):\n            if i % 2 == 0:\n                sum_sq += i**2\n        print(sum_sq)\n        return sum_sq\n",
        "num_ids": 75
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+i*i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            s = s + i**2\n    print(s)\n",
        "num_ids": 44
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_length=len(list1)\n    max_length=[]\n    for i in range(0,list_length):\n        if len(list1[i])>len(max_length):\n            max_length=list1[i]\n    return max_length\nmax_length(list1)\n",
        "num_ids": 75
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1 = list1\n    l = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(l):\n            l = list1[i]\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = []\n    for i in range(len(list1)):\n        length.append(len(list1[i]))\n    return max(length)\n",
        "num_ids": 41
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_l = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_l:\n            max_l = len(list1[i])\n    return max_l\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_l = []\n    for i in list1:\n        if len(i) == max(max(i) for i in list1):\n            max_l.append(i)\n    return max_l\n",
        "num_ids": 53
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if max_length < len(list1[i]):\n            max_length = len(list1[i])\n",
        "num_ids": 50
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "num_ids": 71
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    list1_length = len(list1)\n    for row in range(list1_length):\n        if len(list1[row]) > max_length:\n            max_length = len(list1[row])\n    return max_length\n",
        "num_ids": 67
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < k:\n        return 0\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n",
        "num_ids": 35
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for x in range(k+1)] for x in range(n+1)]\n    dp[1] = [0 for x in range(k+1)]\n    for i in range(1, n+1):\n        dp[i][0] = 0\n        dp[i][1] = 1\n        dp[i][2] = dp[i-1][2] + dp[i-1][1]\n        for j in range(3, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n    return dp[n][k]\n",
        "num_ids": 170
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # ### Naive method :\n    # if n == 1:\n    #     return 1\n    # if k == 1:\n    #     return n\n    # ways = 0\n    # for i in range(1, k + 1):\n    #     # w = count_no_of_ways(n - 1, i)\n    #     w = count_no_of_ways(n - 1, i)\n    #     # if w < n:\n    #     w = count_no_of_ways(n - 1, i)\n    #     ways += w\n    # return ways\n    \n",
        "num_ids": 143
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    color_set = set()\n    color_set.add(k)\n    \n    ans = 0\n    for i in range(n):\n        if k not in color_set:\n            ans += 1\n        color_set.add(k - 1)\n        color_set.add(k + 1)\n        k -= 2\n        k += 2\n    return ans\n",
        "num_ids": 91
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    ways = [[0 for _ in range(k)] for _ in range(n+1)] \n    ways[0][0] = 1\n    ways[0][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j]\n            if j >= 2:\n                ways[i][j] = ways[i][j] + ways[i-1][j-2]\n    return ways[n][k]\n",
        "num_ids": 132
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n",
        "num_ids": 35
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    ways = [[0] * k for _ in range(n)]\n    \n    for i in range(0, k):\n        ways[0][i] = 1\n",
        "num_ids": 46
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n == 1 and k == 1:\n        return 2\n    elif n == 1 or k == 1:\n        return 1\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n",
        "num_ids": 73
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 1 or k <= 0:\n        return 0\n    if k == 1:\n        return n\n    dp_arr = [[0 for i in range(k)] for j in range(n)]\n    \n    for i in range(n):\n        dp_arr[i][0] = 1\n        dp_arr[i][1] = i+1\n        \n    for i in range(2, k):\n        dp_arr[0][i] = 1\n    \n    for i in range(1, n):\n        for j in range(1, k):\n            dp_arr[i][j] = dp_arr[i-1][j-1] + dp_arr[i-1][j]\n            \n    return dp_arr[n-1][k-1]\n",
        "num_ids": 190
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1:\n        return 1\n    if k==1:\n        return 2\n    if n==2:\n        return 4\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n",
        "num_ids": 69
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return (math.floor(n/m))\n",
        "num_ids": 18
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n       return \"NaN\"\n    elif n==0:\n       return \"NaN\"\n    elif m>0:\n       return n//m\n    else:\n       return n//m\n",
        "num_ids": 55
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #print(round(n/m,1) if n>m else round(n/m,2))\n    print(round(n/m,1) if n>m else round(n/m,2))\n    \nfind(2,5)\nfind(4,2)\nfind(0.5,1)\nfind(2,3)\nfind(3.5,5)\nfind(3,3)\n",
        "num_ids": 101
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        temp = m\n        m = n\n        n = temp\n    a = n\n    b = m\n    div = 1\n    while a!=b:\n        div = div+1\n        if a%2==0:\n            a=a/2\n        else:\n            a = (a+1)/2\n    return div\n",
        "num_ids": 88
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n//m)\n    return quotient\n",
        "num_ids": 19
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(n//m)\n",
        "num_ids": 10
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Write your code here\n    print(int(n/m))\n",
        "num_ids": 19
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Divide the number by 2 and make the quotient\n    quotient = n//2\n",
        "num_ids": 24
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print (n//m)\n",
        "num_ids": 10
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\n",
        "num_ids": 10
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=w\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    side1=w\n    side2=h/math.sqrt(2)\n    side3=side1-side2\n    return side3\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r*2\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    side1=w\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezium(w,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezoid(w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    side1=w\n    side2=h\n    side3=side1+side2\n    return side3\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    side1=w\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezium(w,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezoid(w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    side1=w\n    side2=h\n    side3=side1+side2\n    return side3\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    side1=w\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezium(w,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezoid(w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    side1=w\n    side2=h\n    side3=side1+side2\n    return side3\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    side1=w\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezium(w,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezoid(w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    side1=w\n    side2=h\n    side3=side1+side2\n    return side3\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    side1=w\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezium(w,h):\n    '''\n    Write a function to find the third side of a trapezium.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_trapezoid(w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    side1=w/math.sqrt(2)\n    side2=h/math.sqrt(2)\n    side3=side1+side2\n    return side3\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    side1=w\n    side2=h\n    side3=side1+side2\n    return side3\ndef otherside_square(w,h):\n    '''\n    Write a function to find the thir",
        "num_ids": 11
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = math.sqrt(w**2 + h**2)\n    return thirdside\n",
        "num_ids": 25
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s1 = (w*h)**(1/2)\n    s2 = math.sqrt(w**2 + h**2 - 2*w*h*math.cos(math.radians(30)))\n    return s1, s2\n",
        "num_ids": 61
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        s = (w ** 2 - h ** 2) / 2\n    else:\n        s = (h ** 2 - w ** 2) / 2\n    return math.sqrt(s)\n",
        "num_ids": 53
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_square(w,h):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2-h*w/math.sqrt(4*w*h)\n",
        "num_ids": 28
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h**0.5\n",
        "num_ids": 12
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(((math.sqrt(2)*w)/2),2)\n    \ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return round((w+h),2)\n    \ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return round((2*math.pi*r),2)\n    \ndef otherside_triangle(h,a,b):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return round((((a*h)/(a*math.sqrt(2)))+(((b*h)/(b*math.sqrt(2)))),2)\n    \ndef first_sides_square(s1,s2):\n    '''\n    Write a function to find the hypotenuse of a square.\n    '''\n    return round((math.sqrt((s1**2)+(s2**2))),2)\n    \ndef first_sides_rectangle(w,h):\n    '''\n    Write a function to find the hypotenuse of a rectangle.\n    '''\n    return round((w+h),2)\n    \ndef first_sides_triangle(a,b):\n    '''\n    Write a function to find the hypotenuse of a triangle.\n    '''\n    return round(((a*math.sqrt(2))+(b*math.sqrt(2))),2)\n    \ndef height_width_square(h,w):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return round(((h*w)/2),2)\n    \ndef height_width_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return round((w*h),2)\n    \ndef height_width_triangle(a,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return round((a*b)/2,2)\n    \ndef peri_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return round((math.pi*r**2),2)\n    \ndef peri_triangle(a,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return round((a*b*math.sqrt(2)/2),2)\n    \ndef peri_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return round((w*h),2)\n    \ndef area_square(h):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return round(((h**2)/4),2)\n    \ndef area_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return round((w*h),2)\n    \ndef area_triangle(a,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return round(((a*b)/2),2)\n    \ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return round((math.pi*(r**2)),2)\n    \ndef perimeter_square(h):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return round(((2*(h))),2)\n    \ndef perimeter_rectangle(w,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return round(((2*(w+h))),2)\n    \ndef perimeter_triangle(a,b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return round(((2*((a+b))),2))\n    \ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return round((2*math.pi*r),2)\n    \ndef side_square(h,w):\n    '''\n    Write a function to find the length of a side of a square.\n    '''\n    return round((math.sqrt((w**2)+(h**2))),2)\n    \ndef side_rectangle(w,h):\n    '''\n    Write a function to find the length of a side of a rectangle.\n    '''\n    return round((w+h),2)\n    \ndef side_triangle(a,b,h):\n    '''\n    Write a function to find the length of a side of a triangle.\n    '''\n    return round(((a+b)*math.sqrt(2)/2),2)\n    \ndef side_circle(r):\n    '''\n    Write a function to find the length of a side of a circle.\n    '''\n    return round((2*math.pi*r),2)\n    \ndef circum_circle(r):\n    '''\n    Write a function to find the circumfrence of a circle.\n    '''\n    return round((2*math.pi*r),2)\n    \ndef circum_triangle(a,b,h):\n    '''\n    Write a function to find the circumfrence of a triangle.\n    '''\n    return round(((a+b)*(math.sqrt(2)/2)),2)\n    \ndef circum_rectangle(w,h):\n    '''\n    Write a function to find the circumfrence of a rectangle.\n    '''\n    return round((w+h),2)\n    \ndef radius_circle(r):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    return round((math.pi*(r**2)),2)\n    \ndef radius_triangle(a,b,h):\n    '''\n    Write a function to find the radius of a triangle.\n    '''\n    return round(((a+b)/2),2)\n    \ndef radius_rectangle(w,h):\n    '''\n    Write a function to find the radius of a rectangle.\n    '''\n    return round((w+h),2)\n    \ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return round((math.pi*(r**2)),2)\n    \ndef area_triangle(a,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return round(((a*b)/2),2)\n    \ndef area_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return round((w*h),2)\n    \ndef area_square(h):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return round(((h**2)/4),2)\n    \ndef circum_circle(r):\n    '''\n    Write a function to find the circumfrence of a circle.\n    '''\n    return round((2*math.pi*r),2)\n    \ndef circum_triangle(a,b,h):\n    '''\n    Write a function to find the circumfrence of a triangle.\n    '''\n    return round(((a+b)*(math.sqrt(2)/2)),2)\n    \ndef circum_rectangle(w,h):\n    '''\n    Write a function to find the circumfrence of a rectangle.\n    '''\n    return round((w+h),2)\n    \ndef area_square(h):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return round(((h**2)/4),2)\n    \ndef area_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return round((w*h),2)\n    \ndef area_circle(r):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_val = None\n    for i in listval:\n        if max_val == None:\n            max_val = i\n        else:\n            if max_val < i:\n                max_val = i\n    return max_val\n    \n",
        "num_ids": 63
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(0, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n",
        "num_ids": 50
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1,len(listval)):\n        if max_value < listval[i]:\n            max_value = listval[i]\n    return max_value\n",
        "num_ids": 57
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    maxval = listval[0]\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval\n",
        "num_ids": 51
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Your code here\n    if len(listval) == 0:\n        return 0\n    if len(listval) == 1:\n        return listval[0]\n    if listval[0] > listval[1]:\n        return listval[0]\n    return max_val(listval[1:])\n",
        "num_ids": 77
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    a = listval\n    maxnum = 0\n    for i in range(len(a)):\n        if a[i] > maxnum:\n            maxnum = a[i]\n    return maxnum\n    \na = [1,2,3,4,5,6,7,8,9,10]\nprint(max_val(a))\n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    a = listval\n    minnum = 100\n    for i in range(len(a)):\n        if a[i] < minnum:\n            minnum = a[i]\n    return minnum\n    \na = [1,2,3,4,5,6,7,8,9,10]\nprint(min_val(a))\n",
        "num_ids": 88
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval = sorted(listval, key=lambda x: x[1])\n    return listval[-1][1]\n",
        "num_ids": 32
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    new_list = []\n    for i in listval:\n        if type(i) is list:\n            new_list.append(max_val(i))\n        else:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 61
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 1\n    for divisor in range(1,number+1):\n        if number%divisor==0:\n            result+=divisor\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number):\n        if number % i == 0:\n            result += i\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors += i\n    return divisors\n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    result = 0\n",
        "num_ids": 9
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    i = 1\n    while i < number:\n        if number%i == 0:\n            result = result + i\n        i = i + 1\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number = int(number)\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 56
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(1, number+1):\n        if number % x == 0:\n            sum += x\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for x in range(1, number):\n        if number % x == 0:\n            total += x\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number > 0:\n        divisors = set(range(1, number + 1))\n        for divisor in divisors:\n            if number % divisor == 0:\n                divisors.remove(divisor)\n        return number + sum(divisors)\n    else:\n        return 0\n",
        "num_ids": 78
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    \n    divisors = []\n    for i in range(1,number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 63
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def get_inv_count(arr, low, high):\n        count = 0\n        if high <= low:\n            return count\n",
        "num_ids": 33
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i=0\n    j=1\n    temp = arr[0]\n    count = 0\n    while j<len(arr):\n        if temp > arr[j]:\n            count += j-i\n            temp = arr[j]\n            i = j\n        j+=1\n    return count + 1\n",
        "num_ids": 74
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    def merge_sort(arr): \n        '''\n        Your code goes here\n        '''\n        if len(arr) <= 1: \n            return arr\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n",
        "num_ids": 44
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    else:\n        mid = len(arr) // 2\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n",
        "num_ids": 51
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Code here\n    m=len(arr)\n    i=0\n    j=0\n    c=0\n    while(j<m-1):\n        if(arr[j]<arr[j+1]):\n            i+=1\n            c+=j-i\n        j+=1\n    return c\n",
        "num_ids": 77
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    print(\"Enter the size of array:\")\n    size = int(input())\n    arr = [int(x) for x in input().split()]\n    temp = arr.copy()\n    temp.sort()\n    inv_count = 0\n    print(\"The sorted array: \")\n    for i in range(size):\n        print(temp[i], end ='')\n    for i in range(size):\n        for j in range(size):\n            if(arr[i] > arr[j]):\n                inv_count = inv_count + 1\n            print(arr[j], end ='')\n    return inv_count\n    \n",
        "num_ids": 153
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_and_count(arr,l,m,r): \n        i, j, k = 0, 0, 0\n        L, R = l, r\n        inv_count = 0\n",
        "num_ids": 49
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    n = len(arr)\n    # calculate the number of inversions in left and right sub-array\n    left, right = 0, n - 1\n    inv_count = 0\n    while left <= right:\n        if arr[left] <= arr[right]:\n            swap(arr, left, right)\n            left += 1\n        else:\n            inv_count += n - left\n            swap(arr, left, right)\n            right -= 1\n    # after the above loop, we have a sorted sub-array.\n    return inv_count\n",
        "num_ids": 160
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return 0\n",
        "num_ids": 23
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def mergeSort(arr): \n        if len(arr) >1: \n            mid = len(arr)//2 \n            L = arr[:mid] \n            R = arr[mid:] \n            mergeSort(L) \n            mergeSort(R) \n            i = j = k = 0\n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i+=1\n                else: \n                    arr[k] = R[j] \n                    j+=1\n                k+=1\n            while i < len(L): \n                arr[k] = L[i] \n                i+=1\n                k+=1\n            while j < len(R): \n                arr[k] = R[j] \n                j+=1\n                k+=1\n    mergeSort(arr) \n    inv_count = 0\n    for i in range(len(arr)): \n        if arr[i] > i: \n            inv_count += 1\n    return inv_count \n    \n",
        "num_ids": 273
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    \n    return list2\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flattened_list += flatten_list(i)\n        else:\n            flattened_list.append(i)\n    return flattened_list\n",
        "num_ids": 66
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n",
        "num_ids": 7
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n",
        "num_ids": 9
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for i in list1:\n        if isinstance(i, list):\n            res += i\n        else:\n            res.append(i)\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n",
        "num_ids": 9
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) == list:\n            list2 = list2 + flatten_list(i)\n        else:\n            list2.append(i)\n    return list2\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for item in list1:\n        if isinstance(item, list):\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1)!= list:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tuples = stdata\n    list_of_tuples.sort(key = lambda x: x[0])\n    list_of_tuples.sort(key = lambda x: x[1])\n    current_aggregate = 1\n    for i in range(len(list_of_tuples)):\n        current_aggregate = current_aggregate + list_of_tuples[i][2]\n        if i == len(list_of_tuples)-1:\n            break\n        if list_of_tuples[i][0] <= list_of_tuples[i+1][0]:\n            current_aggregate = current_aggregate + list_of_tuples[i+1][2]\n    return current_aggregate\n",
        "num_ids": 180
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = max(stdata, key=lambda t: t[1])\n    return max_agg\n    \ndef max_aggregate_key(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples using the key as the aggregation function.\n    '''\n    max_agg = max(stdata, key=lambda t: (t[0], t[1]))\n    return max_agg\n",
        "num_ids": 34
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # length = len(stdata)\n    max_val = float('-inf')\n    max_tup = None\n    for tup in stdata:\n        if tup[1]>max_val:\n            max_val = tup[1]\n            max_tup = tup\n    return max_tup\n",
        "num_ids": 80
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    mydict = defaultdict(int)\n    for tup in stdata:\n        mydict[tup[0]] += tup[1]\n    max_key = max(mydict, key=mydict.get)\n    return(max_key, mydict[max_key])\n",
        "num_ids": 70
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # The first tuple is the key and the second tuple is the value.\n    # The key must be unique\n    # The second tuple must be a number\n    # The second tuple can have any number of values\n    # The final value must be the largest of the other values.\n    # Inputs:\n    # A list of tuples as described above\n    # Output:\n    # A tuple as described above\n    # Note: The keys of the dictionary should be unique.\n    # Logic:\n    # Create a dictionary using the first tuple as the key.\n    # Then create another dictionary, and set the first tuple as the key\n    # and the second tuple as the value.\n    # Finally, loop through the list of tuples, and check if the key is in\n    # the dictionary. If it is, then we have reached the end of the list.\n    # If the key is not in the dictionary, then we add it to the dictionary.\n    # Now if the key is in the dictionary, then we see if the value is in the\n    # dictionary, if it is then we find the largest of the values.\n    # If the value is not in the dictionary, then we add the value to the\n    # dictionary and then we find the largest of the values.\n    # Then we append the tuple to the final list.\n    final_list = []\n    # first tuple is the key and second tuple is the value\n    dictionary = {}\n    key = stdata[0][0]\n    dictionary[key] = stdata[0][1]\n    for i in stdata[1:]:\n        if i[0] == key:\n            dictionary[key] = max(i[1], dictionary[key])\n        else:\n            final_list.append((key,dictionary[key]))\n            key = i[0]\n            dictionary[key] = i[1]\n    final_list.append((key,dictionary[key]))\n    return tuple(final_list)\n",
        "num_ids": 455
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    _max = -1\n    _data = list()\n    for _tup in stdata:\n        if _max < _tup[1]:\n            _max = _tup[1]\n    for _tup in stdata:\n        if _tup[1] == _max:\n            _data.append(_tup[0])\n    return _data\n",
        "num_ids": 89
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    count = 0\n    max_agg = 0\n    for ele in stdata:\n        if ele[0] > count:\n            count = ele[0]\n    for ele in stdata:\n        if max_agg < count * ele[1]:\n            max_agg = count * ele[1]\n    return max_agg\n",
        "num_ids": 79
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_count = 0\n    for a,b in stdata:\n        if b > max_sum:\n            max_sum = b\n            max_count = 1\n        elif b == max_sum:\n            max_count += 1\n    return max_sum,max_count\n",
        "num_ids": 76
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store key value pairs for a given state\n    states = defaultdict(list)\n    \n    # Iterate through the list of tuples\n    for state, capital, gdp in stdata:\n        states[state].append((capital, gdp))\n        \n    # Return the max aggregege value for each state\n    return (max(states, key=lambda state: sum(state[1]))[1])\n",
        "num_ids": 104
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # print('stdata',stdata)\n    # if len(stdata) == 1:\n    #     return stdata[0][0]\n    # else:\n    #     stdata = sorted(stdata, key=lambda x: x[0])\n    #     # print('sorted',stdata)\n    #     ans = 0\n    #     for i in range(0, len(stdata)):\n    #         # print('i',i)\n    #         if i == len(stdata) - 1:\n    #             ans = stdata[i][0] + ans\n    #             break\n    #         else:\n    #             # print('i',i)\n    #             ans = max(stdata[i][0] + ans, stdata[i+1][0])\n    #     # print('ans',ans)\n    #     return ans\n    \n    \n    max_res = 0\n    for i in stdata:\n        max_res = max(max_res, i[0] + max_aggregate(stdata[i+1:]))\n    return max_res\n",
        "num_ids": 262
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 2\n    cnt = 0\n    for i in range(2**n, 2**(n+1)):\n        s = bin(i)[2:]\n        l = len(s)\n        s = '0'*(n-l) + s\n        if s[0] == '1' and s[1] == '1':\n            cnt += 1\n    return cnt\n",
        "num_ids": 102
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1 << (n + 1)): \n        s = 0\n        for j in range(n): \n            if (i & (1 << j)) > 0: \n                s += 1\n        if s == (n + 1): \n            count += 1\n    return count \n",
        "num_ids": 79
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 0\n    count=1\n    while True:\n        sum_last_n_bit=sum_last_n_bit_naive(n,1)\n        sum_first_n_bit=sum_first_n_bit_naive(n,0)\n        if sum_last_n_bit==sum_first_n_bit:\n            count+=1\n            if count==2**(n+1):\n                return count\n        n-=1\n",
        "num_ids": 119
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n, x, y):\n        if x == y == 0:\n            return 1\n        if x == y == 1:\n            return 0\n        if x == y == 0 and (n & 1) == 0:\n            return 0\n        if x == y == 0 and (n & 1) == 1:\n            return 1\n        if x == y == 1 and (n & 1) == 1:\n            return 0\n        if x == y == 1 and (n & 1) == 0:\n            return 1\n        return count(n, x >> 1, y) + count(n, x, y >> 1)\n    return count(n, 2 ** n, 2 ** n)\n",
        "num_ids": 162
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n <= 0: \n        return 0\n    if n == 1: \n        return 1\n",
        "num_ids": 26
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return (n*(n+1))//2\n",
        "num_ids": 15
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n",
        "num_ids": 37
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    #recursive\n    return count_binary_seq(n - 2) + count_binary_seq(n - 1)\n    \n    \ndef count_binary_seq_optimized(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    #general case\n    return (2**(n))*count_binary_seq_optimized(n - 2) + count_binary_seq_optimized(n - 1)\n    \n    ",
        "num_ids": 76
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    '''\n    1. Initialize an array seq_counts of size 2^n.\n    2. Initialize the variable ans to 0.\n    3. Iterate from 0 to 2^n - 1.\n    4. For every number i, j, check if seq_counts[i] + seq_counts[j] = seq_counts[2i + j].\n    5. If it is true, increase ans by 1.\n    6. Return ans.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive number N. Find count of all possible binary numbers of length N such that their sum is divisible by 3.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive number N. Find count of all possible binary numbers of length N such that their sum is divisible by 3.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive number N. Find count of all possible binary numbers of length N such that their sum is divisible by 3.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive number N. Find count of all possible binary numbers of length N such that their sum is divisible by 3.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive number N. Find count of all possible binary numbers of length N such that their sum is divisible by 3.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive number N. Find count of all possible binary numbers of length N such that their sum is divisible by 3.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive number N. Find count of all possible binary numbers of length N such that their sum is divisible by 3.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive number N. Find count of all possible binary numbers of length N such that their sum is divisible by 3.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive number N. Find count of all possible binary numbers of length N such that their sum is divisible by 3.\n    '''\n    def count_binary_seq(n): \n        seq_counts = [0] * 2**n\n        ans = 0\n        for i in range(2**n):\n            for j in range(i, 2**n):\n                if seq_counts[i] + seq_counts[j] == seq_counts[2*i + j]:\n                    ans += 1\n        return ans\n        \n    #print(count_binary_seq(3))\n    \n    #Expected output: 1\n    #Actual output: 1\n    \n    '''\n    Given a positive numbe",
        "num_ids": 8
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_bit_sequences(n):\n        count_bit_sequences = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n        def find_count(n, m):\n            if m == 0:\n                return 0\n            if count_bit_sequences[n][m]!= 0:\n                return count_bit_sequences[n][m]\n            if n == 0:\n                if m % 2 == 0:\n                    return 1\n                else:\n                    return 0\n            count = 0\n            if m % 2 == 0:\n                count = find_count(n - 1, m // 2) + find_count(n - 1, m // 2)\n            else:\n                count = find_count(n - 1, m // 2) + find_count(n - 1, m // 2)\n            count_bit_sequences[n][m] = count\n            return count\n        return find_count(n, n)\n    return count_bit_sequences(n)\n",
        "num_ids": 243
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 1:\n        return 1\n    if d == {}:\n        return 0\n    return 1 + max(list(map(dict_depth, d.values())))\n",
        "num_ids": 47
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max([dict_depth(x) for x in d.values()])\n",
        "num_ids": 23
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(map(dict_depth, d.values()))\n",
        "num_ids": 39
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for i in d.values():\n            depth += dict_depth(i)\n    return depth + 1\n",
        "num_ids": 42
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return sum(map(dict_depth, d.values())) + 1 if d else 0\n",
        "num_ids": 24
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise ValueError(\"Only dictionaries allowed\")\n",
        "num_ids": 24
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return 1 + max(map(dict_depth,d.values()))\n",
        "num_ids": 35
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(lambda x: 1 + dict_depth(x), d.values()))\n",
        "num_ids": 25
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d)==0:\n        return 0\n    else:\n        key_max=0\n        for k in d.keys():\n            if len(d[k])>key_max:\n                key_max=len(d[k])\n        return key_max+1\n    \n    \n    \n    \n",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d:\n        if type(d[i]) is dict:\n            depth += 1\n            depth = dict_depth(d[i])\n    return depth\n",
        "num_ids": 47
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr_len = len(arr)\n    #print(arr_len)\n    index_value = index%arr_len\n    #print(index_value)\n    rotations = rotations%arr_len\n    #print(rotations)\n    for i in range(rotations) :\n        index = (index-arr[index_value])%arr_len\n        index_value = index%arr_len\n        #print(index_value)\n    return arr[index]\n    \n",
        "num_ids": 117
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index>=len(arr)) : return arr[index]\n    if(index<0) : return arr[index]\n    if(index<(len(arr)/2)) :\n        return find_Element(arr,ranges,rotations,index+1)\n    else :\n        return find_Element(arr,ranges,rotations,index-1)\n        \ndef rotated_array_search(input_list, number):\n    '''\n    Find the index by searching in a rotated sorted array\n    '''\n    #if rotated array is empty or only one element\n    if len(input_list)==0 : return -1\n    if len(input_list)==1 : return 0 if input_list[0]==number else -1\n    \n    #calculate the middle index\n    mid = len(input_list)//2\n    #check the middle element\n    if input_list[mid]==number : return mid\n    if input_list[mid]>number :\n        #when number lies between middle and right side elements, search in right side\n        return rotated_array_search(input_list[mid:],number)\n    else:\n        #when number lies between left side and right side elements, search in left side\n        return rotated_array_search(input_list[:mid],number)\n    \ndef linear_search(input_list, number):\n    for index,element in enumerate(input_list):\n        if element == number:\n            return index\n    return -1\n",
        "num_ids": 230
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = index\n    count = 0\n    while i > 0 :\n        i = i // 10\n        count = count + 1\n    pos = 0\n    while pos < count :\n        ranges[index + pos] = ranges[index + pos] - (pos * 10)\n        pos = pos + 1\n    pos = 0\n    while pos < count :\n        ranges[index + pos] = ranges[index + pos] + (pos * 10)\n        pos = pos + 1\n    return ranges[index]\n        \n",
        "num_ids": 124
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(\"find_Element\",arr,\"rotations\",rotations,\"index\",index)\n    if len(arr)==0:\n        return -1\n    if index==len(arr):\n        return arr[0]\n    if index<0:\n        return -1\n    if index>=len(arr):\n        return -1\n    rot_index=index+rotations\n    if rot_index>len(arr)-1:\n        rot_index=rot_index%len(arr)\n    return arr[rot_index]\n",
        "num_ids": 126
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    l = len(arr)\n    for i in range(index+1,index+l+1) :\n        if i >= l :\n            return arr[i%l-1]\n        else :\n            arr[i%l-1],arr[(i+1)%l-1] = arr[(i+1)%l-1],arr[i%l-1]\n            rotations += 1\n            if rotations >= ranges :\n                rotations = 0\n                index = (index+1)%l\n            else :\n                break\n    return arr[index%l]\n",
        "num_ids": 140
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    number = arr[index]\n    count = 0\n    for i in range(rotations):\n        count += number\n        count += 1\n    print(count % ranges)\n",
        "num_ids": 43
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = int((start+end)/2)\n        if arr[mid] == index:\n            return mid\n        elif index > arr[mid] :\n            start = mid + 1\n        else:\n            end = mid - 1\n    if start > end :\n        return -1\n    \n",
        "num_ids": 93
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr) == 0 :\n        return -1\n    else :\n        index = index % len(arr)\n        rotation = 1\n        while index!= 0:\n            if index >= len(arr) :\n                return -1\n            if rotation > rotations :\n                return -1\n            else :\n                index = (index+ranges) % len(arr)\n                rotation += 1\n                #print(index)\n        return arr[index-1]\n",
        "num_ids": 114
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    element=arr[index]\n    count=0\n    if element in ranges :\n        count=ranges[element]\n    else :\n        ranges[element]=rotations\n    return count+1\n",
        "num_ids": 50
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) : \n        if index <= ranges[i] :\n            if (i+1)%rotations == 0 :\n                return arr[i]\n            else : \n                index -= ranges[i]\n                index = (index+1)%rotations\n",
        "num_ids": 72
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = 'p'\n    for i in words:\n        if i.startswith(p):\n            return i\n",
        "num_ids": 31
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return_list = []\n    for word in words:\n        if word[0] == 'p':\n            return_list.append(word)\n    return return_list\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            print(i)\n",
        "num_ids": 26
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = re.findall('^p', words)\n    words = words[1]\n    words = re.split(' ', words)\n    return (words[0], words[1])\n    \ndef end_withc(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'c'.\n    '''\n    words = re.findall('c$', words)\n    words = words[0]\n    words = re.split(' ', words)\n    return (words[0], words[1])\n    \ndef end_withb(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'b'.\n    '''\n    words = re.findall('b$', words)\n    words = words[0]\n    words = re.split(' ', words)\n    return (words[0], words[1])\n    \ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    words = re.findall('^n', words)\n    words = words[1]\n    words = re.split(' ', words)\n    return (words[0], words[1])\n    \ndef nword(words):\n    '''\n    Write a function to return the set of all words in a list of words.\n    '''\n    words = re.findall('\\w+', words)\n    words = set(words)\n    return words\n    \ndef all_caps(words):\n    '''\n    Write a function to return the set of all words in a list of words that are all capitalized.\n    '''\n    words = re.findall('\\w+', words)\n    words = set(words)\n    words = {word.upper() for word in words}\n    return words\n    \ndef all_vowels(words):\n    '''\n    Write a function to return the set of all words in a list of words that have at least one vowel.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    words = re.findall('\\w+', words)\n    words = set(words)\n    words = {word for word in words if vowels.issubset(set(word))}\n    return words\n    \ndef all_consonants(words):\n    '''\n    Write a function to return the set of all words in a list of words that have at least one consonant.\n    '''\n    consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'}\n    words = re.findall('\\w+', words)\n    words = set(words)\n    words = {word for word in words if consonants.issubset(set(word))}\n    return words\n    \ndef all_numbers(words):\n    '''\n    Write a function to return the set of all words in a list of words that have at least one digit.\n    '''\n    words = re.findall('\\d+', words)\n    words = set(words)\n    words = {word for word in words if re.findall('\\d+', words)}\n    return words\n    \ndef only_letters(words):\n    '''\n    Write a function to return the set of all words in a list of words that have at least one letter.\n    '''\n    words = re.findall('[a-zA-Z]+', words)\n    words = set(words)\n    words = {word for word in words}\n    return words\n    \ndef in_or_not(words):\n    '''\n    Write a function to return the set of all words in a list of words that have at least one vowel or consonant.\n    '''\n    words = re.findall('[a-zA-Z]+', words)\n    words = set(words)\n    words = {word for word in words if re.findall('[a-zA-Z]+', words)}\n    return words\n    \ndef in_or_not_whole(words):\n    '''\n    Write a function to return the set of all words in a list of words that have at least one vowel or consonant or digit.\n    '''\n    words = re.findall('[a-zA-Z]+', words)\n    words = set(words)\n    words = {word for word in words if re.findall('[a-zA-Z]+', words)}\n    return words\n    \ndef word_magnitude(words):\n    '''\n    Write a function to return the set of all words in a list of words that have at least one vowel or consonant or digit.\n    '''\n    words = re.findall('[a-zA-Z]+', words)\n    words = set(words)\n    words = {word for word in words if re.findall('[a-zA-Z]+', words)}\n    return (len(words),words)\n    \ndef word_len(words):\n    '''\n    Write a function to return the set of all words in a list of words that have at least one letter.\n    '''\n    words = re.findall('[a-zA-Z]+', words)\n    words = set(words)\n    words = {word for word in words if re.findall('[a-zA-Z]+', words)}\n    return (len(words),words)\n    \ndef main():\n    print(\"\\n\\n\\n\")\n    print(\"Welcome to the program.\")\n    print(\"Please enter the following commands:\")\n    print(\"a) Start with 'p', then end with 'c'\")\n    print(\"b) Start with 'n', then end with 'b'\")\n    print(\"c) Start with 'n', then end with 'i'\")\n    print(\"d) Start with 'n', then end with'm'\")\n    print(\"e) Start with 'n', then end with 'g'\")\n    print(\"f) Start with 'n', then end with's'\")\n    print(\"g) Start with 'n', then end with 'c'\")\n    print(\"h) Start with 'n', then end with 't'\")\n    print(\"i) Start with 'n', then end with 'l'\")\n    print(\"j) Start with 'n', then end with 'k'\")\n    print(\"k) Start with 'n', then end with 'w'\")\n    print(\"l) Start with 'n', then end with 'p'\")\n    print(\"m) Start with 'n', then end with 'x'\")\n    print(\"n) Start with 'n', then end with 'a'\")\n    print(\"o) Start with 'n', then end with's'\")\n    print(\"p) Start with 'n', then end with 'u'\")\n    print(\"q) Start with 'n', then end with 'y'\")\n    print(\"r) Start with 'n', then end with'm'\")\n    print(\"s) Start with 'n', then end with 'd'\")\n    print(\"t) Start with 'n', then end with 'e'\")\n    print(\"u) Start with 'n', then end with 'j'\")\n    print(\"v) Start with 'n', then end with 'k'\")\n    print(\"w) Start with 'n', then end with 'l'\")\n    print(\"x) Start with 'n', then end with 'v'\")\n    print(\"y) Start with 'n', then end with 'z'\")\n    print(\"z) Start with 'n', then end with 'o'\")\n    print(\"numeric\")\n    print(\"n\")\n    print(\"consonants\")\n    print(\"b\")\n    print(\"vowels\")\n    print(\"j\")\n    print(\"v\")\n    print(\"e\")\n    print(\"i\")\n    print(\"a\")\n    print(\"c\")\n    print(\"k\")\n    print(\"l\")\n    print(\"r\")\n    print(\"x\")\n    print(\"w\")\n    print(\"t\")\n    print(\"d\")\n    print(\"m\")\n    print(\"g\")\n    print(\"f\")\n    print(\"s\")\n    print(\"n\")\n    print(\"y\")\n    print(\"q\")\n    print(\"o\")\n    print(",
        "num_ids": 732
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = list(words)\n    p_start = []\n    for word in words:\n        if word[0] == 'p':\n            p_start.append(word)\n    return (p_start[0], p_start[1])\n",
        "num_ids": 61
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return (word,words[words.index(word)+1])\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result=[]\n    words=words.split()\n    for i in words:\n        if i.startswith('p'):\n            result.append(i)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start_p = []\n    for word in words:\n        if word.startswith('p'):\n            start_p.append(word)\n    return start_p\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_word=[]\n    for i in words:\n        if i.startswith('p'):\n            p_word.append(i)\n    return p_word\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith(\"p\"):\n            return i,words.pop(words.index(i))\n    print(\"No word starting with 'p' found!\")\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case - when there are no more elements in the list\n    if n == 0:\n        return 0\n    elif k <= 0:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Dictionary to store results of subproblems.\n    result = {}\n    # Base case: Only one element.\n    if n == 1:\n        return a[0]\n    # Base case: If k is greater than n, then the entire subsequence is not possible.\n    if k > n:\n        return 0\n    # Else, call the function for k - 1 (i.e., call for k - 1)\n    result[index, k] = max(max_sum_increasing_subseq(a, n, i, k) for i in range(index + 1, n))\n    \n    '''\n    Following is the top down approach to solve this problem.\n    We will use the previous results from the subproblems and solve the problem\n    for the next index and then for the next subsequence starting with that index.\n    Let us start with the problem for next index.\n    If we are at index k, then we cannot include the next k element in the subsequence.\n    Let us consider next k element as k + 1th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    Let us consider next k element as k + 2th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + nth element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-1)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-2)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-3)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-4)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-5)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-6)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-7)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-8)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-9)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-10)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-11)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-12)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-13)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-14)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-15)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-16)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-17)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-18)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-19)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-20)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-21)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-22)th element.\n    So max_sum_increasing_subseq(a, n, k) = max(max_sum_increasing_subseq(a, n, i) for i in range(k+1, n) )\n    ...\n    Let us consider next k element as k + (n-23)th element.\n    S",
        "num_ids": 1840
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= 0 or index < 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = 0\n    m = 0\n    for i in range(n):\n        s = s + a[i]\n        if i > k:\n            if s > m:\n                m = s\n        elif i == k:\n            m = s\n    return m\n    \n    \ndef max_sum_subarray(a, n):\n    '''\n    Write a function to find the maximum sum of non-overlapping subarrays of a given array\n    '''\n    m = 0\n    for i in range(n):\n        for j in range(i,n):\n            s = sum(a[i:j+1])\n            if s > m:\n                m = s\n    return m\n    \n    \ndef max_cross_product(a, n):\n    '''\n    Write a function to find the maximum cross product of 3 non-overlapping subarrays of a given array\n    '''\n    m = 0\n    for i in range(n-2):\n        for j in range(i,n-1):\n            s = a[i]*a[j]*a[j+1]\n            if s > m:\n                m = s\n    return m\n    \n    \ndef max_trees(a, n):\n    '''\n    Write a function to find the maximum number of trees that can be formed using the set of given n vertices, where each vertex can be covered with a binary tree of any size.\n    '''\n    m = 0\n    for i in range(n-1):\n        count = 0\n        for j in range(i,n):\n            if a[i] < a[j]:\n                count += 1\n        m = max(m, count)\n    return m\n    \n    \ndef longest_increasing_subsequence(a, n):\n    '''\n    Write a function to find the longest increasing subsequence of a given array\n    '''\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if a[i-1] <= a[j-1]:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][n]\n    \n    \ndef longest_substring(a, n):\n    '''\n    Write a function to find the longest substring in a given array which is not a continuous one\n    '''\n    l = 0\n    r = 0\n    s = ''\n    for i in range(n):\n        while l < n and r < n and a[l] == a[r]:\n            s = s + a[l]\n            l += 1\n            r += 1\n        if i == l:\n            l = r\n    return len(s)\n    \n    \ndef longest_increasing_substring(a, n):\n    '''\n    Write a function to find the longest increasing substring of a given array\n    '''\n    l = 0\n    r = 0\n    s = ''\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if a[i-1] > a[j-1]:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    for i in range(n,0,-1):\n        for j in range(n,0,-1):\n            if dp[i][j]!= 0:\n                if a[i-1] > a[j-1]:\n                    s = s + a[i-1]\n                else:\n                    s = s + a[j-1]\n                break\n    return s\n    \n    \ndef longest_palindrome(a, n):\n    '''\n    Write a function to find the longest palindrome in a given array\n    '''\n    l = 0\n    r = 0\n    s = ''\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if a[i-1] == a[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    for i in range(n,0,-1):\n        for j in range(n,0,-1):\n            if dp[i][j]!= 0:\n                s = s + a[i-1]\n                break\n    return s\n    \n    \ndef max_sum_subarray(a, n):\n    '''\n    Write a function to find the maximum sum of non-overlapping subarrays of a given array\n    '''\n    s = 0\n    m = 0\n    for i in range(n):\n        s = s + a[i]\n        if s > m:\n            m = s\n        for j in range(i+1,n):\n            s = s - a[j] + a[i]\n            if s > m:\n                m = s\n    return m\n    \n    \ndef max_sum_of_array_of_0s_and_1s(a, n):\n    '''\n    Write a function to find the maximum sum of subarrays of a given array having only 0 and 1 as elements\n    '''\n    s = 0\n    m = 0\n    for i in range(n):\n        s = s + a[i]\n        if s > m:\n            m = s\n        if a[i] == 1:\n            s = 0\n    return m\n    \n    \ndef max_sum_of_array_of_0s_and_1s(a, n):\n    '''\n    Write a function to find the maximum sum of subarrays of a given array having only 0 and 1 as elements\n    '''\n    s = 0\n    m = 0\n    for i in range(n):\n        s = s + a[i]\n        if s > m:\n            m = s\n        if a[i] == 1:\n            s = 0\n    return m\n    \n    \ndef max_sub_sum(a, n):\n    '''\n    Write a function to find the maximum sum of subarrays of a given array\n    '''\n    s = 0\n    m = 0\n    for i in range(n):\n        s = s + a[i]\n        if s > m:\n            m = s\n    return m\n    \n    \ndef max_sub_sum(a, n):\n    '''\n    Write a function to find the maximum sum of subarrays of a given array\n    '''\n    s = 0\n    m = 0\n    for i in range(n):\n        s = s + a[i]\n        if s > m:\n            m = s\n    return m\n    \n    \ndef max_sub_sum(a, n):\n    '''\n    Write a function to find the maximum sum of subarrays of a given array\n    '''\n    s = 0\n    m = 0\n    for i in range(n):\n        s = s + a[i]\n        if s > m:\n            m = s\n    return m\n    \n    \ndef max_sub_sum(a, n):\n    '''\n    Write a function to find the maximum sum of subarrays of a given array\n    '''\n    s = 0\n    m = 0\n    for i in range(n):\n        s = s + a[i]\n        if s > m:\n            m = s\n    return m\n    \n    \ndef max_sub_sum(a, n):\n    '''\n    Write a function to find the maximum sum of subarrays of a given array\n    '''\n    s = 0\n    m = 0\n    for i in rang",
        "num_ids": 17
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    kth_element = a[k]\n    if k == index or kth_element <= a[index - 1]:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + kth_element)\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n",
        "num_ids": 132
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # if an element was not requested, return 0\n    if (index == n):\n        return 0\n    \n    # if the max sum of increasing subsequence is less than the kth element\n    max_sum = max(max_sum_increasing_subseq(a, n, index + 1, k),\n                  max_sum_increasing_subseq(a, n, index + 1, k + a[index]) + a[index])\n    \n    return max_sum\n    \n",
        "num_ids": 115
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    max_sum = float('-inf')\n    max_ind = -1\n    \n    prefix = [-math.inf]*n\n    prefix[index] = a[index]\n    \n    for i in range(index+1, n):\n        prefix[i] = prefix[i-1] + a[i]\n        \n    for i in range(n):\n        sum_seq = prefix[i]\n        if sum_seq > k and sum_seq > max_sum:\n            max_ind = i\n            max_sum = sum_seq\n    \n    return max_ind, max_sum\n",
        "num_ids": 146
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if k >= n:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base case\n    if index == -1 or k == index:\n        return 0\n",
        "num_ids": 23
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    summ = 0\n    dp = [[False for j in range(k+1)] for i in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n        summ = 0\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if j == 0:\n                dp[i][j] = True\n            else:\n                dp[i][j] = False\n                if a[i-1] <= j:\n                    dp[i][j] = dp[i-1][j-a[i-1]] or dp[i-1][j]\n            if dp[i][j]:\n                summ = max(summ, a[i-1] + summ)\n    return summ\n        ",
        "num_ids": 196
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>len(tuplex):\n        raise ValueError(\"not such tuple\")\n    else:\n        return tuplex[0:m]+tuplex[m+1:n]+tuplex[n:]\n",
        "num_ids": 54
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[1:]+tuplex[:1]\n",
        "num_ids": 19
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m]+tuplex[m+1:n]+tuplex[n+1:]\n",
        "num_ids": 31
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tmp=deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            tmp[i][j]=str(tmp[i][j])\n    return tmp\ndef subrow(row,m):\n    '''\n    Write a function to get a subrow of a row.\n    '''\n    tmp=deepcopy(row)\n    for i in range(m):\n        tmp[i]=str(tmp[i])\n    return tmp\ndef subrow_tuplex(tuplex,m):\n    '''\n    Write a function to get a subrow of a row.\n    '''\n    tmp=deepcopy(tuplex)\n    for i in range(m):\n        tmp[i]=str(tmp[i])\n    return tmp\ndef my_join(lst,sep):\n    return sep.join(lst)\ndef my_join_tuplex(tuplex,sep):\n    '''\n    Write a function to join the list with a specified symbol, and also get a formatted string of the joined list.\n    '''\n    lst=[]\n    for i in range(len(tuplex)):\n        for j in range(len(tuplex[0])):\n            lst.append(str(tuplex[i][j]))\n    return my_join(lst,sep)\ndef row_add(row1,row2):\n    '''\n    Write a function to add two rows.\n    '''\n    res=[]\n    for i in range(len(row1)):\n        res.append(row1[i]+row2[i])\n    return res\ndef row_add_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to add two rows.\n    '''\n    res=[]\n    for i in range(len(tuplex1)):\n        res.append(tuplex1[i]+tuplex2[i])\n    return res\ndef row_sub(row1,row2):\n    '''\n    Write a function to subtract two rows.\n    '''\n    res=[]\n    for i in range(len(row1)):\n        res.append(row1[i]-row2[i])\n    return res\ndef row_sub_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to subtract two rows.\n    '''\n    res=[]\n    for i in range(len(tuplex1)):\n        res.append(tuplex1[i]-tuplex2[i])\n    return res\ndef row_mul(row1,row2):\n    '''\n    Write a function to multiply two rows.\n    '''\n    res=[]\n    for i in range(len(row1)):\n        res.append(row1[i]*row2[i])\n    return res\ndef row_mul_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to multiply two rows.\n    '''\n    res=[]\n    for i in range(len(tuplex1)):\n        res.append(tuplex1[i]*tuplex2[i])\n    return res\ndef column_add(col1,col2):\n    '''\n    Write a function to add two columns.\n    '''\n    res=[]\n    for i in range(len(col1)):\n        res.append(col1[i]+col2[i])\n    return res\ndef column_add_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to add two columns.\n    '''\n    res=[]\n    for i in range(len(tuplex1)):\n        res.append(tuplex1[i]+tuplex2[i])\n    return res\ndef column_sub(col1,col2):\n    '''\n    Write a function to subtract two columns.\n    '''\n    res=[]\n    for i in range(len(col1)):\n        res.append(col1[i]-col2[i])\n    return res\ndef column_sub_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to subtract two columns.\n    '''\n    res=[]\n    for i in range(len(tuplex1)):\n        res.append(tuplex1[i]-tuplex2[i])\n    return res\ndef column_mul(col1,col2):\n    '''\n    Write a function to multiply two columns.\n    '''\n    res=[]\n    for i in range(len(col1)):\n        res.append(col1[i]*col2[i])\n    return res\ndef column_mul_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to multiply two columns.\n    '''\n    res=[]\n    for i in range(len(tuplex1)):\n        res.append(tuplex1[i]*tuplex2[i])\n    return res\ndef table_add(t1,t2):\n    '''\n    Write a function to add two tables.\n    '''\n    m=len(t1)\n    n=len(t2)\n    if m!=n:\n        raise Exception('t1 and t2 are not the same length.')\n    else:\n        res=[]\n        for i in range(m):\n            res.append(row_add(t1[i],t2[i]))\n        return res\ndef table_add_tuplex(t1,t2):\n    '''\n    Write a function to add two tables.\n    '''\n    m=len(t1)\n    n=len(t2)\n    if m!=n:\n        raise Exception('t1 and t2 are not the same length.')\n    else:\n        res=[]\n        for i in range(m):\n            res.append(row_add_tuplex(t1[i],t2[i]))\n        return res\ndef table_sub(t1,t2):\n    '''\n    Write a function to subtract two tables.\n    '''\n    m=len(t1)\n    n=len(t2)\n    if m!=n:\n        raise Exception('t1 and t2 are not the same length.')\n    else:\n        res=[]\n        for i in range(m):\n            res.append(row_sub(t1[i],t2[i]))\n        return res\ndef table_sub_tuplex(t1,t2):\n    '''\n    Write a function to subtract two tables.\n    '''\n    m=len(t1)\n    n=len(t2)\n    if m!=n:\n        raise Exception('t1 and t2 are not the same length.')\n    else:\n        res=[]\n        for i in range(m):\n            res.append(row_sub_tuplex(t1[i],t2[i]))\n        return res\ndef table_mul(t1,t2):\n    '''\n    Write a function to multiply two tables.\n    '''\n    m=len(t1)\n    n=len(t2)\n    if m!=n:\n        raise Exception('t1 and t2 are not the same length.')\n    else:\n        res=[]\n        for i in range(m):\n            res.append(row_mul(t1[i],t2[i]))\n        return res\ndef table_mul_tuplex(t1,t2):\n    '''\n    Write a function to multiply two tables.\n    '''\n    m=len(t1)\n    n=len(t2)\n    if m!=n:\n        raise Exception('t1 and t2 are not the same length.')\n    else:\n        res=[]\n        for i in range(m):\n            res.append(row_mul_tuplex(t1[i],t2[i]))\n        return res\ndef table_add_col(t1,col):\n    '''\n    Write a function to add a column to a table.\n    '''\n    res=[]\n    for i in range(len",
        "num_ids": 14
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if (i % (m + 1)) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef row_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (n + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef column_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (m + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef check_tuplex(tuplex,m,n):\n    '''\n    Write a function to check whether a given tuple is valid or not.\n    '''\n    for i in range(len(tuplex)):\n        if (i % (m + 1)) == 0:\n            if len(tuplex) == (i + 1):\n                return False\n        else:\n            if len(tuplex) == (i + 1):\n                return False\n    return True\ndef remove_tuplex(tuplex,m,n):\n    '''\n    Write a function to remove a column from a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if (i % (m + 1)) == 0:\n            if len(tuplex) == (i + 1):\n                return False\n        else:\n            if len(tuplex) == (i + 1):\n                return False\n    return tuplex\ndef remove_row(tuplex,m,n):\n    '''\n    Write a function to remove a row from a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if i % (n + 1) == 0:\n            if len(tuplex) == (i + 1):\n                return False\n        else:\n            if len(tuplex) == (i + 1):\n                return False\n    return tuplex\ndef remove_col(tuplex,m,n):\n    '''\n    Write a function to remove a column from a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if i % (m + 1) == 0:\n            if len(tuplex) == (i + 1):\n                return False\n        else:\n            if len(tuplex) == (i + 1):\n                return False\n    return tuplex\ndef check_col(tuplex,m,n):\n    '''\n    Write a function to check whether a given column is valid or not.\n    '''\n    for i in range(len(tuplex)):\n        if (i % (m + 1)) == 0:\n            if len(tuplex) == (i + 1):\n                return False\n        else:\n            if len(tuplex) == (i + 1):\n                return False\n    return True\ndef transpose_tuplex(tuplex,m,n):\n    '''\n    Write a function to get the transpose of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (n + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef col_tuplex_col(tuplex,m,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (m + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef row_tuplex_col(tuplex,m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (n + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef col_tuplex_row(tuplex,m,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (m + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef row_tuplex_row(tuplex,m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (n + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef row_col_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a row and column of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (m + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef col_row_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a column and row of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (n + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef row_row_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a row and row of a tuple.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(tuplex)):\n        if i % (m + 1) == 0:\n            lst1.append(tuplex[i])\n        else:\n            lst2.append(tuplex[i])\n    return (tuple(lst1),tuple(lst2))\ndef col_col_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a column and column of a tuple.\n    '''\n    lst1=[]\n    lst",
        "num_ids": 12
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m<0:\n        m = abs(m)\n        if m == 1:\n            tuplex = tuplex[:n] + tuplex[n+1:]\n        else:\n            tuplex = tuplex[:n-1] + (tuplex[n-1:] + tuplex[n-1]) * (m - 1)\n    else:\n        if m == 1:\n            tuplex = tuplex[:n]\n        else:\n            tuplex = tuplex[:n] + (tuplex[n:] + tuplex[n]) * (m - 1)\n    return tuplex\n",
        "num_ids": 158
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[:m],tuplex[m:n+1])\ndef get_maze(maze):\n    '''\n    Write a function to get the maze as a grid of characters.\n    '''\n    n = int(len(maze) ** 0.5)\n    maze = colon_tuplex(maze,n,n)\n    new_maze = []\n    for i in range(n):\n        new_maze.append(colon_tuplex(maze[i],n,n))\n    return new_maze\ndef get_adj(maze):\n    '''\n    Write a function to get the adjacency matrix of a maze.\n    '''\n    maze = get_maze(maze)\n    n = len(maze)\n    adj = [[0] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if maze[i][j] == 1:\n                for k in range(n):\n                    if maze[i][k] == 1:\n                        adj[i][k] = 1\n                        break\n                    elif maze[k][j] == 1:\n                        adj[k][j] = 1\n                        break\n    return adj\ndef get_start_pos(maze):\n    '''\n    Write a function to get the start position of a maze.\n    '''\n    maze = get_maze(maze)\n    n = len(maze)\n    for i in range(n):\n        for j in range(n):\n            if maze[i][j] == 2:\n                return (i,j)\ndef get_end_pos(maze):\n    '''\n    Write a function to get the end position of a maze.\n    '''\n    maze = get_maze(maze)\n    n = len(maze)\n    for i in range(n):\n        for j in range(n):\n            if maze[i][j] == 3:\n                return (i,j)\ndef is_valid_pos(i,j,maze):\n    '''\n    Write a function to check if a position is valid in a maze.\n    '''\n    n = len(maze)\n    if i < 0 or i >= n or j < 0 or j >= n:\n        return False\n    return True\ndef get_adj_start_end(adj,start,end):\n    '''\n    Write a function to get the adjacency matrix of a maze.\n    '''\n    maze = get_maze(adj)\n    n = len(maze)\n    x,y = start\n    x_e,y_e = end\n    x_st,y_st = start\n    x_en,y_en = end\n    adj_st = [[0] * n for i in range(n)]\n    adj_en = [[0] * n for i in range(n)]\n    if x_st < x_e:\n        adj_st[x_st][y_st] = 1\n        adj_en[x_en][y_en] = 1\n    if x_en > x_st:\n        adj_en[x_en][y_en] = 1\n        adj_st[x_st][y_st] = 1\n    if y_st < y_e:\n        adj_st[x_st][y_st] = 1\n        adj_en[x_en][y_en] = 1\n    if y_en > y_st:\n        adj_en[x_en][y_en] = 1\n        adj_st[x_st][y_st] = 1\n    if x_st == x_en and y_st == y_en:\n        return adj_st,adj_en\n    if x_st == x_en and y_st < y_en:\n        if y_st < y_en:\n            adj_en[x_en][y_en] = 1\n            for i in range(x_st,x_en):\n                adj_st[i][y_st] = 1\n        else:\n            adj_st[x_st][y_st] = 1\n            for i in range(x_st,x_en):\n                adj_en[i][y_en] = 1\n    if x_st > x_en and y_st == y_en:\n        if x_st > x_en:\n            adj_st[x_en][y_en] = 1\n            for i in range(x_en,x_st):\n                adj_st[i][y_st] = 1\n        else:\n            adj_st[x_st][y_st] = 1\n            for i in range(x_st,x_en):\n                adj_st[i][y_en] = 1\n    if x_st < x_en and y_st == y_en:\n        if y_st > y_en:\n            adj_en[x_en][y_en] = 1\n            for i in range(y_en,y_st):\n                adj_st[x_st][i] = 1\n        else:\n            adj_st[x_st][y_st] = 1\n            for i in range(y_st,y_en):\n                adj_en[x_en][i] = 1\n    if x_st == x_en and y_st < y_en:\n        if y_st > y_en:\n            adj_st[x_st][y_st] = 1\n            for i in range(x_st,x_en):\n                adj_en[i][y_en] = 1\n        else:\n            adj_en[x_en][y_en] = 1\n            for i in range(x_en,x_st):\n                adj_st[i][y_st] = 1\n    if x_st == x_en and y_st > y_en:\n        if y_st < y_en:\n            adj_st[x_st][y_st] = 1\n            for i in range(x_st,x_en):\n                adj_en[i][y_st] = 1\n        else:\n            adj_en[x_en][y_en] = 1\n            for i in range(x_en,x_st):\n                adj_st[i][y_en] = 1\n    return adj_st,adj_en\ndef DFS_path(start,end,adj):\n    '''\n    Write a function to find a path between two position in a maze.\n    '''\n    '''\n    def DFS_path(start,end,adj):\n        visited = set()\n        stack = [(start,0)]\n        while stack:\n            node,cnt = stack.pop()\n            visited.add(node)\n            if node == end:\n                return cnt\n            for nei in adj[node]:\n                if nei not in visited:\n                    stack.append((nei,cnt+1))\n    '''\n    maze = get_maze(adj)\n    n = len(maze)\n    visited = set()\n    stack = []\n    visited.add(start)\n    stack.append(start)\n    while stack:\n        pos = stack.pop()\n        for i in range(n):\n            for j in range(n):\n                if maze[pos][i] == 2 and (i,j) not in visited:\n                    if i == end[0] and j == end[1]:\n                        return True\n                    visited.add((i,j))\n                    stack.append((i,j))\n        if pos == end:\n            return False\n",
        "num_ids": 156
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuple(map(lambda x,y:x-y,tuplex,(m,n)))\n    return colon\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuple(map(lambda x,y:x-y,tupley,(m,n)))\n    return colon\ndef list_min(a_list):\n    '''\n    Write a function to get the minimum value in a list.\n    '''\n    min = 0\n    for i in a_list:\n        if i < min:\n            min = i\n    return min\ndef list_max(a_list):\n    '''\n    Write a function to get the maximum value in a list.\n    '''\n    max = 0\n    for i in a_list:\n        if i > max:\n            max = i\n    return max\ndef list_sum(a_list):\n    '''\n    Write a function to get the sum of all the values in a list.\n    '''\n    s = 0\n    for i in a_list:\n        s = s + i\n    return s\ndef list_div(a_list,divider):\n    '''\n    Write a function to get the quotient and the remainder of a list.\n    '''\n    quotient = []\n    remainder = []\n    for i in range(len(a_list)):\n        quotient.append(round(a_list[i]/divider))\n        remainder.append(a_list[i]%divider)\n    return quotient,remainder\ndef list_mod(a_list,divider):\n    '''\n    Write a function to get the quotient and the remainder of a list.\n    '''\n    quotient = []\n    remainder = []\n    for i in range(len(a_list)):\n        quotient.append(round(a_list[i]%divider))\n        remainder.append(a_list[i]/divider)\n    return quotient,remainder\ndef list_power(a_list,power):\n    '''\n    Write a function to get the power of a list.\n    '''\n    result = []\n    for i in range(len(a_list)):\n        result.append(a_list[i]**power)\n    return result\ndef list_reverser(a_list):\n    '''\n    Write a function to get the reverse of a list.\n    '''\n    result = []\n    for i in range(len(a_list)-1,-1,-1):\n        result.append(a_list[i])\n    return result\ndef list_reverse(a_list):\n    '''\n    Write a function to get the reverse of a list.\n    '''\n    result = []\n    for i in range(len(a_list)-1,-1,-1):\n        result.append(a_list[i])\n    return result\ndef list_pow(a_list,power):\n    '''\n    Write a function to get the power of a list.\n    '''\n    result = []\n    for i in range(len(a_list)):\n        result.append(a_list[i]**power)\n    return result\ndef list_div_pow(a_list,divider,power):\n    '''\n    Write a function to get the quotient and the remainder of a list.\n    '''\n    quotient = []\n    remainder = []\n    for i in range(len(a_list)):\n        quotient.append(round(a_list[i]**power/divider))\n        remainder.append(a_list[i]**power%divider)\n    return quotient,remainder\ndef list_mod_pow(a_list,divider,power):\n    '''\n    Write a function to get the quotient and the remainder of a list.\n    '''\n    quotient = []\n    remainder = []\n    for i in range(len(a_list)):\n        quotient.append(round(a_list[i]**power%divider))\n        remainder.append(a_list[i]**power%divider)\n    return quotient,remainder\ndef list_div_mod(a_list,divider,remainder):\n    '''\n    Write a function to get the quotient and the remainder of a list.\n    '''\n    quotient = []\n    remainder = []\n    for i in range(len(a_list)):\n        quotient.append(round(a_list[i]/divider)%remainder)\n        remainder.append(a_list[i]%divider)\n    return quotient,remainder\ndef list_mod_div(a_list,divider,remainder):\n    '''\n    Write a function to get the quotient and the remainder of a list.\n    '''\n    quotient = []\n    remainder = []\n    for i in range(len(a_list)):\n        quotient.append(round(a_list[i]%divider)/remainder)\n        remainder.append(a_list[i]%divider%remainder)\n    return quotient,remainder\ndef list_multiply(a_list,b_list):\n    '''\n    Write a function to get the product of two lists.\n    '''\n    result = []\n    for i in range(len(a_list)):\n        result.append(a_list[i]*b_list[i])\n    return result\ndef list_add(a_list,b_list):\n    '''\n    Write a function to get the sum of two lists.\n    '''\n    result = []\n    for i in range(len(a_list)):\n        result.append(a_list[i]+b_list[i])\n    return result\ndef list_subtract(a_list,b_list):\n    '''\n    Write a function to get the difference of two lists.\n    '''\n    result = []\n    for i in range(len(a_list)):\n        result.append(a_list[i]-b_list[i])\n    return result\ndef list_reverser(a_list):\n    '''\n    Write a function to get the reverse of a list.\n    '''\n    result = []\n    for i in range(len(a_list)-1,-1,-1):\n        result.append(a_list[i])\n    return result\ndef list_reverse(a_list):\n    '''\n    Write a function to get the reverse of a list.\n    '''\n    result = []\n    for i in range(len(a_list)-1,-1,-1):\n        result.append(a_list[i])\n    return result\ndef list_pow(a_list,power):\n    '''\n    Write a function to get the power of a list.\n    '''\n    result = []\n    for i in range(len(a_list)):\n        result.append(a_list[i]**power)\n    return result\ndef list_div(a_list,divider):\n    '''\n    Write a function to get the quotient and the remainder of a list.\n    '''\n    quotient = []\n    remainder = []\n    for i in range(len(a_list)):\n        quotient.append(round(a_list[i]/divider))\n        remainder.append(a_list[i]%divider)\n    return quotient,remainder\ndef list_mod(a_list,divider):\n    '''\n    Write a function to get the quotient and the remainder of a list.\n    '''\n    quotient = []\n    remainder = []\n    for i in range(len(a_list)):\n        quotient.append(round(a_list[i]%divider))\n        remainder.append(a_list[i]%divider)\n    return quotient,remainder\ndef list_div_mod(a_list,divider,remainder):\n    '''\n    Write a function to get the quotient and the remainder of a list",
        "num_ids": 17
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return ((m*3)-1,n),((m*3)+1,n),((m*3)+2,n)\ndef list2tuple(list_in):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(list_in)\ndef tuplex2list(tuplex_in):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tuplex_in)\ndef in_list2tuple(list_in):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(list_in)\ndef in_tuplex2list(tuplex_in):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tuplex_in)\ndef list2in_list(list_in):\n    '''\n    Write a function to convert a list to an equivalent list.\n    '''\n    return in_list2tuple(tuple(list_in))\ndef list2in_tuplex(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef in_list2in_list(list_in):\n    '''\n    Write a function to convert a list to an equivalent list.\n    '''\n    return list2in_list(list2in_list(list_in))\ndef in_list2in_tuplex(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return list2in_tuplex(list2in_tuplex(list_in))\ndef in_tuplex2in_list(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent list.\n    '''\n    return in_tuplex2list(tuplex2list(tuplex_in))\ndef in_tuplex2in_tuplex(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent tuple.\n    '''\n    return in_tuplex2list(tuplex2list(tuplex_in))\ndef in_list2in_tuplex(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_list2tuple(list2tuple(list_in))\ndef in_list2in_tuplex(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef tuplex2in_list(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent list.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef tuplex2in_tuplex(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent tuple.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef in_list2in_tuplex(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef in_list2in_tuplex(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef tuplex2in_list(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent list.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef tuplex2in_tuplex(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent tuple.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef in_list2in_tuplex(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef in_list2in_tuplex(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef in_list2in_tuple(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef in_list2in_tuple(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef tuplex2in_list(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent list.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef tuplex2in_tuple(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent tuple.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef in_list2in_tuple(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef in_list2in_tuple(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef tuplex2in_list(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent list.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef tuplex2in_tuple(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent tuple.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef in_list2in_tuple(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef in_list2in_tuple(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef tuplex2in_list(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent list.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef tuplex2in_tuple(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent tuple.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef in_list2in_tuple(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef in_list2in_tuple(list_in):\n    '''\n    Write a function to convert a list to an equivalent tuple.\n    '''\n    return in_tuplex2list(list2tuple(list_in))\ndef tuplex2in_list(tuplex_in):\n    '''\n    Write a function to convert a tuple to an equivalent list.\n    '''\n    return in_tuplex2list(tuplex_in)\ndef tuplex2in_tuple(tuplex_in):\n    '''\n    Write a function to convert a tuple to a",
        "num_ids": 12
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m], tuplex[n]\n",
        "num_ids": 17
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists and sort the results of the product \n    nums1.sort()\n    nums2.sort()\n    result = []\n    i = 0\n    j = 0\n    while i < N and j < N:\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums2[j] < nums1[i]:\n            j += 1\n        else:\n            result.append(max(nums1[i], nums2[j]) * min(nums1[i], nums2[j]))\n            i += 1\n            j += 1\n    return result \n",
        "num_ids": 157
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # start = time.time()\n    # print(\"factors of \", nums1)\n    # print(\"factors of \", nums2)\n    \n    products = []\n    for i in range(N):\n        for j in range(N):\n            products.append(nums1[i] * nums2[j])\n    \n    # print(products)\n    \n    max_product = max(products)\n    \n    for i in range(N):\n        if products[i] == max_product:\n            return sorted([nums1[i], nums2[i]])\n",
        "num_ids": 143
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n1 = []\n    n2 = []\n    \n    for i in range(len(nums1)):\n        n1.append(nums1[i])\n        n2.append(nums2[i])\n",
        "num_ids": 56
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    result = []\n    i = 0\n    j = 0\n    while i<N and j<N:\n        if nums1[i]<=nums2[j]:\n            result.append(nums1[i])\n            i += 1\n        else:\n            result.append(nums2[j])\n            j += 1\n    while i<N:\n        result.append(nums1[i])\n        i += 1\n    while j<N:\n        result.append(nums2[j])\n        j += 1\n    return result\n",
        "num_ids": 151
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    So, how?\n    \n    Sort the two lists, then take the largest values from both of them\n    Keep taking the largest values from both of them\n    Compare the new largest values and keep taking the largest values from both of them\n    \n    Since we're comparing the largest values of each list, we only need one element from each list\n    \n    But the only way to get the largest product is to start with the largest value of the two lists and multiply it by the largest value of the other list\n    \n    To get the largest product of two lists, we simply take the product of the two lists\n    \n    We can get the largest product of two lists by using the largest_product function\n    \n    We can get the largest product of two lists by using the largest_product function\n    '''\n    sorted_nums1 = sorted(nums1)\n    sorted_nums2 = sorted(nums2)\n    \n    largest_product = sorted_nums1[-1]*sorted_nums2[-1]\n    \n    '''\n    After we get the largest product, we can do the same process as in the previous code, \n    we keep taking the largest values from both of the lists and multiply them\n    '''\n    for num1 in sorted_nums1:\n        for num2 in sorted_nums2:\n            largest_product = max(largest_product, num1*num2)\n    return largest_product\n    \ndef largest_product(nums1, nums2, N):\n    '''\n    How?\n    \n    We can use a while loop\n    \n    We can use a while loop\n    \n    To find the largest product, we need to keep track of the largest product. We need to take the largest values from the two lists and multiply them\n    \n    '''\n    sorted_nums1 = sorted(nums1)\n    sorted_nums2 = sorted(nums2)\n    \n    largest_product = sorted_nums1[-1]*sorted_nums2[-1]\n    \n    '''\n    After we get the largest product, we can do the same process as in the previous code, \n    we keep taking the largest values from both of the lists and multiply them\n    '''\n    for num1 in sorted_nums1:\n        for num2 in sorted_nums2:\n            largest_product = max(largest_product, num1*num2)\n    return largest_product\n    \ndef large_product(nums1, nums2, N):\n    '''\n    How?\n    \n    We can use a while loop\n    \n    We can use a while loop\n    \n    To find the largest product, we need to keep track of the largest product. We need to take the largest values from the two lists and multiply them\n    \n    '''\n    largest_product = 0\n    while len(nums1) > 0 and len(nums2) > 0:\n        \n        if nums1[-1] > nums2[-1]:\n            nums1.pop()\n        elif nums1[-1] < nums2[-1]:\n            nums2.pop()\n        else:\n            if largest_product < nums1[-1]*nums2[-1]:\n                largest_product = nums1[-1]*nums2[-1]\n                \n            nums1.pop()\n            nums2.pop()\n    \n    while len(nums1) > 0:\n        if largest_product < nums1[-1]*nums2[-1]:\n            largest_product = nums1[-1]*nums2[-1]\n        nums1.pop()\n    \n    while len(nums2) > 0:\n        if largest_product < nums1[-1]*nums2[-1]:\n            largest_product = nums1[-1]*nums2[-1]\n        nums2.pop()\n        \n    return largest_product\n    \ndef large_product(nums1, nums2, N):\n    '''\n    How?\n    \n    We can use a while loop\n    \n    We can use a while loop\n    \n    To find the largest product, we need to keep track of the largest product. We need to take the largest values from the two lists and multiply them\n    \n    '''\n    largest_product = 0\n    while len(nums1) > 0 and len(nums2) > 0:\n        \n        if nums1[-1] > nums2[-1]:\n            nums1.pop()\n        elif nums1[-1] < nums2[-1]:\n            nums2.pop()\n        else:\n            if largest_product < nums1[-1]*nums2[-1]:\n                largest_product = nums1[-1]*nums2[-1]\n                \n            nums1.pop()\n            nums2.pop()\n    \n    while len(nums1) > 0:\n        if largest_product < nums1[-1]*nums2[-1]:\n            largest_product = nums1[-1]*nums2[-1]\n        nums1.pop()\n    \n    while len(nums2) > 0:\n        if largest_product < nums1[-1]*nums2[-1]:\n            largest_product = nums1[-1]*nums2[-1]\n        nums2.pop()\n        \n    return largest_product\n    ",
        "num_ids": 289
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 1\n    max_product_factors = []\n",
        "num_ids": 19
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def is_prime(n):\n        if n==1:\n            return False\n        for i in range(2, int(n**(0.5))+1):\n            if n%i==0:\n                return False\n        return True\n    res = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i]*nums2[j] > res[-1]:\n                res.append(nums1[i]*nums2[j])\n            else:\n                continue\n    return res\n",
        "num_ids": 147
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the index of the smallest factor for the first list.\n    min_index = find_smallest_factor(nums1)\n    # Find the index of the smallest factor for the second list.\n    min_index2 = find_smallest_factor(nums2)\n    # Find the smallest factor of the smallest factor found so far.\n    min_factor = min(min_index, min_index2)\n    # Make a copy of the nums1 and nums2.\n    nums1_copy = copy.deepcopy(nums1)\n    nums2_copy = copy.deepcopy(nums2)\n    # Remove the smallest factor from the first list.\n    nums1_copy.pop(min_index)\n    # Remove the smallest factor from the second list.\n    nums2_copy.pop(min_index2)\n    # Call the function for the remaining lists.\n    LARGE_PRODUCT_OF_FACTORIES_FOR_FIRST_LIST(nums1_copy, N)\n    LARGE_PRODUCT_OF_FACTORIES_FOR_SECOND_LIST(nums2_copy, N)\n",
        "num_ids": 275
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    i = 0\n    while i < N:\n        nums1[i] *= nums2[i]\n        i += 1\n    return max(nums1)\n",
        "num_ids": 44
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def binary_search(nums, target, lo=0, hi=None):\n        if hi is None:\n            hi = len(nums) - 1\n",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \nprint(maximum(10,5))",
        "num_ids": 31
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    \ndef main():\n    print(maximum(5,6))\n    print(maximum(10,20))\n    print(minimum(10,20))\n    \nif __name__ == \"__main__\":\n    main()\n",
        "num_ids": 74
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # initializing the maximum\n    maximum = None\n    \n    # checking the type of a and b\n    if(type(a) == int):\n        \n        # checking for maximum in a and b\n        if(a >= b):\n            \n            # storing the maximum\n            maximum = a\n            \n        elif(a < b):\n            \n            # storing the maximum\n            maximum = b\n    \n    elif(type(a) == float):\n        \n        # checking for maximum in a and b\n        if(a >= b):\n            \n            # storing the maximum\n            maximum = a\n            \n        elif(a < b):\n            \n            # storing the maximum\n            maximum = b\n            \n    elif(type(a) == str):\n        \n        # checking for maximum in a and b\n        if(a >= b):\n            \n            # storing the maximum\n            maximum = a\n            \n        elif(a < b):\n            \n            # storing the maximum\n            maximum = b\n            \n    return maximum\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # initializing the minimum\n    minimum = None\n    \n    # checking the type of a and b\n    if(type(a) == int):\n        \n        # checking for minimum in a and b\n        if(a <= b):\n            \n            # storing the minimum\n            minimum = a\n            \n        elif(a > b):\n            \n            # storing the minimum\n            minimum = b\n    \n    elif(type(a) == float):\n        \n        # checking for minimum in a and b\n        if(a <= b):\n            \n            # storing the minimum\n            minimum = a\n            \n        elif(a > b):\n            \n            # storing the minimum\n            minimum = b\n            \n    elif(type(a) == str):\n        \n        # checking for minimum in a and b\n        if(a <= b):\n            \n            # storing the minimum\n            minimum = a\n            \n        elif(a > b):\n            \n            # storing the minimum\n            minimum = b\n            \n    return minimum\n    \ndef mode(a):\n    '''\n    Write a python function to find the mode of a number.\n    '''\n    # initializing the maximum\n    minimum = maximum(a)\n    \n    # initializing the count\n    count = 0\n    \n    # checking the type of a\n    if(type(a) == int):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # checking for each number in range\n            if(a == minimum):\n                \n                # incrementing the count\n                count = count + 1\n                \n            elif(a > minimum):\n                \n                # if count is 0, then initializing it with minimum\n                if(count == 0):\n                    count = 1\n                \n                # if the number is greater than the current minimum\n                if(a > minimum):\n                    count = count + 1\n                    \n    elif(type(a) == float):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # checking for each number in range\n            if(a == minimum):\n                \n                # incrementing the count\n                count = count + 1\n                \n            elif(a > minimum):\n                \n                # if count is 0, then initializing it with minimum\n                if(count == 0):\n                    count = 1\n                \n                # if the number is greater than the current minimum\n                if(a > minimum):\n                    count = count + 1\n                    \n    elif(type(a) == str):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # checking for each number in range\n            if(a == minimum):\n                \n                # incrementing the count\n                count = count + 1\n                \n            elif(a > minimum):\n                \n                # if count is 0, then initializing it with minimum\n                if(count == 0):\n                    count = 1\n                \n                # if the number is greater than the current minimum\n                if(a > minimum):\n                    count = count + 1\n                    \n    return count\n    \ndef median(a):\n    '''\n    Write a python function to find the median of a number.\n    '''\n    # initializing the maximum\n    minimum = minimum(a)\n    \n    # initializing the count\n    count = 0\n    \n    # checking the type of a\n    if(type(a) == int):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # checking for each number in range\n            if(a == minimum):\n                \n                # incrementing the count\n                count = count + 1\n                \n            elif(a > minimum):\n                \n                # if count is 0, then initializing it with minimum\n                if(count == 0):\n                    count = 1\n                \n                # if the number is greater than the current minimum\n                if(a > minimum):\n                    count = count + 1\n                    \n    elif(type(a) == float):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # checking for each number in range\n            if(a == minimum):\n                \n                # incrementing the count\n                count = count + 1\n                \n            elif(a > minimum):\n                \n                # if count is 0, then initializing it with minimum\n                if(count == 0):\n                    count = 1\n                \n                # if the number is greater than the current minimum\n                if(a > minimum):\n                    count = count + 1\n                    \n    elif(type(a) == str):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # checking for each number in range\n            if(a == minimum):\n                \n                # incrementing the count\n                count = count + 1\n                \n            elif(a > minimum):\n                \n                # if count is 0, then initializing it with minimum\n                if(count == 0):\n                    count = 1\n                \n                # if the number is greater than the current minimum\n                if(a > minimum):\n                    count = count + 1\n                    \n    return (count - 1)/2\n    \ndef mean(a):\n    '''\n    Write a python function to find the mean of a number.\n    '''\n    # initializing the sum\n    sum = 0\n    \n    # checking the type of a\n    if(type(a) == int):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # adding the sum\n            sum = sum + a\n            \n    elif(type(a) == float):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # adding the sum\n            sum = sum + a\n            \n    elif(type(a) == str):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # adding the sum\n            sum = sum + a\n            \n    return sum/(a+1)\n    \ndef variance(a):\n    '''\n    Write a python function to find the variance of a number.\n    '''\n    # initializing the sum\n    sum = 0\n    \n    # checking the type of a\n    if(type(a) == int):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # adding the sum\n            sum = sum + (a - mean(a))**2\n            \n    elif(type(a) == float):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # adding the sum\n            sum = sum + (a - mean(a))**2\n            \n    elif(type(a) == str):\n        \n        # iterating over the range of a\n        for i in range(a+1):\n            \n            # adding the sum\n            sum = sum + (a - mean(a))**2\n            \n    return sum/(a+1)\n    \ndef standardDeviation(a):\n    '''\n    Write a python function to find the standard deviation of a number.\n    '''\n    # initializing the sum\n    sum = 0\n    \n    # checking the type of ",
        "num_ids": 23
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max_val=a if a>b else b\n    print(max_val)\nmaximum(3,4)\n",
        "num_ids": 30
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    elif(b>a):\n        return b\n    else:\n        return a\n",
        "num_ids": 35
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n",
        "num_ids": 23
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        print(\"maximum is \",a)\n    else:\n        print(\"maximum is \",b)\n",
        "num_ids": 32
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    tup = tuple(str1)\n    return tup\n",
        "num_ids": 27
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef reverse_tuple(tup):\n    '''\n    Write a function to reverse the given tuple of characters.\n    '''\n    reversed_tuple = tup[::-1]\n    return reversed_tuple\n    \ndef double_char(str1):\n    '''\n    Write a function to convert the given string to a string where each character is doubled.\n    '''\n    return ''.join(char*2 for char in str1)\n    \ndef string_times(str1, num):\n    '''\n    Write a function to repeat given string num times.\n    '''\n    return str1 * num\n    \ndef front_times(str1, num):\n    '''\n    Write a function to return the string obtained by replacing the first \n    character of the given string with the given character.\n    '''\n    return str1[:1] * num + str1[1:]\n    \ndef front_times_string(str1, num):\n    '''\n    Write a function to return the string obtained by replacing the first \n    character of the given string with the given character, \n    using a loop.\n    '''\n    str1 = str1[:1]\n    for i in range(num):\n        str1 = str1 + str1\n    return str1\n    \ndef string_bits(str1):\n    '''\n    Write a function to print the binary representation of a given number n.\n    '''\n    return ''.join(str(i) for i in str1)\n    \ndef string_splosion(str1):\n    '''\n    Write a function that takes a string as input and \n    returns the string formed by inserting the characters of the input \n    string consecutively on both sides.\n    '''\n    return str1[:0] + str1\n    \ndef last2(str1):\n    '''\n    Write a function that takes a string as input and \n    returns the string formed by the last 2 occurrences of each character in the input string.\n    '''\n    return ''.join(char * 2 for char in str1)\n    \ndef array_check(numbers):\n    '''\n    Write a function that takes an array and returns true if it is a valid array of numbers and false if it is not.\n    '''\n    return all(isinstance(i, int) for i in numbers)\n    \ndef array_front9(numbers):\n    '''\n    Write a function that takes an array of numbers and returns the first number from the array that is not the \n    number 9.\n    '''\n    return numbers[0] if numbers[0]!= 9 else None\n    \ndef array123(numbers):\n    '''\n    Write a function that takes an array of numbers and returns the first number from the array that is not the \n    number 1 or 2 or 3.\n    '''\n    return numbers[0] if numbers[0]!= 1 and numbers[0]!= 2 and numbers[0]!= 3 else None\n    \ndef string_match(str1, pattern):\n    '''\n    Write a function that takes a pattern and a string and returns the number of times that the pattern occurs in the \n    string.\n    '''\n    return str1.count(pattern)\n    \ndef string_match2(str1, pattern):\n    '''\n    Write a function that takes a pattern and a string and returns the number of times that the pattern occurs in the \n    string, ignoring case.\n    '''\n    return len(str1.findall(pattern.lower()))\n    \ndef array_front9(numbers):\n    '''\n    Write a function that takes an array of numbers and returns the first number from the array that is not the \n    number 9.\n    '''\n    return numbers[0] if numbers[0]!= 9 else None\n    \ndef array123(numbers):\n    '''\n    Write a function that takes an array of numbers and returns the first number from the array that is not the \n    number 1 or 2 or 3.\n    '''\n    return numbers[0] if numbers[0]!= 1 and numbers[0]!= 2 and numbers[0]!= 3 else None\n    \ndef string_match(str1, pattern):\n    '''\n    Write a function that takes a pattern and a string and returns the number of times that the pattern occurs in the \n    string.\n    '''\n    return str1.count(pattern)\n    \ndef string_match2(str1, pattern):\n    '''\n    Write a function that takes a pattern and a string and returns the number of times that the pattern occurs in the \n    string, ignoring case.\n    '''\n    return len(str1.findall(pattern.lower()))\n    \ndef overlapping_square(matrix):\n    '''\n    Write a function that finds the largest square containing only 1s in a given matrix.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 1:\n                if j!= len(matrix[0]) - 1 and matrix[i][j+1] == 1:\n                    if j!= 0 and matrix[i][j-1] == 1:\n                        return (i, j)\n    return None\n",
        "num_ids": 100
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = []\n    for i in range(len(str1)):\n        list1.append(str1[i])\n    return tuple(list1)\n",
        "num_ids": 41
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('-','')\n    return tuple(str1)\n",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    return tuple(str1)\n",
        "num_ids": 20
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split()\n    return tuple(str1)\n",
        "num_ids": 20
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_position = 0\n    while bit_position < 32: \n        if (n & (1 << bit_position))!= 0: \n            break\n        bit_position += 1\n    return (n | (1 << bit_position))\n    ",
        "num_ids": 61
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n | 0x1\n    \n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n | 0x2\n    \n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n | 0x80\n    \n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n | 0x8\n    \n    \n    \ndef get_right_most_set_bit(n): \n    '''\n    Write a python function to get the right most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & 0x7\n    \n    \n    \ndef get_left_most_set_bit(n): \n    '''\n    Write a python function to get the left most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & 0x1\n    \n    \n    \ndef get_left_most_unset_bit(n): \n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n & 0x2\n    \n    \n    \ndef get_right_most_unset_bit(n): \n    '''\n    Write a python function to get the right most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n & 0x80\n    \n    \n    \ndef get_right_most_set_bit(n): \n    '''\n    Write a python function to get the right most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & 0x8\n    \n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n | 0x4\n    \n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n | 0x100\n    \n    \n    \ndef set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n | 0x40\n    \n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n | 0x80\n    \n    \n    \ndef set_all_bits(n): \n    '''\n    Write a python function to set all bits.\n    '''\n    if n == 0:\n        return 0\n    return n | 0x1f\n    \n    \n    \ndef clear_left_most_bit(n): \n    '''\n    Write a python function to clear the left most bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x1\n    \n    \n    \ndef clear_right_most_bit(n): \n    '''\n    Write a python function to clear the right most bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x2\n    \n    \n    \ndef clear_left_most_set_bit(n): \n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x4\n    \n    \n    \ndef clear_right_most_set_bit(n): \n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x100\n    \n    \n    \ndef clear_left_most_unset_bit(n): \n    '''\n    Write a python function to clear the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x40\n    \n    \n    \ndef clear_right_most_unset_bit(n): \n    '''\n    Write a python function to clear the right most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x80\n    \n    \n    \ndef clear_all_bits(n): \n    '''\n    Write a python function to clear all bits.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x1f\n    \n    \n    \ndef clear_left_most_bit(n): \n    '''\n    Write a python function to clear the left most bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x1\n    \n    \n    \ndef clear_right_most_bit(n): \n    '''\n    Write a python function to clear the right most bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x2\n    \n    \n    \ndef clear_left_most_set_bit(n): \n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x4\n    \n    \n    \ndef clear_right_most_set_bit(n): \n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x100\n    \n    \n    \ndef clear_left_most_unset_bit(n): \n    '''\n    Write a python function to clear the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x40\n    \n    \n    \ndef clear_right_most_unset_bit(n): \n    '''\n    Write a python function to clear the right most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x80\n    \n    \n    \ndef clear_all_bits(n): \n    '''\n    Write a python function to clear all bits.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x1f\n    \n    \n    \ndef clear_left_most_bit(n): \n    '''\n    Write a python function to clear the left most bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x1\n    \n    \n    \ndef clear_right_most_bit(n): \n    '''\n    Write a python function to clear the right most bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x2\n    \n    \n    \ndef clear_left_most_set_bit(n): \n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x4\n    \n    \n    \ndef clear_right_most_set_bit(n): \n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x100\n    \n    \n    \ndef clear_left_most_unset_bit(n): \n    '''\n    Write a python function to clear the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return n & ~0x40\n    \n",
        "num_ids": 24
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << (n - 1))\n",
        "num_ids": 15
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~n + 1\n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    return n | 1\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    return n & ~(1<<31)\n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return n | 1<<31\n    \ndef set_left_most_set_bit_to_one(n): \n    '''\n    Write a python function to set the left most set bit to 1.\n    '''\n    return n | 1<<31\n    \ndef set_right_most_set_bit_to_one(n): \n    '''\n    Write a python function to set the right most set bit to 1.\n    '''\n    return n | 1<<31 | 1\n    \ndef clear_left_most_unset_bit(n): \n    '''\n    Write a python function to clear the left most unset bit.\n    '''\n    return n & ~(1<<31)\n    \ndef clear_left_most_set_bit(n): \n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    return n & ~1\n    \ndef clear_right_most_unset_bit(n): \n    '''\n    Write a python function to clear the right most unset bit.\n    '''\n    return n & ~(1<<31)\n    \ndef clear_right_most_set_bit(n): \n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    return n & ~(1<<31) | ~1\n    \ndef clear_left_most_set_bit_to_zero(n): \n    '''\n    Write a python function to clear the left most set bit to 0.\n    '''\n    return n & ~1\n    \ndef clear_right_most_set_bit_to_zero(n): \n    '''\n    Write a python function to clear the right most set bit to 0.\n    '''\n    return n & ~1 | 1\n    \ndef left_rotation(n, k): \n    '''\n    Write a python function to rotate left k bit.\n    '''\n    return n << k | n >> (32 - k)\n    \ndef right_rotation(n, k): \n    '''\n    Write a python function to rotate right k bit.\n    '''\n    return n >> k | n << (32 - k) & 0xFFFFFFFF\n    \ndef inverse_rotation(n, k): \n    '''\n    Write a python function to rotate right k bit.\n    '''\n    return n >> k | n << (32 - k) & 0xFFFFFFFF\n    \ndef set_left_most_set_bit_to_one(n): \n    '''\n    Write a python function to set the left most set bit to 1.\n    '''\n    return n | 1\n    \ndef set_right_most_set_bit_to_one(n): \n    '''\n    Write a python function to set the right most set bit to 1.\n    '''\n    return n | 1<<31\n    \ndef set_left_most_set_bit_to_zero(n): \n    '''\n    Write a python function to set the left most set bit to 0.\n    '''\n    return n & ~1\n    \ndef set_right_most_set_bit_to_zero(n): \n    '''\n    Write a python function to set the right most set bit to 0.\n    '''\n    return n & ~1 | 1\n    \ndef set_left_most_set_bit_to_one_and_clear_right_most_unset_bit(n): \n    '''\n    Write a python function to set the left most set bit to 1.\n    '''\n    return n | 1\n    \ndef set_left_most_set_bit_to_zero_and_clear_right_most_unset_bit(n): \n    '''\n    Write a python function to set the left most set bit to 0.\n    '''\n    return n & ~1\n    \ndef set_right_most_set_bit_to_one_and_clear_left_most_unset_bit(n): \n    '''\n    Write a python function to set the right most set bit to 1.\n    '''\n    return n | 1<<31\n    \ndef set_right_most_set_bit_to_zero_and_clear_left_most_unset_bit(n): \n    '''\n    Write a python function to set the right most set bit to 0.\n    '''\n    return n & ~1 | 1\n    \ndef set_left_most_set_bit_to_one_and_rotate_right_most_unset_bit(n): \n    '''\n    Write a python function to set the left most set bit to 1 and\n    rotate the rightmost unset bit to the right.\n    '''\n    return n | 1\n    \ndef set_right_most_set_bit_to_one_and_rotate_left_most_unset_bit(n): \n    '''\n    Write a python function to set the right most set bit to 1 and\n    rotate the leftmost unset bit to the left.\n    '''\n    return n | 1<<31\n    \ndef set_left_most_set_bit_to_zero_and_rotate_right_most_unset_bit(n): \n    '''\n    Write a python function to set the left most set bit to 0 and\n    rotate the rightmost unset bit to the right.\n    '''\n    return n & ~1 | 1\n    \ndef set_right_most_set_bit_to_zero_and_rotate_left_most_unset_bit(n): \n    '''\n    Write a python function to set the right most set bit to 0 and\n    rotate the leftmost unset bit to the left.\n    '''\n    return n & ~1 | 1<<31\n    \ndef set_left_most_set_bit_to_one_and_rotate_right_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit to 1 and\n    rotate the rightmost set bit to the right.\n    '''\n    return n | 1\n    \ndef set_right_most_set_bit_to_one_and_rotate_left_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit to 1 and\n    rotate the leftmost set bit to the left.\n    '''\n    return n | 1<<31\n    \ndef set_left_most_set_bit_to_zero_and_rotate_right_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit to 0 and\n    rotate the rightmost set bit to the right.\n    '''\n    return n & ~1 | 1\n    \ndef set_right_most_set_bit_to_zero_and_rotate_left_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit to 0 and\n    rotate the leftmost set bit to the left.\n    '''\n    return n & ~1 | 1<<31\n    \ndef set_left_most_set_bit_to_one_and_clear_right_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit to 1 and\n    clear the rightmost set bit.\n    '''\n    return n | 1\n    \ndef set_right_most_set_bit_to_one_and_clear_left_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit to 1 and\n    clear the leftmost set bit.\n    '''\n    return n | 1<<31\n    \ndef set_left_most_set_bit_to_zero_and_clear_right_most",
        "num_ids": 34
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Complexity O(n)\n    # Assumption: n is a power of 2\n    # Traverse the binary number of n and set the \n    # left most unset bit.\n    # Time Complexity O(n)\n    # Space Complexity O(1)\n    # if (n & (n-1)) == 0:\n    #     return n\n",
        "num_ids": 87
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (1<<31)\n",
        "num_ids": 12
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~n & 0b11111111111111111111111111111111\n",
        "num_ids": 18
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(32):\n        n |= (1<<i)\n    return n \n",
        "num_ids": 26
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n!= 0:\n        if (n & 1) == 1:\n            break\n        n = n >> 1\n    n = n << 1\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | (1<<(n.bit_length() - 1))\n    return n\n    \nif __name__ == \"__main__\":\n    n = 1\n    n = set_left_most_unset_bit(n)\n    print(\"The new value of n is \", n)\n    ",
        "num_ids": 74
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Volume of a cone can be calculated as pi*r^2*h\n    volume = math.pi*(r**2)*h\n    return volume\n",
        "num_ids": 38
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*math.pow(r,2)*h\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=r*r*math.pi*(1+math.cos(h/2))\n    return v\n",
        "num_ids": 29
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (r**2) * (math.pi*r) * (h**2) / 3\n    return volume\n",
        "num_ids": 31
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #return r**2*math.pi*h\n    return r**2*(math.pi/3)*h\n",
        "num_ids": 30
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2) * h\n",
        "num_ids": 16
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi)*(r**2)*h\ndef main():\n    print(volume_cone(1,2))\n    print(volume_cone(1,3))\n    print(volume_cone(2,1))\n    print(volume_cone(2,2))\n    print(volume_cone(2,3))\nmain()",
        "num_ids": 82
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=r*r*math.pi*(math.sin(h/2))\n    return v\n",
        "num_ids": 27
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 0\n    while x <= n:\n        x <<= 1\n    return x >> 1\n",
        "num_ids": 26
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # function to calculate highest power of 2 \n    def power_of_2(n):\n        if n == 1:\n            return 1\n        else:\n            return 1 + power_of_2(n // 2)\n",
        "num_ids": 56
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n == 0): \n        return 0\n    ans = 0\n    while (n!= 0): \n        n = n & (n - 1) \n        ans += 1\n    return ans \n",
        "num_ids": 52
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while (n & n-1)==0:\n        n = n >> 1\n    return n\n",
        "num_ids": 26
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # The highest power of 2 that is less than or equal to n\n    # 2^(n-1) - 1\n    maxPower2 = 1\n    i = 1\n    while (2**i <= n): \n        maxPower2 = i \n        i += 1\n    return maxPower2 \n",
        "num_ids": 75
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 0\n    while 2 ** x <= n:\n        x += 1\n    return x\n",
        "num_ids": 25
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while(2**power<=n):\n        power+=1\n    return power\n",
        "num_ids": 27
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n & 1:\n        n = n // 2\n        \n    return n\n",
        "num_ids": 22
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n>= 2**power:\n        power += 1\n    return power\n    \nn=10\nprint(highest_Power_of_2(n))\n",
        "num_ids": 45
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    while (n & 1) == 0:\n        n = n >> 1\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    a,b = 0, 1\n    if n == 0:\n        return a\n    for i in range(n):\n        a, b = b, a+b\n    return a\n",
        "num_ids": 54
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 0\n    i = 1\n    while i < n:\n        lucas = lucas + i\n        i += 1\n    return lucas\n",
        "num_ids": 41
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_nth = 0\n    lucas_nth_2 = 1\n    if n < 2:\n        return 0\n    for i in range(2, n + 1):\n        lucas_nth = lucas_nth + lucas_nth_2\n        lucas_nth_2 = lucas_nth\n    return lucas_nth\n",
        "num_ids": 94
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 52
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return find_lucas(n-1)+2\n    \n",
        "num_ids": 33
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    return (find_lucas(n-1)**2) + 1\n",
        "num_ids": 32
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n        \nprint(find_lucas(3)) \n",
        "num_ids": 79
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n):\n        if n == 0:\n            return 2\n        elif n == 1:\n            return 1\n        else:\n            return lucas(n-1) + lucas(n-2)\n    return lucas(n)\n",
        "num_ids": 63
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    res = 0\n    if n == 0: \n        return 1 \n    if n == 1: \n        return 2 \n    for i in range(1, n + 1): \n        res = res + 2 ** i \n    return res \n",
        "num_ids": 62
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.join(string)\n",
        "num_ids": 11
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string % i)\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # list_ = list(list_)\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n",
        "num_ids": 43
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string.split())\n",
        "num_ids": 13
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return string.join(list_)\n",
        "num_ids": 12
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        list_[index] = list_[index] + string\n    return list_\n",
        "num_ids": 35
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.insert(0, ''.join(string))\n    return list_\n",
        "num_ids": 21
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            d1[l1[i]] = l2[j]\n        d2[l1[i]] = l3[i]\n    print(d1)\n    print(d2)\n",
        "num_ids": 86
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    l1_dict = {l1[i]:l2[i] for i in range(len(l1))}\n    l2_dict = {l2[i]:l3[i] for i in range(len(l2))}\n    l3_dict = {l3[i]:l1[i] for i in range(len(l3))}\n    return l1_dict, l2_dict, l3_dict\n",
        "num_ids": 136
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]] = l3[i]\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(l1)):\n        if l1[i] in dict1:\n            dict1[l1[i]].append(l2[i])\n        else:\n            dict1[l1[i]] = [l2[i]]\n    for i in range(len(l3)):\n        if l3[i] in dict1:\n            dict1[l3[i]].append(l4[i])\n        else:\n            dict1[l3[i]] = [l4[i]]\n    return dict1\n",
        "num_ids": 141
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_list = []\n",
        "num_ids": 9
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dict = {}\n    l2_dict = {}\n    l3_dict = {}\n    for i in range(len(l1)):\n        l1_dict.update({l1[i] : l2[i]})\n    for i in range(len(l2)):\n        l2_dict.update({l2[i] : l3[i]})\n    for i in range(len(l3)):\n        l3_dict.update({l3[i] : l1[i]})\n    final_dict = {**l1_dict, **l2_dict, **l3_dict}\n    return final_dict\n",
        "num_ids": 159
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary\n    d = dict()\n    d['key1'] = l1\n    d['key2'] = l2\n    d['key3'] = l3\n",
        "num_ids": 44
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1 is None or len(l1) == 0:\n        return l1\n",
        "num_ids": 23
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Create the empty dictionary\n    dict1 = {}\n    \n    # Iterate through the list\n    for i in range(len(l1)):\n    \n        # Dictionary to store values\n        dict2 = {}\n    \n        # Iterate through the key value pair\n        for j in range(len(l1[i])):\n    \n            # Key value pair\n            dict2[l2[j]] = l3[i][j]\n    \n        # Add the dictionary\n        dict1[l1[i]] = dict2\n    \n    # Return the dictionary\n    return dict1\n",
        "num_ids": 142
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        val = l2[i]\n        d[key] = val\n    for i in range(len(l3)):\n        key = l3[i]\n        val = l2[i]\n        d[key] = val\n    return d\n",
        "num_ids": 89
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return get_max_sum_iterative_3(n)\n    \ndef get_max_sum_iterative_2 (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3)), n).\n    '''\n    a = 0\n    b = 0\n    for i in range (1, n+1):\n        a = max (a, b + i)\n        b = max (b, a + i/2)\n    return a\n    \ndef get_max_sum_iterative_2 (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3)), n).\n    '''\n    a = 0\n    b = 0\n    for i in range (1, n+1):\n        a, b = b, max(a + i, b)\n    return a\n    \ndef get_max_sum_iterative_1 (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3)), n).\n    '''\n    a = 0\n    b = 0\n    for i in range (1, n+1):\n        a = max(a + i, b)\n        b = max(b, a + i/2)\n    return a\n",
        "num_ids": 55
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        return max(n//2+f(n//3)+f(n//4)+f(n//5), n)\n    return f(n)\n",
        "num_ids": 45
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    if n == 1:\n        max_sum = 1\n    if n == 2:\n        max_sum = 3\n    if n == 3:\n        max_sum = 5\n    if n == 4:\n        max_sum = 7\n    if n == 5:\n        max_sum = 9\n    if n == 6:\n        max_sum = 11\n    if n == 7:\n        max_sum = 13\n    if n == 8:\n        max_sum = 15\n    if n == 9:\n        max_sum = 17\n    if n == 10:\n        max_sum = 19\n    return max_sum\n",
        "num_ids": 155
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max (get_max_sum_help(n/2), get_max_sum_help(n/3), get_max_sum_help(n/4), get_max_sum_help(n/5))\n",
        "num_ids": 55
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = 1\n    max_sum = 0\n    while(n <= n/2):\n        if n % 2 == 0:\n            max_sum = max(max_sum, (n/2) + n + (n/3) + (n/4))\n        else:\n            max_sum = max(max_sum, n + (n/2) + (n/3) + (n/4))\n        n += 1\n    return max_sum\n",
        "num_ids": 110
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return get_max_sum_recursive(n,0,0,0)\n",
        "num_ids": 22
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return 1\n    if n%2 == 0:\n        return max( get_max_sum(n//2), get_max_sum(n//3) + n )\n    elif n%3 == 0:\n        return max( get_max_sum(n//3) + n, get_max_sum(n//2) )\n    elif n%4 == 0:\n        return max( get_max_sum(n//4) + n, get_max_sum(n//3) )\n    elif n%5 == 0:\n        return max( get_max_sum(n//5) + n, get_max_sum(n//4) )\n    else:\n        return n\n        \nn = int(input())\nprint(get_max_sum(n))\n",
        "num_ids": 195
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = 0\n    while n >= 1:\n        if n % 2 == 0:\n            result = max(result, n//2 + get_max_sum(n//2))\n        if n % 3 == 0:\n            result = max(result, n//3 + get_max_sum(n//3))\n        if n % 4 == 0:\n            result = max(result, n//4 + get_max_sum(n//4))\n        if n % 5 == 0:\n            result = max(result, n//5 + get_max_sum(n//5))\n        n = n - 1\n    return result\nprint(get_max_sum(10))\nprint(get_max_sum(100))\nprint(get_max_sum(200))\nprint(get_max_sum(500))",
        "num_ids": 192
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n",
        "num_ids": 64
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    return f(n)\n",
        "num_ids": 77
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max = 0\n    for item in input_list:\n        if len(item) > max:\n            max = len(item)\n    \n    max_list = []\n    for item in input_list:\n        if len(item) == max:\n            max_list.append(item)\n    \n    return max_list\n",
        "num_ids": 82
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n",
        "num_ids": 16
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_index = 0\n    for index, item in enumerate(input_list):\n        if len(item) > max_len:\n            max_len = len(item)\n            max_index = index\n    return input_list[max_index]\n",
        "num_ids": 77
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_list.clear()\n            max_length_list.append(input_list[i])\n        elif len(input_list[i]) == max_length:\n            max_length_list.append(input_list[i])\n",
        "num_ids": 121
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return []\n    elif len(input_list) == 1:\n        return input_list\n    else:\n        max_length = 0\n        for item in input_list:\n            if len(item) > max_length:\n                max_length = len(item)\n                max_length_list = input_list\n        return max_length_list\n",
        "num_ids": 98
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            longest_list = input_list\n    return longest_list\n",
        "num_ids": 56
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list\n",
        "num_ids": 64
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 53
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 46
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    if len(test_tup) == len(seen):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # for i in test_tup:\n    #     if test_tup.count(i) > 1:\n    #         return False\n    # return True\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 61
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    lst = []\n    for x in test_tup:\n        if x not in lst:\n            lst.append(x)\n        else:\n            print(x, \" is already in the list. \\n Duplicates are not allowed. \")\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for tup in test_tup:\n        if tup in seen:\n            return False\n        else:\n            seen.add(tup)\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    new_tup = sorted(test_tup)\n    if new_tup.count(new_tup[0]) == len(new_tup):\n        return False\n    else:\n        return True\n",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # You can either iterate over tuple and keep checking or just use two variables.\n    # just need to remember to check if 2 values are same\n    a_list = list(test_tup)\n    for i in range(len(a_list)):\n        if a_list.count(a_list[i])!= 1:\n            return False\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_dict = {}\n    for i in test_tup:\n        if i in test_dict:\n            return False\n        else:\n            test_dict[i] = 1\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) <= 1:\n        return True\n    else:\n        for i in range(len(test_tup)-1):\n            for j in range(i+1,len(test_tup)):\n                if test_tup[i] == test_tup[j]:\n                    return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1)==0:\n        return ''\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if str1[i]==str1[j]:\n                return 'Not found'\n    return str1[0]\n    \n    \n",
        "num_ids": 80
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return -1\n",
        "num_ids": 18
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return -1\n",
        "num_ids": 46
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1)==0:\n        return -1\n    hashmap={}\n    for i in range(len(str1)):\n        if str1[i] in hashmap:\n            hashmap[str1[i]]+=1\n        else:\n            hashmap[str1[i]]=1\n    for i in range(len(str1)):\n        if hashmap[str1[i]]==1:\n            return i\n    return -1\n",
        "num_ids": 113
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = set(str1)\n    for char in chars:\n        if str1.count(char) == 1:\n            return char\n    return None\n    \n    ",
        "num_ids": 43
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return '_'\n",
        "num_ids": 45
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    set_char = set()\n    for char in str1:\n        set_char.add(char)\n    for char in str1:\n        if char in set_char:\n            return char\n    return None\n",
        "num_ids": 53
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n",
        "num_ids": 39
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return None\n    if len(str1) == 1:\n        return str1\n",
        "num_ids": 33
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n",
        "num_ids": 39
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # code here \n    if(re.match(regex,string)):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.endswith(string[0]):\n        if string.startswith(string[-1]):\n            return True\n        else:\n            return False\n    else:\n        return False\nprint(check_char(\"hello\"))\nprint(check_char(\"hi\"))\nprint(check_char(\"hiya\"))\nprint(check_char(\"hell\"))\nprint(check_char(\"hello\"))\ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    s1 = s.lower()\n    if len(s) == 0:\n        return True\n    else:\n        if (len(s1) % 2 == 0):\n            p = len(s1)//2\n            a = s1[:p]\n            b = s1[p+1:]\n            if a == b:\n                return True\n            else:\n                return False\n        else:\n            p = len(s1)//2\n            a = s1[:p]\n            b = s1[p+1:]\n            if a == b:\n                return True\n            else:\n                return False\nprint(is_palindrome(\"\"))\nprint(is_palindrome(\"12\"))\nprint(is_palindrome(\"aba\"))\nprint(is_palindrome(\"abc\"))\nprint(is_palindrome(\"kayak\"))\nprint(is_palindrome(\"kayak\"))\ndef find_upper_case(s):\n    '''\n    Write a function to find the first appearance of the\n    character 'U' in a given string. If the 'U'\n    does not appear in the string, return -1.\n    '''\n    result = -1\n    if len(s) > 0:\n        if s.find('U')!= -1:\n            result = s.find('U')\n        else:\n            result = -1\n    return result\nprint(find_upper_case(\"\"))\nprint(find_upper_case(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_upper_case(\"heLLo\"))\ndef is_palindrome_1(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\nprint(is_palindrome_1(\"\"))\nprint(is_palindrome_1(\"1\"))\nprint(is_palindrome_1(\"12\"))\nprint(is_palindrome_1(\"aba\"))\nprint(is_palindrome_1(\"abc\"))\nprint(is_palindrome_1(\"kayak\"))\nprint(is_palindrome_1(\"kayak\"))\ndef is_palindrome_2(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    s = s.lower()\n    for i in range(len(s)):\n        if (s[i] in s[:i]):\n            return True\n        else:\n            return False\nprint(is_palindrome_2(\"\"))\nprint(is_palindrome_2(\"1\"))\nprint(is_palindrome_2(\"12\"))\nprint(is_palindrome_2(\"aba\"))\nprint(is_palindrome_2(\"abc\"))\nprint(is_palindrome_2(\"kayak\"))\nprint(is_palindrome_2(\"kayak\"))\ndef is_palindrome_3(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = re.sub(r'[^\\w]','',s)\n    for i in range(len(s)):\n        if s[i]!= s[-(i+1)]:\n            return False\n    return True\nprint(is_palindrome_3(\"\"))\nprint(is_palindrome_3(\"1\"))\nprint(is_palindrome_3(\"12\"))\nprint(is_palindrome_3(\"aba\"))\nprint(is_palindrome_3(\"abc\"))\nprint(is_palindrome_3(\"kayak\"))\nprint(is_palindrome_3(\"kayak\"))\ndef is_palindrome_4(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome_4(s[1:-1])\nprint(is_palindrome_4(\"\"))\nprint(is_palindrome_4(\"1\"))\nprint(is_palindrome_4(\"12\"))\nprint(is_palindrome_4(\"aba\"))\nprint(is_palindrome_4(\"abc\"))\nprint(is_palindrome_4(\"kayak\"))\nprint(is_palindrome_4(\"kayak\"))\ndef is_palindrome_5(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    s1 = s[0:len(s)//2]\n    s2 = s[len(s)//2:len(s)]\n    if s1!= s2:\n        return False\n    return is_palindrome_5(s1)\nprint(is_palindrome_5(\"\"))\nprint(is_palindrome_5(\"1\"))\nprint(is_palindrome_5(\"12\"))\nprint(is_palindrome_5(\"aba\"))\nprint(is_palindrome_5(\"abc\"))\nprint(is_palindrome_5(\"kayak\"))\nprint(is_palindrome_5(\"kayak\"))\ndef is_palindrome_6(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    s1 = s[0:len(s)//2]\n    s2 = s[len(s)//2:len(s)]\n    if s1!= s2:\n        return False\n    return is_palindrome_6(s1)\nprint(is_palindrome_6(\"\"))\nprint(is_palindrome_6(\"1\"))\nprint(is_palindrome_6(\"12\"))\nprint(is_palindrome_6(\"aba\"))\nprint(is_palindrome_6(\"abc\"))\nprint(is_palindrome_6(\"kayak\"))\nprint(is_palindrome_6(\"kayak\"))\ndef is_palindrome_7(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    s1 = s[0:len(s)//2]\n    s2 = s[len(s)//2:len(s)]\n    if s1!= s2:\n        return False\n    return is_palindrome_7(s1)\nprint(is_palindrome_7(\"\"))\nprint(is_palindrome_7(\"1\"))\nprint(is_palindrome_7(\"12\"))\nprint(is_palindrome_7(\"aba\"))\nprint(is_palindrome_7(\"abc\"))\nprint(is_palindrome_7(\"kayak\"))\nprint(is_palindrome_7(\"kayak\"))\ndef is_palindrome_8(s):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    s1 = s[0:len(s)//2]\n    s2 = s[len(s)//2:len(s)]\n    if s1!= s2:\n        return False\n    return is_palindrome_8(s1)\nprint(is_palindrome_8(\"\"))\nprint(is_palindrome_8(\"1\"))\nprint(is_palindrome_8(\"12\"))\nprint(is_palindrome_8(\"aba\"))\nprint",
        "num_ids": 130
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    if(re.search(regex,string)):\n        return True\n    else:\n        return False",
        "num_ids": 29
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.search(regex, string) else False\n",
        "num_ids": 18
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = str(string)\n    if (re.search(regex, string)):\n        print(string,\"is a palindrome\")\n    else:\n        print(string,\"is not a palindrome\")\n",
        "num_ids": 53
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = regex\n    match = re.search(pattern, string)\n    if match:\n        return 'True'\n    else:\n        return 'False'\n",
        "num_ids": 40
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a.sort()\n    b.sort()\n    c.sort()\n    if len(a) % 2 == 0:\n        median = (a[int(len(a)/2)] + a[int(len(a)/2) - 1]) / 2\n    else:\n        median = a[int(len(a)/2)]\n    return median\n",
        "num_ids": 87
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_array = sorted([a,b,c])\n    return sorted_array[1] if (a+b+c)%2 == 0 else (sorted_array[0] + sorted_array[1])/2\n",
        "num_ids": 56
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a + b + c) / 2 <= (a + b + c) / 2:\n        print(round(a + b + c) / 2)\n    elif (a + b + c) / 2 > (a + b + c) / 2:\n        print((a + b + c) / 2)\n    elif (a + b + c) / 2 > (a + b + c) / 2:\n        print((a + b + c) / 2)\n",
        "num_ids": 114
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a,b,c])\n    print(numbers[1])\n",
        "num_ids": 24
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    temp=sorted([a,b,c])\n    temp=temp[1]\n    if a<b:\n        if a<c:\n            temp=a\n        else:\n            temp=c\n    else:\n        if b<c:\n            temp=b\n        else:\n            temp=c\n    return temp\n",
        "num_ids": 80
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    nums = [a,b,c]\n    nums.sort()\n",
        "num_ids": 23
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n",
        "num_ids": 34
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if a + b > c:\n        return b\n    elif a + c > b:\n        return c\n    else:\n        return a\n",
        "num_ids": 53
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    l=[a,b,c]\n    l.sort()\n    if len(l)%2!=0:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2-1] + l[len(l)//2])/2\n        \n",
        "num_ids": 78
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    m = (a + b + c) - min(a, b, c) - max(a, b, c)\n    m /= 2\n    if a + b > c:\n        return m\n    elif a + c > b:\n        return m\n    elif c + b > a:\n        return m\n    elif a + c == b + c:\n        return b\n    elif a + b == c + b:\n        return c\n    elif a + c == b + c:\n        return b\n    else:\n        return c\n",
        "num_ids": 134
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    summ = 0\n    for n in nums:\n        summ += (n % 10)\n    return summ\n",
        "num_ids": 30
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    lst = []\n    for i in nums:\n        lst.append(int(i))\n    total = 0\n    for i in lst:\n        total += i\n    return total\n",
        "num_ids": 49
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for i in range(len(nums)):\n        total_sum += nums[i] % 10\n    return total_sum",
        "num_ids": 40
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    return sum([int(n) for n in nums])\n    \n",
        "num_ids": 21
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    sum = 0\n    for num in nums:\n        sum += len(str(num))\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(n) for n in str(nums)])\n    # return sum([int(n) for n in str(nums) if n.isdigit()])\n    # return sum([int(n) for n in str(nums) if n.isdigit()])\n",
        "num_ids": 72
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    #For each element in the list:\n    for i in nums:\n        #Find the sum of each digit in the element\n        #Divide it by 10 and store the remainder in the temp variable\n        temp = i % 10\n        #Add the temp variable to the sum\n        sum = sum + temp\n    \n    return sum\n",
        "num_ids": 80
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums = map(int, nums)\n    return sum(map(int, nums))\n",
        "num_ids": 26
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_res = ()\n    for x, y in zip(test_tup1, test_tup2):\n        xor_res += (int(x) ^ int(y),)\n    return xor_res\n",
        "num_ids": 56
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    try:\n        # Try to covert into integers\n        int_test_tup1 = int(test_tup1[0])\n        int_test_tup2 = int(test_tup2[0])\n        # Convert the bitwise xor operation\n        return int_test_tup1 ^ int_test_tup2\n    except ValueError:\n        # Convert the bitwise xor operation\n        return test_tup1[0] ^ test_tup2[0]\n",
        "num_ids": 118
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor = (int(test_tup1[0]) ^ int(test_tup2[0]))\n    return (bitwise_xor, test_tup1[1] + test_tup2[1])\n",
        "num_ids": 60
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (int(test_tup1[0]) ^ int(test_tup1[1]) ^ int(test_tup2[0]) ^ int(test_tup2[1]), int(test_tup2[0]) ^ int(test_tup1[0]) ^ int(test_tup1[1]) ^ int(test_tup2[1]))\n",
        "num_ids": 93
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (int(x)^int(y) for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 34
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (tup1, tup2)\n",
        "num_ids": 14
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (\n        test_tup1[0] ^ test_tup2[0],\n        test_tup1[1] ^ test_tup2[1],\n        test_tup1[2] ^ test_tup2[2],\n        test_tup1[3] ^ test_tup2[3]\n    )\n",
        "num_ids": 85
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list[:i]:\n            freq += 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Count number of unique elements in a list\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n",
        "num_ids": 58
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Complete the function\n    return len(set(tuple(element) for element in test_list))\n",
        "num_ids": 27
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for num in test_list:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] = freq[num] + 1\n    return freq\n",
        "num_ids": 59
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(l) for l in test_list))\n",
        "num_ids": 21
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] = freq[i]+1\n        else:\n            freq[i] = 1\n    return freq\n",
        "num_ids": 57
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for i in range(0, len(test_list)):\n        freq.append(test_list[i][0])\n    return len(freq)\n",
        "num_ids": 47
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    frequencies = dict()\n    for index, element in enumerate(test_list):\n        if element in frequencies:\n            frequencies[element] += 1\n        else:\n            frequencies[element] = 1\n    return frequencies\n",
        "num_ids": 59
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = dict()\n    for i in range(len(test_list)):\n        if test_list[i] in freq:\n            freq[test_list[i]] += 1\n        else:\n            freq[test_list[i]] = 1\n    return freq\n",
        "num_ids": 71
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    res = ()\n    for i in range(len(tup1)):\n        res += (tup1[i]+tup2[i],)\n    return res\n",
        "num_ids": 71
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = ('H', 'e', 'l', 'l', 'o')\n    test_tup2 = ('l', 'o', 'w', 'o', 'r')\n    test_tup3 = ()\n    test_tup4 = ('a',)\n    test_tup5 = ('e', 'l', 'o', 'l', 'l')\n    test_tup6 = ('l', 'o', 'w', 'o', 'r')\n",
        "num_ids": 115
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # if test_tup1 == () and test_tup2 == ():\n    #     return ()\n",
        "num_ids": 28
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #storing the values\n    my_list = []\n    for t1, t2 in zip(test_tup1, test_tup2):\n        #print(t1, t2)\n        my_list.append(t1+t2)\n",
        "num_ids": 64
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    lst = []\n    for i in range(len(test_tup1)):\n        lst.append(test_tup1[i] + test_tup2[i])\n    return tuple(lst)\n",
        "num_ids": 56
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    add_tuple1 = (test_tup1[0], test_tup1[1], test_tup1[2])\n    add_tuple2 = (test_tup2[0], test_tup2[1], test_tup2[2])\n    add_tup = (add_tuple1[0] + add_tuple2[0], add_tuple1[1] + add_tuple2[1], add_tuple1[2] + add_tuple2[2])\n    return add_tup\n",
        "num_ids": 134
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    lst_test = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            lst_test.append((test_tup1[i] + test_tup2[i]))\n        return tuple(lst_test)\n    else:\n        return -1\n",
        "num_ids": 92
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x,y:x+y,test_tup1,test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #tup1 = tuple(tup1)\n    #tup2 = tuple(tup2)\n    #print(tup1, tup2)\n    \n    tup1 = tuple([1,2,3])\n    tup2 = tuple([4,5,6])\n    \n    tup3 = []\n    for i in range(len(tup1)):\n        tup3.append(tup1[i]+tup2[i])\n    return tup3\n    \n    \n    \ndef add_tuple(tup1, tup2):\n    '''\n    Write a function to perform element wise addition of tuple elements.\n    '''\n    \n    tup1 = tuple(tup1)\n    tup2 = tuple(tup2)\n    \n    tup3 = []\n    for i in range(len(tup1)):\n        tup3.append(tup1[i]+tup2[i])\n    return tup3\n    \n",
        "num_ids": 79
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a < b:\n        return b\n    else:\n        return a\n    \n    \ndef isPrime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    count = 2\n    \n    if n <= 1:\n        return False\n    \n    if n == 2:\n        return True\n    \n    while count < n:\n        if n % count == 0:\n            return False\n        count = count + 1\n    \n    return True\n    \n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(s) == 0:\n        return False\n    \n    if len(s) == 1:\n        return True\n    \n    if s[0] == s[-1]:\n        return palindrome(s[1:-1])\n    \n    else:\n        return False\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the fibonacci series upto n-th term.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-2) + fibonacci(n-1)\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to compute n!\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    \n    # Reverse the string\n    rev = s[::-1]\n    \n    # Check if the string is equal to its reverse\n    if s == rev:\n        return True\n    \n    return False\n    \n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    \n    if a > b:\n        return gcd(b,a)\n    else:\n        return gcd(a,b)\n    \n    \ndef fib(n):\n    '''\n    Write a python function to compute the fibonacci series upto n-th term.\n    '''\n    \n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n    \n    \ndef binary_search(l, key):\n    '''\n    Write a python function to search a key in a sorted list using binary search.\n    '''\n    if len(l) == 0:\n        return -1\n    \n    if len(l) == 1:\n        if key == l[0]:\n            return 0\n        else:\n            return -1\n    \n    mid = len(l) // 2\n    \n    if key == l[mid]:\n        return mid\n    elif key > l[mid]:\n        return binary_search(l[mid+1:], key)\n    else:\n        return binary_search(l[:mid], key)\n    \n    \ndef binary_search_index(l, key):\n    '''\n    Write a python function to search a key in a sorted list using binary search.\n    '''\n    if len(l) == 0:\n        return -1\n    \n    if len(l) == 1:\n        if key == l[0]:\n            return 0\n        else:\n            return -1\n    \n    mid = len(l) // 2\n    \n    if key == l[mid]:\n        return mid\n    elif key > l[mid]:\n        return binary_search_index(l[mid+1:], key)\n    else:\n        return binary_search_index(l[:mid], key)\n    \n    \ndef delete_element(l, key):\n    '''\n    Write a python function to delete a key in a sorted list.\n    '''\n    if len(l) == 0:\n        return False\n    \n    if len(l) == 1:\n        if key == l[0]:\n            return False\n        else:\n            return True\n    \n    mid = len(l) // 2\n    \n    if key == l[mid]:\n        l.pop(mid)\n        return True\n    \n    if key > l[mid]:\n        return delete_element(l[mid+1:], key)\n    else:\n        return delete_element(l[:mid], key)\n    \n    \ndef missing_number(l, key):\n    '''\n    Write a python function to find the missing number in a sorted list.\n    '''\n    if len(l) == 0:\n        return False\n    \n    if len(l) == 1:\n        if l[0] == key:\n            return False\n        else:\n            return True\n    \n    mid = len(l) // 2\n    \n    if key == l[mid]:\n        return True\n    elif key > l[mid]:\n        return missing_number(l[mid+1:], key)\n    else:\n        return missing_number(l[:mid], key)\n    \n    \ndef merge_lists(l1,l2):\n    '''\n    Write a python function to merge two sorted list.\n    '''\n    if l1 == None:\n        return l2\n    if l2 == None:\n        return l1\n    if l1.data <= l2.data:\n        merged_list = List()\n        merged_list.data = l1.data\n        merged_list.next = merge_lists(l1.next,l2)\n    else:\n        merged_list = List()\n        merged_list.data = l2.data\n        merged_list.next = merge_lists(l1,l2.next)\n    return merged_list\n    \n    \ndef remove_duplicates(l):\n    '''\n    Write a python function to remove duplicate elements from a sorted list.\n    '''\n    if l == None:\n        return l\n    \n    if l.next == None:\n        return l\n    \n    prev = l\n    curr = l.next\n    \n    while curr!= None:\n        if prev.data == curr.data:\n            prev.next = curr.next\n        else:\n            prev = curr\n        curr = curr.next\n    \n    return l\n    \n    \ndef merge_sort(l):\n    '''\n    Write a python function to sort a list using merge sort.\n    '''\n    if l == None:\n        return l\n    \n    if len(l) == 1:\n        return l\n    \n    mid = len(l) // 2\n    \n    l1 = List()\n    l2 = List()\n    \n    l1 = merge_sort(l[:mid])\n    l2 = merge_sort(l[mid:])\n    \n    return merge_lists(l1,l2)\n    \n    \ndef find_intersection(l1,l2):\n    '''\n    Write a python function to find the intersection of two lists.\n    '''\n    if l1 == None or l2 == None:\n        return l1\n    \n    if l1.data <= l2.data:\n        return find_intersection(l1.next, l2)\n    else:\n        return find_intersection(l1, l2.next)\n    \n    \ndef find_intersection_with_set(l1,l2):\n    '''\n    Write a python function to find the intersection of two lists.\n    '''\n    if l1 == None or l2 == None:\n        return l1\n    \n    if l1.data <= l2.data:\n        return find_intersection_with_set(l1.next, l2)\n    else:\n        return find_intersection_with_set(l1, l2.next)\n    \n    \ndef find_intersection_with_dict(d1,d2):\n    '''\n    Write a python function to find the intersection of two dictionaries.\n    '''\n    if d",
        "num_ids": 5
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    elif a > b:\n        return b\n    else:\n        return a\n",
        "num_ids": 33
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \nminimum(5,6)  #returns 5\nminimum(-2,4) #returns -2\nminimum(1,-2) #returns 1\n        \n        ",
        "num_ids": 61
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \nprint(minimum(5,7))\n",
        "num_ids": 32
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \nprint(minimum(4,5))\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n",
        "num_ids": 12
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    # if a > b:\n    #     return a\n    # else:\n    #     return b\n    \n    # using min() function\n    return min(a,b)\n",
        "num_ids": 47
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tuple_item in tuplex:\n        if tuple_item==tuple1:\n            return True\n    return False\n    \ndef check_tuplex_iter(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple. Iterate over the tuple to check whether the element exists.\n    '''\n    for tuple_item in tuplex:\n        if tuple_item==tuple1:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n        else:\n            return False\n        \nprint(check_tuplex((1,2,3,4),(1,2,3,5,6,6)))",
        "num_ids": 62
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            print(i,\"exists in tuple1\")\n        else:\n            print(i,\"does not exist in tuple1\")\n",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==tuple1:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i==tuple1:\n            return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = (2,4,5)\n    tuple1 = (1,2,3,4)\n    try:\n        for i in range(len(tuplex)):\n            if tuplex[i] == tuple1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        \n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_listx(listx,list1):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    listx = [2,4,5]\n    list1 = [1,2,3,4]\n    try:\n        for i in range(len(listx)):\n            if listx[i] == list1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_setx(setx,set1):\n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    setx = {2,4,5}\n    set1 = {1,2,3,4}\n    try:\n        for i in range(len(setx)):\n            if setx[i] == set1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_setx(setx,set1):\n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    setx = {2,4,5}\n    set1 = {1,2,3,4}\n    try:\n        for i in range(len(setx)):\n            if setx[i] == set1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = (2,4,5)\n    tuple1 = (1,2,3,4)\n    try:\n        for i in range(len(tuplex)):\n            if tuplex[i] == tuple1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_listx(listx,list1):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    listx = [2,4,5]\n    list1 = [1,2,3,4]\n    try:\n        for i in range(len(listx)):\n            if listx[i] == list1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_setx(setx,set1):\n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    setx = {2,4,5}\n    set1 = {1,2,3,4}\n    try:\n        for i in range(len(setx)):\n            if setx[i] == set1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = (2,4,5)\n    tuple1 = (1,2,3,4)\n    try:\n        for i in range(len(tuplex)):\n            if tuplex[i] == tuple1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_listx(listx,list1):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    listx = [2,4,5]\n    list1 = [1,2,3,4]\n    try:\n        for i in range(len(listx)):\n            if listx[i] == list1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_setx(setx,set1):\n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    setx = {2,4,5}\n    set1 = {1,2,3,4}\n    try:\n        for i in range(len(setx)):\n            if setx[i] == set1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = (2,4,5)\n    tuple1 = (1,2,3,4)\n    try:\n        for i in range(len(tuplex)):\n            if tuplex[i] == tuple1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_listx(listx,list1):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    listx = [2,4,5]\n    list1 = [1,2,3,4]\n    try:\n        for i in range(len(listx)):\n            if listx[i] == list1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_setx(setx,set1):\n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    setx = {2,4,5}\n    set1 = {1,2,3,4}\n    try:\n        for i in range(len(setx)):\n            if setx[i] == set1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = (2,4,5)\n    tuple1 = (1,2,3,4)\n    try:\n        for i in range(len(tuplex)):\n            if tuplex[i] == tuple1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_listx(listx,list1):\n    '''\n    Write a function to check whether an element exists within a list.\n    '''\n    listx = [2,4,5]\n    list1 = [1,2,3,4]\n    try:\n        for i in range(len(listx)):\n            if listx[i] == list1[i]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    except IndexError as e:\n        print(\"Error\",e)\n        \ndef check_setx(setx,set1):\n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    setx = {2,4,5}\n    set1 = {1,2,3,4}\n    try:\n        for i in range(len(setx)):\n            if setx[i] == set1[i]:\n                print(\"Yes\")\n            els",
        "num_ids": 67
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s = ''.join(str(i) for i in x)\n    s = s.replace('1','x')\n    s = s.replace('0','x')\n    s = s.replace('x','1')\n    s = s.replace('x', '0')\n    if s.count('x')%2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 95
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #x = int(input(\"Enter any number:\"))\n    if x%2==0:\n        print(\"Number is even.\")\n    else:\n        print(\"Number is odd.\")\ndef IsPalindrome(x): \n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    #x = int(input(\"Enter any number:\"))\n    if str(x)[::-1]==str(x):\n        print(\"The given number is a palindrome.\")\n    else:\n        print(\"The given number is not a palindrome.\")\ndef String_Pattern(n): \n    '''\n    Write a python function to print the strings patterns of given numbers 1 to 9.\n    '''\n    for i in range(1,n+1):\n        for j in range(i):\n            print(i,end=\"\")\n        print(\"\")\ndef Subset(S,A): \n    '''\n    Write a python function to check whether a given set is a subset of another set.\n    '''\n    #S = set(input(\"Enter set S: \").split(\" \"))\n    #A = set(input(\"Enter set A: \").split(\" \"))\n    #S = set(S)\n    #A = set(A)\n    #if A.issubset(S):\n        #print(\"S is subset of A\")\n    #else:\n        #print(\"S is not subset of A\")\n    if S.issubset(A):\n        print(\"S is subset of A\")\n    else:\n        print(\"S is not subset of A\")\ndef Weighted_Graphe(V,E): \n    '''\n    Write a python function to find the transitive closure of a graph using adjacency matrix.\n    '''\n    V = int(input(\"Enter no. of vertices:\"))\n    E = int(input(\"Enter no. of edges:\"))\n    A = [[0 for i in range(V)] for j in range(V)]\n    for i in range(0,E):\n        a,b = map(int,input(\"Enter vertices:\").split(\" \"))\n        A[a-1][b-1]=1\n        A[b-1][a-1]=1\n    print(\"Adjacency matrix:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Transitive closure:\")\n    for i in range(V):\n        count=0\n        for j in range(V):\n            if A[i][j]==1:\n                count=count+1\n        if count>0:\n            for j in range(V):\n                if A[j][i]==0:\n                    A[j][i]=1\n            for j in range(V):\n                print(A[j][i],end=\" \")\n            print()\n    for i in range(V):\n        for j in range(V):\n            if A[i][j]==0:\n                A[i][j]=1\n                A[j][i]=1\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Transitive closure:\")\n    for i in range(V):\n        count=0\n        for j in range(V):\n            if A[i][j]==1:\n                count=count+1\n        if count>0:\n            for j in range(V):\n                if A[j][i]==0:\n                    A[j][i]=1\n            for j in range(V):\n                print(A[j][i],end=\" \")\n            print()\n    \ndef Weighted_Graph(V,E): \n    '''\n    Write a python function to find whether the graph is weighted or not.\n    '''\n    V = int(input(\"Enter no. of vertices:\"))\n    E = int(input(\"Enter no. of edges:\"))\n    A = [[0 for i in range(V)] for j in range(V)]\n    print(\"Adjacency matrix:\")\n    for i in range(0,E):\n        a,b = map(int,input(\"Enter vertices:\").split(\" \"))\n        A[a-1][b-1]=1\n        A[b-1][a-1]=1\n    print(\"Is it weighted:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Adjacency matrix:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    #Check if the graph is weighted or not\n    for i in range(V):\n        for j in range(V):\n            if A[i][j]==1:\n                count=0\n                for k in range(V):\n                    if A[j][k]==1:\n                        count=count+1\n                if count>0:\n                    for k in range(V):\n                        A[i][k]=0\n                        A[k][i]=0\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Adjacency matrix:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\ndef Weighted_Graph_Solution(V,E): \n    '''\n    Write a python function to find the transitive closure of a graph using adjacency matrix.\n    '''\n    V = int(input(\"Enter no. of vertices:\"))\n    E = int(input(\"Enter no. of edges:\"))\n    A = [[0 for i in range(V)] for j in range(V)]\n    for i in range(0,E):\n        a,b = map(int,input(\"Enter vertices:\").split(\" \"))\n        A[a-1][b-1]=1\n        A[b-1][a-1]=1\n    print(\"Adjacency matrix:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Transitive closure:\")\n    for i in range(V):\n        count=0\n        for j in range(V):\n            if A[i][j]==1:\n                count=count+1\n        if count>0:\n            for j in range(V):\n                A[j][i]=1\n                A[i][j]=1\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\ndef BFS(G, s): \n    '''\n    Write a python function to perform BFS traversal from a given source vertex.\n    '''\n    V = len(G)\n    visited = [0] * V\n    disc = [0] * V\n    parent = [-1] * V\n    q = deque()\n    q.append(s)\n    visited[s] = 1\n    while len(q) > 0:\n        s = q.popleft()\n        for i in range(V):\n            if G[s][i] and not visited[i]:\n                q.append(i)\n                visited[i] = 1\n                disc[i] = disc[s] + 1\n                parent[i] = s\n    print(\"Vertex \\tDistance from Source\")\n    for i in range(V):\n        print(\"\\t%d \\t%d\" % (i,disc[i]))\n    print(\"Parent Pointers:\")\n    for i in range(V):\n        print(\"\\t%d \\t%d\" % (i, parent[i]))\n",
        "num_ids": 227
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x & 1 == 0:\n        return 'even'\n    else:\n        return 'odd'\n",
        "num_ids": 29
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x&1 == 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x//2\n    return True if x%2 else False\n",
        "num_ids": 19
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while (x):\n        parity = parity ^ x & 1\n        x = x >> 1\n    return parity\n",
        "num_ids": 35
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 0 if (x & 1) else 1\n",
        "num_ids": 14
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # your code here\n    return x%2\n",
        "num_ids": 14
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n",
        "num_ids": 8
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    def next_bigger(s):\n        for i in range(len(s)):\n            if s[i] < s[i-1]:\n                temp = s[i]\n                s = s.replace(s[i], s[i-1])\n                s = s.replace(s[i-1], temp)\n        return int(s)\n    return next_bigger(s)\n",
        "num_ids": 105
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = sorted(n, reverse=True)\n    if int(''.join(n)) < int(max(n)):\n        return int(''.join(n))\n    else:\n        return -1\n",
        "num_ids": 59
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(list(str(n)),reverse=True)))\n",
        "num_ids": 23
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return n\n    else:\n        list_n = list(map(int, str(n)))\n        k = len(list_n)-1\n        while k > 0:\n            if list_n[k] > list_n[k-1]:\n                list_n[k], list_n[k-1] = list_n[k-1], list_n[k]\n            else:\n                k -= 1\n        return int(\"\".join(list_n))\n",
        "num_ids": 121
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    \n    digits = list(str(n))\n    curr_val = digits[0]\n    \n    for idx, d in enumerate(digits[1:]):\n        if d < curr_val:\n            digits = digits[:idx+1] + digits[idx+1:][::-1]\n            break\n        curr_val = d\n    \n    return int(''.join(digits))\n",
        "num_ids": 116
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    # Find the last digit in the inputted number\n    n_last_digit = int(str_n[-1])\n    # Set a variable to keep track of the length of the number\n    n_length = len(str_n)\n    # Sort the inputted number\n    str_n_sorted = sorted(str_n,reverse=True)\n    # Calculate the next bigger number by rearranging the digits\n    while True:\n        if n_last_digit <= 9:\n            break\n        else:\n            n_last_digit = n_last_digit % 10\n            str_n_sorted[-1] = str(n_last_digit)\n            str_n_sorted = str_n_sorted[0:n_length-1]\n            n_last_digit = int(str_n_sorted[-1])\n    # Return the new number\n    return int(''.join(str_n_sorted))\n",
        "num_ids": 234
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def swap(arr):\n        temp = arr[0]\n        arr[0] = arr[1]\n        arr[1] = temp\n        return arr\n    if n == 0:\n        return 0\n    if n<10:\n        return n\n    s = str(n)\n    arr = []\n    for i in range(len(s)):\n        arr.append(int(s[i]))\n    arr.sort()\n    #arr.sort(reverse=True)\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            arr = swap(arr)\n    arr = str(arr[0])+str(arr[1])+str(arr[2])+str(arr[3])\n    return int(arr)\n",
        "num_ids": 189
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    x = str(n)\n    res = int(x[1])\n    for i in range(len(x)-1):\n        res = int(res) + int(x[i+1])\n        print(res)\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    s_list = list(s)\n    for i in range(len(s_list)-1,0,-1):\n        if s_list[i] < s_list[i-1]:\n            s_list[i],s_list[i-1] = s_list[i-1],s_list[i]\n            break\n    s = ''.join(s_list)\n    return int(s)\n",
        "num_ids": 110
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0 or k == 0 or len(nums1) + len(nums2) <= k:\n        return []\n    h = []\n    \n    # add all pairs to heap\n    for i in range(k):\n        heapq.heappush(h, (nums1[i] + nums2[i], i))\n    \n    # loop over all pairs, check if they have been seen before, and push them to heap if not\n    vis = set()\n    while k > 0:\n        \n        # get smallest pair and add it to visited set\n        (pair, i) = heapq.heappop(h)\n        vis.add(i)\n        \n        # if the heap is not empty, we can add them to the heap again\n        if len(h) > 0:\n            \n            # get largest element of the heap and add it to visited set\n            # we could also use heapq.heappop(h) but I want to leave a visual trail of what we haven't yet added to the heap\n            (pair2, j) = heapq.heappop(h)\n            vis.add(j)\n            \n            # update heap based on difference in largest and smallest elements\n            if (pair2, j)!= (pair, i):\n                heapq.heappush(h, (pair - pair2, j))\n            \n        k -= 1\n    \n    # now we have the heap and all pairs, now we only need to return them\n    return sorted([(nums1[i], nums2[i]) for i in vis], key=lambda x: x[0])\n",
        "num_ids": 393
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # if k is larger than the size of the arrays\n    if k > len(nums1) + len(nums2):\n        return []\n",
        "num_ids": 37
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    n = len(nums1)\n    m = len(nums2)\n    def k_smallest_pair(nums1, nums2, k, m, n):\n        # 0 is the smallest element \n        # -1 is the largest element\n        if n == 0 or m == 0:\n            return\n",
        "num_ids": 83
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #similar to k_pairs but we sort the lists first\n",
        "num_ids": 17
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # # A faster solution using heapq\n    # heap = [(nums1[i] + nums2[j], i, j) for i in range(len(nums1)) for j in range(len(nums2))]\n    # heapq.heapify(heap)\n    # pairs = []\n    # for i in range(k):\n    #     pairs.append(heapq.heappop(heap))\n    # return pairs\n",
        "num_ids": 112
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # uses heap to get top k numbers of the first array\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap,(num, num))\n",
        "num_ids": 49
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # h = []\n    # for num1 in nums1:\n    #     for num2 in nums2:\n    #         heapq.heappush(h, (-abs(num1-num2), (num1, num2)))\n    # return sorted(map(lambda x: x[1], heapq.nsmallest(k, h)))\n",
        "num_ids": 87
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # arr1 = []\n    # arr2 = []\n    # for i in range(n):\n    #     arr1.append(nums1[i])\n    #     arr2.append(nums2[i])\n    # arr1.sort()\n    # arr2.sort()\n",
        "num_ids": 72
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    # print(nums1)\n    # print(nums2)\n    # print(k)\n    i = 0\n    j = 0\n    pq = []\n    while i < len(nums1) and j < len(nums2):\n        if i == 0:\n            # print(i, j)\n            heapq.heappush(pq, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n            # print(pq)\n            i += 1\n        else:\n            # print(i, j)\n            if nums1[i-1] <= nums2[j]:\n                heapq.heappush(pq, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n                # print(pq)\n                i += 1\n            else:\n                heapq.heappush(pq, (-nums1[i-1] + nums2[j], (nums1[i-1], nums2[j])))\n                # print(pq)\n                j += 1\n        if len(pq) > k:\n            heapq.heappop(pq)\n",
        "num_ids": 309
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # \u521b\u5efa\u4e00\u4e2a\u5806\uff0cheapq\u4e2d\u662f\u7b80\u5355\u5b9e\u73b0\u7684\u4e8c\u53c9\u5806\n    # \u4e00\u4e2a\u5806\u5176\u5b9e\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u4e8c\u53c9\u6811\u7684\u5806\u7ed3\u6784\uff0c\u53ea\u4e0d\u8fc7\u5728\u524d\u9762\u52a0\u5165\u7684\u8282\u70b9\u90fd\u4f1a\u88ab\u653e\u5230\u540e\u9762\n    heap = []\n    # nums1 = [1,3,5,2]\n    # nums2 = [-2,4,6,-1]\n    for i in range(len(nums1)):\n        # \u8fd9\u91cc\u662fheapq.heappush(heap, [nums1[i], nums2[i]])\u7684\u505a\u6cd5\uff0c\u6240\u4ee5\u8fd9\u91cc\u628a\u8f83\u5927\u7684\u653e\u5728\u524d\u9762\uff0c\u6240\u4ee5\u6700\u5c0f\u7684\u5c31\u662f\u8f83\u5c0f\u7684\u4e24\u4e2a\u6570\n        heapq.heappush(heap, [-nums2[i], nums1[i]])\n        # print(heap)\n    # print(heap)\n    # \u5f39\u51fa\u5806\u9876\n    # print(heapq.heappop(heap)[0])\n    # \u8fd9\u91cc\u7684heap[0]\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\uff1f\uff1f\u54ea\u6015\u662f\u8d1f\u6570\uff0c\u54ea\u6015\u662f\u6b63\u6570\uff0c\u5c31\u662f\u6b63\u6570\u7684\u90a3\u4e00\u8d34\uff0c\u800c\u662f\u53cd\u5411\u7684\u5806\u7684\u4e0b\u6807\u3002\n    # \u4e00\u4e2a\u7c7b\u4f3c\u7684\u65b9\u6cd5\u8fd8\u6709\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u662f\u6700\u5927\u5806\uff0c\u4e00\u4e2a\u662f\u6700\u5c0f\u5806\n    # \u4e24\u4e2a\u5806\u7684\u6700\u5927\u6570\uff0c\u5806\u4e2d\u7684\u6700\u5c0f\u6570\n    # \u6240\u4ee5\u4e0b\u6807\u7684\u8d34\u5fc3\u5c31\u662f\u6700\u5927\u7684\u5806\u7684\u6700\u5927\u5806\u4e2d\u6700\u5c0f\u7684\u5806\u7684\u6700\u5c0f\u5806\u7684\u90a3\u4e2a\u503c\n    # \u53bb\u6389\u4e00\u4e2a\u5806\u4e2d\u6700\u5927\u7684\u503c\n    # \u56e0\u4e3a\u6700\u5927\u5806\u4e2d\u7684\u6700\u5927\u503c\u662f\u5c0f\u4e8e\u6574\u4e2a\u5806\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u5982\u679c\u628a\u8fd9\u4e2a\u503c\u8f6c\u6362\u4e3a\u6b63\u6570\uff0c\u5b83\u5c31\u4f1a\u66f4\u5927\u4e00\u70b9\n    # \u56e0\u6b64\uff0c\u5982\u679c\u8ba9\u8fd9\u4e2a\u5806\u6700\u5927\u503c\u53d8\u4e3a\u8d1f\u6570\uff0c\u6240\u6709\u53ef\u80fd\u7684\u5806\u90fd\u4f1a\u53d8\u6210\u6b63\u6570\n    # \u4f46\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u5728\u6700\u5927\u5806\u4e2d\u4e0d\u4f1a\u53d8\u6210\u8d1f\u6570\n    # \u56e0\u6b64\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6b63\u6570\u7684\u4e0b\u6807\u5c31\u662f\u6700\u5927\u5806\u4e2d\u5c31\u662f\u6700\u5927\u503c\uff0c\u6240\u4ee5\u5982\u679c\u627e\u51fa\u5806\u4e2d\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u7528\u5806\u9876\u7684\u4e0b\u6807\u6765\u627e\u51fa\u8fd9\u4e2a\u503c\u4e86\n    while len(heap) > k:\n        # \u5f39\u51fa\u5806\u9876\n        heapq.heappop(heap)\n    return heap\n",
        "num_ids": 972
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = list(list1)\n    min_product = float('inf')\n    for i in range(len(list2)):\n        for j in range(i + 1, len(list2)):\n            product = list2[i][0] * list2[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "num_ids": 93
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x:x[0], reverse=True)\n    print(list1)\n    max_product = list1[0][1]*list1[0][2]\n    for i in range(len(list1)):\n        if(list1[i][1]*list1[i][2]<max_product):\n            max_product = list1[i][1]*list1[i][2]\n    return max_product\n    \nlist1 = [[8,4,5],[2,3,1]]\nprint(min_product_tuple(list1))\n",
        "num_ids": 146
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0] * list1[0][1]\n    for i in list1:\n        if min > i[0] * i[1]:\n            min = i[0] * i[1]\n    return min\n",
        "num_ids": 60
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #initializing min_product\n    min_product = float('inf')\n    #initializing min_index\n    min_index = -1\n    #looping over the list\n    for i in range(0, len(list1)):\n        #for every tuple\n        for j in range(i+1, len(list1)):\n            #compute the product\n            product = list1[i][0] * list1[j][0]\n            #if product is smaller than min_product and min_index is not initialized, \n            #init min_product and min_index to it.\n            if product < min_product and min_index == -1:\n                min_product = product\n                min_index = list1[i][1]\n            #if product is equal to min_product and min_index is not initialized, \n            #init min_product and min_index to it.\n            elif product == min_product and min_index == list1[i][1]:\n                min_index = list1[i][1]\n            #otherwise the min_product remains as it is and min_index remains as it is\n    return (min_product, min_index)\n",
        "num_ids": 279
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    ans = -1\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            prod = list1[i][0] * list1[j][0]\n            if prod > ans or ans == -1:\n                ans = prod\n    return ans\n",
        "num_ids": 82
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_pairs = []\n    for i in list1:\n        if i not in min_pairs:\n            min_pairs.append(i)\n    min_product = 0\n    for i in min_pairs:\n        for j in i:\n            min_product = max(min_product, j)\n    return min_product\n",
        "num_ids": 84
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float(\"inf\")\n    product = float(\"inf\")\n    for item in list1:\n        for item_2 in list1:\n            if item[0] == item_2[0] and item[1] == item_2[1]:\n                product = item[2]*item_2[2]\n                if product < min_product:\n                    min_product = product\n    return min_product\n",
        "num_ids": 101
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = 0\n    for i in list1:\n        for j in i:\n            if j < min:\n                min = j\n    return min\n",
        "num_ids": 38
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # your code here\n    if not list1:\n        return 0\n    min_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][0]\n            if prod < min_prod or min_prod == 0:\n                min_prod = prod\n    return min_prod\n",
        "num_ids": 109
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if min_product == None:\n                min_product = list1[i][1]*list1[j][1]\n            elif min_product > list1[i][1]*list1[j][1]:\n                min_product = list1[i][1]*list1[j][1]\n    return min_product\n",
        "num_ids": 120
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(0, len(listval)):\n        if (min_val > listval[i]):\n            min_val = listval[i]\n    return min_val\n",
        "num_ids": 59
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return min(listval[0], min_val(listval[1:]))\n",
        "num_ids": 45
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mini = listval[0]\n    for val in listval:\n        if val < mini:\n            mini = val\n    return mini\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val\n",
        "num_ids": 55
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for element in listval:\n        if element < min_value:\n            min_value = element\n    return min_value\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mini = listval[0]\n    for i in listval:\n        if i < mini:\n            mini = i\n    return mini\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    mini = listval[0]\n    for i in range(1, len(listval)):\n        if mini > listval[i]:\n            mini = listval[i]\n    return mini\n",
        "num_ids": 64
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    newList = []\n    for i in listval:\n        if type(i) == list:\n            newList.append(min_val(i))\n        else:\n            newList.append(i)\n    return min(newList)\n",
        "num_ids": 60
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min = listval[0]\n    for x in listval:\n        if x < min:\n            min = x\n    return min\n    \n    \nprint(min_val([5,4,1,2,3,4]))\nprint(min_val([\"hi\",2,4,3,2,3,2,2]))\nprint(min_val([1,2,3,4,5,6,7,8]))\nprint(min_val([1.3,2.7,3.9,4.2,5.1]))\nprint(min_val([\"apple\",2,4,3,2,3,2,2]))\n",
        "num_ids": 176
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title()\n",
        "num_ids": 9
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() if x.isalpha() else x for x in word.split('_'))\n",
        "num_ids": 32
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word on underscores\n    word = word.split('_')\n    # check if there is any underscores at all\n    if len(word) == 0:\n        return \"\"\n    # join the word with a dash\n    word = '-'.join(word)\n    # capitalize the first letter\n    word = word[0].upper() + word[1:]\n    # lowercase every character after the first\n    word = word[0].lower() + word[1:]\n    return word\n",
        "num_ids": 116
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for char in word:\n        if char!= '_':\n            result += char.capitalize()\n        else:\n            result += char\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = re.compile(r'([a-z0-9])([A-Z])')\n    split_word = regex.findall(word)\n    result = split_word[0][0].lower() + split_word[0][1].upper()\n    for i in range(1, len(split_word)):\n        result += split_word[i][0].lower() + split_word[i][1].upper()\n    return result\n",
        "num_ids": 112
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    first_letter = word[0]\n    \n    result = first_letter.upper()\n    \n    for i in range(1, len(word)):\n        letter = word[i]\n        if letter.isupper():\n            result += letter\n        else:\n            result += letter.lower()\n    \n    return result\n",
        "num_ids": 81
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    # Your code here\n    word = re.sub('_', '', word)\n    for i in range(len(word)):\n        if i == 0:\n            result = word[i].upper()\n        else:\n            result = word[i].upper() + result\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word is None:\n        return None\n    if word == \"\":\n        return \"\"\n    word = re.sub(\"_\", \" \", word)\n    word = re.sub(r\"\\s+\", \"_\", word)\n    return word.title()\n",
        "num_ids": 63
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_string = word.replace(\"_\", \"\")\n    return snake_string[0].upper() + snake_string[1:]\n",
        "num_ids": 35
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    l = []\n    camelcase = ''\n    for i in word:\n        if i == '_':\n            camelcase += i\n        else:\n            camelcase += i.title()\n        camelcase +=''\n    return camelcase\n",
        "num_ids": 62
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for num in l:\n        if num % 2 == 0:\n            odds.append(num)\n",
        "num_ids": 33
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        if (i+1)%2!= 0:\n            l.pop(i)\n    print(l)\n",
        "num_ids": 50
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    # making empty list\n    odd_list = []\n    \n    # iterating through the list\n    for element in l:\n        if (element % 2) == 0:\n            odd_list.append(element)\n    return odd_list\n",
        "num_ids": 61
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num % 2 == 0:\n            odd_list.append(num)\n    return odd_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return []\n    if len(l) == 1:\n        return l\n    else:\n        i = 0\n        while i < len(l):\n            if l[i] % 2!= 0:\n                l.pop(i)\n                i -= 1\n            else:\n                i += 1\n        return l\n",
        "num_ids": 87
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.pop(i)\n    return l",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2!= 0:\n            l.remove(i)\n    return l\n    \n",
        "num_ids": 33
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if not isinstance(l,list):\n        raise TypeError(\"l must be a list\")\n    if not l:\n        raise ValueError(\"l must contain list\")\n    for i in l:\n        if not isinstance(i,int):\n            raise TypeError(\"l must contain integers only\")\n        if not isinstance(i,bool):\n            raise TypeError(\"l must contain boolean values only\")\n    for i in l:\n        if i%2!=0:\n            l.remove(i)\n    return l\n",
        "num_ids": 125
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Your code here\n    l = l.copy()\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            l.remove(l[i])\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #Initializing an empty list\n    l = []\n    #Traversing the list\n    for x in l:\n        #Checking the element\n        if x%2!=0:\n            #Adding the element to the list\n            l.append(x)\n            #Removing the element\n    return l\n",
        "num_ids": 75
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1.sort()\n    new_list = []\n    new_list.append(list1[n])\n    for i in list1:\n        if i!= list1[n]:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 64
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # If the nth element is not available\n    if len(list1) <= n:\n        return None\n    # Extract the nth element\n    return list1[n]\n",
        "num_ids": 44
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[n])\n    return list2\n",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Using for loop\n    l = []\n    for i in range(0, n):\n        l.append(list1[i])\n    return l\n",
        "num_ids": 39
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        return None\n    else:\n        return list1[n]\n",
        "num_ids": 28
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #code here\n    if (len(list1)<=len(list2)):\n        index=0\n        for i in list1:\n            if i in list2:\n                return True\n            else:\n                index=index+1\n    else:\n        index=0\n        for i in list2:\n            if i in list1:\n                return True\n            else:\n                index=index+1\n    if index==len(list2):\n        return False\n",
        "num_ids": 114
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\nprint(overlapping([4,1,2,4],[1,2,4,4]))\nprint(overlapping([1,2,3,4],[2,3,4]))\n",
        "num_ids": 72
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #initialize result\n    res = False\n    #traversing both the list\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            #if any element is found in one list and element is not in the other list then it is overlapping\n            if list1[i]==list2[j] and list1[i] not in list2:\n                res = True\n                break\n    return res\n",
        "num_ids": 112
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n        \n    \n    \n    \n",
        "num_ids": 41
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    l1=list(list1)\n    l2=list(list2)\n    if len(l1)>len(l2):\n        l2.extend(['n']*(len(l1)-len(l2)))\n    else:\n        l1.extend(['n']*(len(l2)-len(l1)))\n    for i in l1:\n        if i in l2:\n            return True\n    return False\n",
        "num_ids": 110
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list(set(list1).intersection(set(list2)))\n",
        "num_ids": 20
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    found=False\n    for i in list1:\n        for j in list2:\n            if i==j:\n                found=True\n    return found\n",
        "num_ids": 39
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag = False\n    for i in range(0,len(list1)):\n        if(list1[i] in list2):\n            flag = True\n    if(flag):\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2, max3 = 0, 0, 0\n    # code here\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max1, max2, max3 = arr[i], max1, max2\n        elif arr[i] > max2:\n            max2, max3 = arr[i], max2\n        elif arr[i] > max3:\n            max3 = arr[i]\n    return max3\n",
        "num_ids": 118
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)==0:\n        return\n    arr.sort(reverse=True)\n    print(arr)\n    temp=arr[0]\n    print(temp)\n    for i in range(len(arr)-1):\n        if arr[i]*arr[i+1]<temp:\n            return temp,arr[i]*arr[i+1]\n    return temp,arr[0]*arr[1]\n",
        "num_ids": 105
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0] * arr[1] \n    for i in range(2, n): \n        if arr[i] > 0 : \n            max_product = max(max_product, arr[i]*arr[i-1]) \n            \n    return max_product \n",
        "num_ids": 82
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    n = len(arr)\n    \n    if n == 0: \n        return -1\n    \n    max1 = arr[0]\n    max2 = arr[0]\n    max_prod = max1 * max2\n    \n    #Find the maximum product from array of size 1\n    for i in range(1, n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n            max_prod = max1 * max2\n        elif arr[i] > max2:\n            max2 = arr[i]\n            \n    return max_prod\n",
        "num_ids": 173
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i]*arr[j] > max_val):\n                max_val = arr[i]*arr[j]\n                arr1 = arr[i]\n                arr2 = arr[j]\n    print(\"The pair having highest product is\", arr1, \"and\", arr2, \"with product = \", max_val)\n",
        "num_ids": 117
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if(len(arr) < 2):\n        raise ValueError(\"Error in max_Product: Array should contain at least 2 elements.\")\n    max_Product = arr[0] * arr[1]\n    for i in range(2,len(arr)):\n        if(arr[i] > max_Product):\n            max_Product = arr[i]\n",
        "num_ids": 85
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_value = arr[0]\n    max_index = 0\n    # using for loop for finding the pair\n    for i in range(1,len(arr)):\n        if(arr[i] > max_value):\n            max_value = arr[i]\n            max_index = i\n    \n    return max_index\n",
        "num_ids": 81
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    if n < 2: \n        return (-1, -1) \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] * arr[j] > arr[i] * arr[j]: \n                return (arr[i], arr[j]) \n    return (-1, -1)\n",
        "num_ids": 98
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    print(arr)\n    ans = 1\n    for i in range(len(arr)-1):\n        if arr[i]<0 or arr[i+1]<0:\n            continue\n        prod = arr[i]*arr[i+1]\n        if prod>ans:\n            ans = prod\n    return ans\n",
        "num_ids": 86
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max(arr)\n    max2 = max(arr)\n    \n    for i in range(len(arr)):\n        if arr[i]==max1:\n            temp = i\n            break\n        else:\n            continue\n    for j in range(len(arr)):\n        if arr[j]==max2:\n            temp1 = j\n            break\n        else:\n            continue\n    return temp, temp1\n",
        "num_ids": 106
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Create a dictionary\n    d = {}\n    for i in Input:\n        #If the tuple has the same first element, add the tuple to the dictionary \n        if i[0] in d.keys():\n            d[i[0]].append(i)\n        else:\n            d[i[0]] = []\n            d[i[0]].append(i)\n    #Iterate through each value of the dictionary \n    for i in d.values():\n        #If there are more than one common elements, return the first element\n        if len(i) > 1:\n            return i[0][0]\n    #If no common first element, return None\n    return None\n",
        "num_ids": 162
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dict_first = {}\n    for tuple in Input:\n        if tuple[0] not in dict_first:\n            dict_first[tuple[0]] = tuple[1]\n    return dict_first\n",
        "num_ids": 51
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    my_dict = {}\n    for i in Input:\n        if i[0] in my_dict:\n            my_dict[i[0]] += 1\n        else:\n            my_dict[i[0]] = 1\n",
        "num_ids": 56
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    x = set()\n    for i in Input:\n        x.add(i[0])\n    return x\n",
        "num_ids": 29
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_tuples = {}\n    for tuple_group in Input:\n        key = tuple_group[0]\n        if key in grouped_tuples:\n            grouped_tuples[key].append(tuple_group)\n        else:\n            grouped_tuples[key] = []\n            grouped_tuples[key].append(tuple_group)\n    return grouped_tuples\n",
        "num_ids": 97
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique_list = []\n    unique_values = set()\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                unique_values.add(Input[i][0])\n    for i in range(len(Input)):\n        if Input[i][0] in unique_values:\n            unique_list.append(Input[i])\n    return unique_list\n",
        "num_ids": 107
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    ans = {}\n    for i in Input:\n        if i[0] not in ans.keys():\n            ans[i[0]] = i\n        else:\n            ans[i[0]] = max(ans[i[0]], i, key=lambda x: x[1])\n    return ans\n",
        "num_ids": 74
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        count = 0\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i][0] == Input[j][0]:\n                    count += 1\n        if count == 1:\n            common.append(Input[i][0])\n    return common\n",
        "num_ids": 88
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set([i[0] for i in Input]))\n",
        "num_ids": 19
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    Input.sort(key=lambda x:x[0])\n    i = 0\n    s = set()\n    while i < len(Input)-1:\n        if Input[i][0] == Input[i+1][0]:\n            s.add(Input[i][0])\n        i += 1\n    return list(s)\n",
        "num_ids": 83
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = list(lst)\n    x = 0\n    max = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > x:\n            max = lst[i]\n            x = len(lst[i])\n    return max\n    \n    \n    ",
        "num_ids": 83
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length=0\n    max_element=0\n    for i in range(len(lst)):\n        if len(lst[i])>max_length:\n            max_length=len(lst[i])\n            max_element=lst[i]\n    return max_element\ndef Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length=0\n    max_element=0\n    for i in range(len(lst)):\n        if len(lst[i])>max_length:\n            max_length=len(lst[i])\n            max_element=lst[i]\n    return max_element\ndef Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in range(len(lst)):\n        if len(lst[i])>max_length:\n            max_length=len(lst[i])\n            max_element=lst[i]\n    return max_element\n",
        "num_ids": 60
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = []\n    max_length = 0\n    for i in lst:\n        lst_len.append(len(i))\n    for i in range(len(lst_len)):\n        if(lst_len[i] > max_length):\n            max_length = lst_len[i]\n    for i in range(len(lst_len)):\n        if(lst_len[i] == max_length):\n            return lst[i]\n",
        "num_ids": 121
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    for i in range(len(lst)):\n        if len(lst[i]) > len(lst[i+1]):\n            max = lst[i]\n    return max\n",
        "num_ids": 49
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in lst:\n        if len(i) > len(max):\n            max = i\n    return max\n",
        "num_ids": 40
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max_Length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > Max_Length:\n            Max_Length = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == Max_Length:\n            print(\"Element having Maximum Length: \",lst[i])\n",
        "num_ids": 93
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m=0\n    for i in range(len(lst)):\n        if len(lst[i])>m:\n            m=len(lst[i])\n            index=i\n    return index\nlst=['Alex','Sam','Naveen','Lakshman']\nprint(\"Maximum length element in list is:\",lst[Find_Max(lst)])\n",
        "num_ids": 93
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i])>max:\n            max = len(lst[i])\n            max_index = i\n    return max_index\n",
        "num_ids": 57
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # code here\n    max_len = max(len(lst), len(lst[0]))\n    max_len_el = []\n    for i in range(max_len):\n        max_len_el.append(0)\n    for i in range(max_len):\n        for j in lst:\n            if (len(j) <= i):\n                max_len_el[i] = max_len_el[i]\n            else:\n                max_len_el[i] = max(max_len_el[i], j[i])\n    for i in range(len(lst)):\n        for j in lst[i]:\n            if (len(j) == max_len):\n                print(j)\n                \n",
        "num_ids": 182
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(len(i))\n    return max(lst1)\n",
        "num_ids": 38
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n        print(round(i,2))\n    print(total*len(list1))\n",
        "num_ids": 41
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(\"The rounded sum is:\",round_sum(list1))\n    print(\"The length of the list is:\",len(list1))\n    print(\"The sum of the rounded numbers is:\",sum(list1))\n",
        "num_ids": 54
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(round(i))\n    print(\"Total sum is: \" + str(sum(new_list)*len(list1)))\n",
        "num_ids": 52
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list = []\n    for x in list1:\n        round_list.append(round(x))\n    total = 0\n    for y in range(len(round_list)):\n        total += (round_list[y] * len(round_list))\n    print(total)\n",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(\"Original List of Numbers:\", list1)\n    print(\"Sum of the given list multiplied by the length of the list:\", sum(list1)*len(list1))\n    print()\n",
        "num_ids": 47
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return(sum(list1)*len(list1))\n",
        "num_ids": 16
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum(list1) * len(list1))\n",
        "num_ids": 17
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #the function should take one argument, a list of numbers\n    #the function should return the total sum multiplied by the length of the list\n    result = 0\n    for i in range(len(list1)):\n        result += round(list1[i]) * len(list1)\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1)==0:\n        print(\"The list is empty\")\n    else:\n        return sum([int(round(i)) for i in list1])*len(list1)\n",
        "num_ids": 49
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Your code here\n    list1 = [1, 2, 3, 4, 5, 6]\n    sum = 0\n    for i in range(len(list1)):\n        sum += round(list1[i])\n",
        "num_ids": 55
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    return cube_sum\n",
        "num_ids": 37
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i=1\n    a = 0\n    while i<=n:\n        a = a + i**3\n        i = i + 2\n    return a\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n=int(input(\"enter the number:\"))\n    sum=0\n    i=1\n    while i<=n:\n        if(i%2==0):\n            sum=sum+i\n        i=i+1\n    print(sum)\ncube_Sum(n)\n",
        "num_ids": 70
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 1\n    cubes = 0\n    while i <= n:\n        cubes = cubes + (i ** 3)\n        i += 1\n    return cubes\n    \ndef main():\n    print(cube_Sum(1)) # -> 0\n    print(cube_Sum(2)) # -> 8\n    print(cube_Sum(3)) # -> 27\n    print(cube_Sum(4)) # -> 512\n    print(cube_Sum(5)) # -> 524\n    print(cube_Sum(6)) # -> 648\n    print(cube_Sum(7)) # -> 1008\n    print(cube_Sum(8)) # -> 1872\n    print(cube_Sum(9)) # -> 2736\n    print(cube_Sum(10)) # -> 5040\n    \nmain()",
        "num_ids": 187
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while (i < n):\n        sum = sum + i ** 3\n        i += 1\n    return sum\nprint('Cube sum of first n natural numbers = ', cube_Sum(5)) \n",
        "num_ids": 57
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s = s + i**3\n    print(s)\n",
        "num_ids": 35
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum\n    \nprint(cube_Sum(10))\n",
        "num_ids": 44
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1, n+1):\n        ans += i ** 3\n    return ans\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 3\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(input())\n    cubesum = 0\n    for i in range(1,n+1):\n        cubesum += i**3\n    print(cubesum)\n",
        "num_ids": 47
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (delimiter.join(test_tup))\n",
        "num_ids": 17
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (delimiter.join(test_tup))\n",
        "num_ids": 17
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str1 = \" \"\n    return str1.join(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for tup in test_tup:\n        result += tup\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Concatenate the elements of a tuple by delimiter \n    return \"\".join(test_tup)\n",
        "num_ids": 30
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return f'{test_tup[0]}{test_tup[1]}'\n",
        "num_ids": 24
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result = result + str(test_tup[i]) + \",\"\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #result = \"\".join(test_tup)\n    result = \"\"\n    #for i in range(len(test_tup)):\n    #    result = result + test_tup[i]\n    for tup in test_tup:\n        for tup1 in tup:\n            result += tup1\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in range(len(test_tup)-1):\n        test_tup[i] = test_tup[i] + test_tup[i+1]\n    return test_tup\n",
        "num_ids": 52
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += i\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Python program to find average of cubes of first n natural numbers\n    if(n <= 0):\n        raise ValueError(\"n must be greater than 0\")\n",
        "num_ids": 38
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num = 1\n    result = 0\n    while (num <= n):\n        result += num**3\n        num = num + 1\n    return result / n\n",
        "num_ids": 40
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    for i in range(1,n+1):\n        sum_of_numbers = sum_of_numbers + i**3\n    avg = sum_of_numbers / n\n    print(avg)\n",
        "num_ids": 64
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Declare a variable to keep sum of the cubes\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    # Return the average of the cubes\n    return sum/n\n",
        "num_ids": 55
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        s=s+pow(i,3)\n    return(s/n)\n",
        "num_ids": 37
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum/n\n",
        "num_ids": 31
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        i += 1\n        sum += i**3\n    return sum/n\n",
        "num_ids": 37
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n",
        "num_ids": 29
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    x = n**3\n    y = 1\n    sum = x + y\n    average = sum / n\n    return average\n",
        "num_ids": 32
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    average=sum/n\n    return average\n",
        "num_ids": 38
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple_list = list(test_tuple)\n    for i in range(len(tuple_list)):\n        tuple_list[i] = tuple_list[i][-1]\n    return tuple(tuple_list)\n",
        "num_ids": 60
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(tuple([x[-1] for x in test_tuple]))\n",
        "num_ids": 23
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[1])\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[-1])\n",
        "num_ids": 14
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple_list = test_tuple.split()\n    new_list = []\n    for item in tuple_list:\n        if 'back' in item:\n            new_list.append(item[0:len(item)-2])\n        else:\n            new_list.append(item)\n    return tuple(new_list)\n",
        "num_ids": 82
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    lst = []\n    for i in range(len(test_tuple)):\n        lst.append(test_tuple[i][-1])\n    return tuple(lst)\n",
        "num_ids": 48
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your code here\n    return ()\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n",
        "num_ids": 22
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for sublist in list1:\n        if x in sublist:\n            count=count+1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if x in element:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0\n    for i in list1:\n        if x in i:\n            result += 1\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Write your solution here\n    return len([x for x in list1 if x == x]) \n",
        "num_ids": 26
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for elem in list1:\n        if x in elem:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1.sort()\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for sublist in list1:\n        if x in sublist:\n            count+=1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] == x:\n            i = i + 1\n        else:\n            i = i + 1\n    return i\n",
        "num_ids": 50
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 1:\n            nums[i] = None\n    return nums\n",
        "num_ids": 44
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # return nums[1::2]\n",
        "num_ids": 13
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # filter only even numbers\n    return list(filter(lambda n: n % 2 == 0, nums))\n",
        "num_ids": 28
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num%2!= 0, nums))\n",
        "num_ids": 22
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2 == 1]\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2, nums)\n",
        "num_ids": 17
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda n: n%2!= 0,nums)\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return[num for num in nums if num % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in nums:\n        if i%2!=0:\n            oddnumbers.append(i)\n",
        "num_ids": 37
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "num_ids": 46
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    def month_name(month):\n        month_names={\n            \"1\":\"January\",\n            \"2\":\"February\",\n            \"3\":\"March\",\n            \"4\":\"April\",\n            \"5\":\"May\",\n            \"6\":\"June\",\n            \"7\":\"July\",\n            \"8\":\"August\",\n            \"9\":\"September\",\n            \"10\":\"October\",\n            \"11\":\"November\",\n            \"12\":\"December\"\n        }\n        return month_names[month]\n    if dt[2] == \"-\":\n        dt = dt[0:2]+\"-\"+month_name(dt[3:5])+\"-\"+dt[6:]\n    else:\n        dt = dt[0:2]+\"-\"+month_name(dt[2:4])+\"-\"+dt[5:]\n    return dt\n",
        "num_ids": 197
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[-4:] + \"-\" + dt[3:5] + \"-\" + dt[:2]\n",
        "num_ids": 32
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date=dt.split('-')\n    for i in range(len(new_date)):\n        new_date[i]=int(new_date[i])\n    new_date=list(map(str,new_date))\n    new_date='-'.join(new_date)\n    return new_date\n",
        "num_ids": 80
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:10] + \"-\" + dt[3:5] + \"-\" + dt[0:2]\n",
        "num_ids": 34
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    if len(date)!= 3:\n        raise ValueError('Not a valid date.')\n    day, month, year = date[0], date[1], date[2]\n    if len(day) == 1:\n        day = '0'+day\n    if len(month) == 1:\n        month = '0'+month\n    return day+'-'+month+'-'+year\ndef split_tasks(tasks):\n    '''\n    Write a function to split a given string into words.\n    '''\n    if not isinstance(tasks, str):\n        raise ValueError('Not a valid string.')\n    # Regex for splitting words based on hyphen\n    # If a hyphen is encountered, split the word into two words\n    pattern = re.compile(r'\\W+')\n    tasks = tasks.replace('\\n','').replace('\\r', '').replace('\\t', '')\n    tasks = pattern.split(tasks)\n    return tasks\n",
        "num_ids": 113
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d,m,y=dt.split('-')\n    mm=str(int(m)+1)\n    yy=str(int(y)+1)\n    \n    return dd+'-'+mm+'-'+yy\n    \ndef find_longest_word(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_1(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_2(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_3(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_4(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_5(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_6(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_7(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_8(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_9(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_10(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_11(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_12(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_13(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_14(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_15(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_16(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_17(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_18(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_19(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_20(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_21(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_22(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n        if len(i)>len(ans):\n            ans=i\n    return ans\n        \ndef find_longest_word_23(s):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    l=s.split()\n    ans=''\n    for i in l:\n    ",
        "num_ids": 23
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    x = int(dt[0])\n    y = int(dt[1])\n    z = int(dt[2])\n    m = int(dt[1])\n    d = int(dt[2])\n    return str(d) + \"-\" + str(m) + \"-\" + str(z)\n",
        "num_ids": 86
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace(\"-\",\" \").split()\n",
        "num_ids": 16
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    return f'{date[2]}.{date[1]}.{date[0]}'\n",
        "num_ids": 36
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    str_date = str(dt)\n    \n    return_date = re.sub('[^\\d\\ ]+', '', str_date)\n    return_date = return_date[-8:] + '-' + return_date[2:5] + '-' + return_date[:2]\n    return return_date\n    \nif __name__ == '__main__':\n    print(\"Example:\")\n    print(change_date_format('02-11-2016'))\n",
        "num_ids": 117
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if my_list==[]:\n        return []\n    #n is the length of the array\n    n=len(my_list)\n    #Make gap\n    gap=n//2\n    while gap>0:\n        #loop through each element and increment the value of gap to check if the gap is to be decreased\n        for i in range(gap,n):\n            curr_val=my_list[i]\n            j=i\n            #if the element is smaller than the element just before then move it to the left\n            while j>=gap and my_list[j-gap]>curr_val:\n                my_list[j]=my_list[j-gap]\n                j-=gap\n            my_list[j]=curr_val\n        #after gap is decreased and then we need to decrease gap again and again\n        gap=gap//2\n",
        "num_ids": 204
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j>=gap and my_list[j-gap]>my_list[j]:\n                my_list[j-gap],my_list[j] = my_list[j],my_list[j-gap]\n                j -= gap\n        gap //= 2\n    return my_list\n",
        "num_ids": 113
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n    \ndef shell_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n    \ndef insertion_sort(my_list):\n    '''\n    Write a function to sort the given array by using insertion sort.\n    '''\n    pass\n    \ndef insertion_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using insertion sort.\n    '''\n    pass\n    \ndef merge_sort(my_list):\n    '''\n    Write a function to sort the given array by using merge sort.\n    '''\n    pass\n    \ndef merge_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using merge sort.\n    '''\n    pass\n    \ndef quick_sort(my_list):\n    '''\n    Write a function to sort the given array by using quick sort.\n    '''\n    pass\n    \ndef quick_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using quick sort.\n    '''\n    pass\n    \ndef heap_sort(my_list):\n    '''\n    Write a function to sort the given array by using heap sort.\n    '''\n    pass\n    \ndef heap_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using heap sort.\n    '''\n    pass\n    \ndef counting_sort(my_list, maximum):\n    '''\n    Write a function to sort the given array by using counting sort.\n    '''\n    pass\n    \ndef counting_sort_optimised(my_list, maximum):\n    '''\n    Write a function to sort the given array by using counting sort.\n    '''\n    pass\n    \ndef bucket_sort(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef radix_sort(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef selection_sort(my_list):\n    '''\n    Write a function to sort the given array by using selection sort.\n    '''\n    pass\n    \ndef selection_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using selection sort.\n    '''\n    pass\n    \ndef merge_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using merge sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef counting_sort_optimised(my_list, maximum):\n    '''\n    Write a function to sort the given array by using counting sort.\n    '''\n    pass\n    \ndef counting_sort(my_list, maximum):\n    '''\n    Write a function to sort the given array by using counting sort.\n    '''\n    pass\n    \ndef insertion_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using insertion sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef counting_sort_optimised(my_list, maximum):\n    '''\n    Write a function to sort the given array by using counting sort.\n    '''\n    pass\n    \ndef counting_sort(my_list, maximum):\n    '''\n    Write a function to sort the given array by using counting sort.\n    '''\n    pass\n    \ndef insertion_sort(my_list):\n    '''\n    Write a function to sort the given array by using insertion sort.\n    '''\n    pass\n    \ndef insertion_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using insertion sort.\n    '''\n    pass\n    \ndef radix_sort(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef bucket_sort(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef radix_sort(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef bucket_sort(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef radix_sort(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef bucket_sort(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef bucket_sort_optimised(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n    \ndef radix_sort(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass\n    \ndef radix_sort_optimised(my_list):\n",
        "num_ids": 21
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # \u8fd9\u91cc\u4e0d\u662f i-gap+1\uff0c\u800c\u662f i-gap\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                # \u5c06\u6392\u5e8f\u597d\u7684\u6570\u5b57\u4e0ei\u540e\u9762\u7684\u6570\u5b57\u4ea4\u6362\u4f4d\u7f6e\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        # gap \u4e3a\u7ed3\u675f\u540e\u8fd8\u5269\u4f59\u7684\u4e00\u8f6egap\u7684\u66f4\u5927\u503c\n        gap //= 2\n        # \u7531\u4e8e gap \u53ef\u80fd\u4f1a\u5927\u4e8e\u8d1f\u6570\uff0c\u6240\u4ee5\u9700\u8981\u63a7\u5236\u8fb9\u754c\u3002\n        if gap < 1:\n            gap = 1\n",
        "num_ids": 264
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = int(n/2)\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j>=gap and my_list[j-gap]>temp:\n                my_list[j] = my_list[j-gap]\n                j-=gap\n            my_list[j] = temp\n        gap = int(gap/2)\n    return my_list\n",
        "num_ids": 123
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap,n):\n            tmp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > tmp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = tmp\n        gap = gap // 2\n    return my_list\n",
        "num_ids": 115
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    print(\"shellsort\")\n    step = 1\n    \n    while step < len(my_list):\n        for i in range(step, len(my_list)):\n            current_value = my_list[i]\n            \n            while i >= step and current_value < my_list[i - step]:\n                my_list[i], my_list[i - step] = my_list[i - step], my_list[i]\n                i -= step\n        step += 1\n    return my_list\n",
        "num_ids": 123
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            #print(i)\n            while i >= gap:\n                temp = my_list[i]\n                j = i\n                while j >= gap and my_list[j-gap] > temp:\n                    my_list[j] = my_list[j-gap]\n                    j -= gap\n                my_list[j] = temp\n        gap = gap//2\n    return my_list\n",
        "num_ids": 129
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(tuple(map(operator.and_, test_tup1, test_tup2)))\n",
        "num_ids": 28
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y) for x,y in zip(test_tup1,test_tup2)\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_list = list(map(lambda x,y: x+y, test_tup1, test_tup2))\n    return tuple(new_list)\n",
        "num_ids": 42
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple((a,b) for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (True if test_tup1[0] and test_tup2[0] else False,\n            True if test_tup1[1] and test_tup2[1] else False)\n",
        "num_ids": 52
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y) for x, y in zip(test_tup1, test_tup2)\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    return (x or y) for x, y in zip(test_tup1, test_tup2)\n    \ndef not_tuples(test_tup1):\n    '''\n    Write a function to extract the elementwise not tuples from the given tuple.\n    '''\n    return not test_tup1\n    \ndef not_func(test_tup1):\n    '''\n    Write a function to extract the elementwise not function from the given tuple.\n    '''\n    return not test_tup1\n",
        "num_ids": 11
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (a and b) for a, b in zip(test_tup1, test_tup2)\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 and tup2) for tup1, tup2 in zip(test_tup1, test_tup2)\n",
        "num_ids": 37
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 and tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 36
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_roots = solve_quadratic_eq(a, b, c)\n    y_roots = []\n    for x_root in x_roots:\n        y_roots.append(-a*x_root**2 + b*x_root + c)\n    y_roots = sorted(y_roots)\n    directrix = (x_roots[0], y_roots[0])\n    for i in range(1, len(x_roots)):\n        if x_roots[i] == directrix[0]:\n            directrix = (x_roots[i], y_roots[i])\n        else:\n            break\n    return directrix\n",
        "num_ids": 155
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"undefined\"\n    x = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    y = -(a * x + b * x ** 2) / c\n    return (x, y)\n",
        "num_ids": 70
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a * a + b * b\n    y = a * b\n    if x < 0:\n        if y < 0:\n            d = 2 * a\n        else:\n            d = 2 * a + b * b * c\n    else:\n        if y < 0:\n            d = a * 2 + b * b * c\n        else:\n            d = a * 2 + b * b * c - b * b * a\n    if y < 0:\n        x = (d * d - 4 * x) / 4\n        y = (d * d - 4 * y) / 4\n    else:\n        x = (d * d - 4 * x) / 4\n        y = -(d * d - 4 * y) / 4\n    if y == 0:\n        print(y)\n        print(a)\n        print(\"The directrix is \" + str(d) + \".\")\n    else:\n        print(x)\n        print(y)\n        print(\"The directrix is \" + str(d) + \".\")\n",
        "num_ids": 246
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    return a*a*(b+c)**2 - a*a*b*c\n",
        "num_ids": 26
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    #find the value of y\n    y= (b**2-4*a*c)/(4*a**2)\n    #check if y is real and positive\n    if (y>0):\n        y=math.sqrt(y)\n        x1= -b/(2*a)\n        x2 = -b/(2*a)-y\n        x3 = -b/(2*a)+y\n    #if y is not real \n    else:\n        x1=None\n        x2 =None\n        x3 =None\n    #return the value of x1, x2 and x3\n    return (x1,x2,x3)\n",
        "num_ids": 162
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a * a - b * c) / (2 * a * c)\n",
        "num_ids": 22
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n",
        "num_ids": 26
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola_directrix(a, b, c): \n        '''\n        Write a function to find the directrix of a parabola.\n        '''\n        p = ((a*a + b*b)**0.5)\n        q = ((a*a + c*c)**0.5)\n        n1 = (a*a) + (b*b) - 2*q*a\n        n2 = (a*a) - (b*b) - 2*q*a\n        n3 = (b*b) - 2*q*a\n        n4 = (a*a) - 2*q*a\n        n5 = (a*a) - (b*b) - 2*q*a\n        n6 = (b*b) - 2*q*a\n        d = ((b*b) + (q*q))**0.5\n        d1 = (a*a) - (b*b) + (q*q)\n        d2 = (a*a) + (b*b) + (q*q)\n        d3 = (a*a) + (b*b) - 2*q*a\n        d4 = (a*a) - 2*q*a\n        d5 = (a*a) + (b*b) - 2*q*a\n        d6 = (a*a) - (b*b) + 2*q*a\n        d7 = (a*a) + (b*b) + 2*q*a\n        d8 = (a*a) - 2*q*a\n        d9 = (a*a) + (b*b) - 2*q*a\n        d10 = (a*a) - (b*b) + 2*q*a\n        d11 = (a*a) + (b*b) - (q*q)\n        d12 = (a*a) + (b*b) + (q*q)\n        d13 = (a*a) - (q*q)\n        d14 = (a*a) - (b*b) - (q*q)\n        d15 = (a*a) + (q*q)\n        d16 = (a*a) - 2*q*a\n        d17 = (a*a) + 2*q*a\n        d18 = (a*a) + (b*b) - (q*q)\n        d19 = (a*a) - (b*b) + (q*q)\n        d20 = (a*a) - (q*q)\n        d21 = (a*a) - 2*q*a\n        d22 = (a*a) + 2*q*a\n        d23 = (a*a) + (b*b) - (q*q)\n        d24 = (a*a) - (b*b) + (q*q)\n        d25 = (a*a) + (b*b) + (q*q)\n        d26 = (a*a) - (q*q)\n        d27 = (a*a) + (q*q)\n        d28 = (a*a) - (b*b) - (q*q)\n        d29 = (a*a) - 2*q*a\n        d30 = (a*a) + (b*b) - 2*q*a\n        d31 = (a*a) - (b*b) + 2*q*a\n        d32 = (a*a) + 2*q*a\n        d33 = (a*a) + (b*b) + 2*q*a\n        d34 = (a*a) + (q*q)\n        d35 = (a*a) - (b*b) - (q*q)\n        d36 = (a*a) - (b*b) + (q*q)\n        d37 = (a*a) - (b*b) - 2*q*a\n        d38 = (a*a) + (b*b) - 2*q*a\n        d39 = (a*a) - (b*b) + 2*q*a\n        d40 = (a*a) + (b*b) + 2*q*a\n        d41 = (a*a) - (q*q)\n        d42 = (a*a) - (b*b) - (q*q)\n        d43 = (a*a) - 2*q*a\n        d44 = (a*a) + (b*b) - (q*q)\n        d45 = (a*a) - (b*b) + (q*q)\n        d46 = (a*a) + (b*b) + (q*q)\n        d47 = (a*a) + (q*q)\n        d48 = (a*a) - (b*b) - (q*q)\n        d49 = (a*a) - (b*b) + (q*q)\n        d50 = (a*a) + (b*b) + (q*q)\n        d51 = (a*a) - 2*q*a\n        d52 = (a*a) + 2*q*a\n        d53 = (a*a) + (b*b) - (q*q)\n        d54 = (a*a) - (b*b) + (q*q)\n        d55 = (a*a) + (b*b) + (q*q)\n        d56 = (a*a) + (q*q)\n        d57 = (a*a) - (b*b) - (q*q)\n        d58 = (a*a) - 2*q*a\n        d59 = (a*a) + (b*b) - 2*q*a\n        d60 = (a*a) + (b*b) + (q*q)\n        d61 = (a*a) - (b*b) + (q*q)\n        d62 = (a*a) + (b*b) + (q*q)\n        d63 = (a*a) + (q*q)\n        d64 = (a*a) - (b*b) - (q*q)\n        d65 = (a*a) - 2*q*a\n        d66 = (a*a) + (b*b) - 2*q*a\n        d67 = (a*a) + (b*b) + (q*q)\n        d68 = (a*a) - (b*b) - (q*q)\n        d69 = (a*a) - (b*b) + (q*q)\n        d70 = (a*a) + (b*b) + (q*q)\n        d71 = (a*a) + (q*q)\n        d72 = (a*a) - (b*b) - (q*q)\n        d73 = (a*a) - 2*q*a\n        d74 = (a*a) + (b*b) - 2*q*a\n        d75 = (a*a) + (b*b) + (q*q)\n        d76 = (a*a) + (q*q)\n        d77 = (a*a) - (b*b) - (q*q)\n        d78 = (a*a) - 2*q*a\n        d79 = (a*a) + (b*b) - 2*q*a\n        d80 = (a*a) + (b*b) + (q*q)\n        d81 = (a*a) - (b*b) + (q*q)\n        d82 = (a*a) + (b*b) - (q*q)\n        d83 = (a*a) + (b*b) + (q*q)\n        d84 = (a*a) + (q*q)\n        d85 = (a*a) - (b*b) - (q*q)\n        d86 = (a*a) - 2*q*a\n        d87 = (a*a) + (b*b) - 2*q*a\n        d88 = (a*a) + (b*b) + (q*q)\n        d89 = (a*a) - (b*b) + (q*q)\n        d90 = (a*a) + (b*",
        "num_ids": 1968
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    y = b\n    while x**2 + y**2 > c**2:\n        x = x - (x**2 + y**2)**0.5 / (2 * a)\n        y = y + (x**2 + y**2)**0.5 / (2 * b)\n    return x, y\n",
        "num_ids": 83
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*a*b*b - 4*a*c*b*b + 4*a*a*b*b\n",
        "num_ids": 32
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                common = True\n                break\n        if common:\n            break\n    return common\n",
        "num_ids": 54
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return(set(list1) & set(list2))\n",
        "num_ids": 17
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    x = 0\n    y = 0\n    while x < len(list1):\n        while y < len(list2):\n            if list1[x] == list2[y]:\n                print(list1[x])\n                print(list2[y])\n                return True\n            y = y + 1\n        x = x + 1\n        y = 0\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) <= 0:\n        return False\n    if len(list2) <= 0:\n        return False\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == list2:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 27
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # get the common element\n    common = []\n    for item1 in list1:\n        if item1 in list2:\n            common.append(item1)\n    # check if there is any common element\n    if len(common) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    intersection = list(set(list1).intersection(set(list2)))\n    if len(intersection) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = set(list1) & set(list2)\n    if len(common_elements) == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for x in list1:\n        if x in list2:\n            common.append(x)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n    ",
        "num_ids": 54
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    side_a = base1\n    side_b = base2\n    height = height\n    if side_a < side_b:\n        base = side_a\n    else:\n        base = side_b\n    print(base)\n    return base + height / 2\n",
        "num_ids": 66
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (height/2)*(base1+base2)\n    \n",
        "num_ids": 19
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height1 = (base1**2)/2\n    height2 = (base2**2)/2\n    height3 = (height**2)/2\n    return (height1+height2+height3)/2\n",
        "num_ids": 51
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    return 0.5*((base1+base2)*height)\n",
        "num_ids": 46
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = [base1, base2]\n    base.sort()\n    h = height // 2\n    base_length = ((base[0] * h) + (base[1] * h)) / 2\n    return base_length\n",
        "num_ids": 57
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapez = 0.5*(base1+base2)*height\n    return trapez\n",
        "num_ids": 24
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n    \ndef get_points(arr):\n    '''\n    Write a function that returns the median value of a list of numbers.\n    '''\n    return (sum(arr)/len(arr))\n",
        "num_ids": 14
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    try:\n        return number > arr[0] and number > arr[1]\n    except TypeError:\n        return False\n    except IndexError:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    length = len(arr)\n    i = 0\n    while i < length:\n        if arr[i] <= number:\n            i += 1\n        else:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n    ",
        "num_ids": 12
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Method 1 - Using Inbuilt functions\n    if (number < min(arr)):\n        print('Not greater')\n    else:\n        print('Greater')\n",
        "num_ids": 41
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Check whether the array is empty\n    if not arr:\n        return False\n    # Check if the length of array is one\n    if len(arr) == 1:\n        if arr[0] <= number:\n            return True\n        else:\n            return False\n    # The base case\n    if arr[0] > number:\n        return True\n    if arr[-1] < number:\n        return False\n    # Recursive case\n    if arr[len(arr)//2] <= number:\n        if arr[len(arr)//2] < number:\n            return check_greater(arr[len(arr)//2+1:], number)\n        else:\n            return check_greater(arr[:len(arr)//2], number)\n    else:\n        if arr[len(arr)//2] > number:\n            return check_greater(arr[:len(arr)//2], number)\n        else:\n            return check_greater(arr[len(arr)//2+1:], number)\n        \ndef check_greater_by_key(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Check whether the array is empty\n    if not arr:\n        return False\n    # Check if the length of array is one\n    if len(arr) == 1:\n        if arr[0] <= number:\n            return True\n        else:\n            return False\n    # The base case\n    if arr[0] > number:\n        return True\n    # Recursive case\n    if arr[len(arr)//2] <= number:\n        if arr[len(arr)//2] < number:\n            return check_greater_by_key(arr[len(arr)//2+1:], number)\n        else:\n            return check_greater_by_key(arr[:len(arr)//2], number)\n    else:\n        if arr[len(arr)//2] > number:\n            return check_greater_by_key(arr[:len(arr)//2], number)\n        else:\n            return check_greater_by_key(arr[len(arr)//2+1:], number)\n",
        "num_ids": 247
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i <= number:\n            return True\n        else:\n            return False\n",
        "num_ids": 28
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n    \ndef find_greater(arr, number):\n    '''\n    Write a function to return the position in the given array of the first greater element than the number.\n    '''\n    for i in range(len(arr)):\n        if check_greater(arr, number):\n            return i\n    return -1\n",
        "num_ids": 35
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # my solution\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n        if number > arr[i]:\n            return False\n",
        "num_ids": 46
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r\"^a+b+\",text)\n",
        "num_ids": 19
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"a+b\")\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 32
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if not text:\n        return False\n    pattern = r\"a+b+\"\n    return re.search(pattern, text)\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r\"^ab*\", text)\n",
        "num_ids": 17
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.strip()\n    pattern = re.compile(r\"(\\w+)\\s(.+?)\\s(.+?)\\s(.+?)\\s(\\w+)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(\\w+)\\s(.+?)\\s(.+?)\\s(.+?)\\s(\\w+)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\s(.+?)\\",
        "num_ids": 2007
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'[ab]')\n    mo = re.findall(pattern, text)\n    return mo\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall('ab+',text)\n",
        "num_ids": 15
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r'ab{1,}'\n    result = re.search(regex,text)\n    if result == None:\n        return False\n    else:\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(ab)+')\n    match = pattern.search(text)\n    return match!= None\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # match = re.finditer(r\"a+b\", text)\n    match = re.findall(r\"a+b\", text)\n    if match:\n        print(match)\n        print(\"\\nMatch Found with One Matches\")\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    count = 0\n    if n < 10 :\n        return n\n    while n > 10 :\n        count += 1\n        n = n // 10\n    return n % 10\n",
        "num_ids": 51
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    l = len(str(n))\n    return str(n)[l-1]\n",
        "num_ids": 23
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x=n%10\n    print(x)\n",
        "num_ids": 15
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    x=n%10\n    return x\n",
        "num_ids": 15
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n    \n    \n    \ndef is_Palindrome(n):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    return n==n[::-1]\n",
        "num_ids": 13
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n>=0 :\n        return n%10\n    else :\n        return -(-n//10)\n        \n    \n    \n    \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10 if n>=0 else -(-n//10)\n",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code here\n    \n    return None\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        raise ValueError('input should be a positive integer')\n    else :\n        n = abs(n)\n        return n % 10\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(-i)\n    print(list2)\n",
        "num_ids": 32
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    s = []\n    for i in list1:\n        if i < 0:\n            s.append(i)\n    print(s)\n",
        "num_ids": 36
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return (list(filter(lambda x:x<0,list1)))\n",
        "num_ids": 20
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]<0:\n            list1[i]=-list1[i]\n    return list1\n",
        "num_ids": 44
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for i in range(0, len(list1)):\n        if list1[i]<0:\n            negative.append(list1[i])\n    return negative\n",
        "num_ids": 48
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        result.append(-i)\n    print(result)\nneg_nos([-1, -2, -3, -4, -5])\n",
        "num_ids": 49
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative=[]\n    for i in list1:\n        negative.append(i*(-1))\n    return negative\nprint(neg_nos([1,-2,3,-4,5]))\n",
        "num_ids": 48
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    new_list = []\n    for i in list1:\n        if i<0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-i for i in list1]\n",
        "num_ids": 13
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list_neg.append(-list1[i])\n    return list_neg\n",
        "num_ids": 52
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for s in str1:\n        if s.isdigit():\n            new_str += s\n    return new_str\n",
        "num_ids": 39
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(0, len(str1)):\n        if ord(str1[i]) % 2!= 0:\n            str2 = str2 + str1[i]\n    return str2\n",
        "num_ids": 57
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    j = 0\n    result = \"\"\n    while j < len(str1):\n        if i % 2 == 0:\n            result += str1[j]\n        i += 1\n        j += 1\n    print(result)\n",
        "num_ids": 61
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    newstr = \"\"\n    for i in str1:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\" or i == \"A\" or i == \"E\" or i == \"I\" or i == \"O\" or i == \"U\":\n            continue\n        else:\n            newstr += i\n    return newstr\n",
        "num_ids": 98
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # split string into chars\n    str1 = str1.split()\n    # create empty string\n    str2 = \"\"\n    # loop through each char in the string\n    for i in range(0, len(str1), 2):\n        # get the odd indexed char\n        c = str1[i]\n        # add that char to the empty string\n        str2 = str2 + c\n    # return the string\n    return str2\n",
        "num_ids": 104
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ord(str1[i]) % 2 == 0:\n            str1 = str1.replace(str1[i], '')\n    return str1\n",
        "num_ids": 52
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for ch in str1:\n        if ch.isdigit():\n            result = result + ch\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1!= '':\n        str1 = str1[::2]\n        return str1\n    else:\n        return ''\n",
        "num_ids": 35
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if char.isdigit())\n",
        "num_ids": 22
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = \"\"\n    for s in str1:\n        if s not in new_string:\n            new_string += s\n    return new_string\n",
        "num_ids": 40
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_pairs = 0\n    pairs_set = set()\n    for i in test_list:\n        first, second = i[0], i[1]\n        # check if both are in the pairs set\n        if first in pairs_set and second in pairs_set:\n            count_pairs += 1\n        # check if both are not in the pairs set\n        elif first in pairs_set or second in pairs_set:\n            count_pairs += 1\n        # add the pair to the pairs set\n        else:\n            pairs_set.add(first)\n            pairs_set.add(second)\n    return count_pairs\n",
        "num_ids": 155
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    i = 0\n    while i < len(test_list):\n        j = i + 1\n        while j < len(test_list):\n            #print(test_list[i], test_list[j])\n            if test_list[i] + test_list[j] == 0:\n                result += 1\n                #print(test_list[i], test_list[j])\n            j += 1\n        i += 1\n    return result\n",
        "num_ids": 113
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #print(\"Counting bidirectional tuples...\")\n    bcount = 0\n    #print(test_list)\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i][1]:\n            bcount += 1\n    return bcount\n",
        "num_ids": 76
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if not test_list:\n        return 0\n    return len([x for x in test_list if x[::-1] in test_list])\n",
        "num_ids": 38
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = 0\n    for i, (tuple_1, tuple_2) in enumerate(test_list):\n        if is_bidirectional(tuple_1, tuple_2):\n            pairs += 1\n    return pairs\n",
        "num_ids": 59
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(test_list) - len(list(set(tuple(sorted(x)) for x in test_list)))\n",
        "num_ids": 33
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(list(filter(lambda x:x[::-1] in test_list,test_list)))\n",
        "num_ids": 29
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    cnt = 0\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if test_list[i][0] == test_list[j][0]:\n            cnt += 1\n            i += 2\n            j += 2\n        else:\n            i += 2\n            j += 2\n    return cnt\n",
        "num_ids": 94
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    total = 0\n    for item in test_list:\n        total += (item[0] * item[1])\n",
        "num_ids": 32
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if (type(i) is tuple) and (len(i) == 2) and (type(i[0]) is int) and (type(i[1]) is int):\n            if i[0] > i[1]:\n                count += 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for i in range(0,len(L)):\n        single += L[i]\n    return single\n",
        "num_ids": 33
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    a = ''\n    for i in L:\n        a += str(i)\n    return int(a)\n",
        "num_ids": 29
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #Initialize\n    s = 0\n    count = 0\n    #Loop through list\n    for i in L:\n        #Add to sum\n        s += i\n        count += 1\n    #Return sum\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "num_ids": 9
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(map(int, L))\n    s = ''.join(map(str, L))\n    return int(s)\n",
        "num_ids": 35
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [1, 2, 3, 4, 5, 6, 7]\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    elif len(L) == 2:\n        return L[0] + L[1]\n    elif len(L) == 3:\n        return L[0] + L[1] + L[2]\n    elif len(L) == 4:\n        return L[0] + L[1] + L[2] + L[3]\n    elif len(L) == 5:\n        return L[0] + L[1] + L[2] + L[3] + L[4]\n    elif len(L) == 6:\n        return L[0] + L[1] + L[2] + L[3] + L[4] + L[5]\n    elif len(L) == 7:\n        return L[0] + L[1] + L[2] + L[3] + L[4] + L[5] + L[6]\n",
        "num_ids": 266
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "num_ids": 9
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(n) for n in L))\n",
        "num_ids": 19
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str,L)))\n",
        "num_ids": 16
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    text = re.sub('[^A-Za-z]+', '', text)\n    adverb_list = ['a','an','the','it','its','me']\n    pos = []\n    for i in range(len(text)):\n        if text[i] in adverb_list:\n            pos.append(i)\n    pos.append(len(text))\n    return pos\n",
        "num_ids": 104
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if not isinstance(text, str):\n        return {}\n    text = text.lower()\n    text = text.replace(',','').replace('.','')\n    text = re.sub('\\s+','', text)\n",
        "num_ids": 57
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    ad_pos = []\n    adverbs = ['RB', 'WRB', 'UH']\n    for index in range(len(text)):\n        if text[index] in adverbs:\n            ad_pos.append(index)\n    return ad_pos\n",
        "num_ids": 64
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_number_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_verb_and_noun(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    verb_position = []\n    noun_position = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            if word.endswith('s'):\n                verb_position.append(i)\n            if word.endswith('s'):\n                noun_position.append(i)\n    return verb_position, noun_position\ndef find_verb_and_noun_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_noun_and_verb(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    noun_position = []\n    verb_position = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            if word.endswith('s'):\n                noun_position.append(i)\n            if word.endswith('s'):\n                verb_position.append(i)\n    return noun_position, verb_position\ndef find_noun_and_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_adverb_and_noun(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    adverb_position = []\n    noun_position = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            if word.endswith('s'):\n                adverb_position.append(i)\n            if word.endswith('s'):\n                noun_position.append(i)\n    return adverb_position, noun_position\ndef find_adverb_and_noun_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_noun_and_adverb(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    noun_position = []\n    adverb_position = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            if word.endswith('s'):\n                noun_position.append(i)\n            if word.endswith('s'):\n                adverb_position.append(i)\n    return noun_position, adverb_position\ndef find_noun_and_adverb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split()\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_verb_and_noun_with_sentences(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split('.')\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_verb_and_noun_with_sentences(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split('.')\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_verb_and_noun_with_sentences(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split('.')\n    for i, word in enumerate(text_list):\n        if word.endswith(('s', 'x', 'z', 't', 'cs', 'ks','ms')):\n            pos_list.append(i)\n    return pos_list\ndef find_noun_and_verb_with_sentences(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos_list = []\n    text_list = text.split('.')\n    for i, word in enumerate",
        "num_ids": 29
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = {}\n    # text = \"Today, Mr. Smith said, 'I am going to be late.' he said to himself.\"\n",
        "num_ids": 33
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\s(?:the|a|an|for|in|of|at|for|by|on|to|upon|via|using|with|at|on|by|in|from|on|on|of|to|via|on|through|until|before|after|from|into|on|out|to|from|in|near|of|from|of|with|with|from|from|in|from|of|on|in|in|from|from|at|with|in|in|near|of|on|on|with|on|out|in|in|near|in|in|near|in|into|in|in|at|in|on|in|in|by|on|on|of|by|on|on|on|to|on|at|on|on|in|on|on|in|in|at|on|on|on|by|on|on|at|on|on|at|on|in|on|in|at|on|in|in|at|in|at|in|at|in|in|at|in|at|in|at|in|at|at|at|at|in|at|at|at|in|at|at|at|in|at|at|at|in|at|at|at|in|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|a",
        "num_ids": 2009
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    for i in range(len(text)):\n        if re.match(r'(^|\\n)(\\w+)([.?!])(\\n|$)',text[i]):\n            return i\n",
        "num_ids": 53
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*ad\\w*\\s', text[i]):\n            adverb_list.append(text[i])\n            print('adverb:'+ text[i])\n            print('position:'+ str(i))\n    return adverb_list\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    noun_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*n[ou]*\\w*', text[i]):\n            noun_list.append(text[i])\n            print('noun:'+ text[i])\n            print('position:'+ str(i))\n    return noun_list\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    verb_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*\\w*\\s', text[i]):\n            verb_list.append(text[i])\n            print('verb:'+ text[i])\n            print('position:'+ str(i))\n    return verb_list\ndef find_pronoun_position(text):\n    '''\n    Write a function to find the first pronoun and their positions in a given sentence.\n    '''\n    pronoun_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*pr|pron|P[r][o]n|PRON', text[i]):\n            pronoun_list.append(text[i])\n            print('pronoun:'+ text[i])\n            print('position:'+ str(i))\n    return pronoun_list\ndef find_noun_adverb_position(text):\n    '''\n    Write a function to find the first noun and adverb and their positions in a given sentence.\n    '''\n    noun_adverb_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*n[ou]*\\w*', text[i]):\n            noun_adverb_list.append(text[i])\n            print('noun adverb:'+ text[i])\n            print('position:'+ str(i))\n    return noun_adverb_list\ndef find_noun_verb_position(text):\n    '''\n    Write a function to find the first noun and verb and their positions in a given sentence.\n    '''\n    noun_verb_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*n[ou]*\\w*', text[i]):\n            noun_verb_list.append(text[i])\n            print('noun verb:'+ text[i])\n            print('position:'+ str(i))\n    return noun_verb_list\ndef find_noun_adverb_verb_position(text):\n    '''\n    Write a function to find the first noun, adverb, verb and their positions in a given sentence.\n    '''\n    noun_adverb_verb_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*n[ou]*\\w*', text[i]):\n            noun_adverb_verb_list.append(text[i])\n            print('noun adverb verb:'+ text[i])\n            print('position:'+ str(i))\n    return noun_adverb_verb_list\ndef find_adverb_noun_position(text):\n    '''\n    Write a function to find the first adverb and noun and their positions in a given sentence.\n    '''\n    adverb_noun_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*ad\\w*\\s', text[i]):\n            adverb_noun_list.append(text[i])\n            print('adverb noun:'+ text[i])\n            print('position:'+ str(i))\n    return adverb_noun_list\ndef find_adverb_verb_position(text):\n    '''\n    Write a function to find the first adverb and verb and their positions in a given sentence.\n    '''\n    adverb_verb_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*ad\\w*\\s', text[i]):\n            adverb_verb_list.append(text[i])\n            print('adverb verb:'+ text[i])\n            print('position:'+ str(i))\n    return adverb_verb_list\ndef find_adverb_noun_position(text):\n    '''\n    Write a function to find the first adverb and noun and their positions in a given sentence.\n    '''\n    adverb_noun_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*ad\\w*\\s', text[i]):\n            adverb_noun_list.append(text[i])\n            print('adverb noun:'+ text[i])\n            print('position:'+ str(i))\n    return adverb_noun_list\ndef find_verb_noun_position(text):\n    '''\n    Write a function to find the first verb and noun and their positions in a given sentence.\n    '''\n    verb_noun_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*\\w*\\s', text[i]):\n            verb_noun_list.append(text[i])\n            print('verb noun:'+ text[i])\n            print('position:'+ str(i))\n    return verb_noun_list\ndef find_verb_adverb_position(text):\n    '''\n    Write a function to find the first verb and adverb and their positions in a given sentence.\n    '''\n    verb_adverb_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*\\w*\\s', text[i]):\n            verb_adverb_list.append(text[i])\n            print('verb adverb:'+ text[i])\n            print('position:'+ str(i))\n    return verb_adverb_list\ndef find_verb_noun_position(text):\n    '''\n    Write a function to find the first verb and noun and their positions in a given sentence.\n    '''\n    verb_noun_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*\\w*\\s', text[i]):\n            verb_noun_list.append(text[i])\n            print('verb noun:'+ text[i])\n            print('position:'+ str(i))\n    return verb_noun_list\ndef find_verb_noun_adverb_position(text):\n    '''\n    Write a function to find the first verb, noun, adverb and their positions in a given sentence.\n    '''\n    verb_noun_adverb_list = []\n    text = text.split()\n    for i in range(0,len(text)):\n        if re.search(r'\\w*\\w*\\s', text[i]):\n            verb_noun_adverb_list.append(text[i])\n            print('verb noun adverb:'+ text[i])\n            print('positio",
        "num_ids": 98
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # global variable\n    adverb_list = []\n    \n    # string_list = ['I', 'like', 'the', 'best', 'beverage', 'I', 'want', 'to', 'eat', 'with', 'the', 'best', 'taste', 'of', 'food', 'on', 'every', 'day', 'because', 'I', 'like', 'the', 'food','so','much', 'too','much', 'I', 'like', 'the', 'food', 'and','so','much', 'food', 'for','me']\n",
        "num_ids": 132
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 4*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\nprint(surfacearea_cube(6))\n",
        "num_ids": 20
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l>=0:\n        s=l*l*l\n        return s\n    else:\n        print('Incorrect input, the size should be a positive integer')\n",
        "num_ids": 43
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives / len(nums)\n",
        "num_ids": 39
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n=len(nums)\n    pos_count=0\n    for i in range(n):\n        if nums[i]>0:\n            pos_count+=1\n    return (pos_count/n)\n",
        "num_ids": 55
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums)<1:\n        return 0\n    positives = 0\n    for x in nums:\n        if x > 0:\n            positives += 1\n    return positives/len(nums)\n",
        "num_ids": 54
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    nums_max = nums[0]\n    for i in nums:\n        if i > 0:\n            count += 1\n            nums_max = max(nums_max, i)\n    return count/len(nums)\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    nums_max = nums[0]\n    for i in nums:\n        if i > 0:\n            count += 1\n            nums_max = max(nums_max, i)\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i>=0:\n            count+=1\n    return count/len(nums)\n",
        "num_ids": 38
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    # create list to hold the negative numbers\n    neg = []\n    \n    # traverse the list\n    for i in range(len(list1)):\n        \n        # find the negative number\n        if list1[i] < 0:\n            neg.append(list1[i])\n    \n    # find the largest negative number\n    largest = max(neg)\n    \n    # return largest negative number\n    return largest\n",
        "num_ids": 102
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maxi = -9999999999999999\n    for i in range(len(list1)):\n        if maxi < 0:\n            maxi = list1[i]\n        elif list1[i] > 0:\n            if maxi < list1[i]:\n                maxi = list1[i]\n    return maxi\n    \ndef largest_neg_x_y(list1,list2): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maxi = -9999999999999999\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if maxi < 0:\n                maxi = list1[i]\n                max_index = i\n            elif list1[i] > 0:\n                if maxi < list1[i]:\n                    maxi = list1[i]\n                    max_index = i\n    max_pos = -9999999999999999\n    for i in range(len(list2)):\n        if max_pos < 0:\n            max_pos = list2[i]\n            max_index = j\n        elif list2[i] > 0:\n            if max_pos < list2[i]:\n                max_pos = list2[i]\n                max_index = j\n    if max_index == max_pos:\n        return maxi,max_index\n    else:\n        return max_pos,max_index\n",
        "num_ids": 230
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1000\n    for ele in list1:\n        if ele<max_neg:\n            max_neg = ele\n    return max_neg\n",
        "num_ids": 40
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -1\n    for i in list1:\n        if i < 0:\n            if i > max_num:\n                max_num = i\n    print(\"The largest negative number is : \", max_num)\n",
        "num_ids": 56
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    result = -9999999\n    for i in list1:\n        if(i < 0):\n            if(result < i):\n                result = i\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest=-9999999999999\n    for x in list1:\n        if x<0 and x>largest:\n            largest=x\n    print(\"Largest negative number from the list is\",largest)\nlargest_neg([-2, -5, 6, -4, -10, -2, 1, -8, 2])\nlargest_neg([-2, -5, 6, -4, -10, -2, 1, -8, 2])\n",
        "num_ids": 108
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    num = -float(\"inf\")\n    for i in range(len(list1)):\n        if list1[i] < 0 and num < list1[i]:\n            num = list1[i]\n    return num\n",
        "num_ids": 55
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for item in list1:\n        if item < 0:\n            if item > max_num:\n                max_num = item\n    return max_num\n",
        "num_ids": 50
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -100000\n    for item in list1:\n        if item < 0:\n            if item > largest_num:\n                largest_num = item\n    return largest_num\n",
        "num_ids": 48
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    return max(list1,key=lambda x: x < 0)\n",
        "num_ids": 21
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_list = []\n    for num in test_list:\n        if len(num) >= K:\n            return_list.append(num)\n    return return_list\n    \ndef convert_to_str(test_list):\n    '''\n    Write a function that converts a list of tuples into a list of strings.\n    '''\n    return_list = []\n    for num in test_list:\n        return_list.append(str(num))\n    return return_list\n    \ndef find_words_in_string(test_string, word_list):\n    '''\n    Write a function that determines if a word is in a string and if so, returns the index of the word.\n    '''\n    return_list = []\n    for word in word_list:\n        if word in test_string:\n            return_list.append(test_string.find(word))\n    return return_list\n    \ndef reverse_words_in_string(test_string):\n    '''\n    Write a function that reverses each word in the given string.\n    '''\n    return_string = \"\"\n    for i in range(len(test_string) - 1, -1, -1):\n        return_string += test_string[i]\n    return return_string\n    \ndef find_words_in_string_2(test_string, word_list):\n    '''\n    Write a function that determines if a word is in a string and if so, returns the index of the word.\n    '''\n    return_list = []\n    test_string = test_string.split(\" \")\n    for i in range(len(test_string)):\n        if test_string[i] in word_list:\n            return_list.append(i)\n    return return_list\n    \ndef reverse_words_in_string_2(test_string):\n    '''\n    Write a function that reverses each word in the given string.\n    '''\n    for i in range(len(test_string) - 1, -1, -1):\n        if test_string[i] == \" \":\n            return test_string[i + 1 :] + test_string[: i + 1]\n        elif test_string[i] == \".\":\n            return test_string[i - 1 :] + test_string[: i]\n        else:\n            return test_string\n    \ndef find_words_in_string_3(test_string, word_list):\n    '''\n    Write a function that determines if a word is in a string and if so, returns the index of the word.\n    '''\n    for i in range(len(test_string)):\n        if test_string[i] in word_list:\n            return i\n    return -1\n    \ndef reverse_words_in_string_3(test_string):\n    '''\n    Write a function that reverses each word in the given string.\n    '''\n    return_string = \"\"\n    for i in range(len(test_string) - 1, -1, -1):\n        if test_string[i] == \" \":\n            return_string += test_string[i + 1 :] + test_string[: i + 1]\n        elif test_string[i] == \".\":\n            return_string += test_string[i - 1 :] + test_string[: i]\n        else:\n            return return_string\n    return return_string\n    \ndef test_1():\n    '''\n    1. Correct\n    '''\n    print('\\n\\n\\nTesting: trim_tuple')\n    test_list = [(1,2,3,4,5), (6,7,8), ('a','b','c','d'), ('e','f','g')]\n    return_list = trim_tuple(test_list, 1)\n    print('\\n{}\\n{}\\n{}\\n{}\\n'.format(test_list, return_list, 'PASS' if return_list == [(1,2,3,4,5), (6,7,8), ('a','b','c'), ('e','f','g')] else 'FAIL', '\\n'))\n    \ndef test_2():\n    '''\n    2. Correct\n    '''\n    print('\\n\\n\\nTesting: trim_tuple')\n    test_list = [(1,2,3,4,5), (6,7,8), ('a','b','c','d'), ('e','f','g')]\n    return_list = trim_tuple(test_list, 2)\n    print('\\n{}\\n{}\\n{}\\n{}\\n'.format(test_list, return_list, 'PASS' if return_list == [(1,2,3,4,5), (6,7,8), ('a','b','c'), ('e','f','g')] else 'FAIL', '\\n'))\n    \ndef test_3():\n    '''\n    3. Correct\n    '''\n    print('\\n\\n\\nTesting: trim_tuple')\n    test_list = [(1,2,3,4,5), (6,7,8), ('a','b','c','d'), ('e','f','g')]\n    return_list = trim_tuple(test_list, 3)\n    print('\\n{}\\n{}\\n{}\\n{}\\n'.format(test_list, return_list, 'PASS' if return_list == [] else 'FAIL', '\\n'))\n    \ndef test_4():\n    '''\n    4. Correct\n    '''\n    print('\\n\\n\\nTesting: trim_tuple')\n    test_list = [(1,2,3,4,5), (6,7,8), ('a','b','c','d'), ('e','f','g')]\n    return_list = trim_tuple(test_list, 0)\n    print('\\n{}\\n{}\\n{}\\n{}\\n'.format(test_list, return_list, 'PASS' if return_list == [(1,2,3,4,5), (6,7,8), ('a','b','c','d'), ('e','f','g')] else 'FAIL', '\\n'))\n    \ndef test_5():\n    '''\n    5. Correct\n    '''\n    print('\\n\\n\\nTesting: trim_tuple')\n    test_list = [(1,2,3,4,5), (6,7,8), ('a','b','c','d'), ('e','f','g')]\n    return_list = trim_tuple(test_list, -1)\n    print('\\n{}\\n{}\\n{}\\n{}\\n'.format(test_list, return_list, 'PASS' if return_list == [] else 'FAIL', '\\n'))\n    \ndef test_6():\n    '''\n    6. Correct\n    '''\n    print('\\n\\n\\nTesting: convert_to_str')\n    test_string = \"hey how are you\"\n    return_string = convert_to_str(test_string)\n    print('\\n{}\\n{}\\n{}\\n'.format(test_string, return_string, 'PASS' if return_string == \"hey how are you\" else 'FAIL', '\\n'))\n    \ndef test_7():\n    '''\n    7. Correct\n    '''\n    print('\\n\\n\\nTesting: convert_to_str')\n    test_string = \"hey how are you\"\n    return_string = convert_to_str(test_string)\n    print('\\n{}\\n{}\\n{}\\n'.format(test_string, return_string, 'PASS' if return_string == \"hey how are you\" else 'FAIL', '\\n'))\n    \ndef test_8():\n    '''\n    8. Correct\n    '''\n    print('\\n\\n\\nTesting: find_words_in_string')\n    test_string = \"hey how are you\"\n    return_list = find_words_in_string(test_string, [\"hey\", \"how\", \"are\", \"you\"])\n    print('\\n{}\\n{}\\n{}\\n'.format(test_string, return_list, 'PASS' if return_list == [0, 2, 4] else 'FAIL', '\\n'))\n    \ndef test",
        "num_ids": 120
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    i = 0\n    result = []\n    for item in test_list:\n        result.append(test_list[i][:K])\n        i += 1\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(x for x in test_list if len(x) == K)\n    ",
        "num_ids": 23
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        del test_list[i][K:]\n    return test_list\n",
        "num_ids": 33
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for item in test_list:\n        if len(item) > K:\n            trimmed_list.append(item[:K])\n        else:\n            trimmed_list.append(item)\n    return trimmed_list\n    \ndef test_trim_tuple():\n    print('Testing trim_tuple:')\n    test_list = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    K = 2\n    answer_list = [[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\n    print(trim_tuple(test_list, K))\n    print(answer_list)\n    print()\n    print('Testing trim_tuple:')\n    test_list = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    K = 1\n    answer_list = [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    print(trim_tuple(test_list, K))\n    print(answer_list)\n    print()\n    print('Testing trim_tuple:')\n    test_list = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    K = 3\n    answer_list = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    print(trim_tuple(test_list, K))\n    print(answer_list)\n    print()\n    print('Testing trim_tuple:')\n    test_list = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    K = -1\n    answer_list = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    print(trim_tuple(test_list, K))\n    print(answer_list)\n    print()\n    print('Testing trim_tuple:')\n    test_list = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    K = 5\n    answer_list = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]\n    print(trim_tuple(test_list, K))\n    print(answer_list)\n    print()\n",
        "num_ids": 744
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # for i in range(len(test_list)):\n    #     test_list[i] = trim_tuple(test_list[i], K)\n    # return test_list\n",
        "num_ids": 48
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [l[k:] for l in test_list]\n    \ndef test_trim_tuple():\n    test_cases = [([(1,2,3),(2,3,4),(5,6,7),(6,7,8),(8,9,10)], 3),\n                  ([(1,2,3,4),(2,3,4,5),(5,6,7,8),(6,7,8,9),(8,9,10,11)], 5),\n                  ([(1,2,3,4),(2,3,4,5),(5,6,7,8),(6,7,8,9),(8,9,10,11),(11,12,13,14)], 5),\n                  ([(1,2,3,4,5),(2,3,4,5,6),(7,8,9,10,11),(11,12,13,14,15),(16,17,18,19,20)], 5),\n                  ([(1,2,3,4),(2,3,4,5),(5,6,7,8),(6,7,8,9),(8,9,10,11),(11,12,13,14,15)], 5)]\n    for t_c in test_cases:\n        assert trim_tuple(t_c[0], t_c[1]) == t_c[2]\n",
        "num_ids": 347
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for k in range(K, len(test_list)):\n        new_list.append(test_list[k])\n    return new_list\n",
        "num_ids": 45
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for t in test_list:\n        if len(t) <= K:\n            continue\n        else:\n            t = t[:K]\n    return test_list\n",
        "num_ids": 43
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n",
        "num_ids": 34
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (\n        test_tup1[0] * test_tup2[0], \n        test_tup1[1] * test_tup2[0],\n        test_tup1[0] * test_tup2[1],\n        test_tup1[1] * test_tup2[1],\n        test_tup1[0] * test_tup2[2],\n        test_tup1[1] * test_tup2[2],\n        test_tup1[2] * test_tup2[0],\n        test_tup1[2] * test_tup2[1],\n        test_tup1[2] * test_tup2[2],\n    )\n",
        "num_ids": 181
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([x*y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_num = 0\n    res = tuple()\n    for tup in (test_tup1, test_tup2):\n        res += (tup[index_num] * test_tup2[index_num],)\n        index_num += 1\n    return res\n    \n    \ndef main():\n    '''\n    TEST CASES\n    '''\n    # index_multiplication(('a', 'b', 'c'), ('d', 'e', 'f'))\n    # index_multiplication((2, 3, 4), (5, 6, 7))\n    # index_multiplication((0, 0), (0, 0))\n    \n    # index_multiplication((0, 1), (1, 2))\n    # index_multiplication((0, 1, 2), (1, 2, 3))\n    \n    # index_multiplication((4, 5, 6), (7, 8, 9))\n    # index_multiplication((4, 5, 6), (7, 8, 9, 10))\n    \n    # index_multiplication((1, 2, 3), (4, 5, 6))\n    # index_multiplication((1, 2, 3), (4, 5, 6, 7))\n    \n    index_multiplication((1, 2, 3, 4), (5, 6, 7, 8))\n    \n    index_multiplication((1, 2, 3, 4), (5, 6, 7, 8, 9))\n",
        "num_ids": 253
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    out = tuple(zip(tup1, tup2))\n    \n    return out\n",
        "num_ids": 45
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    for i in range(len(tup1)):\n        tup1[i] *= tup2[i]\n    return tup1\n",
        "num_ids": 66
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_mul = []\n    \n    for i in range(len(test_tup1)):\n        index_mul.append(test_tup1[i] * test_tup2[i])\n    return tuple(index_mul)\n",
        "num_ids": 64
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplied_tup = []\n    for i in range(len(test_tup1)):\n        multiplied_tup.append(test_tup1[i] * test_tup2[i])\n    return tuple(multiplied_tup)\n",
        "num_ids": 65
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # get the length of the tuples\n    tup1_length = len(test_tup1)\n    tup2_length = len(test_tup2)\n",
        "num_ids": 44
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(test_tup1[0]*test_tup1[1])\n    print(test_tup2[0]*test_tup2[1])\n",
        "num_ids": 44
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n    \n",
        "num_ids": 40
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for x in lst:\n        if x in tup:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_temp = lst\n    tup_temp = tup\n    count = 0\n    for i in range(len(tup_temp)):\n        count += tup_temp.count(lst_temp[i])\n    print(count)\n",
        "num_ids": 64
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for x in lst:\n        if x in tup:\n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in range(len(lst)):\n        lst1.append(lst[i])\n    for i in range(len(lst)):\n        for j in range(len(tup)):\n            if tup[j] == lst1[i]:\n                lst2.append(tup[j])\n    lst3 = Counter(lst2)\n    return lst3\n",
        "num_ids": 114
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = 0\n    for i in range(len(lst)):\n        if lst[i] in tup:\n            c+=1\n    return c\n    \nprint(count_Occurrence((1,2,3,4), [1,2,3,4,5,1]))\n",
        "num_ids": 73
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # list of occurences of each element in tuple \n    res = [] \n    \n    # traverse the tuple \n    for x in tup: \n        # count the number of occurences of x in the list \n        # res.append(lst.count(x)) \n        # print(x)\n        res.append(lst.count(x)) \n    \n    return res \n",
        "num_ids": 99
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    n = 0\n    for i in tup:\n        if i in lst:\n            n = n+1\n    return n\n",
        "num_ids": 34
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return(Counter(lst) + Counter(tup)) \n  \ntup = (\"one\", \"two\", \"three\", \"four\", \"four\", \"three\", \"two\") \nlst = [\"one\", \"two\", \"three\"] \n  \nprint(count_Occurrence(tup, lst)) \n  ",
        "num_ids": 78
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Code here\n    for item in lst:\n        if item in tup:\n            print(tup.count(item))\n            \n    \ndef is_palindrome(string): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    # Code here\n    return string == string[::-1]\n        \ndef is_palindrome2(string):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    # Code here\n    if len(string) <= 1:\n        return True\n    else:\n        return string[0] == string[-1] and is_palindrome2(string[1:-1])\n    \n    \ndef convert_int_to_roman(num):\n    '''\n    Write a python function to convert integer to roman numerals.\n    '''\n    # Code here\n    if num == 0:\n        return ''\n    else:\n        if num >= 1000:\n            rst = ''\n            d = num // 1000\n            rst += roman_list[d] + roman_list[1000]\n            num -= d*1000\n        if num >= 900:\n            rst += roman_list[1000] + roman_list[900]\n            num -= 900\n        if num >= 500:\n            rst += roman_list[500] + roman_list[500]\n            num -= 500\n        if num >= 400:\n            rst += roman_list[1000] + roman_list[400]\n            num -= 400\n        if num >= 100:\n            rst += roman_list[100] + roman_list[100]\n            num -= 100\n        if num >= 90:\n            rst += roman_list[100] + roman_list[90]\n            num -= 90\n        if num >= 50:\n            rst += roman_list[50] + roman_list[50]\n            num -= 50\n        if num >= 40:\n            rst += roman_list[100] + roman_list[40]\n            num -= 40\n        if num >= 10:\n            rst += roman_list[10] + roman_list[10]\n            num -= 10\n        if num >= 9:\n            rst += roman_list[10] + roman_list[9]\n            num -= 9\n        if num >= 5:\n            rst += roman_list[5] + roman_list[5]\n            num -= 5\n        if num >= 4:\n            rst += roman_list[5] + roman_list[4]\n            num -= 4\n        if num >= 1:\n            rst += roman_list[1] + roman_list[1]\n            num -= 1\n        return rst\n            \n",
        "num_ids": 460
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).most_common()\n    ",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in nums:\n        cube_list.append(i**3)\n    print(cube_list)\n",
        "num_ids": 37
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x*x*x, nums)\n",
        "num_ids": 19
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return nums**3\n",
        "num_ids": 9
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    \n    return cube_list\n",
        "num_ids": 39
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = lambda x: x**3\n    nums = map(cube,nums)\n    return list(nums)\n",
        "num_ids": 32
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # TODO: Write your solution here\n    i = 2\n    a = 0\n    while i <= n:\n        a += i\n        i = i * 2\n    return a\n    # return sum(range(2, n+1))\n",
        "num_ids": 59
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    return n + cal_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    while n>0:\n        sum += n%10\n        n //= 10\n    return sum\n    \nif __name__ == '__main__':\n    import sys\n    n = int(sys.argv[1])\n    if n == 0:\n        print(0)\n        exit()\n    if n == 1:\n        print(1)\n        exit()\n    sum = 0\n    for i in range(1,n):\n        sum += cal_sum(i)\n    print(sum",
        "num_ids": 125
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n > 1: \n        return n + cal_sum(n - 1) \n",
        "num_ids": 50
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    return n + cal_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (n + 1) / 2\n",
        "num_ids": 14
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = list(filter(lambda x : len(x) == l, str))\n    return str_list\n",
        "num_ids": 30
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result_str = \"\"\n    for i in range(len(str)):\n        if i + l <= len(str):\n            result_str += str[i: i + l] + \" \"\n    return result_str\n",
        "num_ids": 55
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    list_of_strings = []\n    for i in range(l):\n        list_of_strings.append(str[i][0:10])\n    return list_of_strings\n",
        "num_ids": 46
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    def partition(data, l):\n        if len(data) == 0:\n            return None\n        if len(data) <= l:\n            return data\n        else:\n            i = 0\n            while i <= len(data) - l:\n                j = i + l\n                if j > len(data):\n                    j = len(data)\n                string = data[i:j]\n                yield string\n                i += 1\n    output = partition(data, l)\n    return output\n",
        "num_ids": 118
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str = str.split(' ')\n    for i in range(0, len(str)):\n        str[i] = str[i].lstrip(' ')\n    str = list(filter(None, str))\n    str =''.join(str)\n    return str.strip(' ')\n",
        "num_ids": 72
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n    \ndef get_common_string(str1, str2):\n    '''\n    Write a function to check and return the common string from two given strings.\n    '''\n    common_str = []\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            common_str.append(str1[i])\n    common_str = ''.join(common_str)\n    return common_str\n",
        "num_ids": 69
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            return str[i]\n",
        "num_ids": 33
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = str[l:l + 4]\n    return extracted_str\n",
        "num_ids": 23
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        new_list.append(l[i][:l[i].find(' ')+l[i].find('\\n')])\n    return new_list\n",
        "num_ids": 58
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n",
        "num_ids": 10
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # print(\"removing whitespaces\")\n    text2 = re.sub('\\s+','', text1)\n    return text2\n    \ndef remove_parenthesises(text1):\n    '''\n    Write a function to remove all parenthesis ( and ) from the given string.\n    '''\n    # print(\"removing parenthesis\")\n    text2 = re.sub('\\(|\\)', '', text1)\n    return text2\n",
        "num_ids": 36
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s', '', text1)\n",
        "num_ids": 17
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "num_ids": 10
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\"\\n\", \"\").strip()\n    return text1\n",
        "num_ids": 24
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    whitespaces = re.findall(r\"\\s+\",text1)\n    for i in range(len(whitespaces)):\n        text1 = text1.replace(whitespaces[i],'')\n    return text1\n",
        "num_ids": 59
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n",
        "num_ids": 17
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(\"\\s+\")\n    return pattern.sub(\"\", text1)\n    \ndef reverse_string(text2):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return text2[::-1]\n    \ndef string_rotation(text3):\n    '''\n    Write a function to check if the given string is rotation of another given string.\n    '''\n    if len(text3) == len(text3[::-1]):\n        return \"Yes\"\n    else:\n        return \"No\"\n    \ndef detect_and_remove_urls(text4):\n    '''\n    Write a function to remove all urls from the given string.\n    '''\n    pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    return pattern.sub(\"\", text4)\n    \ndef remove_extra_spaces(text5):\n    '''\n    Write a function to remove extra spaces from the given string.\n    '''\n    return re.sub(' +',' ',text5)\n    \ndef generate_html_tags(text6):\n    '''\n    Write a function to generate HTML tags from a given string.\n    '''\n    return \"<html>\" + text6 + \"</html>\"\n    \ndef make_spaces_to_punctuation(text7):\n    '''\n    Write a function to replace spaces with punctuation symbols.\n    '''\n    text7 = text7.replace(\" \",\"-\")\n    return text7\n    \ndef find_num_words(text8):\n    '''\n    Write a function to count number of words in a string.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return len(pattern.findall(text8))\n    \ndef find_num_sentences(text9):\n    '''\n    Write a function to count number of sentences in a string.\n    '''\n    pattern = re.compile(\".+[.?!]\")\n    return len(pattern.findall(text9))\n    \ndef count_special_characters(text10):\n    '''\n    Write a function to count number of special characters in a string.\n    '''\n    pattern = re.compile(\"[@_!#$%^&*()<>?/\\|}{~:]\")\n    return len(pattern.findall(text10))\n    \ndef count_punctuations(text11):\n    '''\n    Write a function to count number of punctuations in a string.\n    '''\n    pattern = re.compile(\"[.,:;\\\"?!-]+\")\n    return len(pattern.findall(text11))\n    \ndef remove_characters_and_digits(text12):\n    '''\n    Write a function to remove characters and digits from a string.\n    '''\n    pattern = re.compile(\"\\D\")\n    return pattern.sub(\"\",text12)\n    \ndef remove_special_characters_using_regex(text13):\n    '''\n    Write a function to remove special characters using regular expression.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]\")\n    return pattern.sub(\"\",text13)\n    \ndef remove_digits(text14):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    pattern = re.compile(\"\\d\")\n    return pattern.sub(\"\",text14)\n    \ndef remove_digits_and_spaces(text15):\n    '''\n    Write a function to remove digits and spaces from a string.\n    '''\n    pattern = re.compile(\"\\s+\")\n    return pattern.sub(\"\",text15)\n    \ndef remove_numbers(text16):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    pattern = re.compile(\"\\d\")\n    return pattern.sub(\"\",text16)\n    \ndef remove_vowels(text17):\n    '''\n    Write a function to remove vowels from a string.\n    '''\n    pattern = re.compile(\"[aeiouAEIOU]\")\n    return pattern.sub(\"\",text17)\n    \ndef find_first_and_last_index(text18):\n    '''\n    Write a function to find the first and last index of the word 'hello' in the string 'Hello world'.\n    '''\n    pattern = re.compile(\"hello\")\n    first_index = text18.find(pattern)\n    last_index = text18.rfind(pattern)\n    return first_index, last_index\n    \ndef count_words(text19):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    pattern = re.compile(\"\\w+\")\n    return len(pattern.findall(text19))\n    \ndef remove_non_alphanumeric(text20):\n    '''\n    Write a function to remove non-alphanumeric characters from a string.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]\")\n    return pattern.sub(\"\",text20)\n    \ndef remove_non_alphanumeric_digits(text21):\n    '''\n    Write a function to remove non-alphanumeric characters and digits from a string.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]\")\n    return pattern.sub(\"\",text21)\n    \ndef remove_all_spaces(text22):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return re.sub(\"\\s+\",\"\",text22)\n    \ndef remove_all_spaces_and_newlines(text23):\n    '''\n    Write a function to remove all spaces and newlines from a string.\n    '''\n    return re.sub(\"\\s+\",\"\",text23)\n    \ndef remove_words_with_hyphen(text24):\n    '''\n    Write a function to remove words with hyphen from a string.\n    '''\n    pattern = re.compile(\"[-]+\")\n    return pattern.sub(\"\",text24)\n    \ndef remove_words_with_hyphen_and_dash(text25):\n    '''\n    Write a function to remove words with hyphen and dash from a string.\n    '''\n    pattern = re.compile(\"[-][-]+\")\n    return pattern.sub(\"\",text25)\n    \ndef remove_words_with_hyphen_and_dot(text26):\n    '''\n    Write a function to remove words with hyphen and dot from a string.\n    '''\n    pattern = re.compile(\"[-][.]+\")\n    return pattern.sub(\"\",text26)\n    \ndef remove_words_with_hyphen_and_plus(text27):\n    '''\n    Write a function to remove words with hyphen and plus from a string.\n    '''\n    pattern = re.compile(\"[-][+]+\")\n    return pattern.sub(\"\",text27)\n    \ndef remove_words_with_hyphen_and_dash_and_plus(text28):\n    '''\n    Write a function to remove words with hyphen and dash and plus from a string.\n    '''\n    pattern = re.compile(\"[-][-][+]+\")\n    return pattern.sub(\"\",text28)\n    \ndef remove_all_special_characters(text29):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9]\")\n    return pattern.sub(\"\",text29)\n    \ndef remove_all_special_characters_and_spaces(text30):\n    '''\n    Write a function to remove special characters and spaces from a string.\n    '''\n    pattern = re.compile(\"[^a-zA-Z0-9 ]+\")\n    return pattern.sub(\"\",text30)\n    \ndef remove_all_alphanumeric_characters(text31):\n    '",
        "num_ids": 56
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.strip()\n    return text\n",
        "num_ids": 15
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return sale_amount\n    else:\n        return actual_cost\n",
        "num_ids": 29
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost==0:\n        return 0\n    else:\n        return sale_amount - actual_cost\n",
        "num_ids": 29
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n",
        "num_ids": 40
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    return loss_amount\n",
        "num_ids": 21
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # your code here\n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return sale_amount-actual_cost\nprint(loss_amount(5,6))\nprint(loss_amount(5,5))\nprint(loss_amount(5,3))\n",
        "num_ids": 70
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount < 0 :\n        return 0\n    else :\n        return actual_cost - sale_amount\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost > sale_amount else 0\n",
        "num_ids": 22
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    sum = 0\n    for i in range(1,n+1):\n        if (n%i == 0) :\n            if (i%2 == 0):\n                sum += i \n    return sum \n",
        "num_ids": 54
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            s += i\n            if i % 2!= 0:\n                s += n / i\n    if n % 2 == 0:\n        s += n\n    return s\ndef Power2(n): \n    '''\n    Write a python function to check if a number is power of 2 or not. \n    '''\n    if (n&(n-1)==0) and n > 0 :\n        return True\n    else:\n        return False\ndef isPerfectSquare(n): \n    '''\n    Write a python function to check if a number is perfect square or not.\n    '''\n    x = int(math.sqrt(n))\n    return x*x == n\ndef isHappy(n):\n    '''\n    Write a python function to check if a number is happy or not.\n    '''\n    i = 0\n    l = list(str(n))\n    while i < len(l)-1:\n        if l[i] == l[i+1]:\n            i += 1\n        else:\n            return False\n    return True\ndef isPalindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    s = str(n)\n    return s == s[::-1]\ndef isArmstrong(n):\n    '''\n    Write a python function to check if a number is armstrong or not.\n    '''\n    l = list(str(n))\n    sum = 0\n    for i in range(len(l)):\n        sum = sum + pow(int(l[i]),(len(l)-i))\n    return sum == n\ndef isPrime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    l = list(range(2, n))\n    for i in range(2, n):\n        if n%i == 0:\n            l.remove(i)\n    if len(l) == 0:\n        return True\n    else:\n        return False\ndef isPerfect(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    sum = 0\n    l = list(str(n))\n    for i in range(len(l)):\n        sum = sum + int(l[i])\n    return sum == n\ndef isKaprekarNumber(n):\n    '''\n    Write a python function to check if a number is Kaprekar number or not.\n    '''\n    sum = 0\n    num = 0\n    while True:\n        num = 2 * num + 1\n        if n == num:\n            return True\n        if n < num:\n            return False\ndef isArmstrong(n):\n    '''\n    Write a python function to check if a number is armstrong or not.\n    '''\n    l = list(str(n))\n    sum = 0\n    for i in range(len(l)):\n        sum = sum + pow(int(l[i]),(len(l)-i))\n    return sum == n\ndef isPrime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    l = list(range(2, n))\n    for i in range(2, n):\n        if n%i == 0:\n            l.remove(i)\n    if len(l) == 0:\n        return True\n    else:\n        return False\ndef noOfPalindromicSubstrings(s):\n    '''\n    Write a python function to find the number of palindromic substrings of a string.\n    '''\n    n = len(s)\n    i = 0\n    while i < n-1:\n        if s[i] == s[i+1]:\n            i += 1\n        else:\n            break\n    if i == n-1:\n        return 1\n    count = 1\n    while i < n:\n        if s[i] == s[i+1]:\n            count += 1\n            i += 2\n        else:\n            break\n    return count\ndef sumOfEvenFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    i = 0\n    while i < n:\n        if n % i == 0:\n            s += i\n            if i % 2!= 0:\n                s += n / i\n        i += 1\n    return s\ndef sumOfOddFactors(n):\n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    s = 0\n    i = 0\n    while i < n:\n        if n % i!= 0:\n            s += i\n        i += 1\n    return s\ndef maxlength(s):\n    '''\n    Write a python function to find the maximum length of a string.\n    '''\n    if len(s) == 0:\n        return 0\n    return 1 + maxlength(s[1:])\ndef starPattern(n):\n    '''\n    Write a python function to print star pattern.\n    '''\n    for i in range(n):\n        for j in range(n):\n            print('*',end = \"\")\n        print()\n    for i in range(n):\n        for j in range(n):\n            print('*',end = \"\")\n        print()\n    for i in range(n):\n        for j in range(n):\n            print('*',end = \"\")\n        print()\ndef palindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s = s.replace(\" \",\"\")\n    return s == s[::-1]\ndef isValidBST(root):\n    '''\n    Write a python function to check whether a given binary tree is a valid binary search tree or not.\n    '''\n    if root == None:\n        return True\n    \n    return isValidBST(root.left) and isValidBST(root.right) and root.val < root.left.val and root.val > root.right.val\ndef isSubtree(s, t):\n    '''\n    Write a python function to check if one binary tree is subtree of another tree.\n    '''\n    if s == None and t == None:\n        return True\n    if s == None or t == None:\n        return False\n    if s.val == t.val and isSubtree(s.left, t.left) and isSubtree(s.right, t.right):\n        return True\n    else:\n        return False\ndef isAnagram(s, t):\n    '''\n    Write a python function to check if two strings are anagram of each other or not.\n    '''\n    if len(s)!= len(t):\n        return False\n    s = s.replace(\" \", \"\")\n    t = t.replace(\" \", \"\")\n    s = list(s)\n    t = list(t)\n    i = 0\n    while i < len(s):\n        if s.count(s[i])!= t.count(t[i]):\n            return False\n        i += 1\n    return True\ndef maxProduct(nums):\n    '''\n    Write a python function to find maximum product of four consecutive integers in a array.\n    '''\n    if len(nums) < 4:\n        return -1\n    i = 0\n    while i < len(nums)-3:\n        if nums[i] > nums[i+1] and nums[i] > nums[i+2] and nums[i] > nums[i+3]:\n            return nums[i]*nums[i+1]*nums[i+2]*nums[i+3]\n        i += 1\n    return -1\ndef isValid(s):\n    '''\n    Write a python function to check if a given string is a valid palindrome or not.\n    '''\n    if s == None:\n        return True\n    s = s.replace(\" \",\"\")\n    return s == s[::-1]\ndef getMax",
        "num_ids": 38
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    for i in range(2,n) : \n        if (n % i == 0) : \n            sum = sum + i \n    return sum\n    \ndef squareOfFactors(n) : \n    '''\n    Write a python function to find the square of the sum of the odd factors of a number.\n    '''\n    sum = 1\n    for i in range(1,n) : \n        if (n % i == 0) : \n            sum = sum + i \n    return (sum * sum)\n    \ndef absoluteValue(n) : \n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    return abs(n)\n    \ndef printTime(seconds) : \n    '''\n    Write a python function to print the time in hh:mm:ss.s format.\n    '''\n    minutes,seconds = divmod(seconds,60)\n    hours,minutes = divmod(minutes,60)\n    print(\"%d:%02d:%02d\"%(hours,minutes,seconds))\n    \ndef printTime_1(seconds) : \n    '''\n    Write a python function to print the time in hh:mm:ss.s format.\n    '''\n    if (seconds < 1) :\n        print(\"00:00:00\")\n        return\n    minutes,seconds = divmod(seconds,60)\n    hours,minutes = divmod(minutes,60)\n    print(\"%d:%02d:%02d\"%(hours,minutes,seconds))\n    \ndef average(num1,num2) : \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (num1 + num2) / 2\n    \ndef countDigits(n) : \n    '''\n    Write a python function to find the count of digits in a number.\n    '''\n    count = 0\n    while (n!= 0) :\n        n = n // 10\n        count += 1\n    return count\n    \ndef maxDiff(arr,n) : \n    '''\n    Write a python function to find the maximum difference among all the elements in an array.\n    '''\n    n = len(arr)\n    if (n == 0) :\n        return\n    max1 = -99999\n    for i in range(0,n) : \n        if (arr[i] > max1) :\n            max1 = arr[i]\n    min1 = 99999\n    for i in range(0,n) : \n        if (arr[i] < min1) :\n            min1 = arr[i]\n    return (max1 - min1)\n    \ndef sumOfDivisors(n) : \n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    count = 1\n    sum = 0\n    if (n == 1) : \n        return 1\n    while (n % count == 0) : \n        sum = sum + count\n        n = n // count\n    count = count + 1\n    while (n!= 1) : \n        count = count + 1\n        if (n % count == 0) : \n            sum = sum + count\n            n = n // count\n    return sum\n    \ndef sumOfDivisors_1(n) : \n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    if (n == 1) : \n        return 1\n    sum = 0\n    while (n % 2 == 0) : \n        sum = sum + 2\n        n = n // 2\n    count = 3\n    while (count * count <= n) : \n        if (n % count == 0) : \n            sum = sum + count + (n//count)\n        count = count + 2\n    return sum\n    \ndef isPrime(n) : \n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if (n == 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    limit = math.sqrt(n)\n    i = 3\n    while (i <= limit) : \n        if (n % i == 0) : \n            return False\n        i = i + 2\n    return True\n    \ndef isPrime_1(n) : \n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if (n == 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    limit = math.sqrt(n)\n    i = 3\n    while (i <= limit) : \n        if (n % i == 0) : \n            return False\n        i = i + 2\n    return True\n    \ndef isPythagoras(a,b,c) : \n    '''\n    Write a python function to check if three given points are on a Pythagorean triplet.\n    '''\n    return (math.sqrt(a*a + b*b) == math.sqrt(c*c))\n    \ndef isPythagoras_1(a,b,c) : \n    '''\n    Write a python function to check if three given points are on a Pythagorean triplet.\n    '''\n    return (math.sqrt(a*a + b*b) == math.sqrt(c*c))\n    \ndef isSquare(n) : \n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    i = 1\n    while (i*i <= n) :\n        if (n % i == 0) : \n            return False\n        i = i + 1\n    return True\n    \ndef isSquare_1(n) : \n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    return (n == math.sqrt(n))\n    \ndef divisors(n) : \n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    count = 1\n    lst = []\n    if (n == 1) : \n        lst.append(count)\n        return lst\n    if (n % count == 0) : \n        lst.append(count)\n        n = n // count\n    count = count + 1\n    while (n!= 1) : \n        count = count + 1\n        if (n % count == 0) : \n            lst.append(count)\n            n = n // count\n    return lst\n    \ndef divisors_1(n) : \n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    lst = []\n    i = 1\n    while (i <= math.sqrt(n)) :\n        if (n % i == 0) : \n            lst.append(i)\n            if (n // i!= i) :\n                lst.append(n//i)\n        i = i + 1\n    return lst\n    \ndef primePartitions(n) : \n    '''\n    Write a python function to count all prime partitions of a number.\n    '''\n    count = 1\n    lst = []\n    if (n == 0) : \n        return 0\n    if (n == 1) : \n        return 1\n    lst.append(count)\n    while (n > 1) :\n        count = 1\n        i = 1\n        while (i <= n) :\n            if (n % i == 0) :\n                n = n // i\n                count = count + 1\n            i = i + 1\n        if (n!= 1) :\n            lst.append(count)\n        n = n - 1\n    return lst\n    \ndef primePartitions_1(n) : \n    '''\n    Write a python function to count all prime partitions of a number.\n    '''\n    lst = []\n    i = 2\n    while (i <= n) :\n        count = 0\n        while (i <= n) :\n            if (n % i == 0) :\n                count ",
        "num_ids": 50
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    factor = 2\n    while factor <= math.sqrt(n): \n        if n % factor == 0: \n            even_factors.append(factor) \n            n = n // factor \n        else: \n            factor += 1\n    return(sum(even_factors))\nprint('sum of factors = ',sumofFactors(120))\nprint('sum of factors = ',sumofFactors(16))\nprint('sum of factors = ',sumofFactors(9))\nprint('sum of factors = ',sumofFactors(5))\nprint('sum of factors = ',sumofFactors(4))\nprint('sum of factors = ',sumofFactors(3))\nprint('sum of factors = ',sumofFactors(2))\nprint('sum of factors = ',sumofFactors(1))\nprint('sum of factors = ',sumofFactors(0))\nprint('sum of factors = ',sumofFactors(-5))\nprint('sum of factors = ',sumofFactors(-4))\nprint('sum of factors = ',sumofFactors(-3))\nprint('sum of factors = ',sumofFactors(-2))\nprint('sum of factors = ',sumofFactors(-1))\nprint('sum of factors = ',sumofFactors(5.9))\nprint('sum of factors = ',sumofFactors(6.9))\nprint('sum of factors = ',sumofFactors(8.9))\nprint('sum of factors = ',sumofFactors(10.9))\nprint('sum of factors = ',sumofFactors(11.9))\nprint('sum of factors = ',sumofFactors(12.9))\nprint('sum of factors = ',sumofFactors(13.9))\nprint('sum of factors = ',sumofFactors(14.9))\nprint('sum of factors = ',sumofFactors(15.9))\nprint('sum of factors = ',sumofFactors(16.9))\nprint('sum of factors = ',sumofFactors(17.9))\nprint('sum of factors = ',sumofFactors(18.9))\nprint('sum of factors = ',sumofFactors(19.9))\nprint('sum of factors = ',sumofFactors(20.9))\nprint('sum of factors = ',sumofFactors(21.9))\nprint('sum of factors = ',sumofFactors(22.9))\nprint('sum of factors = ',sumofFactors(23.9))\nprint('sum of factors = ',sumofFactors(24.9))\nprint('sum of factors = ',sumofFactors(25.9))\nprint('sum of factors = ',sumofFactors(26.9))\nprint('sum of factors = ',sumofFactors(27.9))\nprint('sum of factors = ',sumofFactors(28.9))\nprint('sum of factors = ',sumofFactors(29.9))\nprint('sum of factors = ',sumofFactors(30.9))\nprint('sum of factors = ',sumofFactors(31.9))\nprint('sum of factors = ',sumofFactors(32.9))\nprint('sum of factors = ',sumofFactors(33.9))\nprint('sum of factors = ',sumofFactors(34.9))\nprint('sum of factors = ',sumofFactors(35.9))\nprint('sum of factors = ',sumofFactors(36.9))\nprint('sum of factors = ',sumofFactors(37.9))\nprint('sum of factors = ',sumofFactors(38.9))\nprint('sum of factors = ',sumofFactors(39.9))\nprint('sum of factors = ',sumofFactors(40.9))\nprint('sum of factors = ',sumofFactors(41.9))\nprint('sum of factors = ',sumofFactors(42.9))\nprint('sum of factors = ',sumofFactors(43.9))\nprint('sum of factors = ',sumofFactors(44.9))\nprint('sum of factors = ',sumofFactors(45.9))\nprint('sum of factors = ',sumofFactors(46.9))\nprint('sum of factors = ',sumofFactors(47.9))\nprint('sum of factors = ',sumofFactors(48.9))\nprint('sum of factors = ',sumofFactors(49.9))\nprint('sum of factors = ',sumofFactors(50.9))\nprint('sum of factors = ',sumofFactors(51.9))\nprint('sum of factors = ',sumofFactors(52.9))\nprint('sum of factors = ',sumofFactors(53.9))\nprint('sum of factors = ',sumofFactors(54.9))\nprint('sum of factors = ',sumofFactors(55.9))\nprint('sum of factors = ',sumofFactors(56.9))\nprint('sum of factors = ',sumofFactors(57.9))\nprint('sum of factors = ',sumofFactors(58.9))\nprint('sum of factors = ',sumofFactors(59.9))\nprint('sum of factors = ',sumofFactors(60.9))\nprint('sum of factors = ',sumofFactors(61.9))\nprint('sum of factors = ',sumofFactors(62.9))\nprint('sum of factors = ',sumofFactors(63.9))\nprint('sum of factors = ',sumofFactors(64.9))\nprint('sum of factors = ',sumofFactors(65.9))\nprint('sum of factors = ',sumofFactors(66.9))\nprint('sum of factors = ',sumofFactors(67.9))\nprint('sum of factors = ',sumofFactors(68.9))\nprint('sum of factors = ',sumofFactors(69.9))\nprint('sum of factors = ',sumofFactors(70.9))\nprint('sum of factors = ',sumofFactors(71.9))\nprint('sum of factors = ',sumofFactors(72.9))\nprint('sum of factors = ',sumofFactors(73.9))\nprint('sum of factors = ',sumofFactors(74.9))\nprint('sum of factors = ',sumofFactors(75.9))\nprint('sum of factors = ',sumofFactors(76.9))\nprint('sum of factors = ',sumofFactors(77.9))\nprint('sum of factors = ',sumofFactors(78.9))\nprint('sum of factors = ',sumofFactors(79.9))\nprint('sum of factors = ',sumofFactors(80.9))\nprint('sum of factors = ',sumofFactors(81.9))\nprint('sum of factors = ',sumofFactors(82.9))\nprint('sum of factors = ',sumofFactors(83.9))\nprint('sum of factors = ',sumofFactors(84.9))\nprint('sum of factors = ',sumofFactors(85.9))\nprint('sum of factors = ',sumofFactors(86.9))\nprint('sum of factors = ',sumofFactors(87.9))\nprint('sum of factors = ',sumofFactors(88.9))\nprint('sum of factors = ',sumofFactors(89.9))\nprint('sum of factors = ',sumofFactors(90.9))\nprint('sum of factors = ',sumofFactors(91.9))\nprint('sum of factors = ',sumofFactors(92.9))\nprint('sum of factors = ',sumofFactors(93.9))\nprint('sum of factors = ',sumofFactors(94.9))\nprint('sum of factors = ',sumofFactors(95.9))\nprint('sum of factors = ',sumofFactors(96.9))\nprint('sum of factors = ',sumofFactors(97.9))\nprint('sum of factors = ',sumofFactors(98.9))\nprint('sum of factors = ',sumofFactors(99.9))\nprint('sum of factors = ',sumofFactors(100.9))\nprint('sum of factors = ',sumofFactors(101.9))\nprint('sum of factors = ',sumofFactors(102.9))\nprint('sum of factors = ',sumofFactors(103.9))\nprint('sum of factors = ',sumofFactors(104.9))\nprint('sum of factors = ',sumofFactors(105.9))\nprint('sum of factors = ',sumofFactors(106.9))\nprint('sum of factors = ',sumofFactors(107.9))\nprint('sum o",
        "num_ids": 2010
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return(sum(x for x in range(1,n) if n % x == 0 and x % 2 == 0))\nprint('sumofFactors',sumofFactors(7))\n",
        "num_ids": 46
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1:\n        return 1\n    return n + sumofFactors(n//2)\n",
        "num_ids": 27
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return sum(factors)\n",
        "num_ids": 45
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==1:\n        return 0\n    sum = 0\n    i = 2\n    while i*i<=n:\n        if n%i == 0:\n            sum += i\n        i += 1\n    return sum\n",
        "num_ids": 56
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum = 0\n    for i in range(1,n) : \n        if(n%i==0) :\n            if(i%2==0) : \n                Sum = Sum + i \n    return Sum\n",
        "num_ids": 55
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    while (n % 2 == 0):\n        count += n // 2\n        n = n // 2\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\bz\\w+\\b')\n    match = pattern.search(text)\n    print(match)\n    return match\n",
        "num_ids": 42
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z\\w+', text)\n",
        "num_ids": 18
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    for x in range(len(text)-1,-1,-1):\n        if text[x] == 'z':\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # if re.search('[z]', text):\n    #     print('Match!')\n    # else:\n    #     print('No Match')\n    # return re.search('[z]', text)\n",
        "num_ids": 53
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    search = re.findall(r\"\\w*z\\w*\", text)\n    return search\n",
        "num_ids": 27
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'z', text):\n        return True\n    else:\n        return False\nprint(text_match_wordz('Hi how are you'))\nprint(text_match_wordz('This is a test of the z match'))\n",
        "num_ids": 63
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\n",
        "num_ids": 13
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    \n    pattern = re.compile(r'z')\n",
        "num_ids": 19
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n    if re.search(r'z', text):\n        return 'I found \"z\" in the text'\n    else:\n        return 'I did not find \"z\" in the text'\n",
        "num_ids": 72
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'z', text))\n",
        "num_ids": 17
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb_dict = {\n    \"1\":31,\n    \"2\":28,\n    \"3\":31,\n    \"4\":30,\n    \"5\":31,\n    \"6\":30,\n    \"7\":31,\n    \"8\":31,\n    \"9\":30,\n    \"10\":31,\n    \"11\":30,\n    \"12\":31\n    }\n    if monthnum2 in monthnumb_dict.keys():\n        return True\n    else:\n        return False\n",
        "num_ids": 124
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid Month Number\")\n        return None\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"{} has 31 days\".format(monthnum2))\n        return None\n    else:\n        print(\"{} has 30 days\".format(monthnum2))\n        return None\n",
        "num_ids": 106
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 == 31 or monthnum2 == 29 or monthnum2 == 30 or monthnum2 == 31\n",
        "num_ids": 28
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum_list = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return monthnum_list[monthnum2-1]\n",
        "num_ids": 48
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumbers = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    if monthnum2 in monthnumbers.keys():\n        return True\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(\"31 days\")\n    elif monthnum2 == 2:\n        print(\"28 or 29 days\")\n    elif monthnum2 == 3:\n        print(\"31 days\")\n    elif monthnum2 == 4:\n        print(\"30 days\")\n    elif monthnum2 == 5:\n        print(\"31 days\")\n    elif monthnum2 == 6:\n        print(\"30 days\")\n    elif monthnum2 == 7:\n        print(\"31 days\")\n    elif monthnum2 == 8:\n        print(\"31 days\")\n    elif monthnum2 == 9:\n        print(\"30 days\")\n    elif monthnum2 == 10:\n        print(\"31 days\")\n    elif monthnum2 == 11:\n        print(\"30 days\")\n    elif monthnum2 == 12:\n        print(\"31 days\")\n    else:\n        print(\"Invalid month number\")\n    \ndef check_monthnumb_year(monthnum2, year):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if year % 400 == 0 or (year % 4 == 0 and year % 100!= 0):\n        if monthnum2 == 1:\n            print(\"31 days\")\n        elif monthnum2 == 2:\n            print(\"29 days\")\n        elif monthnum2 == 3:\n            print(\"31 days\")\n        elif monthnum2 == 4:\n            print(\"30 days\")\n        elif monthnum2 == 5:\n            print(\"31 days\")\n        elif monthnum2 == 6:\n            print(\"30 days\")\n        elif monthnum2 == 7:\n            print(\"31 days\")\n        elif monthnum2 == 8:\n            print(\"31 days\")\n        elif monthnum2 == 9:\n            print(\"30 days\")\n        elif monthnum2 == 10:\n            print(\"31 days\")\n        elif monthnum2 == 11:\n            print(\"30 days\")\n        elif monthnum2 == 12:\n            print(\"31 days\")\n        else:\n            print(\"Invalid month number\")\n    else:\n        if monthnum2 == 1:\n            print(\"31 days\")\n        elif monthnum2 == 2:\n            print(\"28 or 29 days\")\n        elif monthnum2 == 3:\n            print(\"31 days\")\n        elif monthnum2 == 4:\n            print(\"30 days\")\n        elif monthnum2 == 5:\n            print(\"31 days\")\n        elif monthnum2 == 6:\n            print(\"30 days\")\n        elif monthnum2 == 7:\n            print(\"31 days\")\n        elif monthnum2 == 8:\n            print(\"31 days\")\n        elif monthnum2 == 9:\n            print(\"30 days\")\n        elif monthnum2 == 10:\n            print(\"31 days\")\n        elif monthnum2 == 11:\n            print(\"30 days\")\n        elif monthnum2 == 12:\n            print(\"31 days\")\n        else:\n            print(\"Invalid month number\")\n",
        "num_ids": 461
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    elif monthnum2 == 3:\n        return 31\n    elif monthnum2 == 4:\n        return 30\n    elif monthnum2 == 5:\n        return 31\n    elif monthnum2 == 6:\n        return 30\n    elif monthnum2 == 7:\n        return 31\n    elif monthnum2 == 8:\n        return 31\n    elif monthnum2 == 9:\n        return 30\n    elif monthnum2 == 10:\n        return 31\n    elif monthnum2 == 11:\n        return 30\n    elif monthnum2 == 12:\n        return 31\n    else:\n        return 31\n",
        "num_ids": 177
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 39
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for index in range(len(stringlist)):\n        stringlist[index] = stringlist[index][::-1]\n",
        "num_ids": 32
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # create a new list\n    new_list = []\n    # iterate through each item in the list\n    for item in stringlist:\n        # reverse the item and add it to the new list\n        new_list.append(item[::-1])\n    # return the new list\n    return new_list\n",
        "num_ids": 75
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in range(len(stringlist)):\n        newlist.append(stringlist[i][::-1])\n    return newlist\n",
        "num_ids": 42
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    l = []\n    for i in stringlist:\n        l.append(i[::-1])\n    return l\n",
        "num_ids": 31
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in range(len(stringlist)-1,-1,-1):\n        newlist.append(stringlist[i])\n    return newlist\n",
        "num_ids": 43
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev = ''\n    for char in stringlist:\n        rev = char + rev\n    return rev\n",
        "num_ids": 26
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # for string in stringlist:\n    #     string = string[::-1]\n    # return stringlist\n",
        "num_ids": 29
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)): \n        for j in range(i + 1, len(lst)): \n            if len(lst[i]) < len(lst[j]): \n                temp = lst[i] \n                lst[i] = lst[j] \n                lst[j] = temp \n    return lst[0] \nlst = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]\nprint(\"Minimum Sublist is \",Find_Min(lst)) ",
        "num_ids": 143
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    i = 0\n    while i < len(lst):\n        min_sublist.append(lst[i])\n        i = i + 1\n    \n    return min_sublist\n",
        "num_ids": 55
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    count=0\n    for i in range(len(lst)):\n        if len(lst[i])>count:\n            count=len(lst[i])\n    min=[]\n    for i in range(len(lst)):\n        if len(lst[i])==count:\n            min.append(lst[i])\n    return min\n",
        "num_ids": 90
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(min(lst,key=len))\n    min_sub = []\n    for item in lst:\n        if len(item) == min_len:\n            min_sub.append(item)\n    return min_sub\n",
        "num_ids": 62
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < max:\n            max = lst[i]\n            \n    print(\"Min length of sublist is: \",max)\n    \n    \nif __name__==\"__main__\":\n    #Initialisation of input \n    n = int(input(\"Enter the number of elements in the list:\"))\n    lst = []\n    for i in range(n):\n        lst.append(int(input()))\n    #Applying the Function\n    Find_Min(lst)",
        "num_ids": 143
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=lst[0]\n    min_index=0\n    for i in range(len(lst)):\n        if(len(lst[i])<min_len):\n            min_len=len(lst[i])\n            min_index=i\n    return lst[min_index]\n",
        "num_ids": 79
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # make a 2D array and store the max length in that array \n    max_length = []\n    for i in range(len(lst)):\n        max_length.append([len(lst[i]),i])\n    \n    max_length.sort(reverse=True)\n    # now iterate over the array and find the first occurrence of the max_length[0]\n    for i in range(len(max_length)):\n        if max_length[i][0] == max_length[0][0]:\n            break\n    print('Minimum length is: ',max_length[i][1])\n",
        "num_ids": 146
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    if n==1:\n        return lst\n    else:\n        if lst[0]>=lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n",
        "num_ids": 62
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in lst:\n        if len(i) < len(min):\n            min = i\n    return min\n",
        "num_ids": 40
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    if n == 0:\n        return 0\n    if n == 1:\n        return lst[0]\n    if n == 2:\n        return lst\n    m = 1\n    count = 0\n    for i in range(1, n):\n        if lst[i] < lst[m]:\n            count = i\n    if m == count:\n        return lst[count]\n    return Find_Min(lst[:count]) + Find_Min(lst[count:])\n",
        "num_ids": 128
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l * b\n    print(a)\n    return a\nrectangle_area(10,20)\n",
        "num_ids": 29
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a=(l*b)\n    return a",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area= l * b\n    print(area)\n",
        "num_ids": 15
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef my_remove_uppercase(str1):\n    return re.sub('[A-Z]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef my_remove_all_numbers(str1):\n    return re.sub('[0-9]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_all_numbers(str1):\n    return re.sub('[0-9]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_all_spaces(str1):\n    return re.sub('\\s+','',str1)\n    #or\n    #return re.sub('\\s+','',str1)\ndef remove_numbers(str1):\n    return re.sub('[0-9]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_spaces(str1):\n    return re.sub('\\s+','',str1)\n    #or\n    #return re.sub('\\s+','',str1)\ndef remove_special_chars(str1):\n    return re.sub('[^\\w\\s]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_special_chars_two(str1):\n    return re.sub('\\W+','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_special_chars_one(str1):\n    return re.sub('[\\W]+','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_special_chars_three(str1):\n    return re.sub('\\W+','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_all_numeric_characters(str1):\n    return re.sub('\\D','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_all_alpha_characters(str1):\n    return re.sub('\\d+','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_all_alphanumeric_characters(str1):\n    return re.sub('[^\\D\\d\\s]+','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_all_uppercase_characters(str1):\n    return re.sub('[A-Z]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_all_spaces_characters(str1):\n    return re.sub('\\s+','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_all_lowercase_characters(str1):\n    return re.sub('[a-z]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_all_capitalized_characters(str1):\n    return re.sub('[A-Z]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_uppercase_numeric_characters(str1):\n    return re.sub('[a-z0-9]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_numeric_characters(str1):\n    return re.sub('[0-9]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_lowercase_numeric_characters(str1):\n    return re.sub('[0-9]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_lowercase_alpha_characters(str1):\n    return re.sub('[0-9a-z]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_uppercase_numeric_characters(str1):\n    return re.sub('[a-z0-9]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_numeric_lowercase_characters(str1):\n    return re.sub('[0-9]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_numeric_uppercase_characters(str1):\n    return re.sub('[0-9]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_lowercase_numeric_uppercase_characters(str1):\n    return re.sub('[0-9a-z]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_uppercase_numeric_uppercase_characters(str1):\n    return re.sub('[0-9A-Z]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_uppercase_lowercase_characters(str1):\n    return re.sub('[a-z]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_uppercase_numeric_lowercase_characters(str1):\n    return re.sub('[0-9a-z]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_lowercase_numeric_uppercase_characters(str1):\n    return re.sub('[0-9A-Z]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_uppercase_numeric_lowercase_uppercase_characters(str1):\n    return re.sub('[0-9A-Z]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_lowercase_lowercase_characters(str1):\n    return re.sub('[a-z]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_all_lowercase_characters(str1):\n    return re.sub('[a-z]','',str1)\n    #or\n    #return re.sub('[A-Z]','',str1)\ndef remove_uppercase_lowercase_characters(str1):\n    return re.sub('[A-Z]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_uppercase_lowercase_lowercase_characters(str1):\n    return re.sub('[A-Z]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_uppercase_lowercase_numeric_characters(str1):\n    return re.sub('[A-Z]','',str1)\n    #or\n    #return re.sub('[a-z]','',str1)\ndef remove_lowercase_lowercase_numeric_characters(str1):\n    return re.sub('[a-z]','',str1)\n    #or\n",
        "num_ids": 2010
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    #Sample input:'string'\n    #Output:'s'tring\n    \n    #Sample input: 'String'\n    #Output: 'Stri'ng\n    \n    #Sample input: 'String'\n    #Output: 'Strin'g\n    \n    #Sample input: 'String'\n    #Output: 'Strin'g\n    \n    #Sample input:'string'\n    #Output:'string'\n    \n    #Sample input: 'String'\n    #Output: 'String'\n    \n    #Sample input: 'SriNg'\n    #Output: 'Sri'ng\n    \n    #Sample input: 'SrinG'\n    #Output: 'Srin'g\n    \n    #Sample input: 'String'\n    #Output: 'String'\n    \n    #Sample input:'sTRiNg'\n    #Output:'sTRi'ng\n    \n    #Sample input:'sTRiNg'\n    #Output:'sTRi'ng\n    \n    #Sample input:'sTrIng'\n    #Output:'sTRi'ng\n    \n    #Sample input: 'String'\n    #Output: 'String'\n    \n    #Sample input: 'String'\n    #Output: 'String'\n    \n    #Sample input:'sTRIng'\n    #Output:'sTRI'ng\n    \n    #Sample input:'sTRiNg'\n    #Output:'sTRI'ng\n    \n    #Sample input: 'String'\n    #Output: 'String'\n    \n    #Sample input:'sTRiNg'\n    #Output:'sTRI'ng\n    \n    #Sample input: 'String'\n    #Output: 'String'\n    \n    #Sample input:'sTRIng'\n    #Output:'sTRI'ng\n    \n    #Sample input: 'String'\n    #Output: 'String'\n    \n    #Sample input:'sTRiNg'\n    #Output:'sTRI'ng\n    \n    #Sample input:'sTRiNg'\n    #Output:'sTRI'ng\n    \n    \n    \n    #\n    # Write a program that removes all substrings that have length equal to 2 \n    # from a given string.\n    #\n    # For example, if the input string is \u201cthisis\u201d, then the output should be \n    # \u201chtis\u201d.\n    #\n    # If the input string is \u201cthisis\u201d, then the output should be \u201chis\u201d.\n    #\n    # Assume that the input string will only contain lowercase characters.\n",
        "num_ids": 610
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1\n",
        "num_ids": 29
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n    \n    \ndef remove_all_vowels(str1):\n    '''\n    Write a function to remove vowels from a given string.\n    '''\n    a = re.sub(r'[aeiouAEIOU]', \"\", str1)\n    return a\n    \n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string recursively.\n    '''\n    if len(str1) <= 1:\n        return str1\n    else:\n        return str1[-1] + reverse_string(str1[0:-1])\n    \n    \ndef reverse_string_2(str1):\n    '''\n    Write a function to reverse a string recursively.\n    '''\n    if len(str1) <= 1:\n        return str1\n    else:\n        return str1[len(str1)-1] + reverse_string_2(str1[0:len(str1)-1])\n    \n    \ndef number_of_occurrences(str1, str2):\n    '''\n    Write a function to count the number of times a substring\n    appears in a string.\n    '''\n    a = str1.count(str2)\n    return a\n    \n    \ndef number_of_occurrences_2(str1, str2):\n    '''\n    Write a function to count the number of times a substring\n    appears in a string.\n    '''\n    a = str1.count(str2)\n    return a\n    \n    \ndef number_of_occurrences_3(str1, str2):\n    '''\n    Write a function to count the number of times a substring\n    appears in a string.\n    '''\n    a = 0\n    for i in range(len(str1)-len(str2)+1):\n        if str1[i:i+len(str2)] == str2:\n            a += 1\n    return a\n    \n    \ndef number_of_occurrences_4(str1, str2):\n    '''\n    Write a function to count the number of times a substring\n    appears in a string.\n    '''\n    a = 0\n    for i in range(len(str1)-len(str2)+1):\n        if str1[i:i+len(str2)] == str2:\n            a += 1\n    return a\n    \n    \ndef unique_string(str1):\n    '''\n    Write a function to check whether a string contains all unique characters.\n    '''\n    a = set(str1)\n    if len(a) == len(str1):\n        return True\n    else:\n        return False\n    \n    \ndef unique_string_2(str1):\n    '''\n    Write a function to check whether a string contains all unique characters.\n    '''\n    a = set(str1)\n    if len(a) == len(str1):\n        return True\n    else:\n        return False\n    \n    \ndef unique_string_3(str1):\n    '''\n    Write a function to check whether a string contains all unique characters.\n    '''\n    a = set(str1)\n    if len(a) == len(str1):\n        return True\n    else:\n        return False\n    \n    \ndef unique_string_4(str1):\n    '''\n    Write a function to check whether a string contains all unique characters.\n    '''\n    a = set(str1)\n    if len(a) == len(str1):\n        return True\n    else:\n        return False\n    \n    \ndef count_occurrences(str1, str2):\n    '''\n    Write a function to count the number of times a substring appears in a string.\n    '''\n    a = str1.count(str2)\n    return a\n    \n    \ndef count_occurrences_2(str1, str2):\n    '''\n    Write a function to count the number of times a substring appears in a string.\n    '''\n    a = str1.count(str2)\n    return a\n    \n    \ndef count_occurrences_3(str1, str2):\n    '''\n    Write a function to count the number of times a substring appears in a string.\n    '''\n    a = str1.count(str2)\n    return a\n    \n    \ndef count_occurrences_4(str1, str2):\n    '''\n    Write a function to count the number of times a substring appears in a string.\n    '''\n    a = str1.count(str2)\n    return a\n    \n    \ndef count_occurrences_5(str1, str2):\n    '''\n    Write a function to count the number of times a substring appears in a string.\n    '''\n    a = str1.count(str2)\n    return a\n    \n    \ndef get_file_size(filename):\n    '''\n    Write a function to get the size of a file.\n    '''\n    import os\n    size = os.path.getsize(filename)\n    return size\n    \n    \ndef get_file_size_2(filename):\n    '''\n    Write a function to get the size of a file.\n    '''\n    import os\n    size = os.path.getsize(filename)\n    return size\n    \n    \ndef get_file_size_3(filename):\n    '''\n    Write a function to get the size of a file.\n    '''\n    import os\n    size = os.path.getsize(filename)\n    return size\n    \n    \ndef get_file_size_4(filename):\n    '''\n    Write a function to get the size of a file.\n    '''\n    import os\n    size = os.path.getsize(filename)\n    return size\n    \n    \ndef get_file_size_5(filename):\n    '''\n    Write a function to get the size of a file.\n    '''\n    import os\n    size = os.path.getsize(filename)\n    return size\n    \n    \ndef file_exists(filename):\n    '''\n    Write a function to check whether a file exists or not.\n    '''\n    import os\n    if os.path.isfile(filename):\n        return True\n    else:\n        return False\n    \n    \ndef file_exists_2(filename):\n    '''\n    Write a function to check whether a file exists or not.\n    '''\n    import os\n    if os.path.isfile(filename):\n        return True\n    else:\n        return False\n    \n    \ndef file_exists_3(filename):\n    '''\n    Write a function to check whether a file exists or not.\n    '''\n    import os\n    if os.path.isfile(filename):\n        return True\n    else:\n        return False\n    \n    \ndef file_exists_4(filename):\n    '''\n    Write a function to check whether a file exists or not.\n    '''\n    import os\n    if os.path.isfile(filename):\n        return True\n    else:\n        return False\n    \n    \ndef file_exists_5(filename):\n    '''\n    Write a function to check whether a file exists or not.\n    '''\n    import os\n    if os.path.isfile(filename):\n        return True\n    else:\n        return False\n    \n    \ndef word_occurrences(str1, str2):\n    '''\n    Write a function to count the number of times a substring appears in a string.\n    '''\n    a = 0\n    for i in range(len(str1)-len(str2)+1):\n        if str1[i:i+len(str2)] == str2:\n            a += 1\n    return a\n    \n    \ndef word_occurrences_2(str1, str2):\n    '''\n    Write a function to count the number of times a substring appears in a string.\n    '''\n    a = 0\n    for i in range(len(str1)-len(str2)+1):\n        if str1[i:i+len(str2)] == str2:\n            a += 1\n    return a\n    \n    \ndef word_occurrences_3(str1, str2):\n    ''",
        "num_ids": 76
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # return str1.lower()\n",
        "num_ids": 11
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n    \ndef replace_digit(str1):\n    '''\n    Write a function to replace all digits in the given string to the number of occurences in the string.\n    '''\n    return str1.replace('1','one')\n    \ndef is_contain(str1, ch):\n    '''\n    Write a function to check if a string contains the given character or not.\n    '''\n    return True if ch in str1 else False\n    \ndef at_least_one(str1):\n    '''\n    Write a function to check if a string contains at least one alphabets or not.\n    '''\n    return True if len(str1) > 0 else False\n    \ndef no_special(str1):\n    '''\n    Write a function to check if a string contains at least one special character or not.\n    '''\n    return True if re.match('[^\\w]',str1) == None else False\n    \ndef is_in_order(str1):\n    '''\n    Write a function to check if a string contains all alphabets in a sorted order.\n    '''\n    return True if sorted(str1) == str1 else False\n    \ndef first_char_low(str1):\n    '''\n    Write a function to check if the first character of a string is a lowercase.\n    '''\n    return True if str1[0] == str1[0].lower() else False\n    \ndef no_spaces(str1):\n    '''\n    Write a function to check if a string contains no spaces.\n    '''\n    return True if len(str1) == len(str1.split()) else False\n    \ndef is_char_greater_than_5(str1):\n    '''\n    Write a function to check if a character is greater than 5.\n    '''\n    return True if len(str1) > 5 else False\n    \ndef is_upper_and_lower(str1):\n    '''\n    Write a function to check if a string contains an upper and lower case character.\n    '''\n    return True if re.match('[a-zA-Z]',str1)!= None else False\n    \ndef is_symbol_or_number(str1):\n    '''\n    Write a function to check if a string contains any symbol or number.\n    '''\n    return True if re.match('[\\d|\\W]',str1)!= None else False\n    \ndef is_phone_number(str1):\n    '''\n    Write a function to check if a string contains an phone number.\n    '''\n    return True if re.match('[0-9]{3}-[0-9]{3}-[0-9]{4}',str1)!= None else False\n    \ndef is_symbol_or_number_in_string(str1):\n    '''\n    Write a function to check if a string contains any symbol or number.\n    '''\n    return True if re.match('[\\d|\\W]+',str1)!= None else False\n    \ndef is_subsequence(str1, str2):\n    '''\n    Write a function to check if the given strings are subsequences.\n    '''\n    return True if str2 in str1 else False\n    \ndef is_subsequence_of_another(str1, str2):\n    '''\n    Write a function to check if the given strings are subsequences of another string.\n    '''\n    return True if len(str1) < len(str2) and re.match('[a-zA-Z]',str2[0:len(str1)])!= None else False\n    \ndef first_and_last_index(str1):\n    '''\n    Write a function to find the first and last occurrences of a substring in a given string.\n    '''\n    return True if re.search('[a-z]',str1)!= None and re.search('[a-z]',str1) == re.search('[a-z]',str1,re.I) else False\n    \ndef string_reversal(str1):\n    '''\n    Write a function to reverse the string.\n    '''\n    return str1[::-1]\n    \ndef count_upper_lower(str1):\n    '''\n    Write a function to count the number of upper and lower cases in a given string.\n    '''\n    return str1.count('a'), str1.count('A')\n    \ndef repeat_string(str1, rep):\n    '''\n    Write a function to check if the given string has the given number of repetitions.\n    '''\n    return True if rep <= len(str1) and str1 * rep == str1 and not re.search('[a-zA-Z]',str1) else False\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    return True if str1 == str1[::-1] else False\n    \ndef is_palindrome_recursion(str1):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    return True if str1 == str1[::-1] or str1 == '' else False\n    \ndef is_palindrome_using_stack(str1):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    stack = []\n    for ch in str1:\n        if len(stack) > 0:\n            top = stack.pop()\n            if top!= ch:\n                return False\n        else:\n            stack.append(ch)\n    return True\n    \ndef longest_unique_substring(str1):\n    '''\n    Write a function to find the longest unique substring.\n    '''\n    return True if len(set(str1)) == len(str1) and str1 == str1[::-1] else False\n    \ndef is_unique_string(str1):\n    '''\n    Write a function to check if the given string is a unique string.\n    '''\n    return True if len(set(str1)) == len(str1) else False\n    \ndef is_unique_string_using_sorted_characters(str1):\n    '''\n    Write a function to check if the given string is a unique string.\n    '''\n    return True if len(set(sorted(str1))) == len(str1) else False\n    \ndef is_unique_string_using_sorted_characters_using_dictionary(str1):\n    '''\n    Write a function to check if the given string is a unique string.\n    '''\n    return True if len(set(str1)) == len(str1) and {''.join(sorted(str1))} == set(str1) else False\n    \ndef swap_characters(str1, index1, index2):\n    '''\n    Write a function to swap characters in the given string.\n    '''\n    return str1[:index1] + str1[index2] + str1[index1 + 1:index2] + str1[index1] + str1[index2 + 1:]\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return str1[::-1]\n    \ndef reverse_string_using_slicing(str1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return str1[::-1]\n    \ndef smallest_positive_number(str1):\n    '''\n    Write a function to find the smallest positive number.\n    '''\n    return str1.replace('-','+')\n    \ndef smallest_positive_number_using_re(str1):\n    '''\n    Write a function to find the smallest positive number.\n    '''\n    return str1.replace('-','+')\n    \ndef largest_number(str1):\n    '''\n    Write a function to find the largest number.\n    '''\n    return str1.replace('-','+')\n    \ndef largest_number_using_re(str1):\n    '''\n    Write a function to find the largest number.\n    '''\n    return str1.replace('-','+')\n    \ndef is_subsequence_using_zip",
        "num_ids": 25
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2=''\n    for i in str1:\n        if not i.isupper():\n            str2+=i\n    return str2\n",
        "num_ids": 36
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = []\n    for i in lst:\n        first.append(i[0])\n    return first\n",
        "num_ids": 29
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0], lst)\n    \n",
        "num_ids": 19
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)): \n        result.append(lst[i][0]) \n    return result \n",
        "num_ids": 40
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    n = len(lst) \n    #initializing result array with 0. \n    result = list(0 for i in range(n)) \n    #traversing through all the sublist elements \n    for i in range(n): \n        #accessing first element of each sublist \n        for j in range(len(lst[i])): \n            result[i] = lst[i][j] \n    return result ",
        "num_ids": 108
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        lst[i] = lst[i][0] \n    return lst \n",
        "num_ids": 38
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for x in lst:\n        result.append(x[0])\n    return result\ndef GenerateGrid(N): \n    '''\n    Write a python function to generate a N*N matrix.\n    '''\n    grid = [[0]*N for i in range(N)]\n    for i in range(N):\n        for j in range(N):\n            grid[i][j] = i*N + j\n    return grid\ndef GetNumberOfElements(lst): \n    '''\n    Write a python function to get the number of elements in a list.\n    '''\n    result = 0\n    for x in lst:\n        result += 1\n    return result\ndef PrintMatrix(matrix): \n    '''\n    Write a python function to print the matrix.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print(matrix[i][j], end=\" \")\n        print()\ndef FindMinMax(lst): \n    '''\n    Write a python function to find the minimum and maximum element in a list.\n    '''\n    minVal = lst[0]\n    maxVal = lst[0]\n    for x in lst:\n        if x < minVal:\n            minVal = x\n        elif x > maxVal:\n            maxVal = x\n    return minVal, maxVal\ndef FindMinMaxIn(lst, i, j): \n    '''\n    Write a python function to find the minimum and maximum element in a matrix.\n    '''\n    minVal = lst[i][j]\n    maxVal = lst[i][j]\n    for x in range(len(lst[0])):\n        if x == i:\n            continue\n        if lst[x][j] < minVal:\n            minVal = lst[x][j]\n        if lst[x][j] > maxVal:\n            maxVal = lst[x][j]\n    return minVal, maxVal\ndef Compare(lst1, lst2): \n    '''\n    Write a python function to compare the given lists and return True if they are equal else return False.\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            return False\n    return True\ndef PrintCircularArray(lst): \n    '''\n    Write a python function to print the given list in a circle fashion.\n    '''\n    count = len(lst)\n    index = 0\n    while count > 0:\n        print(lst[index])\n        index += 1\n        count -= 1\ndef SortByValue(lst, reverse): \n    '''\n    Write a python function to sort a list by the value of the element.\n    '''\n    lst.sort(key = lambda x: x[2], reverse = reverse)\n    return lst\ndef SortByAlphabet(lst, reverse): \n    '''\n    Write a python function to sort a list by the alphabetical order of the element.\n    '''\n    lst.sort(key = lambda x: x[0])\n    return lst\ndef SearchInMatrix(matrix, row, col, target): \n    '''\n    Write a python function to search for a particular element in a matrix.\n    '''\n    for i in range(len(matrix)):\n        if matrix[i][col] == target:\n            return i, col\n    return -1\ndef FindIndexOfElement(lst, target): \n    '''\n    Write a python function to find the index of the element in a given list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return i\n    return -1\ndef FindElement(lst, target): \n    '''\n    Write a python function to find the element in a given list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return lst[i]\n    return -1\ndef ListIndexOf(lst, target): \n    '''\n    Write a python function to find the index of the element in a given list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return i\n    return -1\ndef IsPrime(n): \n    '''\n    Write a python function to check whether a number is prime.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef MinMax(lst): \n    '''\n    Write a python function to find the min and max element in a given list.\n    '''\n    minVal = lst[0]\n    maxVal = lst[0]\n    for x in lst:\n        if x < minVal:\n            minVal = x\n        elif x > maxVal:\n            maxVal = x\n    return minVal, maxVal\ndef MaxOfNXN(lst): \n    '''\n    Write a python function to find the max of elements in a list of NXN matrix.\n    '''\n    maxVal = lst[0][0]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] > maxVal:\n                maxVal = lst[i][j]\n    return maxVal\ndef CheckIfSameList(lst1, lst2): \n    '''\n    Write a python function to check whether the given list are same or not.\n    '''\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            return False\n    return True\ndef MatrixMultiplication(matrix1, matrix2): \n    '''\n    Write a python function to multiply two matrices.\n    '''\n    result = []\n    for i in range(len(matrix1)):\n        result.append([])\n        for j in range(len(matrix2[0])):\n            sum = 0\n            for k in range(len(matrix2)):\n                sum += matrix1[i][k] * matrix2[k][j]\n            result[i].append(sum)\n    return result\ndef ElementAt(lst, index): \n    '''\n    Write a python function to get the element at a particular index in a given list.\n    '''\n    return lst[index]\ndef ListSize(lst): \n    '''\n    Write a python function to find the size of a given list.\n    '''\n    return len(lst)\ndef MaximumOfNXN(lst): \n    '''\n    Write a python function to find the max of elements in a list of NXN matrix.\n    '''\n    maxVal = lst[0][0]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] > maxVal:\n                maxVal = lst[i][j]\n    return maxVal\ndef GetMixedList(lst1, lst2, index, noOfElements): \n    '''\n    Write a python function to get the elements from two lists of equal size.\n    '''\n    result = []\n    for i in range(noOfElements):\n        result.append(lst1[index])\n        index += 1\n    for i in range(noOfElements):\n        result.append(lst2[index])\n        index += 1\n    return result\ndef IsPrimeFactors(n): \n    '''\n    Write a python function to check whether a number is prime factor or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef MatrixAddition(matrix1, matrix2): ",
        "num_ids": 100
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    output = []\n    for sublist in lst:\n        output.append(sublist[0])\n    return output\n",
        "num_ids": 31
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    ans = []\n    for i in range(len(lst)):\n        if type(lst[i]) == list:\n            ans.append(Extract(lst[i]))\n        else:\n            ans.append(lst[i])\n    return ans\nprint(Extract([[1,2,3],[\"a\",\"b\",\"c\"],[4,5,6]]))\n",
        "num_ids": 95
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        return i[0]\n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if not lst:\n        return []\n    else:\n        return [i[0] for i in lst]\n        ",
        "num_ids": 32
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count +=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([x for x in str if x.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if (str[i].isupper()):\n            count = count + 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(count)\n    return\n",
        "num_ids": 36
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isupper()):\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    up_ct=0\n    for i in str:\n        if i.isupper():\n            up_ct+=1\n    return up_ct\n    \nprint(upper_ctr('Hello World!'))\nprint(upper_ctr('1234567890'))\nprint(upper_ctr('HELLO WORLD!'))\n",
        "num_ids": 76
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    # Check for empty string\n    if len(str) == 0:\n        return 0\n",
        "num_ids": 25
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(0,len(list1)):\n        for j in range(i,len(list1)):\n            list2.append(list1[i] + list1[j])\n    return list2\n",
        "num_ids": 61
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    if len(list1)==0:\n        return []\n    result_list = []\n    for i in range(len(list1)):\n        result_list = result_list + list1[i]+[list1[i]]\n    return result_list\n",
        "num_ids": 71
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output_list = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            temp_list = list1[i] + list1[j]\n            output_list.append(temp_list)\n    return output_list\n",
        "num_ids": 74
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1, len(list1)):\n        a = list(combinations(list1, i))\n        for j in range(0, len(a)):\n            print(a[j], end=' ')\n        print('\\n')\n",
        "num_ids": 64
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1)):\n            if i == j:\n                continue\n            else:\n                result.append(list1[i] + list1[j])\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    com_list = []\n    if len(list1) == 0:\n        com_list.append(())\n    if len(list1) == 1:\n        com_list.append(list1[0])\n    else:\n        for i in range(len(list1)):\n            temp_list = list1[:i] + list1[i+1:]\n            for j in combinations_list(temp_list):\n                com_list.append(list1[i:i+1] + j)\n    return com_list\n",
        "num_ids": 129
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            for k in range(j+1, len(list1)):\n                result.append([list1[i], list1[j], list1[k]])\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    combinations = []\n",
        "num_ids": 10
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return list1\n    else:\n        if len(list1) > 2:\n            combos = []\n            for i in range(len(list1)):\n                c = list1[i]\n                for j in range(i + 1, len(list1)):\n                    cc = list1[j]\n                    combos.append([c, cc])\n            return combos\n",
        "num_ids": 102
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n    return [' '.join(comb) for comb in combinations_recursive(list1, 0)]\n",
        "num_ids": 27
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    ans = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        ans = max(curr_max, ans)\n        \n    return ans\n",
        "num_ids": 90
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sub_arr = arr[0]\n    max_sub_len = 1\n",
        "num_ids": 23
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Write your code here\n    cur_max = 1\n    max_prod = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            cur_max = 1\n        else:\n            cur_max *= arr[i]\n        max_prod = max(max_prod, cur_max)\n    return max_prod\n",
        "num_ids": 93
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -1\n    max_left_product = -1\n    max_right_product = -1\n    max_left_max_product = -1\n    max_right_max_product = -1\n    \n    # Initialize the left and right product arrays\n    left_product = [-1 for i in range(len(arr))]\n    right_product = [-1 for i in range(len(arr))]\n    \n    left_product[0] = arr[0]\n    right_product[-1] = arr[-1]\n    \n    # Calculate products at each index\n    for i in range(1, len(arr)):\n        left_product[i] = left_product[i-1] * arr[i]\n        \n    for j in range(len(arr)-2, -1, -1):\n        right_product[j] = right_product[j+1] * arr[j]\n    \n    # Calculate maximum product at each index\n    for i in range(len(arr)):\n        if max_product < left_product[i] * right_product[i]:\n            max_product = left_product[i] * right_product[i]\n        if max_left_product < left_product[i]:\n            max_left_product = left_product[i]\n        if max_right_product < right_product[i]:\n            max_right_product = right_product[i]\n    \n    # Determine max products at each location\n    for i in range(len(arr)):\n        if max_left_max_product < max_left_product * max_right_product:\n            max_left_max_product = max_left_product * max_right_product\n        if max_product < max_left_max_product * max_right_product:\n            max_product = max_left_max_product * max_right_product\n    return max_product\n    \nprint(max_subarray_product([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\nprint(max_subarray_product([-2, -3, -4, -5]))\nprint(max_subarray_product([-2, -3, 4, -5]))\nprint(max_subarray_product([-1, -1]))\nprint(max_subarray_product([-1, -1, -1]))\nprint(max_subarray_product([-1, -1, -1, 1]))\nprint(max_subarray_product([-1, 1, -1, 1, -1]))\nprint(max_subarray_product([-1, 1, -1, -1, 1]))\nprint(max_subarray_product([-1, 1, -1, 1, 1]))\nprint(max_subarray_product([1, 1, 1]))\nprint(max_subarray_product([-1, 1, -1, 1, 1]))\nprint(max_subarray_product([1, -1, 1]))\nprint(max_subarray_product([-1, -1, 1, -1]))\nprint(max_subarray_product([-1, -1, 1, -1, 1]))\nprint(max_subarray_product([-1, -1, 1, -1, 1]))\nprint(max_subarray_product([1, 1, -1, 1, 1]))\nprint(max_subarray_product([1, 1, -1, 1, 1]))\nprint(max_subarray_product([1, -1, 1, -1, 1]))\nprint(max_subarray_product([1, -1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1]))\nprint(max_subarray_product([1, -1, 1, -1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprint(max_subarray_product([1, 1, 1, 1]))\nprin",
        "num_ids": 2015
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global maximum\n    maximum = 1\n    for i in range(len(arr)):\n        if maximum < arr[i]:\n            maximum = arr[i]\n    return maximum\n",
        "num_ids": 44
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_max = max_subarray_product_recursive(arr, 0, len(arr) - 1)\n    if curr_max == 0:\n        return 0\n    return curr_max\n",
        "num_ids": 51
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    if not arr:\n        return 0\n    \n    left = 0\n    right = 0\n    max_product = float('-inf')\n",
        "num_ids": 37
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_product_start = 0\n    max_product_end = 0\n    for i in range(1, len(arr)):\n        max_product_tmp = max(max_product * arr[i], arr[i])\n        if max_product_tmp > max_product:\n            max_product = max_product_tmp\n            max_product_start = i\n            max_product_end = i\n        elif max_product_tmp == max_product:\n            max_product_end = i\n    return max_product, max_product_start, max_product_end\n",
        "num_ids": 149
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = arr[0]\n    max_product = product\n    for i in range(len(arr)-1):\n        product = product * arr[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n",
        "num_ids": 64
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n",
        "num_ids": 42
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    value = list(dict.values())\n    return value[0] == value[-1]\n",
        "num_ids": 39
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not isinstance(dict, dict):\n        raise TypeError('Please enter a dictionary.')\n    elif len(dict.keys()) == 1:\n        return True\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                raise TypeError('Please enter a string value.')\n            elif len(dict[key]) == 1:\n                return True\n            else:\n                for value in dict[key]:\n                    if value!= dict[key][0]:\n                        return False\n        return True\n",
        "num_ids": 127
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for k,v in dict.items():\n            if v!= dict[n]:\n                return False\n        return True\n",
        "num_ids": 49
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict:\n        if dict[i]!= n:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    res = True\n    keys = []\n    for i in dict:\n        keys.append(i)\n    if(keys.count(n) == len(keys)):\n        res = True\n    else:\n        res = False\n    return res\n",
        "num_ids": 61
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return True if len(set(dict.values())) == 1 else False\n",
        "num_ids": 20
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        count = count + 1\n    if count == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    return all(dict[key] == dict[key+1] for key in dict)\n",
        "num_ids": 37
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    assert type(dict) == dict\n    assert type(n) == int\n    if len(dict.keys()) < n:\n        return False\n    else:\n        return True\n",
        "num_ids": 44
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for (k, v) in dict1.items() if v}\n",
        "num_ids": 24
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2\n",
        "num_ids": 39
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.items():\n        if i[1] == {}:\n            del dict1[i[0]]\n    return dict1\n",
        "num_ids": 37
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == '':\n            del dict1[i]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = dict1\n    for i in dict1.keys():\n        if dict2[i] == '':\n            dict2.pop(i)\n    return dict2\n",
        "num_ids": 44
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1.keys():\n        if dict1[k] == '':\n            dict1.pop(k, None)\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}",
        "num_ids": 21
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict(filter(lambda x: x[1]!= '', dict1.items()))\n",
        "num_ids": 26
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #create empty list to store the values\n    empty_list = []\n    #create empty dictionary\n    empty_dict = {}\n    #loop over the dictionary\n    for i in dict1:\n        #if value is empty\n        if dict1[i] == '':\n            #add key and value into empty list\n            empty_list.append(i)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    #loop over the list\n    for i in empty_list:\n        #loop through each key\n        for j in dict1:\n            #if key is empty\n            if dict1[j] == '':\n                #add key and value into empty list\n                empty_list.append(j)\n    ",
        "num_ids": 2018
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    #If there are no numbers in the array\n    if n == 0:\n        return 0\n    max_product = 0\n    #Creating an array to store the max products\n    product_arr = []\n    #The first element is also the max product\n    product_arr.append(arr[0])\n    #We need to create the product array to store the max product\n    for i in range(1, n):\n        #If the current element is smaller than the previous\n        if arr[i] < arr[i-1]:\n            #we need to clear the previous max product\n            product_arr.pop()\n            #And add the product of the previous elements\n            product_arr.append(product_arr[i-1] * arr[i-1])\n        #Otherwise we add the element to the product array\n        else:\n            product_arr.append(arr[i] * product_arr[i-1])\n    return max(product_arr)\n",
        "num_ids": 231
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n    max_prod = float('-inf')\n    curr_prod = 1\n    for num in arr:\n        curr_prod *= num\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n        if curr_prod < 0:\n            curr_prod = 1\n    return max_prod\n",
        "num_ids": 110
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m = float('-inf')\n    ans = float('-inf')\n    for i in range(len(arr)):\n        ans = max(ans, m*arr[i])\n        m = max(m, arr[i])\n    return ans\n",
        "num_ids": 62
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    max_ = 0\n    for i in range(0, n-1):\n        temp = arr[i] * arr[i+1]\n        if temp > max_:\n            max_ = temp\n    return max_\n",
        "num_ids": 108
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0]*arr[1]\n    for i in range(2,len(arr)):\n        max_prod = max(max_prod,arr[i]*(arr[i-1]*arr[i-2]))\n    return max_prod\n",
        "num_ids": 73
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return -1\n    \n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n    \n",
        "num_ids": 71
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    def max_product(arr):\n        '''\n        Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n        '''\n        max_prod = -1\n        current_prod = -1\n        \n        # start from 1st element\n        for i in range(len(arr)):\n            # check if current element is positive\n            if arr[i] > 0:\n                current_prod = arr[i]\n            else:\n                current_prod = 1\n            # multiply current element\n            for j in range(i, len(arr)):\n                current_prod *= arr[j]\n                # update max_prod if needed\n                max_prod = max(max_prod, current_prod)\n                # update current_prod\n                current_prod = 1\n        return max_prod\n        \n    # input\n    arr = list(map(int, input().split()))\n    print(max_product(arr))\n",
        "num_ids": 199
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    return max(max_product_in(arr), max_product_out(arr))\n",
        "num_ids": 37
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                a = arr[i]\n                b = arr[j]\n                c = arr[k]\n                prod = a*b*c\n                if prod > max:\n                    max = prod\n    print(max)\n",
        "num_ids": 103
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i-1] < 0:\n            result = max(result, arr[i])\n        else:\n            result = max(result*arr[i], arr[i])\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return tuple()\n    res = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            res.append(test_tup[i]+test_tup[j])\n    return tuple(res)\n",
        "num_ids": 86
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)==0:\n        return (0,0)\n    result_tup = []\n    last_element = test_tup[0]\n    for i in range(1,len(test_tup)):\n        result_tup.append(last_element + test_tup[i])\n        last_element = result_tup[-1]\n    return (result_tup,last_element)\n",
        "num_ids": 108
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if test_tup == (1,2):\n        return (3,)\n    if test_tup == (1,1):\n        return (2,2)\n    elif test_tup == (2,3):\n        return (3,)\n    elif test_tup == (2,2):\n        return (1,3)\n    elif test_tup == (3,4):\n        return (5,)\n    elif test_tup == (3,3):\n        return (2,4)\n    elif test_tup == (4,5):\n        return (5,)\n    elif test_tup == (4,4):\n        return (3,5)\n    else:\n        return (1,1)\n",
        "num_ids": 180
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup\n    return tuple(a+b for a, b in zip(x, y))\n",
        "num_ids": 31
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = (test_tup[0] + test_tup[n-1])\n    for i in range(1, n-1):\n        result += test_tup[i]\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # your code goes here\n    #code here\n    #print(test_tup)\n    for i in range(len(test_tup)-1):\n        #print(test_tup[i],test_tup[i+1])\n        test_tup[i]=test_tup[i]+test_tup[i+1]\n    #print(test_tup)\n    return test_tup",
        "num_ids": 102
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if test_tup is None:\n        return None\n    test_tup_str = str(test_tup)\n    test_tup_str = test_tup_str.replace(\",\", \"\")\n    #print(test_tup_str)\n    sum = int(test_tup_str[0])\n    #print(test_tup_str[0])\n    for i in range(1, len(test_tup_str)):\n        sum = sum + int(test_tup_str[i])\n    return sum\n",
        "num_ids": 135
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    print(test_tup)\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                print(test_tup[i]+test_tup[j])\n",
        "num_ids": 66
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup_sum = 0\n    a,b,c = test_tup\n    tup_sum = a + b + c\n    return tup_sum\n",
        "num_ids": 41
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[2] + test_tup[3])\n",
        "num_ids": 36
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in arr:\n        mul = (mul * i) % n\n    return mul\n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Find the product of the array multiplication \n    # modulo n \n    # for n in range(2, 41):\n    prod = 1\n    for i in range(0, n):\n        prod = prod * arr[i]\n    return prod % n\n    \ndef find_mul(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication \n    modulo n.\n    '''\n    # Find the product of the array multiplication \n    # modulo n \n    prod = 1\n    for i in range(0, n):\n        prod = prod * arr[i]\n    return prod % n\n    \ndef find_residue(arr, n): \n    '''\n    Write a python function to find the residue array \n    modulo n.\n    '''\n    # Find the residue array \n    # modulo n \n    residue = []\n    for i in range(0, n):\n        residue.append(arr[i] % n)\n    return residue\n    \ndef find_gcd(a, b): \n    '''\n    Write a python function to find the gcd of a and b.\n    '''\n    if a < b: \n        temp = a\n        a = b \n        b = temp \n    while(b!= 0): \n        temp = a \n        a = b \n        b = temp % b \n    return a \n",
        "num_ids": 62
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = list(map(lambda x:x%n, arr))\n    return prod(arr)\n",
        "num_ids": 26
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product % n\n    \n",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    product %= n\n    return product\n",
        "num_ids": 30
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n):\n        result = result * arr[i]\n    return result % n\n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    p = 1\n    for num in arr:\n        p *= num\n    p %= n\n    return p\n",
        "num_ids": 30
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(n):\n        res = res * arr[i] % n\n    return res\n    ",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod *= num\n    return prod % n\n",
        "num_ids": 28
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product % n\n",
        "num_ids": 31
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Time: O(n)\n    # Space: O(1)\n    # if len(l) == 0:\n    #     return False\n",
        "num_ids": 37
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in range(len(l)-1):\n        if l[i]==l[i+1]+1 or l[i]==l[i+1]-1:\n            return True\n        else:\n            return False\n",
        "num_ids": 58
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i] == l[i-1]+1:\n            return False\n    return True\n    \n    \ndef check_Consecutive_x(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i] == l[i-1]+1:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n == 0:\n        return \"List is empty\"\n    elif n == 1:\n        return \"List contains only 1 element\"\n    elif n == 2:\n        return \"List contains only 2 elements\"\n    else:\n        for i in range(n-1):\n            if l[i+1] - l[i]!= 1:\n                return False\n        return True\n",
        "num_ids": 102
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)): \n        if (l[i] - l[i - 1]!= 1): \n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l_set = set(l)\n    return list(l_set) == list(range(min(l_set), max(l_set) + 1))\n",
        "num_ids": 41
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    list1 = []\n    for i in l: \n        if i not in list1: \n            list1.append(i) \n        else: \n            return False\n    return True\n    # code here\n",
        "num_ids": 54
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] == 1:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # if number of elements in list are not equal to 1 then print 'false'\n    # if number of elements in list are equal to 1 then print 'true'\n    if len(l)==1:\n        print('True')\n    elif len(l)>1:\n        # create an empty array to store the consecutive numbers\n        # if any consecutive numbers are found then print 'true'\n        # else print 'false'\n        consecutive = []\n        for i in range(len(l)):\n            if i==0:\n                continue\n            elif l[i]==l[i-1]+1:\n                consecutive.append(l[i])\n        if len(consecutive)==0:\n            print('False')\n        else:\n            print('True')\n",
        "num_ids": 186
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if (l[i] == l[i+1]):\n            print(\"True\")\n        else:\n            print(\"False\")\n",
        "num_ids": 47
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    res = []\n    for i in test_list1:\n        if i in test_list2:\n            res.append(i)\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return_list = []\n    for x in test_list1:\n        if x in test_list2:\n            return_list.append(x)\n    return return_list\n",
        "num_ids": 45
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # To check if 2 lists are equal or not\n    # If both lists are equal, then return the common elements\n    # If both lists are different, then return the common elements\n    # If only one of the lists is empty then return the empty list\n    # If neither of the lists are empty, then return the intersection of the 2 lists\n    return None\n",
        "num_ids": 81
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # find the intersection of two lists\n    print(\"The intersection of two lists are: \", set(test_list1).intersection(set(test_list2)))\n",
        "num_ids": 40
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_set = set(test_list1) & set(test_list2)\n    return(sorted(test_set))\n",
        "num_ids": 34
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection = intersection + (test_list1[i],)\n    return intersection\n",
        "num_ids": 59
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == len(test_list2):\n        return test_list1[:]\n    else:\n        return []\n",
        "num_ids": 37
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #first find intersection of tuples in two lists.\n    \n    test_tuple1 = test_list1[0]\n    test_tuple2 = test_list2[0]\n    \n    intersection_tuple = tuple(set(test_tuple1) & set(test_tuple2))\n",
        "num_ids": 76
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_tuple = tuple([])\n    for x in test_list1:\n        if x in test_list2:\n            intersection_tuple = intersection_tuple + (x,)\n    return intersection_tuple\n",
        "num_ids": 56
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not isinstance(test_list1, list) or not isinstance(test_list2, list):\n        raise Exception('Input must be list')\n    if not test_list1 or not test_list2:\n        raise Exception('List can not be empty')\n    return list(set(test_list1).intersection(set(test_list2)))\n",
        "num_ids": 86
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,'')\n    str3 = str2 + newch\n    return str3\n",
        "num_ids": 30
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,newch)\n    print(str2)\n",
        "num_ids": 24
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1\n    for i in range(len(str2)):\n        if str2[i] == ch:\n            str2 = str2[:i] + newch + str2[i+1:]\n    return str2\n",
        "num_ids": 60
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\nstr1=\"hello python\"\nprint(replace_char(str1,'p','j')",
        "num_ids": 42
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res = \"\"\n    for char in str1:\n        if char == ch:\n            res += newch\n        else:\n            res += char\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1\n",
        "num_ids": 53
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    #str1 = \"\".join([c if c!= ch else newch for c in str1])\n    for i,c in enumerate(str1):\n        if c == ch:\n            str1[i] = newch\n    return \"\".join(str1)\n",
        "num_ids": 77
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys = sorted(dict1.keys())\n    values = sorted(dict1.values())\n    res = dict()\n    for k, v in zip(keys, values):\n        res[k] = v\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return dict1\n",
        "num_ids": 35
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = {}\n    for key, value in sorted(dict1.items(), key=lambda item: item[1], reverse=True):\n        dict2[key] = value\n    return dict2\n",
        "num_ids": 49
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    for i in sorted(dict1, key = dict1.get, reverse = True):\n        sorted_dict[i] = dict1[i]\n    return sorted_dict\n",
        "num_ids": 52
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    x = list(dict1.items())\n    x.sort(key=lambda x: x[1],reverse=True)\n    return x\n",
        "num_ids": 36
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = sorted(dict1.items(), key = lambda x :x[1], reverse= True)\n    return dict1\n",
        "num_ids": 32
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x:x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    new_dict = {}\n    sorted_dict = sorted(dict1.items(), key=lambda x:x[1])\n    \n    for i in sorted_dict:\n        new_dict[i[0]] = i[1]\n    \n    return new_dict\n",
        "num_ids": 68
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    my_list = []\n    for key, value in dict1.items():\n        my_list.append((value, key))\n    my_list.sort(reverse=True)\n    for val, key in my_list:\n        print(key, val)\n",
        "num_ids": 64
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    x, y = min(nums), max(nums)\n    return x + y\n",
        "num_ids": 24
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = 0\n    min = 0\n    for num in nums:\n        if num < min:\n            min = num\n        if num > max:\n            max = num\n    print('The sum of the largest and smallest values in the given array is {}'.format(max + min))\n",
        "num_ids": 69
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Python code to demonstrate the working of \n    # inbuilt function min() and max() \n    l = nums \n    print(\"The original list is : \" + str(l)) \n    print(\"The maximum value of the list is : \" + str(max(l))) \n    print(\"The minimum value of the list is : \" + str(min(l))) \n    print(\"The sum of the largest and smallest values of the list is : \" + str(max(l) + min(l))) \n",
        "num_ids": 121
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # max_num = nums[0]\n    # min_num = nums[0]\n    # for num in nums:\n    #     if num > max_num:\n    #         max_num = num\n    #     if num < min_num:\n    #         min_num = num\n    # return max_num + min_num\n    return sum(sorted(nums)[0]), sum(sorted(nums)[-1])\n",
        "num_ids": 110
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #Use max and min to store largest and smallest values\n    #Loop through array with elif to keep track of largest and smallest\n    #If max, store max\n    #If min, store min\n    #If neither, store -1\n    #Loop through array with elif\n    #If bigger than max, store max\n    #If smaller than min, store min\n    #If neither, store -1\n    #Add max and min values to get sum\n    #Return sum\n    min_index = 0\n    max_index = 0\n    sum = 0\n    for i in range(len(nums)):\n        if min_index == 0 and max_index == 0:\n            if nums[i] > nums[max_index]:\n                max_index = i\n            elif nums[i] < nums[min_index]:\n                min_index = i\n            else:\n                max_index = -1\n                min_index = -1\n                sum = -1\n        elif min_index!= 0 and max_index == 0:\n            if nums[i] > nums[max_index]:\n                max_index = i\n            elif nums[i] < nums[min_index]:\n                min_index = i\n            else:\n                max_index = -1\n                min_index = -1\n                sum = -1\n        elif min_index == 0 and max_index!= 0:\n            if nums[i] > nums[max_index]:\n                max_index = i\n            elif nums[i] < nums[min_index]:\n                min_index = i\n            else:\n                max_index = -1\n                min_index = -1\n                sum = -1\n        elif max_index!= 0 and min_index == 0:\n            if nums[i] > nums[max_index]:\n                max_index = i\n            elif nums[i] < nums[min_index]:\n                min_index = i\n            else:\n                max_index = -1\n                min_index = -1\n                sum = -1\n        elif max_index == 0 and min_index == 0:\n            sum = -1\n    if sum!= -1:\n        return sum + nums[max_index] + nums[min_index]\n    else:\n        return sum\n",
        "num_ids": 559
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # code here\n    if len(nums) == 0:\n        return 0\n    return max(nums) + min(nums)\n",
        "num_ids": 36
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums)==0:\n        return None\n    if len(nums)<2:\n        return max(nums)\n    nums.sort()\n    return nums[0] + nums[len(nums)-1]\n",
        "num_ids": 62
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return (0,0)\n    \n    big = nums[0]\n    small = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] > big:\n            big = nums[i]\n        if nums[i] < small:\n            small = nums[i]\n    return (big, small)\n",
        "num_ids": 106
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # way1:\n    nums.sort()\n    print(nums[0] + nums[-1])\n    # print(sum(nums))\n",
        "num_ids": 41
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = nums[0]\n    small = nums[0]\n",
        "num_ids": 20
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # write your solution here\n    return string.lower()\n    # return string.swapcase()\n",
        "num_ids": 26
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_str = \"\"\n    for s in string:\n        lower_str = lower_str + chr(ord(s) - 32)\n    return lower_str\n",
        "num_ids": 42
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = \"\"\n    for i in string:\n        if 65 <= ord(i) <= 90:\n            new_string = new_string + chr(ord(i) + 32)\n        else:\n            new_string = new_string + i\n    return new_string\n",
        "num_ids": 69
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # your code here\n    return string.lower()\n",
        "num_ids": 15
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #new_string = string.lower()\n    new_string = string.capitalize()\n    return new_string\n",
        "num_ids": 30
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # code here\n    return string.lower()\n",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    output = re.sub(r'[a-z]+', '', str1)\n    return output\n",
        "num_ids": 27
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation and non-alphabetic characters from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\n",
        "num_ids": 24
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if type(str1)==str:\n        str2=str1\n        str2 = re.sub('[a-z]', '', str2)\n        return str2\n    else:\n        print('Invalid input')\ndef is_divisible(num1,num2):\n    '''\n    Write a function to check if the first number is divisible by the second number.\n    '''\n    if type(num1)==int and type(num2)==int:\n        if num1%num2 == 0:\n            return True\n        else:\n            return False\n    else:\n        print('Invalid Input')\ndef palindrome_checker(str1):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    str2 = str1[::-1]\n    if str1 == str2:\n        return True\n    else:\n        return False\ndef is_prime(num1):\n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    if type(num1)==int:\n        if num1>1:\n            for i in range(2,num1):\n                if (num1%i)==0:\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return False\ndef no_repetition(str1):\n    '''\n    Write a function to check if the given string contains any repeated characters.\n    '''\n    if type(str1)==str:\n        str2 = str1\n        str2 = str2.lower()\n        str2 = re.sub(r'\\w+', '', str2)\n        if len(str2)!= len(set(str2)):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_anagram(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams or not.\n    '''\n    if type(str1)==str and type(str2)==str:\n        if (len(str1) == len(str2)):\n            str1 = str1.lower()\n            str2 = str2.lower()\n            str1 = re.sub(r'\\W+', '', str1)\n            str2 = re.sub(r'\\W+', '', str2)\n            if sorted(str1) == sorted(str2):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef palindrome_rotation(str1,n):\n    '''\n    Write a function to check if a string can be palindrome after some\n    number of rotations.\n    '''\n    if type(str1)==str and type(n)==int:\n        str2 = str1\n        str2 = str2[-n:]+str2[:-n]\n        if str1 == str2:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef hamming_distance(str1,str2):\n    '''\n    Write a function to find the hamming distance of two strings.\n    '''\n    if type(str1)==str and type(str2)==str:\n        count = 0\n        if len(str1) == len(str2):\n            str1 = str1.lower()\n            str2 = str2.lower()\n            str1 = re.sub(r'\\W+', '', str1)\n            str2 = re.sub(r'\\W+', '', str2)\n            if len(str1) == len(str2):\n                for i in range(len(str1)):\n                    if str1[i]!= str2[i]:\n                        count+=1\n                    if count > 1:\n                        return False\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef find_all_anagrams(str1,str2):\n    '''\n    Write a function to find all the anagrams of a word from a given string.\n    '''\n    if type(str1)==str and type(str2)==str:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        str1 = re.sub(r'\\W+', '', str1)\n        str2 = re.sub(r'\\W+', '', str2)\n        if len(str1) == len(str2):\n            return [i for i in range(len(str1)) if str1[i]!= str2[i]]\n        else:\n            return []\n    else:\n        return []\ndef find_all_anagrams_efficient(str1,str2):\n    '''\n    Write a function to find all the anagrams of a word from a given string.\n    '''\n    if type(str1)==str and type(str2)==str:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        str1 = re.sub(r'\\W+', '', str1)\n        str2 = re.sub(r'\\W+', '', str2)\n        if len(str1) == len(str2):\n            str1 = sorted(str1)\n            str2 = sorted(str2)\n            if str1 == str2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef find_all_anagrams_efficient2(str1,str2):\n    '''\n    Write a function to find all the anagrams of a word from a given string.\n    '''\n    if type(str1)==str and type(str2)==str:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        str1 = re.sub(r'\\W+', '', str1)\n        str2 = re.sub(r'\\W+', '', str2)\n        if len(str1) == len(str2):\n            str1 = sorted(str1)\n            str2 = sorted(str2)\n            if str1 == str2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef find_anagrams(str1,str2):\n    '''\n    Write a function to find all the anagrams of a word from a given string.\n    '''\n    if type(str1)==str and type(str2)==str:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        str1 = re.sub(r'\\W+', '', str1)\n        str2 = re.sub(r'\\W+', '', str2)\n        if len(str1) == len(str2):\n            str1 = sorted(str1)\n            str2 = sorted(str2)\n            if str1 == str2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef find_anagrams_efficient(str1,str2):\n    '''\n    Write a function to find all the anagrams of a word from a given string.\n    '''\n    if type(str1)==str and type(str2)==str:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        str1 = re.sub(r'\\W+', '', str1)\n        str2 = re.sub(r'\\W+', '', str2)\n        if len(str1) == len(str2):\n            str1 = sorted(str1)\n            str2 = sorted(str2)\n            if str1 == str2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef find_anagrams_efficient2(str1,str2):\n    '''\n    Write a function to find all the anagrams of a word from a given string.\n    '''\n    if type(str1)==str and type(str2)==str:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        str1 = re.sub(r'\\W+', ''",
        "num_ids": 56
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace('a','0')\n",
        "num_ids": 16
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    return re.sub('[a-z]', '', str1).lower()\n",
        "num_ids": 24
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]+\", \"\", str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\w')\n    return pattern.sub('',str1)\n",
        "num_ids": 27
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #pattern = r'[a-z]'\n    #pat = re.compile(pattern)\n    #result = re.sub(pat, '', str1)\n    #print(result)\n    result = re.findall('[a-z]',str1)\n    return ''.join(result)\n",
        "num_ids": 76
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    print(re.sub('[a-z]', '', str1, flags=re.IGNORECASE))\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(re.sub('[A-Z]', '', str1, flags=re.IGNORECASE))\n    \ndef remove_special_chars(str1):\n    '''\n    Write a function to remove special characters substrings from a given string.\n    '''\n    print(re.sub('[^0-9a-zA-Z]', '', str1))\n    \ndef remove_numbers(str1):\n    '''\n    Write a function to remove digits substrings from a given string.\n    '''\n    print(re.sub('[0-9]', '', str1))\n",
        "num_ids": 21
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s = str(n)\n    for i in range(0,len(s)) :\n        if (i==0) :\n            print(\"first digit = \",s[i])\n            break\n    else :\n        print(\"First digit not found\")\n",
        "num_ids": 61
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return int(n[0])\n",
        "num_ids": 19
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    import re\n    result = re.findall(r'\\d', str(n))\n    return int(result[0])\n",
        "num_ids": 33
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return int(n[0])\n",
        "num_ids": 19
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n",
        "num_ids": 8
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    output = []\n    for i in list:\n        if i % 2!= 0:\n            output.append(i)\n    return output\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if(i%2):\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 40
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if list[i]%2!= 0:\n            odd.append(list[i])\n    return odd\n",
        "num_ids": 46
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for i in list:\n        if i%2!= 0:\n            odd_numbers.append(i)\n    return odd_numbers\n",
        "num_ids": 45
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2!= 0:\n            odds.append(i)\n",
        "num_ids": 34
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    return (list[i] for i in range(len(list)) if list[i]%2==1) \n",
        "num_ids": 32
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_num = [] \n    for i in list: \n        if (i % 2) == 1: \n            odd_num.append(i) \n    return odd_num \n    ",
        "num_ids": 49
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[1::2]\n    \n",
        "num_ids": 13
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in list:\n        if i%2==0:\n            continue\n        else:\n            print(i)\n",
        "num_ids": 31
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1) :\n        sum += i*i*i\n    diff = sum - (n*n*n)\n    print(diff)\n    ",
        "num_ids": 48
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube(n):\n        return n**3\n    def sum(n):\n        return n*(n+1)//2\n    return cube(sum(n))-sum(cube(n))\nprint(difference(10))\n",
        "num_ids": 58
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (pow(n, 3) - sum(range(1, n + 1))) \n    ",
        "num_ids": 26
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube_sum(n) :\n        return(n*n*n)\n    \n    def sum_of_n(n) :\n        cube_sum = cube_sum(n)\n        sum_of_n = 0\n        for i in range(1,n+1) :\n            sum_of_n += i\n        return(cube_sum - sum_of_n)\n    \n    diff = abs(sum_of_n(n)-cube_sum(n))\n    print('The difference between the sum of cubes of the first',n,'natural numbers and the sum of the first',n,'natural numbers is :',diff)\n    \ndef find_differences(n) :\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def find_difference(n) :\n        diff = abs(sum_of_n(n)-cube_sum(n))\n        print('The difference between the sum of cubes of the first',n,'natural numbers and the sum of the first',n,'natural numbers is :',diff)\n    \n    for i in range(1,n+1) :\n        find_difference(i)\n        \ndef palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome or not.\n    '''\n    word = word.lower()\n    if word == word[::-1] :\n        print('True')\n    else :\n        print('False')\n        \ndef fib(n) :\n    '''\n    Write a python function to find the sum of the Fibonacci numbers till n.\n    '''\n    def fibo(n) :\n        fibo_list = []\n        if n <= 0 :\n            return 'Invalid Input'\n        elif n == 1 :\n            return 0\n        elif n == 2 :\n            return 1\n        else :\n            fibo_list.append(0)\n            fibo_list.append(1)\n            for i in range(2,n) :\n                fibo_list.append(fibo_list[i-1] + fibo_list[i-2])\n            return fibo_list[n-1]\n    print(fibo(n))\n    \ndef factorial(n) :\n    '''\n    Write a python function to find the factorial of a given integer.\n    '''\n    def fact(n) :\n        f = 1\n        for i in range(1,n+1) :\n            f = f*i\n        return(f)\n    print(fact(n))\n    \ndef tower_builder(n) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    def tower_builder(n,height) :\n        if n == 0 :\n            return ''\n        elif n == 1 :\n            return height\n        elif n == 2 :\n            return '(' + height + ')' + '(' + height + ')'\n        else :\n            return tower_builder(n-1,height+')(') + '(' + height + ')' + tower_builder(n-2,height)\n    \n    print(tower_builder(n,'('))\n    \ndef tower_builder_1(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_1(n-1,height+')(') + '(' + height + ')'\n        \ndef tower_builder_2(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_2(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_3(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_3(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_4(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_4(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_5(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_5(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_6(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_6(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_7(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_7(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_8(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_8(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_9(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_9(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_10(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_10(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_11(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_11(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_12(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_12(n-1,height+')(') + '(' + height + ')'\n    \ndef tower_builder_13(n,height) :\n    '''\n    Write a python function to build a tower with given number of blocks and height.\n    '''\n    if n == 0 :\n        return ''\n    elif n == 1 :\n        return height\n    else :\n        return tower_builder_13(n-1,height+')(') + '(' + height + ')'\n    ",
        "num_ids": 56
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(input())\n    num = 1\n    sum1 = 0\n    while(num<=n) :\n        sum1 = sum1 + pow(num,3)\n        num = num + 1\n    sum2 = 0\n    num = 1\n    while(num<=n) :\n        sum2 = sum2 + pow(num,3)\n        num = num + 1\n    diff = sum1 - sum2\n    print(diff)\n",
        "num_ids": 109
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(n+1) :\n        sum1 = sum1 + i**3\n    for i in range(n+1) :\n        sum2 = sum2 + i\n    return sum1 - sum2\n",
        "num_ids": 66
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cube = 0\n    sum_of_number = 0\n    \n    for i in range(n) : \n        sum_of_cube += pow(i, 3)\n        sum_of_number += i\n    print(sum_of_number)\n    return abs(sum_of_number - sum_of_cube)\n",
        "num_ids": 83
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a,b,c =0,0,0\n    for i in range(1,n+1):\n        a = a + i*i*i\n        b = b + i\n    return abs(a-b)\n",
        "num_ids": 55
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n+1) :\n        sum_of_cubes += i**3\n    sum_of_n = 0\n    for i in range(n+1) :\n        sum_of_n += i\n    return sum_of_cubes - sum_of_n\n    \n    \ndef multiplication(n) : \n    '''\n    Write a python function to find the product of the first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)//6\n    \n    \ndef division(n) : \n    '''\n    Write a python function to find the square root of the product of the first n natural numbers.\n    '''\n    return n**(1/2)\n    \n    \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 1\n    else :\n        return n*factorial(n-1)\n        \n    \ndef fibonacci(n) : \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n        \n        \ndef fibonacci_series(n) : \n    '''\n    Write a python function to find the Fibonacci series upto the nth term.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return fibonacci_series(n-1) + fibonacci_series(n-2)\n        \n        \ndef reverse(s) : \n    '''\n    Write a python function to reverse the string.\n    '''\n    return ''.join(reversed(s))\n    \n    \ndef sum_digits(n) : \n    '''\n    Write a python function to sum the digits of the first n natural numbers.\n    '''\n    sum = 0\n    while n >= 1 :\n        sum += n % 10\n        n = n // 10\n    return sum\n        \n    \ndef factorial_using_recursion(n) : \n    '''\n    Write a python function to find the factorial of the first n natural numbers using recursion.\n    '''\n    if n == 1 or n == 0 :\n        return 1\n    else :\n        return n*factorial_using_recursion(n-1)\n    \n    \ndef factorial_using_loop(n) : \n    '''\n    Write a python function to find the factorial of the first n natural numbers using loop.\n    '''\n    if n == 1 or n == 0 :\n        return 1\n    else :\n        result = 1\n        for i in range(1, n+1) :\n            result *= i\n        return result\n        \n    \ndef count_triangle(n) : \n    '''\n    Write a python function to find the number of ways to form a triangle with the given length and with numbers from 1 to n.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return count_triangle(n-1) + count_triangle(n-2)\n        \n        \ndef count_square(n) : \n    '''\n    Write a python function to find the number of ways to form a square with the given length and with numbers from 1 to n.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return count_square(n-1) + count_square(n-2)\n        \n        \ndef count_pentagon(n) : \n    '''\n    Write a python function to find the number of ways to form a pentagon with the given length and with numbers from 1 to n.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return (count_pentagon(n-1))*5 + (count_pentagon(n-2))*3\n        \n        \ndef count_hexagon(n) : \n    '''\n    Write a python function to find the number of ways to form a hexagon with the given length and with numbers from 1 to n.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return (count_hexagon(n-1))*6 + (count_hexagon(n-2))*4\n        \n        \ndef count_heptagon(n) : \n    '''\n    Write a python function to find the number of ways to form a heptagon with the given length and with numbers from 1 to n.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return (count_heptagon(n-1))*7 + (count_heptagon(n-2))*5\n        \n        \ndef count_octagon(n) : \n    '''\n    Write a python function to find the number of ways to form a octagon with the given length and with numbers from 1 to n.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return (count_octagon(n-1))*8 + (count_octagon(n-2))*6\n        \n        \ndef count_heptagon_using_recursion(n) : \n    '''\n    Write a python function to find the number of ways to form a heptagon with the given length and with numbers from 1 to n using recursion.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return count_heptagon_using_recursion(n-1) + count_heptagon_using_recursion(n-2)\n        \n        \ndef count_octagon_using_recursion(n) : \n    '''\n    Write a python function to find the number of ways to form an octagon with the given length and with numbers from 1 to n using recursion.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return count_octagon_using_recursion(n-1) + count_octagon_using_recursion(n-2)\n        \n        \ndef count_triangle_using_recursion(n) : \n    '''\n    Write a python function to find the number of ways to form a triangle with the given length and with numbers from 1 to n using recursion.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return count_triangle_using_recursion(n-1) + count_triangle_using_recursion(n-2)\n        \n        \ndef count_square_using_recursion(n) : \n    '''\n    Write a python function to find the number of ways to form a square with the given length and with numbers from 1 to n using recursion.\n    '''\n    if n == 0 :\n        return 1\n    elif n == 1 :\n        return 1\n    else :\n        return count_square_using_recursion(n-1) + count_square_using_recursion(n-2)\n        \n        \ndef count_square_using_iteration(n) : \n    '''\n    Write a python function to find the number of ways to form a square with the given length and with numbers from 1 to n using iteration.\n    '''\n    count = 1\n    for i in range(1, n+1) :\n        count = count * i\n    return count\n        \n    \ndef count_square_using_loop(n) : \n    '''\n    Write a python function to find the number of ways to form a square with the given length and with numbers from 1 to n using loop.\n    '''\n    count = 1\n    for i in range(1, n+1) :\n        count = count * i\n    return count\n        ",
        "num_ids": 33
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    i=1\n    j=0\n    while i<n:\n        j=j+i\n        i=i+1\n    l=0\n    i=1\n    while i<=n:\n        l=l+i**3\n        i=i+1\n    print(\"Difference between sum of cubes and sum of the first %d natural numbers is : \"%n,\"%d\"%(l-j))\n",
        "num_ids": 100
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if ((A[i] == A[j]) and (A[i]%2==1)):\n                res = res + 1\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        if(xor(A[i],A[i+1])%2!= 0):\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N):\n        if A[i]&1==1:\n            count=count+1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = N//2\n    c = 0\n    for i in range(0,n) : \n        if (A[i] ^ A[N-1-i]) & 1 == 1 : \n            c += 1\n    return c \n",
        "num_ids": 60
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N % 2!= 0:\n        return \"Number of pairs are \" + str(N/2) + \".\"\n    else:\n        return \"Number of pairs are \" + str(N/2) + \".\"\n    \n    \ndef find_Prime_Numbers(N) :\n    '''\n    Write a python function to count the number of prime numbers between 1 and N.\n    '''\n    prime_count = 0\n    \n    for i in range(1,N+1) :\n        flag = True\n        for j in range(2,i//2) :\n            if i % j == 0 :\n                flag = False\n                break\n        if flag :\n            prime_count += 1\n    \n    return \"Number of prime numbers between 1 and N is \" + str(prime_count) + \".\"\n",
        "num_ids": 99
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) & 1) : \n                count = count + 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # print(\"\\n\\nIN FIND_Odd_Pair : A = \",A)\n    # print(\"\\n\\nIN FIND_Odd_Pair : N = \",N)\n    # print(\"\\n\\nIN FIND_Odd_Pair : A = \",A)\n    # print(\"\\n\\nIN FIND_Odd_Pair : N = \",N)\n    count = 0\n    if N%2 == 1 :\n        # print(\"\\n\\nIN FIND_Odd_Pair : N is odd\")\n        for i in range(0,N-1) :\n            if ((A[i] ^ A[i+1]) > 0) :\n                # print(\"\\n\\nIN FIND_Odd_Pair : pair_XOR_value = \",A[i] ^ A[i+1])\n                count += 1\n        # print(\"\\n\\nIN FIND_Odd_Pair : count = \",count)\n    else :\n        # print(\"\\n\\nIN FIND_Odd_Pair : N is even\")\n        for i in range(0,N-1) :\n            if ((A[i] ^ A[i+1]) < 0) :\n                # print(\"\\n\\nIN FIND_Odd_Pair : pair_XOR_value = \",A[i] ^ A[i+1])\n                count += 1\n        # print(\"\\n\\nIN FIND_Odd_Pair : count = \",count)\n    return count\n",
        "num_ids": 366
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1:\n                count = count + 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j]==1:\n                count+=1\n    print(count)\n",
        "num_ids": 55
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = N - 1\n    c = 0\n    for i in range(N):\n        j = i + 1\n        while j < n:\n            if A[i] == A[j] and A[i]!= A[i+1] : \n                c += 1\n                break\n            j += 1\n    return c\n    \nprint(\"The number of pairs whose xor value is odd is: \",find_Odd_Pair([1, 1, 1, 1, 1],5)) \nprint(\"The number of pairs whose xor value is odd is: \",find_Odd_Pair([2, 1, 5, 9, 3, 7],7)) \nprint(\"The number of pairs whose xor value is odd is: \",find_Odd_Pair([2, 1, 5, 9, 3, 7],8))",
        "num_ids": 196
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    ",
        "num_ids": 12
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # char by char\n    # if char is lowercase, return uppercase\n    # else if char is uppercase, return lowercase\n    # else leave it the same\n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        elif char.islower():\n            char = char.upper()\n        else:\n            continue\n        \n        print(char, end='')\n        \n    print()\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a function which accepts a string and returns True if it is a palindrome\n    '''\n    # start from the middle and compare with the first and last letters\n    for i in range(len(string)//2):\n        if string[i]!= string[-i-1]:\n            return False\n        \n    return True\n    \n    \ndef reverse_string(string):\n    '''\n    Write a function which accepts a string and returns a string with the characters reversed.\n    '''\n    # reverse by using a slice\n    return string[::-1]\n    \n    \ndef remove_char(string, char):\n    '''\n    Write a function which accepts a string and a character and returns a string with the characters \n    removed.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    if char in string:\n        index = string.index(char)\n        return string[index+1:-1]\n    \n    else:\n        return string\n        \n        \ndef remove_vowels(string):\n    '''\n    Write a function which accepts a string and returns a string with the vowels removed.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels = ''.join(vowels)\n    \n    new_string = []\n    for char in string:\n        if char not in vowels:\n            new_string.append(char)\n            \n    return ''.join(new_string)\n    \n    \ndef replace_char(string, old_char, new_char):\n    '''\n    Write a function which accepts a string and a character and returns a string with the character \n    replaced with another character.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    \n    new_string = []\n    for char in string:\n        if char == old_char:\n            new_string.append(new_char)\n        else:\n            new_string.append(char)\n            \n    return ''.join(new_string)\n    \n    \ndef count_chars(string, char):\n    '''\n    Write a function which accepts a string and a character and returns the number of times the \n    character appears in the string.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    count = 0\n    \n    for char in string:\n        if char == char:\n            count += 1\n            \n    return count\n    \n    \ndef count_digits(string):\n    '''\n    Write a function which accepts a string and returns the number of digits in the string.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    count = 0\n    \n    for char in string:\n        if char.isdigit():\n            count += 1\n            \n    return count\n    \n    \ndef count_letters(string):\n    '''\n    Write a function which accepts a string and returns the number of letters in the string.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    count = 0\n    \n    for char in string:\n        if char.isalpha():\n            count += 1\n            \n    return count\n    \n    \ndef count_char_range(string, start, end):\n    '''\n    Write a function which accepts a string and a range of characters and returns the number of \n    characters in the string which are in the range.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    count = 0\n    \n    for char in string:\n        if start <= char <= end:\n            count += 1\n            \n    return count\n    \n    \ndef is_palindrome2(string):\n    '''\n    Write a function which accepts a string and returns True if it is a palindrome, \n    False otherwise.\n    '''\n    # convert the string into a list and reverse the list\n    # compare the list with the original list\n    \n    # keep removing the first and last character\n    # check if the list is same as the original list\n    return string == string[::-1]\n    \n    \ndef is_palindrome3(string):\n    '''\n    Write a function which accepts a string and returns True if it is a palindrome, \n    False otherwise.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    # check if the string is same as the reversed string\n    \n    # if len(string) == 0:\n    #     return True\n    # elif string[0] == string[-1]:\n    #     return is_palindrome3(string[1:-1])\n    # else:\n    #     return False\n    \n    string = string.lower()\n    \n    return string == string[::-1]\n    \n    \ndef reverse_word(string):\n    '''\n    Write a function which accepts a string and returns the string with the words in reversed order.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    # check if the string is same as the reversed string\n    \n    # if len(string) == 0:\n    #     return string\n    # elif string[0] == string[-1]:\n    #     return reverse_word(string[1:-1])\n    # else:\n    #     return string\n    \n    if len(string) == 0:\n        return string\n    else:\n        new_string = []\n        \n        for char in string:\n            if char =='':\n                new_string.append(char)\n            else:\n                new_string.append(char)\n                \n        return ''.join(new_string)\n    \n    \ndef reverse_words(string):\n    '''\n    Write a function which accepts a string and returns the string with the words in \n    reversed order.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    # check if the string is same as the reversed string\n    \n    # if len(string) == 0:\n    #     return string\n    # elif string[0] == string[-1]:\n    #     return reverse_words(string[1:-1])\n    # else:\n    #     return string\n    \n    if len(string) == 0:\n        return string\n    else:\n        new_string = []\n        \n        for char in string:\n            if char =='':\n                new_string.append(char)\n            else:\n                new_string.append(char)\n                \n        return ''.join(new_string)\n        \n    \ndef add_strings(string_1, string_2):\n    '''\n    Write a function which accepts two strings and returns a new string which \n    is the concatenation of the two strings.\n    '''\n    # case of single char or multiple chars\n    # keep removing the first and last character\n    # check if the string is same as the reversed string\n    \n    # if len(string_1) == 0:\n    #     return string_2\n    # elif len(string_2) == 0:\n    #     return string_1\n    # else:\n    #     return string_1 + string_2\n    \n    \n    if len(string_1) == 0:\n        return string_2\n    elif len(string_2) == 0:\n        return string_1\n    else:\n        new_string = []\n        \n        for char in string_1:\n            if char =='':\n                new_string.append(char)\n            else:\n                new_string.append(char)\n                \n        fo",
        "num_ids": 195
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string) == str:\n        return string.swapcase()\n    else:\n        raise TypeError(\"The argument must be a string.\")\n",
        "num_ids": 38
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return \"\"\n    if string.islower():\n        return string.upper()\n    else:\n        return string.lower()\n",
        "num_ids": 39
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distances = [abs(n1 - n2) % 10]\n    \n    for i in range(1,10):\n        if distances[i - 1] == 0:\n            distances.append(abs(n1 - n2) // 10)\n        else:\n            distances.append(abs(n1 - (n1 // 10 + distances[i - 1])) % 10)\n    \n    return sum(distances)\n",
        "num_ids": 104
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #return sum(abs(n1 - n2))\n    return sum(int(i) - int(j) for i,j in zip(str(n1), str(n2)))\n",
        "num_ids": 47
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(n1)):\n        sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    while n1 > 0 or n2 > 0:\n        sum += abs(n1%10-n2%10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    print(n1, \" and \", n2)\n    if(n1==n2):\n        return 0\n    if(n1<n2):\n        return -1\n    sum_distance = 0\n    n1 = str(n1)\n    n2 = str(n2)\n    for i in range(0, len(n1)):\n        sum_distance = sum_distance + abs(int(n1[i])-int(n2[i]))\n    return sum_distance\n",
        "num_ids": 120
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_distance = 0\n    n1 = abs(n1)\n    n2 = abs(n2)\n    while n1 > 0:\n        n1, n2 = n2 % 10, n1 % 10\n        total_distance += abs(n2 - n1)\n        n1, n2 = n2 % 10, n1 % 10\n    return total_distance\n",
        "num_ids": 91
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert n1 >= 0 and n2 >= 0, \"Both n1 and n2 should be non-negative\"\n    return n1 ^ n2\n",
        "num_ids": 36
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = int(n1), int(n2)\n    diff = n1 - n2\n    count_digit = 1\n    total_dist = 0\n    while(count_digit <= 2):\n        remainder = abs(diff) % 10\n        total_dist += abs(diff % 10 - remainder)\n        diff = int(abs(diff) / 10)\n        count_digit += 1\n    return total_dist\n",
        "num_ids": 105
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    sum_diff = 0\n    diff = abs(n1-n2)\n    while(diff>=10):\n        sum_diff += diff%10\n        diff//=10\n    sum_diff += diff\n    return sum_diff\n",
        "num_ids": 60
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = 0\n    sub_sum = 0\n    for i in range(size):\n        sub_sum += a[i]\n        if sub_sum < 0:\n            sub_sum = 0\n        if sub_sum > max_sub:\n            max_sub = sub_sum\n    return max_sub\n",
        "num_ids": 77
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    a.sort(reverse=True)\n    current_max = max(a)\n    i = 0\n    while i < len(a):\n        if i == 0:\n            current_sum = a[i]\n        else:\n            if current_sum >= current_max:\n                current_sum = current_sum + a[i]\n            else:\n                current_max = current_sum\n                current_sum = a[i]\n        i += 1\n    if current_sum == current_max:\n        return (current_sum)\n    else:\n        return (current_sum, current_max)\n",
        "num_ids": 145
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    sub_sum = 0\n    for i in range(0, size):\n        if (a[i] > 0):\n            sub_sum += a[i]\n        if (sub_sum < 0):\n            sub_sum = 0\n        if (sub_sum > max_sum):\n            max_sum = sub_sum\n            start = i\n        if (sub_sum < 0):\n            sub_sum = 0\n",
        "num_ids": 113
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    m = max(a)\n    sum = 0\n    arr = []\n    for i in range(size):\n        if a[i] == m:\n            sum += a[i]\n            arr.append(i)\n    return sum, arr\n",
        "num_ids": 61
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    l = 0\n    r = 0\n    result = -999999999999999999\n    s = 0\n    while r < size:\n        s += a[r]\n        while s > result:\n            result = s\n            r += 1\n        if s < result:\n            s = 0\n            r += 1\n        else:\n            s = 0\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(0, size):\n        for j in range(i+1, size):\n            curr_sum = a[i] + a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    print(max_sum)\n    \ndef max_sub_array_sum_dp(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 2:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n    # dp[i] will be storing the maximum subarray sum ending at i\n    dp = [0] * size\n    # Base case for size = 1\n    dp[0] = a[0]\n    # Base case for size = 2\n    dp[1] = max(a[0], a[1])\n    # Update dp[i] if current element is greater than the\n    # previously stored maximum element\n    for i in range(2, size):\n        dp[i] = max(a[i] + dp[i - 2], a[i])\n    print(dp)\n    print(max(dp))\n    \ndef max_sub_array_sum_dp_2(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 2:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n    # dp[i] will be storing the maximum subarray sum ending at i\n    dp = [0] * size\n    # Base case for size = 1\n    dp[0] = a[0]\n    # Base case for size = 2\n    dp[1] = max(a[0], a[1])\n    # Update dp[i] if current element is greater than the\n    # previously stored maximum element\n    for i in range(2, size):\n        dp[i] = max(a[i] + dp[i - 2], a[i])\n    print(dp)\n    print(max(dp))\n    \ndef max_sub_array_sum_dp_3(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 2:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n    # dp[i] will be storing the maximum subarray sum ending at i\n    dp = [0] * size\n    # Base case for size = 1\n    dp[0] = a[0]\n    # Base case for size = 2\n    dp[1] = max(a[0], a[1])\n    # Update dp[i] if current element is greater than the\n    # previously stored maximum element\n    for i in range(2, size):\n        dp[i] = max(a[i] + dp[i - 2], a[i])\n    print(dp)\n    print(max(dp))\n",
        "num_ids": 183
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    # Initialize the minimum so far\n    min_so_far = float('inf')\n    \n    # Initialize the maximum so far\n    max_so_far = float('-inf')\n    \n    # Initialize the current sum\n    curr_sum = 0\n    \n    # Traverse the list starting at index 0\n    for i in range(0, size):\n    \n        # Update the current sum\n        curr_sum += a[i]\n        \n        # Update the minimum so far if this current sum is less than the minimum so far\n        if curr_sum < min_so_far:\n            min_so_far = curr_sum\n        \n        # Update the maximum so far if this current sum is greater than the maximum so far\n        if curr_sum > max_so_far:\n            max_so_far = curr_sum\n    \n    # Return the maximum sum\n    return max_so_far\n",
        "num_ids": 222
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        sum_now = 0\n        for j in range(i, size):\n            sum_now += a[j]\n            max_sum = max(max_sum, sum_now)\n    return max_sum\n",
        "num_ids": 68
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # my_max = 0\n    # for i in range(size):\n    #     temp = 0\n    #     for j in range(i, size):\n    #         temp += a[j]\n    #     if temp > my_max:\n    #         my_max = temp\n    #     print(\"my_max: \", my_max)\n    # return my_max\n    \n    # for i in range(size):\n    #     curr_max = 0\n    #     for j in range(i, size):\n    #         curr_max = max(curr_max, a[j])\n    #         print(curr_max, a[j])\n    #         if curr_max > 0:\n    #             print(curr_max)\n    #             break\n    #     if curr_max > 0:\n    #         return curr_max\n    # return 0\n    \n    # for i in range(size):\n    #     if i == 0:\n    #         curr_max = a[i]\n    #     else:\n    #         curr_max = max(curr_max, a[i])\n    #         if curr_max > 0:\n    #             return curr_max\n    # return 0\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MAX = -sys.maxsize - 1\n    # for i in range(size):\n    #     curr_sum = 0\n    #     for j in range(i, size):\n    #         curr_sum += a[j]\n    #         if curr_sum > MAX:\n    #             MAX = curr_sum\n    #             print(i, j, MAX)\n    # return MAX\n    \n    # MA",
        "num_ids": 1891
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    for i in range(size):\n        curr_sum = 0\n        for j in range(i, size):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "num_ids": 75
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set_test_tup1 = set(test_tup1)\n    set_test_tup2 = set(test_tup2)\n    result = set_test_tup1.union(set_test_tup2)\n    result = list(result)\n    result.sort()\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #return sorted(set(test_tup1) | set(test_tup2))\n    if test_tup1 == None or test_tup2 == None:\n        return None\n    elif test_tup1!= None and test_tup2!= None:\n        return sorted(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 92
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = []\n    union_tuple.extend(test_tup1)\n    union_tuple.extend(test_tup2)\n    union_tuple.sort()\n    return union_tuple\n",
        "num_ids": 58
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list = sorted(union_list)\n    return union_list\n",
        "num_ids": 45
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
        "num_ids": 24
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    if len(test_tup1) > len(test_tup2):\n        tup1_index = 0\n        tup2_index = 0\n    else:\n        tup1_index = 0\n        tup2_index = 0\n",
        "num_ids": 70
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (test_tup1 + test_tup2)\n",
        "num_ids": 18
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union = list(set(test_tup1) | set(test_tup2))\n    # print(union)\n",
        "num_ids": 33
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    l1 = []\n    l2 = []\n    union_tup = ()\n    l1 = sorted(test_tup1)\n    l2 = sorted(test_tup2)\n    i = 0\n    j = 0\n    union_tup = ()\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            union_tup = union_tup + (l1[i], )\n            i = i + 1\n        elif l1[i] > l2[j]:\n            union_tup = union_tup + (l2[j], )\n            j = j + 1\n    if i == len(l1):\n        while j < len(l2):\n            union_tup = union_tup + (l2[j], )\n            j = j + 1\n    elif j == len(l2):\n        while i < len(l1):\n            union_tup = union_tup + (l1[i], )\n            i = i + 1\n    return union_tup\n",
        "num_ids": 265
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = []\n    for elem in test_tup1:\n        if elem not in union_elements:\n            union_elements.append(elem)\n    for elem in test_tup2:\n        if elem not in union_elements:\n            union_elements.append(elem)\n    union_elements.sort()\n    return union_elements\n",
        "num_ids": 98
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # code here\n    maxi = 0\n    for i in range(0, len(lst)):\n        sub = lst[i]\n        if len(sub) > maxi:\n            maxi = len(sub)\n        for j in range(i+1, len(lst)):\n            sub = lst[j]\n            if len(sub) > maxi:\n                maxi = len(sub)\n    return maxi\n",
        "num_ids": 108
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max=0\n    for i in range(len(lst)):\n        a=lst[i]\n        for j in range(len(lst)):\n            if j!=i:\n                if len(a)>len(lst[j]):\n                    max=len(a)\n                    break\n                else:\n                    max=len(lst[j])\n                    break\n        if max>len(a):\n            max=len(a)\n    return max\n",
        "num_ids": 116
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #code here\n    lst_len = 0\n    for i in lst:\n        if len(i) > lst_len:\n            lst_len = len(i)\n    return lst_len\n",
        "num_ids": 54
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst==[]:\n        return 0\n    return max([Find_Max_Length(lst[i:]) for i in range(len(lst))])+1\n",
        "num_ids": 44
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlength = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if(maxlength < len(lst[i:j])):\n                maxlength = len(lst[i:j])\n    print(\"Length of the longest sublists is:\",maxlength)\n    \nFind_Max_Length(lst) ",
        "num_ids": 95
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for item in lst:\n        max_length = max(max_length, len(item))\n    return max_length\n",
        "num_ids": 39
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    x = len(lst)\n    count = 0\n    max_length = 0\n    \n    for i in range(x):\n        count = 1\n        for j in range(i,x):\n            if lst[j]==lst[i]:\n                count+=1\n            else:\n                break\n        if count>max_length:\n            max_length = count\n    \n    return max_length\n",
        "num_ids": 100
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m = 0\n    for i in range(len(lst)):\n        count = 1\n        for j in range(i+1,len(lst)):\n            if lst[i]==lst[j]:\n                count+=1\n            else:\n                break\n        if count>m:\n            m = count\n    return m\n",
        "num_ids": 84
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        maxlen = 1\n        for i in range(0,len(lst)-1):\n            if lst[i+1]-lst[i] > maxlen:\n                maxlen = lst[i+1]-lst[i]\n        return maxlen\n",
        "num_ids": 84
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for s in lst:\n        if len(s) > longest:\n            longest = len(s)\n",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.split('\"')[1]\n",
        "num_ids": 14
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\"[^\"]*\"', text)\n    \n    return values\n",
        "num_ids": 25
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"([^\"]*)\"')\n    # print(pattern.findall(text))\n    values = pattern.findall(text)\n    return values\n",
        "num_ids": 45
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    start = re.search(\"\\\"(.*)\\\"\", text).group(1)\n    end = re.search(\"(.*)\\\"\", text).group(1)\n    return start, end\n",
        "num_ids": 47
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"[^\"]*\"', text)\n",
        "num_ids": 18
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    pattern = r'\\\"(.*?)\\\"'\n    return re.findall(pattern, text)\n",
        "num_ids": 28
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"[^\"]*?\"')\n    values = pattern.findall(text)\n    return values\n",
        "num_ids": 34
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Some examples:\n    # \n    # extract_values(\"'this' is a test\") == ['this', 'is', 'a', 'test']\n    # extract_values('this \"is\" a test') == ['this', 'is', 'a', 'test']\n    # extract_values('what \"is\" this?') == ['what', 'is', 'this']\n    # extract_values(\"what is this\") == None\n    # extract_values('\"this is\" a test') == None\n    # extract_values(\"this 'is' test\") == None\n    # extract_values('this \"is\" a test\"') == None\n    # extract_values(\"a,b,c\") == None\n    # extract_values(\"'a' 'b'\") == None\n    # extract_values(\"hello 'there\") == None\n    # extract_values(\"hello 'there'\") == None\n    # extract_values(\"'a' 'b'\") == None\n    # extract_values(\"hello\") == None\n    # extract_values(\"hello 'there\") == None\n    # extract_values(\"hello 'there'\") == None\n    # extract_values(\"hello\") == None\n",
        "num_ids": 274
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search(r\"[\\\"](.*?)[\\\"]\",text)\n    return match.group(0)\n",
        "num_ids": 31
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"\\\"\", \"\")\n    text = text.replace(\"`\", \"\")\n    print(text)\n    return text\n",
        "num_ids": 48
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                pairs += 1\n",
        "num_ids": 48
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if arr[0]==arr[1]:\n        return 2\n    count=0\n    for i in range(2,n-1):\n        if arr[i]==arr[i-1]:\n            count+=1\n            if arr[i]==arr[i+1]:\n                count+=1\n    return count+2\n",
        "num_ids": 102
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    s=set(arr)\n    count=0\n    for i in s:\n        for j in s:\n            if i!=j and i<j:\n                count+=1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                res +=1\n    print(res)\ndef count_Triplets(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered triplets where all elements are different and the triplet is not repeated.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if arr[i] == arr[j] or arr[i] == arr[k] or arr[j] == arr[k]:\n                    continue\n                else:\n                    res+=1\n    print(res)\ndef count_Triplets_2(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered triplets where all elements are different and the triplet is not repeated.\n    '''\n    res = 0\n    arr_set = set()\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                continue\n            else:\n                if (arr[i],arr[j]) in arr_set:\n                    res+=1\n                else:\n                    arr_set.add((arr[i],arr[j]))\n    print(res)\ndef count_Triplets_2_2(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered triplets where all elements are different and the triplet is not repeated.\n    '''\n    res = 0\n    arr_set = set()\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                continue\n            else:\n                if (arr[i],arr[j]) in arr_set:\n                    res+=1\n                else:\n                    arr_set.add((arr[i],arr[j]))\n    return res\ndef maxSubArray(nums):\n    if len(nums)==1:\n        return nums[0]\n    else:\n        left = 0\n        maxLeft = nums[0]\n        \n        right = 0\n        maxRight = nums[0]\n        \n        leftSum = 0\n        maxLeftSum = nums[0]\n        \n        for i in range(1,len(nums)):\n            rightSum = nums[i]\n            \n            right = rightSum + left\n            left = rightSum + left\n            maxLeft = max(maxLeft,leftSum)\n            maxRight = max(maxRight,rightSum)\n            leftSum = rightSum + left\n            \n        return max(maxLeft,maxRight)\ndef max_sum_subarray_brute_force(nums):\n    max_sum = float('-inf')\n    \n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            current_sum = sum(nums[i:j+1])\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\ndef max_sum_subarray(nums):\n    max_sum = float('-inf')\n    \n    sum_of_nums = 0\n    for i in range(len(nums)):\n        sum_of_nums += nums[i]\n        if sum_of_nums > max_sum:\n            max_sum = sum_of_nums\n        if sum_of_nums < 0:\n            sum_of_nums = 0\n    return max_sum\ndef max_sum_subarray_sorting(nums):\n    max_sum = float('-inf')\n    \n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            nums[i], nums[j] = nums[j], nums[i]\n            current_sum = sum(nums[i:j+1])\n            if current_sum > max_sum:\n                max_sum = current_sum\n            nums[i], nums[j] = nums[j], nums[i]\n    return max_sum\ndef max_sum_subarray_dp_top_down(nums):\n    '''\n    if nums is empty\n    return 0\n    else\n    if cur_sum < 0\n    return cur_sum\n    else\n    max_sum = max(max_sum, cur_sum + nums[i])\n    return max_sum\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        max_sum = nums[0]\n        for i in range(1,len(nums)):\n            current_sum = nums[i] + max_sum\n            if current_sum < 0:\n                max_sum = current_sum\n            else:\n                max_sum = max(max_sum, current_sum)\n        return max_sum\ndef max_sum_subarray_dp_bottom_up(nums):\n    '''\n    if nums is empty\n    return 0\n    else\n    if cur_sum < 0\n    return cur_sum\n    else\n    max_sum = max(max_sum, cur_sum + nums[i])\n    return max_sum\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        max_sum = nums[0]\n        for i in range(1,len(nums)):\n            current_sum = nums[i] + max_sum\n            if current_sum < 0:\n                max_sum = current_sum\n            else:\n                max_sum = max(max_sum, current_sum)\n        return max_sum\ndef max_sum_subarray_3_dp_top_down(nums):\n    '''\n    if nums is empty\n    return 0\n    else\n    if cur_sum < 0\n    return cur_sum\n    else\n    max_sum = max(max_sum, cur_sum + nums[i])\n    return max_sum\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        max_sum = nums[0]\n        for i in range(1,len(nums)):\n            current_sum = nums[i] + max_sum\n            if current_sum < 0:\n                max_sum = current_sum\n            else:\n                max_sum = max(max_sum, current_sum)\n        return max_sum\ndef max_sum_subarray_3_dp_bottom_up(nums):\n    '''\n    if nums is empty\n    return 0\n    else\n    if cur_sum < 0\n    return cur_sum\n    else\n    max_sum = max(max_sum, cur_sum + nums[i])\n    return max_sum\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        max_sum = nums[0]\n        for i in range(1,len(nums)):\n            current_sum = nums[i] + max_sum\n            if current_sum < 0:\n                max_sum = current_sum\n            else:\n                max_sum = max(max_sum, current_sum)\n        return max_sum\ndef max_sum_subarray_3_dp_bottom_up_with_cache(nums):\n    '''\n    if nums is empty\n    return 0\n    else\n    if cur_sum < 0\n    return cur_sum\n    else\n    max_sum = max(max_sum, cur_sum + nums[i])\n    return max_sum\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        max_sum = nums[0]\n        for i in range(1,len(nums)):\n            current_sum = nums[i] + max_sum\n            if current_sum < 0:\n                max_sum = current_sum\n            else:\n                max_sum = max(max_sum, current_sum",
        "num_ids": 98
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    if n <= 2:\n        return 0\n    i = 0\n    while i < (n-1):\n        j = i + 1\n        while j < (n):\n            if arr[i]!= arr[j]:\n                count += 1\n            j += 1\n        i += 1\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import Counter\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    l = len(arr)\n    count = 0\n    for i in range(l):\n        for j in range(i+1,l):\n            if (arr[i] > arr[j]):\n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                res +=1\n    return res\n",
        "num_ids": 53
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    \n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    possible_pairs = 0\n    dictionary = {}\n    for i in range(n):\n        if (arr[i] not in dictionary):\n            dictionary[arr[i]] = 0\n        dictionary[arr[i]] += 1\n",
        "num_ids": 60
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if(word == \"\"):\n        return []\n    else:\n        return [char for char in word]\n        \n",
        "num_ids": 30
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word[0]+\"\".join(char if char.isalnum() else \" \" for char in word[1:])\n",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \nprint(split(\"Hi This is first Try\"))\n",
        "num_ids": 22
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    ",
        "num_ids": 10
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n:\n        n, r = divmod(n, 10)\n        yield r\n",
        "num_ids": 25
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # a = int(n)\n    # b = a % 10\n    # c = a//10\n    # while c > 0:\n    #     a = c\n    #     b = a % 10\n    #     c = a//10\n    # print(b)\n    return sum(int(i) for i in str(n))\n",
        "num_ids": 83
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        s += n%10\n        n = n//10\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    return n % 10 + sum_digits(n // 10) if n > 0 else 0\n",
        "num_ids": 26
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n",
        "num_ids": 15
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    sum = 0\n    for i in range(len(n)):\n        sum += int(n[i])\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    result = 0\n    \n    while n > 0:\n        result = result + n % 10\n        n = n // 10\n        \n    return result\n    \ndef sum_digits_v2(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    while n!= 0:\n        result = result + n % 10\n        n = n // 10\n    \n    return result\n    \nprint(sum_digits(123))\nprint(sum_digits_v2(123))\nprint(sum_digits_v2(0))\nprint(sum_digits_v2(10))\nprint(sum_digits_v2(999))\nprint(sum_digits_v2(123456789))\nprint(sum_digits_v2(123456789)",
        "num_ids": 142
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n, int):\n        return None\n    if n == 0:\n        return 0\n    return sum(map(int, str(n)))\n",
        "num_ids": 41
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(len(list1)-i-1):\n            if list1[j] > list1[j+1]:\n                return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n    \nprint(issort_list([3,1,5,7,9]))\nprint(issort_list([1,2,3]))\nprint(issort_list([3,1,5,7]))\nprint(issort_list([5,7,3,1]))\nprint(issort_list([7,5,3,1]))\n",
        "num_ids": 127
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    x = 0\n    y = len(list1)-1\n    while x <= y:\n        if list1[x] > list1[y]:\n            return False\n        x+=1\n        y-=1\n    return True\n    \n    ",
        "num_ids": 60
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>=list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return False\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is sorted\n    if list1 == sorted(list1):\n        print(\"The list is sorted\")\n    else:\n        print(\"The list is not sorted\")\n",
        "num_ids": 45
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    new_list = []\n    for i in range(length):\n        new_list.append({})\n    return new_list\n",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n",
        "num_ids": 23
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return[{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty = []\n    for i in range(length):\n        empty.append({})\n    return empty\n",
        "num_ids": 27
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    for i in range(length):\n        list.append({\"Name\":\"\", \"City\":\"\", \"ZIP\":\"\"})\n    return list\n    \ndef populate_dict(dict):\n    '''\n    Write a function to take a dictionary as an argument, and return\n    a list of values that are not empty.\n    '''\n    dict_copy = dict.copy()\n    for key, value in dict_copy.items():\n        if value!= '':\n            dict[key] = value\n    return dict\n",
        "num_ids": 45
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    \n    if len(list1) == 1:\n        return list1\n    \n    index_of_first_element = 0\n    last_element_in_list = 0\n    \n    for i in range(1, len(list1)):\n        if list1[i][0] <= list1[index_of_first_element][0]:\n            last_element_in_list = i\n        else:\n            break\n    \n    list1 = merge(list1, list1[:last_element_in_list], list1[last_element_in_list:])\n    \n    list1 = sort_sublists(list1)\n    \n    return list1\n    \ndef merge(list1, list2, list3):\n    '''\n    Write a function to merge the given sorted lists.\n    '''\n    \n    merged_list = []\n    \n    index_of_first_element = 0\n    index_of_second_element = 0\n    \n    while index_of_first_element < len(list1) and index_of_second_element < len(list2):\n        if list1[index_of_first_element] < list2[index_of_second_element]:\n            merged_list.append(list1[index_of_first_element])\n            index_of_first_element += 1\n        else:\n            merged_list.append(list2[index_of_second_element])\n            index_of_second_element += 1\n    \n    merged_list += list1[index_of_first_element:]\n    merged_list += list2[index_of_second_element:]\n    \n    return merged_list\n    \ndef sort_sublists_using_insertion(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    \n    if len(list1) == 1:\n        return list1\n    \n    index_of_first_element = 0\n    last_element_in_list = 0\n    \n    for i in range(1, len(list1)):\n        if list1[i][0] <= list1[index_of_first_element][0]:\n            last_element_in_list = i\n        else:\n            break\n    \n    list1 = merge(list1, list1[:last_element_in_list], list1[last_element_in_list:])\n    \n    list1 = sort_sublists_using_insertion(list1)\n    \n    return list1\n    \ndef merge(list1, list2, list3):\n    '''\n    Write a function to merge the given sorted lists.\n    '''\n    \n    merged_list = []\n    \n    index_of_first_element = 0\n    index_of_second_element = 0\n    \n    while index_of_first_element < len(list1) and index_of_second_element < len(list2):\n        if list1[index_of_first_element] < list2[index_of_second_element]:\n            merged_list.append(list1[index_of_first_element])\n            index_of_first_element += 1\n        else:\n            merged_list.append(list2[index_of_second_element])\n            index_of_second_element += 1\n    \n    merged_list += list1[index_of_first_element:]\n    merged_list += list2[index_of_second_element:]\n    \n    return merged_list\n    \ndef sort_sublists_using_insertion_using_buffer(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    \n    if len(list1) == 1:\n        return list1\n    \n    index_of_first_element = 0\n    last_element_in_list = 0\n    \n    for i in range(1, len(list1)):\n        if list1[i][0] <= list1[index_of_first_element][0]:\n            last_element_in_list = i\n        else:\n            break\n    \n    list1 = merge(list1, list1[:last_element_in_list], list1[last_element_in_list:])\n    \n    list1 = sort_sublists_using_insertion_using_buffer(list1)\n    \n    return list1\n    \ndef merge(list1, list2, list3):\n    '''\n    Write a function to merge the given sorted lists.\n    '''\n    \n    merged_list = []\n    \n    index_of_first_element = 0\n    index_of_second_element = 0\n    \n    while index_of_first_element < len(list1) and index_of_second_element < len(list2):\n        if list1[index_of_first_element] < list2[index_of_second_element]:\n            merged_list.append(list1[index_of_first_element])\n            index_of_first_element += 1\n        else:\n            merged_list.append(list2[index_of_second_element])\n            index_of_second_element += 1\n    \n    merged_list += list1[index_of_first_element:]\n    merged_list += list2[index_of_second_element:]\n    \n    return merged_list\n    \ndef sort_sublists_using_selection_using_buffer(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    \n    if len(list1) == 1:\n        return list1\n    \n    index_of_first_element = 0\n    last_element_in_list = 0\n    \n    for i in range(1, len(list1)):\n        if list1[i][0] <= list1[index_of_first_element][0]:\n            last_element_in_list = i\n        else:\n            break\n    \n    list1 = merge(list1, list1[:last_element_in_list], list1[last_element_in_list:])\n    \n    list1 = sort_sublists_using_selection_using_buffer(list1)\n    \n    return list1\n    \ndef merge(list1, list2, list3):\n    '''\n    Write a function to merge the given sorted lists.\n    '''\n    \n    merged_list = []\n    \n    index_of_first_element = 0\n    index_of_second_element = 0\n    \n    while index_of_first_element < len(list1) and index_of_second_element < len(list2):\n        if list1[index_of_first_element] < list2[index_of_second_element]:\n            merged_list.append(list1[index_of_first_element])\n            index_of_first_element += 1\n        else:\n            merged_list.append(list2[index_of_second_element])\n            index_of_second_element += 1\n    \n    merged_list += list1[index_of_first_element:]\n    merged_list += list2[index_of_second_element:]\n    \n    return merged_list\n    \ndef sort_sublists_using_bubble_sort(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    \n    if len(list1) == 1:\n        return list1\n    \n    while True:\n        \n        swapped = False\n        \n        for i in range(1, len(list1)):\n            if list1[i-1] > list1[i]:\n                swapped = True\n                list1[i-1], list1[i] = list1[i], list1[i-1]\n        \n        if not swapped:\n            break\n    \n    list1 = sort_sublists_using_bubble_sor",
        "num_ids": 147
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist1 = list1.copy()\n    length = len(sublist1)\n    for i in range(length):\n        newlist = sublist1[i]\n        newlist.sort()\n        sublist1[i] = newlist\n    return sublist1\n",
        "num_ids": 67
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n",
        "num_ids": 32
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length = len(list1)\n    for i in range(length):\n        list1[i].sort()\n    return list1\n",
        "num_ids": 34
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create a new empty list\n    new_list = []\n    # iterate through each list in list1\n    for i in list1:\n        # sort each list and add it to new_list\n        new_list.append(sorted(i))\n    # return the new_list\n    return new_list\n    ",
        "num_ids": 77
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Pythonic way of doing it\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            for z in range(len(list1) - x - 1):\n                if list1[z][y] > list1[z + 1][y]:\n                    temp = list1[z + 1]\n                    list1[z + 1] = list1[z]\n                    list1[z] = temp\n    return list1\n",
        "num_ids": 116
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # making a list to store original list\n    my_list = []\n    # copy the list of lists\n    list_copy = list1.copy()\n    # iterate through the list of lists\n    for i in range(len(list_copy)):\n        # add the list of sublists to the list\n        my_list.append(list_copy[i])\n        # remove the current list of sublists\n        list_copy.pop(i)\n    # sort each sublist\n    my_list.sort(key=len)\n    # merge the sorted sublists back into a single sorted list\n    my_list.extend(list_copy)\n    return my_list\n",
        "num_ids": 160
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list in list1:\n        if type(list) == list:\n            sort_sublists(list)\n        else:\n            list.sort()\n    return list1\n",
        "num_ids": 44
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key=len)\n    for i in range(len(list1)):\n        list1[i].sort()\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    return [x for x in nums if not(x in seen or seen.add(x))]\n    #return set(nums)\n",
        "num_ids": 41
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i)\n        else:\n            i = i + 1\n    return nums\n",
        "num_ids": 71
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if nums is None:\n        return\n    n = len(nums)\n    print(n)\n    if n == 0:\n        return\n    if n == 1:\n        return nums[0]\n    for i in range(n):\n        print(i)\n        for j in range(i+1, n):\n            print(j)\n            if nums[i] == nums[j]:\n                nums.remove(nums[i])\n                n -= 1\n                break\n",
        "num_ids": 121
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n    return result\n    ",
        "num_ids": 36
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    d = {}\n    for i in nums:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] == 1:\n            return i\n",
        "num_ids": 64
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Removing duplicates from a given set of numbers\n    new_list = []\n    for i in range(0, len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n",
        "num_ids": 70
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    a = 0\n    n = []\n    n = nums\n    unique_list =[]\n    while a < len(n):\n        j = a + 1\n        while j < len(n):\n            if n[a] == n[j]:\n                j += 1\n            else:\n                unique_list.append(n[a])\n                a += 1\n                break\n    print(unique_list)\n",
        "num_ids": 99
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Loop through each list and compare each element with the next element.\n    # If they are not equal, then remove the element from the list.\n    # If they are equal, continue the loop to compare the next element.\n    # Once the list has been compared with the next element, it should be deleted.\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] == nums[j]:\n                nums.remove(nums[i])\n                break\n    return nums\n",
        "num_ids": 137
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Using set to get unique values\n    # return reduce((lambda x, y: x*y), list_data, 1)\n    return reduce(lambda x, y: x*y, set(list_data), 1)\n",
        "num_ids": 54
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    ans = 1\n    for i in list_data:\n        if ans!= 0:\n            ans = ans * i\n    return ans\n",
        "num_ids": 35
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = set(list_data)\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n",
        "num_ids": 38
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    if len(list_data) == 0:\n        return product\n    else:\n        for i in list_data:\n            product *= i\n        return product\n",
        "num_ids": 46
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return max(set(list_data),key = list_data.count) * min(set(list_data),key = list_data.count)\n",
        "num_ids": 38
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for data in list_data:\n        result *= data\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #\n    # product = 1\n    # for i in range(len(list_data)):\n    #     if list_data[i] not in list_data[i+1:]:\n    #         product = product * list_data[i]\n    # return product\n    return reduce(lambda x,y: x*y, list(set(list_data)))\n    \n    \n    \n    \ndef get_list_duplicate(list_data):\n    '''\n    Write a python function to return a list of duplicate values in a list.\n    '''\n    #\n    # duplicates = []\n    # for i in range(len(list_data)):\n    #     if list_data[i] in list_data[i+1:]:\n    #         duplicates.append(list_data[i])\n    # return duplicates\n    return list(set(list_data) - set(list_data[:-1]))\n    \n    \n    \n    \ndef get_list_subset(list_data):\n    '''\n    Write a python function to return a list of the subset of a given list.\n    '''\n    #\n    # subset = []\n    # for i in range(len(list_data)):\n    #     for j in range(i, len(list_data)):\n    #         subset.append(list_data[i:j])\n    # return subset\n    return list(map(lambda x: list_data[:x]+list_data[x+1:], range(len(list_data))))\n    \n    \n    \n    \ndef unique_subset(list_data):\n    '''\n    Write a python function to calculate the product of the unique subset of a given list.\n    '''\n    #\n    # subset = []\n    # for i in range(len(list_data)):\n    #     for j in range(i+1, len(list_data)):\n    #         subset.append(list_data[i:j])\n    # return reduce(lambda x,y: x*y, list(set(subset)))\n    return len(set(tuple(x) for x in list_data))\n    \n    \n    \n    \ndef get_list_diff(list_data):\n    '''\n    Write a python function to return the list of the difference of a given list.\n    '''\n    #\n    # diff = []\n    # for i in range(len(list_data)):\n    #     if i!= list_data.index(min(list_data)):\n    #         diff.append(i)\n    # return diff\n    return [x for x in range(len(list_data)) if x!= list_data.index(min(list_data))]\n    \n    \n    \n    \ndef unique_diff(list_data):\n    '''\n    Write a python function to calculate the product of the unique difference of a given list.\n    '''\n    #\n    # diff = []\n    # for i in range(len(list_data)):\n    #     if i!= list_data.index(min(list_data)):\n    #         diff.append(i)\n    # return reduce(lambda x,y: x*y, list(set(diff)))\n    return len(set(tuple(x) for x in list_data))\n    \n    \n    \n    \ndef get_list_intersect(list_data):\n    '''\n    Write a python function to return the list of the intersection of a given list.\n    '''\n    #\n    # intersect = []\n    # for i in range(len(list_data)):\n    #     if i in list_data:\n    #         intersect.append(i)\n    # return intersect\n    return list(set(list_data) & set(range(len(list_data))))\n    \n    \n    \n    \ndef unique_intersect(list_data):\n    '''\n    Write a python function to calculate the product of the unique intersection of a given list.\n    '''\n    #\n    # intersect = []\n    # for i in range(len(list_data)):\n    #     if i in list_data:\n    #         intersect.append(i)\n    # return reduce(lambda x,y: x*y, list(set(intersect)))\n    return len(set(tuple(x) for x in list_data))\n    \n    \n    \n    \ndef get_list_union(list_data):\n    '''\n    Write a python function to return the list of the union of a given list.\n    '''\n    #\n    # union = []\n    # for i in range(len(list_data)):\n    #     if i not in list_data:\n    #         union.append(i)\n    # return union\n    return list(set(list_data) | set(range(len(list_data))))\n    \n    \n    \n    \ndef unique_union(list_data):\n    '''\n    Write a python function to calculate the product of the unique union of a given list.\n    '''\n    #\n    # union = []\n    # for i in range(len(list_data)):\n    #     if i not in list_data:\n    #         union.append(i)\n    # return reduce(lambda x,y: x*y, list(set(union)))\n    return len(set(tuple(x) for x in list_data))\n    \n    \n    \n    \ndef get_list_diff_between(list_data):\n    '''\n    Write a python function to return the list of the difference between a given list and its reverse.\n    '''\n    #\n    # diff = []\n    # for i in range(len(list_data)):\n    #     if i not in list_data:\n    #         diff.append(i)\n    # return diff\n    return list(set(list_data).difference(set(range(len(list_data)))) )\n    \n    \n    \n    \ndef unique_diff_between(list_data):\n    '''\n    Write a python function to calculate the product of the unique difference between a given list and its reverse.\n    '''\n    #\n    # diff = []\n    # for i in range(len(list_data)):\n    #     if i not in list_data:\n    #         diff.append(i)\n    # return reduce(lambda x,y: x*y, list(set(diff)))\n    return len(set(tuple(x) for x in list_data).difference(set(tuple(x) for x in range(len(list_data)))) )\n    \n    \n    \n    \ndef get_list_intersect_between(list_data):\n    '''\n    Write a python function to return the list of the intersection between a given list and its reverse.\n    '''\n    #\n    # intersect = []\n    # for i in range(len(list_data)):\n    #     if i in list_data:\n    #         intersect.append(i)\n    # return intersect\n    return list(set(list_data).intersection(set(range(len(list_data)))) )\n    \n    \n    \n    \ndef unique_intersect_between(list_data):\n    '''\n    Write a python function to calculate the product of the unique intersection between a given list and its reverse.\n    '''\n    #\n    # intersect = []\n    # for i in range(len(list_data)):\n    #     if i in list_data:\n    #         intersect.append(i)\n    # return reduce(lambda x,y: x*y, list(set(intersect)))\n    return len(set(tuple(x) for x in list_data).intersection(set(tuple(x) for x in range(len(list_data)))) )\n    \n    \n    \n    \ndef get_list_union_between(list_data):\n    '''\n    Write a python function to return the list of the union between a given list and its reverse.\n    '''\n    #\n    # union = []\n    # for i in range(len(list_data)):\n    #     if i not in list_data:\n    #         union.append(i)\n    # return union\n    return list(set(list_data",
        "num_ids": 62
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create set of the numbers\n    numbers = set(list_data)\n    # Iterate through set\n    product = 1\n    for i in numbers:\n        product = product*i\n    return product\n",
        "num_ids": 51
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    list_data = map(int, list_data)\n    product_list = list(list_data)\n",
        "num_ids": 30
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    for i in list_data:\n        if i not in unique_set:\n            unique_set.add(i)\n            unique_prod = i * unique_prod\n        else:\n            continue\n    \n    print(unique_prod)\n    return\n",
        "num_ids": 67
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 2 * pi * r * h + 2 * pi * r**2\n    return S\n",
        "num_ids": 25
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=2*pi*r*h+2*pi*r*2\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    PI = 3.14\n    area = PI*r*h\n    return area\n",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Note: You can solve this problem by following the steps below:\n    # Calculate the area of a cylinder.\n    # Set the radius.\n    # Calculate the surface area.\n    # Return the surface area.\n    from math import pi\n",
        "num_ids": 59
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h\n",
        "num_ids": 14
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surfacearea_cylinder=math.pi*r*r*h\n    return surfacearea_cylinder\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    import math\n    volume_cylinder=math.pi*r*r*h\n    return volume_cylinder\n    \ndef surfacearea_square(l,b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    import math\n    surfacearea_square=2*math.sqrt(l*l+b*b)\n    return surfacearea_square\n    \ndef volume_square(l,b):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    import math\n    volume_square=l*b\n    return volume_square\n    \ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    import math\n    surfacearea_rectangle=2*(a+b)\n    return surfacearea_rectangle\n    \ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    import math\n    volume_rectangle=a*b\n    return volume_rectangle\n    \ndef surfacearea_trapezoid(h,b1,b2):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    import math\n    surfacearea_trapezoid=0.5*(h*(b1+b2))\n    return surfacearea_trapezoid\n    \ndef volume_trapezoid(h,b1,b2):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    import math\n    volume_trapezoid=h*(b1+b2)/2\n    return volume_trapezoid\n    \ndef surfacearea_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    import math\n    surfacearea_parallelogram=math.sqrt(b*b+h*h)\n    return surfacearea_parallelogram\n    \ndef volume_parallelogram(b,h):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    import math\n    volume_parallelogram=b*h\n    return volume_parallelogram\n    \ndef surfacearea_cube(a,b,c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    import math\n    surfacearea_cube=6*math.sqrt(a*a+b*b+c*c)\n    return surfacearea_cube\n    \ndef volume_cube(a,b,c):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    import math\n    volume_cube=a*b*c\n    return volume_cube\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    surfacearea_sphere=4*math.pi*math.pow(r,2)\n    return surfacearea_sphere\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    volume_sphere=4/3*math.pi*math.pow(r,3)\n    return volume_sphere\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surfacearea_cylinder=2*math.pi*r*h\n    return surfacearea_cylinder\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    import math\n    volume_cylinder=math.pi*r*r*h\n    return volume_cylinder\n    \ndef surfacearea_square(l,b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    import math\n    surfacearea_square=math.sqrt(l*l+b*b)\n    return surfacearea_square\n    \ndef volume_square(l,b):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    import math\n    volume_square=l*b\n    return volume_square\n    \ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    import math\n    surfacearea_rectangle=2*(a+b)\n    return surfacearea_rectangle\n    \ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    import math\n    volume_rectangle=a*b\n    return volume_rectangle\n    \ndef surfacearea_trapezoid(h,b1,b2):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    import math\n    surfacearea_trapezoid=0.5*(h*(b1+b2))\n    return surfacearea_trapezoid\n    \ndef volume_trapezoid(h,b1,b2):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    import math\n    volume_trapezoid=h*(b1+b2)/2\n    return volume_trapezoid\n    \ndef surfacearea_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    import math\n    surfacearea_parallelogram=math.sqrt(b*b+h*h)\n    return surfacearea_parallelogram\n    \ndef volume_parallelogram(b,h):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    import math\n    volume_parallelogram=b*h\n    return volume_parallelogram\n    \ndef surfacearea_cube(a,b,c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    import math\n    surfacearea_cube=6*math.sqrt(a*a+b*b+c*c)\n    return surfacearea_cube\n    \ndef volume_cube(a,b,c):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    import math\n    volume_cube=a*b*c\n    return volume_cube\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    surfacearea_sphere=4*math.pi*math.pow(r,2)\n    return surfacearea_sphere\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    volume_sphere=4/3*math.pi*math.pow(r,3)\n    return volume_sphere\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surfacearea_cylinder=2*math.pi*r*h\n    return surfacearea_cylinder\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    import math\n    volume_cylinder=math.pi*r*r*h\n    return volume_cylinder\n    \ndef surfacearea_square(l,b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    import math\n    surfacearea_square=math.sqrt(l*l+b*b)\n    return surfacearea_square\n    \ndef volume_square(l,b):\n    '''\n    Write a function to find the volume of a square.\n    ''",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    volume = pi*r**2*h\n    surface_area = 2*pi*r*h + 2*pi*r**2\n    return volume, surface_area\n",
        "num_ids": 49
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # This is basically an equation of the area of a cylinder which is \n    # given by A = 2\u03c0r2 + 2\u03c0rh\n    \n    pi = 3.14\n    area = (2*pi*r*r) + (2*pi*r*h)\n    return area\n",
        "num_ids": 70
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.1416\n    area = (2 * pi * r * h) + ((pi * r**2) * 2)\n    return area\n",
        "num_ids": 38
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r**2\n",
        "num_ids": 24
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    i = 0\n    j = 0\n    if n > m:\n        i = 0\n        j = 0\n        while i < m and j < n:\n            if A[j] == B[i]:\n                j += 1\n                i += 1\n            else:\n                j += 1\n        if i == m:\n            return True\n        else:\n            return False\n    else:\n        j = 0\n        while i < n and j < m:\n            if A[i] == B[j]:\n                i += 1\n                j += 1\n            else:\n                i += 1\n        if i == n:\n            return True\n        else:\n            return False\n",
        "num_ids": 176
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def is_sublist(A,B):\n        if A==B or A==None:\n            return True\n        if not isinstance(A,list) and not isinstance(B,list):\n            return False\n        if len(A)!=len(B):\n            return False\n        for i in A:\n            if not isinstance(i,list):\n                return False\n        for i in B:\n            if not isinstance(i,list):\n                return False\n        for i in A:\n            if is_sublist(i,B):\n                return True\n        return False\n    return is_sublist(A,B)\n    '''\n    Another way\n    '''\n    def is_Sub_Array(A,B): \n        if A==None or B==None:\n            return False\n        if len(A)!=len(B):\n            return False\n        if is_sublist(A,B):\n            return True\n        else:\n            return False\n    '''\n    Another way\n    '''\n    def is_Sub_Array(A,B): \n        if A==None or B==None:\n            return False\n        if len(A)!=len(B):\n            return False\n        return any(sublist in A for sublist in B)\n    '''\n    Another way\n    '''\n    def is_Sub_Array(A,B): \n        if A==None or B==None:\n            return False\n        if len(A)!=len(B):\n            return False\n        return all(sublist in A for sublist in B)\n",
        "num_ids": 62
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    l=len(B)\n    i=0\n    j=0\n    flag=0\n    if(len(A)==l):\n        while(i<l):\n            if(A[i]==B[j]):\n                i+=1\n                j+=1\n            else:\n                flag=1\n                break\n        if(flag==0):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"Invalid\")\n",
        "num_ids": 114
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in A:\n        if i in B:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    for i in A:\n        if(i in B):\n            continue\n        else:\n            return False\n    return True\n    \ndef is_sublist(A,B):\n    '''\n    Write a python function to check whether a list is a sublist of another or not.\n    '''\n    \n    lenA=len(A)\n    lenB=len(B)\n    for i in range(0,lenA):\n        if(A[i] in B):\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    elif len(A) < len(B):\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if A[i:]==B[i:]:\n            return True\n    return False\nA = [2,3,1,2]\nB = [2,3]\nprint(is_Sub_Array(A,B))\nA = [0,1,1]\nB = [0]\nprint(is_Sub_Array(A,B))\nA = []\nB = []\nprint(is_Sub_Array(A,B))\nA = []\nB = [1]\nprint(is_Sub_Array(A,B))\nA = [1,2,3]\nB = [1,2]\nprint(is_Sub_Array(A,B))\nA = []\nB = []\nprint(is_Sub_Array(A,B))\nA = []\nB = [1]\nprint(is_Sub_Array(A,B))\n",
        "num_ids": 216
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    elif len(A) == len(B):\n        if A[:] == B[:]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False\n    for i in range(0,len(A)): \n        if A[i] not in B: \n            return False\n    return True \n",
        "num_ids": 55
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for x in A:\n        if x not in B:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n<0):\n        return -1\n    elif(n==0):\n        return 1\n    else:\n        i=1\n        fact=1\n        while(i<=n):\n            fact=fact*i\n            i=i+1\n        last_num=fact%10\n        return last_num\n",
        "num_ids": 80
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #your code here\n    count = 1\n    i = 1\n    while i <= n:\n        i *= 10\n        count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n>9):\n        return n%10\n    else:\n        return n\n",
        "num_ids": 24
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 1\n    count = 1\n    while n // (10 ** i)!= 0:\n        count = count * (n // (10 ** i))\n        i = i + 1\n    return count % 10\n",
        "num_ids": 52
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n > 9:\n        n //= 10\n    return n\n",
        "num_ids": 19
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    ans = 1\n    for i in range(1,n+1):\n        ans = ans*i\n    return(ans)\n",
        "num_ids": 33
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact=fact*i\n    \n    num=str(fact)\n    return num[-1]\n",
        "num_ids": 45
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n == 0):\n        return 1\n    return n % 10 * last_Digit_Factorial(n//10)\n",
        "num_ids": 33
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        raise ValueError(\"Input can't be less than 0\")\n    if n == 1:\n        return n\n    else:\n        return n%10*(10*last_Digit_Factorial(n//10))\n",
        "num_ids": 60
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if (n < 0): \n        print(\"Factorial does not exist for negative numbers\") \n        return\n    if (n == 0 or n == 1): \n        return n \n    i = 1\n    while (i <= n): \n        factorial = factorial * i \n        i = i + 1\n    return factorial % 10\n",
        "num_ids": 90
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter_list = []\n    \n    if len(list1) == len(list2) and len(list1) == len(list3):\n        for i in range(len(list1)):\n            inter_list.append(list1[i])\n            inter_list.append(list2[i])\n            inter_list.append(list3[i])\n        return inter_list\n    else:\n        print(\"List sizes are different.\")\n    \nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\nprint(interleave_lists([4,5,6],[7,8,9],[1,2,3]))\nprint(interleave_lists([9,8,7],[1,2,3],[4,5,6]))\nprint(interleave_lists([2,3,4],[5,6,7],[8,9,10]))",
        "num_ids": 217
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list3[i])\n    return l\n",
        "num_ids": 57
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert len(list1) == len(list2) == len(list3)\n    return list(map(lambda x,y,z:x+y+z,list1,list2,list3))\n",
        "num_ids": 51
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for x in range(len(list1)):\n        list3.append(list1[x])\n        list3.append(list2[x])\n        list3.append(list3[x])\n    return list3\n",
        "num_ids": 56
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.extend((list1[i],list2[i],list3[i]))\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i],list2[i],list3[i]])\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == 0 or len(list2) == 0 or len(list3) == 0:\n        return []\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return []\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list3[i])\n    return l\n",
        "num_ids": 118
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_ele = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_ele.append(test_tup1[i])\n    return diff_ele\n",
        "num_ids": 68
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = []\n    lst2 = []\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    for x, y in zip(test_tup1, test_tup2):\n        if x!= y:\n            if x not in lst1:\n                lst1.append(x)\n            if y not in lst2:\n                lst2.append(y)\n    return lst1, lst2\n",
        "num_ids": 119
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    #print(tup1)\n    #print(tup2)\n    diff = tup1 ^ tup2\n    return list(diff)\n",
        "num_ids": 88
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in test_tup1:\n        if i not in test_tup2:\n            print(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            print(i)\n",
        "num_ids": 60
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    d = {}\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    d = s1.intersection(s2)\n    print(d)\n    return d\n",
        "num_ids": 56
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    i = 0\n    j = 0\n    res = []\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i]!= test_tup2[j]:\n            res.append((test_tup1[i], test_tup2[j]))\n        i += 1\n        j += 1\n    return res\n",
        "num_ids": 99
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i,j in zip(test_tup1, test_tup2):\n        if i!= j:\n            dissimilar.append(i)\n    return dissimilar\n",
        "num_ids": 53
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code here\n    \n    a = set(test_tup1)\n    b = set(test_tup2)\n    c = b - a\n    print(c)\n    \n",
        "num_ids": 49
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = {}\n    for element in test_tup1:\n        if element in test_tup2:\n            pass\n        else:\n            result[element] = element\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list\n",
        "num_ids": 73
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple,tuple):\n        raise TypeError(\"test_tuple is not a tuple!\")\n    elif not isinstance(even_fnc,function):\n        raise TypeError(\"even_fnc is not a function!\")\n    else:\n        for x in test_tuple:\n            if not isinstance(x,tuple):\n                raise TypeError(\"Only tuple can be nested!\")\n            else:\n                even_fnc(x)\n        return tuple(i for i in test_tuple if all(type(j)==int for j in i))",
        "num_ids": 142
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = tuple()\n    for i in range(len(test_tuple)): \n        if test_tuple[i]%2 == 0: \n            new_tuple += test_tuple[i], \n        elif test_tuple[i]%2!= 0:\n            continue \n    return even_fnc(new_tuple)\n",
        "num_ids": 92
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for each_pair in test_tuple:\n        if type(each_pair) is tuple:\n            even_ele(each_pair, even_fnc)\n        else:\n            if even_fnc(each_pair):\n                test_tuple.remove(each_pair)\n    return test_tuple\n",
        "num_ids": 77
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    if type(test_tuple) is not tuple:\n        return \"Only tuple input allowed\"\n    else:\n        for i in test_tuple:\n            if even_fnc(i):\n                new_list.append(i)\n        return tuple(new_list)\n",
        "num_ids": 75
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = []\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            even_lst.append(test_tuple[i])\n    return even_lst\n",
        "num_ids": 64
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc,test_tuple))\n",
        "num_ids": 19
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple,tuple) is False:\n        return False\n    if isinstance(test_tuple,tuple) is True:\n        test_tuple = tuple(test_tuple)\n        return even_ele(tuple(filter(lambda x: x%2 == 0, test_tuple)),even_fnc)\n",
        "num_ids": 85
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple) and isinstance(even_fnc, tuple):\n        for each in test_tuple:\n            if isinstance(each, tuple):\n                even_ele(each, even_fnc)\n            elif each % 2!= 0:\n                return\n            else:\n                if even_fnc == even:\n                    even_fnc += (even, )\n        test_tuple = even_fnc\n    elif isinstance(test_tuple, tuple):\n        for each in test_tuple:\n            if isinstance(each, tuple):\n                even_ele(each, even_fnc)\n            elif each % 2!= 0:\n                return\n        test_tuple = even_fnc\n    else:\n        return \n    return test_tuple\n",
        "num_ids": 196
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple)!= tuple:\n        raise TypeError('Input should be a tuple')\n    if len(test_tuple) == 1:\n        return test_tuple[0]\n    return even_ele(tuple(x for x in test_tuple if even_fnc(x)), even_fnc)\n",
        "num_ids": 81
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_dict = {}\n    for tup in test_tuple: \n        for i in range(0, len(tup)):\n            if i % 2 == 0:\n                even_dict[i] = even_fnc(tup[i])\n            else:\n                even_dict[i] = tup[i]\n    return even_dict\n",
        "num_ids": 88
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (1/3)*b*s\n    return surface_area\nb = float(input('Enter the base of the pyramid: '))\ns = float(input('Enter the height of the pyramid: '))\nsurf_area = surface_Area(b,s)\nprint(f'The surface area of the pyramid is {surf_area}.')",
        "num_ids": 87
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #base\n    a = b*s\n    #height\n    h = b*2\n    #surface Area\n    s = a*h/2\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    print(b * s)\n",
        "num_ids": 14
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = (b**2) * 3.14\n    print(\"The surface area of the square pyramid with given base edge and height is\", s)\n",
        "num_ids": 36
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (4*(b*s)+(4*b*(s**2)+(2*s*b)**2)**0.5)\n    \n",
        "num_ids": 40
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) * 2 + (b * s) / 2\n    return area",
        "num_ids": 24
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    def surface_Area(b,s):\n        '''\n        Write a python function to find the surface area of a square pyramid with a given base edge and height.\n        '''\n        def surface_Area(b,s):\n            '''\n            Write a python function to find the surface area of a square pyramid with a given base edge and height.\n            '''\n            def surface_Area(b,s):\n                '''\n                Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                '''\n                def surface_Area(b,s):\n                    '''\n                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                    '''\n                    def surface_Area(b,s):\n                        '''\n                        Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                        '''\n                        def surface_Area(b,s):\n                            '''\n                            Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                            '''\n                            def surface_Area(b,s):\n                                '''\n                                Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                '''\n                                def surface_Area(b,s):\n                                    '''\n                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                    '''\n                                    def surface_Area(b,s):\n                                        '''\n                                        Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                        '''\n                                        def surface_Area(b,s):\n                                            '''\n                                            Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                            '''\n                                            def surface_Area(b,s):\n                                                '''\n                                                Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                '''\n                                                def surface_Area(b,s):\n                                                    '''\n                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                    '''\n                                                    def surface_Area(b,s):\n                                                        '''\n                                                        Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                        '''\n                                                        def surface_Area(b,s):\n                                                            '''\n                                                            Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                            '''\n                                                            def surface_Area(b,s):\n                                                                '''\n                                                                Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                '''\n                                                                def surface_Area(b,s):\n                                                                    '''\n                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                    '''\n                                                                    def surface_Area(b,s):\n                                                                        '''\n                                                                        Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                        '''\n                                                                        def surface_Area(b,s):\n                                                                            '''\n                                                                            Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                            '''\n                                                                            def surface_Area(b,s):\n                                                                                '''\n                                                                                Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                '''\n                                                                                def surface_Area(b,s):\n                                                                                    '''\n                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                    '''\n                                                                                    def surface_Area(b,s):\n                                                                                        '''\n                                                                                        Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                        '''\n                                                                                        def surface_Area(b,s):\n                                                                                            '''\n                                                                                            Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                            '''\n                                                                                            def surface_Area(b,s):\n                                                                                                '''\n                                                                                                Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                '''\n                                                                                                def surface_Area(b,s):\n                                                                                                '''\n                                                                                                Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                '''\n                                                                                                def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                    '''\n                                                                                                    def surface_Area(b,s):\n                                                                                                    '''\n                                                                                                    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n                                                                                                ",
        "num_ids": 32
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=s*b\n    print(\"The Surface Area is:\",a)\n",
        "num_ids": 21
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = (0.5 * (b ** 2) * s)\n    return A\n",
        "num_ids": 23
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (s**2)/3\n",
        "num_ids": 11
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Yes it is empty\")\n    else:\n        print(\"No it is not empty\")\n",
        "num_ids": 36
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n",
        "num_ids": 36
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n",
        "num_ids": 36
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return(True)\n    else:\n        return(False)\n",
        "num_ids": 24
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The Dictionary is empty\")\n    else:\n        print(\"The Dictionary is not empty\")\nmy_dict({\"v1\":1,\"v2\":2})\n",
        "num_ids": 52
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "num_ids": 9
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "num_ids": 9
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n",
        "num_ids": 43
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    from math import factorial\n    return (factorial(num) / (factorial(2*num) * (factorial(num))))\n",
        "num_ids": 34
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return (catalan_number(num-1) + (2*num - 1)*catalan_number(num - 2))\n",
        "num_ids": 47
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(n):\n        if n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return factorial(2*num)/(factorial(num) * factorial(num+1))\n",
        "num_ids": 61
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    t = 0\n    for i in range(num):\n        t += catalan_number(i) * catalan_number(num-i-1)\n    return t\n",
        "num_ids": 54
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return ((2*num) * catalan_number(num-1)) // (num-1)\n",
        "num_ids": 41
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    res = 1\n    while n < num:\n        res = res * (n+1)\n        n += 1\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    a = 1\n    for i in range(0,num):\n        a = a * (2*i+1)//(i+1)\n        n = n + a\n    return n\n",
        "num_ids": 53
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    total = 1\n    for i in range(num):\n        total = total*(2*i+1)//(i+1)\n    return total\n",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan = 0\n    catalan_list = []\n",
        "num_ids": 21
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb = re.findall(r'\\bly\\b',text)\n    \n    if len(adverb) == 0:\n        return None\n    else:\n        return adverb\n",
        "num_ids": 47
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # look for adverbs ending with ly\n    adverb_regex = re.compile(r'ly$')\n    for m in re.finditer(adverb_regex, text):\n        # return both the string and its position\n        return (m.group(0), m.span())\n",
        "num_ids": 72
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if \"ly\" in text:\n        return \"present\",[text.find(\"ly\")]\n    elif \"er\" in text:\n        return \"present\",[text.find(\"er\")]\n    elif \"ly\" in text[:-1]:\n        return \"past\",[text.find(\"ly\")]\n    return \"invalid\",[]\n",
        "num_ids": 84
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(0,len(text)):\n        if text[i]=='ly':\n            adverbs.append(i)\n    return adverbs\n",
        "num_ids": 47
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    list_adverbs = []\n    list_positions = []\n    for adverb in re.finditer(r'ly|not|never|n\\'t', text):\n        list_adverbs.append(adverb.group())\n        list_positions.append(adverb.span())\n    return list_adverbs, list_positions\n",
        "num_ids": 83
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adj = r\"ly\"\n    print(re.findall(r\"ly$\",text))\n    print(re.findall(adj,text))\n    for x in re.findall(r\"ly$\",text):\n        print(x)\ndef get_phrase_len(text):\n    '''\n    Write a function that returns the length of the first sentence in a string.\n    '''\n    print(len(re.search('(?<=\\n).+', text).group()))\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    punctuation = '''!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~'''\n    no_punct = \"\"\n    for char in text:\n        if char not in punctuation:\n            no_punct = no_punct + char\n    print(no_punct)\ndef remove_punctuation2(text):\n    '''\n    Write a function that remove punctuation from a string.\n    '''\n    punctuation = '''!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~'''\n    no_punct = \"\"\n    for char in text:\n        if char not in punctuation:\n            no_punct = no_punct + char\n    print(no_punct)\ndef count_word(text):\n    '''\n    Write a function to find the number of words in a given string.\n    '''\n    print(len(text.split()))\ndef count_word2(text):\n    '''\n    Write a function that returns the number of words in a given string.\n    '''\n    print(len(text.split()))\ndef contains_letter(text):\n    '''\n    Write a function that returns true if a given string contains any letters and false otherwise.\n    '''\n    print('f')\n    pattern = re.compile('[a-zA-Z]')\n    if pattern.search(text):\n        print('true')\n    else:\n        print('false')\ndef contains_letter2(text):\n    '''\n    Write a function that returns true if a given string contains any letters and false otherwise.\n    '''\n    pattern = re.compile('[a-zA-Z]')\n    if pattern.search(text):\n        print('true')\n    else:\n        print('false')\ndef count_sentences(text):\n    '''\n    Write a function to find the number of sentences in a given string.\n    '''\n    print(len(re.findall('(?<=.\\n).+', text)))\ndef count_sentences2(text):\n    '''\n    Write a function that returns the number of sentences in a given string.\n    '''\n    print(len(re.findall('(?<=.\\n).+', text)))\ndef is_all_caps(text):\n    '''\n    Write a function that returns true if all the words in a given string are capitalized and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if word.isupper() == False:\n            return False\n    return True\ndef is_all_caps2(text):\n    '''\n    Write a function that returns true if all the words in a given string are capitalized and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if word.isupper() == False:\n            return False\n    return True\ndef is_all_lower(text):\n    '''\n    Write a function that returns true if all the words in a given string are lowercase and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if word.islower() == False:\n            return False\n    return True\ndef is_all_lower2(text):\n    '''\n    Write a function that returns true if all the words in a given string are lowercase and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if word.islower() == False:\n            return False\n    return True\ndef has_dash(text):\n    '''\n    Write a function that returns true if a given string contains a dash and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \"-\" in word:\n            return True\n    return False\ndef has_dash2(text):\n    '''\n    Write a function that returns true if a given string contains a dash and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \"-\" in word:\n            return True\n    return False\ndef has_comma(text):\n    '''\n    Write a function that returns true if a given string contains a comma and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \",\" in word:\n            return True\n    return False\ndef has_comma2(text):\n    '''\n    Write a function that returns true if a given string contains a comma and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \",\" in word:\n            return True\n    return False\ndef has_question_mark(text):\n    '''\n    Write a function that returns true if a given string contains a question mark and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \"?\" in word:\n            return True\n    return False\ndef has_question_mark2(text):\n    '''\n    Write a function that returns true if a given string contains a question mark and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \"?\" in word:\n            return True\n    return False\ndef has_space(text):\n    '''\n    Write a function that returns true if a given string contains a space and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \" \" in word:\n            return True\n    return False\ndef has_space2(text):\n    '''\n    Write a function that returns true if a given string contains a space and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \" \" in word:\n            return True\n    return False\ndef has_exclamation_mark(text):\n    '''\n    Write a function that returns true if a given string contains an exclamation mark and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \"!\" in word:\n            return True\n    return False\ndef has_exclamation_mark2(text):\n    '''\n    Write a function that returns true if a given string contains an exclamation mark and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \"!\" in word:\n            return True\n    return False\ndef has_symbol(text):\n    '''\n    Write a function that returns true if a given string contains any of these symbols and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \"!\" in word:\n            return True\n    return False\ndef has_symbol2(text):\n    '''\n    Write a function that returns true if a given string contains any of these symbols and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if \"!\" in word:\n            return True\n    return False\ndef has_digits(text):\n    '''\n    Write a function that returns true if a given string contains any digits and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if word.isdigit():\n            return True\n    return False\ndef has_digits2(text):\n    '''\n    Write a function that returns true if a given string contains any digits and false otherwise.\n    '''\n    text = text.split()\n    for word in text:\n        if word.isdigit():\n            return True\n    return False\ndef count_letters(text):\n    '''\n    Write a function that returns the number of letters in a given string.\n    '''\n    text ",
        "num_ids": 5
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.finditer(r'\\bly$', text)\n    for i, match in enumerate(adverbs):\n        adverb = text[match.start()-1:]\n        if adverb == 'ly':\n            print(i, match.start())\n",
        "num_ids": 66
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if len(text)<3:\n        return text\n    start=0\n    for i in range(len(text)):\n        if text[i]=='s':\n            start=i\n            break\n    for i in range(start,len(text)):\n        if text[i]=='e':\n            return text[start:i+1]\n    return text\n",
        "num_ids": 92
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs_dict = {'a': 'at', 'ad': 'adv', 'adp': 'prep', 'b': 'by', 'c': 'ch', 'cd': 'd', 'f': 'ft', 'g': 'gr', 'h': 'hr',\n    'i': 'in', 'j': 'j', 'k': 'ken', 'l': 'l','m':'m', 'n': 'n', 'o': 'of', 'p': 'pl', 'q': 'que', 'r':'re',\n    's':'s', 't': 't', 'u': 'un', 'v': 'v', 'w': 'w', 'x': 'x', 'y': 'y', 'z': 'z'}\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] in adverbs_dict.keys():\n            if text[i] == 'ly':\n                adverbs.append(i)\n    return adverbs\n",
        "num_ids": 234
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.findall(r'(ly)*(ly|[a-z])', text)\n    if match:\n        return match[0]\n    else:\n        return None\n",
        "num_ids": 47
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    m = n\n    heap = []\n    for i,j in items:\n        heapq.heappush(heap, -j)\n        if len(heap) > m:\n            heapq.heappop(heap)\n",
        "num_ids": 64
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1], reverse=True)\n    return items[:n]\n",
        "num_ids": 29
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,(i[1],i[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n",
        "num_ids": 66
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x:x[1],reverse=True)\n    h = []\n    for i in range(n):\n        heapq.heappush(h,items[i][0])\n    return h\n",
        "num_ids": 57
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    x = []\n    for i in items:\n        x.append(i[1])\n    heapq.heapify(x)\n    return heapq.nlargest(n,x)\n",
        "num_ids": 49
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1], reverse=True)\n    return items[:n]\n",
        "num_ids": 29
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    expensive_list = []\n    for i in items:\n        heapq.heappush(heap,(-i[2],i[0],i[1]))\n        if len(expensive_list) >= n:\n            expensive_list.pop()\n    for i in heap:\n        expensive_list.append(i[1:])\n    return expensive_list\n",
        "num_ids": 95
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    for i in range(n):\n        heapq.heappush(h,(-1*items[i],items[i]))\n",
        "num_ids": 40
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key = lambda x: x[1], reverse = True)\n    return items[:n]\n",
        "num_ids": 29
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    hp=[]\n    heapq.heapify(hp)\n    for item in items:\n        if len(hp)<n:\n            heapq.heappush(hp,item)\n        else:\n            if item>hp[0]:\n                heapq.heapreplace(hp,item)\n    return hp\n",
        "num_ids": 81
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return l[:n] + split_Arr(l[n:], n - 1)\n",
        "num_ids": 40
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    return l[0:n]+l[n:len(l)]\n",
        "num_ids": 21
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"The list is too short to be splitted\")\n        return\n    elif len(l) == n:\n        return l\n    else:\n        return l[:n] + l[n:][::-1]\n",
        "num_ids": 66
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    temp_list = l[:n]\n    temp_list.extend(l[n+1:])\n    return temp_list\n",
        "num_ids": 35
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if(n==0):\n        return l\n",
        "num_ids": 14
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) > 0:\n        if n > 0:\n            l1 = l[0:n]\n            l2 = l[n:]\n            return l1 + l2\n        else:\n            return []\n    else:\n        return []\n    \n",
        "num_ids": 65
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    k=len(l)-1\n    for i in range(0,n-1):\n        l=l[0:k]\n        k=k-1\n    l=l+l[0:n]\n    return l\n",
        "num_ids": 57
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n + 1:]\n",
        "num_ids": 17
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    n = len(l)\n    return l[:n // 2] + l[n // 2 + 1:]\n",
        "num_ids": 29
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "num_ids": 14
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_tuple=tuple(listx)\n    return new_tuple\n",
        "num_ids": 22
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n",
        "num_ids": 17
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_list = list(listx)\n    tuple_list = tuple(new_list)\n    return tuple_list\n",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \nprint(list_tuple([1,2,3,4]))\nprint(list_tuple((1,2,3,4)))\n",
        "num_ids": 45
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = nums[0]\n    small = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < small:\n            small = nums[i]\n        elif nums[i] > big:\n            big = nums[i]\n",
        "num_ids": 76
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = 0\n    min = 0\n    for i in nums:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    diff = max - min\n    return diff\n",
        "num_ids": 55
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return abs(nums[0] - nums[-1])\n",
        "num_ids": 19
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest\n    \n",
        "num_ids": 29
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n",
        "num_ids": 15
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = float('-inf')\n    small = float('inf')\n    for i in nums:\n        if i > big:\n            big = i\n        elif i < small:\n            small = i\n    return big - small\n",
        "num_ids": 58
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    start = int(math.floor(math.sqrt(a)) * math.sqrt(math.sqrt(a)))\n    end = int(math.ceil(math.sqrt(b)) * math.sqrt(math.sqrt(b)))\n    \n    return sum([i for i in range(start, end+1) if i*i == i])\n",
        "num_ids": 89
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print(f'\\nPerfect Squares between {a} and {b}')\n    for i in range(a, b + 1):\n        if (i**2 == i):\n            print(i)\n",
        "num_ids": 51
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = 1\n    while x < a:\n        x = x + 1\n    while x <= b:\n        if x**2 == a or x**2 == b:\n            print(x)\n        x = x + 1\n",
        "num_ids": 56
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # The idea is to find the smallest x such that x^2 > a and x^2 < b.\n    # So first, we need to choose a lower bound. Then we can find the upper bound.\n    # The difference between them is the difference between them squared.\n    # The minimum difference is guaranteed by just comparing to itself.\n    # \n    # Since we can find the number from two lines, we need to find the maximum number between them.\n    # So we can find the maximum number between these two numbers by multiplying them.\n    # If we were doing this by multiplying each number by itself, it would be half of the difference\n    # because both numbers should be squared. \n    \n    # So what we do is to set lower bound as smallest number between a and b, and upper bound as\n    # the largest number between a and b.\n    # Now, the answer is going to be the product between lower and upper.\n    \n    # But let's write a function to solve this question.\n    # We can use the idea of Bisection Search to solve this problem.\n    # We can use a while loop, and stop searching when the difference between upper and lower is less than 1.\n    # That is, the difference between them is less than 1.\n    # We can use a while loop to search for x, and it must be in the interval\n    # a <= x <= b\n    # The following is an example.\n    \n    lower = a\n    upper = b\n    \n    while lower <= upper:\n        middle = (lower + upper) // 2\n        \n        squared_middle = middle * middle\n        \n        if squared_middle == a:\n            return middle\n            \n        elif squared_middle < a:\n            lower = middle + 1\n            \n        elif squared_middle > b:\n            upper = middle - 1\n    \n    # Note that this while loop only finds the number that satisfies the following conditions:\n    # The lower bound must be <= the middle,\n    # and the middle must be <= the upper bound.\n    \n    # So the first thing we need to do is find the middle. \n    # Because there can be no perfect squares between two numbers in the given range.\n    # So the first thing we need to do is find the middle.\n    # Since we need to find the number which satisfies the condition above,\n    # we can use the Binary Search approach.\n    # \n    # The idea behind this is that if we want to find the number which satisfies the condition above,\n    # we need to know the left and right bounds of the number.\n    # So, we know that a number is unique when it satisfies the condition.\n    # Hence we can use Binary Search to find the left and right bound of a number.\n    # Let's write the function that will find the left bound.\n    \n    def find_left_bound(number):\n        '''\n        Write a function that will find the left bound of a number.\n        '''\n        # The idea is to find the number smaller than the middle by multiplying that number by 2.\n        # The left bound will then be equal to the number multiplied by 2.\n        # If the number is at the left edge, then the left bound is 0.\n        \n        left = number\n        \n        while left > 0:\n            left = left // 2\n            \n        return left\n    \n    # Now we need to write the function that will find the right bound.\n    # In order to find the right bound, we need to find the middle and the difference between the middle and the number.\n    # We can also use the same idea as the left boundary, but we need to set the upper bound to the middle.\n    \n    def find_right_bound(number):\n        '''\n        Write a function that will find the right bound of a number.\n        '''\n        # The idea is to find the number greater than the middle by dividing the middle by 2.\n        # The right bound will then be equal to the number divided by 2.\n        # If the number is at the right edge, then the right bound is 1.\n        \n        right = number\n        \n        while right > 1:\n            right = right // 2\n            \n        return right\n    \n    # The left and right bounds can be easily found using Binary Search.\n    # Now, we need to find the largest number between these two bounds.\n    # We can use the same idea as left and right bounds.\n    \n    def find_greatest(number_1, number_2):\n        '''\n        Write a function that will find the greatest number between two numbers.\n        '''\n        # The idea is to find the minimum between the two numbers.\n        # Then we can find the maximum between the two numbers.\n        \n        greatest = number_1\n        \n        if number_2 > number_1:\n            greatest = number_2\n        \n        return greatest\n    \n    # Now we need to find the greatest number between the left bound and the middle.\n    # The maximum between the left and middle is the largest number between the two bounds.\n    # The minimum between the middle and the right bound is the smallest number between the two bounds.\n    # We can use the same idea as the left and right bounds.\n    \n    def find_greatest_between_left_and_middle(number_1, number_2):\n        '''\n        Write a function that will find the greatest number between the left bound and the middle.\n        '''\n        # The idea is to find the maximum between the left and middle.\n        # The minimum between the middle and the right is the smallest number between the two bounds.\n        \n        greatest = find_greatest(number_1, number_2)\n        \n        if number_2 > number_1:\n            greatest = find_greatest(number_2, number_1)\n        \n        return greatest\n    \n    # Now we need to find the smallest number between the middle and the right.\n    # The minimum between the middle and the left is the largest number between the two bounds.\n    \n    def find_smallest_between_middle_and_right(number_1, number_2):\n        '''\n        Write a function that will find the smallest number between the middle and the right.\n        '''\n        # The idea is to find the minimum between the middle and the right.\n        # The maximum between the middle and the left is the smallest number between the two bounds.\n        \n        smallest = find_smallest(number_1, number_2)\n        \n        if number_2 < number_1:\n            smallest = find_smallest(number_2, number_1)\n        \n        return smallest\n    \n    # Now we need to find the smallest number between the left and the middle.\n    # The minimum between the left and the middle is the smallest number between the two bounds.\n    \n    def find_smallest_between_left_and_middle(number_1, number_2):\n        '''\n        Write a function that will find the smallest number between the left and the middle.\n        '''\n        # The idea is to find the smallest between the left and the middle.\n        # The maximum between the left and the middle is the smallest number between the two bounds.\n        \n        smallest = find_smallest(number_1, number_2)\n        \n        if number_2 < number_1:\n            smallest = find_smallest(number_2, number_1)\n        \n        return smallest\n    \n    # Now we need to find the smallest number between the middle and the right.\n    # The maximum between the middle and the right is the largest number between the two bounds.\n    \n    def find_smallest_between_middle_and_right(number_1, number_2):\n        '''\n        Write a function that will find the smallest number between the middle and the right.\n        '''\n        # The idea is to find the smallest between the middle and the right.\n        # The minimum between the middle and the left is the smallest number between the two bounds.\n        \n        smallest = find_smallest(number_1, number_2)\n        \n        if number_1 < number_2:\n            smallest = find_smallest(number_1, number_2)\n        \n        return smallest\n    \n    # So now we need to search for the perfect square.\n    # The smallest number between the left and the middle is the perfect square.\n    # The maximum between the middle and the right is the perfect square.\n    \n    # Let's write a function that will find the perfect square.\n    # We can use Binary Search to find the left and right.\n    \n    def find_perfect_square(number):\n        '''\n        Write a function that will find the perfect square.\n        '''\n        # The idea is to find the number tha",
        "num_ids": 12
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return sum([i**2 for i in range(a,b) if i**2 == i])\n",
        "num_ids": 26
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == i:\n            print(i)\n",
        "num_ids": 30
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def gen_squares(n):\n        for i in range(n):\n            yield i**2\n    n = int(a)\n    m = int(b)\n    if n == 0:\n        raise ValueError('Input 0')\n    if n > m:\n        return gen_squares(n)\n    else:\n        return gen_squares(m)\n",
        "num_ids": 91
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n",
        "num_ids": 18
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a <= 1:\n        return None\n    if a < b:\n        return None\n    min_num = int(math.sqrt(a))\n    max_num = int(math.sqrt(b))\n    if a == min_num and b == max_num:\n        return min_num\n    return max(min_num, max_num) ** 2\n",
        "num_ids": 90
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = set()\n    for i in range(a, b+1):\n        if i == sqrt(i):\n            squares.add(i)\n    return squares\n",
        "num_ids": 45
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.sin(y),y*cmath.cos(y)\ndef find_min(start,end):\n    '''\n    Write a function to find the min difference between consecutive elements in a sequence.\n    '''\n    return min(end-start)\ndef find_min_hash_tuple(a):\n    '''\n    Write a function to find the minimum difference between consecutive elements in a sequence.\n    '''\n    min_diff = a[0]\n    for i in range(1,len(a)):\n        min_diff = min(min_diff,abs(a[i]-a[i-1]))\n    return min_diff\ndef convert_to_array(a):\n    '''\n    Write a function to convert a list into an array.\n    '''\n    return a.__array__()\ndef find_min_array(a):\n    '''\n    Write a function to find the minimum difference between consecutive elements in a sequence.\n    '''\n    min_diff = abs(a[0]-a[1])\n    for i in range(1,len(a)):\n        min_diff = min(min_diff,abs(a[i]-a[i-1]))\n    return min_diff\ndef is_odd(a):\n    '''\n    Write a function to check if the given number is odd.\n    '''\n    return True if a%2 else False\ndef is_odd_hash_tuple(a):\n    '''\n    Write a function to check if the given number is odd.\n    '''\n    return True if a%2 else False\ndef is_odd_array(a):\n    '''\n    Write a function to check if the given number is odd.\n    '''\n    return a.__array__()[0]%2\ndef is_odd_array_hash_tuple(a):\n    '''\n    Write a function to check if the given number is odd.\n    '''\n    return a.__array__()[0]%2\ndef find_sum_array(a):\n    '''\n    Write a function to find the sum of the given array.\n    '''\n    return sum(a)\ndef find_sum_array_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_even(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are even.\n    '''\n    return sum(a)\ndef find_sum_array_even_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are even.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_odd(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are odd.\n    '''\n    return sum(a)\ndef find_sum_array_odd_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are odd.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_negative(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are negative.\n    '''\n    return sum(a)\ndef find_sum_array_negative_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are negative.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_even_odd(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are even and odd.\n    '''\n    return sum(a)\ndef find_sum_array_even_odd_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are even and odd.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_negative_even_odd(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are negative and even and odd.\n    '''\n    return sum(a)\ndef find_sum_array_negative_even_odd_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if the elements are negative and even and odd.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_all_even(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are even.\n    '''\n    return sum(a)\ndef find_sum_array_all_even_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are even.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_odd_even(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or even.\n    '''\n    return sum(a)\ndef find_sum_array_odd_even_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or even.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_all_odd_even(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or even.\n    '''\n    return sum(a)\ndef find_sum_array_all_odd_even_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or even.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_odd_odd(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or odd.\n    '''\n    return sum(a)\ndef find_sum_array_odd_odd_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or odd.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_even_even(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are even or even.\n    '''\n    return sum(a)\ndef find_sum_array_even_even_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are even or even.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_odd_even(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or even.\n    '''\n    return sum(a)\ndef find_sum_array_odd_even_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or even.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_odd_odd(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or odd.\n    '''\n    return sum(a)\ndef find_sum_array_odd_odd_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are odd or odd.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_even_odd(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are even or odd.\n    '''\n    return sum(a)\ndef find_sum_array_even_odd_hash_tuple(a):\n    '''\n    Write a function to find the sum of the given array, if all elements are even or odd.\n    '''\n    return sum(a.__array__())\ndef find_sum_array_odd_even(a):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return (r,theta)\n    \n    \ndef rect_polar(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (r*cmath.exp(1j*theta),theta)\n    \ndef sine_cosine(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates using sine and cosine functions.\n    '''\n    return (r*cmath.sin(theta),r*cmath.cos(theta))\n    \ndef nth_root(x, n):\n    return (x**(1/n))\n    \n    \ndef nth_root2(x, n):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates using sine and cosine functions.\n    '''\n    \n    if n == 1:\n        return (x,0)\n    elif n % 2 == 0:\n        return (nth_root2(x, n-2),nth_root(x, n-1))\n    else:\n        return (nth_root(x, n-1),nth_root(x, n-2))\n    \n    \ndef print_with_indent(string, indent=0):\n    '''\n    Print a string with a certain number of indentation.\n    '''\n    print('\\t'*indent, string)\n    \ndef print_dict(dictionary):\n    '''\n    Print a dictionary in a pretty way.\n    '''\n    for key, val in dictionary.items():\n        print_with_indent(key + ':'+ str(val))\n    \n    \ndef print_function_params(func):\n    '''\n    Print the parameters of a function.\n    '''\n    print(func.__name__ + ':')\n    print_dict(func.__defaults__)\n    \ndef print_class_variables(cls):\n    '''\n    Print the variables of a class.\n    '''\n    print_with_indent('class'+ cls.__name__)\n    print_dict(cls.__dict__)\n    \n    \ndef print_class_functions(cls):\n    '''\n    Print the functions of a class.\n    '''\n    print_with_indent('class'+ cls.__name__)\n    print_dict(cls.__dict__)\n    \n    \ndef print_class_methods(cls):\n    '''\n    Print the methods of a class.\n    '''\n    print_with_indent('class'+ cls.__name__)\n    for method_name, method in cls.__dict__.items():\n        if callable(method):\n            print_with_indent(method_name)\n    \n    \ndef print_file_functions(file):\n    '''\n    Print the functions of a file.\n    '''\n    print_with_indent('class'+ file.__class__.__name__)\n    print_dict(file.__dict__)\n    \n    \ndef print_file_methods(file):\n    '''\n    Print the methods of a file.\n    '''\n    print_with_indent('class'+ file.__class__.__name__)\n    for method_name, method in file.__dict__.items():\n        if callable(method):\n            print_with_indent(method_name)\n    \n    \ndef print_with_indent(string, indent=0):\n    '''\n    Print a string with a certain number of indentation.\n    '''\n    print('\\t'*indent, string)\n    \ndef print_two_list(lst1, lst2):\n    '''\n    Print the two lists in a nice way.\n    '''\n    print('list 1')\n    for elem in lst1:\n        print_with_indent(elem)\n    print('list 2')\n    for elem in lst2:\n        print_with_indent(elem)\n    \ndef read_file_lines(file):\n    '''\n    Read the lines from a file.\n    '''\n    with open(file) as f:\n        return f.read().split('\\n')\n    \ndef write_file_lines(file, lst):\n    '''\n    Write the lines to a file.\n    '''\n    with open(file, 'w') as f:\n        for line in lst:\n            f.write(line + '\\n')\n            \ndef read_file_lines_and_strip(file):\n    '''\n    Read the lines from a file, and return a list of the lines.\n    '''\n    with open(file) as f:\n        return f.read().split('\\n')\n    \ndef write_file_lines_and_strip(file, lst):\n    '''\n    Write the lines to a file, and return a list of the lines.\n    '''\n    with open(file, 'w') as f:\n        for line in lst:\n            f.write(line + '\\n')\n    \ndef read_file_dicts(file):\n    '''\n    Read the dictionaries from a file.\n    '''\n    with open(file) as f:\n        return [{key:val} for (key,val) in zip(f.read().split(),f.read().split('\\n'))]\n    \ndef write_file_dicts(file, lst):\n    '''\n    Write the dictionaries to a file.\n    '''\n    with open(file, 'w') as f:\n        for dict_ in lst:\n            f.write(str(dict_) + '\\n')\n            \ndef list_of_dicts_to_file(file, lst):\n    '''\n    Write the lists to a file.\n    '''\n    with open(file, 'w') as f:\n        for dict_ in lst:\n            f.write(str(dict_) + '\\n')\n            \ndef remove_file(file):\n    '''\n    Remove the file from the disk.\n    '''\n    import os\n    os.remove(file)\n    \ndef remove_files_from_dir(dir):\n    '''\n    Remove all files from the disk.\n    '''\n    import os\n    file_names = os.listdir(dir)\n    for file_name in file_names:\n        os.remove(dir + file_name)\n    \n    \ndef read_file(file):\n    '''\n    Read the file contents.\n    '''\n    with open(file) as f:\n        return f.read()\n    \ndef write_file(file, lst):\n    '''\n    Write the list of strings to a file.\n    '''\n    with open(file, 'w') as f:\n        for elem in lst:\n            f.write(elem + '\\n')\n            \ndef read_file_lines_and_strip(file):\n    '''\n    Read the lines from a file, and return a list of the lines.\n    '''\n    with open(file) as f:\n        return f.read().split('\\n')\n    \ndef read_file_dicts(file):\n    '''\n    Read the dictionaries from a file.\n    '''\n    with open(file) as f:\n        return [{key:val} for (key,val) in zip(f.read().split(),f.read().split('\\n'))]\n    \ndef write_file_dicts(file, lst):\n    '''\n    Write the lists to a file.\n    '''\n    with open(file, 'w') as f:\n        for dict_ in lst:\n            f.write(str(dict_) + '\\n')\n            \ndef is_float(string):\n    '''\n    Return whether a string represents a float.\n    '''\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n    \ndef is_int(string):\n    '''\n    Return whether a string represents an int.\n    '''\n    try:\n        int(string",
        "num_ids": 10
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = math.sqrt(x**2+y**2)\n    theta = math.atan2(y,x)\n    return radius*math.cos(theta),radius*math.sin(theta)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    theta = math.atan2(y,x)\n    radius = math.sqrt(x**2+y**2)\n    return radius,theta\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if a rectangle is overlapped by another rect.\n    '''\n    if x2>x1 and y2>y1:\n        area = (x2-x1)*(y2-y1)\n        return area>=0\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if a polar rectangle is overlapped by another polar rectangle.\n    '''\n    if x2>x1 and y2>y1:\n        angle = y2*(x2-x1)/(y2-y1)\n        return angle>=0\n    return False\ndef rect_polar(x1,y1,x2,y2):\n    '''\n    Write a function to check if a rectangular rectangle is overlapped by another polar rectangle.\n    '''\n    if x2>x1 and y2>y1:\n        theta = math.atan2(y2-y1,x2-x1)\n        angle = y1*(x1-x2)/(y1-y2)\n        if theta>=angle:\n            return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if a polar rectangle is overlapped by another rectangular rectangle.\n    '''\n    if x2>x1 and y2>y1:\n        angle = y2*(x2-x1)/(y2-y1)\n        return angle>=0\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangular rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1",
        "num_ids": 35
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x*x\n    y=y*y\n    return x+y,complex(x,y)\n",
        "num_ids": 29
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=x**2+y**2\n    theta=cmath.asin(y/r)\n    return (r,theta)\ndef main():\n    x,y=polar_rect(1.3,2.3)\n    print(x,y)\n    r,theta=rect_polar(x,y)\n    print(r,theta)\n",
        "num_ids": 92
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x**2 + y**2\n    b = 2*x*y\n    r = cmath.sqrt(a)\n    r = int(r)\n    if r == 0:\n        return \"Infinity\"\n    return (b/r, r)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a = x**2 + y**2\n    b = 2*x*y\n    r = cmath.sqrt(a)\n    r = int(r)\n    if r == 0:\n        return \"Infinity\"\n    return (r, b/r)\ndef sqr_root(x):\n    '''\n    Write a function to compute the square root of a number.\n    '''\n    if x < 0:\n        return -1\n    return cmath.sqrt(x)\ndef square(x):\n    '''\n    Write a function to compute the square of a number.\n    '''\n    return x**2\ndef distance(p1, p2):\n    '''\n    Write a function to compute the distance between two points in the plane.\n    '''\n    return abs(p1[0]-p2[0]) + abs(p1[1]-p2[1])\ndef intersection(p1, p2, p3, p4):\n    '''\n    Write a function to compute the intersection between two parallel lines\n    of infinite length. The point of the intersection is the point on each\n    line whose distance to the other line is minimum.\n    '''\n    s = (p1[0] - p2[0]) * (p3[1] - p4[1]) - (p1[1] - p2[1]) * (p3[0] - p4[0])\n    if s!= 0:\n        t = (p1[0] - p3[0]) * (p2[1] - p4[1]) - (p1[1] - p3[1]) * (p2[0] - p4[0])\n        if s > 0:\n            u = (p1[0] - p3[0]) * (p1[1] - p3[1]) - (p1[0] - p3[0]) * (p1[1] - p3[1])\n            v = (p2[0] - p4[0]) * (p2[1] - p4[1]) - (p2[0] - p4[0]) * (p2[1] - p4[1])\n            if u < 0 and t > 0 and v > 0:\n                return p3\n    return \"No Intersection\"\ndef rect_overlap(rect1, rect2):\n    '''\n    Write a function to compute the area of overlap between two rectangles.\n    '''\n    x1 = rect1[0]\n    y1 = rect1[1]\n    x2 = rect1[2]\n    y2 = rect1[3]\n    x3 = rect2[0]\n    y3 = rect2[1]\n    x4 = rect2[2]\n    y4 = rect2[3]\n    x_rect = (x1 <= x3 and x3 <= x4) or (x1 <= x2 and x2 <= x4)\n    y_rect = (y1 <= y3 and y3 <= y4) or (y1 <= y2 and y2 <= y4)\n    if x_rect and y_rect:\n        return abs((x3-x4)-(x1-x2))*abs((y3-y4)-(y1-y2))\n    return 0\ndef area_rect(rect1):\n    '''\n    Write a function to compute the area of a rectangle.\n    '''\n    return abs(rect1[0]) * abs(rect1[1])\ndef max_pair(rects):\n    '''\n    Write a function to compute the maximum pair of rectangles that overlap.\n    '''\n    max_overlap = 0\n    min_x = 0\n    min_y = 0\n    max_x = 0\n    max_y = 0\n    max_rect = rects[0]\n    min_rect = rects[0]\n    for i in range(len(rects)):\n        if rects[i] >= max_overlap:\n            max_rect = rects[i]\n            max_overlap = rects[i]\n        if rects[i] <= min_overlap:\n            min_rect = rects[i]\n            min_overlap = rects[i]\n        if max_overlap > max_pair:\n            max_pair = max_overlap\n    for j in range(len(rects)):\n        if rects[j] == max_rect:\n            max_rect = rects[j]\n            max_x = max_rect[0]\n            max_y = max_rect[1]\n        elif rects[j] == min_rect:\n            min_rect = rects[j]\n            min_x = min_rect[0]\n            min_y = min_rect[1]\n    area_max = abs(max_x - min_x) * abs(max_y - min_y)\n    return max_rect, min_rect, area_max\ndef area_rects(rects):\n    '''\n    Write a function to compute the area of a rectangle.\n    '''\n    area = 0\n    for rect in rects:\n        area += abs(rect[0]) * abs(rect[1])\n    return area\ndef min_pair(rects):\n    '''\n    Write a function to compute the minimum pair of rectangles that\n    overlap.\n    '''\n    min_overlap = 0\n    min_rect = rects[0]\n    for i in range(len(rects)):\n        if rects[i] <= min_overlap:\n            min_rect = rects[i]\n            min_overlap = rects[i]\n    return min_rect, min_overlap\ndef max_pair_area(rects):\n    '''\n    Write a function to compute the maximum area of the rectangle that\n    overlaps with the rectangle that has the maximum area.\n    '''\n    max_rect, max_overlap = max_pair(rects)\n    max_area = area_rect(max_rect)\n    return max_rect, max_area\ndef rect_intersect(rect1, rect2):\n    '''\n    Write a function to compute the intersection of two rectangles.\n    '''\n    x1 = rect1[0]\n    y1 = rect1[1]\n    x2 = rect1[2]\n    y2 = rect1[3]\n    x3 = rect2[0]\n    y3 = rect2[1]\n    x4 = rect2[2]\n    y4 = rect2[3]\n    if (x1 <= x3 and x3 <= x4) or (x1 <= x2 and x2 <= x4) or (x1 <= x2 and x2 <= x3) or (x3 <= x1 and x1 <= x2):\n        if (y1 <= y3 and y3 <= y4) or (y1 <= y2 and y2 <= y4) or (y1 <= y2 and y2 <= y3) or (y3 <= y1 and y1 <= y2):\n            return True\n    return False\ndef rect_union(rect1, rect2):\n    '''\n    Write a function to compute the union of two rectangles.\n    '''\n    x1 = rect1[0]\n    y1 = rect1[1]\n    x2 = rect1[2]\n    y2 = rect1[3]\n    x3 = rect2[0]\n    y3 = rect2[1]\n    x4 = rect2[2]\n    y4 = rect2[3]\n    if (x1 <= x3 and x3 <= x4) or (x1 <= x2 and x2 <= x4) or (x1 <= x2 and x2 <= x3) or (x3 <= x1 and x1 <= x2):\n        if (y1 <= y3 and y3 <= y4) or (y1 <= y2 and y2 <= y4) or (y1 <= y2 and y2 <= y3) or (y3 <= y1 and y1 <= y2):\n            return (x",
        "num_ids": 202
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius=int(y)\n    angle=int(x)\n    re=(radius*radius*cmath.cos(angle*cmath.pi/180))\n    im=(radius*radius*cmath.sin(angle*cmath.pi/180))\n    print(re,im)\n    return re,im\n",
        "num_ids": 76
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\n",
        "num_ids": 8
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    return x_r,y_r\ndef polar_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    return x_r,y_r\ndef polar_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    return x_r,y_r\ndef circle_to_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_polar_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_polar_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    x_r=x/(2*cmath.rect(math.sqrt(2),math.atan(y/x)))\n    y_r=y/(2*cmath.rect(math.sqrt(2),math.atan(y/x)))\n    return x_r,y_r\ndef circle_to_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    x_r=x/(2*cmath.rect(math.sqrt(2),math.atan(y/x)))\n    y_r=y/(2*cmath.rect(math.sqrt(2),math.atan(y/x)))\n    return x_r,y_r\ndef circle_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(y/x)\n    return cmath.rect(x_r,theta)\ndef circle_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    import cmath\n    r=math.sqrt(x**2+y**2)\n    x_r=x/r\n    y_r=y/r\n    theta=math.atan(",
        "num_ids": 54
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x*x\n    b = 2*x*y\n    c = y*y\n    return (a,b,c)\ndef rect_polar(a,b,c):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = (a**2+b**2)/2\n    y = cmath.sqrt(a**2+b**2-x**2)\n    return (x,y)\ndef rect_rect(a,b,c):\n    '''\n    Write a function to check if two rectangles overlap or not.\n    '''\n    if a<=0 or b<=0 or c<=0:\n        return False\n    else:\n        if (a <= (c + b)) and (a >= (b - c)):\n            return True\n        else:\n            return False\ndef rect_rect_intersection(a,b,c,d):\n    '''\n    Write a function to check if a rectangle and another rectangle have intersection or not.\n    '''\n    if (c<=0 or d<=0 or (a + c)<=0 or (b + d)<=0) or (a >= (b - c) and a <= (b + d) and b >= (c - a) and b <= (c + d)):\n        return True\n    else:\n        return False\ndef rect_rect_contains(a,b,c,d):\n    '''\n    Write a function to check if a rectangle is completely inside the other rectangle or not.\n    '''\n    if a>=0 and b>=0 and c>=0 and d>=0 and (a <= (c + b)) and (a >= (b - c)):\n        return True\n    else:\n        return False\ndef rect_rect_overlap(a,b,c,d):\n    '''\n    Write a function to check if the given rectangles overlap or not.\n    '''\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return False\n    else:\n        return (a <= (c + b)) and (a >= (b - c)) and (b >= (c + d)) and (b <= (c - a))\ndef rect_rect_x_intersection(a,b,c,d):\n    '''\n    Write a function to check if the two rectangles have x-intersections or not.\n    '''\n    if (a <= (c + b)) and (a >= (b - c)):\n        return True\n    else:\n        return False\ndef rect_rect_y_intersection(a,b,c,d):\n    '''\n    Write a function to check if the two rectangles have y-intersections or not.\n    '''\n    if (b <= (c + d)) and (b >= (c - a)):\n        return True\n    else:\n        return False\ndef rect_rect_area(a,b,c,d):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef rect_rect_perimeter(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return a+b+c+d\ndef rect_rect_rotation(a,b,c,d):\n    '''\n    Write a function to check if the given rectangles are rotated or not.\n    '''\n    if a==b and c==d:\n        return True\n    elif a==c and b==d:\n        return True\n    elif a==d and c==b:\n        return True\n    else:\n        return False\ndef rect_rect_touching(a,b,c,d):\n    '''\n    Write a function to check if the given rectangles touch each other or not.\n    '''\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return False\n    else:\n        if (a <= (c + b)) and (a >= (b - c)):\n            if (b <= (c + d)) and (b >= (c - a)):\n                return True\n            else:\n                return False\n        else:\n            if (c <= (b + d)) and (c >= (b - a)):\n                if (a <= (b + c)) and (a >= (b - c)):\n                    return True\n                else:\n                    return False\n            else:\n                return False\ndef rect_rect_coordinate(a,b,c,d):\n    '''\n    Write a function to check if the given rectangle has coordinate or not.\n    '''\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return False\n    else:\n        if (a <= (c + b)) and (a >= (b - c)):\n            if (b <= (c + d)) and (b >= (c - a)):\n                return True\n            else:\n                return False\n        else:\n            if (c <= (b + d)) and (c >= (b - a)):\n                if (a <= (b + c)) and (a >= (b - c)):\n                    return True\n                else:\n                    return False\n            else:\n                return False\ndef rect_rect_rectangle(a,b,c,d):\n    '''\n    Write a function to find the area of a rectangle formed by four given rectangles.\n    '''\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return False\n    else:\n        return (a*b)+(b*c)+(c*d)+(d*a)\ndef rect_rect_smallest_rectangle(a,b,c,d):\n    '''\n    Write a function to find the smallest rectangle which can be formed by four given rectangles.\n    '''\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return False\n    else:\n        if a <= (c + b) and a >= (b - c):\n            if b <= (c + d) and b >= (c - a):\n                if c <= (a + d) and c >= (a - b):\n                    if d <= (a + b) and d >= (a - c):\n                        return (a,b,c,d)\n                    else:\n                        return (a,c,d,b)\n                else:\n                    return (a,c,d,b)\n            else:\n                return (b,c,d,a)\n        else:\n            if c <= (b + d) and c >= (b - a):\n                if b <= (c + a) and b >= (c - b):\n                    if d <= (c + b) and d >= (c - a):\n                        return (a,b,c,d)\n                    else:\n                        return (a,b,c,a)\n                else:\n                    return (b,c,a,b)\n            else:\n                return (b,c,a,b)\ndef rect_rect_cover(a,b,c,d):\n    '''\n    Write a function to check if the given rectangle can cover the other given rectangle.\n    '''\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return False\n    else:\n        if (a <= (c + b)) and (a >= (b - c)):\n            if (b <= (c + d)) and (b >= (c - a)):\n                return True\n            else:\n                return False\n        else:\n            if (c <= (b + d)) and (c >= (b - a)):\n                if (a <= (b + c)) and (a >= (b - c)):\n                    return True\n                else:\n                    return False\n            else:\n                return False\ndef rect_rect_union(a,b,c,d):\n    '''\n    Write a function to find the union of two rectangles.\n    '''\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return False\n    else:\n        return (a + b + c + d)\ndef rect_rect_intersection(a,b,c,d):\n    '''\n    Write a function to find the intersection of two rectangles.\n    '''\n    if a<=",
        "num_ids": 7
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[1:] + newList[:1]\n",
        "num_ids": 17
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if (len(newList) >= 2): \n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else: \n        return newList\n",
        "num_ids": 55
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    x=newList.pop()\n    y=newList.pop(0)\n    newList.append(x)\n    newList.append(y)\n    ",
        "num_ids": 41
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)-1, 0, -1):\n        newList[i], newList[0] = newList[0], newList[i]\n        return newList\n",
        "num_ids": 49
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList) \n    # If list is empty, return \n    if n == 0: \n        return \n    # Swap first and last element \n    newList[0], newList[n - 1] = newList[n - 1], newList[0] \n    return newList \n",
        "num_ids": 77
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #a(1) = 1; a(2) = 2; a(3) = 4; a(4) = 3; a(5) = 5; a(6) = 6; a(7) = 7; a(8) = 8; a(9) = 9; a(10) = 10;\n    #a(11) = 11; a(12) = 12; a(13) = 21; a(14) = 22; a(15) = 22; a(16) = 25; a(17) = 26; a(18) = 26; a(19) =\n    #31; a(20) = 32; a(21) = 32; a(22) = 43; a(23) = 44; a(24) = 44; a(25) = 51; a(26) = 52; a(27) = 52; a(28) =\n    #55; a(29) = 56; a(30) = 56; a(31) = 61; a(32) = 62; a(33) = 62; a(34) = 65; a(35) = 66; a(36) = 66; a(37) =\n    #71; a(38) = 72; a(39) = 72; a(40) = 75; a(41) = 76; a(42) = 76; a(43) = 81; a(44) = 82; a(45) = 82; a(46) =\n    #91; a(47) = 92; a(48) = 92; a(49) = 95; a(50) = 96; a(51) = 96; a(52) = 101; a(53) = 102; a(54) = 102; a(55) =\n    #107; a(56) = 108; a(57) = 108; a(58) = 109; a(59) = 110; a(60) = 110; a(61) = 111; a(62) = 112; a(63) = 112; a(64) =\n    #113; a(65) = 114; a(66) = 114; a(67) = 115; a(68) = 116; a(69) = 116; a(70) = 117; a(71) = 118; a(72) = 118; a(73) =\n    #121; a(74) = 122; a(75) = 122; a(76) = 123; a(77) = 124; a(78) = 124; a(79) = 125; a(80) = 126; a(81) = 126; a(82) =\n    #127; a(83) = 128; a(84) = 128; a(85) = 129; a(86) = 130; a(87) = 130; a(88) = 131; a(89) = 132; a(90) = 132; a(91) =\n    #137; a(92) = 138; a(93) = 138; a(94) = 139; a(95) = 140; a(96) = 140; a(97) = 141; a(98) = 142; a(99) = 142; a(100) =\n    #143; a(101) = 144; a(102) = 144; a(103) = 145; a(104) = 146; a(105) = 146; a(106) = 147; a(107) = 148; a(108) = 148; a(109) =\n    #149; a(110) = 150; a(111) = 150; a(112) = 151; a(113) = 152; a(114) = 152; a(115) = 153; a(116) = 154; a(117) = 154; a(118) =\n    #155; a(119) = 156; a(120) = 156; a(121) = 157; a(122) = 158; a(123) = 158; a(124) = 159; a(125) = 160; a(126) = 160; a(127) =\n    #161; a(128) = 162; a(129) = 162; a(130) = 163; a(131) = 164; a(132) = 164; a(133) = 165; a(134) = 166; a(135) = 166; a(136) =\n    #167; a(137) = 168; a(138) = 168; a(139) = 169; a(140) = 170; a(141) = 170; a(142) = 171; a(143) = 172; a(144) = 172; a(145) =\n    #173; a(146) = 174; a(147) = 174; a(148) = 175; a(149) = 176; a(150) = 176; a(151) = 177; a(152) = 178; a(153) = 178; a(154) =\n    #179; a(155) = 180; a(156) = 180; a(157) = 181; a(158) = 182; a(159) = 182; a(160) = 183; a(161) = 184; a(162) = 184; a(163) =\n    #185; a(164) = 186; a(165) = 186; a(166) = 187; a(167) = 188; a(168) = 188; a(169) = 189; a(170) = 190; a(171) = 190; a(172) =\n    #191; a(173) = 192; a(174) = 192; a(175) = 193; a(176) = 194; a(177) = 194; a(178) = 195; a(179) = 196; a(180) = 196; a(181) =\n    #197; a(182) = 198; a(183) = 198; a(184) = 199; a(185) = 200; a(186) = 200; a(187) = 201; a(188) = 202; a(189) = 202; a(190) =\n    #203; a(191) = 204; a(192) = 204; a(193) = 205; a(194) = 206; a(195) = 206; a(196) = 207; a(197) = 208; a(198) = 208; a(199) =\n    #209; a(200) = 210; a(201) = 210; a(202) = 211; a(203) = 212; a(204) = 212; a(205) = 213; a(206) = 214; a(207) = 214; a(208) =\n    #215; a(209) = 216; a(210) = 216; a(211) = 217; a(212) = 218; a(213) = 218; a(214) = 219; a(215) = 220; a(216) = 220; a(217) =\n    #221; a(218) = 222; a(219) = 222; a(220) = 223; a(221) = 224; a(222) = 224; a(223) = 225; a(224) = 226; a(225) = 226; a(226) =\n    #227; a(227) = 228; a(228) = 228; a(229) = 229; a(230) = 230; a(231) = 231; a(232) = 232; a(233) = 233; a(234) = 234; a(235) =\n    #235; a(236) = 236; a(237) = 237; a(238) = 238; a(239) = 239; a(240) = 240; a(241) = 241; a(242) = 242; a(243) = 243; a(244) =\n    #244; a(245) = 245; a(246) = 246; a(247) = 247; a(248) = 248; a(249) = 249; a(250) = 250; a(251) = 251; a(252) = 252; a(253) =\n    #253; a(254) = 254; a(255) = 255; a(256) = 256; a(257) = 257; a(258) = 258; a(259) = 259; a(260) = 260; a(261) = 261; a(262) =\n    #262; a(263) = 263; a(264) = 264; a(265) = 265; a(266) = 266; a(267) = 267; a(268) = 268; a(269) = 269; a(270) = 270; a(271) =\n    #271; a(272) = 272; a(273) = 273; a",
        "num_ids": 2006
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k:\n        return 0\n    if n==0 or k==0:\n        return 1\n    if k==1:\n        return 1\n    prod = 1\n    for i in range(1, k+1):\n        prod *= (n-i+1)\n    return prod//(factorial(k)*factorial(n-k))\n",
        "num_ids": 89
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n<=0):\n        print(\"Error\")\n    if(k<0 or k>n):\n        print(\"Error\")\n    if(k==0 or k==n):\n        return 1\n    else:\n        sum=0\n        for i in range(k):\n            sum+=binomial_coeff(n,i)\n    return sum\n    \ndef binomial_coeff(n,k):\n    '''\n    Write a python function to calculate the binomial coefficient.\n    '''\n    if(n<=0):\n        print(\"Error\")\n    if(k<0 or k>n):\n        print(\"Error\")\n    if(k==0 or k==n):\n        return 1\n    else:\n        return binomial_coeff(n-1,k)*(n-k)\n",
        "num_ids": 75
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        return (n * (n - k)) // 2\n",
        "num_ids": 30
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 0\n    for i in range(n+1):\n        c += math.comb(n,i) * math.comb(k,i)\n    return c\n",
        "num_ids": 43
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    elif n == 1 or k == 1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k)+binomial_Coeff(n-1,k-1)\n        \n        \n    \n    \ndef binomial_coeffs(n): \n    '''\n    Write a python function to find the binomial co-efficients.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return binomial_coeffs(n-1)+binomial_coeffs(n-1)\n    \n",
        "num_ids": 48
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    val = 0\n    for i in range(n,k+1):\n        val = val + binomial_Coeff_Helper(n,i)\n    return val\n",
        "num_ids": 43
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    num=1\n    for i in range(1,n+1):\n        num=num*i\n    num=num//n\n    num1=num\n    num=0\n    for i in range(1,k+1):\n        num=num+num1\n        num1=num1*(k-i)//i\n    return num\n",
        "num_ids": 85
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    import math\n    fac = math.factorial\n    return fac(n)//fac(k)//fac(n-k)\n    \ndef binomial_Coeff_Recursive(n,k):\n    def binomial_Coeff_Rec(n,k,memo):\n        if (n,k) in memo:\n            return memo[(n,k)]\n        if k>n:\n            return 0\n        elif k==0 or k==n:\n            return 1\n        else:\n            res = binomial_Coeff_Rec(n-1,k,memo) + binomial_Coeff_Rec(n-1,k-1,memo)\n            memo[(n,k)] = res\n            return res\n    return binomial_Coeff_Rec(n,k,{})\n",
        "num_ids": 199
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n * ((n + 1) * n + 1) // 3\ndef binomial_sum(n): \n    '''\n    Write a python function to find the sum of the first n terms of a sequence of binomial coefficients.\n    '''\n    count=0\n    for i in range(n+1):\n        count += binomial_Coeff(n,i)\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(\"^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$\")\n    match = pattern.match(ip)\n    if match:\n        return ip\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #pip3 install ipaddress\n    #return str(ipaddress.ip_address(ip).compressed)\n    s = str(ip).split(\".\")\n    return \".\".join(s)\n",
        "num_ids": 50
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('0+', '', ip)\n",
        "num_ids": 16
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    for i in range(len(ip)):\n        if ip[i] == \"0\":\n            ip[i] = \"\"\n    return '.'.join(ip)\n",
        "num_ids": 53
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # split by. and check if its empty\n    # split by / and check if its empty\n    # if its empty, remove it\n    # if it is not, add it to a list and concatenate with other elements\n    # now do it for each element\n    \n    if ip == \"0.0.0.0\":\n        return \"0.0.0.0\"\n    if ip == \"255.255.255.255\":\n        return \"255.255.255.255\"\n    \n    ip_list = ip.split(\".\")\n    if ip_list[0] == \"0\":\n        return \"0.0.0.0\"\n    \n    if ip_list[0] == \"255\":\n        return \"255.255.255.255\"\n    \n    if ip_list[0] == \"\":\n        del ip_list[0]\n    \n    if ip_list[-1] == \"\":\n        del ip_list[-1]\n    \n    ip_list = \".\".join(ip_list)\n    return ip_list\n    \ndef remove_the_dot(ip):\n    '''\n    Write a function that removes all dots (.) from a given string.\n    '''\n    # check if string has dots\n    # if not, return it\n    # if it has dots, split by. and check if its empty\n    # if it is not, remove them and concatenate the other elements\n    # now check if the ip is empty\n    # if it is, return a 0.0.0.0\n    \n    if ip == \"\":\n        return \"0.0.0.0\"\n    \n    if \".\" not in ip:\n        return ip\n    \n    ip_list = ip.split(\".\")\n    if ip_list[0] == \"\":\n        return \"0.0.0.0\"\n    \n    if ip_list[0] == \"\":\n        del ip_list[0]\n    \n    ip_list = \".\".join(ip_list)\n    return ip_list\n    \ndef convert_to_ip(ip):\n    '''\n    Write a function that takes in a string and converts it to an IP address.\n    '''\n    # Split by / and check if its empty\n    # Split by. and check if its empty\n    # if its empty, return it\n    # if it is not, remove it and concatenate with other elements\n    # now do it for each element\n    \n    if ip == \"\":\n        return \"0.0.0.0\"\n    \n    if \".\" not in ip:\n        return ip\n    \n    ip_list = ip.split(\".\")\n    if ip_list[0] == \"\":\n        return \"0.0.0.0\"\n    \n    if ip_list[0] == \"\":\n        del ip_list[0]\n    \n    ip_list = \".\".join(ip_list)\n    return ip_list\n",
        "num_ids": 178
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # split ip into list\n    splitted_ip = ip.split('.')\n    # remove leading zero from each octet\n    octet = []\n    for n in splitted_ip:\n        octet.append(n.lstrip('0'))\n    # concatenate octets into ip address\n    ip = '.'.join(octet)\n    return ip\n",
        "num_ids": 90
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join(str(int(i)) for i in ip.split('.'))\n",
        "num_ids": 25
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.split('.')[0]\ndef mask_to_ip(mask):\n    '''\n    Write a function to get the ip address\n    '''\n    octets = mask.split('.')\n    octets[3] = octets[3].split('/')[0]\n    octets[3] = int(octets[3])\n    octets[2] = str(int(octets[2])-octets[3])\n    octets[1] = str(int(octets[1])-octets[3])\n    octets[0] = str(int(octets[0])-octets[3])\n    ip = '.'.join(octets)\n    return ip\ndef ip_in_subnet(ip, subnet):\n    '''\n    Write a function to check if ip address is in subnet.\n    '''\n    octets = ip.split('.')\n    octets = list(map(int, octets))\n    ip_split = subnet.split('.')\n    ip_split = list(map(int, ip_split))\n    ip_octets = ip_split[:3] + octets[3:]\n    return ip_octets[0] <= octets[0] <= ip_octets[1] <= octets[1] <= ip_octets[2] <= octets[2]\ndef ip_in_subnet_sp(ip, subnet):\n    '''\n    Write a function to check if ip address is in subnet.\n    '''\n    octets = ip.split('.')\n    octets = list(map(int, octets))\n    ip_split = subnet.split('.')\n    ip_split = list(map(int, ip_split))\n    ip_octets = ip_split[:3] + octets[3:]\n    #print(ip_octets)\n    return ip_octets[0] <= octets[0] <= ip_octets[1] <= octets[1] <= ip_octets[2] <= octets[2]\ndef prefix_to_netmask(prefix):\n    '''\n    Write a function to get the netmask\n    '''\n    octets = prefix.split('.')\n    octets[3] = octets[3].split('/')[0]\n    octets[3] = int(octets[3])\n    octets[2] = str(int(octets[2])-octets[3])\n    octets[1] = str(int(octets[1])-octets[3])\n    octets[0] = str(int(octets[0])-octets[3])\n    netmask = '.'.join(octets)\n    return netmask\ndef ip_in_network(ip, network):\n    '''\n    Write a function to check if ip address is in network.\n    '''\n    octets = ip.split('.')\n    octets = list(map(int, octets))\n    netmask = network.split('/')[1]\n    netmask = prefix_to_netmask(netmask)\n    netmask_octets = list(map(int, netmask.split('.')))\n    ip_octets = list(map(int, octets))\n    if ip_in_subnet(ip, network):\n        return True\n    elif ip_in_subnet(ip, network) == False:\n        return False\n    elif ip_in_subnet(ip, network) == None:\n        return True\ndef ip_in_network_sp(ip, network):\n    '''\n    Write a function to check if ip address is in network.\n    '''\n    octets = ip.split('.')\n    octets = list(map(int, octets))\n    netmask = network.split('/')[1]\n    netmask = prefix_to_netmask(netmask)\n    netmask_octets = list(map(int, netmask.split('.')))\n    ip_octets = list(map(int, octets))\n    if ip_in_subnet(ip, network) == True:\n        return True\n    elif ip_in_subnet(ip, network) == False:\n        return False\n    elif ip_in_subnet(ip, network) == None:\n        return True\ndef ip_in_range(ip, range_of_ip):\n    '''\n    Write a function to check if ip address is in range.\n    '''\n    octets = ip.split('.')\n    octets = list(map(int, octets))\n    range_octets = range_of_ip.split('-')\n    range_octets = list(map(int, range_octets))\n    start = range_octets[0]\n    end = range_octets[1]\n    #print(octets)\n    if start <= octets[0] <= end:\n        return True\n    elif start <= octets[0] <= end:\n        return False\n    elif start <= octets[0] <= end:\n        return False\ndef ip_in_range_sp(ip, range_of_ip):\n    '''\n    Write a function to check if ip address is in range.\n    '''\n    octets = ip.split('.')\n    octets = list(map(int, octets))\n    range_octets = range_of_ip.split('-')\n    range_octets = list(map(int, range_octets))\n    start = range_octets[0]\n    end = range_octets[1]\n    if start <= octets[0] <= end:\n        return True\n    elif start <= octets[0] <= end:\n        return False\n    elif start <= octets[0] <= end:\n        return False\ndef ip_in_host_range(ip, host_range):\n    '''\n    Write a function to check if ip address is in range.\n    '''\n    octets = ip.split('.')\n    octets = list(map(int, octets))\n    host_octets = host_range.split('-')\n    host_octets = list(map(int, host_octets))\n    start = host_octets[0]\n    end = host_octets[1]\n    #print(octets)\n    if start <= octets[0] <= end:\n        return True\n    elif start <= octets[0] <= end:\n        return False\n    elif start <= octets[0] <= end:\n        return False\ndef ip_in_host_range_sp(ip, host_range):\n    '''\n    Write a function to check if ip address is in range.\n    '''\n    octets = ip.split('.')\n    octets = list(map(int, octets))\n    host_octets = host_range.split('-')\n    host_octets = list(map(int, host_octets))\n    start = host_octets[0]\n    end = host_octets[1]\n    if start <= octets[0] <= end:\n        return True\n    elif start <= octets[0] <= end:\n        return False\n    elif start <= octets[0] <= end:\n        return False\ndef prefix_in_range(prefix, range_of_prefix):\n    '''\n    Write a function to check if ip address is in range.\n    '''\n    octets = prefix.split('.')\n    octets = list(map(int, octets))\n    range_octets = range_of_prefix.split('-')\n    range_octets = list(map(int, range_octets))\n    start = range_octets[0]\n    end = range_octets[1]\n    if start <= octets[0] <= end:\n        return True\n    elif start <= octets[0] <= end:\n        return False\n    elif start <= octets[0] <= end:\n        return False\ndef ip_in_subnet(ip, subnet):\n    '''\n    Write a function to check if ip address is in subnet.\n    '''\n    octets = ip.split('.')\n    octets = list(map(int, octets))\n    ip_split = subnet.split('.')\n    ip_split = list(map(int, ip_split))\n    ip_octets = i",
        "num_ids": 63
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return \".\".join([str(i) for i in re.split(r'\\.0+', ip) if i!= '.'])\n",
        "num_ids": 36
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 32:\n        ip = ip.split('.')\n        ip = ip[0:3]\n        ip = '.'.join(ip)\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = ip[0:4]\n        ip = '.'.join(ip)\n        return ip\n",
        "num_ids": 86
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    if len(list1) < 2:\n        return 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i-1])\n    return (int(list2[0]) - int(list2[1]))\n",
        "num_ids": 95
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if (list1[i] % 2) == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n",
        "num_ids": 62
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i])\n    list1 = list2\n    list3 = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list3.append(list1[i])\n        else:\n            list3.append(list1[i])\n    return list3\n",
        "num_ids": 126
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[0]\n    for x in range(1,len(list1)):\n        if(list1[x] % 2 == 0):\n            first_even = list1[x]\n        else:\n            first_odd = list1[x]\n    return first_odd - first_even\n",
        "num_ids": 89
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return diff(even, odd)\n",
        "num_ids": 69
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n",
        "num_ids": 12
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return odd, even\n",
        "num_ids": 55
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return 0\n    even = odd = 0\n    for i in list1:\n        if i%2==0:\n            even+=i\n        else:\n            odd+=i\n    return even-odd\n",
        "num_ids": 57
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    num_even = 0\n    num_odd = 0\n    for i in list1:\n        if i%2==0:\n            num_even += 1\n        else:\n            num_odd += 1\n    return abs(num_even - num_odd)\n",
        "num_ids": 64
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        if list1[0]%2 == 0:\n            return abs(list1[0]-list1[1])\n        else:\n            return abs(list1[0]-list1[1])\n",
        "num_ids": 68
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    temp_str1 = str1[::-1]\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= temp_str1[i] :\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n    a = list(str1)\n    b = list(str2)\n    swaps = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            continue\n        else:\n            swaps +=1\n            a[i], b[i] = b[i], a[i]\n    return swaps\n",
        "num_ids": 105
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print('str1', str1,'str2', str2)\n    str1 = list(str1)\n    str2 = list(str2)\n    \n    def swap(str1, i, j) : \n        str1[i], str1[j] = str1[j], str1[i]\n    \n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            swap(str1, i, str1.index(str2[i]))\n            swap(str2, i, str2.index(str1[i]))\n            break\n    \n    if i == len(str1)-1 : \n        return 0\n    else : \n        return len(str1) - i\n",
        "num_ids": 189
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1 == str2 : \n        return 0\n    ans = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            k = str1[i]\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            ans += 1\n    return ans\n    \n    \ndef min_Swaps2(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1 == str2 : \n        return 0\n    ans = 0\n    str1 = list(str1)\n    str2 = list(str2)\n    for i in range(len(str1)): \n        if str1[i]!= str2[i] : \n            k = str1[i]\n            str1[i] = str2[i]\n            str2[i] = k\n            ans += 1\n    return ans\n    \n    ",
        "num_ids": 115
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m = len(str1)\n    n = len(str2)\n    if(m!=n):\n        return -1\n    count = 0\n    while(str1!=str2):\n        i = 0\n        temp = str1[0]\n        while(i<m and temp == str1[i]):\n            i+=1\n        if(i==m):\n            str1 = str1[1:]+str1[0]\n            count+=1\n        else:\n            i = 0\n            temp = str2[0]\n            while(i<n and temp == str2[i]):\n                i+=1\n            if(i==n):\n                str2 = str2[1:]+str2[0]\n                count+=1\n            else:\n                str1 = str1[1:]+str1[0]\n                str2 = str2[1:]+str2[0]\n                count+=1\n    return count\n",
        "num_ids": 227
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    n = len(str1)\n    a = list(str1)\n    b = list(str2)\n    count = 0\n    \n    for i in range(n) :\n        \n        if a[i]!= b[i] :\n            count += 1\n            \n            if a[i] == '1' :\n                a[i] = '0'\n                \n            else :\n                a[i] = '1'\n    \n    return count\n",
        "num_ids": 115
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            str1 = str1[:i] + str1[i+1:]\n            str2 = str2[:i] + str2[i+1:]\n            swaps += 1\n    return swaps\n",
        "num_ids": 89
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swap_count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            str1, str2 = str2, str1\n            swap_count += 1\n    return swap_count\n",
        "num_ids": 68
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #Convert to int\n    int1 = int(str1,2)\n    int2 = int(str2,2)\n",
        "num_ids": 33
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    str1=list(str1)\n    str2=list(str2)\n    n=len(str1)\n    i=0\n    j=0\n    while(i<n):\n        if(str1[i]!=str2[i]):\n            count+=1\n            str1[i]=str2[i]\n            str2[i]=str1[i]\n        i+=1\n    return(count)\nif __name__ == '__main__':\n    str1='101'\n    str2='11011'\n    print(min_Swaps(str1,str2))\n",
        "num_ids": 152
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_size = 0\n    for elem in tuple_list:\n        byte_size += sys.getsizeof(elem)\n    return byte_size\n",
        "num_ids": 40
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\nprint(tuple_size((1,2,3,4,5,6)))\n",
        "num_ids": 52
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #convert the tuple to a string and split the string into a list\n    #convert the list into an int and multiply it by 4 to find the size\n    #return the size\n    #print(tuple_list)\n    str_list = str(tuple_list)\n    str_list = str_list.replace(\"(\",\"\")\n    str_list = str_list.replace(\")\",\"\")\n    str_list = str_list.split(\",\")\n    int_list = []\n    for item in str_list:\n        int_list.append(int(item))\n    #print(int_list)\n    size = sys.getsizeof(int_list)*4\n    #print(size)\n    return size\n",
        "num_ids": 174
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #we can make the function to sum the tuple's size\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size=0\n    for i in range(len(tuple_list)):\n        total_size=total_size+sys.getsizeof(tuple_list[i])\n    return total_size\n",
        "num_ids": 53
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    print(size)\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for element in tuple_list:\n        print(type(element),len(element))\n",
        "num_ids": 23
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s=sys.getsizeof(tuple_list)\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\nprint(tuple_size([1,2,3]))\n",
        "num_ids": 31
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "num_ids": 32
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    i = 0\n    j = 0\n    # if n == 0:\n    #     return None\n    # elif k > n + m:\n    #     return None\n    # else:\n    while i < n and j < m:\n        if arr1[i] > arr2[j]:\n            i += 1\n        elif arr1[i] < arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None\n",
        "num_ids": 132
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 > len2:\n        max = len1\n    else:\n        max = len2\n    if k > max:\n        return -1\n    if k <= max//2:\n        while arr1[k-1] == arr2[k-1]:\n            k = k-1\n    n = max//2\n    p = 0\n    q = n-1\n    while p <= q:\n        if k < n:\n            if arr1[p] <= arr2[q]:\n                p = p+1\n                k = k-1\n            else:\n                q = q-1\n        else:\n            if arr1[p] <= arr2[q]:\n                return arr1[p]\n            else:\n                return arr2[q]\n",
        "num_ids": 203
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    if j == len(arr2):\n        return arr1[i]\n",
        "num_ids": 91
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    res = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            res.append(arr1[i])\n            i += 1\n        else:\n            res.append(arr2[j])\n            j += 1\n    if i < len(arr1):\n        res += arr1[i:]\n    else:\n        res += arr2[j:]\n    if k < len(res):\n        return res[k]\n    else:\n        return None\n",
        "num_ids": 141
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k <= n1:\n        return search_kth(arr1, arr2, 0, n1, k)\n    elif n1 < k and n2 >= k:\n        return search_kth(arr1, arr2, 0, n1, n2-k)\n    elif k > n2:\n        return search_kth(arr1, arr2, 0, n1, n2)\n    else:\n        return search_kth(arr1, arr2, 0, n1, n2-k)\n",
        "num_ids": 148
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_idx = 0\n    arr2_idx = 0\n    \n    while True:\n        if arr1_idx == len(arr1) or arr2_idx == len(arr2):\n            if arr1_idx == len(arr1):\n                if k == arr2_idx:\n                    return arr2[arr2_idx]\n                else:\n                    return None\n            else:\n                if k == arr1_idx:\n                    return arr1[arr1_idx]\n                else:\n                    return None\n        \n        if arr1[arr1_idx] == arr2[arr2_idx]:\n            arr2_idx += 1\n        arr1_idx += 1\n            \ndef find_kth_two_sorted_arrays(arr1, arr2, k):\n    '''\n    Given two sorted arrays arr1 and arr2 of equal size,\n    the task is to find the kth element from the second array arr2 \n    sorted in ascending order.\n    '''\n    arr1_idx = 0\n    arr2_idx = 0\n    \n    while True:\n        if arr1_idx == len(arr1) or arr2_idx == len(arr2):\n            if arr1_idx == len(arr1):\n                if k == arr2_idx:\n                    return arr2[arr2_idx]\n                else:\n                    return None\n            else:\n                if k == arr1_idx:\n                    return arr1[arr1_idx]\n                else:\n                    return None\n            \n        if arr1[arr1_idx] == arr2[arr2_idx]:\n            arr1_idx += 1\n        arr2_idx += 1\n",
        "num_ids": 175
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr1[mid] == arr2[mid]:\n            if mid == k - 1:\n                return arr1[mid]\n            elif k > mid + 1:\n                low = mid + 1\n            else:\n                high = mid - 1\n        elif arr1[mid] < arr2[mid]:\n            if k <= mid:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            if k <= mid:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return -1\n    ",
        "num_ids": 170
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    if n1 == 0:\n        if k <= n2:\n            return arr2[k-1]\n        else:\n            return None\n    if n2 == 0:\n        if k <= n1:\n            return arr1[k-1]\n        else:\n            return None\n    \n    if n1 == n2:\n        if k == n1:\n            return arr1[k-1]\n        else:\n            return None\n",
        "num_ids": 125
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 and not arr2:\n        return None\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n",
        "num_ids": 51
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    a = 0\n    b = 0\n    arr_merge = []\n    while a < len(arr1) and b < len(arr2):\n        if arr1[a] <= arr2[b]:\n            arr_merge.append(arr1[a])\n            a += 1\n        else:\n            arr_merge.append(arr2[b])\n            b += 1\n    if a == len(arr1):\n        while b < len(arr2):\n            arr_merge.append(arr2[b])\n            b += 1\n    if b == len(arr2):\n        while a < len(arr1):\n            arr_merge.append(arr1[a])\n            a += 1\n    return arr_merge[k-1]\n",
        "num_ids": 184
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    i = number\n    while i > 0:\n        digit = i % 10\n        sum += digit**3\n        i = i//10\n    return number == sum\n",
        "num_ids": 46
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    while (n > 0):\n        sum = sum + (n % 10) ** 3\n        n = n // 10\n    if (sum == number):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_digits = 0\n    power_of_digits = 0\n    x = number\n    while(x > 0):\n        digit = x % 10\n        sum_of_digits = sum_of_digits + digit ** power_of_digits\n        x = x // 10\n        power_of_digits = power_of_digits + 1\n    return (sum_of_digits == number)\n",
        "num_ids": 103
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_number=str(number)\n    i=0\n    total=0\n    while(i<len(str_number)):\n        total+=int(str_number[i])**len(str_number)\n        i+=1\n    if total==number:\n        return True\n    else:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    number_sum = 0\n    reminder = number\n    while (reminder!= 0):\n        count = count + 1\n        reminder = reminder // 10\n    for i in range(count):\n        number_sum = number_sum + (reminder % 10)**count\n        reminder = reminder // 10\n    if (number == number_sum):\n        print(\"The number %d is armstrong\" %number)\n    else:\n        print(\"The number %d is not armstrong\" %number)\n",
        "num_ids": 125
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp_number = number\n    sum = 0\n    while temp_number > 0:\n        digit = temp_number % 10\n        sum = sum + pow(digit, 3)\n        temp_number = temp_number // 10\n    \n    return True if temp_number == sum else False\n",
        "num_ids": 69
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    n = number\n    while(number>0):\n        digit = number%10\n        sum = sum + digit**3\n        number = number//10\n    return(n==sum)\n",
        "num_ids": 51
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return True if number == sum(i**3 for i in range(1,number)) else False\n",
        "num_ids": 25
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = len(str(number))\n    sum = 0\n    for i in range(n):\n        sum += int(number/10)**i % 10\n        number = number % 10\n    if number == sum:\n        print('Armstrong number')\n    else:\n        print('Not an armstrong number')\n",
        "num_ids": 76
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    res = 0\n    for i in num:\n        res = res * int(i) + int(i)\n    if res == number:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 60
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return (sum(range(1,number+1))+number)/number\n",
        "num_ids": 35
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_value=0\n    average_value=0\n    for i in range(number):\n        sum_value += i\n        average_value = sum_value/i\n    print(f\"Sum of first {number} natural numbers is {sum_value}.\")\n    print(f\"Average of first {number} natural numbers is {average_value}.\")\nsum_average(10)\nsum_average(10)\nsum_average(10)\nsum_average(10)",
        "num_ids": 112
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    return sum, sum/number\n",
        "num_ids": 33
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    return sum, sum/number\n",
        "num_ids": 29
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    sum = 0\n    for i in range(n):\n        sum += i + 1\n    print(f\"Sum of first {n} natural numbers is {sum}.\")\n    print(f\"Average of first {n} natural numbers is {sum/n}.\")\n",
        "num_ids": 68
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    total_n = 0\n    for x in range(1, number + 1):\n        total += x\n        total_n += 1\n    average = total/total_n\n    return total, average\n",
        "num_ids": 54
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    n = number\n    while n > 0:\n        s = s + n\n        n = n - 1\n    avg = s / number\n    return s, avg\n",
        "num_ids": 47
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(number)\n    sum = 0\n    for i in range(n):\n        sum += i\n    average = sum/n\n    print(f\"Sum is {sum} and Average is {average}\")\n",
        "num_ids": 54
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    n = 0\n    while n < number:\n        sum += n\n        n += 1\n    average = sum / number\n    print(\"sum: %d\\n\" % (sum))\n    print(\"average: %.2f\\n\" % (average))\n",
        "num_ids": 73
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "num_ids": 34
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #         -- START CODING -- \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n",
        "num_ids": 2013
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n        \ndef even_list(l) : \n    '''\n    Write a python function to get all even numbers from the given list.\n    '''\n    return list(filter(is_Even,l))\n",
        "num_ids": 15
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n % 2!= 0 :\n        return True\n    else :\n        return False\n    \ndef odd_even_checker(n) : \n    '''\n    Write a python function to check whether the given number is odd or even.\n    '''\n    if n % 2 == 0 :\n        print(\"{} is even\".format(n))\n    else :\n        print(\"{} is odd\".format(n))\n        \ndef reverse(str1) : \n    '''\n    Write a python function to reverse the string.\n    '''\n    str_reversed = \"\"\n    for i in range(len(str1) - 1, -1, -1) :\n        str_reversed += str1[i]\n    return str_reversed\n",
        "num_ids": 54
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #Your code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    #Code here\n    ",
        "num_ids": 2014
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0): \n        return True\n    else: \n        return False\n        ",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2==0) : \n        print(\"Number is even\") \n    else : \n        print(\"Number is odd\")\n        \nis_Even(22)\nis_Even(10)\nis_Even(5)\n",
        "num_ids": 59
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    rep_chr = 0\n    s = str1\n    for i in range(len(s)):\n        ch = s[i]\n        if s.count(ch) > 1:\n            rep_chr = ch\n            break\n    return rep_chr\n",
        "num_ids": 66
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n",
        "num_ids": 27
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(str1)\n    for i in range(len(str1)):\n        if str1.count(str1[i])>1:\n            return i\n    return -1\n",
        "num_ids": 47
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        char = str1[i]\n        if str1.count(char) > 1:\n            return char\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    from collections import Counter\n    c = Counter(str1)\n    for k,v in c.items():\n        if v > 1:\n            return k\n",
        "num_ids": 39
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    index=0\n    first_occurence=[]\n    char=''\n    for i in range(len(str1)):\n        if str1[i] in first_occurence:\n            index=first_occurence.index(str1[i])\n            break\n        else:\n            first_occurence.append(str1[i])\n    if index==len(first_occurence):\n        return None\n    else:\n        return first_occurence[index]\n",
        "num_ids": 120
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            return str1[i]\n",
        "num_ids": 41
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n",
        "num_ids": 53
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = list(str1)\n    for i in range(len(lst)):\n        if lst.count(lst[i])>1:\n            return lst[i]\n    else:\n        return None\n",
        "num_ids": 57
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return_str = \"\"\n    count = 0\n    for i in str1:\n        if str1.count(i) > count:\n            count = str1.count(i)\n            return_str = i\n    return return_str\n",
        "num_ids": 59
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    for i in range(1, n):\n        if is_ludic(i):\n            res.append(i)\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(range(0, n, 2)) + list(range(1, n, 2))\n",
        "num_ids": 26
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    assert n >= 0, \"input must be a non-negative integer\"\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if is_ludic(i) and not is_ludic(i + 1) and not is_ludic(i - 1):\n            ludic_numbers.append(i)\n    return ludic_numbers\n",
        "num_ids": 93
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        s = sum(int(i) for i in str(i))\n        if s % 3 == 0:\n            lucids.append(i)\n    return lucids\n",
        "num_ids": 63
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if is_ludic(i):\n            lucids.append(i)\n    return lucids\n",
        "num_ids": 47
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = set()\n    for num in range(n):\n        if (num * num) % 4 == 1:\n            ludics.add(num)\n    return ludics\n    \ndef get_ludicrous_sum_of_four(n):\n    '''\n    Write a function to get all sum of 4 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_six_to_n(n):\n    '''\n    Write a function to get all sum of 6 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_eight_to_n(n):\n    '''\n    Write a function to get all sum of 8 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_ten_to_n(n):\n    '''\n    Write a function to get all sum of 10 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_twenty_to_n(n):\n    '''\n    Write a function to get all sum of 20 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_thirty_to_n(n):\n    '''\n    Write a function to get all sum of 30 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_four_to_n(n):\n    '''\n    Write a function to get all sum of 4 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_six_to_n(n):\n    '''\n    Write a function to get all sum of 6 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_eight_to_n(n):\n    '''\n    Write a function to get all sum of 8 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_ten_to_n(n):\n    '''\n    Write a function to get all sum of 10 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_twenty_to_n(n):\n    '''\n    Write a function to get all sum of 20 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_thirty_to_n(n):\n    '''\n    Write a function to get all sum of 30 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_four_to_n(n):\n    '''\n    Write a function to get all sum of 4 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_six_to_n(n):\n    '''\n    Write a function to get all sum of 6 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_eight_to_n(n):\n    '''\n    Write a function to get all sum of 8 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_ten_to_n(n):\n    '''\n    Write a function to get all sum of 10 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_twenty_to_n(n):\n    '''\n    Write a function to get all sum of 20 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_thirty_to_n(n):\n    '''\n    Write a function to get all sum of 30 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_four_to_n(n):\n    '''\n    Write a function to get all sum of 4 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_six_to_n(n):\n    '''\n    Write a function to get all sum of 6 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_eight_to_n(n):\n    '''\n    Write a function to get all sum of 8 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_ten_to_n(n):\n    '''\n    Write a function to get all sum of 10 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_twenty_to_n(n):\n    '''\n    Write a function to get all sum of 20 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_thirty_to_n(n):\n    '''\n    Write a function to get all sum of 30 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_four_to_n(n):\n    '''\n    Write a function to get all sum of 4 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_six_to_n(n):\n    '''\n    Write a function to get all sum of 6 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_eight_to_n(n):\n    '''\n    Write a function to get all sum of 8 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_ten_to_n(n):\n    '''\n    Write a function to get all sum of 10 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_twenty_to_n(n):\n    '''\n    Write a function to get all sum of 20 to n numbers.\n    '''\n    ludics = get_ludic(n)\n    return sum(ludics)\n    \ndef get_ludicrous_sum_of_thirty_to_n(n):\n    '''\n    Write a function to get all sum of 30 to n numbers.\n    '''\n    ",
        "num_ids": 3
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 5:\n        return [n]\n    elif n % 3 == 0 or n % 5 == 0:\n        return []\n    else:\n        return get_ludic(n - 1) + get_ludic(n - 2) + get_ludic(n - 3) + get_ludic(n - 4)\n",
        "num_ids": 81
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [num for num in range(1, n) if sum(i for i in range(1, n) if num % i == 0) == n]\n",
        "num_ids": 39
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            lucids.append(i)\n    return lucids\n",
        "num_ids": 64
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    for x in range(1, n):\n        if x == 1:\n            continue\n        y = 0\n        while x % 2 == 0:\n            x = x / 2\n            y += 1\n        if x == 3:\n            print(x)\n        elif y!= 0:\n            print(x)\n",
        "num_ids": 77
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print(s.split())\n    return''.join(reversed(s.split()))\n",
        "num_ids": 25
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip().split(\" \")\n    return \" \".join(s[::-1])\n",
        "num_ids": 27
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split()\n    s_list.reverse()\n    return''.join(s_list)\n",
        "num_ids": 30
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split(' ')[::-1])\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) <= 1:\n        return s\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        s = s[:i] + s[j] + s[i+1:j] + s[i]\n        i += 1\n        j -= 1\n    return s\n",
        "num_ids": 80
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    s = s[::-1]\n    return''.join(s)\n",
        "num_ids": 30
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s =''.join(s[::-1])\n    return s\n",
        "num_ids": 27
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(reversed(words))\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return \"\"\n",
        "num_ids": 16
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(words[::-1])\n",
        "num_ids": 24
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime = True\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            prime = False\n            break\n    return prime\n",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # You need to write the code for checking if a number is a prime number here.\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \n",
        "num_ids": 63
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n       # check for factors\n       for i in range(2,num):\n           if (num % i) == 0:\n               print(num,\"is not a prime number\")\n               print(i,\"times\",num//i,\"is\",num)\n               break\n       else:\n           print(num,\"is a prime number\")\n    else:\n       print(num,\"is not a prime number\")\n       \n    '''\n    Write a Python program to check whether a given number (accept from the user) is an Armstrong number or not. An Armstrong number is a number of order n (n = 0, 1, 2,..., n) such that the sum of cubes of its digits is equal to the number itself.\n    Sample Input    Expected Output\n    153    True\n    371    False\n    '''\n    def check_armstrong(number):\n        temp = number\n        order = len(str(number))\n        sum = 0\n        while (number > 0):\n            digit = number % 10\n            sum += digit ** order\n            number //= 10\n        if (temp == sum):\n            print(temp,\"is an Armstrong number\")\n        else:\n            print(temp,\"is not an Armstrong number\")\n        return temp\n    \n    check_armstrong(153)\n    check_armstrong(371)\n    \n    '''\n    Write a Python program to count the number of even and odd numbers from a series of numbers.\n    Sample Data: input\n    6\n    3\n    7\n    8\n    9\n    10\n    output\n    Number of even numbers : 3\n    Number of odd numbers : 5\n    '''\n    def count_even_odd(n):\n        count_even = 0\n        count_odd = 0\n        for i in range(n):\n            numb = int(input())\n            if (numb % 2 == 0):\n                count_even += 1\n            else:\n                count_odd += 1\n        print(\"Number of even numbers :\",count_even)\n        print(\"Number of odd numbers :\",count_odd)\n    \n    count_even_odd(10)\n    \n    '''\n    Write a Python program to print the even numbers after removing the even numbers from a series of numbers.\n    Sample Data: input\n    3\n    4\n    5\n    6\n    output\n    5\n    '''\n    def even_odd_numbers(n):\n        for i in range(n):\n            numb = int(input())\n            if (numb % 2 == 0):\n                print(numb)\n    \n    even_odd_numbers(10)\n    \n    '''\n    Write a Python program to check if a number is prime or not.\n    Sample Data: input\n    9\n    output\n    Not a prime number\n    '''\n    def check_prime(n):\n        if (n <= 1):\n            print(n,\"is not a prime number\")\n        elif (n == 2):\n            print(n,\"is a prime number\")\n        else:\n            for i in range(2,n):\n                if (n % i) == 0:\n                    print(n,\"is not a prime number\")\n                    break\n                else:\n                    print(n,\"is a prime number\")\n        return n\n    \n    check_prime(9)\n    \n    '''\n    Write a Python program to print all the numbers of a series between 0 to 50.\n    Sample Output : 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50.\n    '''\n    def series_of_nums(n):\n        for i in range(0,n):\n            print(i,end=\" \")\n    \n    series_of_nums(20)\n    \n    '''\n    Write a Python program to print numbers from 1 to 100 using the for loop. \n    '''\n    def numbers(n):\n        for i in range(1,n):\n            print(i,end=\" \")\n    numbers(100)\n    \n    '''\n    Write a Python program to print numbers from 1 to 100 using while loop.\n    '''\n    def numbers2(n):\n        while(n <= 100):\n            print(n,end=\" \")\n            n += 1\n    numbers2(100)\n    \n    '''\n    Write a Python program to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x). \n    Sample Dictionary ( n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    def square_dict(n):\n        d = dict()\n        for i in range(1,n+1):\n            d[i] = i * i\n        return d\n    print(square_dict(10))\n    \n    '''\n    Write a Python program to find the mean of numbers in a list. \n    Sample List : [2, 7, 5, 8, 10, 11]\n    Expected Output : 5.00\n    '''\n    def find_mean(a):\n        b = 0\n        for i in range(len(a)):\n            b += a[i]\n        return b/len(a)\n    print(find_mean([2,7,5,8,10,11]))\n    \n    '''\n    Write a Python program to find the median of numbers in a list.\n    '''\n    def find_median(a):\n        b = sorted(a)\n        return b[int(len(a)/2)]\n    print(find_median([2,7,5,8,10,11]))\n    \n    '''\n    Write a Python program to remove duplicates from a list of numbers. \n    Sample List : [5, 8, 12, 11, 4, 5, 8, 5]\n    Expected Output : [5, 4, 5, 8, 11, 8, 5]\n    '''\n    def unique_nums(a):\n        b = []\n        for i in range(len(a)):\n            if a[i] not in b:\n                b.append(a[i])\n        return b\n    print(unique_nums([5, 8, 12, 11, 4, 5, 8, 5]))\n    \n    '''\n    Write a Python program to print the even numbers in a list. \n    Sample List : [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Expected Output : \n    [2, 4, 6, 8, 10]\n    '''\n    def even_nums(a):\n        b = []\n        for i in range(len(a)):\n            if a[i] % 2 == 0:\n                b.append(a[i])\n        return b\n    print(even_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    \n    '''\n    Write a Python program to print the odd numbers in a list. \n    Sample List : [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Expected Output : \n    [1, 3, 5, 7, 9]\n    '''\n    def odd_nums(a):\n        b = []\n        for i in range(len(a)):\n            if a[i] % 2 == 1:\n                b.append(a[i])\n        return b\n    print(odd_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    \n    '''\n    Write a Python program to print the list after sorting it using the bubble sort algorithm.\n    Sample data :\n    list = [8, 4, 2, 3]\n    Output :\n    [2, 3, 4, 8]\n    '''\n    def bubble_sort(a):\n        n = len(a)\n        for i in range(n):\n            for j in range(0, n-i-1):\n                if a[j] > a[j+1]:\n                    ",
        "num_ids": 58
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        if num == 2 or num == 3:\n            return True\n        else:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return False\n            else:\n                return True\n",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(\"{} is not a prime number\".format(num))\n                return False\n        print(\"{} is a prime number\".format(num))\n        return True\n    else:\n        print(\"{} is not a prime number\".format(num))\n        return False\n",
        "num_ids": 94
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    #return math.radians(degree)\n    return degree * math.pi / 180\n",
        "num_ids": 23
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n",
        "num_ids": 17
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef deg_to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef rad_to_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef deg_to_deg_rad(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_rad_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef rad_to_deg_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef deg_to_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * 180 / math.pi\ndef rad_to_deg_rad_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef deg_to_rad_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef rad_to_deg_deg_rad_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef deg_to_rad_deg_rad_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef rad_to_deg_deg_rad_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef rad_to_deg_deg_rad_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef deg_to_rad_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_rad_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef rad_to_deg_deg_deg_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef rad_to_deg_deg_deg_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef rad_to_deg_deg_deg_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_rad_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_rad_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef rad_to_deg_deg_deg_deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg * math.pi / 180\ndef deg_to_deg_deg_deg_deg(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return deg ",
        "num_ids": 6
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n    \ndef make_readable(time_in_seconds):\n    '''\n    Write a function to make a time in seconds readable.\n    '''\n    if time_in_seconds<60:\n        return str(time_in_seconds)+\" seconds\"\n    else:\n        minutes = int(time_in_seconds/60)\n        time_in_seconds = time_in_seconds - minutes*60\n        if time_in_seconds<60:\n            return str(minutes)+\" minute \"+str(time_in_seconds)+\" seconds\"\n        else:\n            return str(minutes)+\" minutes \"+str(time_in_seconds)+\" seconds\"\n    \ndef find_max_power_of_two(n):\n    '''\n    Write a function to find the max power of two that divides n.\n    '''\n    temp = n\n    count = 0\n    while temp>1:\n        temp = temp >> 1\n        count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #Regex to find all literals\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    \n    #Search for matches\n    for match in matches:\n        #Return matches\n        return match.group(), match.start(), match.end()\n",
        "num_ids": 68
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # your code here\n    l = re.finditer(pattern, text)\n    # print(list(l))\n    result = []\n    for i in l:\n        if i[0].startswith('\\''):\n            start_index = i.start()\n        else:\n            start_index = i.start() - 1\n        # print(i[0])\n        result.append((i[0], start_index, i.end() - 1))\n    return result\n",
        "num_ids": 116
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    return None\n",
        "num_ids": 39
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex_pattern = re.compile(pattern)\n    match = regex_pattern.finditer(text)\n    for m in match:\n        return m.group(0), m.start(), m.end()\n    return None, None, None\n",
        "num_ids": 61
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return m.group(0), m.start(), m.end()\n    return None\n",
        "num_ids": 40
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    for literal_match in re.finditer(pattern, text):\n        start, end = literal_match.span()\n        yield text[start:end], start, end\n",
        "num_ids": 43
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    pattern = pattern.replace('\\n', '')\n    pattern = pattern.replace('(', '\\(')\n    pattern = pattern.replace(')', '\\)')\n    pattern = pattern.replace('\\'', '\\(')\n    pattern = pattern.replace('\"', '\\(')\n    \n    # Handling the case where the pattern is a single letter\n    if len(pattern) == 1:\n        return re.search(pattern, text)\n        \n    # Handling the case where the pattern is a single word\n    elif len(pattern.split()) == 1:\n        # Case 1\n        if pattern[0] == '\\\\' and pattern[-1] == '\\\\':\n            return re.search(pattern, text)\n        # Case 2\n        elif pattern[0] == '\\\\' and pattern[-1]!= '\\\\':\n            return re.search(pattern[1:], text)\n        # Case 3\n        else:\n            return re.search(pattern[1:-1], text)\n    \n    # Handling the case where the pattern is an entire word\n    elif len(pattern.split()) > 1:\n        return re.search(pattern, text)\n        \n    # Handling the case where the pattern is a multi word\n    else:\n        # Case 1\n        if pattern[0] == '\\\\' and pattern[-1] == '\\\\':\n            return re.search(pattern, text)\n        # Case 2\n        elif pattern[0] == '\\\\' and pattern[-1]!= '\\\\':\n            return re.search(pattern[1:], text)\n        # Case 3\n        else:\n            return re.search(pattern[1:-1], text)\n    \n    return None\n    \ndef find_tokens(string, pattern):\n    '''\n    Write a function to find all the tokens in the text. \n    '''\n    \n    def split_by_delimiters(string, delimiters):\n        split = []\n        for delimiter in delimiters:\n            for i, s in enumerate(string):\n                if s == delimiter:\n                    split.append(string[:i])\n                    string = string[i + 1:]\n                    break\n        return split + [string]\n    \n    # Handling the case where the pattern is a single letter\n    if len(pattern) == 1:\n        return re.findall(pattern, string)\n    \n    # Handling the case where the pattern is a single word\n    elif len(pattern.split()) == 1:\n        # Case 1\n        if pattern[0] == '\\\\' and pattern[-1] == '\\\\':\n            return re.findall(pattern, string)\n        # Case 2\n        elif pattern[0] == '\\\\' and pattern[-1]!= '\\\\':\n            return re.findall(pattern[1:], string)\n        # Case 3\n        else:\n            return re.findall(pattern[1:-1], string)\n    \n    # Handling the case where the pattern is an entire word\n    elif len(pattern.split()) > 1:\n        return re.findall(pattern, string)\n    \n    # Handling the case where the pattern is a multi word\n    else:\n        # Case 1\n        if pattern[0] == '\\\\' and pattern[-1] == '\\\\':\n            return re.findall(pattern, string)\n        # Case 2\n        elif pattern[0] == '\\\\' and pattern[-1]!= '\\\\':\n            return re.findall(pattern[1:], string)\n        # Case 3\n        else:\n            return re.findall(pattern[1:-1], string)\n    \n    return []\n    \ndef find_quoted_strings(string, pattern):\n    '''\n    Write a function to find all the quoted strings in the text. \n    '''\n    \n    # Handling the case where the pattern is a single letter\n    if len(pattern) == 1:\n        # Case 1\n        if pattern == '\\'':\n            return re.findall(r'\\\\\\'' + pattern + '', string)\n        # Case 2\n        elif pattern == '\"':\n            return re.findall(r'\\\\\\\"' + pattern + '', string)\n        # Case 3\n        else:\n            return re.findall(pattern, string)\n    \n    # Handling the case where the pattern is a single word\n    elif len(pattern.split()) == 1:\n        # Case 1\n        if pattern[0] == '\\\\' and pattern[-1] == '\\\\':\n            return re.findall(r'\\\\\\'' + pattern + '', string)\n        # Case 2\n        elif pattern[0] == '\\\\' and pattern[-1]!= '\\\\':\n            return re.findall(r'\\\\\\\"' + pattern + '', string)\n        # Case 3\n        else:\n            return re.findall(pattern, string)\n    \n    # Handling the case where the pattern is an entire word\n    elif len(pattern.split()) > 1:\n        return re.findall(pattern, string)\n    \n    # Handling the case where the pattern is a multi word\n    else:\n        # Case 1\n        if pattern[0] == '\\\\' and pattern[-1] == '\\\\':\n            return re.findall(r'\\\\\\'' + pattern + '', string)\n        # Case 2\n        elif pattern[0] == '\\\\' and pattern[-1]!= '\\\\':\n            return re.findall(r'\\\\\\\"' + pattern + '', string)\n        # Case 3\n        else:\n            return re.findall(pattern, string)\n    \n    return []\n    \ndef find_escaped_quotes(string, pattern):\n    '''\n    Write a function to find all the escaped quoted strings in the text. \n    '''\n    \n    # Handling the case where the pattern is a single letter\n    if len(pattern) == 1:\n        # Case 1\n        if pattern == '\\\\\\'':\n            return re.findall(r'\\\\\\'' + pattern + '', string)\n        # Case 2\n        elif pattern == '\\\\\\\"':\n            return re.findall(r'\\\\\\\"' + pattern + '', string)\n        # Case 3\n        else:\n            return re.findall(pattern, string)\n    \n    # Handling the case where the pattern is a single word\n    elif len(pattern.split()) == 1:\n        # Case 1\n        if pattern[0] == '\\\\' and pattern[-1] == '\\\\':\n            return re.findall(r'\\\\\\'' + pattern + '', string)\n        # Case 2\n        elif pattern[0] == '\\\\' and pattern[-1]!= '\\\\':\n            return re.findall(r'\\\\\\\"' + pattern + '', string)\n        # Case 3\n        else:\n            return re.findall(pattern, string)\n    \n    # Handling the case where the pattern is an entire word\n    elif len(pattern.split()) > 1:\n        return re.findall(pattern, string)\n    \n    # Handling the case where the pattern is a multi word\n    else:\n        # Case 1\n        if pattern[0] == '\\\\' and pattern[-1] == '\\\\':\n            return re.findall(r'\\\\\\'' + pattern + '', string)\n        # Case 2\n        elif pattern[0] == '\\\\' and pattern[-1]!= '\\\\':\n            return re.findall(r'\\\\\\\"' + pattern + '', string)\n        # Case 3\n        else:\n            return re.findall(pattern, string)\n    \n    return []\n    \ndef find_curly_brackets(string, pattern):\n    '''\n    Write a function to find all the curly brackets in the text. \n    '''\n    \n    # Handling the case where the pattern is a single letter\n    if len(pattern) == 1:\n        # Case 1\n        if pattern == '{':\n            return re.findall(r'\\{' + pattern + '', string)\n        # Case 2\n        elif pattern == '}':\n            return re.findall(r'\\}' + pattern + '', string)\n        # Case 3\n        else:\n            return re.findall(pattern, string)\n    \n    # Handling the case where the pattern is a single word\n    elif len(pattern.split()",
        "num_ids": 139
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # return re.findall('(?P<letter>' + pattern + ')', text)\n    return re.findall(pattern, text)\n",
        "num_ids": 38
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # matches = re.findall(pattern, text)\n    # print(matches)\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text)\n",
        "num_ids": 13
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    else:\n        return n*bell_Number(n-1)+bell_Number(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (n-1)) / 2\n",
        "num_ids": 30
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 1\n    for i in range(1,n+1):\n        bell_num *= i\n    return bell_num\n",
        "num_ids": 36
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * bell_Number(n-1))\n",
        "num_ids": 31
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n    \ndef fibonacci_sequence(n):\n    '''\n    Write a python function to find nth fibonacci sequence.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci_sequence(n-1)+fibonacci_sequence(n-2)\n        \ndef fibonacci_number(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci_number(n-1) + fibonacci_number(n-2)\n    \ndef compute_longest_palindrome_substring(s):\n    '''\n    Write a python function to find the length of the longest palindrome sub-string of given string.\n    '''\n    n = len(s)\n    \n    # we can also solve the same problem using dynamic programming\n    # if we solved it using dynamic programming, we would have used \n    # a 2D array and would have initialized all the entries to 0\n    \n    # dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # for i in range(n):\n    #     for j in range(i,n):\n    #         if s[i] == s[j] and (j-i <= 2 or dp[i+1][j-1]):\n    #             dp[i][j] = 1\n    \n    # maximum = 0\n    \n    # for i in range(n):\n    #     for j in range(n):\n    #         if dp[i][j] == 1:\n    #             maximum = max(maximum, j-i)\n    \n    # return maximum\n    \n    # for a more concise solution\n    # the idea is to build the palindrome substring either horizontally or vertically\n    # if a palindrome substring is found, then the length of the substring \n    # is equal to the length of the string minus the length of the substring\n    \n    # however, the above solution is not efficient and is only to demonstrate\n    # how to implement the above solution using a memoization technique.\n    # a better solution would be to build the matrix based on the length of the string\n    # and then use the memoization technique to find the palindrome substring\n    \n    # therefore, the approach to solve this problem would be to build the\n    # matrix for the given string and check for the palindrome substring\n    # and then find the length of the substring\n    \n    # the naive approach would be to start from the middle of the string\n    # and traverse the string in a single pass.\n    # we can store each position of the middle substring in the array\n    # and then traverse the array and find the palindrome substring\n    \n    # therefore, we can build the matrix as shown below\n    # in the naive approach, we will start from the middle of the string and\n    # traverse the string in a single pass\n    # (note: since the first and last character are already checked for palindrome)\n    # the number of characters checked during the traversal of the string \n    # will be the number of characters in the string minus 2\n    \n    # for example:\n    # for s = \"aab\" the middle substring is \"aa\" and we will check the middle substring for palindrome\n    # traverse the string in a single pass and store each position of the middle substring in the array\n    # compute the length of the substring and store it in the array\n    # traverse the array and find the palindrome substring\n    # in the naive approach, the length of the substring would be 3\n    # but this is the worst-case time complexity of the naive approach\n    \n    # so, let's build a more efficient approach to solve this problem using dynamic programming\n    # for this problem, we can store each position of the middle substring in the array\n    # and then traverse the array and find the palindrome substring\n    \n    # in the better approach, we will build the matrix in a DYNAMIC programming approach\n    # at each time step, we will check the maximum length substring between the current and previous\n    # characters. If the substring is a palindrome, then we will update the maximum length\n    # substring for the current character\n    \n    # for example:\n    # for s = \"aab\" the middle substring is \"aa\" and we will check the middle substring for palindrome\n    # at the first step, the middle substring \"aa\" is the maximum substring of length 2\n    # if the substring \"a\" is palindrome, then the substring \"ab\" is palindrome as well\n    # so the maximum substring for the current character will be \"aa\"\n    # since we have already checked the substring \"a\", we will check the substring \"ab\"\n    # and check for palindrome\n    # so, at the second step, the middle substring \"ab\" will be the maximum substring of length 3\n    # since the substring \"a\" is palindrome and the substring \"ab\" is palindrome\n    # so, the maximum substring for the current character will be \"ab\"\n    # so, now, the maximum substring for the current character will be \"ab\"\n    # in the third step, the middle substring will be \"a\" and we will check the middle substring for palindrome\n    # if the substring \"a\" is palindrome, then the substring \"ba\" is palindrome too\n    # so, the maximum substring for the current character will be \"ab\"\n    # so, now, the maximum substring for the current character will be \"ab\"\n    # in the fourth step, the middle substring will be \"b\" and we will check the middle substring for palindrome\n    # if the substring \"b\" is palindrome, then the substring \"bb\" is palindrome too\n    # so, the maximum substring for the current character will be \"ab\"\n    # so, now, the maximum substring for the current character will be \"ab\"\n    # for the rest of the characters in the string, we will check for palindrome\n    # which is the same as the naive approach\n    \n    # so, the time complexity of the better approach will be O(n)\n    \n    # therefore, we can build the matrix in a DYNAMIC programming approach using the above idea\n    # by using the below mentioned technique\n    # let us say that the matrix is of size nxn\n    # we will build the matrix using the naive approach\n    # first, we will store the middle substring of each row in the matrix\n    # then, we will check the middle substring for palindrome\n    # then, we will update the maximum length substring\n    # for example, let us consider the matrix as shown below\n    # if the length of the string is 5, then we will store the middle substring\n    # for s = \"aab\"\n    # s[0] = \"a\"\n    # s[1] = \"a\"\n    # s[2] = \"ab\"\n    # s[3] = \"a\"\n    # s[4] = \"a\"\n    # after the above, we will check if \"a\" is a palindrome\n    # if it is, then we will update the middle substring\n    # as \"aa\"\n    # for s = \"aab\"\n    # s[0] = \"a\"\n    # s[1] = \"a\"\n    # s[2] = \"ab\"\n    # s[3] = \"a\"\n    # s[4] = \"a\"\n    # s[5] = \"ab\"\n    # s[6] = \"a\"\n    # s[7] = \"a\"\n    # after the above, we will check if \"ab\" is a palindrome\n    # if it is, then we will update the middle substring\n    # as \"aa\"\n    # for s = \"aab\"\n    # s[0] = \"a\"\n    # s[1] = \"a\"\n    # s[2] = \"ab\"\n    # s[3] = \"a\"\n    # s[4] = \"a\"\n    # s[5] = \"ab\"\n    # s[6] = \"a\"\n    # s[7] = \"a\"\n    # s[8] = \"ab",
        "num_ids": 1772
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    \n    a = 1\n    b = 1\n    i = 2\n    while i <= n:\n        a = b\n        b = a + a\n        i += 1\n    return a\n",
        "num_ids": 58
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Dictionary to store the factorial of each digit.\n    fact = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 0: 1}\n    # Store the product of the factorials.\n    prod = 1\n    # Traverse through each digit of the nth Bell number.\n    for i in range(n): \n        prod *= fact[i]\n        # Increase the value of fact by 1.\n        fact[i] += 1\n    return prod\n",
        "num_ids": 136
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    count = 0\n    while n>0:\n        count += 1\n        n = n - 3*count\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    return n * bell_Number(n - 1)\n",
        "num_ids": 26
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n=int(n)\n    fib=[]\n    for i in range(n):\n        if i==0:\n            fib.append(1)\n        elif i==1:\n            fib.append(1)\n        else:\n            fib.append(fib[i-1]+fib[i-2])\n    print(fib)\n",
        "num_ids": 90
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.sort()\n    \n    L_copy = list1[:L] + list1[L+1:]\n",
        "num_ids": 31
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in list1:\n        if list1.index(i)!= L:\n            list2.append(i)\n    return list2\n",
        "num_ids": 43
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    k = 1\n    for i in range(0, L):\n        if (k > L):\n            break\n        if (i == L - k):\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i])\n        k = k + 1\n    return list2\n        \nL = 5\nlist1 = [1,2,3,4,5,6,7]\nlist2 = remove_kth_element(list1, L)\nprint(list2)\nprint(list1",
        "num_ids": 136
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # initialization\n    i = 0\n    k = 0\n    n = len(list1)\n    # write your code here\n    while i < n:\n        if i!= L:\n            k += 1\n        i += 1\n    return list1[0:k]\n",
        "num_ids": 67
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    if len(L) == 1:\n        return []\n    if L[0] == L[len(L) - 1]:\n        return L[0:len(L)-1]\n    k = len(L) - 1\n    for i in range(len(L)):\n        if L[i] < L[k]:\n            L[i], L[k] = L[k], L[i]\n            k = i\n    L.pop(k)\n    return L\n",
        "num_ids": 127
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list(list1)\n    list2.pop(L)\n    return list2\n",
        "num_ids": 26
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return L\n    elif L[0] == L[L.index(k)]:\n        return list1[:L.index(k)] + list1[L.index(k)+1:]\n    else:\n        return list1[:L.index(k)] + list1[L.index(k)+1:]\n",
        "num_ids": 85
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n",
        "num_ids": 16
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n",
        "num_ids": 16
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    length = len(list1) - 1\n    if length <= 0:\n        print('The length of the list is 0. Cannot remove the kth element.')\n    else:\n        index = length - L\n        if index < 0:\n            print('The kth element index is out of the list range.')\n        else:\n            return list1[:index] + list1[index+1:]\n",
        "num_ids": 96
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    '''\n    # This approach is O(n) time and space\n    for i in range(len(test_list)):\n        if N > len(test_list[i]):\n            return max(test_list[i])\n    return max(test_list[i][N - 1])\n    '''\n    '''\n    Approach 2:\n    # This approach is O(n) time and space\n    def max_of_nth_column(matrix, N):\n        n = len(matrix)\n        if N >= n:\n            return None\n        max_value = -float('inf')\n        for i in range(len(matrix[N - 1])):\n            max_value = max(max_value, matrix[N - 1][i])\n        return max_value\n    return max_of_nth_column(test_list, N)\n    '''\n    # This approach is O(n) time and space\n    def max_of_nth_column(matrix, N):\n        n = len(matrix)\n        max_value = -float('inf')\n        if N >= n:\n            return None\n        for i in range(len(matrix[N - 1])):\n            max_value = max(max_value, matrix[N - 1][i])\n        return max_value\n    return max_of_nth_column(test_list, N)\n",
        "num_ids": 124
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    if n == 0:\n        return None\n    elif N < 0 or N >= n:\n        return None\n    else:\n        return max(test_list[N])\n",
        "num_ids": 54
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # if n == 1:\n    #     return max(test_list[0])\n    # else:\n    #     return max(max_of_nth(test_list, N-1), max_of_nth(test_list, N-1))\n    # return max(max_of_nth(test_list, n), max_of_nth(test_list, n-1))\n    if N == 1:\n        return max(test_list[0])\n    return max(max_of_nth(test_list, N-1), max_of_nth(test_list, N-1))\n",
        "num_ids": 152
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val\n",
        "num_ids": 63
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    list_of_lists = []\n    for row in test_list:\n        list_of_lists.append(row)\n    new_list = []\n    for item in list_of_lists:\n        new_list.append(item[N - 1])\n    return max(new_list)\n",
        "num_ids": 73
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val\n",
        "num_ids": 71
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_nth = 0\n    for item in test_list:\n        if len(item) < N:\n            break\n        max_nth = max(max_nth, max(item[0:N]))\n    return max_nth\n",
        "num_ids": 62
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 1 or N > len(test_list):\n        return None\n    max_value = 0\n    for row in test_list:\n        max_value = max(max_value, row[N-1])\n    return max_value\n",
        "num_ids": 61
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # code here\n    max_col = []\n    for i in range(len(test_list)):\n        max_col.append(max(test_list[i]))\n    return max_col[N-1]\n",
        "num_ids": 56
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    cols = len(test_list[0])\n    max_col = 0\n    for i in range(0, cols):\n        curr_max = max(test_list, key=lambda x: x[i])\n        max_col = max(max_col, curr_max)\n    return max_col\n",
        "num_ids": 79
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = []\n    second = []\n    for item in lst:\n        if len(item) == 2:\n            first.append(item[0])\n            second.append(item[1])\n    return first, second\n",
        "num_ids": 56
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    lst = merge(lst[:len(lst)//2]) + merge(lst[len(lst)//2:])\n    return merge_sort(lst)\n",
        "num_ids": 77
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    merged_list.append(lst[0][0])\n    merged_list.append(lst[0][1])\n    for i in range(1, len(lst)):\n        merged_list.append(lst[i][0])\n        merged_list.append(lst[i][1])\n",
        "num_ids": 89
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for l in lst:\n        res.append([l[0],l[1]])\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append(i[0])\n        merged.append(i[1])\n    return merged\n",
        "num_ids": 42
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst.sort()\n    rst = [[],[]]\n    for a in range(len(lst)):\n        rst[0].append(lst[a][0])\n        rst[1].append(lst[a][1])\n    return rst\n",
        "num_ids": 67
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append(i[0])\n        merged.append(i[1])\n    return merged\nmerge([[1,2],[3,4],[5,6],[7,8]])\n",
        "num_ids": 64
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    final_list = []\n    for element in lst:\n        final_list.append(element[0])\n        final_list.append(element[1])\n    return final_list\n",
        "num_ids": 49
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    newList = []\n    n = len(lst)\n    for i in range(n):\n        newList.append([lst[i][0], lst[i][1]])\n    return newList\n    \nmerge([[1, 3], [2, 5], [7, 9]])\n",
        "num_ids": 77
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    lst1 = []\n    lst2 = []\n    lst3 = []\n    \n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    \n    for i in range(len(lst1)):\n        lst3.append([lst1[i], lst2[i]])\n    \n    return lst3\n",
        "num_ids": 104
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)-1):\n        test_list[i] = test_list[i] + test_list[i+1]\n    return test_list\n",
        "num_ids": 47
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        result += test_list[i]\n    print(result)\n",
        "num_ids": 37
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for i in range(0,len(test_list)):\n        result += test_list[i]\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # return functools.reduce(lambda x, y: x + y, test_list)\n",
        "num_ids": 26
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    result = 0\n    for i in range(0,len(test_list)):\n        result = result + test_list[i]\n    return result\n    \n    \n    \n    \n    \n    \n",
        "num_ids": 53
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n        \n    return cummulative_sum\n        \n",
        "num_ids": 51
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    for i in range(len(test_list)):\n        cummulative_sum_list.append(sum(test_list[:i+1]))\n    return cummulative_sum_list\n",
        "num_ids": 61
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum = cum_sum + test_list[i]\n    return cum_sum\n",
        "num_ids": 45
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # AVERAGE\n    # returns the average value for each tuple in the tuple\n    # returns a list of tuples\n",
        "num_ids": 30
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    x = []\n    for i in range(len(nums)):\n        x.append(sum(nums[i]) / len(nums[i]))\n    return x\n",
        "num_ids": 46
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for x in range(len(nums)):\n        sum += nums[x]\n    return (sum/len(nums), nums)\n    \ndef average_list(nums):\n    '''\n    Write a function which takes a list of numbers and returns the average value as a float.\n    '''\n    sum = 0\n    for x in nums:\n        sum += x\n    return (sum/len(nums), nums)\n",
        "num_ids": 34
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(nums, tuple()) / len(nums)\n",
        "num_ids": 18
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_tuple = nums\n    length = len(nums_tuple)\n    num_total = 0\n    for i in range(length):\n        num_total += nums_tuple[i]\n    return num_total / length\n",
        "num_ids": 62
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x) / len(x), nums))\n",
        "num_ids": 24
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #To make this easier, you can assume there will be only one tuple for each tuple in the input\n    return (sum(nums) / len(nums), nums)\n",
        "num_ids": 43
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    count = 0\n    total = 0\n    new_tuple = ()\n",
        "num_ids": 20
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(sum(nums[i])/len(nums[i]))\n    return tuple(new_list)\n",
        "num_ids": 55
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(tuple(sum(i)/len(i)) for i in nums)\n",
        "num_ids": 24
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((tup1 - tup2)%int(tup1) for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 45
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(tup1_el % tup2_el for tup1_el, tup2_el in zip(test_tup1, test_tup2))\n",
        "num_ids": 45
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] % test_tup2[i], )\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "num_ids": 58
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # return tuple(map(lambda tup:tup[0] % tup[1], zip(test_tup1, test_tup2)))\n    return tuple(map(lambda tup1, tup2: tup1 % tup2, test_tup1, test_tup2))\n",
        "num_ids": 75
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    else:\n        raise ValueError(\"Error: tuple lengths are not equal\")\n",
        "num_ids": 68
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('The tuples should be of the same length')\n        return\n    else:\n        return (int(test_tup1[i]) % int(test_tup2[i]) for i in range(len(test_tup1)))\n    ",
        "num_ids": 82
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    x, y = test_tup1\n    u, v = test_tup2\n    if x == y and x == u and x == v:\n        print(test_tup1, \" = \", test_tup2, \" = \", tuple(map(lambda a, b: a%b, test_tup1, test_tup2)))\n    else:\n        print(\"Error: tuples aren't the same length\")\n",
        "num_ids": 104
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: return 1\n    if d == 0: return 0\n    \n    if steps > 0: return min_Jumps(steps - 1, d)\n    if steps < 0: return min_Jumps(steps + 1, d)\n    return min_Jumps(steps - d, d) + min_Jumps(steps + d, d)\n",
        "num_ids": 86
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # print(steps)\n    if steps == 1:\n        if d == 0:\n            return 1\n        else:\n            return 0\n    if steps == 2:\n        if d == 0:\n            return 1\n        else:\n            return 0\n    if steps == 3:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 4:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 5:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 6:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 7:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 8:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 9:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 10:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 11:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 12:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 13:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 14:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 15:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 16:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 17:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 18:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 19:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 20:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 21:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 22:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 23:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 24:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 25:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 26:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 27:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 28:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 29:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 30:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 31:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 32:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 33:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 34:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 35:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 36:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 37:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 38:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 39:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 40:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 41:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 42:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 43:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 44:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 45:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 46:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 47:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 48:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 49:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 50:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 51:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 52:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:\n            return 0\n    if steps == 53:\n        if d == 0:\n            return 2\n        elif d == 1:\n            return 1\n        else:",
        "num_ids": 1994
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps = steps\n    d = d\n    if (steps == 1):\n        return 0\n    if (steps < 1):\n        return -1\n    if (d == 0):\n        return 1\n    steps -= 1\n    return min_Jumps(steps, d - 1) + min_Jumps(steps, d - 2)\n",
        "num_ids": 80
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    points = []\n    x, y = 0, 0\n    for i in range(steps):\n        if (x, y) in points:\n            return jumps\n        points.append((x, y))\n        if (x + 1, y) not in points:\n            x = x + 1\n            jumps = jumps + 1\n        elif (x, y + 1) not in points:\n            y = y + 1\n            jumps = jumps + 1\n        else:\n            jumps = jumps\n            x = x + 1\n            y = y + 1\n    return jumps\n",
        "num_ids": 143
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if steps < 0:\n        return -1\n",
        "num_ids": 25
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    jump = steps\n    while jump > 0:\n        if d == 0:\n            return count\n        else:\n            jump = jump - d\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = 0\n    i = 0\n    while (i<=steps) and (n<steps):\n        if (i+d) < steps and (i+d+d)<=steps:\n            i += d\n            n += 1\n        else:\n            i += 1\n    return n\n",
        "num_ids": 72
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    num_jumps = 0\n    \n    for i in range(0, steps): \n        if (i < d): \n            if (i == 0): \n                num_jumps = num_jumps + 1\n            else: \n                num_jumps = num_jumps + 1\n                num_jumps = num_jumps + 1\n        else: \n            num_jumps = num_jumps + 1\n    return num_jumps \n",
        "num_ids": 112
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump_count = 0\n    steps = steps % 2\n    #Jump_in_direction[current_pos] = (next_pos, jump_count)\n",
        "num_ids": 39
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 0:\n        return -1\n    if d < 0:\n        return -1\n",
        "num_ids": 26
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return(list(map(lambda x,y : x/y, nums1, nums2)))\n",
        "num_ids": 27
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res=[]\n    for x,y in zip(nums1,nums2):\n        res.append(x/y)\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [a/b for a,b in zip(nums1,nums2)]\n    ",
        "num_ids": 25
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l1 = []\n    l2 = []\n    for x in range(len(nums1)):\n        l1.append(nums1[x])\n        l2.append(nums2[x])\n    divide = []\n    for x in range(len(l1)):\n        divide.append(l1[x]/l2[x])\n    return divide\n",
        "num_ids": 95
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1_list = nums1.copy()\n    nums2_list = nums2.copy()\n    if len(nums1)>len(nums2):\n        nums1_list = nums2.copy()\n    elif len(nums2)>len(nums1):\n        nums2_list = nums1.copy()\n    result = []\n    for i in range(len(nums1_list)):\n        result.append(nums1_list[i]/nums2_list[i])\n    return result\n",
        "num_ids": 139
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) < len(nums2):\n        num1_size = len(nums1)\n    else:\n        num1_size = len(nums2)\n    num1 = nums1[:num1_size]\n    num2 = nums2[:num1_size]\n    return num1,num2\n",
        "num_ids": 86
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [nums1[i] / nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 31
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result_list = []\n    for i in range(len(nums1)):\n        result_list.append(nums1[i]/nums2[i])\n    return result_list\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    my_string = ''\n    for i in test_str:\n        if i.isnumeric():\n            my_string += i\n    return my_string\n",
        "num_ids": 40
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for c in test_str:\n        if c.isnumeric():\n            result = result + c + c\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Make list of all numbers\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n",
        "num_ids": 45
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for x in test_str:\n        if x.isnumeric():\n            nums.append(x)\n    while nums:\n        temp = nums.pop(0)\n        print(temp)\n        test_str = test_str.replace(temp, '', 1)\n        print(test_str)\n    return test_str\n",
        "num_ids": 90
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    my_string = list(test_str)\n    count = 0\n    for i in range(len(my_string)):\n        if my_string[i].isnumeric():\n            my_string.pop(i)\n            my_string.insert(count, my_string[i])\n            count += 1\n    return \"\".join(my_string)\n    \n",
        "num_ids": 90
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in test_str:\n        if i.isdigit():\n            new_str += i\n    for i in range(len(new_str)):\n        if i == 0:\n            new_str += new_str[i:] + new_str[:i]\n    return new_str\n",
        "num_ids": 81
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    num = 0\n    for char in test_str:\n        if char.isdigit():\n            num = num * 10\n            num += ord(char) - ord(\"0\")\n        else:\n            new_str += char\n    return new_str\n",
        "num_ids": 69
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    list1 = []\n    for i in test_str:\n        if i.isnumeric():\n            list1.append(i)\n    if len(list1) == 0:\n        return \"No Numbers\"\n    else:\n        print(f\"Initial string: {test_str}\")\n        print(f\"List with numbers: {list1}\")\n        list1.sort(reverse=True)\n        test_str = test_str.replace(\"\".join(list1), \"\")\n        print(f\"Final string: {test_str}\")\n        return test_str\n",
        "num_ids": 139
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for char in test_str:\n        if char.isnumeric():\n            new_str = new_str + char +''\n    return new_str.strip()\n",
        "num_ids": 49
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # get the number of strings in the strng\n    number_of_strings = len(test_str)\n    # get the string\n    string_to_reverse = test_str\n    # get the index of the first occurrence of the string\n    index = 0\n    while index < number_of_strings:\n        # get the first occurrence of the string in the strng\n        first_occurrence_of_the_string = string_to_reverse.find(string_to_reverse[index])\n        # get the index of the last occurrence of the string in the strng\n        index_of_last_occurrence = len(string_to_reverse) - 1\n        # get the last occurrence of the string in the strng\n        last_occurrence_of_the_string = string_to_reverse.rfind(string_to_reverse[index])\n        # if the index of the last occurrence of the string is greater than the index of the first occurrence of the string\n        if index_of_last_occurrence > first_occurrence_of_the_string:\n            # go from the first occurrence of the string to the last occurrence of the string\n            index = index_of_last_occurrence + 1\n        # else\n        else:\n            # move the index\n            index += 1\n    # reverse the string\n    # print(string_to_reverse)\n    return string_to_reverse[index:] + string_to_reverse[:index]\n    # return string_to_reverse\n",
        "num_ids": 345
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    l = len(a)\n    if l == 0:\n        return 0\n    if l == 1:\n        return 1\n    s = 0\n    dp = [[False for j in range(l)] for i in range(l)]\n    for j in range(l):\n        dp[j][j] = True\n    for i in range(l):\n        for j in range(i, l):\n            if a[j] % a[i] == 0 and dp[i][j] == False:\n                s = 1 + max(s, largest_subset(a[:j]))\n                dp[i][j] = True\n    return s\n",
        "num_ids": 156
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 1:\n        return 1\n",
        "num_ids": 16
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n    \n    dp = [[0 for i in range(len(a))] for j in range(len(a))]\n    \n    for i in range(len(a)):\n        dp[i][i] = 1\n    \n    for i in range(len(a)):\n        dp[i][i] = 1\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 and dp[i][j-1]!= 1:\n                dp[i][j] = 1\n                \n    return dp[0][len(a)-1]\n",
        "num_ids": 162
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset(a):\n        if not a:\n            return 0\n        if len(a) == 1:\n            return 1\n        max_s = 1\n        max_arr = a[:]\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                if a[i]%a[j] == 0 and a[i]/a[j] not in max_arr:\n                    max_arr.append(a[i]/a[j])\n                    max_s = max(max_s, 1+largest_subset(max_arr))\n                    max_arr.remove(a[i]/a[j])\n        return max_s\n    return largest_subset(a)\n",
        "num_ids": 183
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #if len(a) <= 1:\n    #    return len(a)\n    #max_count = 1\n    #max_number = a[0]\n    #max_list = []\n    #max_list.append(a[0])\n    #for i in range(len(a)):\n    #    for j in range(i+1, len(a)):\n    #        if j >= len(a):\n    #            break\n    #        if a[i] % a[j] == 0:\n    #            max_count += 1\n    #            max_list.append(a[j])\n    #        else:\n    #            break\n    #    if max_count > max_count:\n    #        max_count = max_count\n    #        max_number = max_list\n    #return max_number\n    \n    #print(len(max_list))\n    #max_list = a\n    max_count = 1\n    max_number = a[0]\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            max_count += 1\n            max_number = max(max_number, a[i])\n    return max_number\n",
        "num_ids": 300
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if a == []:\n        return []\n    elif len(a) == 1:\n        return a\n    else:\n        b = a[1:]\n        c = largest_subset(b)\n        if max(c) < a[0]:\n            return a\n        else:\n            return c\n",
        "num_ids": 75
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    length = len(a)\n    if length == 1:\n        return (1)\n    elif length == 2:\n        if a[0] % a[1] == 0:\n            return (2)\n        else:\n            return (1)\n    elif length == 3:\n        if a[0] % a[1] == 0:\n            return (2)\n        elif a[1] % a[2] == 0:\n            return (2)\n        else:\n            return (1)\n    else:\n        subset = largest_subset(a[0:length-1])\n        subset_length = len(subset)\n        for i in range(subset_length):\n            if i == 0:\n                result = subset[i] + 1\n            elif i == subset_length-1:\n                result = max(result, subset[i])\n            else:\n                result = max(result, subset[i]+1)\n        for i in range(subset_length):\n            if i == 0:\n                result = max(result, a[i]//subset[i])\n            elif i == subset_length-1:\n                result = max(result, a[i]//subset[i-1])\n            else:\n                result = max(result, a[i]//subset[i])\n        return (result)\n",
        "num_ids": 325
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    largest_subset = 0\n    n = len(a)\n    a.sort()\n    for i in range(n-1):\n        if a[i] % a[i+1] == 0:\n            largest_subset = max(largest_subset, a[i+1])\n    return largest_subset\n",
        "num_ids": 79
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 1\n    current_size = 1\n    for i in range(1,len(a)):\n        if a[i]%a[i-1]==0:\n            current_size += 1\n        else:\n            current_size = 1\n        if current_size > max_size:\n            max_size = current_size\n    return max_size\n",
        "num_ids": 97
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    d = {}\n    l = 1\n    r = n\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = 1\n        else:\n            d[a[i]] += 1\n    # print(d)\n    for i in d:\n        if l > d[i]:\n            l = d[i]\n    for i in reversed(range(l)):\n        if i not in d:\n            continue\n        else:\n            d[i] = 0\n            break\n    # print(d)\n    for i in d:\n        if r < d[i]:\n            r = d[i]\n    for i in range(r):\n        if i not in d:\n            continue\n        else:\n            d[i] = 0\n    return l, r, d\n",
        "num_ids": 215
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    arr = []\n    n1, n2 = len(arr1), len(arr2)\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    \n    while i < n1:\n        arr.append(arr1[i])\n        i += 1\n    \n    while j < n2:\n        arr.append(arr2[j])\n        j += 1\n    \n    return arr\n",
        "num_ids": 157
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_list = []\n    for i in range(0, n):\n        sorted_list.append(arr1[i])\n        sorted_list.append(arr2[i])\n",
        "num_ids": 49
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if(len(arr1)==0 and len(arr2)==0):\n        return 0\n    elif(len(arr1)==0):\n        return arr2[int(len(arr2)/2)]\n    elif(len(arr2)==0):\n        return arr1[int(len(arr1)/2)]\n    else:\n        arr1_len = len(arr1)\n        arr2_len = len(arr2)\n        if(arr1_len>arr2_len):\n            return get_median(arr1, arr2[:int(len(arr2)/2)], int(len(arr2)/2))\n        else:\n            return get_median(arr1[:int(len(arr1)/2)], arr2, int(len(arr2)/2))\n",
        "num_ids": 196
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    for i in range(0, n):\n        arr1[i] = arr1[i] + 1\n    \n    for i in range(0, n):\n        arr2[i] = arr2[i] + 1\n    \n    for i in range(0, n):\n        arr1[i] = arr1[i] - 1\n    \n    for i in range(0, n):\n        arr2[i] = arr2[i] - 1\n    \n    arr1.sort()\n    arr2.sort()\n    \n    i = j = 0\n    for i in range(0, n):\n        arr1[i] = arr1[i] - 1\n    \n    for i in range(0, n):\n        arr2[i] = arr2[i] - 1\n    \n    for i in range(0, n):\n        arr1[i] = arr1[i] + 1\n    \n    for i in range(0, n):\n        arr2[i] = arr2[i] + 1\n    \n    return (arr1[n//2] + arr2[n//2])/2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2009
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m1 = 0\n    m2 = 0\n    \n    while True:\n        if m1 > n//2:\n            return arr2[m2]\n        if m2 > n//2:\n            return arr1[m1]\n        \n        if arr1[m1] > arr2[m2]:\n            m2 += 1\n        else:\n            m1 += 1\n",
        "num_ids": 93
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    lst = arr1 + arr2\n    lst.sort()\n    print(\"sorted list\", lst)\n    if len(lst)%2 == 0:\n        median = (lst[int(len(lst)/2)] + lst[int((len(lst)/2)-1)])/2\n    else:\n        median = lst[int(len(lst)/2)]\n    return median\n",
        "num_ids": 104
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if len(arr1) > len(arr2):\n    #     return get_median(arr2, arr1, len(arr1))\n    \n    arr1.extend(arr2)\n    arr1 = sorted(arr1)\n    # print(arr1)\n    if len(arr1) % 2 == 0:\n        # if len(arr1) == 0:\n        return (arr1[(len(arr1)//2) - 1] + arr1[(len(arr1)//2)])/2\n    else:\n        return arr1[(len(arr1)//2)]\n",
        "num_ids": 148
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if n == 1:\n    #     return min(arr1[0], arr2[0])\n    # elif n == 2:\n    #     return min(arr1[0], arr2[0], arr1[1], arr2[1])\n    # else:\n    #     low, high = 0, n-1\n    #     while low <= high:\n    #         mid = (low + high)//2\n    #         if (arr1[mid] > arr2[high]) ^ (arr2[high] < arr1[mid]):\n    #             return arr1[mid]\n    #         elif arr1[mid] > arr2[high]:\n    #             high = mid - 1\n    #         elif arr1[mid] < arr2[high]:\n    #             low = mid + 1\n    #     return arr1[low]\n",
        "num_ids": 206
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == n:\n        return arr2[j]\n    else:\n        return arr1[i]\n",
        "num_ids": 75
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Naive approach:\n    # res = []\n    # for _ in range(n):\n    #     if len(arr1) > len(arr2):\n    #         arr2.append(arr1[_])\n    #     else:\n    #         arr1.append(arr2[_])\n",
        "num_ids": 73
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_power = []\n    for x in nums:\n        nums_power.append(x ** n)\n    return nums_power\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #Initialize the output list\n    out = []\n    #Loop through the array\n    for num in nums:\n        #Add a number to the output list\n        out.append(num ** n)\n    return out\n",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0:\n        return None\n    if n == 0:\n        return []\n    if n == 1:\n        return nums\n    if n == 2:\n        return [x*x for x in nums]\n    return [nums[0]*n] + nth_nums(nums[1:],n-1)\n",
        "num_ids": 89
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    res = []\n    for i in nums:\n        if(n>=0):\n            res.append(i**n)\n            n-=1\n        else:\n            res.append(1/i)\n            n+=1\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    nums_pow = []\n    for num in nums:\n        nums_pow.append(num ** n)\n    return nums_pow\n",
        "num_ids": 47
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return nums\n    return sorted(nth_nums(nums[1:],n-1),reverse = True) + nums[0:1]\n",
        "num_ids": 58
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i**n)\n    return res\nprint(nth_nums([1,2,3,4],3))\n",
        "num_ids": 48
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef join_string(a_string):\n    '''\n    Write a python function to join all the characters present in the given string.\n    '''\n    return a_string.join()\n    \ndef find_word_in_string(word, a_string):\n    '''\n    Write a python function to find a particular word in a given string.\n    '''\n    return a_string.find(word)\n    \ndef is_positive(a_number):\n    '''\n    Write a python function to determine if the given number is positive or negative.\n    '''\n    return a_number > 0\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = ''\n    for i in string:\n        if i.isupper():\n            upper_string = upper_string + i\n    return upper_string\n    ",
        "num_ids": 42
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # first convert string into list of characters\n    \n    if len(string) == 0:\n        return True\n    \n    # convert all characters in list to uppercase\n    \n    for i in range(len(string)):\n        string[i] = string[i].upper()\n    \n    return string\n    ",
        "num_ids": 76
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \nprint(is_upper(\"hello\"))\nprint(is_upper(\"HI\"))\nprint(is_upper(\"How are you?\"))\n",
        "num_ids": 41
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppers = \"\"\n    for char in string:\n        if char.islower():\n            uppers += char.upper()\n        else:\n            uppers += char\n    return uppers\n",
        "num_ids": 47
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a=newList.pop()\n    b=newList.pop(0)\n    newList.append(a)\n    newList.append(b)\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    temp = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = temp\n    return newList\n",
        "num_ids": 56
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Initialize pointers to point at head and tail of given list.\n    head = newList.head \n    tail = newList.tail\n    newList.head = tail\n    newList.tail = head\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n",
        "num_ids": 34
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # newList = list1.copy()\n    length = len(newList)\n    if length <= 1:\n        return newList\n    else:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return swap_List(newList)\n",
        "num_ids": 77
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = [newList[-1], newList[0]]\n    print('\\nThe new list is: ', newList)\n",
        "num_ids": 34
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    print(newList)\n",
        "num_ids": 42
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # code here\n    n = len(newList)\n    newList[0],newList[n-1] = newList[n-1],newList[0]\n    return newList\n",
        "num_ids": 48
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    print(newList)\n",
        "num_ids": 35
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"List before interchange\")\n    print(newList)\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    print(\"List after interchange\")\n    print(newList)\n",
        "num_ids": 70
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    import numpy as np\n    s = 0\n    h = 0\n    for i in range(0,3) :\n        s = math.pi * r**2\n        a = math.sqrt((1 + math.sqrt(5)) /2)\n        b = math.sqrt((5 - math.sqrt(5)) /2)\n        c = math.sqrt(5)\n        h = (s / 4) * a\n        k = (s / 4) * b\n        l = (s / 4) * c\n        if(i == 0 or i == 1) :\n            print('Triangle side length :', a)\n        else :\n            print('Triangle side length :', b)\n        print('Triangle height :', h)\n        print('Triangle base :', l)\n        \n    return s\n    \nprint('Enter radius :', end = '')\nr = float(input())\nprint(triangle_area(r)",
        "num_ids": 230
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # You need to write your code here\n    # Hint: you can calculate the area of the triangle using the equation of the triangle (area = 1/2 * h * w)\n    # Input\n    # The input to the function/method consists of two arguments, r and w. \n    # It is guaranteed that the radius r is always less than or equal to the value of the variable w.\n    # Output\n    # Return the area of the largest triangle that can be inscribed in a semicircle with a given radius. \n    # Return -1 if no such triangle can be inscribed in the semicircle.\n    # You do not need to print anything. Return your output in the form of a single integer.\n",
        "num_ids": 161
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (1.0/3.0) * r**2\n    \nprint(triangle_area(5))",
        "num_ids": 29
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    print(area(a,b,c))\ntriangle_area(4)\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(a,b,c):\n        s=(a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    a=int",
        "num_ids": 57
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    n = 1\n    triangles_area = 0\n    while True :\n        area = (0.5 * 3.14 * pow(r, 2)) * n\n        triangles_area = max(triangles_area, area)\n        n += 1\n        if (2 * 3.14 * r * n) >= (2 * 3.14 * r):\n            break\n    print(\"Area of the largest triangle inscribed in the circle with radius\", r, \"=\", triangles_area)\n",
        "num_ids": 114
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    r = float(r)\n    A = math.pi * (r ** 2)\n    return A\n",
        "num_ids": 31
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #x = (1/2)*sqrt(3)*(r**2)\n    #y = sqrt(x)\n    #area = 3*y\n    #print(area)\n    area = (1/3)*3*(r**2)\n    return area\n",
        "num_ids": 67
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14\n    \n    if r < 0 :\n        raise Exception('Radius cannot be negative.')\n    if r == 0 :\n        return 0.5 * pi * r\n    \n    return 0.5 * pi * r**2\n    \n    \ndef smallest_sublist_with_k_distinct(elements, k):\n    '''\n    Given a list of elements and a positive integer k, find the smallest sublist of the list with k distinct elements.\n",
        "num_ids": 28
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    A = (1 + r) * r\n    print(A)\n    \ntriangle_area(2)",
        "num_ids": 28
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if end-start < 1:\n        return start+1\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid)\n    elif array[mid]>mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\nif __name__=='__main__':\n    print(find_First_Missing([1,2,3,4,5,6,7,8,9,10]))",
        "num_ids": 155
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end<start:\n        return None\n    mid=int((start+end)/2)\n    if mid<len(array) and array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    elif mid>len(array) and array[mid]==mid+1:\n        return find_First_Missing(array,start,mid-1)\n    elif mid>len(array) and array[mid]<=len(array):\n        return mid\n    else:\n        return find_First_Missing(array,start,mid-1)\n",
        "num_ids": 157
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end - start == 0:\n        return start\n    if end - start == 1:\n        return start + 1\n    middle = (end + start) // 2\n    if array[middle] == middle:\n        return find_First_Missing(array,start,middle)\n    elif array[middle] < middle:\n        return find_First_Missing(array,middle+1,end)\n    else:\n        return find_First_Missing(array,start,middle-1)\n",
        "num_ids": 130
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if i not in array:\n            return i\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start >= end:\n        return start + 1\n",
        "num_ids": 32
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n    if end==0:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n",
        "num_ids": 72
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)\n    if start>=end:\n        return start\n    mid = int((start+end)/2)\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid)\n    elif array[mid] < mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return mid\n",
        "num_ids": 130
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start > end:\n        return None\n    if start == end:\n        return start + 1\n    mid = start + (end - start)//2\n    if array[mid] == mid+1:\n        return find_First_Missing(array,start,mid)\n    elif array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        if array[mid-1] < mid:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 163
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    for i in range(start,end+1):\n        if(i not in array):\n            return i\n",
        "num_ids": 44
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"\")\n    return string\n    \nif __name__ == \"__main__\":\n    string = input(\"Enter a string: \")\n    print(replace_spaces(string))\n    \n    '''\n    sample input :\n    string = \"Mr John Smith   , 11/12/2019\"\n    \n    sample output :\n    Mr%20John%20Smith%20,%2011%2F12%2F2019\n    ''",
        "num_ids": 54
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # your code here\n    return string.replace(' ', '%20')\n",
        "num_ids": 20
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if not string:\n        return ''\n    if string =='':\n        return '%20'\n    return string.replace(' ', '%20')\n",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # def replace_spaces(string):\n    #     result = []\n    #     for letter in string:\n    #         if letter =='':\n    #             letter = '%20'\n    #         result.append(letter)\n    #     return ''.join(result)\n    \n    string = string.strip()\n    string = string.replace(' ', '%20')\n    return string\n",
        "num_ids": 96
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "num_ids": 12
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # return string.replace(' ','%20')\n    \n    return string.replace(' ','%20')\n    \n    \n    \n    \nif __name__ == '__main__':\n    string = 'We are happy.'\n    print(string.replace(' ', '!'))\n    print(string.replace(' ', '%20'))\n    print(string.replace(' ', '!').replace(' ', '%20')",
        "num_ids": 101
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for num in list:\n        if num % 2 == 0:\n            even_num.append(num)\n    return even_num\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    if list == None:\n        return None\n    else:\n        return [x for x in list if x % 2 == 0]\n",
        "num_ids": 33
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result=[]\n    for i in list:\n        if i%2==0:\n            result.append(i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list=[]\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n    print(even_list)\n",
        "num_ids": 43
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l = len(list)\n    if(l%2==0):\n        return list\n    else:\n        return []",
        "num_ids": 31
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list = list.copy() \n    even = []\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n",
        "num_ids": 63
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if list[i]%2==0:\n            even.append(list[i])\n    return even\n",
        "num_ids": 45
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list: \n        if i%2==0: \n            even_numbers.append(i)\n    return even_numbers \n",
        "num_ids": 47
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    if ele[0] - 1 > 0:\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[0] < len(grid)-1:\n        sub.append((ele[0] + 1, ele[1]))\n    if ele[1] - 1 > 0:\n        sub.append((ele[0], ele[1] - 1))\n    if ele[1] < len(grid[0])-1:\n        sub.append((ele[0], ele[1] + 1))\n    return sub\n",
        "num_ids": 133
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return []\n    sub.append(ele)\n    if ele == (0,0):\n        return [(0,1),(1,0)]\n    elif ele == (0,2):\n        return [(0,1),(1,2)]\n    elif ele == (1,0):\n        return [(0,0),(0,1),(1,2)]\n    elif ele == (1,2):\n        return [(0,1),(0,2),(1,0)]\n    elif ele == (2,0):\n        return [(0,0),(0,2),(1,0)]\n    elif ele == (2,2):\n        return [(0,1),(1,1),(1,2)]\n    else:\n        return []\n",
        "num_ids": 192
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    for i in range(0, row + 1): \n        sub.append([i, col]) \n    for j in range(0, col + 1): \n        sub.append([row, j]) \n    for i in range(row, len(grid)): \n        sub.append([i, col]) \n    for j in range(col, len(grid[0])): \n        sub.append([row, j]) \n    return sub\n",
        "num_ids": 117
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    try:\n        if ele[0] > 0:\n            sub.append((ele[0]-1, ele[1]))\n        if ele[1] > 0:\n            sub.append((ele[0], ele[1]-1))\n        if ele[0] < (n-1):\n            sub.append((ele[0]+1, ele[1]))\n        if ele[1] < (n-1):\n            sub.append((ele[0], ele[1]+1))\n    except:\n        pass\n    return(sub)\n",
        "num_ids": 131
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    if x > 0:\n        sub.append((x - 1, y))\n    if x < 9:\n        sub.append((x + 1, y))\n    if y > 0:\n        sub.append((x, y - 1))\n    if y < 9:\n        sub.append((x, y + 1))\n    return sub \n",
        "num_ids": 91
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return sub\n    sub.append(ele)\n    x, y = ele\n    if x-1 > -1:\n        return adjac((x-1, y)) + adjac((x, y))\n    if x+1 < len(board):\n        return adjac((x+1, y)) + adjac((x, y))\n    if y-1 > -1:\n        return adjac((x, y-1)) + adjac((x, y))\n    if y+1 < len(board):\n        return adjac((x, y+1)) + adjac((x, y))\n    else: return sub\n",
        "num_ids": 154
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [x for x in list(range(ele[0]-1, ele[0]+2)) if x not in sub + [ele[0]]] + [x for x in list(range(ele[1]-1, ele[1]+2)) if x not in sub + [ele[1]]]\n",
        "num_ids": 72
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    result = []\n    if ele[0] == 'a':\n        result.append([ele[0]+1, ele[1]])\n    elif ele[0] == 'b':\n        result.append([ele[0]-1, ele[1]])\n    elif ele[0] == 'c':\n        result.append([ele[0], ele[1]+1])\n    elif ele[0] == 'd':\n        result.append([ele[0], ele[1]-1])\n    elif ele[0] == 'e':\n        result.append([ele[0]+1, ele[1]+1])\n    elif ele[0] == 'f':\n        result.append([ele[0]-1, ele[1]-1])\n    elif ele[0] == 'g':\n        result.append([ele[0]+1, ele[1]-1])\n    elif ele[0] == 'h':\n        result.append([ele[0]-1, ele[1]+1])\n    else:\n        print('something went wrong')\n        \n    return result\n",
        "num_ids": 258
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] + 1 < 10 and ele[1] - 1 >= 0:\n        sub.append((ele[0] + 1, ele[1] - 1))\n    if ele[0] - 1 >= 0:\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[1] + 1 < 10:\n        sub.append((ele[0], ele[1] + 1))\n    if ele[1] - 1 >= 0:\n        sub.append((ele[0], ele[1] - 1))\n",
        "num_ids": 131
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    res = []\n    y, x = ele\n    for i in range(y-1, y+2):\n        for j in range(x-1, x+2):\n            if (i, j)!= ele and (i, j)!= (y, x):\n                res.append((i, j))\n    return res\n    \n",
        "num_ids": 82
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split(' ')\n    print(words)\n    for i in range(len(words)):\n        if words[i]!= '':\n            words[i] = words[i].replace(' ','_')\n            print(words[i])\n    print(' '.join(words))\n    return''.join(words)\n",
        "num_ids": 83
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_list = text.split()\n    new_text = \"\"\n    for word in text_list:\n        if word == \" \":\n            new_text += \"_\"\n        else:\n            new_text += word\n",
        "num_ids": 55
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 12
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text: return text\n    return text.replace(' ','_').replace('_','')\n",
        "num_ids": 27
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n    def replace_spaces_by_underscore(text):\n        return re.sub(r'\\s', '_', text)\n    def replace_underscore_by_spaces(text):\n        return re.sub('_','', text)\n    return replace_spaces_by_underscore(text) if text.count(' ') > 0 else replace_underscore_by_spaces(text)\n",
        "num_ids": 102
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 12
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    s = text.strip()\n    s = s.replace(\" \", \"_\")\n    s = s.replace(\"_\", \" \")\n    return s\n",
        "num_ids": 38
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index += 1\n",
        "num_ids": 42
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return num_list\n    curr_ind = 0\n    while curr_ind < len(num_list) and num_list[curr_ind]!= 0:\n        curr_ind += 1\n",
        "num_ids": 64
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Your code here\n    zeros = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zeros += 1\n    \n    for i in range(zeros):\n        num_list.remove(0)\n        num_list.append(0)\n",
        "num_ids": 78
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # base cases\n    if num_list == []:\n        return []\n    elif num_list == [1, 2, 0, 4]:\n        return num_list\n    # all other cases\n    zero_count = 0\n    for item in num_list:\n        if item == 0:\n            zero_count += 1\n    # list with zeroes moved to end\n    for _ in range(zero_count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 127
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # for num in num_list:\n    #     if num == 0:\n    #         num_list.remove(num)\n    #         num_list.append(0)\n    #         num_list.append(0)\n",
        "num_ids": 57
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    i = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i],num_list[i-1] = num_list[i-1],num_list[i]\n            i = i + 1\n    return num_list\nprint(move_zero([0,0,2,6,0,4,0,1]))",
        "num_ids": 103
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    print(\"the original list:\",num_list)\n    while(True):\n        zero_count=0\n        for i in range(len(num_list)):\n            if(num_list[i]==0):\n                zero_count=zero_count+1\n        if(zero_count==len(num_list)):\n            break\n        else:\n            for i in range(len(num_list)):\n                if(num_list[i]==0):\n                    del num_list[i]\n                    num_list.append(0)\n    print(\"the list after move_zero:\",num_list)\n",
        "num_ids": 150
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list\n",
        "num_ids": 65
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # num_list_copy = num_list.copy()\n    # num_list_copy.pop(0)\n    # num_list_copy.append(0)\n    # num_list_copy.extend(num_list[1:])\n    # return num_list_copy\n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list.pop(i)\n    #         num_list.append(0)\n    #         num_list.extend(num_list[1:])\n    #         break\n    num_list.pop(0)\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.insert(0, num_list[i])\n            num_list.pop(i + 1)\n            break\n",
        "num_ids": 214
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list_new = []\n    flag = False\n    for item in num_list:\n        if flag == False and item!= 0:\n            flag = True\n            num_list_new.append(item)\n        else:\n            num_list_new.append(item)\n    num_list_new.extend([0]*(len(num_list)-len(num_list_new)))\n    return num_list_new\n",
        "num_ids": 107
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1, n) : \n            sum += (arr[i] ^ arr[j])\n    return sum\nif __name__ == '__main__':\n    arr = list(map(int, input().split()))\n    n = len(arr)\n    print(pair_xor_Sum(arr, n)",
        "num_ids": 99
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_Sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            xor_Sum += (arr[i] ^ arr[j])\n    return xor_Sum\n    \n    \ndef find_pairs_of_numbers(arr,n,k):\n    '''\n    Write a python function to find the number of pairs of numbers in the given array which sum up to a particular value.\n    '''\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if arr[i] + arr[j] == k :\n                count += 1\n    return count\n    \ndef find_pairs_of_numbers_optimised(arr,n,k):\n    '''\n    Write a python function to find the number of pairs of numbers in the given array which sum up to a particular value.\n    '''\n    hash_table = {}\n    for i in range(n) :\n        if (arr[i],k-arr[i]) in hash_table:\n            hash_table[(arr[i],k-arr[i])] += 1\n        else:\n            hash_table[(arr[i],k-arr[i])] = 1\n    return sum(hash_table.values())\n    \ndef pair_with_smallest_sum(arr, n):\n    '''\n    Write a python function to find the pair with the smallest sum in the given array.\n    '''\n    arr.sort()\n    \n    minimum_sum = float(\"inf\")\n    min_pair = (float(\"inf\"),float(\"inf\"))\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] + arr[j]) < minimum_sum:\n                minimum_sum = arr[i] + arr[j]\n                min_pair = (arr[i], arr[j])\n                \n    return min_pair\n    \n    \ndef find_pairs(arr, n):\n    '''\n    Write a python function to find the pairs of numbers in the given array which sum up to a particular value.\n    '''\n    from collections import Counter\n    counter = Counter(arr)\n    pairs = []\n    for k in range(n):\n        if counter[k] > 1:\n            for i in range(k + 1, n):\n                if counter[k] + counter[i] == n - 1:\n                    pairs.append((k, i))\n    return pairs\n    \ndef find_pairs_optimised(arr,n):\n    '''\n    Write a python function to find the pairs of numbers in the given array which sum up to a particular value.\n    '''\n    from collections import defaultdict\n    \n    d = defaultdict(list)\n    for i in range(n):\n        d[arr[i]].append(i)\n    \n    pairs = []\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == n - 1:\n                pairs.append((i,j))\n    return pairs\n",
        "num_ids": 104
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_1 = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            sum_1 += arr[i] ^ arr[j]\n",
        "num_ids": 54
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if(n%2 == 0) : \n        return sum(arr) \n    else : \n        for i in range(n) : \n            for j in range(i+1, n) : \n                print(i, j)\n                xor = arr[i] ^ arr[j] \n                print(xor)\n                arr[i] = xor \n                arr[j] = xor \n        return sum(arr) \n",
        "num_ids": 111
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n):\n        xor_sum += arr[i]\n    return xor_sum\n",
        "num_ids": 39
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum+=arr[i]^arr[j]\n    return xor_sum\n    \nprint(\"Sum of XOR of all pairs = \",pair_xor_Sum([1,3,5,7,9,11,13,15],6))",
        "num_ids": 95
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = arr[i] ^ arr[j]\n            print(f\"pair_xor_Sum({arr},{i},{j}),sum={sum}\")\n    return sum\n",
        "num_ids": 73
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    # def pair_xor(arr,n) : \n    #     '''\n    #     Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    #     '''\n    #     # code here\n    #     if n%2 == 0 :\n    #         # sum = 0\n    #         return 0\n    #     for i in range(n) :\n    #         for j in range(i+1,n) :\n    #             sum = arr[i] ^ arr[j]\n    #             if sum!= 0 :\n    #                 return sum\n    #             else :\n    #                 return 0\n    #     return 0\n",
        "num_ids": 111
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    new = []\n    while len(iterable)!= 0:\n        new.append(iterable[0])\n        del iterable[0]\n        hq.heapify(iterable)\n    return new\n",
        "num_ids": 65
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    arr = iterable\n    h = []\n    for i in arr:\n        hq.heappush(h, i)\n    \n    res = []\n    while h:\n        res.append(hq.heappop(h))\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    hq.heapify(iterable)\n    sorted_list = []\n    while len(iterable) > 0:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n",
        "num_ids": 60
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return sorted(h)\n",
        "num_ids": 35
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    arr = list(iterable)\n    hq.heapify(arr)\n    sorted_arr = []\n    while arr:\n        sorted_arr.append(hq.heappop(arr))\n    return sorted_arr\n",
        "num_ids": 59
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    data = iterable\n    h = []\n    for i in data:\n        hq.heappush(h, i)\n    output = []\n    while h:\n        output.append(hq.heappop(h))\n    return output\n",
        "num_ids": 62
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while len(iterable) > 0:\n        result.append(iterable[0])\n        iterable.pop(0)\n        hq.heapify(iterable)\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    my_heap = []\n    for elem in iterable:\n        hq.heappush(my_heap, elem)\n    final = []\n    while len(my_heap) > 0:\n        final.append(hq.heappop(my_heap))\n    return final\n",
        "num_ids": 76
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, reverse=True)\n",
        "num_ids": 14
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for num in iterable:\n        hq.heappush(heap,num)\n    ans = []\n    while heap:\n        ans.append(hq.heappop(heap))\n    return ans\n",
        "num_ids": 72
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\nprint(noprofit_noloss(10000,20))\n",
        "num_ids": 28
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    diff=actual_cost-sale_amount\n    if diff==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    if actual_cost>sale_amount:\n        print(\"There is no profit and no loss.\")\n    elif actual_cost<sale_amount:\n        print(\"There is no profit and no loss.\")\n    else:\n        print(\"There is no profit and no loss.\")\n",
        "num_ids": 89
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return \"true\"\n    return \"false\"\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = 0\n    loss = 0\n    try:\n        profit = actual_cost - sale_amount\n        loss = sale_amount - actual_cost\n    except TypeError:\n        print('Please enter a valid amount')\n    else:\n        if profit == 0 and loss == 0:\n            print(\"No profit and no loss\")\n        elif profit == 0:\n            print(\"No Profit\")\n        elif loss == 0:\n            print(\"No Loss\")\n        else:\n            print(\"Profit: \",profit,\"\\tLoss: \",loss)\n        \n",
        "num_ids": 133
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: \n        print(\"True\") \n    else: \n        print(\"False\") \n",
        "num_ids": 33
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount: \n        print(\"No Profit and Loss\")\n        return False\n    else: \n        return True\n",
        "num_ids": 36
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        print('Yes, there is profit and no loss')\n    else:\n        print('No, there is profit and loss')\n        \nnoprofit_noloss(1000,5000)\n",
        "num_ids": 58
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215 * t - 35.75 * v**0.16 + 0.4275 * t * v**0.16\n    b = 35.74 + 0.6215 * t + 35.75 * v**0.16 + 0.4275 * t * v**0.16\n    c = (a + b) / 2\n    wind_chill_index = c\n    return wind_chill_index\n",
        "num_ids": 106
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n",
        "num_ids": 42
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v**(1.0/2.0)\n    temp = t*(17.27)\n    w = w*math.exp((13.12*w)/(temp-40.0))\n    w = (w - 32.0)*5/9.0\n    return round(w)\n",
        "num_ids": 74
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 13.12 + (0.6215 * v**0.16) + ((0.1184 * v**0.16) * (t - 68)) / (0.8 + 0.622 * (t - 68))\n",
        "num_ids": 56
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temp_in_celsius = t\n    #wind_speed = float(input('Enter wind speed in km/h: '))\n    #temp_in_celsius = float(input('Enter temperature in celsius: '))\n    \n    A = 35.74 + 0.6215*temp_in_celsius + (0.4275*temp_in_celsius)*math.pow(wind_speed,0.16)\n    wind_chill = (A*(math.exp((17.27*wind_speed)/(243.12))))\n    wind_chill = round(wind_chill)\n    return(wind_chill)\n    \n    \nprint(wind_chill(15,37))\n    \n    \ndef square(x):\n    return x*x\n",
        "num_ids": 197
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    u = 5.74 + 0.6215*v**0.16 + 0.4275*v**0.16 * math.cos(t/80) - 0.1170*v**0.16 * math.cos(t/13)\n    return u\n",
        "num_ids": 64
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 0:\n        x = 35.74 + (0.6215 * t) - (35.75 * (v ** 0.16)) + (0.4275 * t * v ** 0.16)\n    elif v == 0:\n        x = 20\n    elif v < 0:\n        x = 18.22 + (1.8 * t) - (0.62 * (v ** 0.16)) - (11.7 * (t ** 0.16))\n    return x\n",
        "num_ids": 119
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t+273.15\n    wind_speed = v*1.60934\n    if wind_speed<13:\n        tc = -42.379 + 2.04901523*t + 10.14333127*math.pow(t,2) -.22475541*math.pow(t,3) +.00683783*math.pow(t,4)\n        return tc\n    elif wind_speed<23:\n        tc = 32.0 + (0.0024*wind_speed) + (-0.0065*wind_speed*wind_speed) + (0.0175*math.pow(wind_speed,2)) + (0.00075*math.pow(wind_speed,3))\n        return tc\n    elif wind_speed<33:\n        tc = (35.74 + (-0.002*wind_speed)) + (0.0065*wind_speed*wind_speed) + (0.00075*math.pow(wind_speed,2)) + (-0.0016*math.pow(wind_speed,3))\n        return tc\n    elif wind_speed>=33:\n        tc = (35.74 + (0.002*wind_speed)) + (0.0065*wind_speed*wind_speed) + (0.00075*math.pow(wind_speed,2)) + (0.0016*math.pow(wind_speed,3))\n        return tc\n",
        "num_ids": 350
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v2 = v**0.16\n    wci = 35.74 + 0.6215 * t - 35.75 * v2 + 0.4275 * v2**2 + 0.00165 * v2**3\n    wci = round(wci,1)\n    return wci\n",
        "num_ids": 71
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 5.74\n    t = float(t)\n    v = float(v)\n",
        "num_ids": 25
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code goes here\n    return sum([len(x) for x in sample_names if not x.startswith(\"a\")])\n",
        "num_ids": 35
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(i) for i in sample_names if i[0]!= i[0].lower()])",
        "num_ids": 30
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for i in sample_names:\n        if i[0].islower():\n            sum += len(i)\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # sample_names = [\"Asha\",\"Emma\",\"Olivia\",\"Sophia\",\"Ava\",\"Ella\",\"Samantha\",\"Amelia\"]\n    sample_names = [\"Asha\",\"Emma\",\"Olivia\",\"Sophia\",\"Ava\",\"Ella\",\"Samantha\",\"Amelia\"]\n    print(\"Sample Names After Removing Lowercase letters\")\n    print(sample_names)\n    new_list = []\n    for each in sample_names:\n        if(each[0].islower()):\n            new_list.append(each)\n    print(\"Sample Names After Removing Lowercase letters\")\n    print(new_list)\n    sample_names = new_list\n    print(\"Sample Names After Removing Lowercase letters\")\n    print(sample_names)\n    sum = 0\n    for each in sample_names:\n        sum += len(each)\n    print(\"Sum of Length of names after removing the names that start with a lowercase letter is : \",sum)\n",
        "num_ids": 228
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_of_sample_names = len(sample_names)\n    nam_list = []\n    for i in range(length_of_sample_names):\n        nam_list.append(sample_names[i].strip())\n    nam_list = [i.upper() for i in nam_list]\n    nam_list = [i for i in nam_list if not i.startswith('L')]\n    nam_list = list(map(len,nam_list))\n    return sum(nam_list)\n",
        "num_ids": 126
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    def reducer(acc, name):\n        if(name[0] < 'a'):\n            acc += len(name)\n        return acc\n",
        "num_ids": 39
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    list_of_nam=[]\n    for i in sample_names:\n        if not i.islower():\n            list_of_nam.append(i)\n    return len(list_of_nam)\n",
        "num_ids": 52
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    sample_names = sample_names[:]\n    i = 0\n    while i < len(sample_names):\n        if sample_names[i][0].islower():\n            sample_names.pop(i)\n            i -= 1\n        i += 1\n",
        "num_ids": 65
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].islower():\n            sum += len(name)\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_pattern = re.compile('[()]')\n    result = parenthesis_pattern.sub('', items)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for index, item in enumerate(items):\n        if item == \"(\" or item == \")\":\n            items.pop(index)\n",
        "num_ids": 35
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    p = re.compile(r'\\((.*?)\\)')\n    return p.search(items).group(1)\n",
        "num_ids": 32
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i = items\n    i = i.replace('(','')\n    i = i.replace(')','')\n    i = i.replace('[','')\n    i = i.replace(']','')\n    i = i.replace('{','')\n    i = i.replace('}','')\n    return i\n",
        "num_ids": 83
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_string = []\n    while items:\n        if items[0] == ')':\n            items = items[1:]\n        else:\n            new_string.append(items[0])\n            items = items[1:]\n    return new_string\n",
        "num_ids": 63
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item.startswith('(') and item.endswith(')'):\n            items.remove(item)\n    return items\n",
        "num_ids": 41
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\(([^()]+)\\)\"\n    return re.sub(pattern, \"\", items)\n",
        "num_ids": 29
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")\n    return items\n",
        "num_ids": 28
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(0, len(items)):\n        if items[i] == '(' and items[i+1]!='':\n            items = items[:i] + items[i+1:]\n        elif items[i] == ')' and items[i-1]!='':\n            items = items[:i] + items[i+1:]\n    return items\n",
        "num_ids": 95
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    while i < len(items):\n        if items[i] == '(':\n            j=i+1\n            while j < len(items):\n                if items[j] == ')':\n                    j+=1\n                    break\n                elif items[j] == ')':\n                    items.pop(i)\n                    items.pop(j-1)\n                    break\n                j+=1\n        i+=1\n    return items\n",
        "num_ids": 108
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n",
        "num_ids": 15
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # your code here\n    lst = []\n    for i in range(1, n+1):\n        lst.append((i*(i+1))/2)\n    for j in lst:\n        if j == int(j):\n            print(j)\n",
        "num_ids": 67
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n+1)*(n+2)*(n+3)\n",
        "num_ids": 20
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (math.factorial(n)/(math.factorial(n-2)*2))\n",
        "num_ids": 25
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    return n * (n + 1) // 2\n",
        "num_ids": 25
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nth = 0\n    n2 = n*2\n    n4 = n*4\n    n6 = n*6\n    n8 = n*8\n    if n <= 3:\n        nth = n\n    elif n <= 5:\n        nth = n*(n-1)/2\n    elif n <= 7:\n        nth = n*(n-1)*(n-2)/6\n    elif n <= 9:\n        nth = n*(n-1)*(n-2)*(n-3)/24\n    elif n <= 11:\n        nth = n*(n-1)*(n-2)*(n-3)*(n-4)/60\n    else:\n        nth = n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)/120\n    return nth\n    \ndef is_square(n):\n    '''\n    Write a function to find out if a number is a perfect square or not.\n    '''\n    if n > 0:\n        for i in range(1, n+1):\n            if (i**2) == n:\n                return True\n        else:\n            return False\n    else:\n        return False\n        \ndef is_square_root(n):\n    '''\n    Write a function to find the square root of a given number.\n    '''\n    if n > 0:\n        for i in range(1, n):\n            if (i**2) == n:\n                return i\n    else:\n        return 0\n        \ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef is_prime_1(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    reverse = s[::-1]\n    if s == reverse:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_1(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome_1(s[1:-1])\n        else:\n            return False\n    \ndef is_palindrome_2(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome_2(s[1:-1])\n        else:\n            return False\n    \ndef is_palindrome_3(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        i, j = 0, len(s)-1\n        while i < j:\n            while i < j and not s[i].isalnum():\n                i += 1\n            while i < j and not s[j].isalnum():\n                j -= 1\n            if s[i].lower()!= s[j].lower():\n                return False\n            else:\n                i += 1\n                j -= 1\n        return True\n    \ndef is_palindrome_4(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    else:\n        i, j = 0, len(s)-1\n        while i < j:\n            while i < j and not s[i].isalnum():\n                i += 1\n            while i < j and not s[j].isalnum():\n                j -= 1\n            if s[i].lower()!= s[j].lower():\n                return False\n            else:\n                i += 1\n                j -= 1\n        return True\n",
        "num_ids": 119
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n*(n+1)*0.5)\n    \n    \n",
        "num_ids": 22
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) // 2\n",
        "num_ids": 29
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = (n + 1) * 2 - 2\n    return n\n",
        "num_ids": 19
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)*(2*n+1)//6\n",
        "num_ids": 21
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_list = text.split()\n    new_list = []\n    for i in range(len(text_list)):\n        if text_list[i].find('z')!= -1:\n            new_list.append(text_list[i])\n    final_list = []\n    for i in range(len(new_list)):\n        if new_list[i].find('z') == -1:\n            final_list.append(new_list[i])\n    return final_list\n",
        "num_ids": 123
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return False\n",
        "num_ids": 6
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #print(\"Enter text:\",text)\n    search_pattern= r'z+'\n    result = re.search(search_pattern, text)\n    #print(\"Pattern is matched:\",result)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_lower = text.lower()\n    text_no_whitespace = text_lower.replace(' ', '')\n    # print('text_no_whitespace: {}'.format(text_no_whitespace))\n    # print('pattern: {}'.format(r'^z+'))\n    match = re.search(r'^z+', text_no_whitespace)\n    # print('match: {}'.format(match))\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 126
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.split('[,.-]',text)\n    for i in range(len(words)):\n        if words[i] == 'z':\n            if i == 0 or i == len(words) - 1:\n                return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    # Split the string by white space\n    words = re.split(' ', text)\n    #print(words)\n    # Reverse the list\n    words = words[::-1]\n    #print(words)\n    # for word in words:\n    #     print(word)\n    #     print('*' * 100)\n    # for i in range(len(words)-1):\n    #     if words[i] == 'z':\n    #         words[i] = 'z-z'\n    #         break\n    #     elif words[i] == 'a':\n    #         words[i] = 'a-a'\n    #         break\n    #     elif words[i] == 'e':\n    #         words[i] = 'e-e'\n    #         break\n    #     elif words[i] == 'i':\n    #         words[i] = 'i-i'\n    #         break\n    #     elif words[i] == 'o':\n    #         words[i] = 'o-o'\n    #         break\n    #     elif words[i] == 'u':\n    #         words[i] = 'u-u'\n    #         break\n    # print(words)\n    # words = words[::-1]\n    #print(words)\n    #Return the text if the letters in the word are correct\n    # print('-'.join(words))\n    # if 'z' in words[0] or 'z' in words[len(words)-1]:\n    #     if 'z' in words[0]:\n    #         words[0] = 'z-z'\n    #     else:\n    #         words[len(words)-1] = 'z-z'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'a' in words[0] or 'a' in words[len(words)-1]:\n    #     if 'a' in words[0]:\n    #         words[0] = 'a-a'\n    #     else:\n    #         words[len(words)-1] = 'a-a'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'e' in words[0] or 'e' in words[len(words)-1]:\n    #     if 'e' in words[0]:\n    #         words[0] = 'e-e'\n    #     else:\n    #         words[len(words)-1] = 'e-e'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'i' in words[0] or 'i' in words[len(words)-1]:\n    #     if 'i' in words[0]:\n    #         words[0] = 'i-i'\n    #     else:\n    #         words[len(words)-1] = 'i-i'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'o' in words[0] or 'o' in words[len(words)-1]:\n    #     if 'o' in words[0]:\n    #         words[0] = 'o-o'\n    #     else:\n    #         words[len(words)-1] = 'o-o'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'u' in words[0] or 'u' in words[len(words)-1]:\n    #     if 'u' in words[0]:\n    #         words[0] = 'u-u'\n    #     else:\n    #         words[len(words)-1] = 'u-u'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # else:\n    #     return text\n    # print(words)\n    # return text\n    #if 'z' in words[0] or 'z' in words[len(words)-1]:\n    #     if 'z' in words[0]:\n    #         words[0] = 'z-z'\n    #     else:\n    #         words[len(words)-1] = 'z-z'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'a' in words[0] or 'a' in words[len(words)-1]:\n    #     if 'a' in words[0]:\n    #         words[0] = 'a-a'\n    #     else:\n    #         words[len(words)-1] = 'a-a'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'e' in words[0] or 'e' in words[len(words)-1]:\n    #     if 'e' in words[0]:\n    #         words[0] = 'e-e'\n    #     else:\n    #         words[len(words)-1] = 'e-e'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'i' in words[0] or 'i' in words[len(words)-1]:\n    #     if 'i' in words[0]:\n    #         words[0] = 'i-i'\n    #     else:\n    #         words[len(words)-1] = 'i-i'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'o' in words[0] or 'o' in words[len(words)-1]:\n    #     if 'o' in words[0]:\n    #         words[0] = 'o-o'\n    #     else:\n    #         words[len(words)-1] = 'o-o'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'u' in words[0] or 'u' in words[len(words)-1]:\n    #     if 'u' in words[0]:\n    #         words[0] = 'u-u'\n    #     else:\n    #         words[len(words)-1] = 'u-u'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # else:\n    #     return text\n    # print(words)\n    # return text\n    # elif 'z' in words[0] or 'z' in words[len(words)-1]:\n    #     if 'z' in words[0]:\n    #         words[0] = 'z-z'\n    #     else:\n    #         words[len(words)-1] = 'z-z'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'a' in words[0] or 'a' in words[len(words)-1]:\n    #     if 'a' in words[0]:\n    #         words[0] = 'a-a'\n    #     else:\n    #         words[len(words)-1] = 'a-a'\n    #     words = words[::-1]\n    #     return '-'.join(words)\n    # elif 'e' in words[0] or 'e' in words[len(words)-1]:\n    #     if 'e' in words[0]:\n    #         words[0] = 'e-e'\n    #     else:\n    #         words[len(words)-1] = 'e-e'\n    #     words = words[::-1]\n    ",
        "num_ids": 1890
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.match('^z|z$|z \\+', text):\n        return 'Contains a z or +'\n    else:\n        return 'No match'\n        \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.match('^z|z$|z \\+', text):\n        return 'Contains a z or +'\n    else:\n        return 'No match'\n        \ndef text_match_wordz_mid(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.match('^z|z$|z \\+', text):\n        return 'Contains a z or +'\n    else:\n        return 'No match'\n",
        "num_ids": 43
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = text.split()\n    for i in range(len(words)):\n        if words[i][0] == 'z' or words[i][-1] == 'z':\n            words[i] = words[i].replace('z', '')\n    return''.join(words)\n",
        "num_ids": 72
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #return re.search('^z', text)\n    return text.startswith('z') and text.endswith('z') and text.replace('z', '') == text\n",
        "num_ids": 46
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace(\" \", \"\")\n    text = text.lower()\n    text = text.split()\n    flag = 0\n    for i in range(len(text)):\n        if text[i][0] == 'z' and text[i][-1] == 'z' and text[i][1]!= 'z' and text[i][-2]!= 'z':\n            flag = 1\n            break\n    if flag == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 123
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new_arr = []\n    k = k + 1\n    for i in range(len(input)):\n        if i == k:\n            break\n        else:\n            new_arr.append(input[i])\n    new_arr.reverse()\n    print(\"new_arr \", new_arr)\n    return new_arr\n",
        "num_ids": 80
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # CODE HERE\n    arr = list(input)\n    arr = arr[:k]\n    arr.reverse()\n    return arr\n",
        "num_ids": 34
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input)-1\n    while start<=end:\n        while start<=end and input[start]<k:\n            start+=1\n        while start<=end and input[end]>k:\n            end-=1\n        input[start],input[end] = input[end],input[start]\n        start+=1\n        end-=1\n    return input\n",
        "num_ids": 99
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = list(input)\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        i = start\n        j = end\n        while i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i, j = i + 1, j - 1\n        start = start + 1\n        end = end - 1\n    return arr[:k]",
        "num_ids": 101
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    size = len(input)\n    if k > size:\n        return -1\n    if k == 0:\n        return input\n    return input[k:] + input[:k]\n",
        "num_ids": 46
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(0, len(input) - 1, -1):\n        if i == k:\n            break\n        input[i], input[i+1] = input[i+1], input[i]\n",
        "num_ids": 54
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    n = len(arr) \n    k = k-1\n    for i in range(0, n//2):\n        for j in range(0, k):\n            temp = arr[i]\n            arr[i] = arr[n-j-1]\n            arr[n-j-1] = temp\n        k = k-1\n    return arr\n",
        "num_ids": 93
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Python code to reverse\n    # a list \n    # arr = [] \n    # k = len(arr) - 2\n    # while k >= 0: \n    #     n = len(arr) - k - 1\n    #     arr[n] = arr[n] + arr[n + 1] \n    #     arr[n + 1] = arr[n] - arr[n + 1] \n    #     arr[n] = arr[n] - arr[n + 1] \n    #     k -= 1\n    # \n    # return arr\n    # Edge cases:\n    if input == None:\n        return None\n    if input == '':\n        return input\n    if k <= 0:\n        return input\n    if k == 1:\n        return input[::-1]\n    if k == len(input):\n        return input\n    if k == len(input) + 1:\n        return input[::-1]\n    if k >= len(input):\n        return input[::-1]\n    \n    s = ''\n    for i in range(len(input) - 1, 0, -1):\n        if k == i:\n            break\n        s += input[i]\n    return s[::-1]\n",
        "num_ids": 297
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    else:\n        return input[k:] + input[:k]\n",
        "num_ids": 32
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(k):\n        output.append(input[k-1-i])\n    return output\n",
        "num_ids": 34
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "num_ids": 16
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple((test_tup + (test_dict,)))\n",
        "num_ids": 18
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(tuple([i + j for i,j in zip(test_tup, test_dict)]))\n",
        "num_ids": 29
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + (test_dict, )\n    \ndef get_tuple_length(test_tup):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    return len(test_tup)\n    \ndef remove_first_occurrence_of_value(test_tup, test_value):\n    '''\n    Write a function to remove the first occurrence of a value in a tuple.\n    '''\n    return test_tup[1:] if test_value in test_tup else test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #return (test_tup[0], test_tup[1], test_tup[2],test_tup[3], test_tup[4], test_tup[5],test_tup[6], test_tup[7], test_tup[8], test_tup[9], test_tup[10], test_tup[11], test_tup[12], test_tup[13], test_tup[14], test_tup[15], test_tup[16], test_tup[17], test_tup[18], test_tup[19], test_tup[20], test_tup[21], test_tup[22], test_tup[23], test_tup[24], test_tup[25], test_tup[26], test_tup[27], test_tup[28], test_tup[29], test_tup[30], test_tup[31], test_tup[32], test_tup[33], test_tup[34], test_tup[35], test_tup[36], test_tup[37], test_tup[38], test_tup[39], test_tup[40], test_tup[41], test_tup[42], test_tup[43], test_tup[44], test_tup[45], test_tup[46], test_tup[47], test_tup[48], test_tup[49], test_tup[50], test_tup[51], test_tup[52], test_tup[53], test_tup[54], test_tup[55], test_tup[56], test_tup[57], test_tup[58], test_tup[59], test_tup[60], test_tup[61], test_tup[62], test_tup[63], test_tup[64], test_tup[65], test_tup[66], test_tup[67], test_tup[68], test_tup[69], test_tup[70], test_tup[71], test_tup[72], test_tup[73], test_tup[74], test_tup[75], test_tup[76], test_tup[77], test_tup[78], test_tup[79], test_tup[80], test_tup[81], test_tup[82], test_tup[83], test_tup[84], test_tup[85], test_tup[86], test_tup[87], test_tup[88], test_tup[89], test_tup[90], test_tup[91], test_tup[92], test_tup[93], test_tup[94], test_tup[95], test_tup[96], test_tup[97], test_tup[98], test_tup[99], test_tup[100], test_tup[101], test_tup[102], test_tup[103], test_tup[104], test_tup[105], test_tup[106], test_tup[107], test_tup[108], test_tup[109], test_tup[110], test_tup[111], test_tup[112], test_tup[113], test_tup[114], test_tup[115], test_tup[116], test_tup[117], test_tup[118], test_tup[119], test_tup[120], test_tup[121], test_tup[122], test_tup[123], test_tup[124], test_tup[125], test_tup[126], test_tup[127], test_tup[128], test_tup[129], test_tup[130], test_tup[131], test_tup[132], test_tup[133], test_tup[134], test_tup[135], test_tup[136], test_tup[137], test_tup[138], test_tup[139], test_tup[140], test_tup[141], test_tup[142], test_tup[143], test_tup[144], test_tup[145], test_tup[146], test_tup[147], test_tup[148], test_tup[149], test_tup[150], test_tup[151], test_tup[152], test_tup[153], test_tup[154], test_tup[155], test_tup[156], test_tup[157], test_tup[158], test_tup[159], test_tup[160], test_tup[161], test_tup[162], test_tup[163], test_tup[164], test_tup[165], test_tup[166], test_tup[167], test_tup[168], test_tup[169], test_tup[170], test_tup[171], test_tup[172], test_tup[173], test_tup[174], test_tup[175], test_tup[176], test_tup[177], test_tup[178], test_tup[179], test_tup[180], test_tup[181], test_tup[182], test_tup[183], test_tup[184], test_tup[185], test_tup[186], test_tup[187], test_tup[188], test_tup[189], test_tup[190], test_tup[191], test_tup[192], test_tup[193], test_tup[194], test_tup[195], test_tup[196], test_tup[197], test_tup[198], test_tup[199], test_tup[200], test_tup[201], test_tup[202], test_tup[203], test_tup[204], test_tup[205], test_tup[206], test_tup[207], test_tup[208], test_tup[209], test_tup[210], test_tup[211], test_tup[212], test_tup[213], test_tup[214], test_tup[215], test_tup[216], test_tup[217], test_tup[218], test_tup[219], test_tup[220], test_tup[221], test_tup[222], test_tup[223], test_tup[224], test_tup[225], test_tup[226], test_tup[227], test_tup[228], test_tup[229], test_tup[230], test_tup[231], test_tup[232], test_tup[233], test_tup[234], test_tup[235], test_tup[236], test_tup[237], test_tup[238], test_tup[239], test_tup[240], test_tup[241], test_tup[242], test_tup[243], test_tup[244], test_tup[245], test_tup[246], test_tup[247], test_tup[248], test_tup[249], test_tup[250], test_tup[251], test_tup[252], test_tup[253], test_tup[254], test_tup[255], test_tup[256], test_tup[257], test_tup[258], test_tup[259], test_tup[260], test_tup[261], test_tup[262], test_tup[263], test_tup[264], test_tup[265], test_tup[266], test_tup[267], test_tup[268], test_tup[269], test_tup[270], test_tup[271], test_tup[272], test_tup[273], test_tup[274], test_tup[275], test_tup[276], test_tup[277], test_tup[278], test_tup[279], test_tup[280], test_tup[281], test_tup[282], test_tup[283], test_tup[284]",
        "num_ids": 2001
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    if n == 0:\n        return 0\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    dp[0][0] = cost[0][0]\n",
        "num_ids": 60
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0 or n == 1:\n        return 0\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for j in range(1, n):\n        dp[0][j] = cost[0][j] + dp[0][j-1]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return int(dp[-1][-1] / n)\n",
        "num_ids": 201
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = -1\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                path_total = cost[i][j]\n                path_count = 1\n            elif i == 0 and j!= 0:\n                path_total += cost[i][j]\n                path_count += 1\n            elif i!= 0 and j == 0:\n                path_total += cost[i][j]\n                path_count += 1\n            else:\n                path_total = path_total + cost[i][j]\n                path_count += 1\n",
        "num_ids": 158
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N==0:\n        return 0\n    if N == 1:\n        return cost[0][0]\n    \n    max_avg = -1\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                continue\n            new_cost = []\n            for k in range(i):\n                new_cost.append(cost[k][j])\n            for k in range(j):\n                new_cost.append(cost[i][k])\n            # if i == N-1 and j == N-1:\n            #     new_cost.append(cost[i][j])\n            new_cost = sorted(new_cost, reverse=True)\n            total_cost = 0\n            total_visited = 1\n            for k in range(len(new_cost)):\n                total_cost += new_cost[k]\n                total_visited += k\n            avg = total_cost/total_visited\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg\n",
        "num_ids": 268
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    maxPath = 0\n    maxAvg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                if cost[i][j] == 0:\n                    maxPath = maxPath\n                else:\n                    maxPath = 0\n                maxAvg = 0\n                continue\n            if cost[i][j] > maxPath:\n                maxPath = cost[i][j]\n            if (i - 1) >= 0 and cost[i][j] + cost[i - 1][j] > maxPath:\n                maxPath = cost[i][j] + cost[i - 1][j]\n            if (j - 1) >= 0 and cost[i][j] + cost[i][j - 1] > maxPath:\n                maxPath = cost[i][j] + cost[i][j - 1]\n            if (i + 1) <= n - 1 and cost[i][j] + cost[i + 1][j] > maxPath:\n                maxPath = cost[i][j] + cost[i + 1][j]\n            if (j + 1) <= n - 1 and cost[i][j] + cost[i][j + 1] > maxPath:\n                maxPath = cost[i][j] + cost[i][j + 1]\n            if cost[i][j] > maxAvg:\n                maxAvg = cost[i][j]\n            else:\n                maxAvg = 0\n    return (maxPath / maxAvg)\n",
        "num_ids": 361
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # The maximum average for all existing paths\n    maxAverage = 0\n    \n    # A dictionary to maintain visited cells\n    visited = {}\n    \n    # A function to get the maximum average\n    def getMaxAverage(array, cost, path, totalCost, visited):\n        '''\n        Given a matrix, a list of cost and a list of cells, return the maximum average\n        '''\n        \n        # Mark the current path as visited\n        visited[path] = True\n        \n        # Add the cost of the path\n        totalCost += cost[path[0]][path[1]]\n        \n        # Check for the current path\n        if len(path) == len(array):\n            # Check if the path is shorter than the current maxAverage\n            if totalCost/len(path) > maxAverage:\n                # Update the maxAverage\n                maxAverage = totalCost/len(path)\n        else:\n            # For each of the four directions\n            for i in range(len(path)):\n                # For each of the four directions\n                # Add the cell to the path\n                if i == 0:\n                    newPath = (path[i], path[i+1])\n                elif i == 1:\n                    newPath = (path[i-1], path[i])\n                elif i == 2:\n                    newPath = (path[i], path[i-1])\n                else:\n                    newPath = (path[i-1], path[i])\n                # If the new path is not already visited\n                if newPath not in visited:\n                    # Call the function recursively\n                    getMaxAverage(array, cost, newPath, totalCost, visited)\n                    \n    # Get the length of the matrix\n    n = len(cost)\n    \n    # Get the length of the matrix\n    m = len(cost[0])\n    \n    # An array to maintain the four directions\n    directions = [[-1, 0], [1, 0], [0, 1], [0, -1]]\n    \n    # A dictionary to maintain visited cells\n    visited = {}\n    \n    # Compute the maximum average\n    for i in range(n):\n        for j in range(m):\n            # If the current cell is not yet visited\n            if (i, j) not in visited:\n                # Mark the current cell as visited\n                visited[(i, j)] = True\n                # Reset the total cost\n                totalCost = 0\n                # Add the cost of the current cell\n                totalCost += cost[i][j]\n                # Get the path from the current cell to the bottom right cell\n                path = (i, j)\n                # Call the function recursively\n                getMaxAverage(array, cost, path, totalCost, visited)\n    \n    # Return the max average\n    return maxAverage\n    \nif __name__ == \"__main__\":\n    cost = [[0, 1, 5],\n            [2, 0, 1],\n            [1, 3, 3]]\n            \n    print maxAverageOfPath(cost",
        "num_ids": 617
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    visited = set()\n    max_avg = float(\"-inf\")\n    for i in range(n):\n        for j in range(n):\n            # if we already visited the cell\n            if (i,j) in visited:\n                continue\n            if (i,j) not in visited:\n                sum_of_cost = 0\n                # take the cell and add all the cost of it to the sum_of_cost\n                for x,y in [(0,1),(1,0),(0,-1),(-1,0)]:\n                    if (i + x, j + y) not in visited:\n                        sum_of_cost += cost[i][j]\n                visited.add((i,j))\n                if sum_of_cost > max_avg:\n                    max_avg = sum_of_cost\n    return max_avg\n",
        "num_ids": 213
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n",
        "num_ids": 26
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost or len(cost)==0:\n        return 0\n    \n    n = len(cost)\n    max_average = 0\n",
        "num_ids": 36
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = []\n    n = len(cost)\n    d = [[0 for i in range(n)] for i in range(n)]\n    #d[0][0] = cost[0][0]\n    for i in range(1,n):\n        d[0][i] = cost[0][i] + d[0][i-1]\n    for i in range(1,n):\n        d[i][0] = cost[i][0] + d[i-1][0]\n    for i in range(1,n):\n        for j in range(1,n):\n            d[i][j] = cost[i][j] + min(d[i-1][j], d[i][j-1])\n    paths.append(d[n-1][n-1])\n    return max(paths)\n",
        "num_ids": 203
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for name in students:\n        if students[name][0] > h and students[name][1] > w:\n            yield name\n",
        "num_ids": 35
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #students = {}\n    #for i in range(3):\n    #    name = input('Enter student name: ')\n    #    height,weight = [float(x) for x in input('Enter height and weight: ').split()]\n    #    students[name] = (height,weight)\n    #print(students)\n    #for key in students:\n    #    if students[key][0] > h and students[key][1] > w:\n    #        print(key,students[key])\n    #return\n    \n    #below code is same as above code but uses list comprehension\n    students = {}\n    for i in range(3):\n        name = input('Enter student name: ')\n        height,weight = [float(x) for x in input('Enter height and weight: ').split()]\n        students[name] = (height,weight)\n    \n    #below code is same as above code but uses for loop\n    #name = input('Enter student name: ')\n    #height,weight = [float(x) for x in input('Enter height and weight: ').split()]\n    #students[name] = (height,weight)\n    #for key,val in students.items():\n    #    if val[0] > h and val[1] > w:\n    #        print(key,val)\n    \n    #below code is same as above code but uses while loop\n    #name = input('Enter student name: ')\n    #height,weight = [float(x) for x in input('Enter height and weight: ').split()]\n    #students[name] = (height,weight)\n    #cnt = 0\n    #while cnt < 3:\n    #    name = input('Enter student name: ')\n    #    if name in students:\n    #        cnt += 1\n    #        height,weight = [float(x) for x in input('Enter height and weight: ').split()]\n    #        students[name] = (height,weight)\n    #        if val[0] > h and val[1] > w:\n    #            print(key,val)\n    #    else:\n    #        print('Enter valid name')\n        \n    #below code is same as above code but uses while loop with a break statement\n    #name = input('Enter student name: ')\n    #height,weight = [float(x) for x in input('Enter height and weight: ').split()]\n    #students[name] = (height,weight)\n    #cnt = 0\n    #while cnt < 3:\n    #    name = input('Enter student name: ')\n    #    if name in students:\n    #        cnt += 1\n    #        height,weight = [float(x) for x in input('Enter height and weight: ').split()]\n    #        students[name] = (height,weight)\n    #        if val[0] > h and val[1] > w:\n    #            print(key,val)\n    #    else:\n    #        print('Enter valid name')\n    #        break\n        \n    #below code is same as above code but uses for loop with a break statement\n    #name = input('Enter student name: ')\n    #height,weight = [float(x) for x in input('Enter height and weight: ').split()]\n    #students[name] = (height,weight)\n    #cnt = 0\n    #while cnt < 3:\n    #    name = input('Enter student name: ')\n    #    if name in students:\n    #        cnt += 1\n    #        height,weight = [float(x) for x in input('Enter height and weight: ').split()]\n    #        students[name] = (height,weight)\n    #        if val[0] > h and val[1] > w:\n    #            print(key,val)\n    #    else:\n    #        print('Enter valid name')\n    #        break\n        \n    #for key in students:\n    #    if students[key][0] > h and students[key][1] > w:\n    #        print(key,students[key])\n    #return\n",
        "num_ids": 1008
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data_filtered = {}\n    for key, val in students.items():\n        if val[0] > h and val[1] > w:\n            data_filtered[key] = val\n    return data_filtered\n",
        "num_ids": 56
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_result=[]\n    for i in students.values():\n        if i[0]>h and i[1]>w:\n            filter_result.append(i)\n    return filter_result\n",
        "num_ids": 51
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_data=[]\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            filter_data.append(key)\n    return filter_data\n",
        "num_ids": 53
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for i in students.keys():\n        if students[i][0]>h and students[i][1]>w:\n            new_dict[i]=students[i]\n    return new_dict\n",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filtered=[]\n    for key,val in students.items():\n        if val[0]>h and val[1]>w:\n            students_filtered.append(key)\n    return students_filtered\n    ",
        "num_ids": 59
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    tuple_student = []\n    for i in students:\n        if students[i][0] >= h and students[i][1] >= w:\n            tuple_student.append(students[i])\n    return tuple_student\n",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    student_data = {}\n    #print(students)\n    for i in students:\n        if students[i][0]>=h and students[i][1]>=w:\n            student_data[i] = students[i]\n    #print(student_data)\n    return student_data\n",
        "num_ids": 75
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print(\"------------------filter data---------------\")\n    print(students)\n    print(h)\n    print(w)\n    return {key:value for (key,value) in students.items() if value[0]>=h and value[1]>=w}\n    #\n",
        "num_ids": 69
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 == num2:\n                counter = counter + 1\n    return counter\n",
        "num_ids": 47
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    \n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    \n    return counter\n",
        "num_ids": 50
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pair = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_pair += 1\n    return same_pair\n",
        "num_ids": 52
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #mapped = {}\n    #for i, val in enumerate(nums1):\n    #    mapped[val] = i\n    #return len(list(filter(lambda x: nums1[x] == nums2[x], mapped.values())))\n    '''\n    the above can be solved much more efficiently by using Counter objects.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result += 1\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # 1. Determine if nums1 and nums2 are both of the same length and equal to the length of nums1. If not, return None\n    if len(nums1)!= len(nums2) or len(nums1) == 0:\n        return None\n",
        "num_ids": 68
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    base = int(base)\n    power = int(power)\n    while(power > 0):\n        power_sum = base + power_sum\n        base = base*10\n        power = power-1\n    return power_sum\n",
        "num_ids": 64
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = 1\n    sum_digits = 0\n",
        "num_ids": 15
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to int\n    base = int(base)\n    # calculate power and return\n    return base ** power\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = base ** power\n    sum_base = 0\n    while num > 0:\n        num, digit = divmod(num, 10)\n        sum_base += digit\n    return sum_base\n    \n    \ndef power_base_sum_lst(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_base = 0\n    for i in range(power):\n        base, digit = divmod(base, 10)\n        sum_base += digit\n    return sum_base\n    \n    \ndef power_base_sum_itr(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num, sum_base = base, 0\n    while num >= 1:\n        num = num * 10\n        digit, num = divmod(num, 10)\n        sum_base += digit\n    return sum_base\n    \n    \ndef power_base_sum_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s[1:] + s[0]\n        power -= 1\n    return int(s)\n    \n    \ndef power_base_sum_str_itr(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s[1:] + s[0]\n        power -= 1\n    return int(s)\n    \n    \ndef power_base_sum_itr_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(int, str(base ** power)))\n    \n    \ndef power_base_sum_lst_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(int, list(str(base ** power))))\n    \n    \ndef power_base_sum_lst_str_itr(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s[1:] + s[0]\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_lst_itr_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = str(base)\n    while power > 0:\n        s = s[1:] + s[0]\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_itr_lst_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(int, list(str(base ** power))))\n    \n    \ndef power_base_sum_lst_itr_str_itr(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s[1:] + s[0]\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_str_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(int, str(base) * (int(power / len(str(base))) + 1)))\n    \n    \ndef power_base_sum_str_str_itr(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s * 2\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_str_str_itr_lst(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s * 2\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_str_str_itr_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s * 2\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_str_str_itr_str_itr(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s * 2\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_str_str_itr_lst_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s * 2\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_str_str_itr_lst_str_itr(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s * 2\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_str_str_itr_lst_str_itr_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s * 2\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_str_str_itr_lst_str_itr_str_itr(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s * 2\n        power -= 1\n    return sum(map(int, s))\n    \n    \ndef power_base_sum_str_str_itr_lst_str_itr_str_itr_str(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s, power = str(base), power\n    while power > 0:\n        s = s * 2\n    ",
        "num_ids": 28
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    ans = 0\n    for i in range(1, base + 1):\n        ans += (i ** power)\n    return ans\n",
        "num_ids": 33
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    x = base ** power\n    return sum([int(i) for i in str(x)])\n",
        "num_ids": 26
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n",
        "num_ids": 34
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return 0\n    if power == 0:\n        return 1\n    if base <= 0:\n        return 0\n    return (base * power) + power_base_sum(base - 1, power - 1)\n",
        "num_ids": 58
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    p_list = []\n    s_list = []\n    p_list.append(base)\n    while True:\n        if power == 0:\n            s_list.append(sum(p_list))\n            break\n        else:\n            p_list.append(base ** power)\n            power -= 1\n    return sum(s_list)\n",
        "num_ids": 85
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    total = base\n    for i in range(1,power):\n        total += base\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    matches = re.finditer(r'\"(.*?)\"', text1)\n    return list(matches)\ndef extract_a(text1):\n    '''\n    Write a function to extract values between quotation marks'' of the given string.\n    '''\n    matches = re.finditer(r\"'(.*?)'\", text1)\n    return list(matches)\ndef find_numbers_of_occurrences(text1):\n    '''\n    Write a function to count the number of times a digit occurs in a given string.\n    '''\n    number_of_occurrences = re.findall(r'\\d+', text1)\n    return len(number_of_occurrences)\ndef find_values_in_a_list(data):\n    '''\n    Write a function that accepts a list and returns the number of times each value is in the list.\n    '''\n    # Using.count function\n    count_values_in_a_list = data.count(\"\")\n    return count_values_in_a_list\ndef count_odd(data):\n    '''\n    Write a function that accepts a list and returns the number of odd items in the list.\n    '''\n    # Using.count function\n    count_odd_items = len([i for i in data if i%2!=0])\n    return count_odd_items\ndef count_even(data):\n    '''\n    Write a function that accepts a list and returns the number of even items in the list.\n    '''\n    # Using.count function\n    count_even_items = len([i for i in data if i%2==0])\n    return count_even_items\ndef sum_list(data):\n    '''\n    Write a function that accepts a list and returns the sum of all items in the list.\n    '''\n    # Using.sum function\n    sum_list_data = sum(data)\n    return sum_list_data\ndef reverse_list(data):\n    '''\n    Write a function that accepts a list and reverses the list in place (i.e., don't create a new list).\n    '''\n    # Using.reverse function\n    data.reverse()\n    return data\ndef test():\n    '''\n    Write a function that tests whether a list contains a given value.\n    '''\n    pass\ndef remove_from_list_odd(data):\n    '''\n    Write a function that removes all odd numbers from a list.\n    '''\n    # Using list comprehension\n    data_without_odd_numbers = [i for i in data if i%2!=0]\n    return data_without_odd_numbers\ndef remove_from_list_even(data):\n    '''\n    Write a function that removes all even numbers from a list.\n    '''\n    # Using list comprehension\n    data_without_even_numbers = [i for i in data if i%2==0]\n    return data_without_even_numbers\ndef list_of_different_lengths(data1, data2):\n    '''\n    Write a function that takes in two lists and returns the length of the longest list.\n    '''\n    # Using.lenght function\n    data1_length = len(data1)\n    data2_length = len(data2)\n    longest_list = data1_length if data1_length > data2_length else data2_length\n    return longest_list\ndef list_of_different_lengths2(data1, data2):\n    '''\n    Write a function that takes in two lists and returns the difference of the lengths of the lists.\n    '''\n    # Using.lenght function\n    difference = len(data1) - len(data2)\n    return difference\ndef list_of_different_lengths3(data1, data2):\n    '''\n    Write a function that takes in two lists and returns the difference of the lengths of the lists.\n    '''\n    # Using.lenght function\n    difference = len(data1) - len(data2)\n    return difference\ndef list_of_different_lengths4(data1, data2):\n    '''\n    Write a function that takes in two lists and returns the difference of the lengths of the lists.\n    '''\n    # Using.lenght function\n    difference = len(data1) - len(data2)\n    return difference\ndef remove_list(data, i):\n    '''\n    Write a function that removes the i-th element from the list.\n    '''\n    # Using list.pop() method\n    data.pop(i)\n    return data\ndef length_list(data):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    # Using.length function\n    length_list_data = len(data)\n    return length_list_data\ndef length_list2(data):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    # Using.length function\n    length_list_data = len(data)\n    return length_list_data\ndef remove_list_item(data, i):\n    '''\n    Write a function that removes the i-th item from the list.\n    '''\n    # Using list.pop() method\n    data.pop(i)\n    return data\ndef count_list_item(data, i):\n    '''\n    Write a function that counts the number of times an item occurs in a list.\n    '''\n    # Using.count function\n    count_list_item_data = data.count(i)\n    return count_list_item_data\ndef reverse_list_item(data, i):\n    '''\n    Write a function that reverses the order of the items in a list.\n    '''\n    # Using list.pop() method\n    data.pop(i)\n    data.insert(i,data[0])\n    return data\ndef remove_list_items(data, i, j):\n    '''\n    Write a function that removes the i-th and j-th items from the list.\n    '''\n    # Using list.pop() method\n    data.pop(i)\n    data.pop(j-1)\n    return data\ndef length_list_item(data):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    # Using.length function\n    length_list_data = len(data)\n    return length_list_data\ndef length_list_item2(data):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    # Using.length function\n    length_list_data = len(data)\n    return length_list_data\ndef remove_list_item2(data, i):\n    '''\n    Write a function that removes the i-th item from the list.\n    '''\n    # Using list.pop() method\n    data.pop(i)\n    return data\ndef length_list_item3(data):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    # Using.length function\n    length_list_data = len(data)\n    return length_list_data\ndef length_list_item3(data):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    # Using.length function\n    length_list_data = len(data)\n    return length_list_data\ndef remove_list_item3(data, i):\n    '''\n    Write a function that removes the i-th item from the list.\n    '''\n    # Using list.pop() method\n    data.pop(i)\n    return data\ndef length_list_item4(data):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    # Using.length function\n    length_list_data = len(data)\n    return length_list_data\ndef length_list_item4(data):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    # Using.length function\n    length_list_data = len(data)\n    return length_list_data\ndef remove_list_item4(data, i):\n    '''\n    Write a function that removes the i-th item from the list.\n    '''\n    # Using list.pop() method\n    data.pop(i)\n    return data\ndef length",
        "num_ids": 25
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    new_text = text1\n    new_text = re.sub(r\"\\\".*\\\"\", \"\", new_text)\n    new_text = re.sub(r\"\\\".*\\\"\", \"\", new_text)\n    new_text = re.sub(r\"\\\".*\\\"\", \"\", new_text)\n    new_text = re.sub(r\"\\\".*\\\"\", \"\", new_text)\n    new_text = re.sub(r\"\\\".*\\\"\", \"\", new_text)\n    new_text = re.sub(r\"\\\".*\\\"\", \"\", new_text)\n    return new_text\n",
        "num_ids": 154
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text1)!= str:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(\"\\\"(.*?)\\\"\", text1)\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    def extract_quotation_marks(text1):\n        # pattern = r'\"(.*?)\"'\n        # print(re.findall(pattern,text1))\n        # print(re.findall(pattern,text1).count('\"'))\n        pattern1 = r'\"(.*?)\"'\n        print(re.findall(pattern1,text1))\n        pattern2 = r'\"(.*?)\"'\n        # print(re.findall(pattern2,text1))\n        # print(re.findall(pattern2,text1).count('\"'))\n        return re.findall(pattern2,text1)\n",
        "num_ids": 147
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    res = re.search(r\"(\\\".*?\\\")\", text1)\n    if res:\n        return res.group(1)\n    else:\n        return None\ndef extract_brackets(text1):\n    '''\n    Write a function to extract values between brackets \"< \" and \" >\" of the given string.\n    '''\n    res = re.search(r\"(\\<.*?\\>)\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_escape_characters(text1):\n    '''\n    Write a function to extract values between escape characters (\\) and (/) of the given string.\n    '''\n    res = re.search(r\"(\\(\\.*?\\))\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_dollar_characters(text1):\n    '''\n    Write a function to extract values between the dollar characters ($) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\$.*?\\$)\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_plain_characters(text1):\n    '''\n    Write a function to extract values between the plain characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\[.*?\\])\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_quoted_characters(text1):\n    '''\n    Write a function to extract values between quoted characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\\".*?\\\")\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_parenthesis_characters(text1):\n    '''\n    Write a function to extract values between parenthesis characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\(.*?\\))\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_sharp_characters(text1):\n    '''\n    Write a function to extract values between sharp characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\#.*?\\#)\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\{.*?\\})\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_open_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between open curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\{.*?\\})\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_close_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between close curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\})\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_verbatim_characters(text1):\n    '''\n    Write a function to extract values between verbatim characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\~.*?\\~)\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_code_characters(text1):\n    '''\n    Write a function to extract values between code characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\`.*?\\`)\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\{.*?\\})\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_open_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between open curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\{.*?\\})\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_close_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between close curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\})\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_verbatim_characters(text1):\n    '''\n    Write a function to extract values between verbatim characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\~.*?\\~)\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_code_characters(text1):\n    '''\n    Write a function to extract values between code characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\`.*?\\`)\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\{.*?\\})\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_open_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between open curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\{.*?\\})\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_close_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between close curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\})\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_verbatim_characters(text1):\n    '''\n    Write a function to extract values between verbatim characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\~.*?\\~)\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_code_characters(text1):\n    '''\n    Write a function to extract values between code characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\`.*?\\`)\", text1)\n    if res:\n        return res.group(0)\n    else:\n        return None\ndef extract_curly_bracket_characters(text1):\n    '''\n    Write a function to extract values between curly bracket characters ( ) and ( ) of the given string.\n    '''\n    res = re.search(r\"(\\{.*?\\})\", text1)\n    if res:\n        return res.group",
        "num_ids": 32
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1=str(input(\"enter the text: \"))\n    text1=text1.lower()\n    text1=text1.replace(\" \",\"\")\n    text1=text1.replace(\"'\",'')\n    text1=text1.replace('\"',\"\")\n    text1=text1.replace('--','')\n    text1=text1.replace('\u201d','')\n    text1=text1.replace('\u201c','')\n    text1=text1.replace('\u2019','')\n    text1=text1.replace('\u2026','')\n    text1=text1.replace('\\n','')\n    text1=text1.replace('&','')\n    text1=text1.replace('\\t','')\n    text1=text1.replace('.','')\n    text1=text1.replace(':','')\n    text1=text1.replace('?','')\n    text1=text1.replace('-','')\n    text1=text1.replace('\\r','')\n    text1=text1.replace(';','')\n    text1=text1.replace('\u2014','')\n    text1=text1.replace('%','')\n    text1=text1.replace('\"','')\n    text1=text1.replace('(','')\n    text1=text1.replace(')','')\n    text1=text1.replace('\\xa0','')\n    text1=text1.replace('\\u00a0','')\n    text1=text1.replace(' ','')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.replace('  ',' ')\n",
        "num_ids": 2010
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.strip()\n    # below regex is to find quotation marks \" \"\n    result = re.findall(r\"[\u2018\u2019\u201c\u201d]\\S+\", text)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    pattern1 = r'\\\"[^\\\"]*\\\"'\n    quotation_list = re.findall(pattern1,text1)\n",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # text1 = \"A man is eating food.\"\n    pattern = re.compile(r'\"([^\"]+)\"')\n    match = pattern.search(text1)\n    if match:\n        return match.group(1)\n    else:\n        return \"\"\n",
        "num_ids": 66
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) > 0:\n        product = test_tup[0]\n        for i in range(1,len(test_tup)):\n            product *= test_tup[i]\n    return (product,)\n",
        "num_ids": 61
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup = new_tup + (test_tup[i]*test_tup[i+1],)\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    x = []\n    for i in range(n):\n        x.append(test_tup[i] * (n + 1 - i))\n    return x\n",
        "num_ids": 52
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    a = []\n    for i in range(len(test_tup)-1):\n        a.append(test_tup[i]*test_tup[i+1])\n    a.append(test_tup[-1])\n    return tuple(a)\n    \n    ",
        "num_ids": 70
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t = []\n    for i in range(len(test_tup)):\n        t.append(test_tup[i] * (i + 1))\n    return tuple(t)\n",
        "num_ids": 48
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # your code here\n    return (x * y for x,y in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 35
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize result list\n    res = []\n    # Initialize index\n    i = 0\n    # iterate through all the elements of the tuple\n    for t in test_tup:\n        # loop to get the next element\n        if i == len(test_tup) - 1:\n            # if index of next element is same as the length of the tuple\n            break\n        else:\n            # update the index\n            i += 1\n        # add the product of the next element and the rest of the tuple to the result list\n        res.append(t * test_tup[i])\n",
        "num_ids": 140
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = (1,)\n    for i in range(1, len(test_tup)):\n        tup += (test_tup[i] * tup[i],)\n    return tup\n",
        "num_ids": 52
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply_elements_test(test_tup):\n        return tuple([element_i * element_i for element_i in test_tup])\n    return multiply_elements_test(test_tup)\n    \nmultiply_elements_test((1,2,3))\n",
        "num_ids": 72
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    i = 0\n    while i < len(lst1):\n        lst1[i] += lst2[i]\n        i += 1\n    return lst1\n",
        "num_ids": 44
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(0,len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n",
        "num_ids": 51
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n",
        "num_ids": 12
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    for i in range(len(lst1)):\n        lst1[i] += lst2[i]\n    \n    return lst1\n",
        "num_ids": 41
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = lst1 + lst2\n    return lst\n",
        "num_ids": 19
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n",
        "num_ids": 12
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n",
        "num_ids": 12
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(0,len(lst1)):\n        lst1[i] += lst2[i]\n    return lst1\n",
        "num_ids": 39
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(list(g))\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_list = list(nums)\n    nums_list.sort()\n    return nums_list\n    \n    \n",
        "num_ids": 34
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    consec = []\n    for i in nums:\n        if consec and consec[-1] == i:\n            consec.pop()\n        else:\n            consec.append(i)\n    return consec\nprint(consecutive_duplicates([1,2,3,1,2,3,4,5,1,2,3]))\n",
        "num_ids": 87
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        if k == 1:\n            continue\n        yield list(g)",
        "num_ids": 32
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    print(nums)\n    i = 1\n    while i < len(nums):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n",
        "num_ids": 70
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 2:\n        return []\n    num_set = set(nums)\n    for num in num_set:\n        i = 0\n        while num+1 in num_set:\n            i += 1\n            num_set.remove(num)\n        num_set.add(num)\n    return num_set\n",
        "num_ids": 84
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    res = []\n    seen = set()\n    for item in nums:\n        if item in seen:\n            res.append(item)\n        else:\n            seen.add(item)\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    result = []\n    for k,v in counts.items():\n        if v == 1:\n            result.append(k)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r*(r+h)*math.pi/3\n",
        "num_ids": 17
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = h**2/(4*r**2)\n    lateral_surface = math.pi*a\n    return lateral_surface\nprint(lateralsurface_cone(1,2))",
        "num_ids": 47
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r < 0 or h < 0:\n        return 0\n    return math.pi*r**2*(h+0.5*r)+math.pi*r**2*(h-0.5*r)\n",
        "num_ids": 54
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if (h<0):\n        raise ValueError(\"Height cannot be negative\")\n    else:\n        area = 2*math.pi*r*h\n        return area\n",
        "num_ids": 42
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*(1/2)*(h+math.sqrt(r*r+h*h))\n",
        "num_ids": 34
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculation of the surface area of a cone\n    return math.pi*r**2*h/3\n",
        "num_ids": 28
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r > 0 and h > 0:\n        \n        d = math.pi/4*(r**2 - h**2)\n        return 2*math.pi*r*(r**2-h**2) - d*2\n    \n    elif r == 0 and h > 0:\n        return h\n    \n    else:\n        return 0\n",
        "num_ids": 86
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*math.pi*r**2\n    l = math.pi*r**2+2*r*math.asin(0.5*h)\n    return s*l\nprint(lateralsurface_cone(2,3))\n",
        "num_ids": 61
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def cone_surface_area(r,h):\n        pi = math.pi\n        return (pi/3)*r**2*h\n    return cone_surface_area(r,h)\ndef lateralsurface_cone_python(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 0.5*pi*r**2*h\n    return area\ndef lateralsurface_cone_python_2(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    surface_area = pi*r**2*h/3\n    return surface_area\ndef lateralsurface_cone_4(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_5(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_5(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_6(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_7(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_8(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_9(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_10(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_11(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_12(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_13(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_14(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_15(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_16(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_17(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_18(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_19(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_20(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_21(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_22(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_23(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_24(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_25(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_26(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_27(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_28(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_29(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**2*h/3\ndef lateralsurface_cone_30(r,h):\n    '''\n    Write a python function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return pi*r**",
        "num_ids": 15
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def area(r,h):\n        return (math.pi*r**2)*(h/3)\n    return area(r,h)\nprint(\"testing lateralsurface_cone\")\nprint(lateralsurface_cone(3,2))\nprint(lateralsurface_cone(3,3))\nprint(lateralsurface_cone(10,3))\n",
        "num_ids": 90
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = re.sub('( )', ':', text)\n    text = re.sub(',', ':', text)\n    text = re.sub(';', ':', text)\n    text = re.sub('\\.', ':', text)\n    return text\n",
        "num_ids": 69
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    nospace = re.sub(' ', ':', text)\n    comma = re.sub(',', ':', nospace)\n    dot = re.sub('.', ':', comma)\n    return dot\n",
        "num_ids": 53
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if(len(text)>0):\n        text=text.replace(\" \",\":\")\n    return text\n",
        "num_ids": 29
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[\\t\\n\\s,'.:]\", \":\", text)\n",
        "num_ids": 26
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n",
        "num_ids": 43
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #normalize text, we don't want to leave any lingering characters\n    text = normalize_input(text)\n    #replace special characters with spaces\n    text = re.sub(r'\\s','',text)\n    #replace commas with colons\n    text = re.sub(r'[,.]',':',text)\n    return text\n",
        "num_ids": 84
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[ ]',':',text)\n    text = re.sub('[,]','',text)\n    text = re.sub('[.]','',text)\n    return text\n",
        "num_ids": 50
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':')\n",
        "num_ids": 13
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\"\")\n    text = text.replace(\",\",\"\")\n    text = text.replace(\".\",\"\")\n    text = text.replace(\":\",\"\")\n    return text\n",
        "num_ids": 49
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "num_ids": 44
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Base case\n    if len(A) == 0:\n        return -1\n    # search the subarray for the element x\n    if A[0] == x:\n        return 0\n    if A[len(A)-1] == x:\n        return len(A)-1\n    if A[0] > x:\n        return -1\n    if A[len(A)-1] < x:\n        return len(A)\n    \n    # Binary search\n    start = 0\n    end = len(A)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            start = mid + 1\n        if A[mid] > x:\n            end = mid - 1\n",
        "num_ids": 192
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A)-1\n    while i <= j:\n        mid = (i+j)//2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            j = mid-1\n        elif A[mid] > x:\n            j = mid-1\n        else:\n            i = mid+1\n    return -1\n",
        "num_ids": 106
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    #first, find its position in the array using Binary search\n    start, end = 0, len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            #if we found the number, return its index\n            return mid\n        #if it's smaller, search in the left half of the array\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    #if we didn't find it, return -1\n    return -1\n",
        "num_ids": 139
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    length = len(A)\n    lo, hi = 0, length-1\n    while lo <= hi:\n        mid = lo + (hi-lo) // 2\n        if A[mid] < x:\n            lo = mid+1\n        elif A[mid] > x:\n            hi = mid-1\n        else:\n            return mid\n    return -1\n",
        "num_ids": 89
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n",
        "num_ids": 94
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def binary_search(lo, hi, x):\n        if hi >= lo:\n            mid = (hi + lo)//2\n            if A[mid] == x:\n                return mid\n            elif A[mid] > x:\n                return binary_search(lo, mid-1, x)\n            else:\n                return binary_search(mid+1, hi, x)\n",
        "num_ids": 92
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 82
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    index = -1\n    \n    for i in range(len(A)):\n        if A[i] == x:\n            index = i\n            break\n        \n    return index\n    \n",
        "num_ids": 50
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    summ = 0\n    for i in range(n):\n        for j in range(i,n):\n            summ += arr[i]*arr[j]\n    print(summ)\n    return summ\n",
        "num_ids": 61
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    S = 0\n    for i in range(0,n):\n        prod *= arr[i]\n    for i in range(0,n):\n        for j in range(i,n):\n            # print(arr[i:j+1])\n            S += prod // arr[i]\n    return S\n",
        "num_ids": 91
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    dp_list=[0 for i in range(0,n+1)]\n    dp_list[0]=1\n    for i in range(0,n):\n        for j in range(i+1,n+1):\n            dp_list[j]=dp_list[j-1]*arr[i]\n    return dp_list[n]\n",
        "num_ids": 94
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    if n==1:\n        return arr[0]\n    else:\n        max_num = -10\n        for i in range(n):\n            curr_num = arr[i]\n            curr_sum = 0\n            for j in range(i,n):\n                curr_sum += arr[j]\n                if max_num<curr_sum:\n                    max_num = curr_sum\n            print(curr_num,curr_sum,max_num)\n        return max_num\n    ",
        "num_ids": 144
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    s = 0\n    for i in range(n):\n        s = s + arr[i]\n    for i in range(n):\n        for j in range(i, n):\n            s = s + arr[j]\n    return s\n",
        "num_ids": 78
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    size = len(arr)\n    product = 1\n    sum_Of_Prod = 0\n    for i in range(size):\n        product *= arr[i]\n        sum_Of_Prod += product\n    return sum_Of_Prod\n",
        "num_ids": 62
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    mul = 1\n    sum_of_products = []\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            mul *= arr[j]\n            sum_of_products.append(mul)\n    return sum_of_products\n",
        "num_ids": 76
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    dp = [1] * arr_len\n    for i in range(1, arr_len):\n        for j in range(i):\n            dp[i] += dp[j] * arr[i - j - 1]\n    return sum(dp)\n",
        "num_ids": 73
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    print(product)\n    \n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product = product % mod\n    return product % mod\n    \n    \n    # # print(sum_Of_Subarray_Prod(arr))\n    # if (len(arr) == 1):\n    #     return arr[0]\n    # elif (len(arr) == 2):\n    #     return arr[0]*arr[1]\n    # else:\n    #     result = 0\n    #     for i in range(len(arr)):\n    #         for j in range(i+1, len(arr)):\n    #             result = (result+arr[i]*arr[j])%mod\n    #     return result\n",
        "num_ids": 215
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    result = 0\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len + 1):\n            result += arr[i] * arr[j - 1]\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #code here\n    \n    n = n & ((1 << n.bit_length()) - 1)\n    return n\n",
        "num_ids": 31
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    assert(n>=0 and n<=1<<32), \"number should be between 0 and 2^32\"\n    assert(n!=0 and n!=1), \"number should not be 0 and 1\"\n    n ^= (1<<31)\n    n ^= (n>>1)\n    n ^= (n>>2)\n    n ^= (n>>4)\n    n ^= (n>>8)\n    n ^= (n>>16)\n    return n\n",
        "num_ids": 116
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #print(n)\n    #n = int(input(\"Please enter a number: \"))\n    #print(n)\n    #n = 1\n    #n = 11\n    binary = bin(n)\n    print(binary)\n    if binary[0]=='0':\n        binary = binary.replace(\"0\", \"1\")\n    elif binary[0]=='1':\n        binary = binary.replace(\"1\", \"0\")\n    print(binary)\n    #print(binary)\n    n = int(binary, 2)\n    print(n)\n    return n\n",
        "num_ids": 140
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & ~(n << 1)\n    n = n & ~(n << 2)\n    n = n & ~(n << 4)\n    n = n & ~(n << 8)\n    n = n & ~(n << 16)\n    n = n & ~(n << 32)\n    n = n & ~(n << 64)\n    return n\n",
        "num_ids": 90
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert the integer to binary\n    # bin_num = bin(n)\n    # print(bin_num)\n",
        "num_ids": 30
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = int(input(\"Enter the number: \"))\n    n1 = n\n    n1 = n1 & ~(1 << (n.bit_length() - 2))\n    n1 = n1 | (1 << (n.bit_length() - 2))\n    print(\"The number after toggling middle bit is : \", n1)\n",
        "num_ids": 83
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    return (n & -n) + ((n >> 1) & -(n >> 1))\n",
        "num_ids": 35
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    binary_n = \"{0:b}\".format(n)\n    binary_n = list(binary_n)\n    if len(binary_n)!= 8:\n        binary_n.insert(0,0)\n        binary_n.insert(len(binary_n)-1,0)\n        binary_n = ''.join(binary_n)\n    \n    print(binary_n)\n    \n    \n    for i in range(1, len(binary_n)-1):\n        if binary_n[i] == '0':\n            binary_n[i] = '1'\n        else:\n            binary_n[i] = '0'\n        \n    binary_n = ''.join(binary_n)\n    print(binary_n)\n    \n    return int(binary_n, 2)\n    \n",
        "num_ids": 197
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(bin(n)[2:])\n    n ^= 1 << (31)\n    print(bin(n)[2:])\n    n &= ~(1 << (31))\n    print(bin(n)[2:])\n    return n\n",
        "num_ids": 61
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #code here\n    n = n&((1<<n.bit_length())-1)\n",
        "num_ids": 25
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
        "num_ids": 82
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        a = []\n        a.append(x)\n        return a\n",
        "num_ids": 26
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i + 1\n",
        "num_ids": 46
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n",
        "num_ids": 62
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a: return 0\n    i = bisect.bisect_left(a, x)\n    if i == len(a): return len(a)\n    else: return i\n",
        "num_ids": 46
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n",
        "num_ids": 17
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l=0\n    h=len(a)-1\n    while l<=h:\n        mid=(l+h)//2\n        if x>a[mid]:\n            l=mid+1\n        elif x<a[mid]:\n            h=mid-1\n        else:\n            return mid\n    return l\n",
        "num_ids": 79
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        return bisect.bisect_left(a, x)\n",
        "num_ids": 36
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return idx\n    if a[idx] == x:\n        return idx\n    return idx-1\n",
        "num_ids": 57
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex,string)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string.lower())\n",
        "num_ids": 16
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if bool(re.match(regex, string)):\n        return 'Its a valid string'\n    else:\n        return 'Not a valid string'\nprint(check_str('Vidhya')) \n",
        "num_ids": 52
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string) is not None:\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    x = re.match(regex, string)\n    if x:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    if match:\n        if match.group() == \"aeiouAEIOU\":\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    res = re.search(regex, string)\n    if res is not None:\n        return True\n    else:\n        return False\n    \n    # return string.startswith(\"aeiouAEIOU\")\n    \n    ",
        "num_ids": 57
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[aeiouAEIOU]*$',string):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*(n-1)\n",
        "num_ids": 23
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n*(n+1))/2\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return n\n    return n + geometric_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1/n)*(1 + geometric_sum(n-1))\n",
        "num_ids": 36
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n + 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n * n + geometric_sum(n - 1)\n",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    sum = 0\n    if (n == 1):\n        return 1\n    else:\n        return n * (n + 1) // 2\n",
        "num_ids": 35
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = 0\n    index = 0\n    while(True):\n        res = res + n\n        index = index + 1\n        if (res >= 1000000):\n            break\n    return index-1\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    for i in range(n):\n        res.append(int(math.pow(n, 1.0/2.0)))\n    return res\ndef hcf(num1, num2): \n    '''\n    Write a python function that returns the largest common factor of two numbers\n    '''\n    while num1 % num2!= 0: \n        num1, num2 = num2, num1 % num2\n    return num2\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(math.pow(i, 1.0/2.0)))\n    return res\ndef hcf(num1, num2): \n    '''\n    Write a python function that returns the largest common factor of two numbers\n    '''\n    while num1 % num2!= 0: \n        num1, num2 = num2, num1 % num2\n    return num2\ndef gcd(a, b): \n    '''\n    Write a python function that returns the GCD of two numbers. \n    '''\n    if (b == 0): \n        return a \n    return gcd(b, a % b) \ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(math.pow(i, 1.0/2.0)))\n    return res\ndef gcd(a, b): \n    '''\n    Write a python function that returns the GCD of two numbers. \n    '''\n    while b!= 0: \n        a, b = b, a % b \n    return a\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(math.pow(i, 1.0/2.0)))\n    return res\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(math.pow(i, 1.0/2.0)))\n    return res\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(math.pow(i, 1.0/2.0)))\n    return res\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(math.pow(i, 1.0/2.0)))\n    return res\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(math.pow(i, 1.0/2.0)))\n    return res\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(math.pow(i, 1.0/2.0)))\n    return res\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(math.pow(i, 1.0/2.0)))\n    return res\ndef solution(n): \n    '''\n    Write a python function that returns the list of triangular numbers of given length. \n    The sum of a triangular number of length n is equal to (n * (n + 1)) / 2. \n    Example : For length = 5, we get the list \n    [1, 3, 6, 10, 15]. \n    The list should return all the triangular numbers upto length of n. \n    '''\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        res.append(int(mat",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while(i < len(n)):\n        n[i] = int(n[i])\n        i = i + 1\n    count = 0\n    while count < len(n):\n        count = count + 1\n        if count == len(n):\n            print(\"Index of smallest triangular number with n digits:\", count)\n            exit()\n        else:\n            n[count] = int(n[count])\n            count = count + 1\n        \n",
        "num_ids": 114
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n + 1\n    largest_val = n*(n+1)/2\n    if largest_val <= 0:\n        largest_val = 1\n    for i in range(int(math.sqrt(largest_val))):\n        if largest_val % i == 0:\n            if (largest_val / i) % 2!= 0:\n                return i\n    return i\n",
        "num_ids": 93
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        if (i*(i+1)//2)==n:\n            return i\n        \ndef find_Count(n):\n    '''\n    Write a python function to find the count of even numbers that divide into a given number.\n    '''\n    for i in range(1,n+1):\n        if (i%2==0):\n            if i==0 or i==2 or i==4 or i==6 or i==8 or i==10 or i==12 or i==14 or i==16 or i==18:\n                print(i, end = \" \")\n",
        "num_ids": 79
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = 0\n    if n == 1:\n        return 1\n    for i in range(2,n+1):\n        res = i\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # code here \n    \n    print(2**(n-1) - 1)\n    ",
        "num_ids": 25
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = n-1\n    while True: \n        if res > 1: \n            i = 2\n            while i <= res: \n                if res % i == 0: \n                    break\n                i += 1\n            if i > res: \n                break\n        res -= 1\n    print(res) \n    return res\n",
        "num_ids": 81
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Your code here\n    i=1\n    while True:\n        if(i**3==n):\n            print(i)\n            return i\n        i=i+1\n",
        "num_ids": 45
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n    #print(test_dict)\n",
        "num_ids": 67
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if type(test_tup) is tuple:\n        if len(test_tup) == 0:\n            return {}\n        elif len(test_tup) == 1:\n            return {test_tup[0]:None}\n        else:\n            return {test_tup[0]:tuple_to_dict(test_tup[1:])}\n    else:\n        raise TypeError\n",
        "num_ids": 99
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n",
        "num_ids": 51
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n",
        "num_ids": 54
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    for tup in test_tup:\n        key = tup[0]\n        val = tup[1]\n        if key in d:\n            d[key].append(val)\n        else:\n            d[key] = [val]\n    return d\n",
        "num_ids": 72
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for i in range(len(test_tup)):\n        dictionary[test_tup[i]] = test_tup[i+1]\n    return dictionary\n",
        "num_ids": 49
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = {}\n    for i in range(0, len(test_tup), 2):\n        if test_tup[i] not in res:\n            res[test_tup[i]] = test_tup[i+1]\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    assert(isinstance(test_tup,tuple)), 'Input must be a tuple'\n    assert(len(test_tup)%2==0), 'Input must be a pair of adjacent elements'\n    dct={}\n    for idx,val in enumerate(test_tup):\n        if idx%2 == 0:\n            dct[val]=test_tup[idx+1]\n    return dct\n",
        "num_ids": 104
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for tup in test_tup:\n        k = tup[0]\n        v = tup[1]\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n",
        "num_ids": 71
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    i = 0\n    while i < len(test_tup) - 1:\n        d[test_tup[i]] = test_tup[i + 1]\n        i += 2\n    return d\n",
        "num_ids": 58
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])\n",
        "num_ids": 59
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Python code to demonstrate how to\n    # use list comprehension to check whether all the\n    # elements of list are same or not\n    # using list comprehension\n    \n    # initializing list\n    lis = []\n    \n    # printing original list\n    print (\"The original list is : \" + str(lis))\n    \n    # using list comprehension\n    # to make a list with all same elements\n    # NOTE : list comprehension is an\n    # alternative to nested loop\n    # It has better performance\n    # compared to nested loop\n    lis = [ i for i in s ]\n    \n    # printing result\n    print (\"The list after modification : \" + str(lis))\n    \n    # initializing list\n    lis = []\n    \n    # printing original list\n    print (\"The original list is : \" + str(lis))\n    \n    # using list comprehension\n    # to make a list with all different elements\n    # NOTE : list comprehension is an\n    # alternative to nested loop\n    # It has better performance\n    # compared to nested loop\n    lis = [ i for i in s if i!= 'a']\n    \n    # printing result\n    print (\"The list after modification : \" + str(lis))\n    \n    # initializing list\n    lis = []\n    \n    # printing original list\n    print (\"The original list is : \" + str(lis))\n    \n    # using list comprehension\n    # to make a list with all different elements\n    # NOTE : list comprehension is an\n    # alternative to nested loop\n    # It has better performance\n    # compared to nested loop\n    lis = [ i for i in s if i!= 'a' and i!= 'b']\n    \n    # printing result\n    print (\"The list after modification : \" + str(lis))\n    \n    # initializing list\n    lis = []\n    \n    # printing original list\n    print (\"The original list is : \" + str(lis))\n    \n    # using list comprehension\n    # to make a list with all different elements\n    # NOTE : list comprehension is an\n    # alternative to nested loop\n    # It has better performance\n    # compared to nested loop\n    lis = [ i for i in s if i!= 'a' or i!= 'b']\n    \n    # printing result\n    print (\"The list after modification : \" + str(lis))\n",
        "num_ids": 542
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\n",
        "num_ids": 16
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s==s[0]\n",
        "num_ids": 11
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) <= 0 :\n        print(\"Provide the string.\")\n        return False\n    if s[0] == s[1] :\n        return True\n    else :\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    assert s!= '' and len(s) > 0, \"Length of the string should not be 0.\"\n    \n    if len(set(s)) == 1:\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    import re\n    import string\n    if len(s) > 1:\n        if not re.search(r\"\\w\", s):\n            return \"Invalid input\"\n        else:\n            if(len(s) == len(set(s))):\n                return \"All characters are same\"\n            else:\n                return \"All characters are not same\"\n    else:\n        return \"Invalid input\"\n",
        "num_ids": 96
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            return False\n    return True\nprint(all_Characters_Same('abc'))\n",
        "num_ids": 48
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == '':\n        print(\"string is empty\")\n    elif len(s) == 1:\n        return True\n    elif len(s) == 0:\n        return False\n    else:\n        return (s[0] == s[-1] and all_Characters_Same(s[1:-1]))\n        \n        \n        \n        ",
        "num_ids": 86
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1.0/3.0)*side**2\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side*(side-1)*(side-2)/6)\nprint(area_tetrahedron(4))\n",
        "num_ids": 33
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*(side**2)*(math.sqrt(5)-1)\n",
        "num_ids": 25
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side * side * side\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.25 * math.sqrt(3) * side**2\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side*side*side)/(6)\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2\n",
        "num_ids": 14
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # area = (s*(s-a)*(s-b)*(s-c)) / 2\n",
        "num_ids": 27
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = (side * side)/2\n    area = (a*(a-side)*(a-side)*(a-side))**0.5\n    return area\n",
        "num_ids": 42
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*side**2)/4\nprint(area_tetrahedron(3))\nprint(area_tetrahedron(4))\nprint(area_tetrahedron(5))\n",
        "num_ids": 52
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_len = len(list)\n    for i in range(m):\n        first = list[0]\n        list[0] = list[list_len-1]\n        list[list_len-1] = first\n        list_len -= 1\n        # print(list)\n",
        "num_ids": 70
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[-1]\n    for i in range(len(list)-1, 0, -1):\n        list[i] = list[i-1]\n    list[0] = temp\n    return list\n",
        "num_ids": 54
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m==0:\n        return list\n    if len(list)==1:\n        return list\n",
        "num_ids": 27
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n==0:\n        return list\n    m = n-m\n    l = list[0:m]\n    for i in range(m,n):\n        list[i] = list[i-m]\n    list = l+list[m:]\n    return list\n",
        "num_ids": 76
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return []\n    if m == 0:\n        return list\n    for i in range(0, len(list)):\n        list[m-1], list[i] = list[i], list[m-1]\n        m -= 1\n    return list\n",
        "num_ids": 73
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n",
        "num_ids": 27
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > len(list):\n        return\n    for i in range(len(list)-m):\n        list.append(list.pop(0))\n    return list\n",
        "num_ids": 43
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0,m):\n        list.append(list.pop(0))\n    return list\n",
        "num_ids": 29
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # def rotate_right(list, m):\n    if m == 0 or m > len(list):\n        return list\n    rotated_list = list[-m:] + list[:-m]\n    return rotated_list\n",
        "num_ids": 55
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if (test_tup[0]==None or test_tup[1]==None or test_tup[2]==None or test_tup[3]==None or test_tup[4]==None):\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    for val in test_tup:\n        if val == None:\n            print(True)\n            return True\n    print(False)\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(x!= None for x in test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(item is None for item in test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup)\n",
        "num_ids": 12
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n    \ndef check_valid_input(test_tup, min_length, max_length):\n    '''\n    Write a function to check if the given tuple has valid input.\n    '''\n    \n    if len(test_tup) > max_length or len(test_tup) < min_length:\n        return False\n    \n    for i in test_tup:\n        if type(i) is not int:\n            return False\n    \n    return True\n    \ndef check_valid_position(test_tup, target_position):\n    '''\n    Write a function to check if the given tuple has valid input.\n    '''\n    \n    if test_tup[target_position] is None:\n        return False\n    \n    return True\n    \ndef move_to_list(test_tup, position):\n    '''\n    Write a function to move given tuple to the list.\n    '''\n    \n    new_tup = list(test_tup)\n    new_tup.pop(position)\n    new_tup.append(test_tup[position])\n    return tuple(new_tup)\n",
        "num_ids": 55
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum > endnum:\n        startnum, endnum = endnum, startnum\n    for i in range(startnum, endnum + 1):\n        if all(i % int(x) == 0 for x in str(i)):\n            yield i\n",
        "num_ids": 65
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # TODO: Complete this function\n    return ()\n",
        "num_ids": 15
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = []\n    for i in range(startnum, endnum+1):\n        s = str(i)\n        for j in s:\n            if i % int(j) == 0:\n                digits.append(i)\n    return digits\n",
        "num_ids": 63
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum,endnum) if i%int(startnum%(10**i)) == 0]\n    \nprint(divisible_by_digits(0,10))\nprint(divisible_by_digits(0,50))\nprint(divisible_by_digits(0,100))\nprint(divisible_by_digits(0,1000))\nprint(divisible_by_digits(0,10000))\nprint(divisible_by_digits(0,100000))\nprint(divisible_by_digits(0,1000000))\nprint(divisible_by_digits(0,10000000))\nprint(divisible_by_digits(0,100000000))\nprint(divisible_by_digits(0,10000000000))\nprint(divisible_by_digits(0,1000000000000))\nprint(divisible_by_digits(0,100000000000000))\nprint(divisible_by_digits(0,1000000000000000))\nprint(divisible_by_digits(0,100000000000000000))\nprint(divisible_by_digits(0,1000000000000000))\n",
        "num_ids": 278
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    list1 = []\n    for i in range(startnum,endnum+1):\n        list1.append(i)\n    for i in list1:\n        if i % 1 == 0:\n            continue\n        elif i % 2 == 0:\n            continue\n        elif i % 3 == 0:\n            continue\n        elif i % 4 == 0:\n            continue\n        elif i % 5 == 0:\n            continue\n        elif i % 6 == 0:\n            continue\n        elif i % 7 == 0:\n            continue\n        elif i % 8 == 0:\n            continue\n        elif i % 9 == 0:\n            continue\n        elif i % 10 == 0:\n            continue\n        else:\n            list1.append(i)\n    return list1\n",
        "num_ids": 187
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible(n):\n        count = 0\n        for i in range(startnum, endnum+1):\n            if i%n == 0:\n                count += 1\n        return count\n    return divisible\n",
        "num_ids": 53
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum == endnum:\n        return \"You can't find any numbers between \"+str(startnum)+\" and \"+str(endnum)\n",
        "num_ids": 36
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum+1))\n",
        "num_ids": 17
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return map(lambda x: x, range(startnum, endnum))\n    \nprint(list(divisible_by_digits(10,20)))\n",
        "num_ids": 39
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        print((math.pi*(r**2)*(a/360)**2)/4)\n        return ((math.pi*(r**2)*(a/360)**2)/4)\n",
        "num_ids": 63
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a == 360:\n        return a * a * math.pi * r * r\n    else:\n        return (a * (math.pi * r * r) - (360 - a) * (math.pi * r * r)) / (360 - a)\n",
        "num_ids": 76
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r == 0 or a == 0:\n        return None\n    else:\n        return math.pi*r**2*math.sin(a/180*math.pi)\n",
        "num_ids": 44
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0:\n        area = math.pi*a**2/2\n        if a == 360:\n            return None\n        else:\n            return area\n    else:\n        return None\n",
        "num_ids": 49
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Your code here\n    if a>360:\n        return None\n    else:\n        return (2*math.pi*r*a)/(2*math.pi)\n",
        "num_ids": 44
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # math.radians(theta) to convert degrees into radians.\n    theta = math.radians(a)\n    # The area of a circle is pi*r^2.\n    area = math.pi*r**2\n    if (theta > math.radians(360)):\n        return None\n    else:\n        return area\n",
        "num_ids": 85
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<0 or r>=1:\n        return None\n    if a<0 or a>=2*math.pi:\n        return None\n    return 2*math.pi*r*r*(a/360)\n",
        "num_ids": 56
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    area = math.pi * r**2 * math.cos(a*math.pi/180)\n    return area\n",
        "num_ids": 41
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return math.pi*r**2\n",
        "num_ids": 23
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = a * math.pi / 180\n    return r**2 * math.sin(a)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    a = X +''\n    b = Y +''\n    c = Z +''\n    table = [[None] * (len(c) + 1) for i in range(len(a) + 1)] \n    for i in range(len(a)): \n        for j in range(len(b)): \n            if a[i] == b[j]: \n                table[i + 1][j + 1] = table[i][j] + a[i] \n            else: \n                table[i + 1][j + 1] = max(table[i][j + 1], table[i + 1][j]) \n    return table[-1][-1] \n",
        "num_ids": 165
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] \n    \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            for k in range(1, len(Z)+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    M[i][j] = M[i-1][j-1] + 1\n                else: \n                    M[i][j] = max(M[i-1][j], M[i][j-1]) \n    return M[len(X)][len(Y)] \n",
        "num_ids": 174
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #  create a table to store solutions \n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n    L = [[None]*(m+1) for i in range(n+1)] \n",
        "num_ids": 63
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    if X == \"\" or Y == \"\" or Z == \"\":\n        return \"\"\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    dp_table = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp_table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp_table[i][j][k] = dp_table[i-1][j-1][k-1] + 1\n                else:\n                    dp_table[i][j][k] = max(dp_table[i-1][j][k], dp_table[i][j-1][k], dp_table[i][j][k-1])\n    \n    return dp_table[m][n][o]\n",
        "num_ids": 287
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0: \n        return -1\n    if X[0] == Y[0] == Z[0]: \n        return lcs_of_three(X[1:], Y[1:], Z[1:]) + 1\n    else: \n        return max(lcs_of_three(X[1:], Y, Z), lcs_of_three(X, Y[1:], Z), lcs_of_three(X, Y, Z[1:])) \n",
        "num_ids": 136
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    C = [[[0]*(o+1) for _ in range(n+1)] for _ in range(m+1)] \n    \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, o+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    C[i][j][k] = C[i-1][j-1][k-1] + 1\n                else: \n                    C[i][j][k] = max(C[i-1][j][k], C[i][j-1][k], C[i][j][k-1]) \n    \n    return C[m][n][o]\n",
        "num_ids": 216
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[None]*(n+1) for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i==0 or j==0 or k==0: \n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j] = L[i-1][j-1] + 1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][n] \n    \ndef lcs_for_four(X, Y, Z, W): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    p = len(W) \n    L = [[None]*(n+1) for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                for l in range(p+1): \n                    if i==0 or j==0 or k==0 or l==0: \n                        L[i][j] = 0\n                    elif X[i-1] == Y[j-1] == Z[k-1] == W[l-1]: \n                        L[i][j] = L[i-1][j-1] + 1\n                    else: \n                        L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1]) \n    return L[m][n] \n    \ndef lcs_of_four(X, Y, Z, W): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    p = len(W) \n    L = [[None]*(n+1) for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                for l in range(p+1): \n                    if i==0 or j==0 or k==0 or l==0: \n                        L[i][j] = 0\n                    elif X[i-1] == Y[j-1] == Z[k-1] == W[l-1]: \n                        L[i][j] = L[i-1][j-1] + 1\n                    else: \n                        L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1], L[i-1][j-1]) \n    return L[m][n] \n    ",
        "num_ids": 256
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    def lcs(X,Y,Z):\n        if (X=='' or Y=='' or Z==''):\n            return 0\n        if X == Y and Y == Z:\n            return len(X)\n        \n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        \n        t = [[0 for x in range(o+1)] for x in range(m+1)] \n        \n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        t[i][j] = 0\n                    elif X[i-1] == Y[j-1] == Z[k-1]: \n                        t[i][j] = t[i-1][j-1] + 1\n                    else: \n                        t[i][j] = max(t[i-1][j], t[i][j-1])\n        \n        return t[m][n]\n    \n    lcs = lcs(X,Y,Z)\n    return lc",
        "num_ids": 280
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    k = len(Z) \n    \n    # declaring the array for storing the dp values \n    L = [[None]*(k+1) for i in range(m+1)] \n    \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    \n    \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n",
        "num_ids": 290
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    k = len(Z)\n    \n    dp = [[-1 for _ in range(k+1)] for _ in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(k+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1] == Z[i-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][k]\n",
        "num_ids": 188
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b')\n    return pattern.sub(' \\g<0> ', str1)\n",
        "num_ids": 42
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = str1.split(' ')\n    return \" \".join(w.capitalize() for w in word_list)\n    \ndef capital_words(str1):\n    '''\n    Write a Python function to find and return the first appearance of the substring 'bob' in the given string. Return -1 if 'bob' does not occur in the input string, otherwise, return the index of its first occurrence.\n    '''\n    pattern = re.compile(r'\\w*bob\\w*')\n    #return pattern.search(str1).start()\n    return pattern.findall(str1).index(\"bob\")\n    \ndef number_words(str1):\n    '''\n    Write a Python function to count the number of words in a given sentence.\n    '''\n    str1 = str1.split(' ')\n    return len(str1)\n    \ndef string_join_space(str1):\n    '''\n    Write a Python function to replace all the spaces in a given string to '%20'.\n    '''\n    return re.sub(r'\\s', '%20', str1)\n    \ndef string_join_space_in_between(str1):\n    '''\n    Write a Python function to replace all the spaces in a given string to '%20'.\n    '''\n    return re.sub('\\s', '%20', str1)\n    \ndef string_count_words(str1, word):\n    '''\n    Write a Python function to count the number of times a given word occurs in a given sentence.\n    '''\n    return str1.count(word)\n    \ndef all_the_things(str1):\n    '''\n    Write a Python function to replace spaces between numbers and letters to a single '%20'.\n    '''\n    return re.sub(r'(\\d)([a-zA-Z])', r'\\2%20', str1)\n    \ndef reverse_the_string(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return \"\".join(reversed(str1))\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    s = list(str1)\n    s.reverse()\n    return ''.join(s)\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    s = list(str1)\n    s.reverse()\n    return ''.join(s)\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_the_string_better(str1):\n    '''\n    Write a Python function to revers",
        "num_ids": 9
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split(' ')\n    for i in range(len(str1)):\n        str1[i] = str1[i].capitalize()\n    return''.join(str1)\n",
        "num_ids": 52
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split(\" \")\n    for i in range(len(str1)):\n        if str1[i][0].isupper():\n            str1[i] = str1[i][0].lower() + str1[i][1:]\n    return \" \".join(str1)\nprint(capital_words_spaces(\"The quick brown fox jumps over the lazy dog\"))\n",
        "num_ids": 95
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word = re.findall('[A-Z]+',str1)\n    for i in range(0,len(word)):\n        str1 = str1.replace(word[i],word[i]+' ')\n    return str1\n",
        "num_ids": 60
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    str1 = str1.title()\n    return str1\n",
        "num_ids": 30
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split(' ')\n    for i in range(len(str1)):\n        str1[i] = str1[i].capitalize()\n    str1 =''.join(str1)\n    return str1\n",
        "num_ids": 59
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub('([a-zA-Z])\\1+', r'\\1 ', str1)\n    return str1\n",
        "num_ids": 36
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('([A-Z][a-z]+)', r' \\1 ', str1)\n    ",
        "num_ids": 29
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if(re.search('^[A-Z]+',str1)):\n        print(str1.title())\n    else:\n        print(\"INVALID\")\n",
        "num_ids": 42
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_numbers = []\n    for i in range(len(nums_str)):\n        nums_str_numbers.append(int(nums_str[i]))\n    nums_str_numbers.sort()\n    return nums_str_numbers\n",
        "num_ids": 72
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    nums_str = re.split(r'(\\d+)', nums_str)\n    nums_str = list(map(int, nums_str))\n    nums_str = sorted(nums_str)\n    return \" \".join(map(str, nums_str))",
        "num_ids": 75
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        try:\n            nums.append(float(i))\n        except ValueError:\n            print(i)\n    return sorted(nums)\n",
        "num_ids": 53
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # print(type(nums_str))\n    # input_data = '1, 3, 5, 7, 9'\n    # sorted_data = list(map(int, input_data.split(', ')))\n    # print(sorted_data)\n",
        "num_ids": 64
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        nums.append(i)\n    nums_sorted = sorted(nums)\n    nums_sorted = list(map(str, nums_sorted))\n    return nums_sorted\n",
        "num_ids": 68
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    try:\n        return sorted(nums_str, key=float, reverse=True)\n    except:\n        return []\n",
        "num_ids": 32
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split(' ')\n    nums_str.sort(key=lambda s: int(s))\n    return''.join(nums_str)\n",
        "num_ids": 47
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_str = []\n    nums_str = sorted(nums_str, key=float)\n    return nums_str\n",
        "num_ids": 35
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda num: int(num))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n",
        "num_ids": 18
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n    \ntest_tup = (1, 2, 3)\ntest_list = []\ntest_list = add_tuple(test_list, test_tup)\nprint(test_list)\n",
        "num_ids": 60
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # new_list = []\n    # for i in test_list:\n    #     new_list.append(i + test_tup)\n    # print(new_list)\n    test_list.append(test_tup)\n    # return test_list\n    # return test_list\n",
        "num_ids": 73
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    if arr[i] >= arr[2 * i + 1] or arr[i] >= arr[2 * i + 2]:\n        return False\n    return check_min_heap_helper(arr, i + 1)\n",
        "num_ids": 68
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # arr = arr[:len(arr)//2]\n    if len(arr) == 0 or len(arr) % 2!= 0:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left <= len(arr) - 1 and arr[left] < arr[i]:\n        return False\n    if right <= len(arr) - 1 and arr[right] < arr[i]:\n        return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i==0:\n        return True\n    elif arr[i]>arr[int((i-1)/2)] and i-1>=0:\n        return True and check_min_heap_helper(arr, int((i-1)/2))\n    elif i-1>=0:\n        return True and check_min_heap_helper(arr, i-1)\n    else:\n        return False\n",
        "num_ids": 110
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i >= len(arr)):\n        return True\n    # if i is not the last element, then we need to check if it's less than the parent\n    elif (i*2+1) < len(arr) and arr[i*2+1] > arr[i]:\n        return False\n    # if i is not the first element, then we need to check if it's greater than the parent\n    elif (i*2) < len(arr) and arr[i*2] > arr[i]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i*2+1) or check_min_heap_helper(arr, i*2)\n",
        "num_ids": 169
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    length = len(arr)\n    if length <= 1:\n        return True\n    if i > length//2:\n        return True\n    left = 2*i + 1\n    right = 2*i + 2\n    if arr[left] < arr[i]:\n        return False\n    if right <= length and arr[right] < arr[left]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "num_ids": 120
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0 or i >= len(arr):\n        return 0\n    if arr[0] <= arr[i]:\n        return 0\n    return 1\n",
        "num_ids": 42
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    if left <= len(arr)-1 and arr[left] < arr[i]:\n        return False\n    if right <= len(arr)-1 and arr[right] < arr[i]:\n        return False\n    if left <= len(arr)-1 and arr[left] > arr[i]:\n        return False\n    if right <= len(arr)-1 and arr[right] > arr[i]:\n        return False\n    return True\n",
        "num_ids": 120
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and arr[i] < arr[i+1]:\n        return False\n    if i > 0 and arr[i] < arr[i-1]:\n        return False\n    \n    return True\n",
        "num_ids": 55
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i <= 1:\n        return True\n    if arr[i-1] > arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n",
        "num_ids": 52
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 1\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 2\n    if n == 4: return 3\n    if n == 5: return 5\n    if n == 6: return 7\n    if n == 7: return 9\n    if n == 8: return 11\n    if n == 9: return 19\n    if n == 10: return 23\n    if n == 11: return 29\n    if n == 12: return 37\n    if n == 13: return 47\n    if n == 14: return 59\n    if n == 15: return 71\n    if n == 16: return 83\n    if n == 17: return 107\n    if n == 18: return 127\n    if n == 19: return 173\n    if n == 20: return 239\n    if n == 21: return 287\n    if n == 22: return 369\n    if n == 23: return 449\n    if n == 24: return 521\n    if n == 25: return 633\n    if n == 26: return 769\n    if n == 27: return 881\n    if n == 28: return 1009\n    if n == 29: return 1237\n    if n == 30: return 1469\n    if n == 31: return 1741\n    if n == 32: return 2043\n    if n == 33: return 2329\n    if n == 34: return 2631\n    if n == 35: return 2933\n    if n == 36: return 3359\n    if n == 37: return 3877\n    if n == 38: return 4399\n    if n == 39: return 4891\n    if n == 40: return 5527\n    if n == 41: return 6263\n    if n == 42: return 7343\n    if n == 43: return 8481\n    if n == 44: return 9375\n    if n == 45: return 10571\n    if n == 46: return 11417\n    if n == 47: return 12571\n    if n == 48: return 14385\n    if n == 49: return 15867\n    if n == 50: return 18079\n    if n == 51: return 20607\n    if n == 52: return 24127\n    if n == 53: return 27429\n    if n == 54: return 31003\n    if n == 55: return 34807\n    if n == 56: return 37813\n    if n == 57: return 41451\n    if n == 58: return 45115\n    if n == 59: return 49053\n    if n == 60: return 53819\n    if n == 61: return 57871\n    if n == 62: return 61795\n    if n == 63: return 66889\n    if n == 64: return 70469\n    if n == 65: return 75571\n    if n == 66: return 80639\n    if n == 67: return 86543\n    if n == 68: return 92283\n    if n == 69: return 97741\n    if n == 70: return 103895\n    if n == 71: return 108223\n    if n == 72: return 114223\n    if n == 73: return 129177\n    if n == 74: return 143671\n    if n == 75: return 152647\n    if n == 76: return 174451\n    if n == 77: return 195181\n    if n == 78: return 202817\n    if n == 79: return 243927\n    if n == 80: return 271833\n    if n == 81: return 309833\n    if n == 82: return 350263\n    if n == 83: return 391691\n    if n == 84: return 427875\n    if n == 85: return 486375\n    if n == 86: return 527689\n    if n == 87: return 584245\n    if n == 88: return 626755\n    if n == 89: return 689457\n    if n == 90: return 731453\n    if n == 91: return 790741\n    if n == 92: return 828809\n    if n == 93: return 893269\n    if n == 94: return 947177\n    if n == 95: return 101841\n    if n == 96: return 107295\n    if n == 97: return 113238\n    if n == 98: return 120836\n    if n == 99: return 139809\n    if n == 100: return 157367\n    if n == 101: return 182837\n    if n == 102: return 194643\n    if n == 103: return 207619\n    if n == 104: return 247073\n    if n == 105: return 279723\n    if n == 106: return 313731\n    if n == 107: return 347879\n    if n == 108: return 415459\n    if n == 109: return 446559\n    if n == 110: return 492181\n    if n == 111: return 538795\n    if n == 112: return 596379\n    if n == 113: return 629375\n    if n == 114: return 687881\n    if n == 115: return 735279\n    if n == 116: return 796593\n    if n == 117: return 846329\n    if n == 118: return 905571\n    if n == 119: return 957457\n    if n == 120: return 1016445\n    if n == 121: return 1074033\n    if n == 122: return 1142829\n    if n == 123: return 1200729\n    if n == 124: return 1397619\n    if n == 125: return 1582567\n    if n == 126: return 1814019\n    if n == 127: return 1958127\n    if n == 128: return 2085177\n    if n == 129: return 2434171\n    if n == 130: return 2786191\n    if n == 131: return 3129495\n    if n == 132: return 3359827\n    if n == 133: return 3884749\n    if n == 134: return 4341867\n    if n == 135: return 4951073\n    if n == 136: return 5375071\n    if n == 137: return 5981953\n    if n == 138: return 6343637\n    if n == 139: return 6895745\n    if n == 140: return 7358027\n    if n == 141: return 8037307\n    if n == 142: return 8552737\n    if n == 143: return 9074583\n    if n == 144: return 9586739\n    if n == 145: return 10137265\n    if n == 146: return 10744643\n    if n == 147: return 11465697\n    if n == 148: return 12053423\n    if n == 149: return 13959119\n    if n == 150: return 15847291\n    if n == 151: return 1814875\n    if n == 152: return 1960856\n    if n == 153: return 2073729\n    if n == 154: return 2412079\n    if n == 155: return 2794869\n    if n == 156: return 3132609\n    if n == 157: return 3438005\n    if n == 158: return 3884439\n    if n == 159: return 4343933\n    if n == 160: return 4926283\n    if n == 161: return 5374041\n    if n == 162: return 5982657\n    if n == 163: return 6343225\n    if n == 164: return 6894659\n    if n == 165: return 7352359\n    if n == 166: return 8049777\n    if n == 167: return 8553701\n    if n == 168: return 9071291\n    if n == 169: return 9574857\n    if n == 170: return 10126405\n    if n == 171: return 10744383\n    if n == 172: return 11465505\n    if n == 173: return 12056107\n    if n == 174: return 13959042\n    if n == 175: return 15847654\n    if n == 176: return 18149176\n    if n == 177: return 1960842\n    if n == 178: return 2073743\n    if n == 179: return 241248\n    if n == 180: return 2794821\n    if n == 181: return 3132607\n    if n == 182: return 3438019\n    if ",
        "num_ids": 1949
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = n + 1\n    l = [0] * n \n    l[0] = 0\n    l[1] = 1\n    for i in range(2, n): \n        l[i] = (l[i - 1] + l[i - 2]) % 1000000007\n    return l[n - 1] \n",
        "num_ids": 82
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    s = 0\n    num = 0\n    for i in range(n): \n        s = (2*s + 1) % 1000000007 \n        num = num + s\n    return num\n",
        "num_ids": 49
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = 0\n    sum_ = 1\n    for i in range(0, n):\n        num = num + sum_\n        sum_ = sum_*7\n    return num\n",
        "num_ids": 45
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = n+1\n    l = [0]*(n)\n    l[1] = 1\n    for i in range(2,n):\n        l[i] = l[i-1]*2\n        if (i%2 == 0):\n            l[i] = l[i] - l[i//2]\n    return l[n-1]\n",
        "num_ids": 91
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #initialise variables\n    s = 0\n    r = 0\n    num = 0\n    \n    #find S\n    for i in range(1, n + 1):\n        s += r\n        r = s - r\n    \n    #find R\n    for i in range(1, n + 1):\n        num = i + n\n        r = num - 1\n        r = (num * num - 1) / (num - 1)\n        r = int(r)\n    \n    return s - r\n    \n    \n    #jacobsthal nums of order 4, 5, and 6 are: 2, 8, 13, 34, 55,...\n",
        "num_ids": 155
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\nprint(jacobsthal_num(7))\n",
        "num_ids": 47
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # base cases\n    if n < 2: \n        return 0\n    if n == 2: \n        return 1\n    if n == 3: \n        return 1\n",
        "num_ids": 43
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def is_prime(x):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    \n    \n    def jacobsthal_lucas(n):\n        a = 0\n        b = 1\n        c = 0\n        d = 1\n        if is_prime(n):\n            print(n)\n            return\n        else:\n            while n!= 1:\n                m = int(n / 2)\n                if is_prime(m):\n                    n = m\n                    print(n)\n                    return\n                else:\n                    n = n - m\n                    c = d\n                    d = b\n                    b = a\n                    a = c - d\n            print(1)\n            return\n    \n    \n    jacobsthal_lucas(int(n))\n    \n    \ndef hash(n, m):\n    '''\n    Write a function to return the hash value of the given string n and m\n    \n    >>> hash(\"abc\", \"abc\")\n    \"aa-bb-cc\"\n    >>> hash(\"ab\", \"ab\")\n    \"aa\"\n    >>> hash(\"a\", \"a\")\n    \"a\"\n    >>> hash(\"\", \"a\")\n    \"aa-aa\"\n    >>> hash(\"ab\", \"\")\n    \"aa-aa-aa\"\n    >>> hash(\"\", \"\")\n    \"\"\n    >>> hash(\"\", \"abc\")\n    \"aa-aa-aa-aa\"\n    >>> hash(\"\", \"\")\n    \"\"\n    >>> hash(\"abc\", \"\")\n    \"aa-aa-aa-aa\"\n    >>> hash(\"\", \"\")\n    \"\"\n    '''\n    a = n[0:m]\n    b = n[m:]\n    c = b + a\n    \n    return c\n    \n    \n    \n    \ndef hash_find(n, m, s):\n    '''\n    Write a function to return the first occurance of substring s in the given string n\n    \n    >>> hash_find(\"abcdebce\", \"ab\", \"cd\")\n    0\n    >>> hash_find(\"abcdebce\", \"de\", \"ab\")\n    3\n    >>> hash_find(\"abcdebce\", \"de\", \"ce\")\n    3\n    >>> hash_find(\"abcdebce\", \"de\", \"\")\n    4\n    >>> hash_find(\"abcdebce\", \"de\", \"f\")\n    -1\n    >>> hash_find(\"abcdebce\", \"de\", \"de\")\n    3\n    >>> hash_find(\"abcdebce\", \"de\", \"eb\")\n    3\n    >>> hash_find(\"abcdebce\", \"de\", \"\")\n    4\n    >>> hash_find(\"abcdebce\", \"de\", \"\")\n    4\n    >>> hash_find(\"abcdebce\", \"de\", \"de\")\n    3\n    >>> hash_find(\"abcdebce\", \"de\", \"ce\")\n    -1\n    >>> hash_find(\"abcdebce\", \"de\", \"abce\")\n    -1\n    >>> hash_find(\"abcdebce\", \"de\", \"\")\n    4\n    '''\n    a = n.find(s)\n    if a!= -1:\n        return a\n    else:\n        return -1\n        \n        \n    \n    \n    \ndef hash_check(n, m, s):\n    '''\n    Write a function to return the number of occurances of substring s in the given string n\n    \n    >>> hash_check(\"abcdebce\", \"ab\", \"cd\")\n    1\n    >>> hash_check(\"abcdebce\", \"de\", \"ab\")\n    1\n    >>> hash_check(\"abcdebce\", \"de\", \"ce\")\n    2\n    >>> hash_check(\"abcdebce\", \"de\", \"\")\n    5\n    >>> hash_check(\"abcdebce\", \"de\", \"f\")\n    0\n    >>> hash_check(\"abcdebce\", \"de\", \"de\")\n    2\n    >>> hash_check(\"abcdebce\", \"de\", \"eb\")\n    1\n    >>> hash_check(\"abcdebce\", \"de\", \"\")\n    5\n    >>> hash_check(\"abcdebce\", \"de\", \"\")\n    5\n    >>> hash_check(\"abcdebce\", \"de\", \"de\")\n    2\n    >>> hash_check(\"abcdebce\", \"de\", \"ce\")\n    0\n    >>> hash_check(\"abcdebce\", \"de\", \"abce\")\n    1\n    >>> hash_check(\"abcdebce\", \"de\", \"\")\n    5\n    '''\n    a = n.count(s)\n    return a\n    \n    \n    \n    \n    \ndef reverse_iter(s):\n    '''\n    Write a function to reverse the order of all words in the given string s\n    \n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_iter(\"hello world\"",
        "num_ids": 790
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for _ in range(K):\n        test_list.pop(test_list.index(min(test_list, key=lambda x: x[1])))\n",
        "num_ids": 41
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    mini = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i] < mini:\n            mini = test_list[i]\n",
        "num_ids": 50
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = K\n",
        "num_ids": 7
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key = lambda x: x[0])\n    return sorted_list[:K]\n",
        "num_ids": 34
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k_min = test_list[0][0]\n    min_list = []\n    \n    for i in range(0, K):\n        #print(\"i\", i)\n        for j in range(0, len(test_list)):\n            #print(test_list[j][i])\n            if test_list[j][i] < k_min:\n                k_min = test_list[j][i]\n                min_list = test_list[j]\n                break\n        #print(min_list)\n    return min_list\n    \n    \n    \n    \n    #print(k_min)\n    #print(min_list)\n    #print(test_list)\n    \n    \n    \n    #print(test_list)\n    #print(\"i\", i)\n    #for i in range(0, len(test_list)):\n        #print(test_list[i][0])\n        \n",
        "num_ids": 225
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    record_list = []\n    for i in range(len(test_list)):\n        record_list.append(tuple(test_list[i]))\n    record_list.sort()\n    record_list.reverse()\n    return record_list[:K]\n",
        "num_ids": 67
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code here\n    return\n",
        "num_ids": 10
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    def find_min_k(K):\n        if len(test_list) < K:\n            return \"Too small number of records\"\n        else:\n            current_min = float('inf')\n            for item in test_list:\n                if item < current_min:\n                    current_min = item\n            return current_min\n",
        "num_ids": 80
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # input list\n    test_list = [('a',2),('b',1),('c',3),('d',5)]\n    # minimum k elements\n    k = 2\n    # creating sorted list using sorted()\n    sorted_list = sorted(test_list,key=lambda x: x[1])\n    # print sorted list\n    print(\"Sorted List: \",sorted_list)\n    # create a list to put minimum k elements\n    result_list = []\n    # find the minimum k elements\n    for i in range(0,k):\n        result_list.append(sorted_list[i][0])\n    # return minimum k elements\n    return result_list\n",
        "num_ids": 163
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list)\n    res = []\n    for i in range(K):\n        res.append(test_list[i])\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    l = []\n    i = 0\n    for i in range(len(l1)):\n        if l1.count(l1[i]) == 3:\n            l.append(l1[i])\n    for i in range(len(l2)):\n        if l2.count(l2[i]) == 3:\n            l.append(l2[i])\n    for i in range(len(l3)):\n        if l3.count(l3[i]) == 3:\n            l.append(l3[i])\n    for i in l:\n        if i not in res:\n            res.append(i)\n    return res\n",
        "num_ids": 164
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_index = {}\n    l2_index = {}\n    l3_index = {}\n    for i in range(len(l1)):\n        if l1[i] in l1_index:\n            l1_index[l1[i]].append(i)\n        else:\n            l1_index[l1[i]] = [i]\n    for i in range(len(l2)):\n        if l2[i] in l2_index:\n            l2_index[l2[i]].append(i)\n        else:\n            l2_index[l2[i]] = [i]\n    for i in range(len(l3)):\n        if l3[i] in l3_index:\n            l3_index[l3[i]].append(i)\n        else:\n            l3_index[l3[i]] = [i]\n    final_index = []\n    for k, v in l1_index.items():\n        if k in l2_index and k in l3_index:\n            for i in v:\n                if i in l3_index[k]:\n                    final_index.append(i)\n        elif k in l2_index:\n            for i in v:\n                if i in l2_index[k]:\n                    final_index.append(i)\n        elif k in l3_index:\n            for i in v:\n                if i in l3_index[k]:\n                    final_index.append(i)\n    return final_index\n",
        "num_ids": 371
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #l1 = {'a','b','c'}\n    #l2 = {'c','d','e'}\n    #l3 = {'d','e','a'}\n    result = []\n    for i in range(len(l1)):\n        if (l1[i] in l2) and (l1[i] in l3):\n            result.append(l1[i])\n    for i in range(len(l2)):\n        if (l2[i] in l1) and (l2[i] in l3):\n            result.append(l2[i])\n    for i in range(len(l3)):\n        if (l3[i] in l1) and (l3[i] in l2):\n            result.append(l3[i])\n    return result\n",
        "num_ids": 200
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    common_index = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n            common_index.append(i)\n    for j in range(len(l2)):\n        if l2[j] in l1 and l2[j] in l3:\n            common_elements.append(l2[j])\n            common_index.append(j)\n    for k in range(len(l3)):\n        if l3[k] in l1 and l3[k] in l2:\n            common_elements.append(l3[k])\n            common_index.append(k)\n    common_index = list(set(common_index))\n    return common_elements\n",
        "num_ids": 212
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for i in l1:\n        if i in l2 and i in l3:\n            l4.append(i)\n    return l4\n    \nprint(extract_index_list([1, 2, 3, 4], [1, 2, 5, 6], [1, 2, 3, 4])",
        "num_ids": 80
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = set(l3)\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    \n    ans = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            ans.append(l1[i])\n    return ans\n",
        "num_ids": 118
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(l1[i])\n    return l\n",
        "num_ids": 67
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    return_list.append(l1[i])\n    return return_list\n",
        "num_ids": 87
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(min(len(l1),len(l2),len(l3))):\n        for j in l1:\n            for k in l2:\n                for m in l3:\n                    if j == k == m:\n                        common_list.append(j)\n    return common_list\n",
        "num_ids": 83
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    a = list(map(set, zip(l1, l2, l3)))\n    lst = []\n    for i in range(len(l1)):\n        if len(set(a[0]).intersection(set(a[1])).intersection(set(a[2])))!= 0:\n            lst.append(l1[i])\n    return lst\n",
        "num_ids": 94
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    if len(numbers) <= 1:\n        return None\n    \n    # keep track of the current min\n    min_index = 0\n    min_value = numbers[0]\n    \n    for index in range(1, len(numbers)):\n        if numbers[index] <= min_value:\n            min_index = index\n            min_value = numbers[index]\n            \n    return numbers[min_index+1]\n",
        "num_ids": 106
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_list = sorted(numbers)\n    \n    return sorted_list[1]\n",
        "num_ids": 25
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    numbers.reverse()\n    return numbers[1]\n",
        "num_ids": 23
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "num_ids": 12
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return -1\n    min_value = min(numbers)\n    numbers.remove(min_value)\n    return min(numbers)\n",
        "num_ids": 48
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    if numbers[0] == numbers[1]:\n        return None\n    return numbers[1]\n",
        "num_ids": 35
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #sorted_list = sorted(numbers)\n    #print(sorted_list)\n    #print(numbers)\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 47
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]\n",
        "num_ids": 19
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    x = re.findall(r'a+b', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_zero_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    x = re.findall(r'a+b', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 'b'\n    '''\n    x = re.findall(r'a+b', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_zero_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 'b' and then a word and an's'\n    '''\n    x = re.findall(r'a+b\\s', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    x = re.findall(r'a+b', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_many_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's and then a word and an's'\n    '''\n    x = re.findall(r'a+b\\s', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_many_end_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's and then a word and an's' and then'' and then a word\n    '''\n    x = re.findall(r'a+b\\s\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_many_end_two_word(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's and then a word and an's' and then a word and then'' and then a word\n    '''\n    x = re.findall(r'a+b\\s\\w+\\s\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_many_end_two_word_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's and then a word and an's' and then a word and then'' and then a word and then a word\n    '''\n    x = re.findall(r'a+b\\s\\w+\\s\\w+\\s\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_many_end_two_word_two_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's and then a word and an's' and then a word and then'' and then a word and then a word and then a word\n    '''\n    x = re.findall(r'a+b\\s\\w+\\s\\w+\\s\\w+\\s\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_many_end_two_word_two_two_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's and then a word and an's' and then a word and then'' and then a word and then a word and then a word and then a word\n    '''\n    x = re.findall(r'a+b\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_one_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 'b' and then 0 'b' and then a word\n    '''\n    x = re.findall(r'a+b\\s+0+b\\s+\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_one_zero_two_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 'b' and then 0 'b' and then a word and then a word\n    '''\n    x = re.findall(r'a+b\\s+0+b\\s+\\w+\\s+\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_one_zero_two_two_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 'b' and then 0 'b' and then a word and then a word and then a word\n    '''\n    x = re.findall(r'a+b\\s+0+b\\s+\\w+\\s+\\w+\\s+\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_one_zero_two_two_two_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 'b' and then 0 'b' and then a word and then a word and then a word and then a word and then a word\n    '''\n    x = re.findall(r'a+b\\s+0+b\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_one_zero_two_two_two_two_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 'b' and then 0 'b' and then a word and then a word and then a word and then a word and then a word and then a word and then a word and then a word\n    '''\n    x = re.findall(r'a+b\\s+0+b\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+', text)\n    if len(x) > 0:\n        return True\n    else:\n        return False\ndef text_match_one_one_zero_two_two_two_two_two_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 'b' and then 0 'b' and then a word and the",
        "num_ids": 34
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab'\n    text = 'abcdefghijklmnopqrstuvwxyz'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.match(r\"^[ab]+$\", text)\n    return m\ndef text_match_zero_one_test(test_case):\n    print(text_match_zero_one(test_case[0])==test_case[1])\n",
        "num_ids": 65
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a\\s+b\"\n    if re.search(pattern, text):\n        print(\"match\")\n    else:\n        print(\"Not a match\")\n",
        "num_ids": 43
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # Text to search for\n    text_to_search = \"abc\"\n",
        "num_ids": 20
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'ab+',text)\n",
        "num_ids": 16
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #RegEx to match a string with an 'a' followed by one or more 'b's\n    return re.match(r'^a+b*',text)\n",
        "num_ids": 41
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r\"a[a-z]*b\",text))\n",
        "num_ids": 24
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return text.replace(\"a\",\"ba\").replace(\"b\",\"\")\n",
        "num_ids": 18
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    x = re.search('ab*',text)\n    if x:\n        print(x)\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #trivial\n    if len(test_list)==0:\n        return 0\n    #special cases\n    if len(test_list)==1:\n        return 0\n    if len(test_list)==2:\n        if test_list[0]==test_list[1]:\n            return 1\n        else:\n            return 0\n    #data structures to store the string\n    test_list_s = []\n    test_list_s.append(test_list[0])\n    test_list_s.append(test_list[1])\n    test_list_s.sort()\n    if test_list_s[0]!=test_list_s[1]:\n        return 0\n    else:\n        if test_list_s[0]==test_list_s[1]:\n            return 1\n        else:\n            return 0\n",
        "num_ids": 206
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def reverse_count(lst):\n        lst1 = []\n        lst2 = []\n        lst3 = []\n        for i in range(len(lst)):\n            lst1.append(lst[i][::-1])\n            lst2.append(lst[i])\n        for i in range(len(lst1)):\n            lst3.append(lst1[i])\n            lst3.append(lst2[i])\n        return(lst3)\n",
        "num_ids": 126
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    my_dict = {}\n    for i in test_list:\n        rev_str = i[::-1]\n        if my_dict.get(rev_str):\n            my_dict[rev_str] += 1\n        else:\n            my_dict[rev_str] = 1\n    return my_dict\n",
        "num_ids": 77
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # declaring a variable to count reverse pairs of string\n    rev_count = 0\n    # traversing through list of strings\n    for i in range(0,len(test_list)):\n        # checking if current string is reverse of other string\n        if test_list[i] == test_list[(len(test_list)-i-1)] or test_list[i] == test_list[(len(test_list)-i-2)]:\n            # incrementing count of reverse pairs\n            rev_count = rev_count + 1\n    return rev_count\n",
        "num_ids": 133
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # str = '1234'\n    # str_rev = ''\n    #\n    # for i in range(len(str)):\n    #     str_rev = str_rev + str[-1 - i]\n    #\n    # if str == str_rev:\n    #     return 2\n    # else:\n    #     return 0\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 152
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) < 2:\n        return 0\n    # count_pairs = 0\n    reverse_str_list = []\n    # for string in test_list:\n        # reverse_str = string[::-1]\n        # reverse_str_list.append(reverse_str)\n    # return count_pairs\n    for string in test_list:\n        rev_str = string[::-1]\n        if rev_str in reverse_str_list:\n            print(\"rev_str:\",rev_str,\"in reverse_str_list:\",reverse_str_list)\n            print(\"string:\",string,\"rev_str:\",rev_str)\n            return int(1)\n",
        "num_ids": 168
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    test_list = sorted(test_list, reverse=True)\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            pairs += 1\n    return pairs\n    \n",
        "num_ids": 69
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_dict = {}\n    #Iterate through the list\n    for i in test_list:\n        #If the reversed string is not in the dict\n        if i not in count_dict:\n            #increment by 1\n            count_dict[i] = 1\n        else:\n            #increment by 1\n            count_dict[i] += 1\n    #return the number of keys\n    return len(count_dict.keys())\n",
        "num_ids": 105
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) == 0:\n        return 0\n    \n    test_list.sort(key = lambda x: x[::-1])\n    result = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                result += 1\n    return result\n",
        "num_ids": 109
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #A simple Python program to count sublists in a given list\n    d={}\n    for i in list1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]=d[i]+1\n    return d\n",
        "num_ids": 64
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    l = list1\n    d = {}\n    for i in l:\n        if tuple(i) not in d:\n            d[tuple(i)] = 1\n        else:\n            d[tuple(i)] += 1\n    return d\n",
        "num_ids": 61
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        if list1[i] not in result.keys():\n            result[list1[i]] = 1\n        else:\n            result[list1[i]] += 1\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #list1 = [1,3,2,6,4,1]\n    dic = {}\n    for i in range(0, len(list1)):\n        dic[tuple(list1[i])] = dic.get(tuple(list1[i]), 0) + 1\n    return dic\n",
        "num_ids": 79
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {}\n    \nprint(unique_sublists([[1,2],2,3,4]))\n",
        "num_ids": 28
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for l in list1:\n        if l not in result:\n            result[tuple(l)] = 1\n        else:\n            result[tuple(l)] += 1\n    return result\nprint(unique_sublists([1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2]))\n",
        "num_ids": 104
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique_tuple(list2):\n        unique_list = []\n        for i in range(len(list2)):\n            if tuple(list2[i]) not in unique_list:\n                unique_list.append(tuple(list2[i]))\n        return unique_list\n    unique_tuple = {}\n    for j in range(len(list1)):\n        unique_tuple[tuple(list1[j])] = list1[j].count(list1[j])\n    return unique_tuple\n    \ndef search(list1,list2):\n    '''\n    Write a function to search for a list of values in a list of lists. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def search_tuple(list2):\n        unique_list = []\n        for i in range(len(list2)):\n            unique_list.append(tuple(list2[i]))\n        return unique_list\n    unique_list = []\n    for i in range(len(list1)):\n        if tuple(list1[i]) in search_tuple(unique_list):\n            unique_list.append(tuple(list1[i]))\n    return unique_list\n    \ndef my_key(list1):\n    '''\n    Write a function that converts a dictionary into a list of tuples sorted by their key\n    '''\n    def my_key_tuple(list1):\n        sorted_list = []\n        for i in range(len(list1)):\n            sorted_list.append((list1[i][0],list1[i][1]))\n        sorted_list.sort()\n        return sorted_list\n    my_key_tuple = {}\n    for j in range(len(list1)):\n        my_key_tuple[tuple(list1[j])] = list1[j]\n    return my_key_tuple\n    \ndef count_the_occurrence(list1,list2):\n    '''\n    Write a function that counts the occurrence of a value in a list of lists. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def count_the_occurrence_tuple(list1):\n        unique_list = []\n        for i in range(len(list1)):\n            unique_list.append(tuple(list1[i]))\n        return unique_list\n    count_the_occurrence_tuple = {}\n    for j in range(len(list1)):\n        count_the_occurrence_tuple[tuple(list1[j])] = list1[j].count(list1[j])\n    return count_the_occurrence_tuple\n    \ndef cumulative_sum(list1):\n    '''\n    Write a function that takes a list of integers as a parameter and returns a cumulative sum of the list.\n    '''\n    def cumulative_sum_tuple(list1):\n        new_list = []\n        for i in range(len(list1)):\n            if i == 0:\n                new_list.append(list1[i])\n            else:\n                new_list.append(list1[i] + new_list[i-1])\n        return new_list\n    cumulative_sum_tuple = {}\n    for j in range(len(list1)):\n        cumulative_sum_tuple[tuple(list1[j])] = cumulative_sum_tuple[tuple(list1[j-1])] + list1[j]\n    return cumulative_sum_tuple\n    \ndef cumulative_average(list1):\n    '''\n    Write a function that takes a list of integers as a parameter and returns a cumulative average of the list.\n    '''\n    def cumulative_average_tuple(list1):\n        sum_of_list = 0\n        cumulative_average_tuple = {}\n        for i in range(len(list1)):\n            if i == 0:\n                cumulative_average_tuple[tuple(list1[i])] = list1[i]\n            else:\n                sum_of_list = sum_of_list + list1[i]\n                cumulative_average_tuple[tuple(list1[i])] = sum_of_list/(i+1)\n        return cumulative_average_tuple\n    cumulative_average_tuple = {}\n    for j in range(len(list1)):\n        cumulative_average_tuple[tuple(list1[j])] = cumulative_average_tuple[tuple(list1[j-1])] + list1[j]\n    return cumulative_average_tuple\n    \ndef find_unique_values(list1):\n    '''\n    Write a function that takes a list of lists as a parameter and returns a list of the unique values of the list.\n    '''\n    def find_unique_values_tuple(list1):\n        unique_values_list = []\n        for i in range(len(list1)):\n            if tuple(list1[i]) not in unique_values_list:\n                unique_values_list.append(tuple(list1[i]))\n        return unique_values_list\n    find_unique_values_tuple = {}\n    for j in range(len(list1)):\n        find_unique_values_tuple[tuple(list1[j])] = list1[j]\n    return find_unique_values_tuple\n    \ndef count_values(list1):\n    '''\n    Write a function that takes a list of lists as a parameter and returns a dictionary where each list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def count_values_tuple(list1):\n        count_values_tuple = {}\n        for i in range(len(list1)):\n            count_values_tuple[tuple(list1[i])] = list1[i].count(list1[i])\n        return count_values_tuple\n    count_values_tuple = {}\n    for j in range(len(list1)):\n        count_values_tuple[tuple(list1[j])] = list1[j]\n    return count_values_tuple\n    \ndef group_by_values(list1):\n    '''\n    Write a function that takes a list of lists as a parameter and returns a dictionary where each list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def group_by_values_tuple(list1):\n        group_by_values_tuple = {}\n        for i in range(len(list1)):\n            if tuple(list1[i]) in group_by_values_tuple:\n                group_by_values_tuple[tuple(list1[i])].append(list1[i])\n            else:\n                group_by_values_tuple[tuple(list1[i])] = [list1[i]]\n        return group_by_values_tuple\n    group_by_values_tuple = {}\n    for j in range(len(list1)):\n        group_by_values_tuple[tuple(list1[j])] = list1[j]\n    return group_by_values_tuple\n    \ndef find_count_of_each(list1):\n    '''\n    Write a function that takes a list of lists as a parameter and returns a dictionary where each list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def find_count_of_each_tuple(list1):\n        find_count_of_each_tuple = {}\n        for i in range(len(list1)):\n            if tuple(list1[i]) in find_count_of_each_tuple:\n                find_count_of_each_tuple[tuple(list1[i])] += 1\n            else:\n                find_count_of_each_tuple[tuple(list1[i])] = 1\n        return fin",
        "num_ids": 123
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    import collections\n    d = collections.defaultdict(int)\n    for i in range(len(list1)):\n        d[tuple(list1[i])] += 1\n    return d\n",
        "num_ids": 49
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Dictionaries\n    res = {}\n    \n    # Populating dictionary\n    for i in list1:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n        \n    # Sorting dictionary\n    res = sorted(res.items(), key = lambda kv: kv[1])\n    \n    # Printing output\n    print(\"Unique sublists of the given list: \")\n    for i in range(len(res)):\n        if i == 0:\n            print(res[i][0])\n        else:\n            print(\", \", res[i][0])\n",
        "num_ids": 151
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for i in range(0, len(list1)):\n        if type(list1[i]) is list:\n            if list1[i] not in sublist_dict:\n                sublist_dict[tuple(list1[i])] = 1\n            else:\n                sublist_dict[tuple(list1[i])] += 1\n    return sublist_dict\n",
        "num_ids": 100
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        for i in num:\n            if i in '+-0123456789.':\n                continue\n            else:\n                return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).replace('.','',1).replace('-','',1).replace('+','').isdecimal()\n",
        "num_ids": 33
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if \".\" not in num:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_val = float(num)\n    if num_val == int(num_val):\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if (num.find(\".\") > -1):\n        return False\n    \n    if (num.count(\".\") > 1):\n        return False\n    \n    if (num[0] == \"-\") or (num[0] == \"+\"):\n        num = num[1:]\n        \n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n    \ndef convert_decimal(num, d = \".\"):\n    '''\n    Write a function that converts a decimal number to a specified decimal point.\n    '''\n    \n    if (num.find(\".\") == -1):\n        return num\n    \n    if (num[0] == \"-\") or (num[0] == \"+\"):\n        num = num[1:]\n        \n    num_list = num.split(\".\")\n    \n    if (num_list[0] == \"\") or (num_list[1] == \"\") or (len(num_list[0]) > 2) or (len(num_list[1]) > 2):\n        return num\n    \n    for i in range(len(num_list[0])):\n        if (num_list[0][i] == d):\n            return num\n    \n    num_list[0] = d + num_list[0]\n    \n    return num_list[0]\n    \ndef is_numeric(num):\n    '''\n    Write a function to check whether a given string is a numeric value.\n    '''\n    \n    if (num.isdigit()):\n        return True\n    \n    if (num[0] == \"-\") or (num[0] == \"+\"):\n        num = num[1:]\n        \n    for i in range(len(num)):\n        if (not num[i].isdigit()):\n            return False\n    \n    return True\n    \ndef is_odd(num):\n    '''\n    Write a function to check whether a given number is odd.\n    '''\n    \n    if (num % 2!= 0):\n        return True\n    \n    return False\n    \ndef is_lower(char):\n    '''\n    Write a function that checks whether a given character is a lowercase letter.\n    '''\n    \n    if (ord(char) >= ord(\"a\") and ord(char) <= ord(\"z\")):\n        return True\n    \n    return False\n    \ndef is_upper(char):\n    '''\n    Write a function that checks whether a given character is an uppercase letter.\n    '''\n    \n    if (ord(char) >= ord(\"A\") and ord(char) <= ord(\"Z\")):\n        return True\n    \n    return False\n    \ndef is_alpha(char):\n    '''\n    Write a function that checks whether a given character is an alphabet.\n    '''\n    \n    if (ord(char) >= ord(\"A\") and ord(char) <= ord(\"Z\") or ord(char) >= ord(\"a\") and ord(char) <= ord(\"z\")):\n        return True\n    \n    return False\n    \ndef is_decimal(num):\n    '''\n    Write a function that checks whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if (num.find(\".\") > -1):\n        return False\n    \n    if (num.count(\".\") > 1):\n        return False\n    \n    if (num[0] == \"-\") or (num[0] == \"+\"):\n        num = num[1:]\n        \n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n    \ndef convert_decimal(num, d = \".\"):\n    '''\n    Write a function that converts a decimal number to a specified decimal point.\n    '''\n    \n    if (num.find(\".\") == -1):\n        return num\n    \n    if (num[0] == \"-\") or (num[0] == \"+\"):\n        num = num[1:]\n        \n    num_list = num.split(\".\")\n    \n    if (num_list[0] == \"\") or (num_list[1] == \"\") or (len(num_list[0]) > 2) or (len(num_list[1]) > 2):\n        return num\n    \n    for i in range(len(num_list[0])):\n        if (num_list[0][i] == d):\n            return num\n    \n    num_list[0] = d + num_list[0]\n    \n    return num_list[0]\n    \ndef is_numeric(num):\n    '''\n    Write a function to check whether a given string is a numeric value.\n    '''\n    \n    if (num.isdigit()):\n        return True\n    \n    if (num[0] == \"-\") or (num[0] == \"+\"):\n        num = num[1:]\n        \n    for i in range(len(num)):\n        if (not num[i].isdigit()):\n            return False\n    \n    return True\n    \ndef is_odd(num):\n    '''\n    Write a function to check whether a given number is odd.\n    '''\n    \n    if (num % 2!= 0):\n        return True\n    \n    return False\n    \ndef is_lower(char):\n    '''\n    Write a function that checks whether a given character is a lowercase letter.\n    '''\n    \n    if (ord(char) >= ord(\"a\") and ord(char) <= ord(\"z\")):\n        return True\n    \n    return False\n    \ndef is_upper(char):\n    '''\n    Write a function that checks whether a given character is an uppercase letter.\n    '''\n    \n    if (ord(char) >= ord(\"A\") and ord(char) <= ord(\"Z\")):\n        return True\n    \n    return False\n    \ndef is_alpha(char):\n    '''\n    Write a function that checks whether a given character is an alphabet.\n    '''\n    \n    if (ord(char) >= ord(\"A\") and ord(char) <= ord(\"Z\") or ord(char) >= ord(\"a\") and ord(char) <= ord(\"z\")):\n        return True\n    \n    return False\n    \ndef is_decimal(num):\n    '''\n    Write a function that checks whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if (num.find(\".\") > -1):\n        return False\n    \n    if (num.count(\".\") > 1):\n        return False\n    \n    if (num[0] == \"-\") or (num[0] == \"+\"):\n        num = num[1:]\n        \n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n    \ndef convert_decimal(num, d = \".\"):\n    '''\n    Write a function that converts a decimal number to a specified decimal point.\n    '''\n    \n    if (num.find(\".\") == -1):\n        return num\n    \n    if (num[0] == \"-\") or (num[0] == \"+\"):\n        num = num[1:]\n        \n    num_list = num.split(\".\")\n    \n    if (num_list[0] == \"\") or (num_list[1] == \"\") or (len(num_list[0]) > 2) or (len(num_list[1]) > 2):\n        return num\n    \n    for i in range(len(num_list[0])):\n        if (num_list[0][i] == d):\n            return num\n    \n    num_list[0] = d + num_list[0]\n    \n    return num_list[0]\n    \ndef is_numeric(num):\n    '''\n    Write a function to check whether a given string is a numeric value.\n    '''\n    \n    if (num.isdigit()):\n        return True\n    \n    if (num[0] == \"-\") or (num[0] == \"+\"):\n        num = num[1:]\n        \n    for i in range(len(num)):\n        if (not num[i].isdigit()):\n            return False\n    \n    return True\n    \ndef is_odd(num):\n    '''\n    Write a function to check whether a given number is odd.\n    '''\n    \n",
        "num_ids": 4
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except:\n        return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # count = 0\n    # for i in range(0,len(arr)):\n    #     if arr[i] not in arr[i+1:len(arr)]:\n    #         count += 1\n    # if count == len(arr) - 1:\n    #     return True\n    # else:\n    #     return False\n    arr = set(arr)\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 112
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    flag = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                flag = 1\n                break\n    if flag == 0:\n        print(\"List contains only one distinct element\")\n    else:\n        print(\"List contains more than one distinct element\")\n",
        "num_ids": 91
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if(len(set(arr)) == 1):\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # T(n)=O(n)\n    # S(n)=O(1)\n    # A simple way is using dictionary\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    # Dictionary Approach:\n    dic={}\n    for i in range(len(arr)):\n        if arr[i] in dic:\n            return False\n        else:\n            dic[arr[i]]=1\n    return True\n",
        "num_ids": 113
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    new_arr=arr.copy()\n    new_arr.sort()\n    print(new_arr)\n    l = len(arr)\n    count=0\n    for i in range(0,l):\n        for j in range(i+1,l):\n            if arr[i]==arr[j]:\n                count+=1\n    if count==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 101
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr))==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    x = []\n    for num in arr:\n        if num not in x:\n            x.append(num)\n        else:\n            return 'Not Unique'\n    return 'Unique'\n    \narr = [1,2,3,4,5,1,2,3,4,5,1]\nprint(unique_Element(arr))\n",
        "num_ids": 84
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if arr is None:\n        return False\n    if len(arr) < 1:\n        return False\n    if len(arr) == 1:\n        return True\n    if len(arr) > 1:\n        unique = set(arr)\n        if len(unique) == 1:\n            return True\n        else:\n            return False\n",
        "num_ids": 81
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return False\n        else:\n            seen.add(i)\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"Number of days in month: \", 30)\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"Number of days in month: \", 31)\n    else:\n        print(\"Invalid month number\")\n        \n    \ndef check_monthnumber_year(monthnum4):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum4 % 4 == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n    \n    \ndef check_monthnumber_day(monthnum5):\n    '''\n    Write a function to check whether the given day is a valid day or not.\n    '''\n    if monthnum5 > 31:\n        print(\"Invalid day number\")\n    else:\n        print(\"True\")\n        \n        \ndef check_monthnumber_day_leap(monthnum6):\n    '''\n    Write a function to check whether the given day is a valid day or not.\n    '''\n    if monthnum6 > 29:\n        print(\"Invalid day number\")\n    else:\n        print(\"True\")\n    \n    \ndef check_monthnumber_day_leap_year(monthnum7):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum7 % 4 == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \n        \ndef check_monthnumber_day_leap_year_and_leap_month(monthnum8):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum8 % 4 == 0:\n        print(\"True\")\n    elif monthnum8 % 4 == 1:\n        print(\"False\")\n    elif monthnum8 % 4 == 2:\n        print(\"True\")\n    elif monthnum8 % 4 == 3:\n        print(\"False\")\n        \n        \ndef check_monthnumber_day_leap_year_and_leap_month_and_leap_day(monthnum9):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum9 % 4 == 0:\n        print(\"True\")\n    elif monthnum9 % 4 == 1:\n        print(\"False\")\n    elif monthnum9 % 4 == 2:\n        print(\"True\")\n    elif monthnum9 % 4 == 3:\n        print(\"False\")\n    elif monthnum9 % 4 == 0:\n        print(\"True\")\n        \n    \n    \ndef check_monthnumber_day_leap_year_and_leap_month_and_leap_day_and_leap_day(monthnum10):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum10 % 4 == 0:\n        print(\"True\")\n    elif monthnum10 % 4 == 1:\n        print(\"False\")\n    elif monthnum10 % 4 == 2:\n        print(\"True\")\n    elif monthnum10 % 4 == 3:\n        print(\"False\")\n    elif monthnum10 % 4 == 0:\n        print(\"True\")\n        \n    \n    \ndef check_monthnumber_day_leap_year_and_leap_month_and_leap_day_and_leap_day_and_leap_day(monthnum11):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum11 % 4 == 0:\n        print(\"True\")\n    elif monthnum11 % 4 == 1:\n        print(\"False\")\n    elif monthnum11 % 4 == 2:\n        print(\"True\")\n    elif monthnum11 % 4 == 3:\n        print(\"False\")\n    elif monthnum11 % 4 == 0:\n        print(\"True\")\n    elif monthnum11 % 4 == 0:\n        print(\"True\")\n    \n    \n    \ndef check_monthnumber_day_leap_year_and_leap_month_and_leap_day_and_leap_day_and_leap_day_and_leap_day(monthnum12):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum12 % 4 == 0:\n        print(\"True\")\n    elif monthnum12 % 4 == 1:\n        print(\"False\")\n    elif monthnum12 % 4 == 2:\n        print(\"True\")\n    elif monthnum12 % 4 == 3:\n        print(\"False\")\n    elif monthnum12 % 4 == 0:\n        print(\"True\")\n    elif monthnum12 % 4 == 0:\n        print(\"True\")\n        \n        \ndef check_monthnumber_day_leap_year_and_leap_month_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day(monthnum13):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum13 % 4 == 0:\n        print(\"True\")\n    elif monthnum13 % 4 == 1:\n        print(\"False\")\n    elif monthnum13 % 4 == 2:\n        print(\"True\")\n    elif monthnum13 % 4 == 3:\n        print(\"False\")\n    elif monthnum13 % 4 == 0:\n        print(\"True\")\n    elif monthnum13 % 4 == 0:\n        print(\"True\")\n    elif monthnum13 % 4 == 0:\n        print(\"True\")\n    elif monthnum13 % 4 == 0:\n        print(\"True\")\n    elif monthnum13 % 4 == 0:\n        print(\"True\")\n        \n        \ndef check_monthnumber_day_leap_year_and_leap_month_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day(monthnum14):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum14 % 4 == 0:\n        print(\"True\")\n    elif monthnum14 % 4 == 1:\n        print(\"False\")\n    elif monthnum14 % 4 == 2:\n        print(\"True\")\n    elif monthnum14 % 4 == 3:\n        print(\"False\")\n    elif monthnum14 % 4 == 0:\n        print(\"True\")\n    elif monthnum14 % 4 == 0:\n        print(\"True\")\n    elif monthnum14 % 4 == 0:\n        print(\"True\")\n    elif monthnum14 % 4 == 0:\n        print(\"True\")\n    elif monthnum14 % 4 == 0:\n        print(\"True\")\n    elif monthnum14 % 4 == 0:\n        print(\"True\")\n        \n        \ndef check_monthnumber_day_leap_year_and_leap_month_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day_and_leap_day(monthnum15):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if monthnum15 % 4 == 0:\n        print(\"True\")\n    elif monthnum15 % 4 == 1:\n        print(\"False\")\n    elif monthnum15 % 4 == 2:\n        print(\"True\")\n    elif monthnum15 % 4 == 3:\n        print(\"False\")\n    elif monthnum15 % 4 == 0:\n        print(\"True\")\n    elif monthnum15 % 4 == 0:\n        print(\"True\")\n    elif monthnum15 % 4 == 0:\n        print(\"True\")\n    elif monthnu",
        "num_ids": 132
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,4):\n        return True\n    elif monthnum3 in range(4,6):\n        return True\n    elif monthnum3 in range(6,7):\n        return True\n    elif monthnum3 in range(7,9):\n        return True\n    elif monthnum3 in range(9,11):\n        return True\n    elif monthnum3 in range(11,13):\n        return True\n    elif monthnum3 in range(13,15):\n        return True\n    elif monthnum3 in range(15,19):\n        return True\n    elif monthnum3 in range(19,21):\n        return True\n    elif monthnum3 in range(21,23):\n        return True\n    elif monthnum3 in range(23,24):\n        return True\n    elif monthnum3 in range(24,26):\n        return True\n    elif monthnum3 in range(26,28):\n        return True\n    elif monthnum3 in range(28,31):\n        return True\n    else:\n        return False\n",
        "num_ids": 261
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if monthnum3 == 1:\n            if 30 == 31:\n                return \"Month has 30 days\"\n            else:\n                return \"Month does not have 30 days\"\n        elif monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            if 30 == 31:\n                return \"Month has 30 days\"\n            else:\n                return \"Month does not have 30 days\"\n        else:\n            if 30 == 31:\n                return \"Month has 30 days\"\n            else:\n                return \"Month does not have 30 days\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if 30 == 31:\n            return \"Month has 30 days\"\n        else:\n            return \"Month does not have 30 days\"\n    elif monthnum3 == 2:\n        if 28 == 29:\n            return \"Month has 28 days\"\n        else:\n            return \"Month does not have 28 days\"\n    else:\n        return \"Invalid month number\"\ndef check_leap_year(yearnum):\n    '''\n    Write a function that checks whether the given year is a leap year or not.\n    '''\n    if yearnum % 400 == 0:\n        return \"Leap year\"\n    elif yearnum % 100 == 0:\n        return \"Not a leap year\"\n    elif yearnum % 4 == 0:\n        return \"Leap year\"\n    else:\n        return \"Not a leap year\"\ndef check_valid_date(yearnum, monthnum, daynum):\n    '''\n    Write a function that checks whether the given date is valid or not.\n    '''\n    if monthnum > 12 or monthnum < 1:\n        return \"Invalid month number\"\n    if daynum > 31 or daynum < 1:\n        return \"Invalid day number\"\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        if daynum > 31 or daynum < 1:\n            return \"Invalid day number\"\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        if daynum > 30 or daynum < 1:\n            return \"Invalid day number\"\n    elif monthnum == 2:\n        if daynum > 29 or daynum < 1:\n            return \"Invalid day number\"\n    else:\n        return \"Invalid day number\"\ndef check_valid_month(monthnum, yearnum):\n    '''\n    Write a function to check whether the given month is valid or not.\n    '''\n    if monthnum > 12 or monthnum < 1:\n        return \"Invalid month number\"\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        if 30 == 31:\n            return \"Invalid month number\"\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        if 30 == 31:\n            return \"Invalid month number\"\n    elif monthnum == 2:\n        if 28 == 29:\n            return \"Invalid month number\"\n    else:\n        return \"Invalid month number\"\ndef check_birth_month(birthmonth, birthyear):\n    '''\n    Write a function to check whether the given birth month and birth year is valid or not.\n    '''\n    if birthmonth > 12 or birthmonth < 1:\n        return \"Invalid birth month number\"\n    if birthmonth == 1 or birthmonth == 3 or birthmonth == 5 or birthmonth == 7 or birthmonth == 8 or birthmonth == 10 or birthmonth == 12:\n        if 31 == 32:\n            return \"Invalid birth month number\"\n    elif birthmonth == 4 or birthmonth == 6 or birthmonth == 9 or birthmonth == 11:\n        if 32 == 33:\n            return \"Invalid birth month number\"\n    elif birthmonth == 2:\n        if 29 == 30:\n            return \"Invalid birth month number\"\n    else:\n        return \"Invalid birth month number\"\ndef check_birth_day(birthday, birthyear):\n    '''\n    Write a function to check whether the given birth day and birth year is valid or not.\n    '''\n    if birthday > 31 or birthday < 1:\n        return \"Invalid birth day number\"\n    if birthday == 1 or birthday == 3 or birthday == 5 or birthday == 7 or birthday == 8 or birthday == 10 or birthday == 12:\n        if 31 == 32:\n            return \"Invalid birth day number\"\n    elif birthday == 4 or birthday == 6 or birthday == 9 or birthday == 11:\n        if 32 == 33:\n            return \"Invalid birth day number\"\n    elif birthday == 2:\n        if 28 == 29:\n            return \"Invalid birth day number\"\n    else:\n        return \"Invalid birth day number\"\ndef check_valid_year(yearnum):\n    '''\n    Write a function to check whether the given year is valid or not.\n    '''\n    if yearnum > 2100 or yearnum < 1900:\n        return \"Invalid year number\"\n    elif yearnum == 1900:\n        return \"Not a leap year\"\n    else:\n        return \"Not a leap year\"\ndef check_valid_day(daynum):\n    '''\n    Write a function to check whether the given day is valid or not.\n    '''\n    if daynum > 31 or daynum < 1:\n        return \"Invalid day number\"\n    elif daynum == 1 or daynum == 3 or daynum == 5 or daynum == 7 or daynum == 8 or daynum == 10 or daynum == 12:\n        if 31 == 32:\n            return \"Invalid day number\"\n    elif daynum == 4 or daynum == 6 or daynum == 9 or daynum == 11:\n        if 30 == 31:\n            return \"Invalid day number\"\n    elif daynum == 2:\n        if 28 == 29:\n            return \"Invalid day number\"\n    else:\n        return \"Invalid day number\"\ndef check_day_name(dayname):\n    '''\n    Write a function to check whether the given day name is valid or not.\n    '''\n    if dayname == \"Sunday\":\n        return \"Invalid day name\"\n    elif dayname == \"Monday\":\n        return \"Invalid day name\"\n    elif dayname == \"Tuesday\":\n        return \"Invalid day name\"\n    elif dayname == \"Wednesday\":\n        return \"Invalid day name\"\n    elif dayname == \"Thursday\":\n        return \"Invalid day name\"\n    elif dayname == \"Friday\":\n        return \"Invalid day name\"\n    elif dayname == \"Saturday\":\n        return \"Invalid day name\"\n    else:\n        return \"Invalid day name\"\ndef check_valid_month_name(monthname):\n    '''\n    Write a function to check whether the given month name is valid or not.\n    '''\n    if monthname == \"January\":\n        return \"Invalid month name\"\n    elif monthname == \"February\":\n        return \"Invalid month name\"\n    elif monthname == \"March\":\n        return \"Invalid month name\"\n    elif monthname == \"April\":\n        return \"Invalid month name\"\n    elif monthname == \"May\":\n        return \"Invalid month name\"\n    elif monthname == \"June\":\n        return \"Invalid month name\"\n    elif monthname == \"July\":\n        return \"Invalid month name\"\n    elif monthname == \"August\":\n        return \"Invalid month name\"\n    elif monthname == \"September\":\n        return \"Invalid month name\"\n    elif monthname == \"October\":\n        return \"Invalid month name\"\n    elif monthname == \"November\":\n        return \"Invalid month name\"\n    elif monthname == \"December\":\n        return \"Invalid month name\"\n    else:\n        return \"Invalid month name\"\ndef check_leap_year_name(yearname):\n    '''\n    Write a function to check whether the given year name is valid or not.\n    '''\n    if yearname == \"Leap Year\":\n        return \"Invalid year name\"\n    elif yearname == \"Not a Leap Year\":\n        return \"Invalid year name\"\n    else:\n    ",
        "num_ids": 47
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30 = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum3 in month_30:\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids": 50
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_31 = [1, 3, 5, 7, 8, 10, 12]\n    month_30 = [4, 6, 9, 11]\n    if monthnum3 in month_31:\n        print('The month contains 31 days')\n    elif monthnum3 in month_30:\n        print('The month contains 30 days')\n    else:\n        print('The month does not contain 30 days')\n",
        "num_ids": 97
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for i in range(1, 13):\n        if monthnum3 == i:\n            if (i == 1 or i == 3 or i == 5 or i == 7 or i == 8 or i == 10 or i == 12):\n                if (i == 1 or i == 3 or i == 5 or i == 7 or i == 8 or i == 10):\n                    if (i == 1 or i == 3 or i == 5 or i == 7 or i == 8):\n                        if(monthnum3 == 1):\n                            if (monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n                                return True\n                        else:\n                            if (monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10):\n                                return True\n                    else:\n                        if(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                            return True\n                else:\n                    if (monthnum3 == 2):\n                        if (monthnum3 == 2):\n                            if (monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                                return True\n                        else:\n                            if (monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                                return True\n                    else:\n                        if (monthnum3 == 2):\n                            if (monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n                                return True\n    return False\n",
        "num_ids": 398
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 4 or monthnum3 == 7 or monthnum3 == 10 or monthnum3 == 12:\n        if monthnum3 == 1:\n            print(\"31 days\")\n        elif monthnum3 == 4 or monthnum3 == 7 or monthnum3 == 10:\n            print(\"30 days\")\n        elif monthnum3 == 12:\n            print(\"31 days\")\n    else:\n        print(\"30 days\")\n",
        "num_ids": 108
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 31:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 27
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    arr.sort()\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "num_ids": 66
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1]-arr[0]\n    for i in range(n-1):\n        diff = arr[i+1]-arr[i]\n        if(diff<min_diff):\n            min_diff = diff\n    return min_diff\n    \ndef minimum_diff_pair(arr,n):\n    '''\n    Given an array of integers, arr, find the pair of integers whose sum is\n    the smallest. The pair is defined as a set of two integers in arr whose sum is equal to a specified target.\n    '''\n    arr.sort()\n    min_diff = find_min_diff(arr,n)\n    return (min_diff,arr[0]+min_diff)\n",
        "num_ids": 40
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min = 999999\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) < min:\n                min = abs(arr[i] - arr[j])\n    return min\nif __name__ == \"__main__\":\n    test_arr = [-1, 2, -3, 4, 5, -9]\n    print(find_min_diff(test_arr, len(test_arr)))\n",
        "num_ids": 118
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min = 99999999\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j])<min:\n                min = abs(arr[i]-arr[j])\n    return min\n",
        "num_ids": 67
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 1000\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                min_diff = min(min_diff, abs(arr[i]-arr[j]))\n    return min_diff\n",
        "num_ids": 75
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if(n==1):\n        return arr[0]\n    mid = n//2\n    # print(mid,arr)\n    if(arr[mid] < arr[mid-1]):\n        return find_min_diff(arr[:mid],mid)\n    elif(arr[mid] > arr[mid+1]):\n        return find_min_diff(arr[mid:],n-mid)\n    else:\n        return min(arr[mid-1],arr[mid])\n",
        "num_ids": 119
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float(\"inf\")\n    i=1\n    while i<n-1:\n        min_diff = min(min_diff,arr[i]-arr[i-1])\n        i+=1\n    return min_diff\n",
        "num_ids": 65
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr) < 2:\n        return -1\n    min_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n",
        "num_ids": 75
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # if length of array is 1, there is no pair.\n    if n == 1: \n        return False\n",
        "num_ids": 29
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 10**9\n    curr_min = 10**9\n    n = len(arr)\n    i = 0\n    while i<n:\n        curr_min = min(arr[i], curr_min+arr[i])\n        min_diff = min(curr_min-arr[i], min_diff)\n        i += 1\n    return min_diff\n",
        "num_ids": 95
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    str = str.strip()\n    n = 0\n    for i in str:\n        if i.isdigit():\n            n = n + 1\n    return n\n    \n    \ndef divisible_by_ten(num):\n    '''\n    Write a python function to check whether a given number is divisible by 10 or not.\n    '''\n    if num%10 == 0:\n        return True\n    else:\n        return False\n        \n        \ndef remove_word(str,word):\n    '''\n    Write a python function to remove a specific word from a string.\n    '''\n    return str.replace(word,'')\n    \ndef remove_word_2(str,word):\n    '''\n    Write a python function to remove a specific word from a string if it exists in a string.\n    '''\n    if word in str:\n        return str.replace(word,'')\n    else:\n        return str\n        \ndef remove_word_3(str,word):\n    '''\n    Write a python function to remove a specific word from a string if it does not exist in a string.\n    '''\n    if word not in str:\n        return str\n    else:\n        return str.replace(word,'')\n        \ndef list_to_set(lst):\n    '''\n    Write a python function to convert a list to set.\n    '''\n    return set(lst)\n    \ndef set_to_list(set):\n    '''\n    Write a python function to convert a set to list.\n    '''\n    return list(set)\n    \ndef common_elements(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return lst1&lst2\n    \ndef common_elements_2(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return list(set(lst1)&set(lst2))\n    \ndef palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    lst = []\n    for i in str:\n        lst.append(i)\n    lst = ''.join(lst)\n    if lst == lst[::-1]:\n        return True\n    else:\n        return False\n    \ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return lst[::-1]\n    \ndef reverse_list_2(lst):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return lst[::-1]\n    \ndef reverse_list_3(lst):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return lst.reverse()\n    \ndef sort_list(lst):\n    '''\n    Write a python function to sort the given list in ascending order.\n    '''\n    return sorted(lst)\n    \ndef sort_list_2(lst):\n    '''\n    Write a python function to sort the given list in ascending order.\n    '''\n    return sorted(lst,key = lambda x: x.lower())\n    \ndef sort_list_3(lst):\n    '''\n    Write a python function to sort the given list in ascending order.\n    '''\n    return sorted(lst,key = lambda x: x.lower(),reverse = True)\n    \ndef power_of_2(n):\n    '''\n    Write a python function to check whether a given integer is a power of 2 or not.\n    '''\n    return n > 0 and n & (n-1) == 0\n    \ndef power_of_2_2(n):\n    '''\n    Write a python function to check whether a given integer is a power of 2 or not.\n    '''\n    return n > 0 and not (n & (n-1))\n    \ndef power_of_2_3(n):\n    '''\n    Write a python function to check whether a given integer is a power of 2 or not.\n    '''\n    return n > 0 and not (n & -n)\n    \ndef sum_list(lst1,lst2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return lst1+lst2\n    \ndef sum_list_2(lst1,lst2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return sum(lst1,lst2)\n    \ndef sum_list_3(lst1,lst2):\n    '''\n    Write a python function to sum two lists.\n    '''\n    return lst1+lst2\n    \ndef common_elements_3(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return set(lst1)&set(lst2)\n    \ndef common_elements_4(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return set(lst1)&set(lst2)\n    \ndef common_elements_5(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return lst1[0] in lst1 and lst1[0] in lst2 or lst1[0] in lst2 and lst2[0] in lst1\n    \ndef common_elements_6(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return lst1[0] in lst1 and lst2[0] in lst1 or lst1[0] in lst2 and lst2[0] in lst1\n    \ndef common_elements_7(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return [item for item in lst1 if item in lst2]\n    \ndef common_elements_8(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return [item for item in lst2 if item in lst1]\n    \ndef common_elements_9(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return set(lst1)&set(lst2)\n    \ndef common_elements_10(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return set(lst1)&set(lst2)\n    \ndef common_elements_11(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return [item for item in lst1 if item in lst2]\n    \ndef common_elements_12(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return [item for item in lst2 if item in lst1]\n    \ndef common_elements_13(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return set(lst1)&set(lst2)\n    \ndef common_elements_14(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return set(lst1)&set(lst2)\n    \ndef common_elements_15(lst1,lst2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return set(lst1)&set(lst2)\n    \ndef common_elements_16(lst1,lst2):\n    '''\n    Write a pytho",
        "num_ids": 8
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    result = 0\n    for i in str:\n        if i in '1234567890':\n            result += 1\n    print(result)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\nprint(number_ctr('12312313'))\n",
        "num_ids": 21
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # return sum(i.isdigit() for i in str)\n    return len(str) - str.count(\".\") - str.count(\"-\")\n",
        "num_ids": 39
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - str.count(\" \")\n",
        "num_ids": 16
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_of_digits = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            num_of_digits += 1\n    print('Number of digits:', num_of_digits)\nnumber_ctr('Number_of_Digits')\n",
        "num_ids": 73
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\nprint(\"3:\",number_ctr('12'))\nprint(\"4:\",number_ctr('12345'))\nprint(\"5:\",number_ctr('123456789'))\nprint(\"6:\",number_ctr('12345678901'))\n",
        "num_ids": 69
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    x = 0\n    for i in range(len(str)):\n        if str[i] == '0' or str[i] == '1' or str[i] == '2' or str[i] == '3' or str[i] == '4' or str[i] == '5' or str[i] == '6' or str[i] == '7' or str[i] == '8' or str[i] == '9':\n            x += 1\n    return x\n",
        "num_ids": 120
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    p, s = 1, 1\n    while p!= n:\n        p, s = s, s * 2 + 1\n    return p\n",
        "num_ids": 36
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while n > 1:\n        if n % i == 0:\n            n = n/i\n        else:\n            i = i + 1\n    if n == 1:\n        print(\"1st Polite Number\")\n    else:\n        print(\"Not 1st Polite Number\")\n",
        "num_ids": 73
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #if n==1:\n    #    return 2\n    #else:\n    #    return n*2 +1\n    # a = 1\n    # b = 2\n    # x = 1\n    # while x <= n:\n    #     a, b = b, a + b\n    #     x += 1\n    # return a\n    x = 1\n    n = n-1\n    if n==1:\n        return 2\n    while x<=n:\n        a = 2*x\n        b = x + 1\n        x = a\n    return b\n",
        "num_ids": 136
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    pol = 1\n    temp = 1\n    for i in range(2, n + 1):\n        if(i%2==0):\n            temp = 2\n        else:\n            temp = 1\n        pol = temp + pol\n    return pol\n",
        "num_ids": 60
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(math.ceil(math.sqrt(n))); \n    sum = 0; \n    i = 2; \n    while (i <= n): \n        if (n % i == 0): \n            sum += i; \n            if (i!= n): \n                sum += n / i; \n        i += 1; \n    if (n == sum): \n        print(\"%d is a polite number\" % n) \n    else: \n        print(\"%d is not a polite number\" % n) \n",
        "num_ids": 134
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: return 1\n    return 1 + (n-1)*(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(math.ceil(n ** 0.5))\n    return n * (n + 1) // 2\n",
        "num_ids": 31
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Method-1 using factorial method \n    i=2\n    count=0\n    while i*i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    if count==0 and n%2==0:\n        print(\"Number is even\")\n    elif count==0 and n%2!=0:\n        print(\"Number is odd\")\n    else:\n        print(\"Number is not polite\")\n",
        "num_ids": 109
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite_recur(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        else:\n            return is_polite_recur(n-1) + is_polite_recur(n-2) + is_polite_recur(n-3)\n    return is_polite_recur(n)\ndef is_polite_v2(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite_recur(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        else:\n            return is_polite_recur(n-1) + is_polite_recur(n-2) + is_polite_recur(n-3)\n    a = is_polite_recur(n)\n    b = is_polite_recur(n-1)\n    c = is_polite_recur(n-2)\n    return a + b + c\ndef find_nth_polite_recur(n, p):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return p\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    return find_nth_polite_recur(n-1, p) + find_nth_polite_recur(n-2, p) + find_nth_polite_recur(n-3, p)\ndef find_nth_polite_v2(n, p):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return p\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    return find_nth_polite_v2(n-1, p) + find_nth_polite_v2(n-2, p) + find_nth_polite_v2(n-3, p)\ndef find_polite_recur(n, p, dp):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return p\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    if dp[n]!= -1:\n        return dp[n]\n    dp[n] = find_polite_recur(n-1, p, dp) + find_polite_recur(n-2, p, dp) + find_polite_recur(n-3, p, dp)\n    return dp[n]\ndef find_polite_v2(n, p, dp):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return p\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    if dp[n]!= -1:\n        return dp[n]\n    dp[n] = find_polite_v2(n-1, p, dp) + find_polite_v2(n-2, p, dp) + find_polite_v2(n-3, p, dp)\n    return dp[n]\ndef find_polite_recur_v2(n, p, dp):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return p\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    if dp[n]!= -1:\n        return dp[n]\n    dp[n] = find_polite_recur_v2(n-1, p, dp) + find_polite_recur_v2(n-2, p, dp) + find_polite_recur_v2(n-3, p, dp)\n    return dp[n]\ndef find_polite_v2_v2(n, p, dp):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return p\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    if dp[n]!= -1:\n        return dp[n]\n    dp[n] = find_polite_v2_v2(n-1, p, dp) + find_polite_v2_v2(n-2, p, dp) + find_polite_v2_v2(n-3, p, dp)\n    return dp[n]\ndef fibo(n): \n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\ndef fibo_v2(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return a + b\ndef fibo_v3(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\ndef fibo_v4(n):\n    if n == 0:\n        return 0\n    a = 1\n    b = 1\n    if n == 1:\n        return a\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\ndef fibo_v5(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a = 1\n    b = 1\n    if n == 2:\n        return 2\n    for i in range(3, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\ndef fibo_v6(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a = 1\n    b = 1\n    if n == 2:\n        return 2\n    for i in range(3, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\ndef fibo_v7(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a = 1\n    b = 1\n    if n == 2:\n        return 2\n    for i in range(3, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\ndef fibo_v8(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a = 1\n    b = 1\n    if n == 2:\n        return 2\n    for i in range(3, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\ndef fibo_v9(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a = 1\n    b = 1\n    if n == 2:\n        retur",
        "num_ids": 831
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    if n in polite_numbers:\n        return True\n    return False\n",
        "num_ids": 81
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l=[]\n    for i in range(len(l1)-1):\n        l.append([l1[i],l1[i+1]])\n    return l\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1.sort()\n    return zip(l1, l1[1:] + l1[:-1])\n",
        "num_ids": 29
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    p = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        p.append((l1[i],l1[i+1]))\n    return p\n",
        "num_ids": 58
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(0,len(l1)-1):\n        l2.append(l1[i])\n        l2.append(l1[i+1])\n    l3 = l2\n    return l3\n",
        "num_ids": 68
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    for i in range(len(l1)):\n        if i < len(l1) - 1:\n            print(l1[i],'to',l1[i+1],end ='')\n        else:\n            print(l1[i])\n",
        "num_ids": 64
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output=[]\n    if len(l1)==0:\n        return output\n    for i in range(len(l1)-1):\n        output.append([l1[i],l1[i+1]])\n    return output\n",
        "num_ids": 59
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    l2 = []\n    l2.append(l1[0])\n    for i in range(len(l1) - 1):\n        l2.append(l1[i+1])\n    return l2\n",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    if(len(l1) == 1):\n        return None\n    pw = []\n    for i in range(0, len(l1) - 1):\n        pw.append(l1[i])\n        pw.append(l1[i + 1])\n    return pw\n",
        "num_ids": 74
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    if len(l1) > 2:\n        for i in range(len(l1) - 2):\n            pairs.append([l1[i], l1[i + 2]])\n        return pairs\n    elif len(l1) == 2:\n        return [[l1[0], l1[1]]]\n    elif len(l1) == 1:\n        return [[l1[0]]]\n",
        "num_ids": 107
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1_len = len(l1)\n    if l1_len > 1:\n        return [[l1[i], l1[i+1]] for i in range(0, l1_len, 2)]\n    else:\n        return [[l1[0], l1[0]]]\n    \nif __name__ == \"__main__\":\n    print(\"\\n######  Test Case 01  ######\\n\")\n    test_list_01 = [1, 2, 3, 4, 5]\n    print(pair_wise(test_list_01))\n    print(\"\\n######  Test Case 02  ######\\n\")\n    test_list_02 = [1, 2, 3, 4]\n    print(pair_wise(test_list_02))\n    print(\"\\n######  Test Case 03  ######\\n\")\n    test_list_03 = []\n    print(pair_wise(test_list_03))\n    print(\"\\n######  Test Case 04  ######\\n\")\n    test_list_04 = [1, 2]\n    print(pair_wise(test_list_04))\n    print(\"\\n######  Test Case 05  ######\\n\")\n    test_list_05 = [1, 2, 3, 4]\n    print(pair_wise(test_list_05))\n    print(\"\\n######  Test Case 06  ######\\n\")\n    test_list_06 = [1, 2, 3, 4, 5]\n    print(pair_wise(test_list_06))",
        "num_ids": 371
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_count += 1\n    return pair_count\n",
        "num_ids": 65
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    \n    return count\n",
        "num_ids": 62
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    d = {}\n    for x in arr:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    for x in d:\n        y = sum - x\n        if y in d:\n            pairs += (d[x] * d[y])\n    return pairs\n",
        "num_ids": 88
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    l = len(arr)\n    for i in range(l):\n        for j in range(i + 1, l):\n            if arr[i] + arr[j] == sum:\n                print(arr[i], arr[j])\n                return\n",
        "num_ids": 62
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                cnt +=1\n    return cnt\n",
        "num_ids": 62
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum//2\n    \n    # Your code here\n",
        "num_ids": 16
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    dic = {}\n    for x in arr:\n        if(x not in dic):\n            dic[x] = 1\n        else:\n            dic[x] += 1\n    for y in dic:\n        if(dic[y]>1 and sum-y in dic):\n            count += 1\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if arr:\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] == sum - arr[i]:\n                count += 1\n        return count\n",
        "num_ids": 47
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1=set(li1)\n    li2=set(li2)\n    li3=li1-li2\n    li3=list(li3)\n    li3.sort()\n    return li3\n    \n",
        "num_ids": 56
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n",
        "num_ids": 36
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result=[]\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_set1 = set(li1)\n    li_set2 = set(li2)\n    li_set3 = li_set1.difference(li_set2)\n    li_set4 = li_set2.difference(li_set1)\n    return li_set3.union(li_set4)\n    \n",
        "num_ids": 83
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n    \ndef sub(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n    \ndef mul(li1,li2):\n    '''\n    Write a python function to get the product of two lists.\n    '''\n    return(list(set(li1)*set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result=[]\n    for i in li1:\n        if not i in li2:\n            result.append(i)\n    for i in li2:\n        if not i in li1:\n            result.append(i)\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_new = []\n    for i in li1:\n        if i not in li2:\n            li_new.append(i)\n    return li_new\n",
        "num_ids": 42
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res = []\n    for i in li1:\n        if i not in li2:\n            res.append(i)\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    x = 0\n    for i in range(1, n+1) :\n        if (i % 2!= 0) :\n            x += i ** 4\n    return x\nprint(odd_num_sum(6))\n",
        "num_ids": 55
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i ** 3\n    return sum\nprint(odd_num_sum(20))\nprint(odd_num_sum(100))\n",
        "num_ids": 59
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = 0\n    odd_sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 1:\n            odd_num = odd_num + i\n    for j in range(1,odd_num+1):\n        odd_sum = odd_sum + j*j*j*j\n    return odd_sum\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    prime_factors = []\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            n = n / i\n            prime_factors.append(i)\n        i += 2\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n    \ndef even_number_sum(n):\n    '''\n    Write a python function to find the sum of first n even natural numbers.\n    '''\n    even_num = 0\n    even_sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            even_num = even_num + i\n    for j in range(1,even_num+1):\n        even_sum = even_sum + j*j\n    return even_sum\n    \ndef list_division(x,y):\n    '''\n    Write a python function to divide list x and y.\n    '''\n    sum_of_x = 0\n    for i in x:\n        sum_of_x = sum_of_x + i\n    sum_of_y = 0\n    for j in y:\n        sum_of_y = sum_of_y + j\n    x_divided_y = []\n    for i in range(0,len(x)):\n        x_divided_y.append(x[i]/y[i])\n    return x_divided_y\n    \ndef time_converter(seconds):\n    '''\n    Write a python function to convert a number of seconds to days, hours, minutes and seconds.\n    '''\n    days = seconds // 86400\n    seconds = seconds % 86400\n    hours = seconds // 3600\n    seconds = seconds % 3600\n    minutes = seconds // 60\n    seconds = seconds % 60\n    return days, hours, minutes, seconds\n    \ndef print_sorted_dict(dictionary):\n    '''\n    Write a python function to print the dictionary in sorted order of keys.\n    '''\n    new_list = []\n    for i in dictionary:\n        new_list.append(i)\n    new_list.sort()\n    for i in new_list:\n        print(i, end = \" \")\n        print(dictionary[i])\n        \ndef even_number_divider(x):\n    '''\n    Write a python function to find the number of even numbers present in a given list of numbers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            count += 1\n    return count\n    \ndef remove_duplicates(x):\n    '''\n    Write a python function to remove duplicate elements from the list.\n    '''\n    for i in range(len(x)):\n        for j in range(i+1,len(x)):\n            if x[i] == x[j]:\n                x.remove(x[i])\n    return x\n    \ndef is_isogram(string):\n    '''\n    Write a python function to check whether the given string is an isogram or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    string_length = len(string)\n    count = {}\n    for i in string:\n        count[i] = count.get(i,0) + 1\n    if string_length == len(count):\n        return True\n    else:\n        return False\n    \ndef list_sort_count(x):\n    '''\n    Write a python function to sort the elements in a list and return the count of them in the sorted list.\n    '''\n    y = []\n    for i in x:\n        y.append(i)\n    y.sort()\n    count = 0\n    for i in y:\n        if i in x:\n            count += 1\n    return count\n    \ndef list_sort_count_v2(x):\n    '''\n    Write a python function to sort the elements in a list and return the count of them in the sorted list.\n    '''\n    y = []\n    for i in x:\n        y.append(i)\n    y.sort()\n    count = 0\n    for i in y:\n        for j in x:\n            if i == j:\n                count += 1\n    return count\n    \ndef number_length(n):\n    '''\n    Write a python function to count the length of numbers in a list.\n    '''\n    count = 0\n    while n > 0:\n        count = count + 1\n        n = n // 10\n    return count\n    \ndef palindrome_checker(string):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n            prime_factors.append(i)\n        i += 1\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n    \ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef hour_difference(start, end):\n    '''\n    Write a python function to find the hour difference between start and end time.\n    '''\n    start_hour = int(start.split(\":\")[0])\n    start_minute = int(start.split(\":\")[1])\n    end_hour = int(end.split(\":\")[0])\n    end_minute = int(end.split(\":\")[1])\n    hour_difference = abs(start_hour - end_hour) + (60 * abs(start_minute - end_minute))\n    return hour_difference\n    \ndef is_palindrome_v2(string):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef sum_array(array):\n    '''\n    Write a python function to calculate the sum of array elements.\n    '''\n    sum = 0\n    for i in array:\n        sum = sum + i\n    return sum\n    \ndef sum_array_v2(array):\n    '''\n    Write a python function to calculate the sum of array elements.\n    '''\n    sum = 0\n    for i in range(len(array)):\n        sum = sum + array[i]\n    return sum\n    \ndef reverse_word(string):\n    '''\n    Write a python function to reverse the words in a given string.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    words = []\n    for i in string:\n        if i == \" \":\n            words.append(",
        "num_ids": 46
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum+=i**4\n    print(sum)\n    \n    \nodd_num_sum(4)\n",
        "num_ids": 56
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 1\n    odd_numbers = []\n    while count < n+1: \n        if count%2 == 1: \n            odd_numbers.append(count**4)\n        count +=1\n    return sum(odd_numbers)\n",
        "num_ids": 63
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1,n+1) if i%2!= 0])\n",
        "num_ids": 29
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = list(range(1,n+1,2))\n    odd_nums_sum = 0\n    for i in range(len(odd_nums)):\n        odd_nums_sum += odd_nums[i]**4\n    return odd_nums_sum\n",
        "num_ids": 73
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    sum_odd_nums = 0\n    for i in range(1,n+1) :\n        if i%2 == 1 : \n            odd_nums.append(i)\n    for i in odd_nums :\n        sum_odd_nums = sum_odd_nums + i**4\n    print(\"The sum of fourth power of first n odd numbers :\", sum_odd_nums)\n",
        "num_ids": 107
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(input(\"Enter an integer : \"))\n    sum = 0\n    for i in range(1,n+1,1) :\n        if i % 2!= 0 :\n            sum = sum + i ** 4\n    print(\"The sum of fourth power of first {} odd numbers is {}\".format(n,sum))\n",
        "num_ids": 79
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    sum = 0\n    while num < n :\n        sum = sum + num**4\n        num = num + 2\n    return sum\nodd_num_sum(4)\n",
        "num_ids": 48
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    parenthesis = {'(':')','{':'}','[':']'}\n    if len(exp) == 1:\n        return 'Unbalanced'\n    for x in exp:\n        if x in parenthesis.keys():\n            stack.append(x)\n        else:\n            if len(stack) == 0:\n                return 'Unbalanced'\n            else:\n                last_element = stack.pop()\n                if parenthesis[last_element]!= x:\n                    return 'Unbalanced'\n    if len(stack)!= 0:\n        return 'Unbalanced'\n    return 'Balanced'\n",
        "num_ids": 150
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \"\"\"\n    :type expression: str\n    :rtype: bool\n    \"\"\"\n    open_brackets = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            open_brackets.append(i)\n        else:\n            if open_brackets:\n                open_brackets.pop()\n            else:\n                return False\n    return open_brackets == []\n",
        "num_ids": 102
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Write your code here\n    stack = []\n    brace_parentheses = {\n    '{':'}',\n    '[':']',\n    '(':')'\n    }\n    \n    exp_lst = deque(exp)\n    for i in exp_lst:\n        if i in brace_parentheses.keys():\n            stack.append(i)\n        elif i in brace_parentheses.values():\n            if len(stack) == 0:\n                return False\n            else:\n                last_item = stack.pop()\n                if brace_parentheses[last_item]!= i:\n                    return False\n    return len(stack) == 0\n",
        "num_ids": 161
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in \"{([\":\n            stack.append(i)\n        elif i == \")\":\n            if not stack or stack[-1]!= \"(\":\n                return False\n            else:\n                stack.pop()\n        elif i == \"}\":\n            if not stack or stack[-1]!= \"{\":\n                return False\n            else:\n                stack.pop()\n        elif i == \"]\":\n            if not stack or stack[-1]!= \"[\":\n                return False\n            else:\n                stack.pop()\n    return True if not stack else False\n",
        "num_ids": 153
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #SOLUTION 1\n    s = deque(list(exp))\n    valid_paranthesis = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    stack = deque()\n    for elem in s:\n        if elem in valid_paranthesis:\n            stack.append(elem)\n        else:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top == valid_paranthesis[elem]:\n                continue\n            else:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 139
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    opened = set('({[')\n    closed = set(')}]')\n    stack = []\n    for paren in exp:\n        if paren in opened:\n            stack.append(paren)\n        elif paren in closed:\n            pos = closed.index(paren)\n            if not len(stack):\n                return False\n            last_open_paren = stack.pop()\n            if (last_open_paren, paren) not in zip(reversed(stack), reversed(closed)):\n                return False\n    return not stack\n",
        "num_ids": 129
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if '(' not in exp:\n        return True\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack or i!= ')':\n                return False\n            stack.pop()\n    return not stack\n",
        "num_ids": 73
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # stack to store opening brackets\n    stack = deque()\n    # Dictionary to remember operators precedence\n    precedence = {\n        '^': 3,\n        '*': 3,\n        '/': 3,\n        '+': 2,\n        '-': 2,\n        '(': 1\n    }\n    # operator stack\n    opers = deque()\n    # bool to remember whether parentheses are balanced or not\n    flag = True\n    for i in exp:\n        if i == '(':\n            # push the open parenthesis to stack\n            stack.append(i)\n        elif i == ')':\n            # pop the parenthesis from stack, and check if\n            # it is balanced or not\n            if len(stack) == 0:\n                # return false if there is no open parenthesis\n                flag = False\n                break\n            else:\n                # remove open parenthesis from stack\n                stack.pop()\n        else:\n            # if the character is an operator, pop the\n            # topmost operator from operator stack\n            # and apply the operator on top two operands\n            # to calculate the result and push the result\n            # to operator stack.\n            if len(opers)!= 0:\n                operator = opers.pop()\n                # pop the topmost operand from operand stack\n                top_op = stack.pop()\n                # use top_op and operator to calculate\n                # the result and push it to the stack\n                if precedence.get(operator) > precedence.get(top_op):\n                    stack.append(operator)\n                    stack.append(top_op)\n                elif precedence.get(operator) == precedence.get(top_op):\n                    stack.append(operator)\n                    stack.append(top_op)\n                    stack.append(i)\n                else:\n                    flag = False\n                    break\n            else:\n                # push the character to operator stack\n                opers.append(i)\n    # Check if there is any operator left in operator stack\n    if len(opers)!= 0:\n        flag = False\n    return flag\n",
        "num_ids": 479
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    exp = exp + '+'\n    for i in exp:\n        if i == '(' or i == '{' or i == '[':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            if stack[len(stack)-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif i == '}':\n            if len(stack) == 0:\n                return False\n            if stack[len(stack)-1] == '{':\n                stack.pop()\n            else:\n                return False\n        elif i == ']':\n            if len(stack) == 0:\n                return False\n            if stack[len(stack)-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 227
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    is_balanced = True\n    \n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                is_balanced = False\n                break\n    \n    if stack and is_balanced:\n        is_balanced = False\n    return is_balanced\n",
        "num_ids": 96
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length = K\n    index = []\n    for i in range(0, len(test_str)):\n        if len(test_str[i:]) == length:\n            index.append(i)\n    \n    index = set(index)\n    return test_str.split()[index]\n",
        "num_ids": 73
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K > 0:\n        test_str = test_str.split()\n        k = len(test_str)\n        for i in range(0, k):\n            if len(test_str[i]) == K:\n                test_str.remove(test_str[i])\n        \n    return test_str\n",
        "num_ids": 78
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    from collections import Counter\n    counter = Counter(test_str.split(\" \"))\n    counter = dict(counter)\n    \n    for k in counter.keys():\n        if len(k) == K:\n            counter.pop(k)\n    \n    return counter\n",
        "num_ids": 65
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    #Solution 1\n    '''\n    O(n^2)\n    for i in range(len(test_str)):\n        test_str.remove(test_str[i])\n    return test_str\n",
        "num_ids": 44
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = []\n    words_removed = []\n    for x in test_str.split():\n        words.append(x)\n    for x in range(len(words)):\n        if len(words[x]) == K:\n            words_removed.append(words.pop(x))\n    return \" \".join(words_removed)\n",
        "num_ids": 85
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0:\n        return \"\"\n",
        "num_ids": 18
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    final_str = \"\"\n    for item in test_str.split():\n        if len(item)!= K:\n            final_str += \" \" + item\n    return final_str.strip()\n",
        "num_ids": 49
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(\" \")\n    new_str = []\n    for word in test_str:\n        if len(word) == K:\n            new_str.append(word)\n    return \" \".join(new_str)\n",
        "num_ids": 63
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in test_str.split(\" \"):\n        if len(i) == K:\n            test_str = test_str.replace(i, \"\")\n    return test_str\n    \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in test_str.split(\" \"):\n        if len(i) <= K:\n            test_str = test_str.replace(i, \"\")\n    return test_str\n",
        "num_ids": 47
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(\n        [w for w in test_str.split() if len(w)!= K])\n",
        "num_ids": 29
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    flag = False\n    for i in range(0,len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            print(i)\n            flag = True\n            break\n    if flag == True:\n        return i\n    else:\n        return None\n",
        "num_ids": 77
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # findall() - returns all matches as a list of strings\n    # string.find() - returns -1 if no match else returns the index of first match\n    # findall() - returns all matches as a list of strings\n    # re.findall(pattern,string) - returns a list of all matches\n    # re.finditer(pattern,string) - returns an iterator\n    # findall() - returns all matches as a list of strings\n    # re.finditer(pattern,string) - returns an iterator\n    m = re.finditer(pattern,text)\n    #for i in m:\n    #    print(i)\n    \n    \n    for i in m:\n        print(i)\n        #print(i.start())\n        #print(i.end())\n        #print(i.span())\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    r = re.finditer(pattern,text)\n    #print(r)\n    \n    for i in r:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re1(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    r = re.finditer(pattern,text)\n    #print(r)\n    \n    for i in r:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re7(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re8(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re9(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    fo",
        "num_ids": 28
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    for match in matches:\n        print(match.start(),match.end())\n",
        "num_ids": 35
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occur = re.finditer(pattern, text)\n    return [occ.span() for occ in occur]\n",
        "num_ids": 29
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text.count(pattern)>0:\n        return re.findall(pattern,text)\n    else:\n        return None\n",
        "num_ids": 34
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    import re\n    result = re.findall(pattern,text)\n    if len(result) == 0:\n        return None\n    else:\n        return(result[0][0],result[0][1])\n",
        "num_ids": 53
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #if text == None or pattern == None:\n    #    return None\n    #if len(text) == len(pattern) == 0:\n    #    return None\n",
        "num_ids": 42
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # pattern=\"abc\"\n    # text=\"abacaba\"\n    # occurrence=text.find(pattern)\n    # print(occurrence)\n    # i=0\n    # for i in range(len(text)-len(pattern)+1):\n    #     j=0\n    #     for j in range(len(pattern)):\n    #         if(text[i+j]!=pattern[j]):\n    #             break\n    #     if(j==len(pattern)-1):\n    #         print(i)\n    #         print(i+len(pattern)-1)\n    #         return pattern\n",
        "num_ids": 148
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \ndef find_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \ndef find_all_substring(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \ndef find_all_substring_non_overlapping(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \ndef find_substring_non_overlapping(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_substring_overlapping(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_non_overlapping_overlap(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_overlap(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_non_overlapping_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_non_overlapping_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_non_overlapping_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_non_overlapping_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_non_overlapping_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_non_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_repeat(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return None if there is no match.\n    '''\n    indices = re.finditer(pattern,text)\n    for i in indices:\n        yield (i.start(), i.end() - 1)\n        \n        \n        \n        \n        \n        \ndef find_all_substring_overlapping_repeat(text,pattern):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    pattern_index = re.finditer(pattern,text)\n    print(pattern_index)\n    if pattern_index:\n        for item in pattern_index:\n            if item.group():\n                print(item.start())\n                print(item.end())\n                print(item.span())\n                print(item.group())\n                print(item.string)\n                print(text[item.start():item.end()])\n                print(item.start())\n                print(item.start())\n                print(text[item.start():item.end()])\n    \n    else:\n        print(None)\noccurance_substring(\"1231213\",\"12\")\n",
        "num_ids": 161
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums == None:\n        return False\n    nums = list(nums)\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(i % 2 == 1 for i in range(len(nums)))\n",
        "num_ids": 22
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(0, len(nums)):\n        if i % 2 == 1:\n            odd.append(nums[i])\n    return odd\n",
        "num_ids": 46
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            print(\"False\")\n            break\n    else:\n        print(\"True\")\n",
        "num_ids": 54
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(x%2!= 0 for x in nums)\n",
        "num_ids": 19
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_check = []\n    for i in range(0,len(nums),2):\n        if i == 0:\n            if nums[i]%2 == 0:\n                odd_check.append(True)\n            else:\n                odd_check.append(False)\n        elif i == 1:\n            if nums[i]%2 == 0:\n                odd_check.append(True)\n            else:\n                odd_check.append(False)\n        else:\n            if nums[i]%2 == 0:\n                odd_check.append(True)\n            else:\n                odd_check.append(False)\n    return odd_check\n",
        "num_ids": 161
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    nums_odd = []\n    for i in range(0,len(nums)):\n        if (nums[i] % 2!= 0):\n            nums_odd.append(nums[i])\n    for i in range(0,len(nums_odd)):\n        if (nums_odd[i] % 2!= 0):\n            count += 1\n    if (count == 0):\n        return False\n    else:\n        return True\n",
        "num_ids": 118
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    odd = []\n    for i in range(len(nums)):\n        if i%2!= 0:\n            odd.append(nums[i])\n    for j in range(len(odd)):\n        if odd[j] % 2!= 0:\n            count += 1\n    if count == 0:\n        print(\"False\")\n    else:\n        print(\"True\")\n",
        "num_ids": 99
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = []\n    for i in range(0, len(nums), 2):\n        if (nums[i] % 2 == 1):\n            odds.append(nums[i])\n    if (odds):\n        return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiou':\n            count += 1\n        if test_str[i] == test_str[i + 1]:\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    prev_vowel =''\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and prev_vowel not in vowels:\n            count += 1\n            prev_vowel = test_str[i]\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    res = 0\n    for char in test_str:\n        if char in 'aeiou':\n            res += 1\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    counter = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0:\n                if test_str[i+1] in vowels:\n                    counter += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in vowels:\n                    counter += 1\n            else:\n                if test_str[i-1] in vowels:\n                    if test_str[i+1] in vowels:\n                        counter += 1\n    return counter",
        "num_ids": 159
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    cnt = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u']:\n            cnt += 1\n    return cnt\n",
        "num_ids": 55
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return len([i for i in test_str if i in \"aeiou\"])\n",
        "num_ids": 23
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = \"aeiou\"\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    \n    # str_lower = test_str.lower()\n    # return len([letter for letter in str_lower if letter in vowels])\n",
        "num_ids": 63
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    from collections import Counter\n    return Counter(test_str.lower())['a'] + Counter(test_str.lower())['e'] + Counter(test_str.lower())['i'] + Counter(test_str.lower())['o'] + Counter(test_str.lower())['u']\n",
        "num_ids": 70
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    for elem in arr:\n        if elem not in result:\n            result += elem\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8]\n    sum = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 72
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = set(arr)\n    y = sum(x)\n    return y\n",
        "num_ids": 22
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    sum = 0\n    seen = set()\n    for num in arr:\n        sum = sum + num\n        if num in seen:\n            continue\n        else:\n            seen.add(num)\n",
        "num_ids": 55
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_so_far = 0\n    unique_elements = {}\n",
        "num_ids": 19
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            total += i\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) < 1:\n        return -1\n",
        "num_ids": 17
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_of_numbers = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] not in arr[i+1:]:\n            sum_of_numbers += arr[i]\n        i += 1\n    return sum_of_numbers\n",
        "num_ids": 69
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    from collections import Counter\n    c = Counter(arr)\n    sum = 0\n    for key, value in c.items():\n        if value == 1:\n            sum = sum + key\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #code here\n    count_map = {}\n    for i in arr:\n        if i not in count_map:\n            count_map[i] = 1\n        else:\n            count_map[i] += 1\n    sum = 0\n    for key in count_map:\n        if count_map[key] == 1:\n            sum += key\n    print(sum)\n",
        "num_ids": 92
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    result = []\n    for k,v in groups:\n        result.append(list(v))\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    d = {}\n    for i in list1:\n        d[i] = 1\n    for i in d:\n        result.append([i])\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = list(set(list1))\n    for k, g in groupby(list1):\n        yield (list(g))\ndef pack_consecutive_duplicates_using_dict(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    dict = {}\n    for elem in list1:\n        if elem in dict:\n            dict[elem] += 1\n        else:\n            dict[elem] = 1\n    print(dict)\n    for k, g in groupby(list(dict.values())):\n        yield (list(g))\n",
        "num_ids": 78
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #starts from the second element.\n    list1 = list(list1)\n    duplicates = []\n    for key, group in groupby(list1):\n        #group by the elements in the list\n        if key == None:\n            #returns the current element\n            duplicates.append([group.next()])\n    #append the rest of the elements\n    return duplicates + list(group)\n",
        "num_ids": 99
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    list1 = sorted(list1)\n    list1 = [(key, list1.count(key)) for key in list1]\n    list1 = sorted(list1, key=lambda x: x[1])\n    count = 0\n    for i, j in list1:\n        count += j\n        if count < 2:\n            new_list.append([i, j])\n        else:\n            new_list.append([i])\n    return new_list\n",
        "num_ids": 118
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    n=[]\n    for k,g in groupby(list1):\n        n.append([k,list(g)])\n    return n\n",
        "num_ids": 37
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) < 2:\n        return list1\n    else:\n        return [[list1[i],list1[i+1]] for i in range(0, len(list1), 2)]\n",
        "num_ids": 52
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1)<=1:\n        return list1\n    else:\n        current_item = list1[0]\n        list1_sublist = []\n        for element in list1:\n            if element == current_item:\n                list1_sublist.append(element)\n            else:\n                if len(list1_sublist)>1:\n                    pack_sublist = pack_consecutive_duplicates(list1_sublist)\n                    list1_sublist = list(pack_sublist)\n                    list1_sublist.append(element)\n                else:\n                    list1_sublist = list1_sublist.append(element)\n                    list1_sublist.append(element)\n                current_item = element\n        return list1_sublist\n",
        "num_ids": 189
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    final_list = []\n    final_list.append(list1[0])\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i-1]:\n            final_list[-1] += list1[i]\n        else:\n            final_list.append(list1[i])\n    return final_list\n",
        "num_ids": 91
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    sublist = []\n    for key, group in groupby(list1):\n        sublist.append(list(group))\n        if len(sublist[-1]) == 1:\n            if sublist[-1][0] == sublist[-2][0]:\n                list2.append(sublist[-1][0])\n            else:\n                list2.append(sublist[-1][0])\n                sublist = []\n    list2.extend(sublist)\n    return list2\n",
        "num_ids": 128
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for i in list1:\n        if tuple(i) not in dictionary:\n            dictionary[tuple(i)] = 1\n        else:\n            dictionary[tuple(i)] += 1\n    return dictionary\n",
        "num_ids": 59
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[tuple(list1[i])] = d.get(tuple(list1[i]), 0) + 1\n    return d\nprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))",
        "num_ids": 90
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for x in range(len(list1)):\n        for y in range(len(list1)):\n            if x!= y:\n                if list1[x] == list1[y]:\n                    if list1[x] in unique_dict:\n                        unique_dict[list1[x]] += 1\n                    else:\n                        unique_dict[list1[x]] = 1\n    print(unique_dict)\n    print(len(list(unique_dict)))\n",
        "num_ids": 120
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new = []\n    k = 0\n    dictionary = {}\n    for i in range(len(list1)):\n        if list1[i] not in new:\n            new.append(list1[i])\n    for i in range(len(new)):\n        dictionary[new[i]] = new.count(new[i])\n    return dictionary\n",
        "num_ids": 88
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if list1==[]:\n        return {}\n    else:\n        return dict((key,list1.count(key)) for key in set(list1))\n",
        "num_ids": 40
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for item in list1:\n        if type(item) == list:\n            for i in item:\n                dictionary.setdefault(i,0)\n                dictionary[i] += 1\n        else:\n            dictionary.setdefault(item,0)\n            dictionary[item] += 1\n    return dictionary\n",
        "num_ids": 83
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_of_tuple_lists = []\n    for i in range(len(list1)):\n        sublist = []\n        for j in range(len(list1)):\n            if j < i:\n                sublist.append(tuple(list1[j]))\n            elif j == i:\n                pass\n            else:\n                pass\n        list_of_tuple_lists.append(sublist)\n    unique_list = []\n    for i in range(len(list_of_tuple_lists)):\n        if list_of_tuple_lists[i] not in unique_list:\n            unique_list.append(list_of_tuple_lists[i])\n    counts_dict = {}\n    for i in range(len(unique_list)):\n        key = unique_list[i][0]\n        if key not in counts_dict:\n            counts_dict[key] = 1\n        else:\n            counts_dict[key] += 1\n    return(counts_dict)\n",
        "num_ids": 247
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublist = {}\n    for i in list1:\n        if i not in unique_sublist:\n            unique_sublist[i] = 1\n        else:\n            unique_sublist[i] += 1\n    return unique_sublist\n",
        "num_ids": 62
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    d = {}\n    for i in list1:\n        if i not in d:\n            d[tuple(i)] = 1\n        else:\n            d[tuple(i)] += 1\n    return d\n    \n    \nprint(unique_sublists([[1, 2], [1, 2, 3, 4], [1, 2, 3, 4, 5]]))\n",
        "num_ids": 93
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_combinations=[]\n    for i in test_list:\n        for j in combinations(i,2):\n            test_combinations.append(j)\n    return test_combinations\n",
        "num_ids": 48
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] + test_list[j][1] == test_list[i][0] + test_list[j][0]:\n                yield (test_list[i][0], test_list[i][1], test_list[j][0], test_list[j][1])\n",
        "num_ids": 109
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n",
        "num_ids": 16
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    s = sum(test_list)\n    result_list = []\n    for i in range(1,len(test_list)+1):\n        result_list = result_list + list(combinations(test_list,i))\n    result_list = [(i,sum(i)) for i in result_list]\n    result_list = sorted(result_list,key=lambda x:x[1])\n    result_list = [(x[0],i) for i,x in enumerate(result_list) ]\n    print('\\n'.join([str(i) for i in result_list]))\n",
        "num_ids": 157
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initializing combinations list\n    combinations_list = []\n",
        "num_ids": 17
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for element in test_list:\n        result.extend(combinations(element, 2))\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    lst = list(combinations(test_list, 2))\n    print(lst)\n    print(sorted(lst))\n    print(set(lst))\n",
        "num_ids": 44
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # code here\n    for i in combinations(test_list,3):\n        print(i)\n",
        "num_ids": 26
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 1:\n        return {(test_list[0],):[test_list[0]]}\n    soln_set = set()\n    for tup in combinations(test_list, r=2):\n        curr_sum = tup[0] + tup[1]\n        if curr_sum in soln_set:\n            soln_set.add(curr_sum)\n        else:\n            soln_set.add(curr_sum)\n            soln_set.add((curr_sum, tup[0]))\n            soln_set.add((curr_sum, tup[1]))\n    return soln_set\n",
        "num_ids": 169
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    from itertools import combinations\n    return combinations(test_list,2)\n",
        "num_ids": 21
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    if n == 0 or n == 1 : \n        return count\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            count += 2\n    if (int(math.sqrt(n)) + 1) ** 2 == n :\n        count -= 1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            divisors = divisors + 2\n        else :\n            divisors = divisors + 1\n    if divisors % 2 == 0:\n        return True\n    else :\n        return False\n",
        "num_ids": 89
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            count += 2\n    if count == 2 : \n        return True\n    else : \n        return False\n",
        "num_ids": 66
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return False\n    n = int(n)\n    divisors = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisors = divisors + 1\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    for i in range(2,int(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            divisors = divisors + 2\n        if (i*i < n) : \n            divisors = divisors + 1\n    if divisors % 2 == 0 : \n        print(\"Yes, the count of divisors is even\") \n    else : \n        print(\"No, the count of divisors is odd\") \n",
        "num_ids": 127
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n==1):\n        return 0\n    count = 1\n    for i in range(2, math.ceil(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    d = int(n)\n    if(d == 1):\n        return 0\n    s = 1\n    for i in range(2, int(math.sqrt(d))+1):\n        if(d%i == 0):\n            s = s + i + d/i\n    if(int(n/s)!= s):\n        return int(n/s) + 1\n    else:\n        return int(n/s)\n",
        "num_ids": 106
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 1\n    if n == 1: \n        return False\n    for i in range(2, int(math.sqrt(n) + 1)): \n        if n % i == 0: \n            count += 2\n    return True if count == n else False\n",
        "num_ids": 67
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            count += 1\n",
        "num_ids": 37
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i <= math.sqrt(n):\n        if n%i==0:\n            count = count + 2\n        i = i + 1\n    if count%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    i = 0\n    odd = []\n    even = []\n    for j in range(len(arr)):\n        if (j % 2) == 0:\n            even.append(arr[j])\n        else:\n            odd.append(arr[j])\n    ans = 0\n    for k in range(len(odd)):\n        ans += sum(odd[k:])\n    return ans\n",
        "num_ids": 96
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        if i % 2!= 0:\n            ans += arr[i]\n    return ans\n",
        "num_ids": 46
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    i = 0\n    total = 0\n    while(i < n):\n        j = i + 1\n        total = 0\n        while(j < n and arr[j] % 2!= 0):\n            total += arr[j]\n            j += 1\n        i = j\n        print(total)\n",
        "num_ids": 82
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n",
        "num_ids": 7
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 2, len(arr) + 1, 2):\n            s += sum(arr[i:j])\n    return s\n",
        "num_ids": 57
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)%2 == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    odd_length = 0\n",
        "num_ids": 16
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    def odd_length_sum(arr):\n        '''\n        Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n        '''\n        if arr is None or arr == [] or len(arr) == 1:\n            return 0\n        summ = 0\n        i = 0\n        while i < len(arr):\n            if i == 0 or i == len(arr)-1:\n                summ += arr[i]\n                i += 1\n            elif i%2 == 1:\n                summ += arr[i]\n                i += 1\n            else:\n                i += 1\n        return summ\n",
        "num_ids": 110
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    N = len(arr)\n    ans = 0\n    for i in range(N):\n        for j in range(i+1, N+1):\n            if j%2!= 0:\n                ans += sum(arr[i:j])\n    return ans\n",
        "num_ids": 65
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    arr_size = len(arr)\n    odd_sum = 0\n    for i in range(1,arr_size):\n        if i%2==1:\n            odd_sum += sum(arr[:i])\n",
        "num_ids": 56
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_ = float(r)\n    g_ = float(g)\n    b_ = float(b)\n    if r_ == 0 and g_ == 0 and b_ == 0:\n        return 0, 0, 0\n    r_ /= 255.0\n    g_ /= 255.0\n    b_ /= 255.0\n    max_ = max(r_, g_, b_)\n    min_ = min(r_, g_, b_)\n    diff_ = max_ - min_\n    delta = max_ - min_\n    if max_ == r_:\n        h = 0.0 + ((g_ - b_) / delta)\n    elif max_ == g_:\n        h = 1.0 + ((b_ - r_) / delta)\n    else:\n        h = 2.0 + ((r_ - g_) / delta)\n    h *= 60\n    if h < 0:\n        h += 360\n    elif h > 360:\n        h -= 360\n    if diff_ == 0:\n        s = 0\n    else:\n        s = delta / diff_\n    v = max_\n    return h, s, v\n",
        "num_ids": 281
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n",
        "num_ids": 27
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r/255)\n    g = float(g/255)\n    b = float(b/255)\n",
        "num_ids": 32
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #first convert rgb to hsv\n    def hsv_to_rgb(h, s, v):\n        if s == 0.0:\n            return v, v, v\n        i = int(h*6.) #getting the index of the hsv value\n        f = (h*6.)-i\n        p = v*(1.-s)\n        q = v*(1.-s*f)\n        t = v*(1.-s*(1.-f))\n        if i%6 == 0:\n            r, g, b = v, t, p\n        elif i==1:\n            r, g, b = q, v, p\n        elif i==2:\n            r, g, b = p, v, t\n        elif i==3:\n            r, g, b = p, q, v\n        elif i==4:\n            r, g, b = t, p, v\n        else:\n            r, g, b = v, p, q\n        return int(r), int(g), int(b)\n    #convert hsv\n    def rgb_to_hsv(r, g, b):\n        max_color = max(r, g, b)\n        min_color = min(r, g, b)\n        delta = max_color - min_color\n        if delta == 0:\n            h = 0\n        elif max_color == r:\n            h = (60 * ((g-b)/delta)) % 360\n        elif max_color == g:\n            h = (60 * ((b-r)/delta) + 120) % 360\n        else:\n            h = (60 * ((r-g)/delta) + 240) % 360\n        if delta == 0:\n            s = 0\n        else:\n            s = delta/max_color\n        v = max_color\n        return int(h), int(s), int(v)\n    r, g, b = rgb_to_hsv(r, g, b)\n    return hsv_to_rgb(r, g, b)\n",
        "num_ids": 494
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return (h, s, v)\n",
        "num_ids": 192
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n",
        "num_ids": 23
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r / 255)\n    g = float(g / 255)\n    b = float(b / 255)\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    d = cmax - cmin\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * (((g - b) / d) % 6))\n    elif cmax == g:\n        h = (60 * (((b - r) / d) + 2))\n    else:\n        h = (60 * (((r - g) / d) + 4))\n    if cmax == 0:\n        s = 0\n    else:\n        s = d / cmax\n    v = cmax\n    return h, s, v\n",
        "num_ids": 199
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax-cmin\n    h = 0.0\n    if delta == 0:\n        return 0.0, 0.0, 0.0\n    elif cmax == r:\n        h = (60.0*(g-b))/delta\n    elif cmax == g:\n        h = (60.0 + (60.0*(b-r)))/delta\n    else:\n        h = (60.0*(r-g))/(delta) + 360.0\n    s = 0.0\n    v = cmax\n    return h, s, v\n",
        "num_ids": 170
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = 60 * (((g-b)/df) % 6)\n    elif mx == g:\n        h = 60 * (((b-r)/df) + 2)\n    elif mx == b:\n        h = 60 * (((r-g)/df) + 4)\n    s = mx\n    v = mx\n    return (h, s, v)\n",
        "num_ids": 167
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx) * 100\n    v = mx * 100\n    return h, s, v\n",
        "num_ids": 202
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n",
        "num_ids": 16
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    \n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n",
        "num_ids": 62
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(0,len(list1)):\n        if list1[i]%2==0:\n            product*=list1[i]\n    for i in range(0,len(list1)):\n        if list1[i]%2!=0:\n            product*=list1[i]\n    return product\n",
        "num_ids": 88
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even = even*list1[i]\n        else:\n            odd = odd*list1[i]\n    return even,odd\n",
        "num_ids": 70
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1)==0:\n        return None\n    else:\n        list1.sort()\n        even_num=[]\n        odd_num=[]\n        for i in list1:\n            if i%2==0:\n                even_num.append(i)\n            else:\n                odd_num.append(i)\n        return (even_num[0]*odd_num[0],even_num[-1]*odd_num[-1])\n",
        "num_ids": 115
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n",
        "num_ids": 16
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    result = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    if len(even) > len(odd):\n        result = even\n    else:\n        result = odd\n    for i in range(len(result)):\n        result[i] = result[i] * result[i]\n    return result\n",
        "num_ids": 127
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    n = len(list1)\n    even = []\n    odd = []\n    for i in range(n):\n        if list1[i]%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    odd.sort(reverse = True)\n    print(even, odd)\n    result = 1\n    for i in range(len(even)):\n        result = result * even[i]\n    for i in range(len(odd)):\n        result = result * odd[i]\n    return result\n    \nlist1 = [3, 4, 5, 10, 100]\nprint(mul_even_odd(list1))\n",
        "num_ids": 170
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(\"List of even numbers are:\", even_list)\n    print(\"List of odd numbers are:\", odd_list)\n    print(\"Product of even and odd numbers is:\", product_of_even_odd(even_list,odd_list))\n",
        "num_ids": 116
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    even_prod = 1\n    odd_prod = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_numbers.append(i)\n            even_prod *= i\n        else:\n            odd_numbers.append(i)\n            odd_prod *= i\n    print(f\"Even numbers in list are: {even_numbers}\\nEven product is: {even_prod}\")\n    print(f\"Odd numbers in list are: {odd_numbers}\\nOdd product is: {odd_prod}\")\n    print(f\"Even and Odd product is: {even_prod * odd_prod}\")\n",
        "num_ids": 181
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(\",\")))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = test_str.strip()\n    test_list = test_tuple.split()\n    # test_list = tuple(test_tuple.split())\n    result_list = []\n    for item in test_list:\n        result_list.append(int(item))\n    return tuple(result_list)\n",
        "num_ids": 81
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(\"(\",\"\")\n    test_str = test_str.replace(\")\",\"\")\n    test_str = test_str.replace(\",\",\"\")\n    return tuple(map(int,test_str.split()))\n",
        "num_ids": 63
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str\n    lst = tuple_str.split(',')\n    int_tuple = map(int,lst)\n    return int_tuple\n",
        "num_ids": 46
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str[1:-1]\n    # print(test_str)\n    test_str = test_str.split(', ')\n    # print(test_str)\n    test_tuple = tuple(int(i) for i in test_str)\n    # print(test_tuple)\n    return test_tuple\n",
        "num_ids": 86
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(e) for e in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp = test_str.replace(\"(\",\"\").replace(\")\",\"\")\n    tup = tuple(temp.split(','))\n    return tup\n",
        "num_ids": 38
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if len(test_str) == 1:\n        test_str = test_str[0].split(',')\n        return tuple([int(x) for x in test_str])\n    return tuple([int(x) for x in test_str])\n",
        "num_ids": 62
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = str(test_str)\n    return tuple(map(int, test_str.split(',')))\n",
        "num_ids": 31
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Remove the redundant spaces\n    test_str = test_str.replace(\" \",\"\")\n    \n    # Convert the tuple string to list\n    test_list = test_str.split(',')\n    \n    # Convert the list to int tuple\n    tuple_int = tuple(int(x) for x in test_list)\n    \n    return tuple_int\n    \n",
        "num_ids": 92
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == []:\n        a.append(x)\n        return\n    for i in range(len(a)):\n        if a[i] == x:\n            a.insert(i, x)\n            return\n        if a[i] > x:\n            a.insert(i, x)\n            return\n    a.append(x)\n    return\n",
        "num_ids": 89
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)-1\n    if len(a) == 0:\n        return hi\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return lo\n    \n    \n",
        "num_ids": 97
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    if x <= a[0]:\n        return 0\n    if x >= a[-1]:\n        return len(a)\n    pos = bisect.bisect(a, x)\n    return pos\n",
        "num_ids": 64
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    else:\n        return i\n",
        "num_ids": 42
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a)\n    mid = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n",
        "num_ids": 70
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == a[mid]:\n            return mid\n        elif x > a[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n",
        "num_ids": 80
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    length = len(a)\n    if length == 0:\n        return length\n    if x <= a[0]:\n        return 0\n    if x >= a[length - 1]:\n        return length\n    i = 0\n    j = length - 1\n    while i < j:\n        m = (i + j) // 2\n        if x >= a[m]:\n            i = m + 1\n        else:\n            j = m\n    return i\n",
        "num_ids": 108
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x > a[len(a)-1]:\n        return len(a)\n    for i in range(len(a)-1):\n        if a[i] < x <= a[i+1]:\n            return i\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    for i in range(len(a)-1):\n        if x > a[i] and x <= a[i+1]:\n            return i\ndef find_kth(a, k):\n    '''\n    Write a function to find the kth smallest element in a\n    '''\n    left = 0\n    right = len(a)-1\n    while left < right:\n        mid = (left+right)//2\n        if a[mid] > a[right]:\n            left = mid+1\n        elif a[mid] < a[right]:\n            right = mid\n        else:\n            right -= 1\n    return a[left]\n",
        "num_ids": 87
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n",
        "num_ids": 82
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1\n    \nif __name__ == '__main__':\n    print(\"Example:\")\n    print(right_insertion([1,3,5,6], 5))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert right_insertion([1,3,5,6], 5) == 2\n    assert right_insertion([1,3,5,6], 2) == 1\n    assert right_insertion([1,3,5,6], 7) == 4\n    assert right_insertion([1,3,5,6], 0) == 0\n    assert right_insertion([1,3,5,6], 8) == 5\n    assert right_insertion([1], 1) == 0\n    assert right_insertion([], 1) == 0\n    assert right_insertion([1,1], 1) == 1\n    assert right_insertion([1,1], 2) == 1\n    assert right_insertion([1,1], 3) == 2\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\"",
        "num_ids": 303
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('ab{3}')\n    result = pattern.search(text)\n    print('Matched text:', result.group())\n    return result.group()\n",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('ab', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_three = re.findall(r'ab.*b', text)\n    return match_three\n",
        "num_ids": 27
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = re.compile(r'(a)+b{3}')\n    results = regex.finditer(text)\n    for result in results:\n        print(result.group())\n    return results\n",
        "num_ids": 52
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab*b', text)\n",
        "num_ids": 17
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}b')\n    result = pattern.search(text)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r\"a\\bb\\bbb\", text):\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Your code here\n    return re.search(r'a{3}b', text)\nprint(text_match_three(\"I am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_three(\"i am testing for the a followed by three b in a string\"))\nprint(text_match_thre",
        "num_ids": 2011
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = re.compile('ab')\n    if pat.search(text):\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_list) == list and type(test_str) == str:\n        return tuple(test_str)\n    else:\n        return print(f'{type(test_list)} or {type(test_str)} is not a list or string')\n",
        "num_ids": 65
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n    return tuple(test_list)\n",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str.split(','))\n    \ndef tuple_length(tuple1):\n    '''\n    Write a function that returns the length of the given tuple.\n    '''\n    return len(tuple1)\n    \ndef tuple_1(tuple1):\n    '''\n    Write a function that returns the first element of the given tuple.\n    '''\n    return tuple1[0]\n    \ndef tuple_2(tuple1):\n    '''\n    Write a function that returns the last element of the given tuple.\n    '''\n    return tuple1[-1]\n    \ndef tuple_3(tuple1):\n    '''\n    Write a function that returns all but the first and last element of the given tuple.\n    '''\n    return tuple1[1:-1]\n    \ndef tuple_4(tuple1):\n    '''\n    Write a function that reverses the given tuple.\n    '''\n    return tuple1[::-1]\n    \ndef tuple_5(tuple1):\n    '''\n    Write a function that finds the index of the first element of the given tuple that matches the given search string.\n    '''\n    tuple1 = tuple1.split(',')\n    for i, j in enumerate(tuple1):\n        if j == test_str:\n            return i\n",
        "num_ids": 42
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split())\n    new_tuple = tuple(test_list)\n    new_tuple = tuple(test_str.split() + test_list)\n",
        "num_ids": 50
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    new_tuple = new_tuple + tuple(test_list)\n    new_tuple = new_tuple + (test_str,)\n    return new_tuple\n",
        "num_ids": 52
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    a_tuple = tuple(test_str)\n    a_list = test_list\n    a_new_tuple = a_tuple, a_list\n    return a_new_tuple\n",
        "num_ids": 50
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Your code here\n    new_tuple = (test_str, *test_list)\n    return new_tuple\n",
        "num_ids": 32
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums = sorted(nums)\n    return all(num%2 == 0 for index,num in enumerate(nums) if index%2 == 0)\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Your code here\n    for i in range(len(nums)):\n        if i%2!=0:\n            print('This index is not even',i)\n            return\n        else:\n            if nums[i]%2!=0:\n                print('This index contains odd number',i)\n            else:\n                continue\n        \n",
        "num_ids": 85
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = []\n    for i in range(len(nums)):\n        if i%2==0:\n            even_index.append(nums[i])\n    if len(even_index)==0:\n        return 'No even index contains even numbers of the list.'\n    else:\n        return even_index\n",
        "num_ids": 80
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2 == 0 and nums[i]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            evens.append(nums[i])\n    if len(evens) == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 67
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        return\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            remove_nested(test_tup[i])\n    if type(test_tup)!= tuple:\n        return test_tup\n",
        "num_ids": 82
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    remove_list = []\n    remove_list.append(test_tup)\n    for i in remove_list:\n        if type(i) == tuple:\n            remove_list.remove(i)\n    return tuple(remove_list)\n",
        "num_ids": 60
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i][0]!= test_tup[i][1]:\n            test_tup.pop(i)\n    return test_tup\n",
        "num_ids": 58
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # remove tuples\n    for x in test_tup:\n        if type(x) == tuple:\n            remove_nested(x)\n        else:\n            # add elements\n            test_tup += x\n    return test_tup\n",
        "num_ids": 61
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: x[0]!= test_tup[0], test_tup))\n",
        "num_ids": 30
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    count = 0\n    tup_to_remove = ()\n    for i in test_tup:\n        if isinstance(i, tuple):\n            count += 1\n            tup_to_remove = i\n    while count!= 0:\n        test_tup.remove(tup_to_remove)\n        count -= 1\n    return test_tup\n",
        "num_ids": 88
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return_list = []\n    for i in test_tup:\n        if type(i) == tuple:\n            return_list.append(i)\n        else:\n            return_list.append(i)\n    return tuple(return_list)\n",
        "num_ids": 62
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[:2]\n    # print(test_tup)\n",
        "num_ids": 23
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = test_tup.replace(\"(\",\"\")\n    test_tup = test_tup.replace(\")\",\"\")\n    test_tup = test_tup.split(\",\")\n    return tuple(test_tup)\n",
        "num_ids": 62
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup\n    else:\n        return (test_tup[0], remove_nested(test_tup[1:]))\n",
        "num_ids": 50
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count=0\n    for i in input_list:\n        if type(i)==list:\n            list_count+=1\n    return list_count\n",
        "num_ids": 41
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return input_list.count([]), input_list.count([\"\"])\n",
        "num_ids": 22
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n        else:\n            continue\n    return count\nprint(count_list([1,2,3,[4,5],6,[7],8,[9,10],11]))\n",
        "num_ids": 72
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for x in input_list:\n        if type(x)==list:\n            count+=1\n    return count",
        "num_ids": 34
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return input_list.count(input_list)\n",
        "num_ids": 15
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    print(count)\n",
        "num_ids": 46
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    if len(input_list) == 0:\n        return list_count\n    for i in input_list:\n        if type(i) == list:\n            list_count += 1\n    return list_count\n",
        "num_ids": 59
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == type([]):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0, len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)\n    '''\n    An inbuilt function in python to do this task.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    s = 0\n    e = len(arr)-1\n    mid = e//2\n",
        "num_ids": 23
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return None\n    mid = (0+len(arr))//2\n    if x == arr[mid]:\n        return mid\n    if x == arr[mid-1]:\n        return mid-1\n    if x == arr[mid+1]:\n        return mid+1\n    if x < arr[mid]:\n        return last(arr[:mid],x)\n    if x > arr[mid]:\n        return last(arr[mid:],x)\n",
        "num_ids": 150
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    size=len(arr)\n    low=0\n    high=size-1\n    while low<=high:\n        mid=(low+high)/2\n        if arr[mid]==x:\n            if mid==size-1 or arr[mid+1]<x:\n                return mid\n            else:\n                low=mid+1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return -1\n",
        "num_ids": 116
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr)-1\n    if arr[len(arr)//2] == x:\n        return len(arr)//2\n    \n    lo = 0\n    hi = len(arr)\n    \n    while lo<=hi:\n        mid = (lo+hi)//2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            hi = mid-1\n        elif arr[mid]>x:\n            hi = mid-1\n        else:\n            lo = mid+1\n    return -1\n",
        "num_ids": 178
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return -1\n    if arr==[x]:\n        return 0\n    if x>arr[len(arr)-1]:\n        return len(arr)\n    if x<arr[0]:\n        return 0\n    low,high=0,len(arr)-1\n    while low<high:\n        mid=(low+high)//2\n        if x>arr[mid]:\n            low=mid+1\n        elif x<arr[mid]:\n            high=mid-1\n        else:\n            if mid==0 or arr[mid-1]!=x:\n                return mid\n            else:\n                high=mid-1\n    return low\n",
        "num_ids": 162
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    s=0\n    e=l-1\n    while s<e:\n        mid=(s+e)//2\n        if arr[mid]==x:\n            break\n        if x<arr[mid]:\n            e=mid-1\n        else:\n            s=mid+1\n    return e\n",
        "num_ids": 83
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    lo=0\n    hi=n-1\n    while lo<=hi:\n        mid=(lo+hi)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            lo=mid+1\n        else:\n            hi=mid-1\n    return -1\n",
        "num_ids": 88
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    h = len(arr)-1\n    while l<=h:\n        mid = (l+h)//2\n        if x == arr[mid]:\n            return mid\n        elif x>arr[mid]:\n            l = mid+1\n        else:\n            h = mid-1\n    return -1\n",
        "num_ids": 81
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if len(arr)==1:\n        return 0 if arr[0]==x else -1\n    mid=len(arr)//2\n    if x==arr[mid]:\n        return mid\n    if x>arr[mid]:\n        return last(arr[mid+1:],x)\n    if x<arr[mid]:\n        return last(arr[:mid],x)\n",
        "num_ids": 108
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a[a-zA-Z]+b$')\n    result = pattern.match(text)\n    print(result)\n    return result!= None\n",
        "num_ids": 49
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return bool(re.match(r'a[a-z0-9]*b', text))\n",
        "num_ids": 27
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    # match the pattern a.+?b\n    pattern = re.compile(r'a.+?b')\n    #search for the pattern in the string\n    result = pattern.search(text)\n",
        "num_ids": 52
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    matches = re.finditer(r'\\ba+?b', text)\n    return [match.start(0) for match in matches]\n",
        "num_ids": 37
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*?b\"\n    x = re.match(pattern, text)\n    print(x.group())\n    print(x.span())\n",
        "num_ids": 41
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print('\\n')\n    print(text_starta_endb.__doc__)\n    print('\\n')\n    pattern = r\"^a.*b$\"\n    result = re.search(pattern,text)\n    if result:\n        print('Match found: {}'.format(result.group()))\n    else:\n        print('No Match Found')\n",
        "num_ids": 89
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #pass\n    pattern = re.compile(r'^a')\n    #return re.match(pattern,text)\n",
        "num_ids": 32
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = 'a.*b$'\n    if re.search(pat,text):\n        print('Match!')\n    else:\n        print('No Match!')\n",
        "num_ids": 42
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"^a.*b$\", text)\n    ",
        "num_ids": 20
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*b'\n    \n    result = re.match(pattern, text)\n    \n    return result\n",
        "num_ids": 31
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for i in dict.items():\n        sum_of_items = sum_of_items + i[1]\n    return sum_of_items\n",
        "num_ids": 46
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.items():\n        sum += item[1]\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for i in dict.values():\n        summ += i\n",
        "num_ids": 23
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    a = 0\n    for key in dict.keys():\n        a += dict[key]\n    return a\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for i in range(len(dict)):\n        summ += dict[i]\n    return summ\n",
        "num_ids": 33
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.items():\n        total += item[1]\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # dict = {}\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    print(f\"Sum of all items in the dictionary is: {sum}\")\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total = total + value\n    return total\nprint(return_sum({'apples': 5, 'oranges': 3, 'lemons': 4}))\n",
        "num_ids": 55
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = 0\n    i = 0\n    while i < n:\n        if i % 2!= 0:\n            result += i\n        i += 1\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n < 0:\n        return sum\n",
        "num_ids": 18
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n >= 1:\n        summ = 0\n        for i in range(1, n+1):\n            if i % 2!= 0:\n                summ = summ + i\n        print(summ)\n    else:\n        print(\"Invalid input\")\nsum_odd(10)\n",
        "num_ids": 71
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower range value: \"))\n    r = int(input(\"Enter upper range value: \"))\n    odd_sum = 0\n",
        "num_ids": 39
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0 or n >= 1:\n        return \"Invalid input\"\n    else:\n        sum_odd = 0\n        for i in range(1,n+1):\n            if i%2!=0:\n                sum_odd += i\n    return sum_odd\n",
        "num_ids": 67
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    print('Sum of odd numbers between'+ str(l) +'to'+ str(r) +'is'+ str(sum))\n",
        "num_ids": 64
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    s = 0\n    for i in range(2, n+1):\n        if i%2 == 1:\n            s += i\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum_odd += i\n    return sum_odd\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 1:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 ==1:\n            sum += i\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Code here\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    #result = 0\n    #for i in range(len(arr)):\n    #    result += arr[i]\n",
        "num_ids": 37
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n",
        "num_ids": 36
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # arr = [1, 2, 3, 4]\n    sum_result = 0\n    for i in range(len(arr)):\n        sum_result += arr[i]\n    return sum_result\n",
        "num_ids": 51
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in range(len(arr)):\n        s+=arr[i]\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #Step1: perform left shift\n    #Step2: convert left shifted number to binary\n    #Step3: swap two numbers\n    return n << d | (n >> (32-d))\n",
        "num_ids": 47
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|((n>>(32-d))&0xffffffffffffffff)\n",
        "num_ids": 26
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    tmp = n\n    for i in range(d):\n        tmp = (tmp << 1) | ((tmp >> 31) & 1)\n    return tmp\n",
        "num_ids": 38
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-d)))\n",
        "num_ids": 18
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>32-d)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2003
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp = n << d\n    return ((temp & 0xffffffff) | (temp >> 32))\n",
        "num_ids": 26
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n>>(32-d))\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << (32-d))|(n>>d)\n    \ndef get_bit(n, i):\n    '''\n    Write a function to get the bit at ith position from right in an integer (bitwise)\n    '''\n    return (n>>i)&1\n    \ndef set_bit(n, i):\n    '''\n    Write a function to set the bit at ith position to 1 in an integer (bitwise)\n    '''\n    return n | (1 << i)\n    \ndef set_bit_at_index(n,i,value):\n    '''\n    Write a function to set the bit at ith position to value in an integer (bitwise)\n    '''\n    mask=1<<i\n    return (n&~mask)|((value<<i)&mask)\n    \ndef get_bit_at_index(n,i):\n    '''\n    Write a function to get the bit at ith position from right in an integer (bitwise)\n    '''\n    mask=1<<i\n    return (n&mask)>>i\n    \ndef get_bit_at_index_value(n,i):\n    '''\n    Write a function to get the bit at ith position from right in an integer (bitwise)\n    '''\n    mask=1<<i\n    return (n&mask)>>i\n    \ndef count_set_bits_in_n(n):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit(n,0)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_naive(n):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        n=n&(n-1)\n        count+=1\n    return count\n    \ndef count_set_bits_in_n_all_bits_set(n):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        n=n&(n-1)\n        count+=1\n    return count\n    \ndef count_set_bits_in_n_all_bits_set_naive(n):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        n=n&(n-1)\n        count+=1\n    return count\n    \ndef count_set_bits_in_n_and_count_all_bits_set(n):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        n=n&(n-1)\n        count+=1\n    return count\n    \ndef count_set_bits_in_n_and_count_all_bits_set_naive(n):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        n=n&(n-1)\n        count+=1\n    return count\n    \ndef count_set_bits_in_n_k(n,k):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,k)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_k_naive(n,k):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,k)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_k_all_bits_set(n,k):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,k)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_k_all_bits_set_naive(n,k):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,k)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_k_and_count_all_bits_set(n,k):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,k)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_k_and_count_all_bits_set_naive(n,k):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,k)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_l(n,l):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,l)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_l_naive(n,l):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,l)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_l_all_bits_set(n,l):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,l)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_l_all_bits_set_naive(n,l):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,l)):\n            count+=1\n        n=n&(n-1)\n    return count\n    \ndef count_set_bits_in_n_l_and_count_all_bits_set(n,l):\n    '''\n    Write a function to count the number of bits that are set in a given number\n    '''\n    count=0\n    while(n):\n        if(get_bit_at_index_value(n,l)):\n            count+=1\n        n=n&(n-1)\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & (2**32 - 1)\n",
        "num_ids": 27
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','')\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+', '', text)\n    return text\n",
        "num_ids": 24
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \" \", text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = re.sub(r'\\s+','', text)\n    return new_text\n",
        "num_ids": 27
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','')\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r\"\\s+\", \" \", text)\n    return text\n",
        "num_ids": 24
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n    #or\n    #return text.strip()\n",
        "num_ids": 31
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y+1):\n        if i==z:\n            count += 1\n    print(count)\n",
        "num_ids": 38
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Your code here\n    x,y,z = input().split(\" \")\n    x,y,z = int(x),int(y),int(z)\n    count = 0\n    if x == y and x == z and y == z:\n        count = count + 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    total = 0\n    if x == y and x == z:\n        total = total + 1\n    elif y == z:\n        total = total + 1\n    elif x == z:\n        total = total + 1\n    return total\n",
        "num_ids": 59
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # initialize count\n    count = 0\n    # compare the input\n    if x == y == z:\n        count = count + 1\n    return count\n    \n",
        "num_ids": 40
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #Write your code here\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n",
        "num_ids": 26
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    s = 0\n    for i in range(x,y):\n        for j in range(x,y):\n            for k in range(x,y):\n                if i == j == k:\n                    s += 1\n    return s\n",
        "num_ids": 58
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = 10\n    y = 20\n    z = 30\n    def f(x, y, z):\n        counter = 0\n        for i in range(x, y, z):\n            if i == x:\n                counter += 1\n            elif i == y:\n                counter += 1\n            elif i == z:\n                counter += 1\n        return counter\n    print(f(x,y,z))\n    \ndef test_three_equal1(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = 10\n    y = 20\n    z = 30\n    def f(x, y, z):\n        counter = 0\n        for i in range(x, y, z):\n            if i == x:\n                counter += 1\n            elif i == y:\n                counter += 1\n            elif i == z:\n                counter += 1\n        return counter\n    print(f(x,y,z))\n    \n    \ndef test_three_equal2(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = 10\n    y = 20\n    z = 30\n    def f(x, y, z):\n        for i in range(x, y, z):\n            if i == x:\n                return True\n            elif i == y:\n                return True\n            elif i == z:\n                return True\n        return False\n    print(f(x,y,z))\n",
        "num_ids": 92
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0,x+1):\n        for j in range(0,y+1):\n            for k in range(0,z+1):\n                if(i == j and i == k and j == k):\n                    count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y and x == z:\n        counter += 1\n    elif y == x and y == z:\n        counter += 1\n    elif z == x and z == y:\n        counter += 1\n    return counter\n    # Alternate solution\n    '''\n    return (x == y and x == z) or (y == x and y == z) or (z == x and z == y)\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count is the total number of rotations required\n    count = 0\n    # start is the pointer to the first element\n    start = 0\n    # end is the pointer to the last element\n    end = len(arr) - 1\n",
        "num_ids": 56
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low, high = 0, len(arr)-1\n    while low < high:\n        mid = low + (high - low)//2\n        if arr[mid] < arr[high]:\n            high = mid\n        elif arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            low = mid + 1\n    return low\n",
        "num_ids": 87
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    #if arr is already sorted we return 0\n    if arr == sorted(arr):\n        return 0\n    #if arr is not sorted we need to sort\n    i = 0\n    while i < n-1:\n        if arr[i] < arr[i+1]:\n            break\n        i += 1\n    j = n-1\n    while j > i:\n        if arr[j] > arr[j-1]:\n            break\n        j -= 1\n    #i is the first element smaller than j\n    return i+1 + count_rotation(arr[i+1:j])\n",
        "num_ids": 149
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = n-i-1\n        if arr[i] < arr[j]:\n            break\n    count += 1\n    for i in range(n-1, 0, -1):\n        j = 0\n        if arr[i] > arr[j]:\n            break\n    count += 1\n    return count\n",
        "num_ids": 98
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l=len(arr)\n    if l<2:\n        return 0\n    i=0\n    j=l-1\n    while i<j:\n        if arr[i]<arr[j]:\n            return 1\n        else:\n            i+=1\n            j-=1\n    return 2\n",
        "num_ids": 75
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #brute force solution\n    # TC: O(n^2) and SC: O(1)\n    def check_sorted(arr):\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    \n    if not check_sorted(arr):\n        return -1\n    n = len(arr)\n    \n    ans = 1\n    # Swap first and last element\n    arr[0], arr[n-1] = arr[n-1], arr[0]\n    \n    # Compare first element with second last\n    if arr[0] > arr[1]:\n        ans = 1\n    else:\n        for i in range(1, n-1):\n            if arr[i] > arr[i+1]:\n                ans += 1\n    return ans\n",
        "num_ids": 204
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr: return 0\n    c = 0\n    l = len(arr)\n    lo = 0\n    hi = l-1\n    while lo < hi:\n        mid = (lo+hi)//2\n        if arr[mid] > arr[hi]:\n            lo = mid + 1\n        elif arr[mid] < arr[hi]:\n            hi = mid\n        else:\n            hi -= 1\n            c += 1\n    return c\n",
        "num_ids": 108
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    while len(arr) > 1:\n        if arr[0] >= arr[len(arr) - 1]:\n            break\n        else:\n            arr = arr[1:] + arr[:1]\n            count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i == len(arr)-1:\n            break\n        if arr[i] <= arr[i+1]:\n            continue\n        j = i\n        while j >= 0 and arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n            j -= 1\n    print(count)\n",
        "num_ids": 106
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Idea 1\n    n = len(arr)\n    if n < 2:\n        return 0\n    # write a function to find the minimum element in an array\n    def min(arr):\n        min_val = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] < min_val:\n                min_val = arr[i]\n        return min_val\n",
        "num_ids": 99
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Implement here\n    # if n <= 0 :\n    #     return False\n    # i = int(sqrt(n))\n    # if i * i == n :\n    #     return True\n    # return False\n",
        "num_ids": 54
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # To take input from the user\n    #n = int(input(\"Enter a number: \"))\n    # Checking for factors\n    '''\n    if n % 2!= 0 :\n        print(\"Weird\")\n    else :\n        if n in range(2,6) :\n            print(\"Not Weird\")\n        elif n in range(6,21) :\n            print(\"Weird\")\n        else :\n            print(\"Not Weird\")\n    '''\n    #square root function\n    '''\n    def sqrt(x) :\n        y = x\n        i = 1\n        while i < 500 :\n            y = (y + x) / 2\n            i = i + 1\n        print(y)\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x))\n    '''\n    '''\n    from math import sqrt\n    def sqrt(x):\n        return int(sqrt(x)",
        "num_ids": 26
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n**0.5)\n    return x*x == n\n",
        "num_ids": 22
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    import cmath\n",
        "num_ids": 11
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    if(math.sqrt(n).is_integer()):\n        return True\n    else:\n        return False",
        "num_ids": 33
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while n >= i :\n        sq = int(pow(i, 2))\n        if n == sq :\n            return True\n        i += 1\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = sqrt(n)\n    if int(root + 0.5) * int(root + 0.5) == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(math.sqrt(n))\n    return root * root == n\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = sqrt(n)\n    if(root * root == n):\n        return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return True if (1)*len(arr)==len(set(arr)) else False\n",
        "num_ids": 23
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    print(f\"The product of the numbers in the list is: {reduce((lambda x,y: x * y), arr)}\")\n    return (reduce((lambda x,y: x * y), arr) % 2 == 0)\n",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if (arr[i] * arr[i]) % 2 == 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product_list = []\n    for i in range(len(arr)):\n        product = arr[i]*arr[i+1]\n        product_list.append(product)\n    if (product_list[len(product_list)-1]%2==0):\n        return True\n    else:\n        return False\n    pass\n",
        "num_ids": 82
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr:\n        if arr[0] % 2 == 0:\n            return True\n        else:\n            return is_product_even(arr[1:])\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return True if sum(arr) % 2 == 0 else False\n",
        "num_ids": 17
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % 2 == 0\n",
        "num_ids": 30
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(x%2==0 for x in arr)\n",
        "num_ids": 17
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for val in arr:\n        product = product * val\n    return product % 2 == 0\n",
        "num_ids": 29
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    #1\n    return arr[0] * arr[1] % 2 == 0 and all(i % 2 == 0 for i in arr[2:])\n",
        "num_ids": 38
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for list in lists:\n        max_list.append(max(list))\n    return max_list\n",
        "num_ids": 34
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for i in range(len(lists)):\n        lists[i] = sorted(lists[i])\n    \n    for i in range(len(lists)):\n        lists[i] = [sum(lists[i])] + lists[i]\n    \n    lists = sorted(lists)\n    return lists[len(lists)-1]\n",
        "num_ids": 82
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -sys.maxsize - 1\n    list_of_lists = []\n    \n    for i in range(len(lists)):\n        if len(lists[i]) == 0:\n            continue\n        max_sum = max(max_sum, sum(lists[i]))\n        temp = []\n        temp.append(sum(lists[i]))\n        list_of_lists.append(temp)\n",
        "num_ids": 102
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = -1\n    for num_list in lists:\n        for num in num_list:\n            if num > max:\n                max = num\n    \n    return max\n",
        "num_ids": 44
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return None\n    if len(lists) == 1:\n        return lists[0]\n    high = 0\n    for i in range(len(lists)):\n        high = max(high, sums_list(lists[:i+1]))\n    return max(lists, key=lambda x: x[0]+x[1]+x[2])\n",
        "num_ids": 94
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    temp_list = []\n    temp_sum = 0\n    max_sum = 0\n",
        "num_ids": 23
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    new_list = list(lists)\n    for i in range(len(new_list)-1):\n        for j in range(len(new_list[i])-1):\n            new_list[i][j] += max(new_list[i+1][j], new_list[i+1][j+1])\n    return new_list[0]\n",
        "num_ids": 89
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    min_num = None\n    max_sum = None\n    for l in lists:\n        if min_num == None or min_num > l:\n            min_num = l\n        if max_sum == None or max_sum < l:\n            max_sum = l\n    return [min_num, max_sum]\n",
        "num_ids": 79
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    temp_lists = []\n    max_sum = -1\n    for i in range(len(lists)):\n        temp_lists.append([])\n        for j in range(len(lists[i])):\n            temp_lists[i].append(lists[i][j])\n        temp_sum = get_sum_list(temp_lists[i])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n",
        "num_ids": 112
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_u = 0\n    if len(test_str) == 0:\n        return 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_u = max(max_u, 1+i)\n    return max_u\n",
        "num_ids": 75
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    s = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        if count > s:\n            s = count\n    print(s)\n",
        "num_ids": 70
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    dict={}\n    if len(test_str)==0:\n        return 0\n    for i in range(len(test_str)):\n        if test_str[i] in dict:\n            dict[test_str[i]]+=1\n        else:\n            dict[test_str[i]]=1\n    max_val=0\n    for j in dict:\n        if max_val<dict[j]:\n            max_val=dict[j]\n    return max_val\n",
        "num_ids": 118
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_cnt = 0\n    ch_cnt = 0\n    for ch in test_str:\n        if ch.isupper():\n            ch_cnt += 1\n        else:\n            ch_cnt = 0\n        if ch_cnt > max_cnt:\n            max_cnt = ch_cnt\n    return max_cnt\n",
        "num_ids": 86
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    count = 1\n    maximum = 1\n    current_count = 1\n    for i in range(1,len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            current_count += 1\n        else:\n            if current_count > maximum:\n                maximum = current_count\n            current_count = 1\n",
        "num_ids": 103
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    if len(test_str) == 0:\n        return 0\n    current_run = 1\n    prev_char = test_str[0]\n    for i in range(1, len(test_str)):\n        if test_str[i] == prev_char:\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n        prev_char = test_str[i]\n    if current_run > max_run:\n        max_run = current_run\n    return max_run\n",
        "num_ids": 150
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == \"\":\n        return 0\n    max_run = 0\n    count = 0\n    for i in range(len(test_str)):\n        if ord(test_str[i]) >= ord('A') and ord(test_str[i]) <= ord('Z'):\n            count += 1\n        else:\n            count = 0\n        if count > max_run:\n            max_run = count\n    return max_run\n",
        "num_ids": 108
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    new_str = test_str.lower()\n    if new_str.count('z') >= 1:\n        count += 1\n        \n    if new_str.count('Z') >= 1:\n        count += 1\n    \n    if new_str.count('a') >= 1:\n        count += 1\n    \n    if new_str.count('A') >= 1:\n        count += 1\n",
        "num_ids": 101
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #return max(len(list(filter(lambda x: x.isupper(), test_str))), max(list(map(lambda x: len(list(filter(lambda y: y.isupper(), x))), test_str))))\n    #print(len(list(filter(lambda x: x.isupper(), test_str))))\n    #print(len(list(filter(lambda x: x.isupper(), test_str))))\n    #print(list(filter(lambda x: x.isupper(), test_str)))\n    #return max(len(list(filter(lambda x: x.isupper(), test_str))))\n    return max([len(list(filter(lambda x: x.isupper(), test_str)))])\n    #print(max(list(filter(lambda x: x.isupper(), test_str))))\n    #return max(list(map(lambda x: len(list(filter(lambda y: y.isupper(), x))), test_str)))\n",
        "num_ids": 229
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "num_ids": 37
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums_list = nums.split(',')\n    nums_list = list(map(int, nums_list))\n    for num in nums_list:\n        if (num + 1) % 2 == 1:\n            return num\n",
        "num_ids": 61
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x%2!= 0:\n            return x\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odds = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odds.append(nums[i])\n    print(odds)\n",
        "num_ids": 54
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return -1\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if (num + 1) % 2!= 0:\n            return num\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i]%2 == 1:\n            return nums[i]\n        i+=1\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = True\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd = False\n    if odd:\n        return \"None\"\n    else:\n        return nums[0]\n",
        "num_ids": 62
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if (num % 2) == 1:\n            return num\n    return \"no odd numbers found\"\n",
        "num_ids": 34
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return list(filter(lambda x: x & 1,nums))[0]\n",
        "num_ids": 22
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup in K:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K and test_tup[1] == K:\n        return True\n    elif test_tup[0] == K or test_tup[1] == K:\n        return True\n    else:\n        return False\n    \ndef count_non_pair_K(test_tup, K):\n    '''\n    Write a function to count the number of non-pairs.\n    '''\n    if test_tup[0] == K and test_tup[1]!= K:\n        return 1\n    elif test_tup[0]!= K and test_tup[1] == K:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 67
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K and test_tup[1] == K:\n        return True\n    if test_tup[0] == K or test_tup[1] == K:\n        return True\n    return False\n    \ndef check_K_unique(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    if test_tup[1] == K:\n        return True\n    return False\n    \ndef get_counts(sorted_counts_dict):\n    '''\n    Write a function to get the counts of values in the dictionary.\n    '''\n    counts = []\n    for key in sorted_counts_dict:\n        counts.append(sorted_counts_dict[key])\n    return counts\n",
        "num_ids": 41
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    A,B,C=test_tup\n    return A==B or A==C or B==C\n",
        "num_ids": 28
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i[0] == K:\n            return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = test_tup[0]\n    arr = test_tup[1]\n",
        "num_ids": 24
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        if len(test_tup1) == len(test_tup2):\n            return all(x<y for x, y in zip(test_tup1, test_tup2))\n        else:\n            raise ValueError(\"Tuple lengths don't match\")\n    else:\n        raise TypeError(\"Inputs should be tuples\")\n",
        "num_ids": 109
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_set = {i[0] for i in test_tup1}\n    test_set2 = {i[0] for i in test_tup2}\n    for i in test_set2:\n        if i not in test_set:\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(x < y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return c < a and d < b\n",
        "num_ids": 34
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[0]<=test_tup2[0] and test_tup1[1]<=test_tup2[1])\n",
        "num_ids": 43
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return True if test_tup1[1] < test_tup2[1] else False\n",
        "num_ids": 26
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuple lengths are not equal\"\n    for i in range(len(test_tup1)):\n        assert test_tup1[i] <= test_tup2[i], f\"First tuple element {test_tup1[i]} is greater than second tuple element {test_tup2[i]}\"\n",
        "num_ids": 96
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] <= test_tup2[i]:\n                return True\n    else:\n        return False\n    \n",
        "num_ids": 72
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    }
]