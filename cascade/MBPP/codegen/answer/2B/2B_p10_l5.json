[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elems.append(test_tup1[i])\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #a = set(test_tup1)\n    #b = set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            shared_elems.append(elem1)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set_test_1 = set(test_tup1)\n    set_test_2 = set(test_tup2)\n    return list(set_test_1 & set_test_2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list_1 = test_tup1[0]\n    list_2 = test_tup2[0]\n    # print(list_1, list_2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            common_elements.append(test_tup1[i])\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result.append(test_tup1[i])\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return True\n    if n > 1:\n        if n == 2:\n            return False\n        for i in range(2, int(n**0.5 + 1)):\n            if n % i == 0:\n                return True\n        return False\n    else:\n        return False\ndef find_prime_factors(n):\n    '''\n    Write a python function to find prime factors of a given integer.\n    '''\n    if is_not_prime(n) == True:\n        print(\"Factors of\", n, \"are:\")\n        while n % 2 == 0:\n            print(2, end = \" \")\n            n = n//2\n        for i in range(3, int(n**0.5 + 1), 2):\n            while n % i == 0:\n                print(i, end = \" \")\n                n = n//i\n        print(n, end = \" \")\n    else:\n        print(\"The number is prime\")\ndef is_prime(n):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        else:\n            return True\ndef find_greatest_common_divisor(x, y):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers.\n    '''\n    if x > y:\n        d = y\n    else:\n        d = x\n    for i in range(d, 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\ndef find_greatest_common_divisor_recursive(x, y):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers using recursion.\n    '''\n    if x > y:\n        d = y\n    else:\n        d = x\n    if d == 1:\n        return d\n    else:\n        return find_greatest_common_divisor_recursive(d, x%d)\ndef print_interleave(s1, s2, m, n):\n    '''\n    Write a python function to print interleaved strings with minimum spaces.\n    '''\n    if m == 0:\n        print(s2)\n        return\n    if n == 0:\n        print(s1)\n        return\n    if s1 == \"\":\n        print(s2 + s1)\n        return\n    if s2 == \"\":\n        print(s1 + s2)\n        return\n    print(s1 + s2)\n    print_interleave(s1[1:], s2, m-1, n)\ndef print_interleave_recursive(s1, s2, m, n):\n    '''\n    Write a python function to print interleaved strings with minimum spaces using recursion.\n    '''\n    if m == 0:\n        print(s2)\n        return\n    if n == 0:\n        print(s1)\n        return\n    if s1 == \"\":\n        print(s2 + s1)\n        return\n    if s2 == \"\":\n        print(s1 + s2)\n        return\n    print_interleave(s1[1:], s2, m-1, n)\n    print_interleave_recursive(s1[1:], s2, m, n-1)\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a given number is palindrome.\n    '''\n    if n > 0:\n        return (is_palindrome_core(n, n, 0))\n    else:\n        return True\ndef is_palindrome_core(n, d, s):\n    '''\n    Write a python function to check if a given number is palindrome using recursion.\n    '''\n    if n == 0:\n        return s\n    if d == 0:\n        return s\n    if n > 0:\n        if n % 10 == 0:\n            return is_palindrome_core(n//10, d-1, s+str(n%10))\n        else:\n            return is_palindrome_core(n//10, d-1, s+str(n%10))\n    else:\n        return False\ndef is_palindrome_recursive(n):\n    '''\n    Write a python function to check if a given number is palindrome using recursion.\n    '''\n    if n > 0:\n        return is_palindrome_core(n, n, 0)\n    else:\n        return True\ndef is_palindrome_iterative(n):\n    '''\n    Write a python function to check if a given number is palindrome using iteration.\n    '''\n    if n > 0:\n        a = n % 10\n        n = n//10\n        while n > 0:\n            if n%10!= a:\n                return False\n            n = n//10\n            a = n%10\n        return True\ndef is_palindrome_recursive_iterative(n):\n    '''\n    Write a python function to check if a given number is palindrome using recursion.\n    '''\n    if n > 0:\n        if is_palindrome_recursive(n):\n            return True\n        else:\n            return is_palindrome_recursive(n//10)\n    else:\n        return True\ndef first_n_factors(n):\n    '''\n    Write a python function to print the first n prime numbers.\n    '''\n    if n == 1:\n        return\n    l = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            l.append(i)\n    l.reverse()\n    print(*l)\ndef check_prime(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n    return True\ndef is_prime_recursive(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        if n == 2:\n            return True\n        else:\n            for i in range(2,int(math.sqrt(n) + 1)):\n                if n % i == 0:\n                    return False\n            return True\ndef next_prime(n):\n    '''\n    Write a python function to compute the next prime number after the given number.\n    '''\n    if n < 2:\n        return 2\n    else:\n        while True:\n            n += 1\n            if check_prime(n):\n                return n\ndef gcd(a, b):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        return gcd(b, a)\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a%b)\ndef next_greatest_prime(n):\n    '''\n    Write a python function to compute the next greater prime number after the given number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\ndef next_greatest_prime_recursive(n):\n    '''\n    Write a python function to compute the next greater prime number after the given number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        if is_prime_recursive(n):\n            return n\n        else:\n            while True:\n                n += 1\n                if is_prime_recursive(n):\n                    return n\ndef is_palindrome_iterative(n):\n    '''\n    Write a python function to check if a given number is palindrome using iteration.\n    '''\n    if n < 0:\n        return False\n    s = \"\"\n    whil"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\ndef prime_range(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime(i):\n            count = count + 1\n    return count\ndef is_prime_with_divisor(n, x):\n    '''\n    Write a python function to find prime numbers with divisor.\n    '''\n    if n % x == 0:\n        return False\n    if n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,2):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,3):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,4):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,5):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,6):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,7):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,8):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,9):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,10):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,11):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,12):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,13):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,14):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,15):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,16):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,17):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,18):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,19):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n    '''\n    count = 0\n    for i in range(lower,upper + 1):\n        if is_prime_with_divisor(i,20):\n            count = count + 1\n    return count\ndef prime_in_range_divisor(lower, upper):\n    '''\n    Write a python function to find prime numbers in range of 2 to a given number.\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not all(n%i==0 for i in range(2,int(math.sqrt(n)+1)))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Corner case: 2\n    if n == 2:\n        return False\n    # Corner case: 1\n    if n == 1:\n        return False\n    # Corner case: 0\n    if n == 0:\n        return True\n    # n is non-prime if divisible by prime numbers\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)+1)):\n            if (n % i) == 0:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\ndef count_divisors(n):\n    '''\n    Write a python function to count divisors of an integer number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count = count + 1\n    return count\ndef sum_divisors(n):\n    '''\n    Write a python function to sum all divisors of an integer number.\n    '''\n    sum = 0\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\ndef sum_even_divisors(n):\n    '''\n    Write a python function to sum all even divisors of an integer number.\n    '''\n    sum = 0\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\ndef sum_odd_divisors(n):\n    '''\n    Write a python function to sum all odd divisors of an integer number.\n    '''\n    sum = 0\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\ndef sum_pandigital_numbers(n):\n    '''\n    Write a python function to sum all pandigital numbers.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + i + j + k + l\n    return sum\ndef sum_digits(n):\n    '''\n    Write a python function to sum all digits of an integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        sum = sum + int(str(n)[i])\n    return sum\ndef sum_digit_squares(n):\n    '''\n    Write a python function to sum all digit squares of an integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        sum = sum + (int(str(n)[i]) ** 2)\n    return sum\ndef sum_digits_squares(n):\n    '''\n    Write a python function to sum all digits squares of an integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        sum = sum + (int(str(n)[i]) ** 2)\n    return sum\ndef sum_digits_squares_even(n):\n    '''\n    Write a python function to sum all digits squares of an even integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        if i % 2 == 0:\n            sum = sum + (int(str(n)[i]) ** 2)\n    return sum\ndef sum_digits_squares_odd(n):\n    '''\n    Write a python function to sum all digits squares of an odd integer number.\n    '''\n    sum = 0\n    for i in range(len(str(n))):\n        if i % 2!= 0:\n            sum = sum + (int(str(n)[i]) ** 2)\n    return sum\ndef sum_digits_squares_pandigital(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_even(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital even integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_odd(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital odd integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_even_odd(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital even odd integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_odd_even(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital odd even integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_odd_even_even(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital odd even even integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                for l in range(k, 10):\n                    if str(i) + str(j) + str(k) + str(l) == n:\n                        sum = sum + (int(str(i)) ** 2) + (int(str(j)) ** 2) + (int(str(k)) ** 2) + (int(str(l)) ** 2)\n    return sum\ndef sum_digits_squares_pandigital_odd_even_odd(n):\n    '''\n    Write a python function to sum all digits squares of a pandigital odd even odd integer number.\n    '''\n    sum = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for "
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for num in nums:\n        hq.heappush(h,num)\n    for i in range(len(h)-n,len(h)):\n        hq.heappop(h)\n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_second_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_third_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_fourth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_fifth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_sixth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_seventh_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_eighth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_ninth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_tenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_eleventh_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_twelveth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_thirteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_fourteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_fifteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_sixteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_seventeenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_eighteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        pop_num = hq.heappop(nums)\n        if i == n-1:\n            return pop_num\n        else:\n            continue\ndef heap_queue_nineteenth_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a give"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #create a list of heapq with decreasing order of numbers\n    l = []\n    for i in range(n):\n        hq.heappush(l,-nums[i])\n    return -l[0]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # nums = nums[:]\n    # nums.sort(reverse=True)\n    # nums = list(map(int,nums))\n    # n = len(nums)\n    # print(nums)\n    # hq.heapify(nums)\n    # print(nums)\n    # return nums[:n]\n    # print(nums)\n    # print(sorted(nums,reverse=True))\n    # return sorted(nums,reverse=True)[:n]\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    while len(nums) > n:\n        hq.heappop(nums)\n    lst = []\n    for i in nums:\n        lst.append(i)\n    return lst\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # if there is only one number in the list, return that number\n    if len(nums) == 1:\n        return nums\n    heapq.heapify(nums)\n    nlargest = []\n    # nlargest.append(heapq.heappop(nums))\n    for i in range(n):\n        nlargest.append(heapq.heappop(nums))\n    return nlargest\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a heap from nums list\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    # return n largest integers from the heap\n    return [hq.heappop(heap) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums,reverse=True)[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x==0):\n        return False\n    else:\n        while(x):\n            x = x//2\n            print(x)\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        x &= x-1\n    return x==0\n    \nprint(is_Power_Of_Two(int(input(\"Enter a number: \"))))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    while x>0: \n        if x % 2!= 0: \n            return False\n        x = x/2\n    return True \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if x & (x-1) == 0:\n        return True\n    return False\n    \n    '''\n    Write a python function to check whether a number is power of two or not.\n    '''\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & 1 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Converting a number in to binary and then comparing it\n    return x == 2**(len(bin(x)) - 2)\n    "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        n = 1\n        while(n <= x):\n            if(n!= x):\n                n = 2*n\n            else:\n                print(\"yes\")\n                return 1\n        else:\n            print(\"no\")\n            return 0\n    else:\n        print(\"noo\")\n        return 0\n    \ndef is_Power_Of_Two_2(x):\n    if x>0:\n        while(x>1):\n            x = x//2\n        if x == 1:\n            print(\"yes\")\n            return 1\n        else:\n            print(\"no\")\n            return 0\n    else:\n        print(\"noo\")\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # If a number is a power of two then it has one bit set to 1\n    return x > 0 and (x & (x-1)) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_string = text.split()\n    all_str = []\n    for i in range(0, len(list_string)):\n        if len(list_string[i]) >= 4:\n            all_str.append(list_string[i])\n    return all_str\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r\"[\\w']+|[.,!?;]\", text)\n    print(words)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    print(result)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    lst = re.findall('[a-zA-Z]+', text)\n    lst = list(filter(lambda x: len(x)>3, lst))\n    return lst\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l=[]\n    for i in text.split():\n        if len(i)>=4:\n            l.append(i)\n    return l\ndef find_long(text):\n    '''\n    Write a function that takes in a sentence and returns the number of words in the sentence that are longer than 4 characters.\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    results = []\n    for item in re.findall(\"[a-zA-Z]+\",text):\n        if len(item) >= 4:\n            results.append(item)\n            \n    return results\n        \n    \n    \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [x for x in re.split(r'\\W+',text) if len(x) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_of_words = text.split()\n    long_words = []\n    for word in list_of_words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r\"[\\w']+\"\n    pattern2 = r\"[\\w']+\"\n    pattern3 = r\"[\\w']+|\"\n    pattern4 = r\"[\\w']+|\"\n    pattern5 = r\"[\\w']+|\"\n    pattern6 = r\"[\\w']+|\"\n    pattern7 = r\"[\\w']+|\"\n    pattern8 = r\"[\\w']+|\"\n    pattern9 = r\"[\\w']+|\"\n    pattern10 = r\"[\\w']+|\"\n    pattern11 = r\"[\\w']+|\"\n    pattern12 = r\"[\\w']+|\"\n    pattern13 = r\"[\\w']+|\"\n    pattern14 = r\"[\\w']+|\"\n    pattern15 = r\"[\\w']+|\"\n    pattern16 = r\"[\\w']+|\"\n    pattern17 = r\"[\\w']+|\"\n    pattern18 = r\"[\\w']+|\"\n    pattern19 = r\"[\\w']+|\"\n    pattern20 = r\"[\\w']+|\"\n    pattern21 = r\"[\\w']+|\"\n    pattern22 = r\"[\\w']+|\"\n    pattern23 = r\"[\\w']+|\"\n    pattern24 = r\"[\\w']+|\"\n    pattern25 = r\"[\\w']+|\"\n    pattern26 = r\"[\\w']+|\"\n    pattern27 = r\"[\\w']+|\"\n    pattern28 = r\"[\\w']+|\"\n    pattern29 = r\"[\\w']+|\"\n    pattern30 = r\"[\\w']+|\"\n    pattern31 = r\"[\\w']+|\"\n    pattern32 = r\"[\\w']+|\"\n    pattern33 = r\"[\\w']+|\"\n    pattern34 = r\"[\\w']+|\"\n    pattern35 = r\"[\\w']+|\"\n    pattern36 = r\"[\\w']+|\"\n    pattern37 = r\"[\\w']+|\"\n    pattern38 = r\"[\\w']+|\"\n    pattern39 = r\"[\\w']+|\"\n    pattern40 = r\"[\\w']+|\"\n    pattern41 = r\"[\\w']+|\"\n    pattern42 = r\"[\\w']+|\"\n    pattern43 = r\"[\\w']+|\"\n    pattern44 = r\"[\\w']+|\"\n    pattern45 = r\"[\\w']+|\"\n    pattern46 = r\"[\\w']+|\"\n    pattern47 = r\"[\\w']+|\"\n    pattern48 = r\"[\\w']+|\"\n    pattern49 = r\"[\\w']+|\"\n    pattern50 = r\"[\\w']+|\"\n    pattern51 = r\"[\\w']+|\"\n    pattern52 = r\"[\\w']+|\"\n    pattern53 = r\"[\\w']+|\"\n    pattern54 = r\"[\\w']+|\"\n    pattern55 = r\"[\\w']+|\"\n    pattern56 = r\"[\\w']+|\"\n    pattern57 = r\"[\\w']+|\"\n    pattern58 = r\"[\\w']+|\"\n    pattern59 = r\"[\\w']+|\"\n    pattern60 = r\"[\\w']+|\"\n    pattern61 = r\"[\\w']+|\"\n    pattern62 = r\"[\\w']+|\"\n    pattern63 = r\"[\\w']+|\"\n    pattern64 = r\"[\\w']+|\"\n    pattern65 = r\"[\\w']+|\"\n    pattern66 = r\"[\\w']+|\"\n    pattern67 = r\"[\\w']+|\"\n    pattern68 = r\"[\\w']+|\"\n    pattern69 = r\"[\\w']+|\"\n    pattern70 = r\"[\\w']+|\"\n    pattern71 = r\"[\\w']+|\"\n    pattern72 = r\"[\\w']+|\"\n    pattern73 = r\"[\\w']+|\"\n    pattern74 = r\"[\\w']+|\"\n    pattern75 = r\"[\\w']+|\"\n    pattern76 = r\"[\\w']+|\"\n    pattern77 = r\"[\\w']+|\"\n    pattern78 = r\"[\\w']+|\"\n    pattern79 = r\"[\\w']+|\"\n    pattern80 = r\"[\\w']+|\"\n    pattern81 = r\"[\\w']+|\"\n    pattern82 = r\"[\\w']+|\"\n    pattern83 = r\"[\\w']+|\"\n    pattern84 = r\"[\\w']+|\"\n    pattern85 = r\"[\\w']+|\"\n    pattern86 = r\"[\\w']+|\"\n    pattern87 = r\"[\\w']+|\"\n    pattern88 = r\"[\\w']+|\"\n    pattern89 = r\"[\\w']+|\"\n    pattern90 = r\"[\\w']+|\"\n    pattern91 = r\"[\\w']+|\"\n    pattern92 = r\"[\\w']+|\"\n    pattern93 = r\"[\\w']+|\"\n    pattern94 = r\"[\\w']+|\"\n    pattern95 = r\"[\\w']+|\"\n    pattern96 = r\"[\\w']+|\"\n    pattern97 = r\"[\\w']+|\"\n    pattern98 = r\"[\\w']+|\"\n    pattern99 = r\"[\\w']+|\"\n    pattern100 = r\"[\\w']+|\"\n    pattern101 = r\"[\\w']+|\"\n    pattern102 = r\"[\\w']+|\"\n    pattern103 = r\"[\\w']+|\"\n    pattern104 = r\"[\\w']+|\"\n    pattern105 = r\"[\\w']+|\"\n    pattern106 = r\"[\\w']+|\"\n    pattern107 = r\"[\\w']+|\"\n    pattern108 = r\"[\\w']+|\"\n    pattern109 = r\"[\\w']+|\"\n    pattern110 = r\"[\\w']+|\"\n    pattern111 = r\"[\\w']+|\"\n    pattern112 = r\"[\\w']+|\"\n    pattern113 = r\"[\\w']+|\"\n    pattern114 = r\"[\\w']+|\"\n    pattern115 = r\"[\\w']+|\"\n    pattern116 = r\"[\\w']+|\"\n    pattern117 = r\"[\\w']+|\"\n    pattern118 = r\"[\\w']+|\"\n    pattern119 = r\"[\\w']+|\"\n    pattern120 = r\"[\\w']+|\"\n    pattern121 = r\"[\\w']+|\"\n    pattern122 = r\"[\\w']+|\"\n    pattern123 = r\"[\\w']+|\"\n    pattern124 = r\"[\\w']+|\"\n    pattern125 = r\"[\\w']+|\"\n    pattern126 = r\"[\\w']+|\"\n    pattern127 = r\"[\\w']+|\"\n    pattern128 = r\"[\\w']+|\"\n    pattern129 = r\"[\\w']+|\"\n    pattern130 = r\"[\\w']+|\"\n    pattern131 = r\"[\\w']+|\"\n    pattern132 = r\"[\\w']+|\"\n    pattern133 = r\"[\\w']+|\"\n    pattern134 = r\"[\\w']+|\"\n    pattern135 = r\"[\\w']+|\"\n    pattern136 = r\"[\\w']+|\"\n    pattern137 = r\"[\\w']+|\"\n    pattern138 = r\"[\\w']+|\"\n    pattern139 = r\"[\\w']+|\"\n    pattern140 = r\"[\\w']+|\"\n    pattern141 = r\"[\\w']+|\"\n    pattern142 = r\"[\\w']+|\"\n    pattern143 = r\"[\\w']+|\"\n    pattern144 = r\"[\\w']+|\"\n    pattern145 = r\"[\\w']+|\"\n    pattern146 = r\"[\\w']+|\"\n    pattern147 = r\"[\\w']+|\"\n    pattern148 = r\"[\\w']+|\"\n    pattern149 = r\"[\\w']+|\"\n    pattern150 = r\"[\\w']+|\"\n    pattern151 = r\"[\\w']+|\"\n    pattern152 = r\"[\\w']+|\"\n    pattern153 = r\"[\\w']+|\"\n    pattern154 = r\"[\\w']+|\"\n    pattern155 = r\"[\\"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text=text.strip()\n    result_set=set()\n    word_list=text.split()\n    for word in word_list:\n        if len(word)>=4:\n            result_set.add(word)\n    return result_set\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_of_words = re.findall(r'\\w{4,}',text)\n    return list_of_words\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i**2)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n    \nprint(square_nums([2, 3, 4, -2]))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**2)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for n in nums:\n        squares.append(n*n)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if given string is empty\n    if len(str) == 0: \n        return 0\n    # iterate through the string and count the number of times 'a' is occuring\n    count = 0\n    for i in range(0, len(str)): \n        if str[i] == 'a': \n            count += 1\n    # return the minimum number of rotations to make the string equal to itself\n    return min(len(str), count)\n    \ndef find_Rotations_Optimal(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if given string is empty\n    if len(str) == 0: \n        return 0\n    # define count as 0 and length of string as 1\n    count = 0\n    length = 1\n    # iterate through the string\n    for i in range(0, len(str)): \n        # if char is different then increment count \n        if str[i]!= str[length - 1]: \n            count += 1\n        # else increment length and set count back to 0\n        else: \n            length += 1\n            count = 0\n    # return the minimum number of rotations to make the string equal to itself\n    return min(len(str), count)\n    \ndef find_Rotations_optimal(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if given string is empty\n    if len(str) == 0: \n        return 0\n    # define count as 0 and length of string as 1\n    count = 0\n    length = 1\n    # iterate through the string\n    for i in range(0, len(str)): \n        # if char is different then increment count \n        if str[i]!= str[length - 1]: \n            count += 1\n        # else increment length and set count back to 0\n        else: \n            length += 1\n            count = 0\n    # return the minimum number of rotations to make the string equal to itself\n    return min(len(str), count)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #print str\n    s_len = len(str)\n    #print s_len\n    s = str\n    #print s\n    d = dict()\n    #print d\n    d[s[0]] = 0\n    #print d\n    for i in range(1, s_len):\n        #print i\n        if(s[i] in d):\n            #print s[i]\n            d[s[i]] = d[s[i]] + 1\n        else:\n            d[s[i]] = 1\n        #print d\n    print d\n    return d\n    \nif __name__ == '__main__': \n    str = raw_input()\n    min_rot = find_Rotations(str)\n    #print min_rot\n    l = min_rot.keys()\n    #print l\n    l = sorted(l)\n    #print l\n    n = l[0]\n    #print n\n    n = int(n)\n    #print n\n    for i in range(1, len(l)):\n        n = n*(n+1)/2\n        #print n\n    print int(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # base case: if str is empty\n    if len(str) == 0:\n        return 0\n    # create a mapping of characters with their ascii codes\n    str_map = {}\n    for i in range(len(str)):\n        str_map[str[i]] = i\n    # print(\"str_map\", str_map)\n    # create a list of the characters in str\n    str_list = list(str)\n    # print(\"str_list\", str_list)\n    \n    # create a sorted list of characters in str_list\n    str_list.sort()\n    # print(\"sorted_str\", str_list)\n    \n    # create a list of the ascii codes of the characters in sorted_str\n    ascii_list = []\n    for i in range(len(str_list)):\n        ascii_list.append(ord(str_list[i]))\n    # print(\"ascii_list\", ascii_list)\n    \n    # create a dictionary with the ascii codes as keys and the corresponding characters as values\n    ascii_dict = {}\n    for i in range(len(ascii_list)):\n        ascii_dict[ascii_list[i]] = str_list[i]\n    # print(\"ascii_dict\", ascii_dict)\n    \n    # create a list of the characters in str_list that are not in ascii_list\n    diff_str = list(set(str_list) - set(ascii_list))\n    # print(\"diff_str\", diff_str)\n    \n    # create a list of the ascii codes of the characters in diff_str\n    diff_ascii = []\n    for i in range(len(diff_str)):\n        diff_ascii.append(ord(diff_str[i]))\n    # print(\"diff_ascii\", diff_ascii)\n    \n    # create a dictionary with the ascii codes as keys and the corresponding characters as values\n    diff_ascii_dict = {}\n    for i in range(len(diff_ascii)):\n        diff_ascii_dict[diff_ascii[i]] = diff_str[i]\n    # print(\"diff_ascii_dict\", diff_ascii_dict)\n    \n    # create a list of all the characters in str_list that are not in diff_str\n    diff_list = list(set(str_list) - set(diff_str))\n    # print(\"diff_list\", diff_list)\n    \n    # create a dictionary with the ascii codes as keys and the corresponding characters as values\n    diff_list_dict = {}\n    for i in range(len(diff_list)):\n        diff_list_dict[diff_list[i]] = diff_list[i]\n    # print(\"diff_list_dict\", diff_list_dict)\n    \n    # create a list of all the characters in diff_list that are not in diff_str\n    diff_dict = {}\n    for i in range(len(diff_list)):\n        diff_dict[diff_list[i]] = diff_list[i]\n    # print(\"diff_dict\", diff_dict)\n    \n    # create a dictionary with the ascii codes of the characters in diff_dict as keys and the corresponding characters as values\n    diff_dict_ascii = {}\n    for i in range(len(diff_dict)):\n        diff_dict_ascii[diff_dict[diff_dict.keys()[i]]] = diff_dict.keys()[i]\n    # print(\"diff_dict_ascii\", diff_dict_ascii)\n    \n    # create a list of the characters in diff_dict that are not in diff_list\n    diff_diff_list = list(set(diff_dict.values()) - set(diff_list))\n    # print(\"diff_diff_list\", diff_diff_list)\n    \n    # create a dictionary with the ascii codes of the characters in diff_diff_list as keys and the corresponding characters as values\n    diff_diff_list_ascii = {}\n    for i in range(len(diff_diff_list)):\n        diff_diff_list_ascii[diff_diff_list[i]] = diff_diff_list[i]\n    # print(\"diff_diff_list_ascii\", diff_diff_list_ascii)\n    \n    # create a list of all the characters in diff_diff_list that are not in diff_dict\n    diff_diff_dict = {}\n    for i in range(len(diff_diff_list)):\n        diff_diff_dict[diff_diff_list[i]] = diff_diff_list[i]\n    # print(\"diff_diff_dict\", diff_diff_dict)\n    \n    # create a dictionary with the ascii codes of the characters in diff_diff_dict as keys and the corresponding characters as values\n    diff_diff_dict_ascii = {}\n    for i in range(len(diff_diff_dict)):\n        diff_diff_dict_ascii[diff_diff_dict[diff_diff_dict.keys()[i]]] = diff_diff_dict.keys()[i]\n    # print(\"diff_diff_dict_ascii\", diff_diff_dict_ascii)\n    \n    # create a list of all the characters in diff_diff_dict that are not in diff_diff_list\n    diff_diff_diff_list = list(set(diff_diff_dict.values()) - set(diff_diff_list))\n    # print(\"diff_diff_diff_list\", diff_diff_diff_list)\n    \n    # create a dictionary with the ascii codes of the characters in diff_diff_diff_list as keys and the corresponding characters as values\n    diff_diff_diff_list_ascii = {}\n    for i in range(len(diff_diff_diff_list)):\n        diff_diff_diff_list_ascii[diff_diff_diff_list[i]] = diff_diff_diff_list[i]\n    # print(\"diff_diff_diff_list_ascii\", diff_diff_diff_list_ascii)\n    \n    # create a dictionary with the ascii codes of the characters in diff_list_dict as keys and the corresponding characters as values\n    diff_list_dict_ascii = {}\n    for i in range(len(diff_list_dict)):\n        diff_list_dict_ascii[diff_list_dict[diff_list_dict.keys()[i]]] = diff_list_dict.keys()[i]\n    # print(\"diff_list_dict_ascii\", diff_list_dict_ascii)\n    \n    # create a list of all the characters in diff_list_dict that are not in diff_list\n    diff_list_dict_diff_list = list(set(diff_list_dict.values()) - set(diff_list))\n    # print(\"diff_list_dict_diff_list\", diff_list_dict_diff_list)\n    \n    # create a dictionary with the ascii codes of the characters in diff_list_dict_diff_list as keys and the corresponding characters as values\n    diff_list_dict_diff_list_ascii = {}\n    for i in range(len(diff_list_dict_diff_list)):\n        diff_list_dict_diff_list_ascii[diff_list_dict_diff_list[i]] = diff_list_dict_diff_list[i]\n    # print(\"diff_list_dict_diff_list_ascii\", diff_list_dict_diff_list_ascii)\n    \n    # create a list of all the characters in diff_list_dict_diff_list that are not in diff_list_dict\n    diff_list_dict_diff_dict = {}\n    for i in range(len(diff_list_dict_diff_list)):\n        diff_list_dict_diff_dict[diff_list_dict_diff_list[i]] = diff_list_dict_diff_list[i]\n    # print(\"diff_list_dict_diff_dict\", diff_list_dict_diff_dict)\n    \n    # create a dictionary with the ascii codes of the characters in diff_list_dict_diff_dict as keys and the corresponding characters as values\n    dif"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    hash_dict = {}\n    for i in range(len(str)):\n        if str[i] in hash_dict:\n            hash_dict[str[i]] += 1\n        else:\n            hash_dict[str[i]] = 1\n    rotations = 0\n    for value in hash_dict.values():\n        if value > 1:\n            rotations += (value - 1)\n    print(rotations)\n    \n    \ndef find_Rotations_using_list(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    hash_dict = {}\n    for i in range(len(str)):\n        if str[i] in hash_dict:\n            hash_dict[str[i]] += 1\n        else:\n            hash_dict[str[i]] = 1\n    rotations = 0\n    for value in hash_dict.values():\n        if value > 1:\n            rotations += (value - 1)\n    print(rotations)\n    \n    \nfind_Rotations(\"ABAB\")\nfind_Rotations(\"CABBA\")\nfind_Rotations(\"CBABA\")\nfind_Rotations_using_list(\"CABBA\")\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str.lower()\n    new_str = \"\"\n    count = 0\n    for i in str:\n        count += 1\n        new_str = i + new_str\n    \n    count_new = 0\n    for i in str:\n        count_new += 1\n        if i in new_str:\n            continue\n        else:\n            break\n    if count_new == count:\n        return count \n    else:\n        return count_new \n        "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    \n    c_count = 0\n    if str[0] == str[-1]:\n        c_count = 1\n    else:\n        for i in range(1, len(str)):\n            if str[0] == str[i] and str[i] == str[-1]:\n                c_count += 1\n            else:\n                break\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # print(str)\n    if len(str)==1:\n        return 0\n    if len(str)==2:\n        if str[0]==str[1]:\n            return 0\n        else:\n            return 1\n    if len(str)==3:\n        if str[0]==str[1] and str[0]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\n    if len(str)>3:\n        if str[0]==str[1] and str[1]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[0]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[1]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[0]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\ndef find_mirrors(str):\n    '''\n    Write a python function to find the mirror permutations of a string.\n    '''\n    if len(str)==1:\n        return str\n    if len(str)==2:\n        return str[0] + str[0] + str[1] + str[1] + str[0] + str[1]\n    if len(str)>2:\n        return str[0] + str[0] + str[1] + str[1] + str[2] + str[2] + str[1] + str[0] + str[0] + str[0] + str[1] + str[2] + str[0] + str[2] + str[1] + str[2]\ndef find_reversed(str):\n    '''\n    Write a python function to check if the given string is a reversed string or not.\n    '''\n    # print(str)\n    if str==str[::-1]:\n        return 1\n    else:\n        return 0\ndef find_rotations_first(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # print(str)\n    if len(str)==1:\n        return 0\n    if len(str)==2:\n        if str[0]==str[1]:\n            return 0\n        else:\n            return 1\n    if len(str)==3:\n        if str[0]==str[1] and str[0]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\n    if len(str)>3:\n        if str[0]==str[1] and str[1]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[0]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[1]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[0]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\ndef find_mirrors_first(str):\n    '''\n    Write a python function to find the mirror permutations of a string.\n    '''\n    if len(str)==1:\n        return str\n    if len(str)==2:\n        return str[0] + str[0] + str[1] + str[1] + str[0] + str[1]\n    if len(str)>2:\n        return str[0] + str[0] + str[1] + str[1] + str[2] + str[2] + str[1] + str[0] + str[0] + str[0] + str[1] + str[2] + str[0] + str[2] + str[1] + str[2]\ndef find_reversed_first(str):\n    '''\n    Write a python function to check if the given string is a reversed string or not.\n    '''\n    if str==str[::-1]:\n        return 1\n    else:\n        return 0\ndef find_rotations_second(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # print(str)\n    if len(str)==1:\n        return 0\n    if len(str)==2:\n        if str[0]==str[1]:\n            return 0\n        else:\n            return 1\n    if len(str)==3:\n        if str[0]==str[1] and str[0]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\n    if len(str)>3:\n        if str[0]==str[1] and str[1]==str[2]:\n            return 1\n        elif str[0]==str[1] and str[2]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[0]:\n            return 1\n        elif str[0]==str[2] and str[1]==str[1]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[0]:\n            return 1\n        elif str[1]==str[2] and str[0]==str[1]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[0]:\n            return 1\n        elif str[2]==str[0] and str[1]==str[1]:\n            return 1\n        else:\n            return 2\ndef find_mirrors_second(str):\n    '''\n    Write a python function to find the mirror permutations of a string.\n    '''\n    if len(str)==1:\n        return str\n    if len(str)==2:\n        return str[0] + str[0] + str[1] + str[1] + str[0] + str[1]\n    if len(str)>2:\n        return str[0] + str[0] + str[1] + str[1] + str[2] + str[2] + str[1] + str[0] + str[0] + str[0] + str[1] + str[2] + str[0] + str[2] + str[1] + st"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Get the size of the string\n    n = len(str)\n    #Initialize count as 0\n    count = 0\n    #The array for storing the index of characters\n    ind = [0]*n\n    #The array for storing the count of characters\n    cnt = [0]*n\n    #The array for storing the count of pairs of characters\n    p = [0]*n\n    #Sorting the string in decreasing order\n    for i in range(0,n):\n        ind[i] = i\n        cnt[i] = 1\n    #Sort the string in increasing order\n    for i in range(0,n):\n        for j in range(0,n):\n            if(str[ind[j]] > str[ind[i]]):\n                ind[i] = ind[j]\n                cnt[i] = cnt[j]+1\n    #Find the minimum number of rotations\n    for i in range(0,n):\n        p[ind[i]] = cnt[i]\n    for i in range(0,n):\n        if(p[ind[i]] == 1):\n            count+=1\n        else:\n            count+=p[ind[i]]\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    import collections\n    q = collections.deque()\n    q.append(str)\n    visited = set()\n    while q:\n        s = q.popleft()\n        if s in visited:\n            continue\n        if len(s) == len(str):\n            return 0\n        visited.add(s)\n        for i in range(len(s)):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                if s[i] == c:\n                    continue\n                q.append(s[:i] + c + s[i+1:])\n    return -1\n"
    }
]