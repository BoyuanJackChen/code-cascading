[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # YOUR CODE HERE\n    list1 = [0]*(len(test_tup1))\n    list2 = [0]*(len(test_tup2))\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]==test_tup2[j]:\n                list1[i]=test_tup1[i]\n                list2[j]=test_tup2[j]\n            else:\n                if list1[i]==list2[j]:\n                    list1[i]=list2[j]\n                    list2[j]=list2[j]\n    return list1, list2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = [i for i in test_tup1]\n    test_list2 = [i for i in test_tup2]\n    print(test_list1, test_list2)\n    print(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # variables\n    list_1 = test_tup1\n    list_2 = test_tup2\n    \n    # logic\n    l1_1 = 0\n    l2_1 = 0\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2[i]:\n            shared_elements += 1\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # your code goes here\n    # process: process the list\n    # use the function from earlier and return the list of shared elements\n    # use the same approach as in previous exercises\n    # pass in a list of tuples\n    # convert the tuples into a list\n    # return the list\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = test_tup1\n    list2 = test_tup2\n    \n    return list1.intersection(list2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Write your code here\n    sharper = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i==j:\n                sharper.append(i)\n    return sharper\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Write your code here\n    if len(test_tup1) == len(test_tup2):\n        return (test_tup1[0] == test_tup2[0])\n    else:\n        return False\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # TODO: modify to pass list\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = test_tup1[:]\n    test_list2 = test_tup2[:]\n    print(\"List1: \" + str(test_list1))\n    print(\"List2: \" + str(test_list2))\n    return\n    \n    #print(test_tup1[:])\n    #print(test_tup2[:])\n    \n    #shared_elems = []\n    #for x in test_tup1[:]:\n    #    if x in test_tup2[:]:\n    #        shared_elems.append(x)\n    #return shared_elems\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return 0\n    \n    for x in range(2, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return 1\n    return 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    elif n > 3 and n % 2 == 0:\n        return False\n    elif n > 3 and n % 2 == 1:\n        return True\n    elif n > 3 and n % 2 == 0 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 0 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 0 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 0 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 1 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 1 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 1 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 1 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 2 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 2 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 2 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 2 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 3 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 3 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 3 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 3 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 4 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 4 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 4 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 4 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 4 and n % 3 == 4:\n        return False\n    elif n > 3 and n % 2 == 5 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 5 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 5 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 5 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 5 and n % 3 == 4:\n        return False\n    elif n > 3 and n % 2 == 5 and n % 3 == 5:\n        return True\n    elif n > 3 and n % 2 == 6 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 6 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 6 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 6 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 6 and n % 3 == 4:\n        return False\n    elif n > 3 and n % 2 == 6 and n % 3 == 5:\n        return True\n    elif n > 3 and n % 2 == 6 and n % 3 == 6:\n        return False\n    elif n > 3 and n % 2 == 7 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 7 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 7 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 7 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 7 and n % 3 == 4:\n        return False\n    elif n > 3 and n % 2 == 7 and n % 3 == 5:\n        return True\n    elif n > 3 and n % 2 == 7 and n % 3 == 6:\n        return False\n    elif n > 3 and n % 2 == 7 and n % 3 == 7:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    elif n > 3 and n % 2 == 0:\n        return False\n    elif n > 3 and n % 2 == 1:\n        return True\n    elif n > 3 and n % 2 == 0 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 0 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 0 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 0 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 1 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 1 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 1 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 2 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 2 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 2 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 2 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 3 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 3 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 3 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 3 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 4 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 4 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 4 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 4 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 4 and n % 3 == 4:\n        return False\n    elif n > 3 and n % 2 == 5 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 5 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 5 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 5 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 5 and n % 3 == 4:\n        return False\n    elif n > 3 and n % 2 == 5 and n % 3 == 5:\n        return True\n    elif n > 3 and n % 2 == 6 and n % 3 == 0:\n        return False\n    elif n > 3 and n % 2 == 6 and n % 3 == 1:\n        return True\n    elif n > 3 and n % 2 == 6 and n % 3 == 2:\n        return False\n    elif n > 3 and n % 2 == 6 and n % 3 == 3:\n        return True\n    elif n > 3 and n % 2 == 6 and n % 3 == 4:\n        return False\n    elif n > 3 and n % 2 == 6 and n % 3 == 5:\n        return True\n    elif n > 3 and n % 2 == 6 and n % 3 == 6:\n        return False\n    elif n > 3 and n % 2 == 7 and n % 3 == 0:\n        return False\n    elif n > 3 and n "
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return n < 2 or n % 2 == 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n is 1 then you are NOT not prime\n    if n == 1:\n        return False\n    # check if n is greater than 1\n    if n > 1:\n        # check if the next number is a divisor\n        if n % 2 == 0:\n            return False\n        # if n is divisible by 2 it's a prime number\n        else:\n            for i in range(3, int(math.sqrt(n)) + 1, 2):\n                if n % i == 0:\n                    return False\n    else:\n        return True\n    return True\ndef count_prime_factors(n):\n    '''\n    Count the number of prime factors of a number.\n    '''\n    # base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # number of factors\n    factors = 0\n    # divide number by each factor\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n            factors += 1\n        else:\n            n = n * 3 + 1\n            factors += 1\n    # return number of factors\n    return factors\ndef prime_factors(n):\n    '''\n    Count the number of prime factors of a number.\n    '''\n    # base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # count factors\n    factors = 0\n    # check if the number is divisible by 2\n    if n % 2 == 0:\n        return 0\n    # if the number is divisible by 3,\n    # then there are no prime factors\n    if n % 3 == 0:\n        return 0\n    # loop through dividing the number\n    # by 3\n    while n!= 1:\n        if n % 3 == 0:\n            n = n / 3\n            factors += 1\n        else:\n            n = n * 5 + 1\n            factors += 1\n    # return the number of factors\n    return factors\ndef main():\n    '''\n    Function to find the sum of all prime factors of a given number.\n    '''\n    # take input from the user\n    n = int(input(\"Enter a number: \"))\n    print(\"The sum of all prime factors of the number is: \")\n    # check if n is a prime number\n    if is_not_prime(n):\n        print(\"The number is not a prime number.\")\n        return\n    # if the n is not prime\n    if n > 1:\n        print(\"The number is a prime number.\")\n    else:\n        print(\"The number is not a prime number.\")\n        return\n    # calculate the sum of all prime factors of the number\n    print(f\"The sum of all prime factors of the number is: {count_prime_factors(n)}\")\n    print(\"Thank you for using our calculator.\")\nmain("
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2 or n%2==0:\n        return True\n    if n<=2:\n        return False\n    \n    if n%3==0:\n        return True\n    if n%5==0:\n        return True\n    \n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    return is_prime(n//3) and is_prime(n//5) and is_prime(n//7)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n==0 or n==1):\n        return True\n    if(n%2==0 or n==3):\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Count the factors of n\n    '''\n    count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                break\n    return count\ndef a_star(src, dest):\n    '''\n    The A* algorithm for a given source vertex and destination vertex\n    '''\n    closed = [False] * src\n    open = [False] * src\n    w = [0] * src\n    f = [0] * src\n    g = [0] * src\n    b = [0] * src\n    h = [0] * src\n    for i in range(src):\n        closed[i] = False\n        open[i] = True\n        w[i] = 0\n        f[i] = 10**9\n        g[i] = 0\n        b[i] = 0\n        h[i] = 0\n    q = [0] * src\n    visited = [False] * src\n    final_path = []\n    while True:\n        if len(final_path)!= 0:\n            break\n        for i in range(src):\n            if open[i] == True and closed[i] == False:\n                path = final_path[:len(final_path) - 1]\n                print(path)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                path.append(i)\n                print(path)\n                print(path)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n                print(src)\n                print(i)\n                print(closed)\n                print(open)\n                print(final_path)\n                print(visited)\n                print(closed)\n                print(i)\n            "
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    n = len(nums)\n    while n>0:\n        x = hq.heappop(nums)\n        heapq.heappush(nums,hq.heappop(nums))\n        n -= 1\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    queue = []\n    for num in nums:\n        heapq.heappush(queue, (num,n))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort(reverse=True)\n    max_num = nums[0]\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,-num)\n        if -max_num < num:\n            max_num = num\n    return max_num\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    nums.sort()\n    min_num = nums[0]\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,-num)\n        if num < min_num:\n            min_num = num\n    return min_num\ndef heapsort(nums):\n    '''\n    A built-in function to sort an array in ascending order.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        heapq.heapify(nums)\n        for j in range(n-1-i-1):\n            if nums[j] < nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n            heapq.heapify(nums)\ndef quick_sort(nums):\n    '''\n    A standard-sort algorithm that assumes that the input is sorted.\n    '''\n    if len(nums) < 2:\n        return nums\n    def _quick_sort(array, left, right):\n        if left < right:\n            mid = left + (right - left) // 2\n            _quick_sort(array, left, mid)\n            _quick_sort(array, mid + 1, right)\n            return array\n    return _quick_sort(nums,0,len(nums)-1)\ndef quick_sort_recursive(nums):\n    '''\n    Recursive version of quick_sort\n    '''\n    def _quick_sort(array, left, right):\n        if left < right:\n            mid = left + (right - left) // 2\n            _quick_sort(array, left, mid)\n            _quick_sort(array, mid + 1, right)\n            _quick_sort(array, left, right)\n    _quick_sort(nums,0,len(nums)-1)\ndef quick_sort_largest(nums):\n    '''\n    A standard-sort algorithm that assumes that the input is sorted.\n    '''\n    return heap_queue_largest(nums,len(nums))\ndef quick_sort_smallest(nums):\n    '''\n    A standard-sort algorithm that assumes that the input is sorted.\n    '''\n    return heap_queue_smallest(nums,len(nums))"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for num in nums:\n        heapq.heappush(hq,-num)\n    for i in range(n):\n        heapq.heappop(hq)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    for i in range(n):\n        heapq.heappush(hq,-nums[i])\n    return [i for i in hq[::-1]]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        \n    return hq\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(nums[i])\n        \n    return hq\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    heap = []\n    for i in nums:\n        heapq.heappush(heap,[-i,i])\n    \n    res = []\n    while heap:\n        val,nxt = heapq.heappop(heap)\n        res.append(val)\n        if n > 0:\n            if n == nxt:\n                n -= 1\n            else:\n                n -= 1\n                heapq.heappush(heap,[nxt,nxt])\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq_nums=[]\n    for num in nums:\n        if hq_nums==[]:\n            hq_nums.append(num)\n        elif num>hq_nums[0]:\n            hq_nums.append(num)\n        else:\n            pass\n    return hq_nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for n in nums:\n        heapq.heappush(heap,n)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def is_heap_sorted(nums):\n        '''\n        Returns true if all numbers in the list are less than or equal to 0, false otherwise.\n        '''\n        for num in nums:\n            if num < 0: return False\n        return True\n    \n    def heapify(nums,n,i):\n        '''\n        Finds the largest element from the given list of numbers and adds it to the stack, then moves the top of the stack to its appropriate place.\n        '''\n        smallest_number = nums[0]\n        index = 0\n        for i in range(n):\n            if smallest_number < nums[i]:\n                smallest_number = nums[i]\n                index = i\n        nums[i],nums[index] = smallest_number,nums[index]\n        heapq.heapify(nums)\n    \n    def heap_sort(nums):\n        '''\n        Sorts the given list in descending order.\n        '''\n        if not is_heap_sorted(nums): return nums\n        for i in range(len(nums)-1,0,-1):\n            heapq.heapify(nums)\n            heapq.heapify(nums)\n            nums[0],nums[i] = nums[i],nums[0]\n        return nums\n    \n    heap_sort(nums)\n    return heapq.nlargest(n,nums)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0):\n        return True\n    elif (x == 1):\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n    "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 : \n        return False\n    elif x % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0): \n        return False\n    for i in range (0,8): \n        if (x & 1) == 1: \n            if x == 0: \n                return True\n            else: \n                x = x>>1\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_Power_Of_Two_and_Not_Zero (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position and not zero.\n    '''\n    if x > 0 and x < 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_Prime(x):\n    '''\n    Write a python function to check whether the input is a prime number or not.\n    '''\n    if x == 2 or x == 3 or x == 5 or x == 7:\n        return True\n    elif x < 2 or x % 2 == 0:\n        return False\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True\n    \n    \ndef is_Prime_and_Not_Zero(x):\n    '''\n    Write a python function to check whether the input is a prime number and not zero.\n    '''\n    if is_Prime(x):\n        return False\n    else:\n        return True\n    \n    \ndef test(x):\n    \"\"\"\n    print \"Test case\", x\n    \"\"\"\n    test_1 = \" \"\n    test_2 = \"*\"\n    test_3 = \"*\"\n    test_4 = \"*\"\n    test_5 = \"*\"\n    test_6 = \"*\"\n    test_7 = \"*\"\n    test_8 = \"*\"\n    test_9 = \"*\"\n    test_10 = \"*\"\n    test_11 = \"*\"\n    test_12 = \"*\"\n    test_13 = \"*\"\n    test_14 = \"*\"\n    test_15 = \"*\"\n    test_16 = \"*\"\n    test_17 = \"*\"\n    test_18 = \"*\"\n    test_19 = \"*\"\n    test_20 = \"*\"\n    test_21 = \"*\"\n    test_22 = \"*\"\n    test_23 = \"*\"\n    test_24 = \"*\"\n    test_25 = \"*\"\n    test_26 = \"*\"\n    test_27 = \"*\"\n    test_28 = \"*\"\n    test_29 = \"*\"\n    test_30 = \"*\"\n    test_31 = \"*\"\n    test_32 = \"*\"\n    test_33 = \"*\"\n    test_34 = \"*\"\n    test_35 = \"*\"\n    test_36 = \"*\"\n    test_37 = \"*\"\n    test_38 = \"*\"\n    test_39 = \"*\"\n    test_40 = \"*\"\n    test_41 = \"*\"\n    test_42 = \"*\"\n    test_43 = \"*\"\n    test_44 = \"*\"\n    test_45 = \"*\"\n    test_46 = \"*\"\n    test_47 = \"*\"\n    test_48 = \"*\"\n    test_49 = \"*\"\n    test_50 = \"*\"\n    test_51 = \"*\"\n    test_52 = \"*\"\n    test_53 = \"*\"\n    test_54 = \"*\"\n    test_55 = \"*\"\n    test_56 = \"*\"\n    test_57 = \"*\"\n    test_58 = \"*\"\n    test_59 = \"*\"\n    test_60 = \"*\"\n    test_61 = \"*\"\n    test_62 = \"*\"\n    test_63 = \"*\"\n    test_64 = \"*\"\n    test_65 = \"*\"\n    test_66 = \"*\"\n    test_67 = \"*\"\n    test_68 = \"*\"\n    test_69 = \"*\"\n    test_70 = \"*\"\n    test_71 = \"*\"\n    test_72 = \"*\"\n    test_73 = \"*\"\n    test_74 = \"*\"\n    test_75 = \"*\"\n    test_76 = \"*\"\n    test_77 = \"*\"\n    test_78 = \"*\"\n    test_79 = \"*\"\n    test_80 = \"*\"\n    test_81 = \"*\"\n    test_82 = \"*\"\n    test_83 = \"*\"\n    test_84 = \"*\"\n    test_85 = \"*\"\n    test_86 = \"*\"\n    test_87 = \"*\"\n    test_88 = \"*\"\n    test_89 = \"*\"\n    test_90 = \"*\"\n    test_91 = \"*\"\n    test_92 = \"*\"\n    test_93 = \"*\"\n    test_94 = \"*\"\n    test_95 = \"*\"\n    test_96 = \"*\"\n    test_97 = \"*\"\n    test_98 = \"*\"\n    test_99 = \"*\"\n    test_100 = \"*\"\n    test_101 = \"*\"\n    test_102 = \"*\"\n    test_103 = \"*\"\n    test_104 = \"*\"\n    test_105 = \"*\"\n    test_106 = \"*\"\n    test_107 = \"*\"\n    test_108 = \"*\"\n    test_109 = \"*\"\n    test_110 = \"*\"\n    test_111 = \"*\"\n    test_112 = \"*\"\n    test_113 = \"*\"\n    test_114 = \"*\"\n    test_115 = \"*\"\n    test_116 = \"*\"\n    test_117 = \"*\"\n    test_118 = \"*\"\n    test_119 = \"*\"\n    test_120 = \"*\"\n    test_121 = \"*\"\n    test_122 = \"*\"\n    test_123 = \"*\"\n    test_124 = \"*\"\n    test_125 = \"*\"\n    test_126 = \"*\"\n    test_127 = \"*\"\n    test_128 = \"*\"\n    test_129 = \"*\"\n    test_130 = \"*\"\n    test_131 = \"*\"\n    test_132 = \"*\"\n    test_133 = \"*\"\n    test_134 = \"*\"\n    test_135 = \"*\"\n    test_136 = \"*\"\n    test_137 = \"*\"\n    test_138 = \"*\"\n    test_139 = \"*\"\n    test_140 = \"*\"\n    test_141 = \"*\"\n    test_142 = \"*\"\n    test_143 = \"*\"\n    test_144 = \"*\"\n    test_145 = \"*\"\n    test_146 = \"*\"\n    test_147 = \"*\"\n    test_148 = \"*\"\n    test_149 = \"*\"\n    test_150 = \"*\"\n    test_151 = \"*\"\n    test_152 = \"*\"\n    test_153 = \"*\"\n    test_154 = \"*\"\n    test_155 = \"*\"\n    test_156 = \"*\"\n    test_157 = \"*\"\n    test_158 = \"*\"\n    test_159 = \"*\"\n    test_160 = \"*\"\n    test_161 = \"*\"\n    test_162 = \"*\"\n    test_163 = \"*\"\n    test_164 = \"*\"\n    test_165 = \"*\"\n    test_166 = \"*\"\n    test_167 = \"*\"\n    test_168 = \"*\"\n    test_169 = \"*\"\n    test_170 = \"*\"\n    test_171 = \"*\"\n    test_172 = \"*\"\n    test_173 = \"*\"\n    test_174 = \"*\"\n    test_175 = \"*\"\n    test_176 = \"*\"\n    test_177 = \"*\"\n    test_178 = \"*\"\n    test_179 = \"*\"\n    test_180 = \"*\"\n    test_181 = \"*\"\n    test_182 = \"*\"\n    test_183 = \"*\"\n    test_184 = \"*\"\n    test_185 = \"*\"\n    test_186 = \"*\"\n    test_187 = \"*\"\n    test_188 = \"*\"\n    test_189 = \"*\"\n    test_190 = "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x>0):\n        return False\n    elif (x<0):\n        return True\n    else:\n        return (x**2)%1==1\n    \n    \nprint(is_Power_Of_Two(2))\nprint(is_Power_Of_Two(16))"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x in set(range(2, x)) : return False\n    return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num1 = str(x)\n    num2 = str(int(x))\n    if len(num1) == len(num2):\n        if num1[0]!= num2[0]:\n            return False\n        elif num1[1]!= num2[1]:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x%2==0"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # case insensitive search\n    text_lower = text.lower()\n    substring = '\\w+'\n    substring = substring.split(' ')\n    result = []\n    for word in substring:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_string = \"\"\n    # find all words with at least four characters\n    for i in range(len(text)):\n        # if length is 4 or less\n        if len(text[i]) >= 4:\n            # add string to long_string\n            long_string += text[i]\n    # return long_string\n    return long_string\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w+', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    for word in text.split():\n        word_len = len(word)\n        if word_len >= 4:\n            long_words.append(word)\n    return(long_words)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'(\\w+)[^a-z]')\n    return pattern.findall(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[A-Za-z][A-Za-z0-9_]*[A-Za-z0-9_]*'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_word = []\n    i = 0\n    while i < len(text):\n        if len(text[i:i+4]) >= 4:\n            long_word.append(text[i:i+4])\n        i+=4\n    return long_word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = re.findall(r\"[A-Za-z0-9'_]\", text)\n    for word in word_list:\n        if len(word) <= 4:\n            yield word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_re = re.compile(r'(\\w)(\\d)(\\w+)')\n    return (match.group(2) for match in char_re.finditer(text))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    line = re.findall(r'[a-z]+', text)\n    return line\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for element in nums:\n        squares.append(element**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num*num)\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    from math import sqrt\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list=[]\n    square_list=[]\n    for i in range(len(nums)):\n        new_list.append(nums[i]**2)\n    square_list=new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # declaring an empty string \n    empty = str\n    # looping for the given string\n    for i in range(len(empty) - 1): \n        # checking if the given string is greater than the last position\n        if empty[i] == empty[i + 1]: \n            # adding a 1 to the ith position to get the same string \n            empty[i] = empty[i] + 1\n        else: \n            break\n    # printing the whole string \n    print(empty)\n    # printing the minimum number of rotations required \n    print(str)\n    # taking the minimum number of rotations \n    print(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Calculate the number of rotations needed\n    num_rotations = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            num_rotations += 1\n    # If the string length is the same as the rotation number, then there is no need to calculate this number\n    if num_rotations == len(str)-1:\n        return 0\n    # Otherwise, check if the rotation number is greater than the number of rotations\n    else:\n        return num_rotations + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def same_string(string_1, string_2): \n        '''\n        Return True if string_2 is equal to string_1, otherwise return False.\n        ''' \n        \n        # Iterate through string_2 to find all occurrences of the substring \n        for i in range(len(string_2)): \n            if (string_1[i:i+len(string_2)] == string_2): \n                return True \n        return False \n    \n    if same_string(str, str): \n        return 0\n    else: \n        return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    i = 0\n    while i < len(str):\n        rotations += str[i - len(str) + 1:i + 1].count('T')\n        i += 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    \n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            count += 1\n        else:\n            if count > 0:\n                count -= 1\n            else:\n                return count\n    return count\n        \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    temp = str[0]\n    for i in range(1, len(str)):\n        if(str[i]!= temp):\n            temp = str[i]\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == '': \n        return 0\n    result = []\n    for i in range(0, len(str)-1): \n        rotations = 0\n        # Checking for right side of string\n        if str[i] == str[i+1]: \n            rotations += 1\n        # Checking for left side of string\n        elif str[i]!= str[i+1]: \n            rotations += 1\n            if rotations > 1: \n                result.append(rotations)\n    if result == []: \n        result.append(1)\n    return min(result)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=0\n    for i in range(len(str)):\n        if str[i]!=str[i-1]:\n            n+=1\n    print(n)\n    return n \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str=str.lower()\n    arr=[]\n    for i in range(len(str)):\n        if i%2==0:\n            arr.append(str[i])\n    count=0\n    for i in range(len(arr)):\n        if arr[i]==arr[-i-1]:\n            count+=1\n    if count==len(arr):\n        print(len(arr))\n    else:\n        print(0)\n        return 0\nfind_Rotations('xyz'"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    ch = list(ch)\n    s.pop(0)\n    s.pop()\n    ch.pop(0)\n    return ''.join(s)\ndef remove_Dupl(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    ch = list(ch)\n    s.pop(0)\n    s.pop()\n    ch.pop(0)\n    return ''.join(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    s = list(s)\n    if ch in s[0]:\n        s.remove(s[0])\n        s.remove(s[-1])\n        return ''.join(s)\n    else:\n        return None\n        "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    n=len(s)\n    for i in range(n):\n        if (s[i]==ch):\n            n=n-1\n            i=i-1\n            break\n    return n\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s) \n    for i in range(len(s)): \n        if s[i] == ch: \n            if i==len(s)-1: \n                s.pop() \n            else: \n                s.pop(i+1) \n                s.pop(i) \n    return \"\".join(s) "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.lower()\n    if ch not in s:\n        return s\n    s = s.replace(ch,'')\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        n = s.count(ch)\n        if n>1:\n            for i in range(n-1):\n                s = s.replace(ch,\"\")\n        elif n==1:\n            s = s.replace(ch,\"\")\n        elif n==0:\n            pass\n    except:\n        pass\n    return s\n    \ndef check_Even(s):\n    '''\n    Write a python function to check if a string is Even.\n    '''\n    for i in range(len(s)):\n        if s[i] in \"EVEN\":\n            break\n    else:\n        return True\n    return False\n    \ndef is_Pangram(s):\n    '''\n    Write a python function to check if a string is a pangram or not.\n    '''\n    word = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s)):\n        if s[i] in word:\n            pass\n        else:\n            return False\n    return True\n    \ndef is_In_List(li,x):\n    '''\n    Write a python function to check if a given string is present in a given list.\n    '''\n    for i in range(len(li)):\n        if x == li[i]:\n            return True\n    return False\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return ''\n    if len(s)==1:\n        if s[0]==ch:\n            return ''\n        else:\n            return s[0]\n    else:\n        occ = s.count(ch)\n        if occ==1:\n            return s[0:occ-1]+s[occ+1:]\n        else:\n            return s[0:occ] + s[occ+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    s=s.replace(ch,'',1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        s = s[1:]\n    elif s[-1] == ch:\n        s = s[:-1]\n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos-1],s[pos]=s[pos],s[pos-1]\n    return \"\".join(s)\n    \n    \ndef add_Occ(s,ch): \n    '''\n    Write a python function to add the character ch in the middle of the string.\n    '''\n    s=list(s)\n    pos=len(s)//2\n    s[pos],s[pos+1]=s[pos+1],s[pos]\n    return \"\".join(s)\n    \n    \n    \ndef count_Occ(s): \n    '''\n    Write a python function to count the occurrences of given character.\n    '''\n    s=list(s)\n    count=0\n    for i in range(len(s)):\n        if s[i]==\"o\":\n            count+=1\n    return count\n    \n    \ndef count_Occ_2(s): \n    '''\n    Write a python function to count the occurrences of given character.\n    '''\n    s=list(s)\n    count=0\n    for i in range(len(s)):\n        if s[i]==\"o\":\n            count+=1\n            if count==1:\n                s[i],s[i+1]=\"o\",s[i+1]\n    return \"\".join(s)\n    \n    \ndef count_Occ_3(s): \n    '''\n    Write a python function to count the occurrences of given character.\n    '''\n    s=list(s)\n    count=0\n    for i in range(len(s)):\n        if s[i]==\"o\":\n            count+=1\n            if count==1:\n                s[i],s[i+1]=\"o\",s[i+1]\n            if i==0:\n                s[i],s[i+1]=\"o\",s[i+1]\n            if i==len(s)-1:\n                s[i],s[i-1]=\"o\",s[i-1]\n    return \"\".join(s)\n    \n    \n    \ndef insert_Occ(s,ch): \n    '''\n    Write a python function to insert the given character in the middle of the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos==-1:\n        return \"O\"+ch\n    s[pos],s[pos+1]=s[pos+1],s[pos]\n    return \"\".join(s)\n    \n    \ndef insert_Occ_2(s,ch): \n    '''\n    Write a python function to insert the given character in the middle of the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos==-1:\n        return \"O\"+ch\n    if pos==0:\n        return \"O\"+ch\n    if pos==len(s)-1:\n        return \"O\"+ch\n    s[pos],s[pos-1]=s[pos-1],s[pos]\n    return \"\".join(s)\n    \n    \ndef insert_Occ_3(s,ch): \n    '''\n    Write a python function to insert the given character in the middle of the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos==-1:\n        return \"O\"+ch\n    if pos==0:\n        return \"O\"+ch\n    if pos==len(s)-1:\n        return \"O\"+ch\n    if pos==1:\n        return \"O\"+ch\n    s[pos],s[pos+1]=s[pos+1],s[pos]\n    return \"\".join(s)\n    \n    \n    \n    \ndef remove_Occ(s,ch): \n    '''\n    Write a python function to remove the occurrence of a given character from the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos-1],s[pos]=s[pos],s[pos-1]\n    return \"\".join(s)\n    \n    \ndef remove_Occ_2(s,ch): \n    '''\n    Write a python function to remove the occurrence of a given character from the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos+1],s[pos]=s[pos],s[pos+1]\n    return \"\".join(s)\n    \n    \ndef remove_Occ_3(s,ch): \n    '''\n    Write a python function to remove the occurrence of a given character from the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos-1],s[pos]=s[pos],s[pos-1]\n    return \"\".join(s)\n    \n    \n    \ndef remove_Occ_4(s,ch): \n    '''\n    Write a python function to remove the occurrence of a given character from the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos-1],s[pos]=s[pos],s[pos-1]\n    return \"\".join(s)\n    \n    \n    \ndef remove_Occ_5(s,ch): \n    '''\n    Write a python function to remove the occurrence of a given character from the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos-1],s[pos]=s[pos],s[pos-1]\n    return \"\".join(s)\n    \n    \n    \n    \ndef swap_Occ(s,ch,ch2): \n    '''\n    Write a python function to swap two occurrences of a given character in the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos],s[pos+1]=s[pos+1],s[pos]\n    return \"\".join(s)\n    \n    \n    \ndef swap_Occ_2(s,ch,ch2): \n    '''\n    Write a python function to swap two occurrences of a given character in the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos],s[pos+1]=s[pos+1],s[pos]\n    return \"\".join(s)\n    \n    \n    \ndef swap_Occ_3(s,ch,ch2): \n    '''\n    Write a python function to swap two occurrences of a given character in the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos],s[pos+1]=s[pos+1],s[pos]\n    return \"\".join(s)\n    \n    \n    \ndef swap_Occ_4(s,ch,ch2): \n    '''\n    Write a python function to swap two occurrences of a given character in the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos],s[pos+1]=s[pos+1],s[pos]\n    return \"\".join(s)\n    \n    \n    \ndef swap_Occ_5(s,ch,ch2): \n    '''\n    Write a python function to swap two occurrences of a given character in the string.\n    '''\n    s=list(s)\n    pos=s.index(ch)\n    if pos!=-1:\n        s[pos],s[pos+1]=s[pos+1],s[pos]\n    return \"\".join(s)\n    \n    \n    \ndef swap_Occ_6(s,ch,ch2): \n    '''\n    Write a python function to swap two occurrences of a given character in the string.\n    '''\n    s=lis"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    A = [[0 for i in range(len(M[0]))] for j in range(len(M))]\n    for i in range(len(M[0])):\n        for j in range(len(M)):\n            if M[j][i] > 0:\n                A[j][i] = M[j][i]\n    return A\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = sorted(M, key=lambda x: sum(x))\n    return M\n    \ndef print_matrix(M):\n    '''\n    Write a function to print a given matrix.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            print(M[i][j], end=' ')\n        print()\n    \n    \n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # The matrix is given as a list of lists\n    # A list in Python is a container which can hold other containers (e.g. array.array('i', []))\n    s = sum(M)\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = M[i][j]/s\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = []\n    for x in range(len(M)):\n        rows.append(sum(M[x]))\n    rows.sort()\n    return rows\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i].sort()\n        for j in range(i+1, n):\n            M[j].sort()\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort()\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    L = []\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            if M[i][j] == 0:\n                continue\n            l = i+1\n            r = len(M) - 1\n            while l < r:\n                if M[l][j] < M[r][j]:\n                    l += 1\n                elif M[l][j] > M[r][j]:\n                    r -= 1\n                else:\n                    M[l][j], M[r][j] = M[r][j], M[l][j]\n                    l += 1\n                    r -= 1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sum = []\n    for i in range(len(M)):\n        row_sum.append(sum(M[i]))\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_rows = []\n    for i in range(len(M)):\n        sum_rows.append(sum(M[i]))\n    return sorted(sum_rows)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1,len(M)):\n            if M[i][0] + M[j][0] > M[i][1] + M[j][1]:\n                M[i],M[j] = M[j],M[i]\n            else:\n                pass\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #For a solid prism\n    if(l==b) :\n        volume = h**3\n    #For a triangular prism\n    elif(l<=b) :\n        volume = ((h**3)/3) * (((l*h)**3)/6)\n    else :\n        volume = ((h**3)/3) * (((b*h)**3)/6)\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    r = h / 2 \n    v = 3 * r**2\n    for i in range(l-1) :\n        for j in range(b) : \n            for k in range(h) : \n                if (i==0) : \n                    for l in range(j,h) : \n                        if (k==0) :\n                            for m in range(l,h) : \n                                if (l==m) : \n                                    if (l+j==m+k) : \n                                        if (m==0) :\n                                            print(v)\n                                        else :\n                                            print(v-((m-0)*((m-0)*(l-j)*(l-j)*(l-j)*(l-j)*(l-j))))\n                                else : \n                                    if (l==m) : \n                                        print(v-((m-0)*((m-0)*(l-j)*(l-j)*(l-j)*(l-j)*(l-j))))\n                                    else : \n                                        print(v-((m-0)*((l-j)*(l-j)*(l-j)*(l-j)*(l-j)*(l-j)))\n    return(v)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (b*h) + (2*l*(h))\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l <= 0 or b <= 0 or h <= 0 : \n        print(\"Error: You have to write a valid input.\")\n        return -1\n    \n    if l > h : \n        print(\"Error: Not the right prism.\")\n        return -1\n    \n    prism = []\n    \n    for i in range(l,h+1) : \n        prism.append(i**3)\n    \n    volume = 0\n    for i in range(0, len(prism)-1) : \n        volume = volume + prism[i]\n    \n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = b*l\n    b = h*l\n    c = b*h\n    return round(((a*b*c)/(a+b+c)),1)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l>b or h>b:\n        return \"Can't find the volume of a triangle prism\"\n    elif h==l or l==b:\n        return h*h\n    else :\n        return h*((b+l)/2)*(b-l)/2\n    "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    from math import sqrt\n    volume = (l*h*b)**3\n    # If we have a known volume, return it\n    if volume > 0 : \n        return math.sqrt(volume)\n    else :\n        # Otherwise, try to calculate the volume from the unknown.\n        # Find the volume of the square root of the unknown.\n        from math import sqrt\n        return sqrt(abs(volume - sqrt(h**2 - l**2)))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0\n    if b == 0 : \n        return volume\n    elif h == 0 : \n        return volume\n    else : \n        for x in range(b,h+1) : \n            volume = volume + (b**2)*(1/(2*x)) \n        volume = volume + (h**2)*(1/(2*b)) \n        return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = l/2\n    b = b/2\n    h = h/2\n    a = (l*(l+h))**(0.5)\n    b = (l*(l+h))**(0.5)\n    c = (l*(l+h))**(0.5)\n    volume = 4*(a**3)*np.pi*(b**3)*(h**3)\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]'\n    if re.search(pattern, text.lower()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase = text.lower()\n    regex = '\\w+'\n    pattern = re.compile(regex, re.IGNORECASE)\n    pattern_with_underscores = re.compile(pattern, re.IGNORECASE)\n    if pattern_with_underscores.findall(text_lowercase):\n        return True\n    else:\n        return False\ndef text_punctuation_special_characters(text):\n    '''\n    Write a function that takes a string and outputs it after removing all punctuation characters and special characters.\n    '''\n    punctuation = \"!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\\t\\n\"\n    regex = '[' + punctuation + ']+'\n    pattern = re.compile(regex, re.IGNORECASE)\n    pattern_without_punctuation = re.compile(pattern, re.IGNORECASE)\n    text = pattern_without_punctuation.sub('', text)\n    return text\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<=_).+(?=\\_)')\n    return pattern.search(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z][A-Z][0-9]', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return ''.join(e for e in text if e.lower() in 'abcdefghijklmnopqrstuvwxyz') == text\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    if type(text)!= str:\n        return False\n    \n    #remove all numbers\n    text_list = re.split('[0-9]', text)\n    # remove all spaces\n    text_list_list = []\n    for i in text_list:\n        if i!= '':\n            text_list_list.append(i)\n    # remove any spaces and convert to lowercase\n    text_list_list_lower = []\n    for word in text_list_list:\n        word = word.lower()\n        word = word.replace(' ', '')\n        word = word.replace('\\n','')\n        word = word.replace('\\t','')\n        word = word.replace('\\t','')\n        word = word.replace('.','')\n        word = word.replace(',','')\n        word = word.replace('!','')\n        word = word.replace('?','')\n        word = word.replace('\"','')\n        word = word.replace('&','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('<','')\n        word = word.replace('>','')\n        word = word.replace('[','')\n        word = word.replace(']','')\n        word = word.replace('{','')\n        word = word.replace('}','')\n        word = word.replace('{','')\n        word = word.replace('}','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace(']','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('}','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('&','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('<','')\n        word = word.replace('>','')\n        word = word.replace('[','')\n        word = word.replace(']','')\n        word = word.replace('{','')\n        word = word.replace('}','')\n        word = word.replace('{','')\n        word = word.replace('}','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('&','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('}','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('&','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('}','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('&','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('&','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('&','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('&','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('&','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace(']','')\n        word = word.replace('[','')\n        word = word.replace('(','')\n        word = word.replace(')','')\n        word = word.replace('*','')\n        word = word.replace('+','')\n        word = word.replace('_','')\n        word = word.replace('$','')\n        word = word.replace('%','')\n        word = word.replace("
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    for word in text:\n        if word in 'abcdefghijklmnopqrstuvwxyz' or word in '0123456789':\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return any(c.isalpha() for c in text) and any(c.islower() for c in text) and any(c.isupper() for c in text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].islower():\n        return text_lowercase_underscore(text[1:])\n    else:\n        return False\ndef text_lowercase_double_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with and underscores and false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].islower():\n        return text_lowercase_double_underscore(text[1:])\n    else:\n        return False\ndef text_lowercase_one_character(text):\n    '''\n    Write a function to that returns true if the input string contains only a single character and false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha() and len(text)==1:\n        return True\n    else:\n        return False\ndef text_lowercase_space(text):\n    '''\n    Write a function that returns true if the input string contains all characters between whitespace.\n    '''\n    if text == '':\n        return False\n    if text[0].isspace():\n        return text_lowercase_space(text[1:])\n    else:\n        return False\ndef text_lowercase_one_character_multi_letter(text):\n    '''\n    Write a function that returns true if the input string contains only a single letter and multi-letter characters,\n    false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_one_character(text[1:])\n    else:\n        return False\ndef text_lowercase_one_character_multi_letter_multi_character(text):\n    '''\n    Write a function that returns true if the input string contains only a single letter and multi-letter characters and\n    multi-character characters, false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_one_character_multi_letter(text[1:])\n    else:\n        return False\ndef text_lowercase_multi_letter_one_character(text):\n    '''\n    Write a function that returns true if the input string contains a single letter and a single-letter character, false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_multi_letter_one_character(text[1:])\n    else:\n        return False\ndef text_lowercase_multi_letter_one_character_multi_letter(text):\n    '''\n    Write a function that returns true if the input string contains a single letter and a single-letter characters and\n    multi-character characters, false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_multi_letter_one_character_multi_letter(text[1:])\n    else:\n        return False\ndef text_lowercase_multi_letter_one_character_multi_letter_multi_character(text):\n    '''\n    Write a function that returns true if the input string contains a single letter and a single-letter characters,\n    multi-letter characters and multi-character characters, false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_multi_letter_one_character_multi_letter(text[1:])\n    else:\n        return False\ndef text_lowercase_multi_letter_one_character_multi_letter_multi_character(text):\n    '''\n    Write a function that returns true if the input string contains a single letter and a single-letter characters,\n    multi-letter characters and multi-character characters, and a multi-character characters, false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_multi_letter_one_character_multi_letter(text[1:])\n    else:\n        return False\ndef text_lowercase_multi_letter_one_character_multi_letter_multi_character(text):\n    '''\n    Write a function that returns true if the input string contains a single letter and a single-letter characters,\n    multi-letter characters and multi-character characters, and a multi-character characters, false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_multi_letter_one_character_multi_letter(text[1:])\n    else:\n        return False\ndef text_lowercase_multi_letter_one_character_multi_letter_multi_character(text):\n    '''\n    Write a function that returns true if the input string contains a single letter and a single-letter characters,\n    multi-letter characters and multi-character characters, and a multi-character characters, and a multi-character characters,\n    false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_multi_letter_one_character_multi_letter(text[1:])\n    else:\n        return False\ndef text_lowercase_one_character_one_character(text):\n    '''\n    Write a function that returns true if the input string contains only a single character and a single-character character,\n    false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_one_character(text[1:])\n    else:\n        return False\ndef text_lowercase_one_character_one_character_multi_letter(text):\n    '''\n    Write a function that returns true if the input string contains only a single character and a single-letter characters,\n    multi-letter characters, and a single-character characters, false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_one_character_one_character(text[1:])\n    else:\n        return False\ndef text_lowercase_one_character_one_character_multi_letter_multi_character(text):\n    '''\n    Write a function that returns true if the input string contains only a single character and a single-letter characters,\n    multi-letter characters, and a single-character characters, and a multi-character characters, false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_one_character_one_character(text[1:])\n    else:\n        return False\ndef text_lowercase_multi_letter_one_character_multi_letter_multi_character(text):\n    '''\n    Write a function that returns true if the input string contains a single letter and a single-letter characters,\n    multi-letter characters and multi-character characters, and a single-character characters and a single-character characters,\n    false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_multi_letter_one_character_multi_letter(text[1:])\n    else:\n        return False\ndef text_lowercase_one_character_multi_letter_one_character_multi_character(text):\n    '''\n    Write a function that returns true if the input string contains only a single character and a single-letter characters,\n    multi-letter characters and multi-character characters, and a single-character characters and a single-character characters,\n    false otherwise.\n    '''\n    if text == '':\n        return False\n    if text[0].isalpha():\n        return text_lowercase_one_character_multi_letter_one_character(text[1:])\n    else:\n        return False\ndef text_lowercase_one_character_multi_letter_one_character_multi_character(text):\n    '''\n    Write a function that returns true if the input string contains a single character and a single-letter characters,\n    multi-letter characters and multi-character characters, and a single-character characters and a single-character characters,\n    false otherwise.\n    '''\n    if text == '':\n        return False\n    if text"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if not (i.isalpha()):\n            return False\n    return True\ndef is_palindrome(text):\n    '''\n    Write a function that checks whether the input string is a palindrome.\n    '''\n    text = text.replace(\" \", \"\")\n    if text == text[::-1]:\n        return True\n    return False\ndef find_palindrome(text):\n    '''\n    Write a function that takes in a string of numbers and returns all numbers that are palindromes.\n    '''\n    palindrome = []\n    for i in range(len(text)):\n        palindrome.append(text[i])\n    palindrome = list(dict.fromkeys(palindrome))\n    for i in range(len(palindrome)):\n        if palindrome[i] == palindrome[::-1][i]:\n            palindrome.pop(i)\n    return palindrome\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return(4 * a ** 2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    a = float(input('please enter side length of a square: '))\n    perimeter = 4 * a\n    print(f'Perimeter of a square with side length of {a} is {perimeter}')\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a) is not int:\n        raise TypeError(\"a must be an integer\")\n    if a < 0:\n        raise ValueError(\"a must be positive\")\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square = a*a\n    return square\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    #your code here\n    return (4*a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_perimeter = 0\n    for i in range(1, a+1):\n        square_perimeter += i * i\n    return square_perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_perimeter = 0\n    for side in range(1, a + 1):\n        square_perimeter = side * side\n    return square_perimeter\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Write your code here.\n    res = []\n    for i in range(0, len(string)):\n        if string[i] not in res:\n            res.append(string[i])\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string[0] in 'abcdefghijklmnopqrstuvwxyz' and len(string)==1:\n        return string\n    else:\n        return list(string)\ndef list_to_str(list): \n    '''\n    Write a function that takes a list and returns a string with each element of the list separated by a space.\n    '''\n    if len(list) == 1:\n        return list[0]\n    else:\n        return (list[0] + \" \")\ndef str_list(string): \n    '''\n    Write a function to return the even elements of the list.\n    '''\n    if len(string) == 0:\n        return []\n    else:\n        string = list(string)\n        string[0] = string[0][::2]\n        return(list(string))\ndef reverse_string(string): \n    '''\n    Write a function to return the reverse of the input string.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        string = list(string)\n        string[-1] = string[-1][::-1]\n        return(list(string))\ndef count_tokens(string): \n    '''\n    Write a function to count the number of tokens in the input string.\n    '''\n    if len(string) == 0:\n        return 0\n    else:\n        string = list(string)\n        string[0] = string[0][::2]\n        string[-1] = string[-1][::-1]\n        return(len(string))\ndef is_prime(number): \n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if number<2: \n        return False\n    if number == 2: \n        return True\n    if number == 3: \n        return True\n    if number == 4: \n        return True\n    if number > 4: \n        for i in range(2, number): \n            if (number % i) == 0: \n                return False\n        return True\ndef prime_factorize(number): \n    '''\n    Write a function to find the factors of a number.\n    '''\n    if number == 0: \n        return []\n    elif number == 1: \n        return [1]\n    elif number == 2: \n        return [2]\n    elif number < 2 or number > 20: \n        return []\n    if number % 2 == 0: \n        return prime_factorize(number - 1) + prime_factorize(number - 2)\n    elif number % 2!= 0: \n        return prime_factorize(number - 1) + prime_factorize(number - 2)\ndef find_prime_factors(number): \n    '''\n    Write a function to find the factors of a number.\n    '''\n    if number == 0: \n        return []\n    elif number == 1: \n        return [1]\n    elif number == 2: \n        return [2]\n    elif number % 2 == 0: \n        return [number, number]\n    elif number % 2!= 0: \n        return [number, number]\n    elif number % 2 == 0 and number!= 2: \n        return [number]\ndef find_prime_factors_odd(number): \n    '''\n    Write a function to find the factors of a number.\n    '''\n    if number == 0: \n        return []\n    elif number == 1: \n        return [1]\n    elif number == 2: \n        return [2]\n    elif number % 2 == 0: \n        return [number, number]\n    elif number % 2!= 0: \n        return [number, number]\n    elif number % 2 == 0 and number!= 2: \n        return [number]\ndef find_prime_factors_even(number): \n    '''\n    Write a function to find the factors of a number.\n    '''\n    if number == 0: \n        return []\n    elif number == 1: \n        return [1]\n    elif number == 2: \n        return [2]\n    elif number % 2 == 0: \n        return [number, number]\n    elif number % 2!= 0: \n        return [number, number]\n    elif number % 2 == 0 and number!= 2: \n        return [number]\ndef remove_multiple_spaces(string): \n    '''\n    Write a function to remove multiple spaces from the input string.\n    '''\n    if string[0] =='':\n        return string[1:]\n    else:\n        return string\ndef make_list(string): \n    '''\n    Write a function to transform a string into a list.\n    '''\n    if string == '': \n        return []\n    else:\n        return(string)\ndef remove_spaces(string): \n    '''\n    Write a function to remove spaces from a string.\n    '''\n    if string[0] =='':\n        return string[1:]\n    else:\n        return string\ndef is_valid_filename(filename): \n    '''\n    Write a function to check if the string is a valid filename.\n    '''\n    if not os.path.isfile(filename): \n        return False\n    return True\ndef get_integer_from_string(string): \n    '''\n    Write a function to transform a string into an integer.\n    '''\n    if string == '': \n        return 0\n    else:\n        return int(string)\ndef get_string_from_integer(integer): \n    '''\n    Write a function to transform an integer into a string.\n    '''\n    if integer == 0: \n        return ''\n    else:\n        return int(integer)\ndef concat_list(list1, list2): \n    '''\n    Write a function to concatenate two lists.\n    '''\n    if len(list1)!= len(list2): \n        return 'Error'\n    return list(list1) + list(list2)\ndef concat_list_and_list(list1, list2): \n    '''\n    Write a function to concatenate two lists.\n    '''\n    if len(list1)!= len(list2): \n        return 'Error'\n    return concat_list(list1, list2)\ndef equal_sum(list1, list2): \n    '''\n    Write a function to compare two lists and returns true if they are equal sum.\n    '''\n    if len(list1)!= len(list2): \n        return 'Error'\n    return sum(list1) == sum(list2)\ndef greater_or_equal(list1, list2): \n    '''\n    Write a function to compare two lists and returns true if they are greater or equal.\n    '''\n    if len(list1)!= len(list2): \n        return 'Error'\n    return sum(list1) >= sum(list2)\ndef greater_or_equal_list(list1, list2): \n    '''\n    Write a function to compare two lists and returns true if they are greater or equal.\n    '''\n    if len(list1)!= len(list2): \n        return 'Error'\n    return sum(list1) >= sum(list2)\ndef less_or_equal(list1, list2): \n    '''\n    Write a function to compare two lists and returns true if they are less or equal.\n    '''\n    if len(list1)!= len(list2): \n        return 'Error'\n    return sum(list1) <= sum(list2)\ndef less_or_equal_list(list1, list2): \n    '''\n    Write a function to compare two lists and returns true if they are less or equal.\n    '''\n    if len(list1)!= len(list2): \n        return 'Error'\n    return sum(list1) <= sum(list2)\ndef greater_or_equal_list(list1, list2): \n    '''\n    Write a function to compare two lists and returns true if they are greater or equal.\n    '''\n    if len(list1)!= len(list2): \n        return 'Error'\n    return sum"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(map(chr, filter(lambda x: x in string, range(ord('a'), ord('z')+1))))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # list_of_string = list(string)\n    # string_index = list_of_string.index(string[0])\n    # for i in range(len(string)):\n    #     if string[i] == string[string_index]:\n    #         list_of_string[i] = \" \"\n    #     else:\n    #         string_index = string_index + 1\n    # return ''.join(list_of_string)\n    string_list = list(string)\n    index = 0\n    while index < len(string_list):\n        if string_list[index] == \" \":\n            string_list.pop(index)\n        index = index + 1\n    return string_list\n    \ndef list_to_str(list):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    string_list = \"\"\n    index = 0\n    while index < len(list):\n        string_list = string_list + list[index] + \" \"\n        index = index + 1\n    return string_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    mylist = []\n    for char in string:\n        if char in string:\n            mylist.append(char)\n    return mylist\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for char in string:\n        if char not in output:\n            output.append(char)\n    return output\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    print(list1)\n    list2 = list(string)\n    print(list2)\n    for i in range(len(list1)):\n        if list2[i] not in list1:\n            list1.remove(list2[i])\n    print(list1)\n    print(list2)\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = []\n    for char in string:\n        if char in list_of_chars:\n            continue\n        list_of_chars.append(char)\n    return list_of_chars\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in string[:len(string)]]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert arraynums == [1, 2, 5, 1, 3, 3, 5, 5, 7, 8, 2, 4, 6, 6]\n    assert len(arraynums) == 13\n    assert arraynums[0] == 1\n    assert arraynums[-1] == 8\n    assert arraynums[-2] == 2\n    assert arraynums[-4] == 3\n    assert arraynums[-7] == 3\n    assert arraynums[-8] == 5\n    assert arraynums[-9] == 7\n    assert arraynums[-10] == 6\n    assert arraynums[-11] == 6\n    assert arraynums[-12] == 8\n    assert len(set(arraynums)) == 4\n    assert len(set(arraynums[0:5])) == 2\n    assert len(set(arraynums[0:5:2])) == 2\n    assert len(set(arraynums[0:5:3])) == 2\n    assert len(set(arraynums[0:5:4])) == 2\n    assert len(set(arraynums[0:5:6])) == 3\n    assert len(set(arraynums[0:5:7])) == 2\n    assert len(set(arraynums[0:5:8])) == 2\n    assert len(set(arraynums[0:5:9])) == 1\n    assert len(set(arraynums[0:5:10])) == 1\n    assert len(set(arraynums[0:5:11])) == 1\n    assert len(set(arraynums[0:5:12])) == 1\n    assert len(set(arraynums[0:5:13])) == 1\n    assert len(set(arraynums[0:5:14])) == 1\n    assert len(set(arraynums[0:5:15])) == 1\n    assert len(set(arraynums[0:5:16])) == 2\n    assert len(set(arraynums[0:5:17])) == 1\n    assert len(set(arraynums[0:5:18])) == 1\n    assert len(set(arraynums[0:5:19])) == 1\n    assert len(set(arraynums[0:5:20])) == 1\n    assert len(set(arraynums[0:5:21])) == 1\n    assert len(set(arraynums[0:5:22])) == 1\n    assert len(set(arraynums[0:5:23])) == 1\n    assert len(set(arraynums[0:5:24])) == 1\n    assert len(set(arraynums[0:5:25])) == 1\n    assert len(set(arraynums[0:5:26])) == 1\n    assert len(set(arraynums[0:5:27])) == 1\n    assert len(set(arraynums[0:5:28])) == 1\n    assert len(set(arraynums[0:5:29])) == 1\n    assert len(set(arraynums[0:5:30])) == 1\n    assert len(set(arraynums[0:5:31])) == 1\n    assert len(set(arraynums[0:5:32])) == 1\n    assert len(set(arraynums[0:5:33])) == 1\n    assert len(set(arraynums[0:5:34])) == 1\n    assert len(set(arraynums[0:5:35])) == 1\n    assert len(set(arraynums[0:5:36])) == 1\n    assert len(set(arraynums[0:5:37])) == 1\n    assert len(set(arraynums[0:5:38])) == 1\n    assert len(set(arraynums[0:5:39])) == 1\n    assert len(set(arraynums[0:5:40])) == 1\n    assert len(set(arraynums[0:5:41])) == 1\n    assert len(set(arraynums[0:5:42])) == 1\n    assert len(set(arraynums[0:5:43])) == 1\n    assert len(set(arraynums[0:5:44])) == 1\n    assert len(set(arraynums[0:5:45])) == 1\n    assert len(set(arraynums[0:5:46])) == 1\n    assert len(set(arraynums[0:5:47])) == 1\n    assert len(set(arraynums[0:5:48])) == 1\n    assert len(set(arraynums[0:5:49])) == 1\n    assert len(set(arraynums[0:5:50])) == 1\n    assert len(set(arraynums[0:5:51])) == 1\n    assert len(set(arraynums[0:5:52])) == 1\n    assert len(set(arraynums[0:5:53])) == 1\n    assert len(set(arraynums[0:5:54])) == 1\n    assert len(set(arraynums[0:5:55])) == 1\n    assert len(set(arraynums[0:5:56])) == 1\n    assert len(set(arraynums[0:5:57])) == 1\n    assert len(set(arraynums[0:5:58])) == 1\n    assert len(set(arraynums[0:5:59])) == 1\n    assert len(set(arraynums[0:5:60])) == 1\n    assert len(set(arraynums[0:5:61])) == 1\n    assert len(set(arraynums[0:5:62])) == 1\n    assert len(set(arraynums[0:5:63])) == 1\n    assert len(set(arraynums[0:5:64])) == 1\n    assert len(set(arraynums[0:5:65])) == 1\n    assert len(set(arraynums[0:5:66])) == 1\n    assert len(set(arraynums[0:5:67])) == 1\n    assert len(set(arraynums[0:5:68])) == 1\n    assert len(set(arraynums[0:5:69])) == 1\n    assert len(set(arraynums[0:5:70])) == 1\n    assert len(set(arraynums[0:5:71])) == 1\n    assert len(set(arraynums[0:5:72])) == 1\n    assert len(set(arraynums[0:5:73])) == 1\n    assert len(set(arraynums[0:5:74])) == 1\n    assert len(set(arraynums[0:5:75])) == 1\n    assert len(set(arraynums[0:5:76])) == 1\n    assert len(set(arraynums[0:5:77])) == 1\n    assert len(set(arraynums[0:5:78])) == 1\n    assert len(set(arraynums[0:5:79])) == 1\n    assert len(set(arraynums[0:5:80])) == 1\n    assert len(set(arraynums[0:5:81])) == 1\n    assert len(set(arraynums[0:5:82])) == 1\n    assert len(set(arraynums[0:5:83])) == 1\n    assert len(set(arraynums[0:5:84])) == 1\n    assert len(set(arraynums[0:5:85])) == 1\n    assert len(set(arraynums[0:5:86])) == 1\n    assert len(set(arraynums[0:5:87])) == 1\n    assert len(set(arraynums[0:5:88])) == 1\n    assert len(set(arraynums[0:5:89])) == 1\n    assert len(set(arraynums[0:5:90])) == 1\n    assert len(set(arraynums[0:5:91])) == 1\n    assert len(set(arraynums[0:5:92])) == 1\n    assert len(set(arraynums[0:"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    count = 0\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = duplicate(arraynums)\n    assert result == None\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def duplicate_detection(arr):\n        arr.sort()\n        if len(arr) == 0:\n            return False\n        elif arr[0]!= arr[-1]:\n            return False\n        elif len(arr) == 1:\n            return True\n        else:\n            for i in range(0, len(arr) - 1):\n                if arr[i]!= arr[i + 1]:\n                    return True\n            return False\n        \n    print(duplicate_detection(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(any(nums) for nums in arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    import collections\n    def check(array, idx):\n        if idx >= len(array): return True\n        if array[idx]!= array[idx - 1]:\n            return False\n        return check(array, idx + 1)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = [1,1,1,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def is_duplicate(array):\n        return len(set(array)) == array.count(array[0])\n    return is_duplicate(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    print(f'nums = {nums}')\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Your code here\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 'wood' in str(type(x))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%2==0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%5 == 0: \n        return True\n    return False \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball='''\n    if x>=10000:\n        return True\n    else:\n        return False\n    '''\n    print(woodball)\n    return woodball\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==0:\n        return True\n    else:\n        if x%2==0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num > 2:\n        num = num - 2\n        rev(num)\n    else:\n        return num\n    print(num)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return 0\n    if num==1:\n        return 1\n    if num%2==0:\n        return 0\n    else:\n        return 1\n    \n    \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Initialize reverse_num to 0, and make a counter.\n    reverse_num = 0\n    counter = 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num = num[::-1]\n    reversed = ''\n    if num!= 0:\n        for x in range(0,len(num)):\n            if num[x] == '0':\n                reversed += '0'\n            elif num[x] == '1':\n                reversed += '1'\n            elif num[x] == '2':\n                reversed += '2'\n            elif num[x] == '3':\n                reversed += '3'\n            elif num[x] == '4':\n                reversed += '4'\n            elif num[x] == '5':\n                reversed += '5'\n            elif num[x] == '6':\n                reversed += '6'\n            elif num[x] == '7':\n                reversed += '7'\n            elif num[x] == '8':\n                reversed += '8'\n            elif num[x] == '9':\n                reversed += '9'\n            elif num[x] =='':\n                reversed +=''\n            elif num[x] == '.':\n                reversed += '.'\n        for y in range(len(reversed)-1,-1,-1):\n            if rev_num[y] == '.':\n                rev_num.remove(rev_num[y])\n    if rev_num == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num >= 0:\n        digit = num % 10\n        rev = rev * 10 + digit\n        num = num // 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = num % 10\n        num = num // 10\n    if rev_num == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num < 3:\n        return num % 2 == 0\n    \n    div = num % 2\n    if div == 0:\n        return rev(num // 2)\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num - 2*num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    rev = 0\n    while n>0:\n        rev = rev*10 + n%10\n        n = n//10\n    if rev == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse=0\n    while num:\n        reverse=reverse*10+num%10\n        num//=10\n    if reverse==num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Create an empty array to store the largest number.\n    # Create a temp array to store the largest number.\n    # Create a for loop to perform max of the digits.\n    # Now determine which number is larger.\n    \n    # Create a temp variable for the index.\n    # Create a temp variable for the new index.\n    # For each number that we find,\n    # add it to the temp array\n    # if the temp array is not empty and the number is greater than the largest number.\n    # Add the new number to the list of numbers.\n    # Return the largest number.\n    \n    # Initialize the max number to 0.\n    # Start at the index\n    # set the largest number to the number at index.\n    # Now repeat the loop for each number\n    # and find the largest number\n    # if the number is greater,\n    # add it to the temp array\n    # if the number is not greater,\n    # add it to the list of numbers.\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(0, len(arr)):\n        if arr[i] > max_num : \n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n < 4 : \n        return 0\n    dp = [0 for i in range(n)]\n    for i in range(1, n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] :\n                dp[i] = max(arr[j]+dp[i], dp[i])\n    return max(dp)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 :\n        return arr[0]\n    else :\n        last_digit = arr[-1]\n        for i in range(len(arr) - 1) :\n            if arr[i] > last_digit :\n                last_digit = arr[i]\n        return last_digit\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n    elif arr[0] == arr[1]:\n        return arr\n    else:\n        num = []\n        for i in range(2, len(arr)):\n            if arr[i] == arr[i - 1] :\n                num.append(arr[i - 1])\n                num.append(arr[i])\n                num.append(arr[i])\n                num.append(arr[i - 1])\n                break\n            else:\n                num.append(arr[i - 1])\n        num.append(arr[i])\n        return num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    if len(arr) == 3:\n        return max(arr)\n    max_num = arr[0]\n    for num in arr[1:]:\n        max_num = max(max_num, num)\n    return max_num\n        \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maximum = 0\n    for number in range(0,len(arr)):\n        if number!= 0:\n            for digit in str(arr[number-1]):\n                if int(digit) > maximum:\n                    maximum = int(digit)\n    return maximum\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(len(arr)) : \n        if arr[i] > max : \n            max = arr[i]\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr : \n        return 0\n    stack = []\n    max_num = arr[0]\n    curr_num = arr[0]\n    for i in range(1, len(arr)) : \n        while stack and curr_num < stack[-1] : \n            stack.pop() \n        if curr_num > max_num :\n            max_num = curr_num\n        stack.append(arr[i])\n        curr_num = arr[i]\n    while stack : \n        stack.pop() \n    return max_num \n        \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    if not arr : \n        return 0\n    stack = []\n    min_num = arr[0]\n    curr_num = arr[0]\n    for i in range(1, len(arr)) : \n        while stack and curr_num > stack[-1] : \n            stack.pop() \n        if curr_num < min_num :\n            min_num = curr_num\n        stack.append(arr[i])\n        curr_num = arr[i]\n    while stack : \n        stack.pop() \n    return min_num \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Iterate through array\n    for x in range(len(arr)):\n        # Find the maximum number\n        if arr[x] > arr[x+1]:\n            max_number = arr[x]\n        elif arr[x] == arr[x+1]:\n            if arr[x] > arr[x+2]:\n                max_number = arr[x]\n            else:\n                max_number = arr[x+1]\n        # If the maximum number is larger than the next maximum number,\n        # the next maximum number will be assigned to the maximum number\n        else:\n            max_number = arr[x+1]\n            \n    return max_number\n    "
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # x = int(input(\"Enter a number: \"))\n    # y = int(input(\"Enter another number: \"))\n    if x > y :\n        print(\"Sign of x is greater than y\")\n    elif x < y :\n        print(\"Sign of x is lesser than y\")\n    else :\n        print(\"Both are equal\")\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return True\n    elif y>x:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    l_sign = []\n    r_sign = []\n    for i in range(len(x)):\n        if x[i] < 0:\n            l_sign.append(x[i])\n        else:\n            r_sign.append(x[i])\n    for i in range(len(y)):\n        if y[i] < 0:\n            r_sign.append(y[i])\n        else:\n            l_sign.append(y[i])\n    if l_sign[0]!= l_sign[1] and l_sign[0]!= l_sign[2] and l_sign[0]!= l_sign[3] and l_sign[0]!= l_sign[4] and l_sign[0]!= l_sign[5] and l_sign[0]!= l_sign[6] and l_sign[0]!= l_sign[7] and l_sign[0]!= l_sign[8] and l_sign[0]!= l_sign[9]:\n        return True\n    elif r_sign[0]!= r_sign[1] and r_sign[0]!= r_sign[2] and r_sign[0]!= r_sign[3] and r_sign[0]!= r_sign[4] and r_sign[0]!= r_sign[5] and r_sign[0]!= r_sign[6] and r_sign[0]!= r_sign[7] and r_sign[0]!= r_sign[8] and r_sign[0]!= r_sign[9] and r_sign[0]!= r_sign[10] and r_sign[0]!= r_sign[11]:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0: \n        return False \n    if y < 0: \n        return True\n    if x > 0 and y > 0: \n        return True\n    if x < 0 and y < 0: \n        return True\n    if x > 0 and y > 0: \n        return False\n    if x < 0 and y < 0: \n        return False\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    try: \n        a = abs(x)\n        b = abs(y)\n    except:\n        return 'Invalid Input!'\n    if a > b: \n        return 'Positive'\n    if a < b: \n        return 'Negative'\n    return 'No Match'\n    \ndef result(a,b): \n    '''\n    Write a python function to check whether the given two integers have same values or not.\n    '''\n    try: \n        a = abs(a)\n        b = abs(b)\n    except:\n        return 'Invalid Input!'\n    if a==b: \n        return 'No Match'\n    if a > b: \n        return 'Positive'\n    if a < b: \n        return 'Negative'\n    return 'Match'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # print(\"y = \",y)\n    x = list(map(str,x))\n    # print(x)\n    y = list(map(str,y))\n    # print(y)\n    if y[0] == \"-\":\n        y[0] = \"0\"\n    if x[0] == \"-\":\n        x[0] = \"0\"\n    if y[2] == \"-\":\n        y[2] = \"0\"\n    if x[2] == \"-\":\n        x[2] = \"0\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0):\n        return False\n    elif(x<0 and y<0):\n        return True\n    elif(x>0 and y<0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > y) - (x < y)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    signs = ['+','-','*','/'] \n    if signs[x%2] == signs[y%2]: \n        return True\n    return False "
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return 'NO'\n    elif x>0 and y<0:\n        return 'YES'\n    elif x>0 and y==0:\n        return 'NO'\n    elif x<0 and y<0:\n        return 'YES'\n    else:\n        return 'NO'\n        \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b, c = 0, 0, 0\n    while n > 1:\n        a, b, c = b + c, a, b\n        n = n - 1\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Write your code here\n    return n**(1/3"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # If the number is odd, it is not an octagonal number.\n    if n % 2 == 1:\n        return False\n    # If the number is even, it is an octagonal number.\n    if n % 2 == 0:\n        return True\n    # If the number is even and divided by two, it is an octagonal number.\n    else:\n        return is_octagonal(n//2) and n % 2 == "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if(n == 1):\n        return 1\n    elif(n == 2):\n        return 5\n    elif(n == 3):\n        return 10\n    elif(n == 4):\n        return 15\n    elif(n == 5):\n        return 20\n    elif(n == 6):\n        return 25\n    elif(n == 7):\n        return 30\n    elif(n == 8):\n        return 35\n    elif(n == 9):\n        return 40\n    elif(n == 10):\n        return 45\n    else:\n        return None\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return n \n    elif n == 1: \n        return 0 \n    elif n == 2: \n        return 1 \n    elif n == 3: \n        return 5 \n    else: \n        return is_octagonal(n - 1) + is_octagonal(n - 2) + is_octagonal(n - 3)\n    \nprint(is_octagonal(5))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n % 2 == 1: \n        return n - 1 \n    else: \n        return n * (n + 1) / 2 \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # n = int(input(\"Enter the number: \"))\n    # n_square = n**2\n    # list_of_numbers = []\n    # while n > 0:\n    #     n_square = n_square + n\n    #     n = n - 1\n    # return n_square\n    \n    # square = 0\n    # square = (n ** 2) - n\n    # return square\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n_square\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        print('The input must be an integer greater than 0')\n        return\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 9\n    if n == 5:\n        return 16\n    if n == 6:\n        return 25\n    if n == 7:\n        return 36\n    if n == 8:\n        return 49\n    if n == 9:\n        return 64\n    if n == 10:\n        return 81\n    if n == 11:\n        return 128\n    if n == 12:\n        return 256\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1 or n == 3:\n        return 1\n    else:\n        return 2 * n - 1\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    ans = 0\n    count = 1\n    curr = 0\n    for i in range(len(s)):\n        curr = s[i]\n        if curr in {'0', '1'} and count <= len(str(sum(s[curr:]))):\n            count += 1\n        else:\n            ans += count\n            count = 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    c = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if (s[i] + s[j]==s[i] * s[j]):\n                c+=1\n    return c\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_string_count = 0\n    for i in range(len(s)):\n        num_digits = count_Digits(s[i])\n        if num_digits == len(s[i:]):\n            sub_string_count += 1\n    return sub_string_count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # your code goes here\n    num = 0\n    dic = {}\n    for i in s:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in dic:\n        if dic[i] == len(s):\n            num += 1\n    return num\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = {}\n    # d[i][j] = number of substrings with length i and the sum of digits equals j.\n    for i in range(len(s) - 1):\n        d[i + 1] = 0\n    \n    for i in range(1, len(s)):\n        d[i] = 0\n        \n        for j in range(len(s[i:])):\n            if s[i + j] == s[i - j]:\n                d[i + j + 1] = d[i + j] + 1\n            else:\n                d[i + j + 1] = 0\n    \n    return d\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d={}\n    for i in s:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return len(d)\ndef main():\n    n = int(input())\n    s = input()\n    print(count_Substrings(s))\nif __name__=='__main__':\n    main()\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # For storing the substrings in a dictionary\n    sub_dict = defaultdict(int)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    return sum(d.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    substrings_count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            k = s[i:j]\n            if sum(list(map(int, k))) == len(k):\n                substrings_count += 1\n    return substrings_count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def substrings(string):\n        '''\n        Helper function to get substrings of length k.\n        '''\n        return set(str(string)[1:]+str(string)[0])\n    def count(k):\n        '''\n        Count the number of substrings with the sum of digits equal to k.\n        '''\n        return len(set(map(str, str(string)[1:]+str(string)[0]))) - k\n    def is_match(substring, string):\n        '''\n        Returns True if substring is a match for the string.\n        '''\n        return substrings(string).isdisjoint(substring)\n    output = 0\n    for i in range(len(s)-1):\n        for j in range(i+1, len(s)):\n            if is_match(s[i:j+1], s):\n                output += count(j-i)\n    return output\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    mins = xs[0]\n    smallest_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < mins:\n            smallest_num = xs[i]\n        if xs[i] < smallest_num:\n            mins = xs[i]\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_value = 0\n    for i in xs:\n        if i < min_value:\n            min_value = i\n    return min_value\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # smallest_num = min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls_num = sorted(xs)\n    print(ls_num)\n    return ls_num[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in xs:\n        if i < min_num:\n            min_num = i\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # TODO: Write a function to find the smallest number in a list.\n    smallest = min(xs)\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls = list()\n    for i in xs:\n        if i in ls:\n            continue\n        else:\n            ls.append(i)\n    print(\"The smallest number in the list is:\",ls[0])\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    test_list = [(x[0], x[1]) for x in test_list]\n    return max(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_d = 0\n    for i in range(0, len(test_list)-1):\n        max_d += abs(test_list[i][1] - test_list[i + 1][1])\n    return max_d\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # your code here\n    max_difference = 0\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n                if count > max_difference:\n                    max_difference = count\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = test_list[0] - test_list[1]\n    for i in range(1, len(test_list) - 1):\n        if test_list[i] - test_list[i - 1] > max_difference:\n            max_difference = test_list[i] - test_list[i - 1]\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n    # pass\ndef even_or_odd(test_list):\n    '''\n    Write a function that returns a tuple of two elements, in the tuple of even numbers and in the tuple of odd numbers.\n    '''\n    pass\n    # pass\ndef main():\n    '''\n    Write a function that returns all the elements in the tuple below.\n    '''\n    pass\n    # pass\ndef create_pair(test_list):\n    '''\n    Write a function that creates a tuple to be used in some sort of comparison\n    '''\n    pass\n    # pass\ndef delete_all(test_list):\n    '''\n    Write a function that deletes all the elements in the list\n    '''\n    pass\n    # pass\ndef find_max(test_list):\n    '''\n    Write a function that returns the tuple of all the elements with the maximum value.\n    '''\n    pass\n    # pass\ndef find_min(test_list):\n    '''\n    Write a function that returns the tuple of all the elements with the minimum value.\n    '''\n    pass\n    # pass\ndef find_sum(test_list):\n    '''\n    Write a function that returns the tuple of all the elements with the sum.\n    '''\n    pass\n    # pass\ndef find_avg(test_list):\n    '''\n    Write a function that returns the tuple of all the elements with the average.\n    '''\n    pass\n    # pass\ndef reverse(test_list):\n    '''\n    Write a function that reverses the list\n    '''\n    pass\n    # pass\ndef print_list(test_list):\n    '''\n    Write a function that prints the whole list\n    '''\n    pass\n    # pass\ndef get_first(test_list):\n    '''\n    Write a function that returns the first element in the tuple.\n    '''\n    pass\n    # pass\ndef get_last(test_list):\n    '''\n    Write a function that returns the last element in the tuple.\n    '''\n    pass\n    # pass\ndef get_middle(test_list):\n    '''\n    Write a function that returns the middle element in the tuple.\n    '''\n    pass\n    # pass\ndef get_first_last(test_list):\n    '''\n    Write a function that returns the first and last element in the tuple.\n    '''\n    pass\n    # pass\ndef get_random(test_list):\n    '''\n    Write a function that returns a random element in the tuple\n    '''\n    pass\n    # pass\ndef get_first_last_random(test_list):\n    '''\n    Write a function that returns the first and last random elements in the tuple.\n    '''\n    pass\n    # pass\ndef count(test_list):\n    '''\n    Write a function that returns the count of the elements in the tuple.\n    '''\n    pass\n    # pass\ndef list_compare(test_list):\n    '''\n    Write a function that returns the tuple of all elements with the difference of all the elements in the list.\n    '''\n    pass\n    # pass\ndef list_to_string(test_list):\n    '''\n    Write a function that returns the string of the tuple.\n    '''\n    pass\n    # pass\ndef main():\n    '''\n    Write a function that returns all the elements in the list below.\n    '''\n    pass\n    # pass\ndef merge(test_list):\n    '''\n    Write a function that merges the tuple of all the elements in the list.\n    '''\n    pass\n    # pass\ndef remove(test_list):\n    '''\n    Write a function that removes the first element of the tuple.\n    '''\n    pass\n    # pass\ndef remove_all(test_list):\n    '''\n    Write a function that removes all the elements from the list\n    '''\n    pass\n    # pass\ndef size(test_list):\n    '''\n    Write a function that returns the size of the list.\n    '''\n    pass\n    # pass\ndef sort(test_list):\n    '''\n    Write a function that sorts the tuple of all the elements in the list\n    '''\n    pass\n    # pass\ndef sum(test_list):\n    '''\n    Write a function that returns the sum of all the elements in the tuple\n    '''\n    pass\n    # pass\ndef sum_all(test_list):\n    '''\n    Write a function that returns the sum of all the elements in the tuple\n    '''\n    pass\n    # pass\ndef get_list(test_list):\n    '''\n    Write a function that returns the list of all the elements in the tuple\n    '''\n    pass\n    # pass\ndef get_random(test_list):\n    '''\n    Write a function that returns a random element in the tuple\n    '''\n    pass\n    # pass\ndef reverse(test_list):\n    '''\n    Write a function that reverses the list\n    '''\n    pass\n    # pass\ndef remove_random(test_list):\n    '''\n    Write a function that removes a random element from the list.\n    '''\n    pass\n    # pass\ndef get_second_random(test_list):\n    '''\n    Write a function that returns the second element from the tuple\n    '''\n    pass\n    # pass\ndef get_first_last_random(test_list):\n    '''\n    Write a function that returns the first and last random elements in the tuple.\n    '''\n    pass\n    # pass\ndef is_in_list(test_list):\n    '''\n    Write a function that returns True if the elements of the list are in the list, False otherwise.\n    '''\n    pass\n    # pass\ndef get_random_second(test_list):\n    '''\n    Write a function that returns the random second element from the tuple.\n    '''\n    pass\n    # pass\ndef get_random_first_last(test_list):\n    '''\n    Write a function that returns the random first and last element in the tuple.\n    '''\n    pass\n    # pass\ndef is_in_list(test_list):\n    '''\n    Write a function that returns True if the elements of the list are in the list, False otherwise.\n    '''\n    pass\n    # pass\ndef get_random_first_last_second(test_list):\n    '''\n    Write a function that returns the random first and last element in the tuple.\n    '''\n    pass\n    # pass\ndef get_random_second_first(test_list):\n    '''\n    Write a function that returns the random second element from the tuple.\n    '''\n    pass\n    # pass\ndef get_random_first_second_last(test_list):\n    '''\n    Write a function that returns the random first and second element in the tuple.\n    '''\n    pass\n    # pass\ndef is_in_list(test_list):\n    '''\n    Write a function that returns True if the elements of the list are in the list, False otherwise.\n    '''\n    pass\n    # pass\ndef clear_list(test_list):\n    '''\n    Write a function that clears the list\n    '''\n    pass\n    # pass\ndef get_random_second_second_last(test_list):\n    '''\n    Write a function that returns the random second element from the tuple.\n    '''\n    pass\n    # pass\ndef get_second_first(test_list):\n    '''\n    Write a function that returns the second element from the tuple.\n    '''\n    pass\n    # pass\ndef get_second_first_second_last(test_list):\n    '''\n    Write a function that returns the second element from the tuple.\n    '''\n    pass\n    # pass\ndef get_second_second_first(test_list):\n    '''\n    Write a function that returns the second element from the tuple.\n    '''\n    pass\n    # pass\ndef get_first_last_second_last(test_list):\n    '''\n    Write a function that returns the first element from the tuple.\n    '''\n    pass\n    # pass\ndef get_first_last_second_first(test_list):\n    '''\n    Write a function that returns the first element from the tuple.\n    '''\n    pass\n    # pass\ndef get_first_last"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    max_difference = -1\n    result.append(test_list[0])\n    for i in range(1, len(test_list)):\n        if test_list[i] - result[-1]!= 0:\n            result.append(test_list[i] - result[-1])\n            if max_difference < result[-1] - result[-2]:\n                max_difference = result[-1] - result[-2]\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max:\n                max = diff\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Declare max_diff as 0. You should ignore this assignment.\n    # TODO: Write your solution here.\n    if len(test_list) <= 1:\n        return test_list[0]\n    max_diff = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i] - test_list[i-1] > max_diff:\n            max_diff = test_list[i] - test_list[i-1]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(x[0]-x[1]) for x in test_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key = lambda x : x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Create an empty list to store the sorted tuples\n    sorted_subjectmarks = []\n    # Iterate over each item in the tuple\n    for subjectmarks in subjectmarks:\n        # Add the item to the empty list\n        sorted_subjectmarks.append(subjectmarks[1])\n    # Sort the tuple using the second value of each tuple\n    sorted_subjectmarks.sort(key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return sorted_subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Use lambda to pass a parameter that will be a tuple.\n    # Each tuple should have the second value of each pair.\n    # Remember, a tuple is a list of (value, weight)\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    # Add code here\n    subjectmarks.sort(key = lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda k: k[1], reverse=False)\n    return subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flatten = list()\n    for element in data_list:\n        if type(element) is list:\n            flatten.extend(recursive_list_sum(element))\n        else:\n            flatten.append(element)\n    return flatten\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return []\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return [data_list[0] + data_list[1]] + recursive_list_sum(data_list[2:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    \n    if len(data_list) == 0:\n        return result\n    \n    for index, value in enumerate(data_list):\n        if isinstance(value, list):\n            result.extend(recursive_list_sum(value))\n        else:\n            result.append(value)\n    \n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # First create a new empty list\n    flattened_list = []\n    # Iterate through the data list and add each number as a value to the list\n    for item in data_list:\n        # Append the value to the list\n        flattened_list.append(item)\n    # Return the list\n    return flattened_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    try:\n        n_elements = len(data_list)\n        s = 0\n        for i in range(n_elements):\n            s += data_list[i]\n        return s\n    except:\n        return None\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write a function that accepts a list as an argument.\n    \n    #return data_list\n    \n    flattened_list = []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    for index, element in enumerate(data_list):\n        if index > 0:\n            result.append(element)\n            result.append(data_list[index - 1])\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    for i in data_list:\n        if type(i) == list:\n            result.extend(recursive_list_sum(i))\n        else:\n            result.append(i)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Flatten a list\n        '''\n        if len(data_list) == 1:\n            return data_list\n        if type(data_list) == list:\n            return flatten_list(data_list[0]) + flatten_list(data_list[1:])\n        if type(data_list) == tuple:\n            return tuple(flatten_list(data_list[0])) + flatten_list(data_list[1:])\n    \n    return flatten_list(data_list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for number in list:\n        if number > 0:\n            positive += 1\n    return positive\n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    negative = 0\n    for number in list:\n        if number < 0:\n            negative += 1\n    return negative\n    \ndef main():\n    '''\n    Write a python program to check whether a number is positive or negative.\n    '''\n    print(pos_count(list))\n    print(neg_count(list))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    total = 0\n    \n    for i in range(len(list)):\n        if list[i] > 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list)-list.count(1)"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    s = 0\n    for i in list:\n        if i > 0:\n            s = s + 1\n    return s\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # YOUR CODE HERE\n    pos_count = 0\n    for element in list:\n        if element >= 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in range(0, len(list)):\n        if list[i] > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #raise NotImplementedError\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = 0\n    for n in range(1, n + 1):\n        if n % 5 == 0:\n            ways += 2\n        if n % 3 == 0:\n            ways += 1\n        if n % 2 == 0:\n            ways += 1\n        if n % 5 == 0 and n % 3 == 0:\n            ways += 1\n        if n % 5 == 0 and n % 3 == 0 and n % 2 == 0:\n            ways += 2\n        if n % 5 == 0 and n % 3 == 0 and n % 2 == 0 and n % 5 == 0:\n            ways += 2\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def part_number(n):\n        if n == 1: return 1\n        elif n == 2: return 1 + part_number(n-1)\n        else: return part_number(n-1) + part_number(n-2)\n    return part_number(n)"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # If the set is empty return 1\n    if len(set(map(int, list(str(n)))) - {0}) == 0:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if (n % i == 0):\n            count = count + 1\n    return count\n        \nprint(bell_number(100))"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_number(n, memo=None):\n        if memo is None:\n            memo = {}\n        if n in memo:\n            return memo[n]\n        if n <= 2:\n            memo[n] = 1\n        else:\n            memo[n] = bell_number(n-1, memo) + bell_number(n-2, memo)\n        return memo[n]\n    return bell_number(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    else:\n        return bell_number(n - 3) + bell_number(n - 2) + bell_number(n - 1)\n    \ndef bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 4\n    else:\n        return bell_partition(n - 3) + bell_partition(n - 2) + bell_partition(n - 1) + (4 * n)\n    \ndef four_bell(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return bell_partition(n) + (4 * n)\n    \ndef two_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n)\n    \ndef three_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n)\n    \ndef four_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n)\n    \ndef five_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n) + (16 * n)\n    \ndef six_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n) + (16 * n) + (32 * n)\n    \ndef seven_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n) + (16 * n) + (32 * n) + (64 * n)\n    \ndef eight_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n) + (16 * n) + (32 * n) + (64 * n) + (128 * n)\n    \ndef nine_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n) + (16 * n) + (32 * n) + (64 * n) + (128 * n) + (256 * n)\n    \ndef ten_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n) + (16 * n) + (32 * n) + (64 * n) + (128 * n) + (256 * n) + (512 * n)\n    \ndef eleven_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n) + (16 * n) + (32 * n) + (64 * n) + (128 * n) + (256 * n) + (512 * n) + (1024 * n)\n    \ndef twelve_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n) + (16 * n) + (32 * n) + (64 * n) + (128 * n) + (256 * n) + (512 * n) + (1024 * n)\n        \ndef thirteen_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    else:\n        return 2 + bell_partition(n - 2) + (4 * n) + (8 * n) + (16 * n) + (32 * n) + (64 * n) + (128 * n) + (256 * n) + (512 * n) + (1024 * n) + (2048 * n)\n        \ndef fourteen_bell_partition(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # -*- coding: utf-8 -*-\n    #\n    # Based on:\n    # https://www.geeksforgeeks.org/bell-numbers-problem-printer/\n    # \n    # \ud83c\udfbb Problem Description\n    # The problem here is that you have a set of numbers of the bell number sequence\n    #\n    # The problem here is that the max number of possible numbers is limited to 101 - you \n    # have the problem to solve with more than 100 digits in memory.\n    #\n    # In this problem, a bell number is a number that satisfies the equation bell(x) = x + 1 \n    # where bell(x) is the sum of the natural numbers of x.\n    #\n    # \ud83c\udfbb Input\n    # \n    # The input consists of only numbers between 1 and 101.\n    # \n    # Output\n    # \n    # Print the number of ways to partition the set of numbers.\n    # \n    # Constraints\n    # \n    # 1 \u2264 n \u2264 100.\n    #\n    # Example\n    # \n    # Input:\n    # 2\n    # Output:\n    # 2\n    # Explanation:\n    # If we partition the set of numbers [1,2], then the number of ways to partition the set of numbers \n    # is 2, because [1, 2) = (1 + 2) = 3.\n    #\n    # The given sequence is between 1 and 101.\n    # Example 2\n    # Input:\n    # 5\n    # Output:\n    # 2\n    # Explanation:\n    # We partition the set of numbers [1,2,3,4,5] so that the sum of all numbers that are \n    # greater than 5 is 5 + 3 + 2 = 9.\n    #\n    # The given sequence is between 1 and 101.\n    #\n    # Hint\n    # The function bell(x) will return a sum of the natural numbers of x.\n    #\n    # '''\n    # # Your code here\n    # def bell(n):\n    #     if n < 1:\n    #         return n\n    #     else:\n    #         return n + bell(n-1)\n    # # Problem 2\n    # def bell_number(n):\n    #     '''\n    #     Write a function that meets the specifications below, \n    #     so that it returns the number of ways to partition the set of numbers.\n    #     '''\n    #     # -*- coding: utf-8 -*-\n    #     #\n    #     # Based on:\n    #     # https://www.geeksforgeeks.org/bell-numbers-problem-printer/\n    #     # \n    #     # \ud83c\udfbb Problem Description\n    #     #\n    #     # Given a set of numbers of the bell number sequence, \n    #     # we need to find the number of ways to partition the set \n    #     # of numbers.\n    #     #\n    #     # For example, given the sequence:\n    #     # \n    #     # 6\n    #     # 5 6\n    #     # 8\n    #     # 7\n    #     # 3 7\n    #     # 4 8\n    #     # 9 1\n    #     # 4 9\n    #     # 5 7\n    #     # 6 6\n    #     #\n    #     # You can find the number of ways to partition the set of numbers \n    #     # is 3.\n    #     #\n    #     # Hint\n    #     # The function bell(x) will return a sum of the natural numbers of x.\n    #     #\n    #     # '''\n    #     # # Your code here\n    #     # def bell(n):\n    #     #     if n < 1:\n    #     #         return n\n    #     #     else:\n    #     #         return n + bell(n-1)\n    #     # # Problem 2\n    #     # def bell_number(n):\n    #     #     '''\n    #     #     Write a function that meets the specifications below, \n    #     #     so that it returns the number of ways to partition the set of numbers.\n    #     #     '''\n    #     #     # -*- coding: utf-8 -*-\n    #     #\n    #     # Based on:\n    #     # https://www.geeksforgeeks.org/bell-numbers-problem-printer/\n    #     # \n    #     # \ud83c\udfbb Problem Description\n    #     #\n    #     # Given a set of numbers of the bell number sequence, \n    #     # we need to find the number of ways to partition the set \n    #     # of numbers.\n    #     #\n    #     # For example, given the sequence:\n    #     # \n    #     # 6\n    #     # 5 6\n    #     # 8\n    #     # 7\n    #     # 3 7\n    #     # 4 8\n    #     # 9 1\n    #     # 4 9\n    #     # 5 7\n    #     # 6 6\n    #     #\n    #     # You can find the number of ways to partition the set of numbers \n    #     # is 2.\n    #     #\n    #     # Hint\n    #     # The function bell(x) will return a sum of the natural numbers of x.\n    #     #\n    #     # '''\n    #     # # Your code here\n    #     # def bell(n):\n    #     #     if n < 1:\n    #     #         return n\n    #     #     else:\n    #     #         return n + bell(n-1)\n    #     # # Problem 2\n    #     # def bell_number(n):\n    #     #     '''\n    #     #     Write a function that meets the specifications below, \n    #     #     so that it returns the number of ways to partition the set of numbers.\n    #     #     '''\n    #     #     # -*- coding: utf-8 -*-\n    #     #\n    #     # Based on:\n    #     # https://www.geeksforgeeks.org/bell-numbers-problem-printer/\n    #     # \n    #     # \ud83c\udfbb Problem Description\n    #     #\n    #     # Given a set of numbers of the bell number sequence, \n    #     # we need to find the number of ways to partition the set \n    #     # of numbers.\n    #     #\n    #     # For example, given the sequence:\n    #     #\n    #     # 6\n    #     # 5 6\n    #     # 8\n    #     # 7\n    #     # 3 7\n    #     # 4 8\n    #     # 9 1\n    #     # 4 9\n    #     # 5 7\n    #     # 6 6\n    #     #\n    #     # You can find the number of ways to partition the set of numbers \n    #     # is 3.\n    #     #\n    #     # Hint\n    #     # The function bell(x) will return a sum of the natural numbers of x.\n    #     #\n    #     # '''\n    #     # # Your code here\n    #     # def bell(n):\n    #     #     if n < 1:\n    #     #         return n\n    #     #     else:\n    #     #         return n + bell(n-1)\n    #     # # Problem 2\n    #     # def bell_number(n):\n    #     #     '''\n    #     #     Write a function that meets the specifications below, \n    #     #     so that it returns the number of ways to partition the set \n    #     # of numbers.\n    #     "
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if len(A[0]) == len(A[1]):\n        return A[0][0] == A[1][0] and A[0][1] == A[1][1]\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # return False\n    \n    # Create a flag to determine if the given array is monotonic or not.\n    # If array is monotonic, then return True.\n    # If array is not monotonic, then return False.\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    first_entry_at_end = A[0] \n    last_entry_at_end = A[-1] \n    for i in range(1, len(A)): \n        if A[i] < first_entry_at_end: \n            return False\n        elif A[i] > last_entry_at_end: \n            return False\n    return True\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Your code here\n    if len(A) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) >= 2: #if the list is not empty\n        for i in range(1, len(A)-1): #for every index\n            for j in range(0, len(A) - 1): #for every element in the list\n                if A[i] > A[j]: #if the value is greater than the other element\n                    return False #returns false\n        \n    return True #if the list is empty\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1): \n        for j in range(i, len(A)): \n            if A[i] > A[j]: \n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)-1): \n        if A[i] > A[i-1] and A[i] > A[i+1]: \n            return False \n    return True \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (A[0] <= A[1]) or (A[0] >= A[1])\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i=0\n    j=len(A)-1\n    if len(A)<=1:\n        return True\n    if A[0]<A[i]:\n        if A[j]<A[j-1]:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check for the case when array is zero \n    if not A:\n        return True\n    # check for the case when array is one or more.\n    if A[0]!= 0:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # your code here\n    \n    if not l:\n        return True\n    if is_in_list(l[0], s):\n        return is_sublist(l[1:], s)\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l[i:j] == s for i, j in zip(l, s))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[0:len(l)-s+1] == l[len(l)-s+1:]\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    for i in range(len(s)):\n        if(s[i] == l[i]):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    count = 0\n    for i in l:\n        if i in s:\n            count += 1\n    return count == len(s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s)!= len(l):\n        return False\n    else:\n        for i in range(len(s)):\n            if l[i]!= s[i]:\n                return False\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s is None:\n        return False\n    if len(s) < len(l):\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Create a set to avoid duplicate values\n    lset = set(l)\n    for element in s:\n        if element in lset:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    pass\n    #raise NotImplementedError\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(Input) == len(set(Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)==1:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for each_tuple in Input:\n        for each_tuple_again in Input:\n            if each_tuple[1] == each_tuple_again[1] and each_tuple[0] == each_tuple_again[0]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # use a helper function to solve this problem\n    Output = []\n    for item in Input:\n        if len(item) == len(set(item)):\n            Output.append(item)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    counter = 0\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1]:\n                counter += 1\n    return counter == 0\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    elif len(Input) == 1:\n        if len(set(Input)) == 1:\n            return True\n    else:\n        for i in range(len(Input)):\n            if len(Input[i])!= len(set(Input[i])):\n                return False\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(Input)==len(set(Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for x in Input:\n        if len(x)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(0, len(nums)):\n        curr_idx = i\n        for j in range(i+1, len(nums)):\n            if nums[curr_idx] > nums[j]:\n                curr_idx = j\n        nums[i], nums[curr_idx] = nums[curr_idx], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    left = 0\n    right = n - 1\n    while left < n:\n        if nums[left] > nums[right]:\n            nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    low = 0\n    high = len(nums) - 1\n    while low < high:\n        # While low <= high\n        #     swap\n        #     keep low\n        #     keep high\n        while low < high:\n            if nums[low] > nums[high]:\n                nums[low], nums[high] = nums[high], nums[low]\n                low += 1\n                high -= 1\n            high -= 1\n        low += 1\n        high = low\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #  len(nums) is the number of elements in nums\n    #  iterate through nums and put the element into its sorted position\n    #  if the element isn't already sorted, move on to next element\n    #  if the element is already sorted, stop comparing it to next element\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    #base case\n    if length == 1:\n        return nums\n    #Binary search\n    mid = length//2\n    left = nums[:mid]\n    right = nums[mid:]\n    #recursive call\n    #recursive call with left\n    #recursive call with right\n    return comb_sort(left) + nums + comb_sort(right)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n<=1:\n        return nums\n    mid = n//2\n    lower = comb_sort(nums[:mid])\n    higher = comb_sort(nums[mid:])\n    lower_idx = higher_idx = 0\n    while lower_idx<len(lower) and higher_idx<len(higher):\n        if lower[lower_idx] > higher[higher_idx]:\n            nums[lower_idx], nums[higher_idx] = nums[higher_idx], nums[lower_idx]\n            lower_idx+=1\n            higher_idx+=1\n        elif lower[lower_idx] < higher[higher_idx]:\n            higher_idx+=1\n        else:\n            lower_idx+=1\n    nums[lower_idx:] = higher[higher_idx:]\n    nums[lower_idx:] = lower[lower_idx:]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    print(nums)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Write your code here.\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # - a) Create an empty list to hold sorted values\n    # - b) start, stop, step in the list\n    # - c) loop through list, starting at start and\n    #       end and keep appending the values to a sorted list\n    # - d) reverse the list, starting from end and keep appending\n    #       the values to a sorted list\n    # - e) sort the reversed list, starting from start and\n    #       end and keep appending the values to a sorted list\n    # - f) return sorted list\n    # - TODO: Write your solution here\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n % 2) == 0:\n        return n-1\n    return n+1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return dif_Square(n // 2)\n        else:\n            return not dif_Square(n // 2)\nprint(dif_Square(10)"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n >= 2):\n        if(n % 4 == 0):\n            print('It is not a square')\n        elif(n % 4!= 0):\n            print('It is a square')\n        elif(n % 2 == 0):\n            print('It is a square')\n        else:\n            print('It is not a square')\n    else:\n        print('The number is not a square')\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n % 2\n    b = n // 2\n    c = a + b\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_1 = n**2\n    square_2 = n**2\n    squares_difference = square_1 - square_2\n    if squares_difference == 0:\n        print('Not a square')\n    elif squares_difference == 1:\n        print('Square')\n    else:\n        print('Square')\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n == 0):\n        return 'The difference of two squares is 0'\n    elif (n == 1):\n        return 'The difference of two squares is 1'\n    elif (n == 2):\n        return 'The difference of two squares is 2'\n    elif (n == 3):\n        return 'The difference of two squares is 4'\n    else:\n        return 'The difference of two squares is'+ str(n - 2) + '.'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    else:\n        if n%2!= 0:\n            return False\n        if n%3!= 0:\n            return False\n        if n%4!= 0:\n            return False\n        if n%5!= 0:\n            return False\n        if n%6!= 0:\n            return False\n        if n%7!= 0:\n            return False\n        if n%8!= 0:\n            return False\n        if n%9!= 0:\n            return False\n        if n%10!= 0:\n            return False\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n == 1:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 1: \n        return \"Error: The number must be greater than 1\"\n    for i in range(2, n): \n        if n % i == 0: \n            return \"Error: The number cannot be divided by another number\"\n    return \"Square\"\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == len(patterns):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if(isinstance(pattern, str)):\n            if(re.match(pattern, colors[0])):\n                return True\n        else:\n            if(pattern(colors[0])):\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if color matrix is a square\n    if len(colors)!= len(patterns):\n        return False\n    # Check if each color in the array is one of the patterns\n    for color in patterns:\n        if not is_color_in_pattern(color, colors):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # YOUR CODE HERE\n    pattern_set = set()\n    for pattern in patterns:\n        pattern_set |= set(pattern)\n    for pattern in patterns:\n        if pattern_set & set(pattern)!= pattern_set:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns == []:\n        return True\n    \n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_len = len(colors)\n    patterns_len = len(patterns)\n    i = 0\n    while (i < patterns_len) :\n        pattern_sum = patterns[i]\n        j = 0\n        while (j < colors_len) :\n            pattern_sum += colors[j]\n            j += 1\n        if patterns[i]!= pattern_sum :\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_len = len(patterns[0])\n    patterns = [[int(i) for i in x] for x in patterns]\n    \n    for i in range(0, len(colors)):\n        for j in range(0, len(patterns)):\n            if patterns[j][pattern_len-1] == colors[i]:\n                return True\n            \n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_patterns = []\n    for color in colors:\n        for pattern in patterns:\n            if color == pattern:\n                color_patterns.append(pattern)\n                break\n    return color_patterns\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns.sort()    \n    colors.sort()\n    return any(colors[i] == patterns[i][0] for i in range(len(colors)-1))\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_count = 0\n    color_count = 0\n    while color_count < len(colors):\n        if colors[color_count] not in patterns:\n            pattern_count += 1\n        color_count += 1\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a list of tuples, which will be used to return all tuples with elements divisible by k\n    list_of_tuples = []\n    for tuple in test_list:\n        if tuple[1] % K == 0:\n            list_of_tuples.append(tuple)\n    return list_of_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][1] % test_list[j][1]) == 0 and test_list[i][0] % test_list[j][0] == 0:\n                yield test_list[i]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    found_tuples = []\n    for element in test_list:\n        if element[0] % K == 0:\n            found_tuples.append(element)\n    return found_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # count = 0\n    # result = []\n    # for t in test_list:\n    #     if t[1] % K == 0:\n    #         result.append(t)\n    #         count += 1\n    #         if count == K:\n    #             break\n    # return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for elem in test_list:\n        if elem[1] % K == 0:\n            yield elem\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_tuples = []\n    for tup in test_list:\n        if all([x % K == 0 for x in tup]) == True:\n            test_tuples.append(tup)\n    return test_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ind = 0\n    while ind < len(test_list):\n        if all(i%K == 0 for i in test_list[ind][0]):\n            ind += 1\n        else:\n            break\n    # print(ind)\n    return [i[1] for i in test_list[ind:ind+K]]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    def find_tuple(tupl):\n        for n in tupl:\n            if all(elem%k == 0 for elem in n):\n                return True\n        return False\n    \n    tuples = [list(t) for t in test_list]\n    return filter(find_tuple, tuples)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #create empty list to store tuple in form of (index, value)\n    res = []\n    for i in range(len(test_list)):\n        if test_list[i][1]%K==0:\n            res.append((i,test_list[i][1]//K))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    d = dict()\n    for i in test_list:\n        if i[1] in d:\n            d[i[1]].append(i[0])\n        else:\n            d[i[1]] = [i[0]]\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2, n + 1):\n        if (n % i == 0):\n            print(n, 'is not a Divisible Number')\n            return False\n    print(n, 'is a Divisible Number')\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    #raise NotImplementedError\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0: \n        print(\"{} is divisible by 11\".format(n)) \n    else: \n        print(\"{} is not divisible by 11\".format(n)) \n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    i=0\n    while(n%11==0):\n        n=n//11\n        i+=1\n    return i==0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # your code here\n    if(n%11==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0: \n        return True\n    elif n%10 == 0: \n        return False\n    else: \n        return True\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 2 == 0 and n!= 0: \n        return False\n    elif n % 2!= 0 and n!= 0: \n        return True\n    elif n % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n % 11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # your code goes here\n    \n    if len(s)%2!= 0:\n        return False\n    return True\n        \n    \nprint(word_len('Word'))\nprint(word_len('One'))\nprint(word_len('One'))\nprint(word_len('one'))\nprint(word_len('a'))\nprint(word_len('b'))\nprint(word_len('two')"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s)\n    if n % 2!= 0:\n        return 'Not odd'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s:\n        if(i == \" \"):\n            count += 1\n    if(count % 2!= 0):\n        return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    def is_odd_len(word):\n        '''\n        :param word: str\n        :return: str\n        '''\n        for i in word:\n            if i in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                return False\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l=len(s)\n    if l%2==0:\n        return s,0\n    else:\n        return s,1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    result = ''\n    for i in s:\n        result += i\n    if len(result)%2 == 0:\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    fibo = [1, 1]\n    for i in range(2, n+1):\n        fibo.append(fibo[i-1] + fibo[i-2])\n    return fibo[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers = []\n    while (n!= 1):\n        if (n % 4 == 0):\n            numbers.append(n)\n        n = n // 4\n    return numbers[-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    b = 1\n    c = 2\n    d = 3\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    if n == 3: \n        return 6\n    if n == 4: \n        return 10\n    if n == 5: \n        return 14\n    if n == 6: \n        return 17\n    if n == 7: \n        return 19\n    if n == 8: \n        return 24\n    if n == 9: \n        return 29\n    if n == 10: \n        return 34\n    if n == 11: \n        return 39\n    if n == 12: \n        return 44\n    if n == 13: \n        return 49\n    if n == 14: \n        return 54\n    if n == 15: \n        return 59\n    if n == 16: \n        return 64\n    if n == 17: \n        return 69\n    if n == 18: \n        return 74\n    if n == 19: \n        return 81\n    if n == 20: \n        return 86\n    if n == 21: \n        return 91\n    if n == 22: \n        return 96\n    if n == 23: \n        return 101\n    if n == 24: \n        return 106\n    if n == 25: \n        return 111\n    if n == 26: \n        return 118\n    if n == 27: \n        return 123\n    if n == 28: \n        return 132\n    if n == 29: \n        return 138\n    if n == 30: \n        return 143\n    if n == 31: \n        return 149\n    if n == 32: \n        return 154\n    if n == 33: \n        return 161\n    if n == 34: \n        return 166\n    if n == 35: \n        return 171\n    if n == 36: \n        return 178\n    if n == 37: \n        return 184\n    if n == 38: \n        return 189\n    if n == 39: \n        return 194\n    if n == 40: \n        return 200\n    if n == 41: \n        return 206\n    if n == 42: \n        return 210\n    if n == 43: \n        return 216\n    if n == 44: \n        return 221\n    if n == 45: \n        return 227\n    if n == 46: \n        return 232\n    if n == 47: \n        return 239\n    if n == 48: \n        return 244\n    if n == 49: \n        return 249\n    if n == 50: \n        return 256\n    if n == 51: \n        return 261\n    if n == 52: \n        return 268\n    if n == 53: \n        return 273\n    if n == 54: \n        return 280\n    if n == 55: \n        return 285\n    if n == 56: \n        return 290\n    if n == 57: \n        return 295\n    if n == 58: \n        return 300\n    if n == 59: \n        return 303\n    if n == 60: \n        return 306\n    if n == 61: \n        return 311\n    if n == 62: \n        return 318\n    if n == 63: \n        return 323\n    if n == 64: \n        return 330\n    if n == 65: \n        return 335\n    if n == 66: \n        return 341\n    if n == 67: \n        return 348\n    if n == 68: \n        return 363\n    if n == 69: \n        return 370\n    if n == 70: \n        return 375\n    if n == 71: \n        return 380\n    if n == 72: \n        return 385\n    if n == 73: \n        return 390\n    if n == 74: \n        return 395\n    if n == 75: \n        return 400\n    if n == 76: \n        return 405\n    if n == 77: \n        return 410\n    if n == 78: \n        return 415\n    if n == 79: \n        return 420\n    if n == 80: \n        return 425\n    if n == 81: \n        return 430\n    if n == 82: \n        return 435\n    if n == 83: \n        return 440\n    if n == 84: \n        return 445\n    if n == 85: \n        return 450\n    if n == 86: \n        return 455\n    if n == 87: \n        return 460\n    if n == 88: \n        return 465\n    if n == 89: \n        return 470\n    if n == 90: \n        return 475\n    if n == 91: \n        return 490\n    if n == 92: \n        return 495\n    if n == 93: \n        return 500\n    if n == 94: \n        return 505\n    if n == 95: \n        return 510\n    if n == 96: \n        return 515\n    if n == 97: \n        return 520\n    if n == 98: \n        return 525\n    if n == 99: \n        return 530\n    if n == 100: \n        return 535\n    if n == 101: \n        return 540\n    if n == 102: \n        return 545\n    if n == 103: \n        return 550\n    if n == 104: \n        return 555\n    if n == 105: \n        return 560\n    if n == 106: \n        return 565\n    if n == 107: \n        return 570\n    if n == 108: \n        return 575\n    if n == 109: \n        return 580\n    if n == 110: \n        return 585\n    if n == 111: \n        return 590\n    if n == 112: \n        return 595\n    if n == 113: \n        return 600\n    if n == 114: \n        return 605\n    if n == 115: \n        return 610\n    if n == 116: \n        return 615\n    if n == 117: \n        return 620\n    if n == 118: \n        return 625\n    if n == 119: \n        return 630\n    if n == 120: \n        return 625\n    if n == 121: \n        return 660\n    if n == 122: \n        return 665\n    if n == 123: \n        return 670\n    if n == 124: \n        return 675\n    if n == 125: \n        return 680\n    if n == 126: \n        return 685\n    if n == 127: \n        return 690\n    if n == 128: \n        return 695\n    if n == 129: \n        return 700\n    if n == 130: \n        return 705\n    if n == 131: \n        return 720\n    if n == 132: \n        return 725\n    if n == 133: \n        return 730\n    if n == 134: \n        return 735\n    if n == 135: \n        return 740\n    if n == 136: \n        return 745\n    if n == 137: \n        return 750\n    if n == 138: \n        return 755\n    if n == 139: \n        return 760\n    if n == 140: \n        return 765\n    if n == 141: \n        return 770\n    if n == 142: \n        return 775\n    if n == 143: \n        return 780\n    if n == 144: \n        return 785\n    if n == 145: \n        return 790\n    if n == 146: \n        return 795\n    if n == 147: \n        return 800\n    if n == 148: \n        return 805\n    if n == 149: \n        return 820\n    if n == 150: \n        return 825\n    if n == 151: \n        return 830\n    if n == 152: \n        return 835\n    if n == 153: \n        return 840\n    if n == 154: \n        return 845\n    if n == 155: \n        return 850\n    if n == 156: \n        return 855\n    if n == 157: \n        return 860\n    if n == 158: \n        return 865\n    if n == 159: \n        return 870\n    if n == 160: \n        return 875\n    if n == 161: \n        return 880\n    if n == 162: \n    "
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0 or (n > 10): \n        return -1\n    else: \n        return (n + 1) ** 2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    x = 0\n    y = 0\n    z = 1\n    c = 2\n    \n    if n >= 1:\n        while n > 0:\n            n -= 1\n            x += 1\n            y += 2\n            z += 3\n            c += 4\n            \n        return c\n    else:\n        return -1\n    "
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Checks for the nth valid tetrahedral number\n    if n % 10 == 1:\n        return 0\n    \n    # First check for all possible tetrahedral numbers.\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n in range(0,10):\n        return n\n    else:\n        return tetrahedral_number(n-1)+tetrahedral_number(n-2)+tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n    return ans\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # This algorithm is given in the problem statement.\n    # For each n:\n    #\n    #    1) check the triangle of the n+1th tetrahedral number.\n    #    2) if it is parallel to the upper left triangle, then it is the nth tetrahedral number.\n    #    3) if it is parallel to the lower right triangle, then it is the nth tetrahedral number.\n    #    4) if it is parallel to the upper right triangle, then it is the nth tetrahedral number.\n    #\n    # For a triangle:\n    #\n    #    1) A triangle with positive tetrahedral number is called a tetrahedral number.\n    #\n    # The answer to the question is:\n    #\n    #    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n    #\n    # For a parallelepiped:\n    #\n    #    1) A parallelepiped with positive tetrahedral number is called a tetrahedral number.\n    #\n    # The answer to the question is:\n    #\n    #    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n    \n    if n < 3:\n        return n\n    elif n == 3 or n == 4:\n        return n\n    elif n == 5:\n        return n + 1\n    elif n == 6:\n        return n + 2\n    elif n == 7:\n        return n + 3\n    elif n == 8:\n        return n + 4\n    elif n == 9:\n        return n + 5\n    elif n == 10:\n        return n + 6\n    elif n == 11:\n        return n + 7\n    elif n == 12:\n        return n + 8\n    elif n == 13:\n        return n + 9\n    elif n == 14:\n        return n + 10\n    elif n == 15:\n        return n + 11\n    elif n == 16:\n        return n + 12\n    elif n == 17:\n        return n + 13\n    elif n == 18:\n        return n + 14\n    elif n == 19:\n        return n + 15\n    elif n == 20:\n        return n + 16\n    elif n == 21:\n        return n + 17\n    elif n == 22:\n        return n + 18\n    elif n == 23:\n        return n + 19\n    elif n == 24:\n        return n + 20\n    elif n == 25:\n        return n + 21\n    elif n == 26:\n        return n + 22\n    elif n == 27:\n        return n + 23\n    elif n == 28:\n        return n + 24\n    elif n == 29:\n        return n + 25\n    elif n == 30:\n        return n + 26\n    else:\n        return 0\n    "
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Implement the code here\n    # raise NotImplementedError()\n    # v_sphere = (4/3)*math.pi*r**3\n    # print('The sphere volume is', v_sphere, 'cm3')\n    \n    v_sphere = (4/3)*math.pi*r**3\n    print('The sphere volume is', v_sphere, 'cm3')\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*(r**3)\ndef main():\n    print('This program prints the volume of a sphere.')\n    print('Enter r:')\n    r = input()\n    if not r:\n        print('Please enter a number.')\n        exit()\n    else:\n        print('The volume of a sphere is',volume_sphere(r))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14159\n    volume = pi*(4*r*r*r)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # TODO: Write your code here\n    a = 4 * math.pi * (r**3)\n    return a\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4 * math.pi * (r ** 3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    print(\"volume of sphere: \", v)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*r**3\ndef surface_area(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return (4*math.pi)*(math.pow(r, 2))\ndef volume_of_cube(r):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return (4*math.pi)*math.pow(r, 3)\ndef surface_area_of_cube(r):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return (4*math.pi)*(math.pow(r, 3))\ndef volume_of_cube_with_gravity(r, g):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return (4*math.pi)*math.pow(r, 3)+(g*r)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = math.pi * (r**2)\n    b = 2 * math.pi * (r**3)\n    c = 4 * math.pi * (r**4)\n    return (a * b * c)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for char in strr:\n        char_list.append(chr(ord(char) % 26 + ord('A')))\n    return char_list\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_dict = {}\n    # char_dict = {}\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    alpha = 0\n    n = len(strr)\n    for i in range(n):\n        alpha += ord(strr[i])\n    return alpha % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def mod(x,n):\n        return x%n\n    strr = str(strr)\n    return [mod(ord(i),26) for i in strr]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0])%26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = ''\n    for char in strr:\n        if char.isalpha():\n            char_temp = ord(char) - ord('a')\n            char = chr(char_temp)\n        else:\n            char = char\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return char % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    while i < len(strr):\n        ascii_val = ord(strr[i])\n        ascii_val += ascii_val % 26\n        ascii_val = chr(ascii_val)\n        return ascii_val\n    return \"None\"\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = \"\"\n    for c in strr:\n        s += chr(ord(c) % 256)\n    return s\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0])%26\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # write your code here\n    if n == 0:\n        return \"No Numbers\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        return n\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Declare newman\n    newman = [3,4,5,7,8]\n    # Declare last number\n    last = 8\n    # Declare position\n    position = 0\n    # While the position is less than length of sequence\n    while position < n: \n        # If the current position is less than the last position\n        if position < last:\n            # Add the current number to the newman\n            newman.append(newman[position])\n            # Increment position\n            position += 1\n        # Else\n        else: \n            # Remove the current number from the newman\n            newman.remove(newman[position])\n            # Increment position\n            position += 1\n    # Return the newman\n    return newman\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 0\n    prev = n\n    while prev < n and prev % 10!= 1: \n        prev += 1\n    return prev\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num = [0]*n \n    num[0] = 1 \n    i = 1 \n    while i<=n: \n        num[i] = num[i-1] + num[i-2] \n        i += 1 \n    return num[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    elif n == 9:\n        return 256\n    elif n == 10:\n        return 512\n    elif n == 11:\n        return 1024\n    elif n == 12:\n        return 2048\n    elif n == 13:\n        return 4096\n    elif n == 14:\n        return 8192\n    elif n == 15:\n        return 16384\n    elif n == 16:\n        return 32768\n    elif n == 17:\n        return 65536\n    elif n == 18:\n        return 131072\n    elif n == 19:\n        return 262144\n    elif n == 20:\n        return 524288\n    elif n == 21:\n        return 1048576\n    elif n == 22:\n        return 2097152\n    elif n == 23:\n        return 4194304\n    elif n == 24:\n        return 8388608\n    elif n == 25:\n        return 16777216\n    elif n == 26:\n        return 33554432\n    elif n == 27:\n        return 67108864\n    elif n == 28:\n        return 134217728\n    elif n == 29:\n        return 268435456\n    elif n == 30:\n        return 536870912\n    elif n == 31:\n        return 1073741824\n    elif n == 32:\n        return -2147483648\n    elif n == 33:\n        return -9223372036854775808\n    elif n == 34:\n        return -1\n    elif n == 35:\n        return 0\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 2\n    elif n == 38:\n        return 4\n    elif n == 39:\n        return 8\n    elif n == 40:\n        return 16\n    elif n == 41:\n        return 32\n    elif n == 42:\n        return 64\n    elif n == 43:\n        return 128\n    elif n == 44:\n        return 256\n    elif n == 45:\n        return 512\n    elif n == 46:\n        return 1024\n    elif n == 47:\n        return 2048\n    elif n == 48:\n        return 4096\n    elif n == 49:\n        return 8192\n    elif n == 50:\n        return 16384\n    elif n == 51:\n        return 32768\n    elif n == 52:\n        return 65536\n    elif n == 53:\n        return 131072\n    elif n == 54:\n        return 262144\n    elif n == 55:\n        return 524288\n    elif n == 56:\n        return 1048576\n    elif n == 57:\n        return 2097152\n    elif n == 58:\n        return 4194304\n    elif n == 59:\n        return 8388608\n    elif n == 60:\n        return 16777216\n    elif n == 61:\n        return 33554432\n    elif n == 62:\n        return 67108864\n    elif n == 63:\n        return 134217728\n    elif n == 64:\n        return 268435456\n    elif n == 65:\n        return 536870912\n    elif n == 66:\n        return 1073741824\n    elif n == 67:\n        return -2147483648\n    elif n == 68:\n        return -9223372036854775808\n    elif n == 69:\n        return -1\n    elif n == 70:\n        return 0\n    elif n == 71:\n        return 1\n    elif n == 72:\n        return 2\n    elif n == 73:\n        return 4\n    elif n == 74:\n        return 8\n    elif n == 75:\n        return 16\n    elif n == 76:\n        return 32\n    elif n == 77:\n        return 64\n    elif n == 78:\n        return 128\n    elif n == 79:\n        return 256\n    elif n == 80:\n        return 512\n    elif n == 81:\n        return 1024\n    elif n == 82:\n        return 2048\n    elif n == 83:\n        return 4096\n    elif n == 84:\n        return 8192\n    elif n == 85:\n        return 16384\n    elif n == 86:\n        return 32768\n    elif n == 87:\n        return 65536\n    elif n == 88:\n        return 131072\n    elif n == 89:\n        return 262144\n    elif n == 90:\n        return 524288\n    elif n == 91:\n        return 1048576\n    elif n == 92:\n        return 2097152\n    elif n == 93:\n        return 4194304\n    elif n == 94:\n        return 8388608\n    elif n == 95:\n        return 16777216\n    elif n == 96:\n        return 33554432\n    elif n == 97:\n        return 67108864\n    elif n == 98:\n        return 134217728\n    elif n == 99:\n        return 268435456\n    elif n == 100:\n        return 536870912\n    elif n == 101:\n        return 1073741824\n    elif n == 102:\n        return -2147483648\n    elif n == 103:\n        return -9223372036854775808\n    elif n == 104:\n        return -1\n    elif n == 105:\n        return 0\n    elif n == 106:\n        return 1\n    elif n == 107:\n        return 2\n    elif n == 108:\n        return 4\n    elif n == 109:\n        return 8\n    elif n == 110:\n        return 16\n    elif n == 111:\n        return 32\n    elif n == 112:\n        return 64\n    elif n == 113:\n        return 128\n    elif n == 114:\n        return 256\n    elif n == 115:\n        return 512\n    elif n == 116:\n        return 1024\n    elif n == 117:\n        return 2048\n    elif n == 118:\n        return 4096\n    elif n == 119:\n        return 8192\n    elif n == 120:\n        return 16384\n    elif n == 121:\n        return 32768\n    elif n == 122:\n        return 65536\n    elif n == 123:\n        return 131072\n    elif n == 124:\n        return 262144\n    elif n == 125:\n        return 524288\n    elif n == 126:\n        return 1048576\n    elif n == 127:\n        return 2097152\n    elif n == 128:\n        return 4194304\n    elif n == 129:\n        return 8388608\n    elif n == 130:\n        return 16777216\n    elif n == 131:\n        return 33554432\n    elif n == 132:\n        return 67108864\n    elif n == 133:\n        return 134217728\n    elif n == 134:\n        return 268435456\n    elif n == 135:\n        return 536870912\n    elif n == 136:\n        return 1073741824\n    elif n == 137:\n        return -2147483648\n    elif n == 138:\n        return -9223372036854775808\n    elif n == 139:\n        return -1\n    elif n == 140:\n        return 0\n    elif n == 141:\n        return 1\n    elif n == 142:\n        return 2\n    elif n == 143:\n        return 4\n    elif n == 144:\n        return 8\n    elif n == 145:\n        return 16\n    elif n == 146:\n        return 32\n    elif n == 147:\n        return 64\n    elif n == 148:\n        return 128\n    elif n == 149:\n        return 256\n    elif n == 150:\n        return 512\n    eli"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 92, 92, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 0\n    while i < n: \n        if n % i == 0: \n            return n // i \n        i += 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return(n*(n+1))//2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #The formula for the sphere's surface area\n    sigma = (r*math.sqrt(3))/2\n    return round(sigma,5)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 0.5 * r * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = (4/3)*math.pi*(r**3)\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return r**2 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(math.pow(r,3))\n    print('The surface area of a sphere is:',area)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**3)\ndef surfacearea_cuboid(l,w,h,n):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return l*w*h*n\ndef surfacearea_cube(a,b,c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (a*b*c)/3\ndef surfacearea_cube_g(a,b,c,d):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (a*b*c*d)/3\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return math.pi*(math.pow(r,2))\ndef surfacearea_rectangle(w,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return (w*h)/2\ndef surfacearea_rectangle_g(w,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return w*h*math.pi\ndef surfacearea_rectangle_sphere(w,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return (math.pow(w,2)*h)/2\ndef surfacearea_circle_sphere(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return (math.pi*math.pow(r,2))\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (a*b*c)/3\ndef surfacearea_triangle_sphere(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (math.pow(a,2)*math.pow(b,2)*math.pow(c,2))/3\ndef surfacearea_polygon(l,w,h,n):\n    '''\n    Write a function to find the surface area of a polygon.\n    '''\n    return (l*w*h*n)/2\ndef surfacearea_polygon_sphere(l,w,h,n):\n    '''\n    Write a function to find the surface area of a polygon.\n    '''\n    return (math.pow(l,2)*math.pow(w,2)*math.pow(h,2)*math.pow(n,2))/2\ndef surfacearea_polygon_cube(l,w,h,n):\n    '''\n    Write a function to find the surface area of a polygon.\n    '''\n    return (l*w*h*n*math.pi)/6\ndef surfacearea_triangle_sphere_cube(l,w,h,n,p):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (math.pow(l,2)*math.pow(w,2)*math.pow(h,2)*math.pow(n,2)*math.pow(p,2))/6\ndef surfacearea_triangle_sphere_cube(l,w,h,n,p,q):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (math.pow(l,2)*math.pow(w,2)*math.pow(h,2)*math.pow(n,2)*math.pow(p,2)*math.pow(q,2))/6\ndef surfacearea_triangle_sphere_cube(l,w,h,n,p,q,r):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (math.pow(l,2)*math.pow(w,2)*math.pow(h,2)*math.pow(n,2)*math.pow(p,2)*math.pow(q,2)*math.pow(r,2))/6\ndef surfacearea_triangle_sphere_cube_g(l,w,h,n,p,q,r,g):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (math.pow(l,2)*math.pow(w,2)*math.pow(h,2)*math.pow(n,2)*math.pow(p,2)*math.pow(q,2)*math.pow(r,2)*math.pow(g,2))/6\ndef surfacearea_triangle_sphere_cube_g(l,w,h,n,p,q,r,g,n1,n2,n3,n4):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (math.pow(l,2)*math.pow(w,2)*math.pow(h,2)*math.pow(n,2)*math.pow(p,2)*math.pow(q,2)*math.pow(r,2)*math.pow(g,2)*math.pow(n1,2)*math.pow(n2,2)*math.pow(n3,2)*math.pow(n4,2))/6\ndef surfacearea_triangle_sphere_cube_g_sphere(l,w,h,n,p,q,r,g,n1,n2,n3,n4,p1,p2,p3,p4):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (math.pow(l,2)*math.pow(w,2)*math.pow(h,2)*math.pow(n,2)*math.pow(p,2)*math.pow(q,2)*math.pow(r,2)*math.pow(g,2)*math.pow(n1,2)*math.pow(n2,2)*math.pow(n3,2)*math.pow(n4,2)*math.pow(p1,2)*math.pow(p2,2)*math.pow(p3,2)*math.pow(p4,2))/6\ndef surfacearea_triangle_sphere_cube_g_sphere_sphere(l,w,h,n,p,q,r,g,n1,n2,n3,n4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,p2,p3,p4,p1,"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=4*3.14*r**3\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return(2 * math.pi * r)\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return math.pi * (r ** 2)\ndef surfacearea_parallelepiped(a, b, c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return (b**2) + (c**2) + (a**2)\ndef surfacearea_triangle(a, b, c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (a + b + c) * 0.5\ndef surfacearea_rhombus(a, b, c):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return (a + b) * 0.5\ndef surfacearea_octahedron(a, b, c, d):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return (a + b + c + d) * 0.5\ndef surfacearea_tetrahedron(a, b, c, d, e, f):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (a + b + c + d + e + f) * 0.5\ndef surfacearea_heptahedron(a, b, c, d, e, f, g):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g) * 0.5\ndef surfacearea_heptahedron_v2(a, b, c, d, e, f, g, h):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h) * 0.5\ndef surfacearea_heptahedron_v3(a, b, c, d, e, f, g, h, i):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i) * 0.5\ndef surfacearea_heptahedron_v4(a, b, c, d, e, f, g, h, i, j, k):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k) * 0.5\ndef surfacearea_heptahedron_v5(a, b, c, d, e, f, g, h, i, j, k, l):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l) * 0.5\ndef surfacearea_heptahedron_v6(a, b, c, d, e, f, g, h, i, j, k, l, m):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m) * 0.5\ndef surfacearea_heptahedron_v7(a, b, c, d, e, f, g, h, i, j, k, l, m, n):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n) * 0.5\ndef surfacearea_heptahedron_v8(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o) * 0.5\ndef surfacearea_heptahedron_v9(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p) * 0.5\ndef surfacearea_heptahedron_v10(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q) * 0.5\ndef surfacearea_heptahedron_v11(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r) * 0.5\ndef surfacearea_heptahedron_v12(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s) * 0.5\ndef surfacearea_heptahedron_v13(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t) * 0.5\ndef surfacearea_heptahedron_v14(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u) * 0.5\ndef surfacearea_heptahedron_v15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v) * 0.5\ndef surfacearea_heptahedron_v16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    sum = 0\n    base = 6\n    while base <= n:\n        sum += base * base\n        base *= 6\n    return sum\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    for i in range(1,n+1):\n        if i == n:\n            return (i*3)\n        else:\n            return (i*3)+1\n    \nprint(centered_hexagonal_number(6)"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(3*n+1))/2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    lst = []\n    for i in range(n):\n        lst.append(i*i)\n    return sum(lst)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # We assume n is a positive integer\n    if n < 1:\n        raise ValueError(\"Argument n must be a positive integer\")\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    print('This is a number in hexagonal form. ')\n    print(n)\n    print('This is the nth hexagonal number.')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')\n    print('\\t' +'' * (n * 2 - 1) + 'x')\n    print('\\t' +'' * (n * 2 - 1) + '+')"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n<3:\n        return 'ValueError: n must be greater than 3'\n    n_sq = n*n\n    \n    sq = []\n    for i in range(1,n//2):\n        sq.append(i*i)\n    \n    for i in range(n//2,n):\n        sq.append(n*(n+1)/2)\n    \n    s = sum(sq)\n    if s % 1 == 0:\n        return 'ValueError: n must be less than 100'\n    else:\n        return 'ValueError: n must be less than 100'\n    \n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        if key in dict2 and key in dict3:\n            merged_dict[key] = dict2[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] = value\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if key in dict2:\n            new_dict[key] = dict1[key] + dict2[key]\n        else:\n            new_dict[key] = dict1[key]\n    for key, value in dict2.items():\n        if key in dict3:\n            new_dict[key] = dict2[key] + dict3[key]\n        else:\n            new_dict[key] = dict2[key]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dic = dict1.copy()\n    merged_dic.update(dict2)\n    merged_dic.update(dict3)\n    return merged_dic\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    for k in dict1.keys():\n        if k in dict2.keys():\n            result[k] = dict2[k]\n        elif k in dict3.keys():\n            result[k] = dict3[k]\n        else:\n            pass\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1 = dict1\n    d2 = dict2\n    d3 = dict3\n    d = {}\n    for key in d1:\n        if key in d2:\n            d[key] = d2[key]\n        else:\n            d[key] = d1[key]\n    for key in d3:\n        if key in d2:\n            d[key] = d3[key]\n        else:\n            d[key] = d1[key]\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # def merge(dict1,dict2,dict3):\n    #     dict1_ = {}\n    #     dict2_ = {}\n    #     dict3_ = {}\n    #     for key in dict1.keys():\n    #         dict1_.update({key:dict1[key]})\n    #     for key in dict2.keys():\n    #         dict2_.update({key:dict2[key]})\n    #     for key in dict3.keys():\n    #         dict3_.update({key:dict3[key]})\n    #     return dict1_,dict2_,dict3_\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_dic1 = dict(dict1)\n    dict_dic2 = dict(dict2)\n    dict_dic3 = dict(dict3)\n    d1 = dict_dic1.copy()\n    d2 = dict_dic2.copy()\n    d3 = dict_dic3.copy()\n    d1.update(d2)\n    d1.update(d3)\n    d2.update(d3)\n    return d1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key,value in dict1.items():\n        if key in dict2.keys():\n            dict2[key] += value\n        else:\n            dict2[key] = value\n    for key,value in dict3.items():\n        if key in dict2.keys():\n            dict2[key] += value\n        else:\n            dict2[key] = value\n    return dict2\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    for key,value in dict1.items():\n        if key in dict2.keys():\n            dict_merged[key] = dict2[key]\n        else:\n            dict_merged[key] = value\n    for key,value in dict3.items():\n        if key in dict2.keys():\n            dict_merged[key] = dict3[key]\n        else:\n            dict_merged[key] = value\n    return dict_merged\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    mydict = dict()\n    for ele in list1:\n        if ele in mydict:\n            mydict[ele] += 1\n        else:\n            mydict[ele] = 1\n    return mydict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    print(freq)\n    freq_dict = {}\n    for k, v in freq.items():\n        freq_dict[k] = v\n    print(freq_dict)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Hint: Don't worry about how this function works -- we'll get it from collections\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    freq = freq.most_common()\n    freq = dict(freq)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i not in frequency:\n            frequency[i] = 1\n        else:\n            frequency[i] += 1\n    return frequency\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    closest = abs(N-N.min())\n    while N > abs(N.min()):\n        if N.min() == abs(N):\n            break\n        elif abs(N) <= closest:\n            closest = abs(N.min())\n        N = (N - abs(N))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    print(N)\n    \n    for i in range(N):\n        if i == 0 or i == N-1:\n            closest = N-1\n        else:\n            if N % i == 0:\n                closest = i\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return 0\n    if N == 0:\n        return 1\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    min_value = 1\n    for i in range(N):\n        if numbers[i] < numbers[i-1] and numbers[i] < numbers[i+1]:\n            return numbers[i]\n        if numbers[i] < numbers[i-1]:\n            min_value = min(min_value, numbers[i])\n        if numbers[i] < numbers[i+1]:\n            min_value = min(min_value, numbers[i])\n    return min_value\n    \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 3:\n        return N\n    elif N % 3 == 0:\n        return int(N/3)\n    elif N % 3 == 1:\n        return int(N/3 + 1)\n    elif N % 3 == 2:\n        return int(N/3 + 2)\n    else:\n        return int(N/3 + 3)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return 0\n    else:\n        return min(N, closest_num(N-1))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Your code here\n    if N <= 0:\n        return N\n    if N < 3:\n        return 1\n    if N < 6:\n        return 2\n    if N < 12:\n        return 3\n    if N < 19:\n        return 4\n    if N < 28:\n        return 5\n    if N < 36:\n        return 6\n    if N < 45:\n        return 7\n    if N < 48:\n        return 8\n    if N < 59:\n        return 9\n    if N < 72:\n        return 10\n    if N < 75:\n        return 11\n    if N < 80:\n        return 12\n    if N < 90:\n        return 13\n    if N < 100:\n        return 14\n    if N < 110:\n        return 15\n    if N < 120:\n        return 16\n    if N < 130:\n        return 17\n    if N < 140:\n        return 18\n    if N < 150:\n        return 19\n    if N < 160:\n        return 20\n    if N < 170:\n        return 21\n    if N < 180:\n        return 22\n    if N < 190:\n        return 23\n    if N < 200:\n        return 24\n    if N < 210:\n        return 25\n    if N < 220:\n        return 26\n    if N < 230:\n        return 27\n    if N < 240:\n        return 28\n    if N < 250:\n        return 29\n    if N < 260:\n        return 30\n    if N < 270:\n        return 31\n    if N < 280:\n        return 32\n    if N < 290:\n        return 33\n    if N < 300:\n        return 34\n    if N < 310:\n        return 35\n    if N < 320:\n        return 36\n    if N < 330:\n        return 37\n    if N < 350:\n        return 38\n    if N < 360:\n        return 39\n    if N < 370:\n        return 40\n    if N < 380:\n        return 41\n    if N < 390:\n        return 42\n    if N < 400:\n        return 43\n    if N < 410:\n        return 44\n    if N < 420:\n        return 45\n    if N < 450:\n        return 46\n    if N < 480:\n        return 47\n    if N < 490:\n        return 48\n    if N < 500:\n        return 49\n    if N < 510:\n        return 50\n    if N < 520:\n        return 51\n    if N < 530:\n        return 52\n    if N < 540:\n        return 53\n    if N < 550:\n        return 54\n    if N < 560:\n        return 55\n    if N < 570:\n        return 56\n    if N < 580:\n        return 57\n    if N < 600:\n        return 58\n    if N < 610:\n        return 59\n    if N < 630:\n        return 60\n    if N < 650:\n        return 61\n    if N < 670:\n        return 62\n    if N < 680:\n        return 63\n    if N < 700:\n        return 64\n    if N < 720:\n        return 65\n    if N < 730:\n        return 66\n    if N < 740:\n        return 67\n    if N < 750:\n        return 68\n    if N < 780:\n        return 69\n    if N < 800:\n        return 70\n    if N < 810:\n        return 71\n    if N < 840:\n        return 72\n    if N < 850:\n        return 73\n    if N < 900:\n        return 74\n    if N < 920:\n        return 75\n    if N < 950:\n        return 76\n    if N < 1000:\n        return 77\n    if N < 1020:\n        return 78\n    if N < 1050:\n        return 79\n    if N < 1060:\n        return 80\n    if N < 1080:\n        return 81\n    if N < 1100:\n        return 82\n    if N < 1120:\n        return 83\n    if N < 1140:\n        return 84\n    if N < 1150:\n        return 85\n    if N < 1160:\n        return 86\n    if N < 1170:\n        return 87\n    if N < 1180:\n        return 88\n    if N < 1190:\n        return 89\n    if N < 1200:\n        return 90\n    if N < 1220:\n        return 91\n    if N < 1240:\n        return 92\n    if N < 1260:\n        return 93\n    if N < 1270:\n        return 94\n    if N < 1280:\n        return 95\n    if N < 1300:\n        return 96\n    if N < 1320:\n        return 97\n    if N < 1340:\n        return 98\n    if N < 1360:\n        return 99\n    if N < 1370:\n        return 100\n    if N < 1380:\n        return 101\n    if N < 1400:\n        return 102\n    if N < 1420:\n        return 103\n    if N < 1440:\n        return 104\n    if N < 1460:\n        return 105\n    if N < 1470:\n        return 106\n    if N < 1480:\n        return 107\n    if N < 1500:\n        return 108\n    if N < 1520:\n        return 109\n    if N < 1540:\n        return 110\n    if N < 1560:\n        return 111\n    if N < 1570:\n        return 112\n    if N < 1580:\n        return 113\n    if N < 1600:\n        return 114\n    if N < 1620:\n        return 115\n    if N < 1640:\n        return 116\n    if N < 1660:\n        return 117\n    if N < 1670:\n        return 118\n    if N < 1680:\n        return 119\n    if N < 1700:\n        return 120\n    if N < 1720:\n        return 121\n    if N < 1740:\n        return 122\n    if N < 1760:\n        return 123\n    if N < 1770:\n        return 124\n    if N < 1780:\n        return 125\n    if N < 1800:\n        return 126\n    if N < 1850:\n        return 127\n    if N < 1900:\n        return 128\n    if N < 1950:\n        return 129\n    if N < 2000:\n        return 130\n    if N < 2050:\n        return 131\n    if N < 2040:\n        return 132\n    if N < 2060:\n        return 133\n    if N < 2070:\n        return 134\n    if N < 2080:\n        return 135\n    if N < 2100:\n        return 136\n    if N < 2120:\n        return 137\n    if N < 2160:\n        return 138\n    if N < 2170:\n        return 139\n    if N < 2190:\n        return 140\n    if N < 2200:\n        return 141\n    if N < 2210:\n        return 142\n    if N < 2220:\n        return 143\n    if N < 2240:\n        return 144\n    if N < 2260:\n        return 145\n    if N < 2280:\n        return 146\n    if N < 2300:\n        return 147\n    if N < 2320:\n        return 148\n    if N < 2340:\n        return 149\n    if N < 2360:\n        return 150\n    if N < 2370:\n        return 151\n    if N < 2380:\n        return 152\n    if N < 2400:\n        return 153\n    if N < 2410:\n        return 154\n    if N < 2420:\n        return 155\n    if N < 2440:\n        return 156\n    if N < 2460:\n        return 157\n    if N < 2470:\n        return 158\n    if N < 2480:\n        return 159\n    if N < 2500:\n        return 160\n    if N < 2520:\n        return 161\n    if N < 2540:\n        return 162\n    if N < 2560:\n        return 163\n    if N < 2570:\n        return 164\n    if N < 2580:\n        return 165\n    if N < 2600:\n        return 166\n    if N < 2610:\n        return 167\n    if N < 2620:\n        return 168\n    if N < 2640:\n        return 169\n    if N < 2660:\n        return 170\n    if N < 2670:\n        return 171\n    if N < 2680:\n        return 172\n    if N < 2700:\n        return 173\n    if N < 2710:\n        return 174\n    if "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 2:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return N\n    elif N == 0:\n        return 0\n    else:\n        return min(closest_num(N-1), closest_num(N-2))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N<=0:\n        return None\n    if N==1:\n        return N\n    if N==2:\n        return 1\n    if N==3:\n        return 2\n    if N==4:\n        return 3\n    if N==5:\n        return 4\n    if N==6:\n        return 5\n    if N==7:\n        return 6\n    if N==8:\n        return 7\n    if N==9:\n        return 8\n    if N==10:\n        return 9\n    if N==11:\n        return 10\n    if N==12:\n        return 11\n    if N==13:\n        return 12\n    if N==14:\n        return 13\n    if N==15:\n        return 14\n    if N==16:\n        return 15\n    if N==17:\n        return 16\n    if N==18:\n        return 17\n    if N==19:\n        return 18\n    if N==20:\n        return 19\n    if N==21:\n        return 20\n    if N==22:\n        return 21\n    if N==23:\n        return 22\n    if N==24:\n        return 23\n    if N==25:\n        return 24\n    if N==26:\n        return 25\n    if N==27:\n        return 26\n    if N==28:\n        return 27\n    if N==29:\n        return 28\n    if N==30:\n        return 29\n    if N==31:\n        return 30\n    if N==32:\n        return 31\n    if N==33:\n        return 32\n    if N==34:\n        return 33\n    if N==35:\n        return 34\n    if N==36:\n        return 35\n    if N==37:\n        return 36\n    if N==38:\n        return 37\n    if N==39:\n        return 38\n    if N==40:\n        return 39\n    if N==41:\n        return 40\n    if N==42:\n        return 41\n    if N==43:\n        return 42\n    if N==44:\n        return 43\n    if N==45:\n        return 44\n    if N==46:\n        return 45\n    if N==47:\n        return 46\n    if N==48:\n        return 47\n    if N==49:\n        return 48\n    if N==50:\n        return 49\n    if N==51:\n        return 50\n    if N==52:\n        return 51\n    if N==53:\n        return 52\n    if N==54:\n        return 53\n    if N==55:\n        return 54\n    if N==56:\n        return 55\n    if N==57:\n        return 56\n    if N==58:\n        return 57\n    if N==59:\n        return 58\n    if N==60:\n        return 59\n    if N==61:\n        return 60\n    if N==62:\n        return 61\n    if N==63:\n        return 62\n    if N==64:\n        return 63\n    if N==65:\n        return 64\n    if N==66:\n        return 65\n    if N==67:\n        return 66\n    if N==68:\n        return 67\n    if N==69:\n        return 68\n    if N==70:\n        return 69\n    if N==71:\n        return 70\n    if N==72:\n        return 71\n    if N==73:\n        return 72\n    if N==74:\n        return 73\n    if N==75:\n        return 74\n    if N==76:\n        return 75\n    if N==77:\n        return 76\n    if N==78:\n        return 77\n    if N==79:\n        return 78\n    if N==80:\n        return 79\n    if N==81:\n        return 80\n    if N==82:\n        return 81\n    if N==83:\n        return 82\n    if N==84:\n        return 83\n    if N==85:\n        return 84\n    if N==86:\n        return 85\n    if N==87:\n        return 86\n    if N==88:\n        return 87\n    if N==89:\n        return 88\n    if N==90:\n        return 89\n    if N==91:\n        return 90\n    if N==92:\n        return 91\n    if N==93:\n        return 92\n    if N==94:\n        return 93\n    if N==95:\n        return 94\n    if N==96:\n        return 95\n    if N==97:\n        return 96\n    if N==98:\n        return 97\n    if N==99:\n        return 98\n    if N==100:\n        return 99\n    if N==101:\n        return 100\n    if N==102:\n        return 101\n    if N==103:\n        return 102\n    if N==104:\n        return 103\n    if N==105:\n        return 104\n    if N==106:\n        return 105\n    if N==107:\n        return 106\n    if N==108:\n        return 107\n    if N==109:\n        return 108\n    if N==110:\n        return 109\n    if N==111:\n        return 110\n    if N==112:\n        return 111\n    if N==113:\n        return 112\n    if N==114:\n        return 113\n    if N==115:\n        return 114\n    if N==116:\n        return 115\n    if N==117:\n        return 116\n    if N==118:\n        return 117\n    if N==119:\n        return 118\n    if N==120:\n        return 119\n    if N==121:\n        return 120\n    if N==122:\n        return 121\n    if N==123:\n        return 122\n    if N==124:\n        return 123\n    if N==125:\n        return 124\n    if N==126:\n        return 125\n    if N==127:\n        return 126\n    if N==128:\n        return 127\n    if N==129:\n        return 128\n    if N==130:\n        return 129\n    if N==131:\n        return 130\n    if N==132:\n        return 131\n    if N==133:\n        return 132\n    if N==134:\n        return 133\n    if N==135:\n        return 134\n    if N==136:\n        return 135\n    if N==137:\n        return 136\n    if N==138:\n        return 137\n    if N==139:\n        return 138\n    if N==140:\n        return 139\n    if N==141:\n        return 140\n    if N==142:\n        return 141\n    if N==143:\n        return 142\n    if N==144:\n        return 143\n    if N==145:\n        return 144\n    if N==146:\n        return 145\n    if N==147:\n        return 146\n    if N==148:\n        return 147\n    if N==149:\n        return 148\n    if N==150:\n        return 149\n    if N==151:\n        return 150\n    if N==152:\n        return 151\n    if N==153:\n        return 152\n    if N==154:\n        return 153\n    if N==155:\n        return 154\n    if N==156:\n        return 155\n    if N==157:\n        return 156\n    if N==158:\n        return 157\n    if N==159:\n        return 158\n    if N==160:\n        return 159\n    if N==161:\n        return 160\n    if N==162:\n        return 161\n    if N==163:\n        return 162\n    if N==164:\n        return 163\n    if N==165:\n        return 164\n    if N==166:\n        return 165\n    if N==167:\n        return 166\n    if N==168:\n        return 167\n    if N==169:\n        return 168\n    if N==170:\n        return 169\n    if N==171:\n        return 170\n    if N==172:\n        return 171\n    if N==173:\n        return 172\n    if N==174:\n        return 173\n    if N==175:\n        return 174\n    if N==176:\n        return 175\n    if N==177:\n        return 176\n    if N==178:\n        return 177\n    if N==179:\n        return 178\n    if N==180:\n        return 179\n    if N==181:\n        return 180\n    if N==182:\n        return 181\n    if N="
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return N\n    elif N == 2:\n        return N\n    elif N == 3:\n        return N\n    elif N == 4:\n        return N\n    else:\n        return closest_num(N//3) + 1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for item in list1:\n        for word in item:\n            if len(word) > len(list1[0]):\n                len_log = len(word)\n    return len_log"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1:\n        return max(map(len, list1))\n    else:\n        return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = len(list1[0])\n    for i in range(1, len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_length = len(list1)\n    return word_length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i][1]!= list1[i][0]:\n            list2.append(list1[i])\n    if len(list2) > 0:\n        print(len(list2[0][0]))\n    else:\n        print(\"No word\")\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = list1[0]\n    for i in range(1,len(list1)):\n        if len(list1[i])>len(longest_word):\n            longest_word = list1[i]\n    return longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    else:\n        return max(list1, key = len)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split(' ')\n    max_word_len = 0\n    for word in list1:\n        if len(word) > max_word_len:\n            max_word_len = len(word)\n    return max_word_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = list1\n    max_word_len = 0\n    words_list = []\n    for word in words:\n        words_list.append(word)\n        if len(word) > max_word_len:\n            max_word_len = len(word)\n    return max_word_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(list1.strip())\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #Your code here\n    if str1.find(sub_str)!= -1:\n        return True\n    else:\n        return False\n    #raise NotImplementedError()\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst = list(str1)\n    m = 0\n    for i in range(len(lst)):\n        if lst[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    for index, letter in enumerate(str1):\n        if letter in sub_str:\n            if index < len(sub_str):\n                result = True\n        else:\n            continue\n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    # if list of string is not empty\n    if len(str1) > 0:\n        \n        # find the first index that starts with the substring\n        first_index = 0\n        \n        # for each index, check if the substring is present at the current index\n        for i in range(0, len(str1)):\n            if str1[i:i+len(sub_str)] == sub_str:\n                return (i, i + len(sub_str))\n        return None\n    else:\n        return None\n    \n    \nstr1 = \"awesome\"\nsub_str = \"w\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if(str1.find(sub_str)!= -1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    s_list = str1.split()\n    s_list = list(map(str.strip, s_list))\n    s_list = list(map(str.lower, s_list))\n    return sub_str in set(s_list)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    print(\"\\nFind sub-string : \")\n    print(\"Find sub-string : \")\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n        else:\n            continue\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # find all the possible substring\n    sub_str_list = []\n    for s in sub_str:\n        sub_str_list.extend(s)\n    # check if all the possible substring are present in the given string\n    for i in range(0, len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] in sub_str_list:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    else:\n        return is_undulating(n/2)\n    \ndef is_power_of_2(n):\n    '''\n    Write a function to determine whether a given number is a power of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    else:\n        if n == 2:\n            return True\n        else:\n            return is_power_of_2(n/2)\n    \ndef is_even(n):\n    '''\n    Write a function to determine whether a given number is even or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    else:\n        if n%2 == 0:\n            return True\n        else:\n            return is_even(n/2)\n        \ndef is_prime(n):\n    '''\n    Write a function to determine whether a given number is a prime number or not.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    result = True\n    if n % 10 == 0:\n        result = True\n    else: \n        result = False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 0 and (n % 10) == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 10 == 5\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 2: \n        return True\n    elif n % 3 == 0 or n % 5 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True\n    if n == 2: \n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    a = a**b\n    return a\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    if b < 0:\n        return 0\n    \n    return a*power(a,b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\ndef multi(a,b):\n    '''\n    Write a function that takes in an integer 'a' and an integer 'b' and multiplies them together.\n    '''\n    return a*b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0][1]\n    for tuple in test_list:\n        if tuple[1] < smallest:\n            smallest = tuple[1]\n    return smallest\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = test_list[1]\n    second_first = test_list[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_val[1]:\n            min_val = test_list[i]\n    return min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list = []\n    for item in test_list:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if test_list == []:\n        return ()\n    min_index = min(test_list, key=itemgetter(1))[0]\n    return min_index\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp_tuple = sorted(test_list, key = itemgetter(1))\n    return temp_tuple[0][0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_val = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_index = i\n    return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # BONUS QUESTION: what if there are ties?\n    # for values in test_list:\n    #     if values[0] == values[1]:\n    #         continue\n    #     else:\n    #         first_value = values[0]\n    #         second_value = values[1]\n    #         if first_value < second_value:\n    #             return first_value\n    #         elif second_value < first_value:\n    #             return second_value\n    # return None\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #your code here\n    #raise NotImplementedError(\"Implement me!\")\n    return min(test_list, key=itemgetter(1))\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n    #raise NotImplementedError(\"Implement me!\")\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    min = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < len(smallest):\n            smallest = lst[i]\n            min = i\n    return smallest, min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        raise ValueError(\"List is empty\")\n    if len(lst) == 1:\n        return len(lst[0])\n    return min(Find_Min_Length(lst[1:]), Find_Min_Length(lst[0]))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_list = lst[0]\n    for el in lst[1:]:\n        if len(el) < len(smallest_list):\n            smallest_list = el\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    smallest_index = 0\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = None\n    length = None\n    for element in lst:\n        if smallest == None or len(element) < len(smallest):\n            smallest = element\n            length = len(smallest)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        for j in lst[i]:\n            if(min_length > len(j)):\n                min_length = len(j)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = len(lst)\n    \n    for sublist in lst:\n        for item in sublist:\n            if len(item) < min_length:\n                min_length = len(item)\n    \n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = 0\n    for i in lst:\n        if(len(i) < smallest_length):\n            smallest_length = len(i)\n    return smallest_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # create a dictionary to hold count of items in list\n    count = {}\n    for i in lst:\n        count.update(i)\n    # create a list to hold the smallest length\n    smallest = []\n    # iterate through the dictionary to get the items\n    for j in lst:\n        smallest.append(min(j))\n    # create a set to store the items\n    # use a list comprehension to iterate through the keys in a dictionary\n    for key in count:\n        # if a key in a dictionary has a value of\n        # the smallest key, append the value in a list\n        if count[key] == smallest[key]:\n            smallest.remove(smallest[key])\n            smallest.append(key)\n    return smallest\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Declare a min_length variable\n    min_length = sys.maxsize\n    # Iterate through each element\n    for element in lst:\n        # If the current element is greater than the current smallest element, update the length\n        if len(element) > len(min_length):\n            min_length = element\n    return min_length\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c=0\n    while n%2==0:\n        n=n/2\n        c+=1\n    if n==1:\n        c+=1\n    return c\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # checking to see if the integer is negative\n    if n < 0:\n        n = -n\n    # initializing the counter\n    count = 0\n    # calculating each number from 2 up to n\n    for i in range(2, n+1):\n        # checking if the number is divisible by each\n        if n%i == 0:\n            # adding it to the count\n            count = count + 1\n            # printing it\n            print(i)\n    # returning the count\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num = n\n    num1 = 1\n    num2 = 1\n    if n <= 2:\n        return n\n    if n == 3:\n        return 1\n    while num2 <= num:\n        if num % num1 == 0:\n            num1 += 1\n            num2 += 1\n        else:\n            num2 += 1\n    return num2\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    counter = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for x in range(1, n):\n        if n % x == 0:\n            divisors.append(x)\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<=1:\n        return 0\n    else:\n        return n//1+divisor(n-1)\n    \nprint(\"Divisors are:\", divisor(5))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs=0\n    while n>1:\n        if n%2==0:\n            n=n/2\n        else:\n            n=n+1\n        divs=divs+1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    # Number of divisors\n    return int(n/2)\n    \n    "
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item not in frequency_dict:\n            frequency_dict[item] = 1\n        else:\n            frequency_dict[item] += 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for list1_element in list1:\n        for item in list1_element:\n            if item in frequency_dictionary.keys():\n                frequency_dictionary[item] = frequency_dictionary[item] + 1\n            else:\n                frequency_dictionary[item] = 1\n    return frequency_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(0,len(list1)):\n        if list1[i] not in freq:\n            freq[list1[i]] = 1\n        else:\n            freq[list1[i]] = freq[list1[i]] + 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    a = {}\n    for i in list1:\n        for j in i:\n            if (j in a.keys()):\n                a[j] += 1\n            else:\n                a[j] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary={}\n    for x in list1:\n        for y in x:\n            if y in dictionary.keys():\n                dictionary[y]+=1\n            else:\n                dictionary[y]=1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {i: list1.count(i) for i in list1}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Hint: Instead of writing your solution in loop, you should use dictionary comprehension\n    \n    frequency_dic = {}\n    \n    # Write your solution here\n    \n    for i in list1:\n        if i in frequency_dic:\n            frequency_dic[i] += 1\n        else:\n            frequency_dic[i] = 1\n    return frequency_dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary of frequencies\n    frequency_dict = {}\n    # iterate over the list\n    for element in list1:\n        # check if element in dictionary, if not append element to dictionary\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    # return dictionary\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary={}\n    for x in list1:\n        if x not in dictionary:\n            dictionary[x]=1\n        else:\n            dictionary[x]+=1\n    return dictionary\n    \n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for item in numbers:\n        result = result * item\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for n in range(len(numbers)):\n        result.append(numbers[n]*n)\n    print(result)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Code here\n    return (sum(map(lambda x: x * len(numbers), numbers)))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def div_num(a):\n        total = 1\n        for i in range(1,a+1):\n            total *= i\n        return total\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i]*div_num(len(numbers)))\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(numbers)\n    print(len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #Get the length of the list\n    length = len(numbers)\n    \n    #loop through the list and multiply with the length\n    for i in range(length):\n        for j in range(length):\n            numbers[i] *= length\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 0\n    #TODO-4: What happens if the list is longer than 5?\n    length = len(numbers)\n    if length < 5:\n        print(\"Incorrect list input\")\n        return\n    for i in range(0, length):\n        result = result + numbers[i] * (length - i)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(numbers)\n    if len(numbers)==0:\n        print('You cannot divide by zero!')\n        return\n    if len(numbers)==1:\n        print(numbers[0])\n        return numbers[0]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num_list=[]\n    for num in numbers:\n        num_list.append(num*len(numbers))\n    num_list=list(set(num_list))\n    num_list=list(dict.fromkeys(num_list))\n    num_list=sorted(num_list)\n    n=len(num_list)\n    for i in range(0,n):\n        for j in range(n-i-1):\n            if num_list[j]>num_list[j+1]:\n                temp=num_list[j]\n                num_list[j]=num_list[j+1]\n                num_list[j+1]=temp\n    num_list=list(dict.fromkeys(num_list))\n    num_list=sorted(num_list)\n    for i in range(0,n):\n        print(num_list[i],end=\" \")\n    print()\n    return num_list\n    # pass\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n!= 0:\n        rem = n % 2\n        n = n // 2\n        binary = str(rem) + binary\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:].zfill(8)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if (n == 0): \n        return ''\n    else: \n        return format(n, 'b') \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return ''.join(f'{int(d):b}' for d in str(n))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return(bin(n).replace(\"0b\", \"\"))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:] if n > 0 else bin(abs(n))[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    base=10\n    result=''\n    while(n!=0):\n        result=str(n%base)+result\n        n//=base\n    return result[1:]\n    \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n == 0):\n        return \"0\"\n    if(n == 1):\n        return \"1\"\n    bin_str = \"\"\n    while(n):\n        bin_str += str(n%2)\n        n = n//2\n    return bin_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = bin(n)\n    return res[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n:\n        remainder = n % 2\n        binary += str(remainder)\n        n //= 2\n    return binary\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while num < 1:\n        if num == 1:\n            return num\n        num = num*3 + 2\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Convert the input to a list.\n    num_as_list = list(str(num))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #implement using the fact that a palindrome is a palindrome if:\n    #a,b,c,... are a palindrome.\n    #a,b,c,... are not a palindrome.\n    #a,b,c,d,... are not a palindrome.\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 9:\n        return num-1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return num\n    if num == 2:\n        return 3\n    if num == 3:\n        return 4\n    if num == 4:\n        return 5\n    if num == 5:\n        return 6\n    if num == 6:\n        return 7\n    if num == 7:\n        return 8\n    if num == 8:\n        return 9\n    if num == 9:\n        return 10\n    if num == 10:\n        return 11\n    if num == 11:\n        return 12\n    if num == 12:\n        return 13\n    if num == 13:\n        return 14\n    if num == 14:\n        return 15\n    if num == 15:\n        return 16\n    if num == 16:\n        return 17\n    if num == 17:\n        return 18\n    if num == 18:\n        return 19\n    if num == 19:\n        return 20\n    if num == 20:\n        return 21\n    if num == 21:\n        return 22\n    if num == 22:\n        return 23\n    if num == 23:\n        return 24\n    if num == 24:\n        return 25\n    if num == 25:\n        return 26\n    if num == 26:\n        return 27\n    if num == 27:\n        return 28\n    if num == 28:\n        return 29\n    if num == 29:\n        return 30\n    if num == 30:\n        return 31\n    if num == 31:\n        return 32\n    if num == 32:\n        return 33\n    if num == 33:\n        return 34\n    if num == 34:\n        return 35\n    if num == 35:\n        return 36\n    if num == 36:\n        return 37\n    if num == 37:\n        return 38\n    if num == 38:\n        return 39\n    if num == 39:\n        return 40\n    if num == 40:\n        return 41\n    if num == 41:\n        return 42\n    if num == 42:\n        return 43\n    if num == 43:\n        return 44\n    if num == 44:\n        return 45\n    if num == 45:\n        return 46\n    if num == 46:\n        return 47\n    if num == 47:\n        return 48\n    if num == 48:\n        return 49\n    if num == 49:\n        return 50\n    if num == 50:\n        return 51\n    if num == 51:\n        return 52\n    if num == 52:\n        return 53\n    if num == 53:\n        return 54\n    if num == 54:\n        return 55\n    if num == 55:\n        return 56\n    if num == 56:\n        return 57\n    if num == 57:\n        return 58\n    if num == 58:\n        return 59\n    if num == 59:\n        return 60\n    if num == 60:\n        return 61\n    if num == 61:\n        return 62\n    if num == 62:\n        return 63\n    if num == 63:\n        return 64\n    if num == 64:\n        return 65\n    if num == 65:\n        return 66\n    if num == 66:\n        return 67\n    if num == 67:\n        return 68\n    if num == 68:\n        return 69\n    if num == 69:\n        return 70\n    if num == 70:\n        return 71\n    if num == 71:\n        return 72\n    if num == 72:\n        return 73\n    if num == 73:\n        return 74\n    if num == 74:\n        return 75\n    if num == 75:\n        return 76\n    if num == 76:\n        return 77\n    if num == 77:\n        return 78\n    if num == 78:\n        return 79\n    if num == 79:\n        return 80\n    if num == 80:\n        return 81\n    if num == 81:\n        return 82\n    if num == 82:\n        return 83\n    if num == 83:\n        return 84\n    if num == 84:\n        return 85\n    if num == 85:\n        return 86\n    if num == 86:\n        return 87\n    if num == 87:\n        return 88\n    if num == 88:\n        return 89\n    if num == 89:\n        return 90\n    if num == 90:\n        return 91\n    if num == 91:\n        return 92\n    if num == 92:\n        return 93\n    if num == 93:\n        return 94\n    if num == 94:\n        return 95\n    if num == 95:\n        return 96\n    if num == 96:\n        return 97\n    if num == 97:\n        return 98\n    if num == 98:\n        return 99\n    if num == 99:\n        return 100\n    if num == 100:\n        return 101\n    if num == 101:\n        return 102\n    if num == 102:\n        return 103\n    if num == 103:\n        return 104\n    if num == 104:\n        return 105\n    if num == 105:\n        return 106\n    if num == 106:\n        return 107\n    if num == 107:\n        return 108\n    if num == 108:\n        return 109\n    if num == 109:\n        return 110\n    if num == 110:\n        return 111\n    if num == 111:\n        return 112\n    if num == 112:\n        return 113\n    if num == 113:\n        return 114\n    if num == 114:\n        return 115\n    if num == 115:\n        return 116\n    if num == 116:\n        return 117\n    if num == 117:\n        return 118\n    if num == 118:\n        return 119\n    if num == 119:\n        return 120\n    if num == 120:\n        return 121\n    if num == 121:\n        return 122\n    if num == 122:\n        return 123\n    if num == 123:\n        return 124\n    if num == 124:\n        return 125\n    if num == 125:\n        return 126\n    if num == 126:\n        return 127\n    if num == 127:\n        return 128\n    if num == 128:\n        return 129\n    if num == 129:\n        return 130\n    if num == 130:\n        return 131\n    if num == 131:\n        return 132\n    if num == 132:\n        return 133\n    if num == 133:\n        return 134\n    if num == 134:\n        return 135\n    if num == 135:\n        return 136\n    if num == 136:\n        return 137\n    if num == 137:\n        return 138\n    if num == 138:\n        return 139\n    if num == 139:\n        return 140\n    if num == 140:\n        return 141\n    if num == 141:\n        return 142\n    if num == 142:\n        return 143\n    if num == 143:\n        return 144\n    if num == 144:\n        return 145\n    if num == 145:\n        return 146\n    if num == 146:\n        return 147\n    if num == 147:\n        return 148\n    if num == 148:\n        return 149\n    if num == 149:\n        return 150\n    if num == 150:\n        return 151\n    if num == 151:\n        return 152\n    if num == 152:\n        return 153\n    if num == 153:\n        return 154\n    if num == 154:\n        return 155\n    if num == 155:\n        return 156\n    if num == 156:\n        return 157\n    if num == 157:\n        return 158\n    if num == 158:\n        return 159\n    if num == 159:\n        return 160\n    if num == 160:\n        return 161\n    if num == 161:\n        return 162\n    if num == 162:\n        return 163\n    if num == 163:\n        return 164\n    if num == 164:\n        return 165\n    if num == 165:\n        return 166\n    if num == 166:\n        return 167\n    if num == 167:\n        return 168\n    if num == 168:\n        return 169\n    if num == 169:\n        return 170\n    if num == 170:\n        return 171\n    if num == 171:\n        return 172\n    if num == 172:\n        return 173\n    if num == 173:\n        return 174\n    if num == 174:\n        return 175\n    if num == 175:\n        return 176\n    if num == 176:\n        return 177\n    if num == 177:\n        return 178\n    if num == 178:\n        return 179\n    if num == 179:\n        return 180\n    if num == 180:\n        return 181\n    if num == 181:\n        return 182\n    if num == 182:\n        return 18"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindromes = [\n        '',\n        'a',\n        'b',\n        'c',\n        'd',\n        'e',\n        'f',\n        'g',\n        'h',\n        'i',\n        'j',\n        'k',\n        'l',\n        'm',\n        'n',\n        'o',\n        'p',\n        'q',\n        'r',\n        's',\n        't',\n        'u',\n        'v',\n        'w',\n        'x',\n        'y',\n        'z',\n    ]\n    n = len(palindromes)\n    for i in range(n//2):\n        if palindromes[i] == palindromes[n-i-1]:\n            return palindromes[i]\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    start = 0\n    end = len(num) - 1\n    while (start + end) <= len(num):\n        mid = (start + end) // 2\n        if num[mid] == num[mid+1] and mid + 1 < len(num):\n            start = mid + 1\n        elif num[mid] == num[mid-1] and mid - 1 >= 0:\n            end = mid - 1\n        elif num[mid]!= num[mid-1]:\n            return num[mid]\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        A palindrome is a word or phrase that is the same forwards and backwards. \n        '''\n        if num < 10:\n            return False\n        if num < 100:\n            return True\n        if num % 10 == 0:\n            return True\n        return False\n    if num < 10:\n        return num\n    if is_palindrome(num):\n        return num\n    else:\n        for i in range(1, int(num)):\n            if is_palindrome(i):\n                return i\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    a=0\n    b=num\n    nums=[]\n    while(a<b):\n        a=a+1\n        b=a\n        if(a%2==0):\n            b=b-1\n        nums.append(b)\n    i=0\n    while(i<len(nums)):\n        if(nums[i]==nums[i+1]):\n            i=i+1\n        else:\n            break\n    return nums[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # sort array\n    arr.sort()\n    # return the kth element if it's present\n    if arr[k-1] == k:\n        return arr[k-1]\n    return kth_element(arr[k:], k-1)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # find the position of the kth element\n    l = 0\n    r = n-1\n    \n    while(l<=r):\n        m = l+(r-l)//2\n        if(arr[m]==k):\n            return arr[m]\n        elif(arr[m]<k):\n            l = m+1\n        else:\n            r = m-1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def find(x):\n        if x > k:\n            return 0\n        if x == k:\n            return 1\n        if x > k:\n            return 2\n        if x > k-1:\n            return 3\n    \n    return arr[find(k)]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # We can iterate through the array and get the current index\n    for i in range(k):\n        if arr[i] == k:\n            return i\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if i!= k:\n            return arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    k-=1\n    l=0\n    for i in range(k):\n        l+=arr[i]\n        if l>arr[i]:\n            break\n    return arr[l]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    index = (len(arr) - 1) - k\n    if index == -1:\n        return arr[0]\n    return arr[index]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n    if k == 0:\n        return arr[0]\n    elif k > len(arr):\n        return -1\n    else:\n        return arr[k - 1"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    for i in range(len(words)):\n        if i >= 1:\n            words[i] = words[i].capitalize()\n    return ''.join(words)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    capitalized_word = word.title()\n    split_word = capitalized_word.split('_')\n    for split_word_index in range(len(split_word)):\n        word = split_word[split_word_index]\n        if word.isupper():\n            split_word[split_word_index] = word.lower()\n            word = \"_\".join(split_word)\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.lower()\n    word = re.sub(r'(.)([A-Z][a-z])', r'\\1_\\2', word)\n    word = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    word = re.sub(r'([A-Z][a-z])([A-Z][a-z])', r'\\1_\\2', word)\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    return word.title()"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    first_word = words[0]\n    return first_word[0].lower() + ''.join(x.title() for x in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #return word.upper().replace('_','')\n    return ''.join(i.capitalize() for i in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_words = [\n            word.capitalize(),\n            word.upper(),\n            word.lower()\n        ]\n    camel_words_lower = [camel_word.lower() for camel_word in camel_words]\n    return ''.join(camel_words_lower)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # TODO: Your code here\n    # return word.title()\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    for i in word.split('_'):\n        if i.isupper():\n            new_word += i.lower()\n        else:\n            new_word += i.upper()\n    return new_word"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n \n    if m < n: \n        return -1 \n    if m == 1: \n        return n \n    m = min(m, n) \n    a = m \n    for i in range(n, m-1): \n        a = a*n + i \n    a = a*n \n    return a \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    D = n * (n-1)\n    def bs(n): \n        return n % m\n    def dfs(v): \n        return v \n    def dfs_rec(v, n, m): \n        if v == m: \n            return n - bs(n)\n        else: \n            n = dfs_rec(v, n, m) \n            return n \n    return bs(D) \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # If n, m are both odd, then a(n, m) = 2.\n    if n % 2!= 0:\n        a = 2\n    else:\n        # Else, a(n, m) = 1.\n        a = 1\n    \n    # If n and m are even, then a(n, m) = 1.\n    if n % 2!= 0 and m % 2 == 0:\n        a = 1\n    else:\n        # Else, a(n, m) = 2.\n        a = 2\n    \n    # Else, a(n, m) = 2.\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def eulerian_circuit(a):\n        '''\n        Determines the circuit for a(n, m) = a(n, m - 1) + a(n - 1, m).\n        '''\n        # Check if the input is valid\n        if a <= 0 or a >= n:\n            return -1\n        else:\n            # Initialise a list of all possible flips\n            flips = []\n            # Loop through n for each row\n            for i in range(n):\n                # Check if the i-th row is a valid flip\n                if i == 0 or i == n-1:\n                    # Add i-th row to list\n                    flips.append(i)\n                # Check if the i-th column is a valid flip\n                else:\n                    # Add i-th column to list\n                    flips.append(i)\n            # Return the flips in reverse order\n            flips.reverse()\n            # For each flip\n            for i in flips:\n                # Check if the flip is valid\n                if i == 0 or i == n-1:\n                    # If it is, add it to the result\n                    return -1\n                else:\n                    # If it is not, add it to the result\n                    return i\n    # Check if the input is valid\n    if n <= 0 or n >= n:\n        return -1\n    else:\n        # Initialise a list of all possible flips\n        flips = []\n        # Loop through n for each row\n        for i in range(n):\n            # Check if the i-th row is a valid flip\n            if i == 0 or i == n-1:\n                # Add i-th row to list\n                flips.append(i)\n            # Check if the i-th column is a valid flip\n            else:\n                # Add i-th column to list\n                flips.append(i)\n        # Return the flips in reverse order\n        flips.reverse()\n        # For each flip\n        for i in flips:\n            # Check if the flip is valid\n            if i == 0 or i == n-1:\n                # If it is, add it to the result\n                return 1\n            else:\n                # If it is not, add it to the result\n                return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1: \n        return n\n    else:\n        if n % 2 == 0 and m % 2 == 0: \n            return eulerian_num(n, m - 1) + eulerian_num(n - 1, m)\n        elif n % 2 == 1 and m % 2 == 1: \n            return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n        else: \n            return eulerian_num(n - 1, m - 1) + eulerian_num(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    assert n >= 0 and m >= 0, 'Eulerian number must be positive'\n    E = [1]\n    for i in range(1, n + 1):\n        if i < m:\n            E.append(E[i - 1] + E[i])\n        if i > m:\n            E.append(E[i - m] + E[i])\n    return E[m]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ## num = 1\n    # if n == 0 and m == 0:\n    #     return 1\n    # if n == 0 or m == 0:\n    #     return 0\n    # for i in range(2, m + 1):\n    #     if num % i == 0:\n    #         if num // i == n:\n    #             return num\n    #         num = num // i\n    # return 0\n    if n == 0 or m == 0:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_valid(eulerian_number):\n        valid = True\n        for i in range(len(eulerian_number)-1):\n            if (eulerian_number[i]!= eulerian_number[i+1]):\n                valid = False\n        return valid\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s1 = s2 = s3 = 0\n    i = 1\n    # Iterate over the natural numbers up to n.\n    while i <= n:\n        # Choose the sum of n+1 + i.\n        s1 += i * i\n        # Choose the sum of n+1 + (n+1) + i.\n        s2 += i * (i + 1)\n        # Choose the sum of n + i + (n + 1) + i.\n        s3 += (n + 1) * (i + 1)\n        i += 1\n    # The product of both sums is the Eulerian number.\n    return (s1 * s2 * s3) % m\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    n = int(n)\n    m = int(m)\n    if n < 1 or m < 1 or n > m:\n        raise ValueError(\"Invalid input\")\n    if n == 1 or m == 1:\n        return 1\n    if n == m:\n        return n\n    p = n - 1\n    q = m - 1\n    s = n + m\n    t = n + m\n    while True:\n        if q == 0:\n            return p\n        if q == 1:\n            return t\n        if p == s:\n            return p\n        if p == q:\n            return t\n        p = p % s\n        q = q % s\n        s = s % t\n        t = t % p\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list)==0:\n        return []\n    \n    else:\n        first_elem = input_list.pop(0)\n        new_list = []\n        for sub_list in input_list:\n            if type(sub_list[0])==list:\n                new_list.append(sub_list)\n            else:\n                new_list.append(sorted(sub_list,key=lambda x: x[0]))\n        return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for index in range(len(sublist) - 1):\n            if sublist[index] > sublist[index + 1]:\n                sublist[index], sublist[index + 1] = sublist[index + 1], sublist[index]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    i = 0\n    while(i < len(input_list)):\n        j = 0\n        while(j < len(input_list[i])):\n            sublists.append(input_list[i][j])\n            j += 1\n        i += 1\n    sublists.sort()\n    return sublists\n    \ndef count_numbers(input_list):\n    '''\n    Write a function that returns the number of unique elements in a given list.\n    '''\n    num_dict = {}\n    for item in input_list:\n        if item in num_dict:\n            num_dict[item] += 1\n        else:\n            num_dict[item] = 1\n    return len(num_dict)\n    \ndef check_if_two_ints_satisfied(input_list):\n    '''\n    Write a function that returns True if the elements of a given list are all\n    two integers, otherwise, return False.\n    '''\n    for item in input_list:\n        if item!= int and item!= float:\n            return False\n    return True\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for i in input_list:\n        for j in range(len(i)):\n            if i[j] not in sorted_list:\n                sorted_list.append(i[j])\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list,key= lambda x: [len(x),x])\n    \ndef get_longest_word(input_list):\n    '''\n    Given a list of strings, return the longest word in it.\n    '''\n    for element in input_list:\n        for i in range(len(element)):\n            if element[i] == element[i].upper():\n                return element[i]\n    \n    return None\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list = sorted(input_list, key = lambda x: x[0])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    import operator\n    sub_list = []\n    count = 0\n    for i in range(len(input_list)):\n        if count % 2 == 0:\n            for j in range(len(input_list[i])):\n                sub_list.append(input_list[i][j])\n        else:\n            for k in range(len(input_list[i])):\n                sub_list.append(input_list[i][k])\n        count = count + 1\n    sub_list.sort()\n    return sub_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda x : sorted(x))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res = 0\n    for i in lst:\n        if i:\n            res += 1\n    return res\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i == True:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Method 1\n    # count_true_booleans = len(lst)\n    # count_false_booleans = 0\n    # for i in lst:\n    #     if i == False:\n    #         count_false_booleans = count_false_booleans + 1\n    #     else:\n    #         pass\n    # return count_false_booleans\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # count the number of true values in the list\n    # Note: if the list is empty, count will return 0\n    return len([i for i in lst if i])\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in range(len(lst)):\n        if(lst[i]==True):\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for b in lst:\n        if b:\n            cnt = cnt + 1\n    return cnt\n        \nprint(count([1,1,1,0,0]))"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    total = 0\n    for ele in lst:\n        if ele == True:\n            total = total + 1\n    return total\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for value in lst:\n        if value:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    test_tup = (test_tup[0],) + test_tup[1:]\n    return test_list, test_tup\n    \ndef test_add_lists():\n    '''\n    Add lists in the correct order.\n    '''\n    test_list = []\n    test_tup = (1, 2, 3)\n    \n    test_list, test_tup = add_lists(test_list, test_tup)\n    test_list.sort()\n    test_tup.sort()\n    \n    assert test_list == [1, 2, 3]\n    assert test_tup == (1, 2, 3)\n    \n    test_list = []\n    test_tup = ()\n    \n    test_list, test_tup = add_lists(test_list, test_tup)\n    test_list.sort()\n    test_tup.sort()\n    \n    assert test_list == []\n    assert test_tup == ()\n    \n    test_list = []\n    test_tup = []\n    \n    test_list, test_tup = add_lists(test_list, test_tup)\n    test_list.sort()\n    test_tup.sort()\n    \n    assert test_list == []\n    assert test_tup == []\n    \ndef test_tuplen():\n    '''\n    Check that tuples are immutable.\n    '''\n    # Tuples can be added to tuples.\n    test_tup = (1,)\n    test_list = [1]\n    test_tup, test_list = add_lists(test_tup, test_list)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == (1,)\n    assert test_list == [1]\n    \n    test_tup = ()\n    test_list = [1]\n    test_tup, test_list = add_lists(test_tup, test_list)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    # Tuples can be removed from tuples.\n    test_tup = (1,)\n    test_list = [1]\n    test_tup = remove_lists(test_tup, test_list)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    # Tuples can be added to lists.\n    test_list = [1]\n    test_tup = [1]\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == (1,)\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = [1]\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == (1,)\n    assert test_list == [1]\n    \n    # Tuples can be removed from lists.\n    test_list = [1]\n    test_tup = [1]\n    test_list = remove_lists(test_list, test_tup)\n    test_list.sort()\n    test_tup.sort()\n    assert test_list == []\n    assert test_tup == []\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    # Tuples can be added to lists and removed from lists.\n    test_list = [1]\n    test_tup = (1,)\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == (1,)\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    # Tuples can be added to lists and removed from lists.\n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    # Tuples can be added to lists and removed from tuples.\n    test_list = [1]\n    test_tup = (1,)\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == (1,)\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    # Tuples can be added to lists and removed from lists.\n    test_list = [1]\n    test_tup = (1,)\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == (1,)\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list, test_tup)\n    test_tup.sort()\n    test_list.sort()\n    assert test_tup == ()\n    assert test_list == [1]\n    \n    test_list = [1]\n    test_tup = ()\n    test_list = add_lists(test_list"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    test_tup = test_tup + test_list\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in range(len(test_tup)):\n        test_list.append(test_tup[x])\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == test_list[i][0]:\n            test_tup[i][1] += 1\n        else:\n            test_tup.append(test_tup[i])\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_tup[0] == test_tup[1]:\n        # if list is the same append list to same list\n        test_list.append(test_tup[0])\n    else:\n        # if first list is different append list to same list\n        test_list.append(test_tup[0])\n        test_list.append(test_tup[1])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup[0])\n    test_tup[0] = test_tup[1]\n    test_tup[1] = test_list\n    return test_tup[0], test_tup[1]\n    \ndef test_pow():\n    '''\n    Write a function that determines if the given number is a power of 2.\n    '''\n    assert pow(2, 5) == 2\n    assert pow(2, 5, 2) == 2\n    assert pow(2, 2, 2) == 2\n    assert pow(2, 2, 2, 2) == 2\n    assert pow(2, 2, 2, 2, 2) == 2\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup[0])\n    test_tup[1].append(test_tup[1][-1]+test_tup[1][-2])\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in test_list:\n        if x not in test_tup:\n            test_tup.append(x)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) < len(num2) or len(num2) < len(num3) or len(num3) < len(num1):\n        return num1 + num2 + num3\n    else:\n        s = []\n        i = 0\n        j = 0\n        k = 0\n        while i < len(num1) and j < len(num2) and k < len(num3):\n            if num1[i] < num2[j] < num3[k]:\n                s.append(num1[i])\n                i+=1\n                j+=1\n                k+=1\n            elif num1[i] < num2[j] < num3[k]:\n                s.append(num2[j])\n                j+=1\n                k+=1\n            else:\n                s.append(num3[k])\n                k+=1\n        while i < len(num1):\n            s.append(num1[i])\n            i+=1\n        while j < len(num2):\n            s.append(num2[j])\n            j+=1\n        while k < len(num3):\n            s.append(num3[k])\n            k+=1\n        return s\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = []\n    l2 = []\n    l3 = []\n    heapq.heappush(l1,(num1[0]))\n    heapq.heappush(l2,(num2[0]))\n    heapq.heappush(l3,(num3[0]))\n    i=0\n    j=0\n    while i<len(l1) or j<len(l2) or j<len(l3):\n        if i<len(l1):\n            if j<len(l2):\n                if heapq.heappop(l1)<heapq.heappop(l2):\n                    heapq.heappush(l3,num3[j])\n                    j+=1\n                else:\n                    heapq.heappush(l3,num3[j])\n                    j+=1\n            else:\n                heapq.heappush(l3,num3[j])\n                j+=1\n        else:\n            if j<len(l2):\n                if heapq.heappop(l2)<heapq.heappop(l3):\n                    heapq.heappush(l3,num3[j])\n                    j+=1\n                else:\n                    heapq.heappush(l3,num3[j])\n                    j+=1\n            else:\n                heapq.heappush(l3,num3[j])\n                j+=1\n        i+=1\n        j+=1\n    return l3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heappush(num1, -num2)\n    heapq.heappush(num2, num3)\n    heapq.heappush(num3, -num1)\n    return num1,num2,num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    if num1 == num2 == num3:\n        return num1+num2+num3\n    if num1 < num2 < num3:\n        res.append(num1)\n        res.append(num2)\n        res.append(num3)\n    else:\n        res.append(num2)\n        res.append(num1)\n        res.append(num3)\n    return res\ndef merge_sorted_list_bottomup(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    res = []\n    if num1 == num2 == num3:\n        return num1+num2+num3\n    if num1 < num2 < num3:\n        res.append(num1)\n        res.append(num2)\n        res.append(num3)\n    else:\n        res.append(num2)\n        res.append(num1)\n        res.append(num3)\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #Takes num1, num2, and num3 as arguments.\n    #Returns a new sorted list with both numbers merged.\n    i = 0\n    j = 0\n    k = 0\n    \n    list1 = []\n    list2 = []\n    list3 = []\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n        if num1[i] >= num2[j] and num1[i] >= num3[k]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num3[k])\n            k+=1\n    while i < len(num1):\n        result.append(num1[i])\n        i+=1\n    while j < len(num2):\n        result.append(num2[j])\n        j+=1\n    while k < len(num3):\n        result.append(num3[k])\n        k+=1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] < num3[k]:\n            temp_list.append(num1[i])\n            i += 1\n            j += 1\n            k += 1\n        else:\n            temp_list.append(num2[j])\n            j += 1\n            k += 1\n    while i < len(num1):\n        temp_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        temp_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        temp_list.append(num3[k])\n        k += 1\n    heapq.heapify(temp_list)\n    return temp_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #store values in three separate arrays\n    s1 = []\n    s2 = []\n    s3 = []\n    #assign values into three separate arrays\n    for i in range(len(num1)):\n        s1.append(num1[i])\n    for j in range(len(num2)):\n        s2.append(num2[j])\n    for k in range(len(num3)):\n        s3.append(num3[k])\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merge_list.append(num1[i])\n            i += 1\n        else:\n            merge_list.append(num2[j])\n            j += 1\n    if i < len(num1):\n        merge_list += num1[i:]\n    if j < len(num2):\n        merge_list += num2[j:]\n    return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i] < num2[j] and num1[i]<num3[k]:\n            num1[i]=num1[i]+num2[j]\n            j=j+1\n        elif num1[i] > num2[j] and num1[i]>num3[k]:\n            num1[i]=num1[i]-num2[j]\n            j=j+1\n        elif num1[i] > num2[j] and num1[i]>num3[k]:\n            num1[i]=num1[i]-num2[j]\n            j=j+1\n        elif num1[i] < num2[j] and num1[i]>num3[k]:\n            num1[i]=num1[i]+num2[j]\n            k=k+1\n        elif num1[i] < num2[j] and num1[i]<num3[k]:\n            num1[i]=num1[i]+num2[j]\n            k=k+1\n        i=i+1\n        j=j+1\n        k=k+1\n    if j<len(num2):\n        while j<len(num2):\n            num1[i]=num1[i]+num2[j]\n            j=j+1\n            i=i+1\n    elif j<len(num2):\n        while j<len(num2):\n            num1[i]=num1[i]-num2[j]\n            j=j+1\n            i=i+1\n    else:\n        while j<len(num3):\n            num1[i]=num1[i]-num3[j]\n            j=j+1\n            i=i+1\n    return num1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # solution: https://www.w3schools.com/python/python_functions_and_loops.asp\n    x = n % 2\n    l = n // 2\n    l1 = 0\n    l2 = 0\n    for i in range(0,l):\n        l1 = (2**i) * x\n        if (l1 % 2) == 0:\n            l2 = (2**(l+i)) * x\n    return l2 + l1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n==0):\n        return 0\n    elif(n%2==0):\n        return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2-1)\n    else:\n        return odd_Equivalent(s,n//2-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code goes here\n    '''\n    if(n==0):\n        return 0\n    else:\n        return odd_Equivalent(s, n-1)\n    '''\n    return (odd_Equivalent(s,n-1))\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    str = '10'\n    str = str.zfill(n)\n    count = 0\n    for i in range(n-1):\n        str = str[::-1]\n        count += int(str,2)\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        if s[i]%2==1:\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    occ = 0\n    for i in range(len(s)): \n        if(s[i] == '0' and i%2 == 0): \n            occ += 1\n        elif(s[i] == '1' and i%2!= 0): \n            occ += 1\n    \n    return occ\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        result += sum(s[i::2])\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i=0\n    j=0\n    count=0\n    while j<n:\n        a=s[i]\n        b=s[j]\n        count=count+1\n        if (a!=b):\n            i=i+1\n        else:\n            j=j+1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res=0\n    s=s.split('0')\n    i=0\n    while i<n:\n        res+=int(s[i])\n        i+=1\n    res+=int(s[i])\n    return res\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    num_odd = 0\n    for i in range(n):\n        num_odd = num_odd + odd_number(s,i)\n    return num_odd\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        if type(i) is list:\n            result.append(common_in_nested_lists(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    listofnestedlists=list()\n    for l in nestedlist:\n        for i in range(len(l)):\n            if l[i] not in listofnestedlists:\n                listofnestedlists.append(l[i])\n    print(listofnestedlists)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list1=[]\n    list2=[]\n    if type(nestedlist) is list:\n        list1 = nestedlist.pop(0)\n        list2 = nestedlist.pop(0)\n    else:\n        list1 = nestedlist\n        list2 = nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Hint: Use the % operator to make the whole list into a single string.\n    # e.g. n = [1, 2, [3, 4]]\n    # Given a nested list, count the number of common elements and return a new list of the counts.\n    \n    \n    # first generate a new list of all unique items in the first level of the nested list\n    # then use a for loop to get all the values from each item\n    \n    # then use a list comprehension to create a new list of unique values and combine them into a new one\n    \n    # then compare them to the items in the list and if they are in the new list, then replace them with the count\n    # finally return the new list\n    \n    # initialize an empty list to add each value to\n    # initialize a new list to be the same size as the list inside the nested list\n    # this will be the result of returning an empty list if two or more lists are not equal\n    \n    # return the new list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i in j:\n                common_list.append(i)\n                break\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for l in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(l))\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*map(list, nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        common.update(sublist)\n    return list(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [i for i in nestedlist if nestedlist.count(i) > 1]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for i in range(len(nestedlist)):\n        for j in range(i, len(nestedlist)):\n            if (nestedlist[i] in nestedlist[j]):\n                res.append(nestedlist[i])\n    return res\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if(text[0] in ['+', '-', '*'] and text[1:].isdigit()):\n            return True\n        else:\n            return False\n    except IndexError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for key in i:\n            if i[key] is not None:\n                i[key] = None\n    for i in list1:\n        for key in i:\n            if i[key] is None:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Empty the list\n    for i in list1:\n        for j in i:\n            j = {j:1}\n            i.update(j)\n    return list1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) > 0:\n            return False\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # your code here\n    \n    if len(list1)==0:\n        print(\"List is Empty\")\n        return False\n    else:\n        print(\"List is not empty\")\n        return True\n        \n    \n    \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if isinstance(item, dict):\n            empty_dit(item.values())\n        else:\n            pass\n    return list1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if isinstance(i, dict):\n            empty = True\n            break\n    else:\n        empty = False\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {}:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each in list1:\n        if list1[each] is None:\n            return True\n    return False\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(map(int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_list = list(set(nums))\n    for index, value in enumerate(num_list):\n        num_list[index] = int(value)\n    return num_lis"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    answer = 0\n    for num in nums:\n        answer += num\n    return answer\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(map(tuple_to_int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0 if sum(nums) == 0 else sum(map(lambda num:num,nums)"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(str(n) for n in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = nums[1:] # get rid of first element\n    return tuple(map(lambda x: int(x), nums)) # convert each element into an int\n    #raise NotImplementedError()\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            result.append(float(j))\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # convert all elements to floats\n    return [[float(i) for i in j] for j in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convertor_list = []\n    test_list = list(test_list)\n    for num_test_list in test_list:\n        for num_test_item in num_test_list:\n            num_test_item_float = float(num_test_item)\n            convertor_list.append(num_test_item_float)\n    return convertor_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        test_list = [ float(item) for item in test_list]\n    except:\n        pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convert_list = []\n    for element in test_list:\n        for character in element:\n            if character not in ['0','1']:\n                convert_list.append(float(element))\n    return convert_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = [float(test_list[i][j]) for j in range(len(test_list[i]))]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        for j in i:\n            for k in j:\n                float_list.append(float(k))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == None:\n                test_list[i][j] = 0.0\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #print(\"function call\")\n    #print(test_list)\n    '''\n    if isinstance(test_list,list):\n        for i in test_list:\n            print(type(i))\n    '''\n    try:\n        for i in test_list:\n            print(type(i))\n            if isinstance(i,list):\n                for j in i:\n                    print(type(j))\n                    if isinstance(j,list):\n                        for k in j:\n                            print(type(k))\n                            if isinstance(k,float):\n                                print(type(k))\n                            else:\n                                print(\"Not a list\")\n    except TypeError as te:\n        print(te)\n    except:\n        print(\"Exception Occurred!\")\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = list(test_list)\n    if type(test_list) == list:\n        result_list = []\n        for i in range(len(test_list)):\n            for j in range(len(test_list[i])):\n                result_list.append(float(test_list[i][j]))\n        return result_list\n    else:\n        print(\"Invalid input type. Try again.\")\n        return []\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.replace(\" \", \"\").split(\" \")\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split()\n    string = [string[i] for i in range(len(string))]\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split()\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    output = []\n    for char in string:\n        if char =='':\n            output.append(' ')\n        else:\n            output.append(char)\n    return output\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(map(str.split,string.split()))\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split()\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = []\n    word_list = string.split(' ')\n    for word in word_list:\n        string_list.append(word)\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    x=0\n    \n    while x<=n-1:\n        if arr[x]==arr[x+1]:\n            x=x+1\n        else:\n            return arr[x]\n            x=x+1\n    else:\n        return -1\n    \n    \ndef find(arr,value):\n    '''\n    Return the index of the first occurrence of value, or -1 if value is not present in array.\n    '''\n    n=len(arr)\n    \n    low=0\n    high=n-1\n    mid=0\n    \n    while low<=high:\n        mid=low+(high-low)//2\n        if arr[mid]==value:\n            return mid\n        elif arr[mid]>value:\n            high=mid-1\n        else:\n            low=mid+1\n    \n    return -1\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Method 1: first, count the number of occurrences of the element\n    counter = dict()\n    for num in arr:\n        if num not in counter:\n            counter[num] = 1\n        else:\n            counter[num] += 1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Start with the length of the array and iterate in the sorted order\n    # Time: O(n)\n    # Space: O(1)\n    # If we are in a partition, we can find the index and return that position.\n    # Otherwise, take the left and right indices, iterate through the array and find the\n    # same element.\n    left_index = 0\n    right_index = len(arr)-1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Your code here\n    s=set(arr)\n    x=None\n    for ele in s:\n        if arr.count(ele)==1:\n            x=arr.index(ele)\n            break\n    return x\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return None\n    arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        arr[i] = arr[i] + 1\n    \n    for i in range(len(arr)-1):\n        if arr[i] == 1:\n            j = i\n            while j > 0 and arr[j] == arr[j - 1]:\n                j -= 1\n            arr[j] -= 1\n    \n    for i in range(len(arr)):\n        if arr[i] == 1:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # get the length of the array\n    n = len(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    idx = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[idx]:\n            idx += 1\n        else:\n            break\n    print(idx)\n    return arr[idx]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Two ways to do this:\n    # find the element with the lowest index of the array and put it in the left array\n    # return that element.\n    \n    # convert the array to a sorted list and get the first element\n    n = len(arr)\n    start = 0\n    end = n-1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n    # check if the array contains only one element, return that element.\n    if n == 1:\n        return arr[0]\n    # return the last element.\n    return arr[n-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    result = [x for x in arr if arr.count(x) == 1]\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    '''\n    :param list1: a list of tuples with arbitrary size\n    :return: a tuple that has the maximum product of all the pairs of numbers in the list\n    '''\n    '''\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # create a new empty list to be filled with current values\n    max_list = []\n    # set max_list to be all the positive numbers\n    max_list.extend(list1)\n    # set the current_max to be the max of all values\n    current_max = max(list1)\n    # calculate the absolute value\n    # add the positive values of max_list to max_list\n    for i in list1:\n        if i > 0:\n            if i!= current_max:\n                current_max = i\n                max_list.append(current_max)\n        else:\n            current_max = 0\n            max_list.append(0)\n    # return the max_list with all the negative numbers as 0\n    return max_list\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in list1:\n        for j in list1:\n            if i > j:\n                if i - 1 == j:\n                    pass\n                else:\n                    if i * j < max_product:\n                        max_product = i * j\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1_len = len(list1)\n    max_val = 0\n    for i in range(list1_len-1):\n        for j in range(i+1, list1_len):\n            if list1[i][0] < list1[j][0] and list1[i][1] > list1[j][1]:\n                temp_val = list1[i][1]*list1[j][0]\n                if temp_val > max_val:\n                    max_val = temp_val\n    return max_val\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    '''\n    Test Inputs:\n    [ (1, 2), (3, 4), (3, 4) ]\n    '''\n    '''\n    Tests:\n    [ (1, 1), (2, 1), (1, 3) ]\n    '''\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] > max:\n                max = list1[i][0] * list1[j][0]\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Write your code here.\n    num_list = []\n    num_list.append(list1[0])\n    num_list.append(list1[1])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            max_product=max(list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1],max_product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product_tuple_2(a, b):\n        max_product = 0\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if (a[i] * b[j]) > max_product:\n                    max_product = (a[i] * b[j])\n        return max_product\n    return max_product_tuple_2(list1[0], list1[1])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l1 = len(list1)\n    for i in range(l1):\n        for j in range(l1):\n            if list1[i][0] < list1[j][0] and list1[i][1] < list1[j][1]:\n                tmp = list1[i][0] * list1[j][1]\n                list1[i] = list1[j] = (list1[i][0] * list1[j][1], tmp)\n                break\n    return list1[0][0] * list1[1][1]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    while limit!= 0:\n        if limit % 2 == 0:\n            amicable_numbers.append(int(limit/2))\n            limit = int(limit/2)\n        elif limit % 2 == 1:\n            if limit % 3 == 0:\n                amicable_numbers.append(int(limit/3))\n                limit = int(limit/3)\n            else:\n                amicable_numbers.append(int(limit/3) + int(limit/3) * 2)\n                limit = int(limit/3) + int(limit/3) * 2\n    for amicable_number in amicable_numbers:\n        if amicable_number <= limit:\n            amicable_numbers_sum += amicable_number\n    return amicable_numbers_sum"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    num = 1\n    while num <= limit:\n        if num == 1:\n            num = num * 2\n            continue\n        if num % 2 == 0:\n            num = num * 2\n            continue\n        for i in range(int(num/2)):\n            if num % i == 0 and num % (i+1) == 0:\n                amicable_numbers.append(num)\n                break\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_amicable(n):\n        if n == 1: return n\n        else: return sum_of_amicable(n - 1) + sum_of_amicable(n - 2)\n    return sum_of_amicable(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    result = []\n    for i in range(1,limit):\n        if i % 2 == 0:\n            amicable_numbers.append(i)\n        else:\n            result.append(i)\n    for i in range(1,len(result)):\n        if result[i] in result[i+1:]:\n            continue\n        else:\n            return result[i]\n    return None"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    i = 1\n    while i <= limit:\n        if i == 1:\n            j = 1\n            while j <= limit:\n                if i == j:\n                    k = i\n                    while k <= limit:\n                        if (i * j) == k:\n                            print(i)\n                        k = k + 1\n                        j = j + 1\n                j = j + 1\n        else:\n            if i!= 1 and i % 2 == 0 and i!= 4:\n                j = 1\n                while j <= limit:\n                    if (i * j) == i:\n                        print(i)\n                    j = j + 1\n            elif i % 2 == 0:\n                k = 1\n                while k <= limit:\n                    if (i * k) == i:\n                        print(i)\n                    k = k + 1\n        i = i + 1\n    return 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = []\n    amicable_numbers_list_sum = []\n    sum = 0\n    num = 2\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    number = 1\n    while number <= limit:\n        if is_amicable(number):\n            amicable_numbers.append(number)\n            if number % 2 == 0:\n                number = number // 2\n            else:\n                number = (number - 1) // 2\n        else:\n            number += 1\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sums = []\n    def sum_implemented(n):\n        if n == 1:\n            return 1\n        elif n == 0:\n            return 0\n        else:\n            if n in sums:\n                return sums[n]\n            else:\n                temp = sum_implemented(n-1)\n                if n % temp == 0:\n                    sums[n] = temp + sum_implemented(n-1)\n                else:\n                    sums[n] = temp\n                return sums[n]\n    sum = sum_implemented(limit)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    x = 1\n    y = 1\n    while y < limit:\n        z = x + y\n        if z % 2 == 0:\n            sum += z\n            x = y\n        else:\n            y = x + y\n        y = z\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    \n    for num in range(1, limit + 1):\n        num_squared = num ** 2\n        \n        if num_squared in amicable_numbers:\n            continue\n        \n        if num_squared == num:\n            sum += num\n            amicable_numbers.append(num)\n        elif num_squared in amicable_numbers and num_squared not in amicable_numbers:\n            amicable_numbers.append(num_squared)\n            sum += num_squared\n        \n        # If we have reached the limit of possible amicable numbers,\n        # we need to return the sum of all the numbers.\n        if limit == sum:\n            return sum\n    \n    # We don't want to return anything.\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ab=b-a\n    ab1=ab.real\n    ab2=ab.imag\n    ab_value=abs(ab1+ab2)\n    if ab_value==0:\n        return 0\n    angle=cmath.phase(abs(ab_value))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=0\n    if a>0 and b>0:\n        angle=acos(b.imag/a)\n    elif a<0 and b<0:\n        angle=acos(b.real/a)\n    elif a>0 and b<0:\n        angle=acos(a.imag/b)\n    elif a<0 and b>0:\n        angle=acos(b.real/a)\n    elif a==0 and b>0:\n        angle=acos(a.imag/b)\n    elif a==0 and b<0:\n        angle=acos(b.imag/a)\n    elif a==0 and b<0:\n        angle=acos(a.imag/b)\n    elif a==0 and b==0:\n        angle=acos(b.real/b)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = complex(0,0)\n    angle = cmath.angle(complex(a,b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x=b/a\n    x=complex(x)\n    return x\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle\ndef angle_ang_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle\ndef angle_rad(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*180/cmath.pi\ndef angle_deg_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef complex_ang_rad(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef complex_ang_deg(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*180/cmath.pi\ndef complex_deg_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*180/cmath.pi\ndef complex_ang_deg_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef complex_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle\ndef complex_angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle\ndef real_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle\ndef real_angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle\ndef complex_deg_rad(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef complex_deg_angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*180/cmath.pi\ndef complex_deg_angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef complex_angle_deg(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef complex_angle_deg_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_rad_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_rad_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_rad_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_rad_angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_angle_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_rad_angle_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_angle_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_angle_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_rad_angle_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_angle_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_deg_angle_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(b)-cmath.phase(a)\n    return angle*cmath.pi/180\ndef angle_rad_angle_complex_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number."
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a*b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (b.real*cmath.pi)/2 + (b.imag*cmath.pi)\ndef is_prime(n):\n    '''\n    Return True if n is a prime number, False otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef euler_seq(n):\n    '''\n    Return the sequence of Euler numbers\n    '''\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [2]\n    else:\n        return euler_seq(n-1) + [n]\ndef u(n):\n    '''\n    Write a function that returns the number of u(n) terms.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return u(n-1) + u(n-2)\ndef euler_seq_util(n):\n    '''\n    Return the sequence of Euler numbers\n    '''\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [2]\n    else:\n        return euler_seq_util(n-1) + [n]\ndef v(n):\n    '''\n    Return the number of v(n) terms.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return v(n-1) + v(n-2)\ndef factorial_n(n):\n    '''\n    Return the factorial of n\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*factorial_n(n-1)\ndef factorial(n):\n    '''\n    Return the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef factorial_n_util(n):\n    '''\n    Return the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*factorial_n_util(n-1)\ndef fac(n):\n    '''\n    Return the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*fac(n-1)\ndef factorial_n_util_util(n):\n    '''\n    Return the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*factorial_n_util_util(n-1)\ndef m(n):\n    '''\n    Return the smallest positive integer in the interval [0,n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*m(n-1)\ndef poly_root(a,b):\n    '''\n    Return the roots of a quadratic polynomial on the interval [a,b].\n    '''\n    if a == 0:\n        return [0]\n    elif a == b:\n        return [a]\n    elif b == 0:\n        return [b]\n    elif a == b:\n        return [b]\n    else:\n        m = (b**2 - 4*a*b)**0.5\n        if m > 0:\n            return poly_root(b,m) + poly_root(a,m)\n        elif m == 0:\n            return [b/m,b/m]\n        else:\n            return poly_root(b,m) + poly_root(a,m)\ndef root_quad(n):\n    '''\n    Return the square root of a number n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return root_quad(n-1) + 1/n\ndef poly_root_util(a,b):\n    '''\n    Return the roots of a quadratic polynomial on the interval [a,b].\n    '''\n    if a == 0:\n        return [0]\n    elif a == b:\n        return [a]\n    elif b == 0:\n        return [b]\n    elif a == b:\n        return [b]\n    else:\n        m = (b**2 - 4*a*b)**0.5\n        if m > 0:\n            return poly_root_util(b,m) + poly_root_util(a,m)\n        elif m == 0:\n            return [b/m,b/m]\n        else:\n            return poly_root_util(b,m) + poly_root_util(a,m)\ndef root_quad_util_util(a,b):\n    '''\n    Return the roots of a quadratic polynomial on the interval [a,b].\n    '''\n    if a == 0:\n        return [0]\n    elif a == b:\n        return [a]\n    elif b == 0:\n        return [b]\n    elif a == b:\n        return [b]\n    else:\n        m = (b**2 - 4*a*b)**0.5\n        if m > 0:\n            return root_quad_util_util(b,m) + root_quad_util_util(a,m)\n        elif m == 0:\n            return [b/m,b/m]\n        else:\n            return root_quad_util_util(b,m) + root_quad_util_util(a,m)\ndef quad_root(n):\n    '''\n    Return the square root of a number n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return quad_root(n-1) + 1/n\ndef quad_root_util_util(n):\n    '''\n    Return the roots of a quadratic polynomial on the interval [0,n).\n    '''\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [n]\n    else:\n        return quad_root_util_util(n-1) + [n]\ndef quad_root_util_util_util(n):\n    '''\n    Return the roots of a quadratic polynomial on the interval [0,n].\n    '''\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [n]\n    else:\n        return quad_root_util_util_util(n-1) + [n]\ndef sum_roots(n):\n    '''\n    Return the sum of the roots of a polynomial of order n.\n    '''\n    return quad_root_util_util_util(n) + root_quad_util_util_util(n)\ndef sum_roots_util(n):\n    '''\n    Return the sum of the roots of a polynomial of order n.\n    '''\n    return sum_roots(n) + root_quad_util_util_util(n)\ndef sum_roots_util_util(n):\n    '''\n    Return the sum of the roots of a polynomial of order n.\n    '''\n    return sum_roots(n) + quad_root_util_util_util(n)\ndef tail_tuple(n):\n    '''\n    Return a tuple of the first and last elements of the non-negative integer n.\n    '''\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        m = n%2\n        if m == 0:\n            return [n//2,n//2+1]\n        else:\n            return [n//2,n//2+1,n//2"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = cmath.complex(a[0],a[1])\n    b = cmath.complex(b[0],b[1])\n    z = abs(a)\n    y = abs(b)\n    if z < y:\n        return cmath.acos(z/y)\n    else:\n        return cmath.acos(y/z)\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = cmath.rect(a)\n    b = cmath.rect(b)\n    return a.angle_to(b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(b)\n    return c_theta\n    \ndef angle_real(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_imag(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_complex_string(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(b)\n    return c_theta\n    \ndef angle_real_string(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_real_string_all(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_real_string(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_real_string_all(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_real_string_all_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_real_string_all_complex_all(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_real_string_all_real(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_real_string_all_complex_all(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_complex_string_all_real(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_complex_string_all_real_all(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_complex_all_real_all(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_complex_all_real_all(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_complex_all_real_all_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_complex_string_all_real_all_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_complex_string_all_real_all_complex_all(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_complex_string_all_real_all_complex_all(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_real_string(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_real_string(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_complex_string(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_complex_string_string(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_complex_string_all(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_complex_string_all(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = cmath.phase(a)\n    c_theta = cmath.phase(a)\n    return c_theta\n    \ndef angle_string_real_string_all_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #c_theta = "
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    total = 0\n    start = 0\n    for i in range(len(string)):\n        total = total + string[i]\n        if string[i] == '0':\n            start = i\n            if string[i] == '1':\n                max = max + (start - i)\n        elif string[i] == '1':\n            total = total - string[i]\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = count1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n    return abs(count0 - count1)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = -1\n    length = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(len(string)):\n            if string[j] == '1':\n                count += 1\n            else:\n                count -= 1\n        if count!= 0:\n            res = max(res, abs(count - length))\n        length = count\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0s = 0\n    count_1s = 0\n    index = 0\n    index_max = 0\n    length = len(string)\n    while index < length:\n        if string[index] == \"1\":\n            count_1s += 1\n        else:\n            count_0s += 1\n        index += 1\n        if count_0s > count_1s:\n            count_0s = count_1s\n            index_max = index\n        if count_0s < count_1s:\n            count_0s = count_1s\n            index_max = index\n    return count_0s - count_1s\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_zeros = 0\n    num_ones = 0\n    \n    length = 0\n    \n    for s in string:\n        if s == '0':\n            num_zeros += 1\n        else:\n            num_ones += 1\n    \n    if num_zeros > num_ones:\n        length = num_zeros\n    else:\n        length = num_ones\n    \n    return length\n    \ndef find_palindromes(string): \n    '''\n    Write a function that returns all the palindromes of the given string. \n    A palindrome is a string that reads the same forwards and backwards. \n    '''\n    palindromes = []\n    \n    for i in range(len(string)):\n        if string[i] == string[-(i+1)]:\n            palindromes.append(string[i])\n        else:\n            break\n    \n    return palindromes\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # initialize the count variable as 0\n    count = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count_0 = 0\n    count_1 = 0\n    for i in range(0, n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    return abs(count_0 - count_1)\n    # return abs(n - count_0 - count_1)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    total_zero = 0\n    total_one = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            total_zero += 1\n        elif string[i] == '1':\n            total_one += 1\n        else:\n            count += 1\n    return max(total_zero, total_one, count)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) < 1: \n        return 0 \n    else: \n        if string[0] == \"0\": \n            return 1 \n        else: \n            return 0 \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (a<b): \n        small = a \n        large = b \n    else: \n        small = b \n        large = a \n    i = 0 \n    count = 0 \n    while (i < small): \n        if (a % i == 0 and b % i == 0): \n            count = count + 1 \n            i = i + 1 \n        i = i + 1 \n    if (count == 0): \n        return 0 \n    else: \n        return count "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a>b):\n        a,b=b,a\n    s=0\n    for i in range(1,int((b-a)/2+1)):\n        if(a%i==0 and b%i==0):\n            s+=i\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        greater=a\n        less=b\n    else:\n        greater=b\n        less=a\n    \n    while(greater%less!=0):\n        if greater%less==0:\n            return greater+less\n        greater+=less\n    return greater\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    #Take the input as an integer and return it as string \n    def integerInput(string):\n        a=str(input(string))\n        return a\n    #converting the input string to int\n    #if the input is greater than 0, it returns the integer\n    #if the input is less than 0, it returns the floating point value\n    a = integerInput(\"Enter the first integer:\")\n    b = integerInput(\"Enter the second integer:\")\n    #iterating till the integer value\n    while a>0 and b>0:\n        if(a%b==0):\n            print(\"{} is divisible by {}\".format(a,b))\n        else:\n            print(\"{} is not divisible by {}\".format(a,b))\n        #if the input is divisible by both the numbers, it returns 1\n        a=a/b\n        b=b/a\n        print(\"The new values are: {} and {}\".format(a,b))\n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    c=[]\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            c.append(i)\n    if len(c)==0:\n        print(b)\n    else:\n        print(c)\n    \nn=int(input(\"Enter the number:\"))\nsum(n,n)"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    for i in range(1,min(b,a)): \n        if a % i == 0 and b % i == 0: \n            s+= i \n    return s \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0: \n        if b == 0: \n            return 0\n        else: \n            return 1\n    elif b == 0: \n        if a == 0: \n            return 0\n        else: \n            return 1\n    else: \n        if a%b == 0: \n            return b\n        else: \n            return a%b\n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    elif a%b==0:\n        return a//b\n    else:\n        return sum(a,b//a)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Create a new variable to store sum of common divisors\n    sum = 0\n    # Check if both arguments are positive numbers\n    if a < 0 or b < 0:\n        print(\"Inputs must be non-negative numbers\")\n        return\n    # Check if the numbers are both positive numbers\n    if a < 0 or b < 0:\n        sum = 0\n        return sum\n    # Sum all the numbers in the given list\n    for i in range(a, b+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    # Return the sum of common divisors\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def is_divisible(a, b):\n        return a % b == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # your code goes here\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(x*y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef get_nth_digit(x, n):\n    '''\n    Return the nth digit of x.\n    '''\n    return x % 10\n    \ndef sum_numbers(x, y):\n    '''\n    Write a function that calculates the sum of two numbers.\n    '''\n    return x + y\n    \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of x.\n    '''\n    return n * factorial(n - 1)\n    \ndef is_palindrome(n):\n    '''\n    Write a function that returns True if x is a palindrome.\n    '''\n    return n == n[::-1]\n    \ndef is_palindrome_v2(n):\n    '''\n    Write a function that returns True if x is a palindrome.\n    '''\n    return n[::-1] == n\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x < 0 or y < 0:\n        raise ValueError('Cannot multiply by negative numbers')\n    else:\n        return int(x * y)"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # TODO:  Write the code to do this.\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_list = []\n    for word in str.split():\n        if len(word) > n:\n            long_list.append(word)\n    return long_list\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #declaring global variables\n    global word_list\n    global i\n    global j\n    global words_list\n    global words_length\n    global words_dict\n    \n    word_list = word_list.split()\n    words_list = []\n    words_dict = {}\n    words_length = 0\n    word = ''\n    for i in range(0, len(str), n):\n        word = word + str[i]\n        words_list.append(word)\n        words_dict[word] = 1\n        words_length += 1\n        if (words_length % 1000 == 0):\n            print(str(words_length) + \" words have been added\")\n    return words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # creating list\n    data = list()\n    for i in range(len(str)):\n        data.append(str[i])\n    # calculating length of string\n    length = len(str)\n    # counter\n    count = 0\n    # looping through string\n    for i in range(len(data)):\n        # if current char is more then n then add to count\n        if(data[i] >= n):\n            count += 1\n    # returning data\n    return count\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if len(str) <= n:\n        return str\n    else:\n        return \" \".join(map(long_words, range(n, len(str)+1), str.split(\" \")))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    print(\"Starting to find words that are longer than {} characters\".format(n))\n    for word in str:\n        if len(word) > n:\n            print(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l_words = []\n    word = str.split()\n    for w in word:\n        if len(w) > n:\n            l_words.append(w)\n    return l_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    count = 0\n    for i in str.split():\n        if len(i)>n:\n            count += 1\n        else:\n            if i not in result:\n                result.append(i)\n    return count\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Create an empty dictionary\n    dict = {}\n    # Iterate over the string\n    for x in str:\n        # Get the number of occurrences\n        if x in dict.keys():\n            # Increase the count\n            dict[x] = dict[x] + 1\n        else:\n            # Add the first occurrence\n            dict[x] = 1\n    # Iterate over the dictionary to find the longest word\n    max_word = \"\"\n    for i in range(len(dict)):\n        # Get the key\n        key = list(dict.keys())[i]\n        # Get the value\n        count = dict.get(key)\n        # Compare the value\n        if count > n:\n            # Get the current word\n            current_word = key\n            # Get the key with the current value\n            for x in dict.keys():\n                if dict.get(x) == count:\n                    current_word = x\n        else:\n            # No current word\n            current_word = key\n            # Set the new key\n            dict[key] = count\n    return current_word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for i in str:\n        if len(i) > n:\n            long_words.append(i)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str.split(\" \"):\n        if len(word) > n:\n            yield word\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(i+1, len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Write your code here\n    return\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line below\n    pass\n    \n    # Fill in line belo"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code goes here:\n    matrix_size = len(my_matrix)\n    for i in range(matrix_size):\n        for j in range(matrix_size):\n            if(my_matrix[i][j] == 1):\n                #print('Checking row %d, column %d' %(i,j))\n                for k in range(i, matrix_size):\n                    #print('Checking row %d, column %d' %(i,j), end=' ')\n                    if(my_matrix[k][j] == 1):\n                        return False\n    #print(\"Thank you for using the MagicSquare\")\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    return len(my_matrix) == len(my_matrix[0]) and len(my_matrix[0]) == len(my_matrix[0]) and all(x == y for x in my_matrix for y in my_matrix) and len(set([x for x in my_matrix[0]])) == 1 and len(set([y for y in my_matrix[0]])) == 1 and all(x > y for x in my_matrix[0] for y in my_matrix[0])\n    \n    # Test.assert_equals(\n    #     magic_square_test([[3, 4, 5], [6, 7, 8], [9, 10, 11]]), True\n    # )\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = True\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= 0 and my_matrix[i][j] == my_matrix[i][j+1]:\n                result = False\n            if my_matrix[i][j]!= 0 and my_matrix[i][j] == my_matrix[i+1][j]:\n                result = False\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    if size == 4:\n        for i in range(4):\n            for j in range(4):\n                if i == j or (i + j) % 2 == 0:\n                    print(my_matrix[i][j], end=\" \")\n            print()\n        print()\n        print(\"####\")\n        return True\n    else:\n        print(\"That is not a magic square!\")\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the number of rows and columns\n    rows = len(my_matrix)\n    columns = len(my_matrix[0])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = defaultdict(int)\n    for num in nums:\n        max_occurrences[num] += 1\n    return max(max_occurrences, key = max_occurrences.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_occurrence = -1\n    for i in range(len(nums)):\n        if nums[i] > max_freq:\n            max_freq = nums[i]\n            max_occurrence = i\n    return max_occurrence\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # If there are no elements in the list, return -1\n    if len(nums) == 0:\n        return -1\n    # If the list is empty, return -1\n    elif len(nums) == 1:\n        return nums[0]\n    # If there is only one element in the list, return the first element\n    elif len(nums) == 2:\n        return max(nums)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    item=nums[0]\n    max_count=0\n    for item in nums:\n        if item>item:\n            max_count+=1\n    return max_count,item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash_table = defaultdict(int)\n    for i in nums:\n        hash_table[i] += 1\n    return max(hash_table.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    lookup = {}\n    for i in nums:\n        if i in lookup:\n            lookup[i] += 1\n        else:\n            lookup[i] = 1\n    \n    max_occurrence = 0\n    max_occurrence_item = None\n    for i in lookup.values():\n        if i > max_occurrence:\n            max_occurrence = i\n            max_occurrence_item = i\n    return max_occurrence_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict1 = defaultdict(int)\n    for num in nums:\n        if dict1[num]:\n            dict1[num] = dict1[num] + 1\n        else:\n            dict1[num] = 1\n    for key in dict1:\n        if dict1[key] == max(dict1.values()):\n            return key\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = {}\n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = defaultdict(int)\n    for num in nums:\n        max_occurrences[num] += 1\n    return max_occurrences\ndef test():\n    assert max_occurrences([1, 2, 3, 4, 1]) == {1: 3, 2: 3, 3: 1, 4: 1}\n    assert max_occurrences([1, 1, 1, 1, 1]) == {1: 1, 1: 1}\n    assert max_occurrences([3, 2, 1, 3, 4]) == {3: 2, 2: 1, 4: 1}\n    assert max_occurrences([0, 3, 2, 1, 3, 4, 0, 0, 3, 2, 1, 3, 4, 0, 0]) == {0: 3, 3: 3, 2: 2, 1: 1, 4: 1}\n    assert max_occurrences([-1, 2, 3, 4, 5, 6, 7, -1, 0]) == {-1: 7, 2: 4, 3: 3, 4: 2, 5: 1, 6: 1, 7: 1}\n    assert max_occurrences([0]) == {0: 1}\n    assert max_occurrences([]) == {0: 1}\n    assert max_occurrences([-1, -2, -3, -4, -5]) == {-1: 2, -2: 1, -3: 1}\n    assert max_occurrences([]) == {-1: 1}\n    assert max_occurrences([-1, -1, 1, 1, 2, 3, 4, 5, 5, 6]) == {1: 1, 2: 1, 3: 1}\n    assert max_occurrences([-1, -1, -1]) == {0: -1}\n    assert max_occurrences([2, 5, 9, 10]) == {2: 5, 5: 1}\n    assert max_occurrences([1, 2, 3]) == {1: 3}\n    assert max_occurrences([1, 1, 1, 1, 1]) == {1: 1}\n    assert max_occurrences([]) == {}\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    \n    for num in nums:\n        counts[num] += 1\n        \n    max_freq = 0\n    \n    for key, count in counts.items():\n        if count > max_freq:\n            max_freq = count\n            max_key = key\n    \n    return max_key, max_freq\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    start = 0\n    end = len(str1) - 1\n    while start < end:\n        if str1[start] not in ['a','e','i','o','u']:\n            start += 1\n        elif str1[end] not in ['a','e','i','o','u']:\n            end -= 1\n        else:\n            str1 = str1[:start] + str1[end+1:]\n            start += 1\n            end -= 1\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1_lower = str1.lower()\n    vowels = 'aeiou'\n    str1_lower_vowels = \"\"\n    for char in str1_lower:\n        if char in vowels:\n            str1_lower_vowels += char\n        else:\n            str1_lower_vowels += char.lower()\n    return str1_lower_vowels.upper()\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels_str = 'aeiouAEIOU'\n    vowels_list = list(vowels_str)\n    vowels_list.reverse()\n    return ''.join(vowels_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return ''.join([str1[i] for i in range(len(str1)) if str1[i].lower() not in vowels])\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    str1 = str1.replace(\"a\", \"A\")\n    str1 = str1.replace(\"e\", \"E\")\n    str1 = str1.replace(\"i\", \"I\")\n    str1 = str1.replace(\"o\", \"O\")\n    str1 = str1.replace(\"u\", \"U\")\n    for i in vowels:\n        str1 = str1.replace(i, \"V\")\n    return str1\n    \nstr1 = input(\"Enter a string: \")\nstr1 = str1.replace('a', 'v')\nstr1 = str1.replace('e', 'v')\nstr1 = str1.replace('i', 'v')\nstr1 = str1.replace('o', 'v')\nstr1 = str1.replace('u', 'v')\nstr1 = str1.replace('y', 'v')\nprint(reverse_vowels(str1))"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    '''\n    >>> s = 'yakis'\n    >>> reverse_vowels(s)\n    'aako'\n    >>> reverse_vowels(s)\n    'aakis'\n    >>> reverse_vowels(s)\n    '''\n    '''\n    >>> s = 'yakis'\n    >>> reverse_vowels(s)\n    'ako'\n    >>> reverse_vowels(s)\n    'aakis'\n    >>> reverse_vowels(s)\n    '''\n    '''\n    >>> s = 'yakis'\n    >>> reverse_vowels(s)\n    '''\n    return str1[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    vowels = [char for char in str1 if char not in vowels]\n    return vowels\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return vowels[::-1].join(str1.lower()[::-1])\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join([str(x) for x in tup1]) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += f\"{i} \"\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + str(tup1).replace('tuple','') + ')'\n    \n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + str(tup1).replace('tuple','') + ')'\n    \ndef list_string(tup1):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    return '[' + str(tup1).replace('list','') + ']'\n    \ndef list_string(tup1):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    return '[' + str(tup1).replace('list','') + ']'\n    \ndef nested_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '[[' + str(tup1).replace('nested_list','') + ']]'\n    \ndef nested_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '[[' + str(tup1).replace('nested_list','') + ']]'\n    \ndef empty_list(tup1):\n    '''\n    Write a function to convert a list to an empty string.\n    '''\n    return '[' + str(tup1).replace('list','') + ']'\n    \ndef empty_list(tup1):\n    '''\n    Write a function to convert a list to an empty string.\n    '''\n    return '[' + str(tup1).replace('list','') + ']'\n    \ndef empty_tuple(tup1):\n    '''\n    Write a function to convert a tuple to an empty string.\n    '''\n    return '(' + str(tup1).replace('tuple','') + ')'\n    \ndef empty_tuple(tup1):\n    '''\n    Write a function to convert a tuple to an empty string.\n    '''\n    return '(' + str(tup1).replace('tuple','') + ')'\n    \ndef empty_list_tuple(tup1):\n    '''\n    Write a function to convert a nested list to a tuple.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_list_tuple(tup1):\n    '''\n    Write a function to convert a nested list to a tuple.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_list_string(tup1):\n    '''\n    Write a function to convert a nested list to a string.\n    '''\n    return '([' + str(tup1).replace('nested_list','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '([' + str(tup1).replace('tuple','') + '])'\n    \ndef empty_tuple_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string=''\n    for i in range(len(tup1)):\n        string=string+str(tup1[i])\n        if i<len(tup1)-1:\n            string=string+','\n    return string\ndef add(tup1,tup2):\n    '''\n    Write a function to perform addition of two tuples.\n    '''\n    lst=tup1+tup2\n    return lst\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \",\".join(str(item) for item in tup1) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in range(len(tup1)):\n        str1 += str(tup1[i])\n        if i!= len(tup1) - 1:\n            str1 += ','\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"(\"\n    for i in range(len(tup1)):\n        str1 = str1 + str(tup1[i])\n        if (i!= len(tup1)-1):\n            str1 = str1 + \", \"\n        else:\n            str1 = str1 + \")\"\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = (' '.join(str(x) for x in tup1[::-1]))\n    return tup2\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if not tup1:\n        return ''\n    else:\n        return '('+','.join(map(str,tup1))+')'\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = 0\n    for num in nums:\n        if num < 0:\n            negatives += abs(num)\n    return negatives\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    neg = []\n    for num in nums:\n        if num < 0:\n            sum = sum + -num\n            neg.append(num)\n    return sum, neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    positive_nums = []\n    for num in nums:\n        if num >= 0:\n            positive_nums.append(num)\n    return sum(positive_nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = list()\n    \n    for num in nums:\n        if num < 0:\n            neg_nums.append(num)\n    \n    neg_sum = 0\n    for num in neg_nums:\n        neg_sum += num\n    \n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for n in nums:\n        if n < 0:\n            total += -n\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_nums = 0\n    for i in nums:\n        if i < 0:\n            negative_nums += i\n    return negative_nums\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        total = total - num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    neg_num = 0\n    for num in nums:\n        if num < 0:\n            neg_num = neg_num + num\n    return neg_num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_negatives += num\n    return sum_negatives\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    for i in range(1, n):\n        if i * i == n :\n            print(n)\n            return\n        elif (i + i) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + i) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + i) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 2) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 2) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 3) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 3) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 4) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 4) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 5) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 5) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 6) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 6) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 7) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 7) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 8) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 8) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 9) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 9) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 10) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 10) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 11) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 11) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 12) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 12) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 13) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 13) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 14) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 14) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 15) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 15) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 16) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 16) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 17) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 17) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 18) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 18) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 19) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 19) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 20) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 20) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 21) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 21) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 22) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 22) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 23) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 23) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 24) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 24) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 25) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 25) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 26) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 26) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 27) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 27) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 28) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 28) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 29) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 29) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 30) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 30) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 31) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 31) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 32) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 32) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 33) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 33) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 34) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 34) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 35) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 35) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 36) * (i + 1) == n :\n            print(n)\n            return\n        elif (i + 36) * (i + 2) == n :\n            print(n)\n            return\n        elif (i + 37) * (i + 1) == "
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n+1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # your code here\n    return hexagon(n, 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = []\n    for i in range(n):\n        if (i % 2) == 1:\n            result.append(hex(i + 2))\n        else:\n            result.append(hex(i + 1))\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    total = 0\n    for r in range(n, 0, -1): \n        total += r\n        if total % 16 == 0: \n            return total\n    print('Sorry, no hexagonal numbers exist that are divisible by 16.')\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return n * hexagonal_num(n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0: \n        return n \n    else: \n        # a and b are the offsets \n        a = n // 2 \n        b = n - a \n        return hexagonal_num(a) + hexagonal_num(b) \n "
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return None\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 6\n    else: \n        return n * hexagonal_num(n-1) + (n-1)*hexagonal_num(n-2) + (n-2)*hexagonal_num(n-3)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 0\n    for i in range(n):\n        result = result + 2 * i + 1\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # If n is less than 2, print error message\n    if (n<2): \n        return 'Error: n must be greater than or equal to 2'\n    # If n is greater than 8, print error message\n    if(n>8): \n        return 'Error: n must be less than or equal to 8'\n    # Initialize result to zero\n    result = 0\n    # Loop through for loop\n    for i in range(1, n+1, 2): \n        result += i\n    # Check to see if the result is a hexagonal number \n    if result == int(hexagonal_num(n), 16): \n        return result\n    # If not, return error message\n    else: \n        return 'Error:'+ hexagonal_num(n) +'is not a hexagonal number'\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums_zero_count = array(nums.typecode, [0 for _ in range(len(nums))])\n    num_zero_count = array(nums.typecode, [0 for _ in range(len(nums))])\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = {}\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i!= 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num!= 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    for i in nums:\n        if i == 0:\n            count_zero += 1\n    return count_zero/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Find the number of zeroes in the array\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    # Calculate the ratios of zeroes to non-zeroes\n    zeros_count = count / len(nums)\n    non_zeros_count = 1 - zeros_count\n    # Return the result\n    return zeros_count, non_zeros_count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    res = []\n    for i in nums:\n        if i == 0:\n            res.append(0)\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    dummy_count = 0\n    for num in nums:\n        if num == 0:\n            dummy_count += 1\n    return dummy_count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    \n    if n % 2 == 0: \n        return is_Sum_Of_Powers_Of_Two(n // 2) \n    else: \n        return is_Sum_Of_Powers_Of_Two(3*n + 1) \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # A utility function to check whether a number is prime or not\n    def isPrime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    is_Sum = True\n    power = 2\n    while(power <= n):\n        if (n%power==0):\n            is_Sum = False\n        power += 1\n    return is_Sum\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n % 2!= 0:\n        return False\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n * 3 + 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0):\n        return False\n    if (n == 1):\n        return True\n    if (n % 2 == 0):\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # your code here\n    if n==0 or n==1:\n        return False\n    if n%2!=0:\n        return False\n    return (n**2)%10000000000==0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n==3:\n        return True\n    if n==4:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0) or (n == 1):\n        return True\n    if (n % 2 == 0) or (n % 2!= 0):\n        return False\n    elif n == 3:\n        return True\n    elif n == 4:\n        return False\n    elif n == 5:\n        return True\n    elif n == 6:\n        return False\n    else:\n        sum = n + 1\n        for i in range(4, int(math.sqrt(sum) + 1)):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    a = bin(n)[2:]\n    b = [x for x in a if x!= \"0\"]\n    #print(b)\n    sum_of_pows_of_2 = sum(map(int, b))\n    if n == sum_of_pows_of_2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False\n    if n <= 2: \n        return True\n    if n % 2 == 0: \n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*r*3.14159\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    return (2 * math.pi * r)\n    "
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * (r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # TODO: Fill in this function\n    return 2 * (r ** 2)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result_list = []\n    for item in test_list:\n        for i in item:\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    nested = []\n    for i in test_list:\n        if isinstance(i, list):\n            for j in i:\n                nested.append(j)\n        else:\n            flattened.append(i)\n    return flattened, nested\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_set = []\n    for item in test_list:\n        if isinstance(item,list):\n            test_set = test_set + item\n        else:\n            test_set.append(item)\n    return test_set\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        for j in i:\n            flat_list.append(j)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    current_number = 0\n    for element in test_list:\n        current_number += 1\n        if type(element) == list:\n            flattened.extend(element)\n        else:\n            flattened.append(element)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(map(lambda l: [int(x) for x in l], test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    numbers = []\n    for i in test_list:\n        numbers += i\n    return numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # TODO: Write your function here.\n    flattened_list = []\n    for element in test_list:\n        flattened_list.extend(element)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Hard-coded list to test\n    test_list_len = len(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # add code here\n    # test your code here\n    num_list = test_list\n    while True:\n        s = set()\n        for num in num_list:\n            s.add(num)\n        num_list = list(s)\n        break\n    return num_list\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    start = len(nums) - 1\n    while start >= 0:\n        for i in range(start, -1, -1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n            else:\n                break\n        start -= 1\n    return num"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[max_index] < nums[j]:\n                max_index = j\n        temp = nums[i]\n        nums[i] = nums[max_index]\n        nums[max_index] = temp\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_list = nums\n    for i in range(len(pancake_list)):\n        if i!= 0:\n            for j in range(i):\n                if pancake_list[j] > pancake_list[i]:\n                    pancake_list[j], pancake_list[i] = pancake_list[i], pancake_list[j]\n    return pancake_lis"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return sorted(nums, reverse=True)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_sorted = []\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    p = 0\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums):\n        if len(nums)<2:\n            return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length < 2:\n        return nums\n    for i in range(0, length-1):\n        for j in range(length-1-i, -1, -1):\n            if nums[j] < nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Time: O(N)\n    # Space: O(N)\n    def sort(arr):\n        # Pick the smallest element.\n        min_element = arr[0]\n        for element in arr:\n            if element < min_element:\n                min_element = element\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len(list3.intersection(list1,list2,list3))\n    \n    "
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_1 = list1\n    list_2 = list2\n    list_3 = list3\n    \n    #Check for same row\n    if list_1[0] == list_2[0] and list_1[1] == list_2[1]:\n        count = 1\n    elif list_1[1] == list_2[0] and list_1[0] == list_2[1]:\n        count = 1\n    elif list_1[1] == list_2[1] and list_1[0] == list_2[0]:\n        count = 1\n    else:\n        count = 0\n        \n    #Check for same column\n    if list_1[0] == list_3[0] and list_1[1] == list_3[1]:\n        count = 1\n    elif list_1[1] == list_3[0] and list_1[0] == list_3[1]:\n        count = 1\n    elif list_1[1] == list_3[1] and list_1[0] == list_3[0]:\n        count = 1\n    else:\n        count = 0\n        \n    #Check for same diagonal\n    if list_1[0] == list_1[1] and list_1[2] == list_2[2]:\n        count = 1\n    elif list_1[2] == list_1[0] and list_1[1] == list_2[2]:\n        count = 1\n    elif list_1[2] == list_1[1] and list_1[0] == list_2[2]:\n        count = 1\n    else:\n        count = 0\n        \n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count+=1\n    return count\ndef max_difference(list1,list2,list3):\n    '''\n    Write a function to find the maximum difference between the two given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_s = [x for x in list1 if x in list3]\n    list2_s = [x for x in list2 if x in list3]\n    list3_s = [x for x in list3 if x in list1]\n    count = 0\n    for i in list3_s:\n        if i in list1_s and i in list2_s:\n            count+=1\n    return count\n    \n    \ndef main():\n    '''\n    Test your count_samepair function by calling it in 10 test cases and printing the output for each test case.\n    '''\n    test_cases = [\n        ([1, 1, 1], [1, 1, 2], [1, 2, 3]),\n        ([1, 2, 3], [1, 1, 3], [1, 1, 1]),\n        ([1, 1], [1, 1], [1]),\n        ([1, 2, 3], [2, 1], [1, 3]),\n        ([1, 3], [1, 1], [1, 3]),\n        ([1, 2, 3, 1, 2, 1], [1, 2, 2, 1, 2, 2, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7]),\n    ]\n    for case in test_cases:\n        print(f'{len(case)} : {case[0]}')\n        result = count_samepair(case[0], case[1], case[2])\n        print(result)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if(len(list1)!=len(list2) or len(list1)!=len(list3) or len(list3)!=len(list2)):\n        return 0\n    else:\n        l=0\n        for i in range(len(list1)):\n            if(list1[i]==list2[i] or list1[i]==list3[i]):\n                l=l+1\n        if l==len(list1):\n            return len(list1)\n        elif l==len(list2):\n            return len(list2)\n        elif l==len(list3):\n            return len(list3)\n    return 0\n    \ndef compare_tuples(tuple1,tuple2):\n    '''\n    Write a function to compare two tuples.\n    '''\n    if len(tuple1)!= len(tuple2):\n        return 0\n    else:\n        for i in range(len(tuple1)):\n            if tuple1[i]!= tuple2[i]:\n                return 0\n    return 1\n    \ndef compare_lists(list1,list2):\n    '''\n    Write a function to compare two lists.\n    '''\n    if len(list1)!=len(list2):\n        return 0\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return 0\n    return 1\n    \ndef compare_strings(s1,s2):\n    '''\n    Write a function to compare two strings.\n    '''\n    if len(s1)!=len(s2):\n        return 0\n    else:\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                return 0\n    return 1\n    \n    \ndef compare_lists(list1,list2):\n    '''\n    Write a function to compare two lists.\n    '''\n    if len(list1)!=len(list2):\n        return 0\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return 0\n    return 1\n    \ndef compare_dict(dict1,dict2):\n    '''\n    Write a function to compare two dictionaries.\n    '''\n    if len(dict1)!=len(dict2):\n        return 0\n    else:\n        for i in range(len(dict1)):\n            if dict1[i]!= dict2[i]:\n                return 0\n    return 1\n    \ndef compare_dict2(dict1,dict2):\n    '''\n    Write a function to compare two dictionaries.\n    '''\n    if len(dict1)!=len(dict2):\n        return 0\n    else:\n        for i in range(len(dict1)):\n            if dict1[i]!= dict2[i]:\n                return 0\n    return 1\n    \ndef is_a(string):\n    '''\n    Write a function to check if a given string is a valid word.\n    '''\n    if string == \"\" or len(string) == 0:\n        return False\n    else:\n        word = string.lower()\n        if not word.isalnum():\n            return False\n        else:\n            if word[0].isalpha():\n                return True\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    count = 0\n    for i in list1:\n        if i in list2:\n            count += 1\n    for i in list3:\n        if i in list1 and i in list2:\n            count += 1\n    return count\n    \ndef count_repeated(list1):\n    '''\n    Write a function to count number of repeated items in list1.\n    '''\n    count = 0\n    for i in list1:\n        if list1.count(i) > 1:\n            count += 1\n    return count\n    \ndef count_smallest(list1,list2):\n    '''\n    Write a function to count number of items in a list that are smaller than the number in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i < list2:\n            count += 1\n    return count\n    \ndef count_largest(list1,list2):\n    '''\n    Write a function to count number of items in a list that are greater than the number in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i > list2:\n            count += 1\n    return count\n    \ndef count_product(list1):\n    '''\n    Write a function to count number of items in a list that are product of each other.\n    '''\n    count = 1\n    for i in list1:\n        count *= i\n    return count\n    \ndef count_divisors(num):\n    '''\n    Write a function to count the number of divisors of a number.\n    '''\n    count = 0\n    for i in range(1,int(num**0.5)+1):\n        if (num%i == 0):\n            count += 1\n    return count\n    \ndef count_permutation(list1):\n    '''\n    Write a function to count the number of items in a list that are permutations of each other.\n    '''\n    count = 1\n    for i in list1:\n        count *= i\n    return count\n    \ndef count_combination(list1):\n    '''\n    Write a function to count the number of items in a list that are combinations of each other.\n    '''\n    count = 1\n    for i in list1:\n        count *= i\n    return count\n    \ndef count_group(list1):\n    '''\n    Write a function to count the number of items in a list that are groups of items.\n    '''\n    count = 1\n    for i in list1:\n        count *= i\n    return count\n    \ndef count_tree(list1):\n    '''\n    Write a function to count the number of items in a list that are trees.\n    '''\n    count = 1\n    for i in list1:\n        count *= i\n    return count\n    \ndef count_bonus(list1):\n    '''\n    Write a function to count the number of items in a list that are bonus.\n    '''\n    count = 1\n    for i in list1:\n        count *= i\n    return count\n    \ndef count_items(list1):\n    '''\n    Write a function to count the number of items in a list that are items.\n    '''\n    count = 1\n    for i in list1:\n        count *= i\n    return count\n    \ndef count_unique(list1):\n    '''\n    Write a function to count the number of items in a list that are unique.\n    '''\n    count = 1\n    for i in list1:\n        if i not in list1:\n            count += 1\n    return count\n    \ndef count_value(list1):\n    '''\n    Write a function to count the number of items in a list that are values.\n    '''\n    count = 1\n    for i in list1:\n        if i > 100:\n            count += 1\n    return count\n    \ndef count_length(list1):\n    '''\n    Write a function to count the number of items in a list that are length of a list.\n    '''\n    count = 1\n    for i in list1:\n        count *= i\n    return count\n    \ndef count_list_type(list1):\n    '''\n    Write a function to count the type of a list.\n    '''\n    count = 1\n    for i in list1:\n        if type(i)!= list:\n            count += 1\n    return count\n    \ndef count_length_list(list1):\n    '''\n    Write a function to count the length of a list.\n    '''\n    count = 1\n    for i in list1:\n        if type(i) == list:\n            count += 1\n    return count\n    \ndef count_non_empty(list1):\n    '''\n    Write a function to count the number of items in a list that are not empty.\n    '''\n    count = 1\n    for i in list1:\n        if i:\n            count += 1\n    return count\n    \ndef count_power_of(num):\n    '''\n    Write a function to count the number of power of a number.\n    '''\n    count = 1\n    for i in range(1,num+1):\n        count *= i\n    return count\n    \ndef count_great_pow(list1):\n    '''\n    Write a function to count the number of items in a list that are greater than a given power of a number.\n    '''\n    count = 1\n    for i in list1:\n        if i > 1:\n            count += 1\n    return count\n    \ndef count_exact(list1):\n    '''\n    Write a function to count the number of items in a list that are exact.\n    '''\n    count = 1\n    for i in list1:\n        if i == list1[i]:\n            count += 1\n    return count\n    \ndef count_in(list1):\n    '''\n    Write a function to count the number of items in a list that are in a given list.\n    '''\n    count = 1\n    for i in list1:\n        if i in list1:\n            count += 1\n    return count\n    \ndef count_not_in(list1):\n    '''\n    Write a function to count the number of items in a list that are not in a given list.\n    '''\n    count = 1\n    for i in list1:\n        if i not in list1:\n            count += 1\n    return count\n    \ndef count_to_list(list1):\n    '''\n    Write a function to count the number of items in a list that are to be converted to a list.\n    '''\n    count = 1\n    for i in list1:\n        if type(i) == int or type(i) == float:\n            count += 1\n    return count\n    \ndef count_greater(list1):\n    '''\n    Write a function to count the number of items in a list that are greater than a given number.\n    '''\n    count = 1\n    for i in list1:\n        if i > 100:\n            count += 1\n    return count\n    \ndef count_greater_non_empty(list1):\n    '''\n    Write a function to count the number of items in a list that are greater than a given number.\n    '''\n    count = 1\n    for i in list1:\n        if i > 100:\n            count += 1\n    return count\n    \ndef count_less(list1):\n    '''\n    Write a function to count the number of items in a list that are less than a given number.\n    '''\n    count = 1\n    for i in list1:\n        if i < 100:\n            count += 1\n    return count\n    \ndef count_less_non_empty(list1):\n    '''\n    Write a function to count the number of items in a list that are less than a given number.\n    '''\n    count = 1\n    for i in list1:\n        if i < 100:\n            count += 1\n    return count\n    \ndef count_not_equal(list1):\n    '''\n    Write a function to count the number of items in a list that are not equal.\n    '''\n    count = 1\n    for i in list1:\n        if i!= list1[i]:\n            count += 1\n    return count\n    \ndef count_equal(list1):\n    ''"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Compare each two lists, if both are identical in the same position, then return 1\n    if len(list1)==len(list2)==len(list3)==0:\n        return 1\n    elif len(list1)==len(list2)!=len(list3) or len(list1)!=0:\n        return 0\n    # Check if list1 or list2 and list3 are mutable. If it is, then they are mutable, and you need to mutate them\n    elif list1 or list2 or list3:\n        list1=list1.copy()\n        list2=list2.copy()\n        list3=list3.copy()\n    # Check if it is an empty list\n    elif list1==[] or list2==[] or list3==[]:\n        return 0\n    # If it is not an empty list, then there is more than one item, return 1\n    else:\n        return 1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    i=0\n    while i <len(list1):\n        j=0\n        while j <len(list2):\n            if list1[i] == list2[j] and list1[i] not in list3:\n                list3.append(list1[i])\n            j=j+1\n        i=i+1\n    return len(list3)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count1=0\n    count2=0\n    count3=0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count1 = 0\n    count2 = 0\n    count3 = 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0 \n    for i in Input: \n        if type(i) == tuple: \n            lists += 1 \n    return lists \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def check_index(i): \n        '''\n        Check if list i exist in the tuple\n        ''' \n        if Input[i] not in [0, 1, 2]: \n            return -1 \n        return Input[i] \n    \n    def is_list(t): \n        '''\n        Check if list t is present in the tuple\n        ''' \n        return t[0] == 0 or t[0] == 1 or t[0] == 2 \n    \n    if not Input: \n        return 0\n    \n    # Check the 2nd and 3rd item in the tuple \n    # then check if they exist \n    t = Input[1] \n    if t[0] == 0 or t[0] == 1 or t[0] == 2: \n        return check_index(t) + check_index(t[0]) \n    \n    # Check if the third item is a list or not \n    if is_list(t): \n        return check_index(t[1]) + check_index(t[2]) \n    \n    # Check if the 2nd item is a list or not \n    # then check if the 3rd item is a list \n    # then check if the 4th item is a list \n    # then check if the 5th item is a list \n    if is_list(t[2]) or is_list(t[3]): \n        return check_index(t[1]) + check_index(t[2]) + check_index(t[3]) \n    \n    # Check if the 2nd item is a list or not \n    # then check if the 3rd item is a list \n    # then check if the 5th item is a list \n    # then check if the 6th item is a list \n    if is_list(t[1]): \n        return check_index(t[2]) + check_index(t[3]) + check_index(t[5]) \n    \n    # Check if the 2nd item is a list or not \n    # then check if the 3rd item is a list \n    # then check if the 5th item is a list \n    # then check if the 7th item is a list \n    if is_list(t[2]): \n        return check_index(t[3]) + check_index(t[5]) + check_index(t[7]) \n    \n    # Check if the 2nd item is a list or not \n    # then check if the 3rd item is a list \n    # then check if the 7th item is a list \n    # then check if the 9th item is a list \n    if is_list(t[3]): \n        return check_index(t[5]) + check_index(t[7]) + check_index(t[9]) \n    \n    return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a = 0\n    for i in Input:\n        if isinstance(i, list):\n            a += 1\n    return a\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    import numpy as np\n    \n    A = np.empty(len(Input))\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if (j == 0):\n                A[i] = Input[i][j]\n            elif (j == len(Input[i]) - 1):\n                A[i] = Input[i][j - 1]\n            else:\n                A[i] = Input[i][j - 1] + Input[i][j + 1]\n    return A\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if Input[0] == () and Input[1] == ():\n        print(0)\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code goes here\n    return len(set(tuple(lst)) for lst in Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    found_list = 0 \n    for key,value in Input:\n        if type(value) == int or type(value) == float:\n            found_list += 1 \n    return found_list \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    c=0\n    l=[]\n    l1=[]\n    l2=[]\n    l3=[]\n    for i in range(len(Input)):\n        if Input[i][0]=='L':\n            c=c+1\n        else:\n            l.append(i)\n    for i in range(len(l)):\n        l1.append(l[i])\n    for i in range(len(l)):\n        l2.append(l1[i])\n    for i in range(len(l)):\n        l3.append(l2[i])\n    return c,l,l1,l2,l3\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = arr.copy()\n    # initialize maximum and minimum values\n    max_v = arr[0]\n    min_v = arr[0]\n    # iterate over the array\n    for i in range(1, len(arr)):\n        max_v = max(max_v, arr[i])\n        min_v = min(min_v, arr[i])\n    return max_v - min_v\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i]) > max_diff:\n            max_diff = arr[i]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_val = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            abs_diff = abs(arr[i] - arr[j])\n            if abs_diff > max_val:\n                max_val = abs_diff\n    return max_val\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)):\n        abs_diff = abs(arr[i] - arr[i-1])\n        max_abs_diff = max(abs_diff, max_abs_diff)\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        max_diff = max(max_diff, arr[i] - arr[i-1])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_Abs_Diff = 0\n    for i in range(n-1):\n        max_Abs_Diff = max(abs(arr[i+1]-arr[i]),max_Abs_Diff)\n    return max_Abs_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_i, max_j = 0, 0\n    max_Abs = arr[0][0]\n    for i, row in enumerate(arr):\n        for j, col in enumerate(row):\n            if col > max_Abs:\n                max_i, max_j = i, j\n    return abs(max_i - max_j)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_val = arr[0] - arr[1]\n    for i in range(len(arr)):\n        val_diff = arr[i] - arr[i-1]\n        if val_diff > max_val:\n            max_val = val_diff\n    return max_val\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Write your code here\n    \n    min_val = arr[0]\n    for val in arr:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return a,b\n    elif a == b:\n        return a,b\n    elif b == n:\n        return a,b\n    else:\n        for i in range(a,b):\n            for j in range(a,b):\n                if i == j:\n                    continue\n                if a*a + b*b == n:\n                    return a,b\n                elif a*a + b*b < n:\n                    continue\n                else:\n                    return i,j\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (None, b % n)\n    elif b == 0:\n        return (a % n, 0)\n    elif a % n == 0:\n        return (a // n, b % n)\n    elif b % n == 0:\n        return (a // n, b // n)\n    else:\n        x, y = find_solution(a // n, b, n)\n        if x is None:\n            return (None, None)\n        else:\n            return (x[0] + y[0], x[1] + y[1])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return\n    else:\n        if a == 0:\n            if b == 1:\n                return (n, 0)\n            else:\n                return (0, n)\n        elif b == 0:\n            if a == 1:\n                return (n, 1)\n            else:\n                return (n, 0)\n        else:\n            if a % b == 0:\n                soln = find_solution(a // b, b, n)\n                if soln!= None:\n                    return (soln[0], soln[1] + 1)\n                else:\n                    return None\n            elif a % b == 0:\n                soln = find_solution(a, b // a, n)\n                if soln!= None:\n                    return (soln[0] + 1, soln[1])\n                else:\n                    return None\n            else:\n                return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if(b == n):\n        return x, y\n    for i in range(1,n+1):\n        if(i == a):\n            x += 1\n        if(i == b):\n            y += 1\n    return x, y"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return (a, 0)\n    if n < 1:\n        return None\n    if a == 0:\n        return (0, 1)\n    if a < 0:\n        return None\n    q = [find_solution(a, n//a, b) for _ in range(n)]\n    if q[0]!= None:\n        return q[0]\n    if q[1]!= None:\n        return (q[1] - 1, q[0] + 1)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def make_d(x, y, a, b, n):\n        if y == n:\n            return None\n        if a * x + b == n:\n            return (x, y)\n        return make_d(x, y, a, b, n)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solutions = []\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            for k in range(j + 1):\n                if a[i] * a[j] + b[i] * b[j] == n:\n                    solutions.append((a[i], b[i], n))\n    if len(solutions) == 0:\n        return None\n    solutions = sorted(solutions)\n    return solutions[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    if b == 0:\n        return (a, 0)\n    if b == 1:\n        return (0, a)\n    if n == 0:\n        return None\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 0:\n        return (0, b)\n    if b == 0:\n        return (a, 0)\n    if a == 1:\n        return (b, 0)\n    if n == 1:\n        return (a, b)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 0:\n        return (b, 0)\n    if b == 0:\n        return (a, 0)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 1:\n        return (0, b)\n    if b == 1:\n        return (a, 0)\n    if a == 0:\n        return (0, 1)\n    if b == 0:\n        return (1, 0)\n    if a == 1:\n        return (1, 1)\n    if n == 1:\n        return (0, 0)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 1:\n        return (0, 1)\n    if b == 1:\n        return (1, 0)\n    if a == 0:\n        return (1, 1)\n    if b == 0:\n        return (0, 0)\n    if a == 1:\n        return (1, 0)\n    if n == 1:\n        return (0, 1)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 1:\n        return (0, 0)\n    if b == 1:\n        return (1, 0)\n    if a == 0:\n        return (1, 1)\n    if b == 0:\n        return (0, 0)\n    if a == 1:\n        return (0, 1)\n    if n == 1:\n        return (1, 0)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 1:\n        return (0, 0)\n    if b == 1:\n        return (1, 0)\n    if a == 0:\n        return (1, 1)\n    if b == 0:\n        return (0, 0)\n    if a == 1:\n        return (1, 1)\n    if n == 1:\n        return (0, 0)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 1:\n        return (0, 0)\n    if b == 1:\n        return (1, 0)\n    if a == 0:\n        return (1, 1)\n    if b == 0:\n        return (0, 0)\n    if a == 1:\n        return (1, 1)\n    if n == 1:\n        return (0, 0)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 1:\n        return (0, 0)\n    if b == 1:\n        return (1, 0)\n    if a == 0:\n        return (1, 1)\n    if b == 0:\n        return (0, 0)\n    if a == 1:\n        return (1, 1)\n    if n == 1:\n        return (0, 0)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 1:\n        return (0, 0)\n    if b == 1:\n        return (1, 0)\n    if a == 0:\n        return (1, 1)\n    if b == 0:\n        return (0, 0)\n    if a == 1:\n        return (1, 1)\n    if n == 1:\n        return (0, 0)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 1:\n        return (0, 0)\n    if b == 1:\n        return (1, 0)\n    if a == 0:\n        return (1, 1)\n    if b == 0:\n        return (0, 0)\n    if a == 1:\n        return (1, 1)\n    if n == 1:\n        return (0, 0)\n    if a > 0 and b > 0:\n        q = [(a, 1, b)]\n        for x in range(1, n):\n            q.sort(key=lambda x: x[0])\n            a, b, i = q[x]\n            x = a + (b - a) * i\n            if x > n:\n                break\n            q.append((x, i, b))\n        return q[x]\n    if a == 1:\n        retur"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = []\n    y = []\n    for i in range(n + 1):\n        if a * i + b == n:\n            x.append(i)\n            y.append(a * i + b)\n        elif a * i + b < n:\n            x.append(n)\n    if len(x) == 0:\n        return None\n    else:\n        return (x[0], y[0])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for el in list1:\n        if el in list2:\n            list2.remove(el)\n        else:\n            new_list.append(el)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list1.pop(i)\n                break\n    for i in range(len(list1)):\n        if list1[i] in res:\n            res.remove(list1[i])\n    return list1, res\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list1[:len(list2)] + list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # list1 = ['a','b','c','d']\n    # list2 = ['a','b','c','d']\n    # list1.pop()\n    # list2.pop()\n    # list1.remove('d')\n    # list2.remove('d')\n    # list1.remove('d')\n    # list1.remove('d')\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_of_elements = []\n    for elem in list1:\n        list_of_elements.append(elem)\n    for elem in list2:\n        list_of_elements.append(elem)\n    list_of_elements.sort()\n    list_of_elements = list_of_elements[::-1]\n    return list_of_elements\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n    print(list1)\n    print(list2)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # YOUR CODE HERE\n    if not list1 or not list2:\n        return\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    list4 = []\n    for elem in list1:\n        list3.append(elem)\n    for elem in list2:\n        list4.append(elem)\n    return list3, list4\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n-2*(n-1)) + (n-4)*n\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = n // 2\n    sum = 0\n    if n > 0:\n        for i in range(x + 1):\n            sum += (n - i)\n        print(sum)\n    elif n == 0:\n        return 0\n    else:\n        print(\"n is not a positive integer.\")\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return sum(range(0, n//2)) + sum_series(n-2*(n//2)) + sum_series(n-4*(n//2))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return n - (2*sum_series(n-1)) + (n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_n = 0\n    n = n + (n-2) + (n-4)\n    while n > 0:\n        sum_n = sum_n + n\n        n = n - (n-2)\n    return sum_n\n    # return sum_n\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n * (n-1) + (n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n<2:\n        return n\n    else:\n        return n - sum_series(n-1) + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2 + 1):\n        result = result + i\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # TODO: Complete this function\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    c = 0\n    for i in range(l):\n        c += s**2\n    return c/l**2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(s)!= len(l):\n        print(\"The length of sides and lengths should be equal\")\n    elif (len(s)!= 2) or (len(s)!= 3):\n        print(\"The number of sides should be two and three\")\n    else:\n        a = l[0]\n        b = l[1]\n        c = l[2]\n        sides = (a,b,c)\n        area = 3*sides[0]*sides[1]\n        return(area)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #calculate the area of the polygon\n    s = (s**2) * pi\n    area = (pi * l) / 4\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    s = s * pi\n    l = l * pi\n    for i in range(0, len(s)):\n        area += (l / 2) * tan(i * (pi / len(s)))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    assert type(s) == int\n    assert type(l) == int\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = pi * (l ** 2)\n    print(a)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*(l/2)\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return s*(l/2) + l*(l/2)\ndef perimeter_circle(r):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius.\n    '''\n    return 2*pi*r\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi*r**2\ndef circumference_circle(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2*pi*r\ndef area_ellipse(s,l):\n    '''\n    Write a function to calculate the area of an elliptical polygon given its semiperimeter and its aspect ratio.\n    '''\n    #1. The perimeter of the polygon\n    p = perimeter_polygon(s,l)\n    #2. The aspect ratio\n    a = area_polygon(p,l)\n    return a/2*s\ndef area_ellipse_v3(s,l,a):\n    '''\n    Write a function to calculate the area of an elliptical polygon given its semiperimeter and its aspect ratio.\n    '''\n    #1. The perimeter of the polygon\n    p = perimeter_polygon(s,l)\n    #2. The aspect ratio\n    a = area_polygon(p,l)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_polygon(s,l)*a/4*s**2\ndef area_ellipse_v4(s,l,a):\n    '''\n    Write a function to calculate the area of an elliptical polygon given its semiperimeter and its aspect ratio.\n    '''\n    #1. The perimeter of the polygon\n    p = perimeter_polygon(s,l)\n    #2. The aspect ratio\n    a = area_polygon(p,l)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_polygon(s,l)*a/4*s**2\ndef area_ellipse_v5(s,l,a):\n    '''\n    Write a function to calculate the area of an elliptical polygon given its semiperimeter and its aspect ratio.\n    '''\n    #1. The perimeter of the polygon\n    p = perimeter_polygon(s,l)\n    #2. The aspect ratio\n    a = area_polygon(p,l)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_polygon(s,l)*a/4*s**2\ndef area_ellipse_v6(s,l,a):\n    '''\n    Write a function to calculate the area of an elliptical polygon given its semiperimeter and its aspect ratio.\n    '''\n    #1. The perimeter of the polygon\n    p = perimeter_polygon(s,l)\n    #2. The aspect ratio\n    a = area_polygon(p,l)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_polygon(s,l)*a/4*s**2\ndef area_rectangle(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return r*r\ndef perimeter_rectangle(r):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return 2*r*tan(pi/4)\ndef area_square(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return r*r\ndef perimeter_square(r):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return 4*r*tan(pi/4)\ndef area_rectangle_v1(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    #1. The perimeter of the rectangle\n    p = perimeter_rectangle(r)\n    #2. The aspect ratio\n    a = area_rectangle(p)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_rectangle(p)*a/2\ndef perimeter_rectangle_v1(r):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    #1. The perimeter of the rectangle\n    p = perimeter_rectangle(r)\n    #2. The aspect ratio\n    a = area_rectangle(p)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return 2*s*tan(pi/4)\ndef area_rectangle_v2(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    #1. The perimeter of the rectangle\n    p = perimeter_rectangle(r)\n    #2. The aspect ratio\n    a = area_rectangle(p)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_rectangle(p)*a/2\ndef area_rectangle_v3(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    #1. The perimeter of the rectangle\n    p = perimeter_rectangle(r)\n    #2. The aspect ratio\n    a = area_rectangle(p)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_rectangle(p)*a/4\ndef area_rectangle_v4(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    #1. The perimeter of the rectangle\n    p = perimeter_rectangle(r)\n    #2. The aspect ratio\n    a = area_rectangle(p)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_rectangle(p)*a/4\ndef area_rectangle_v5(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    #1. The perimeter of the rectangle\n    p = perimeter_rectangle(r)\n    #2. The aspect ratio\n    a = area_rectangle(p)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_rectangle(p)*a/4\ndef area_rectangle_v6(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    #1. The perimeter of the rectangle\n    p = perimeter_rectangle(r)\n    #2. The aspect ratio\n    a = area_rectangle(p)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_rectangle(p)*a/4*s\ndef area_rectangle_v7(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    #1. The perimeter of the rectangle\n    p = perimeter_rectangle(r)\n    #2. The aspect ratio\n    a = area_rectangle(p)\n    #3. The semi-perimeter\n    s = s*tan(a/2)\n    #4. The area\n    return area_rectangle(p)*a/4\nde"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (i ** 2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def calcArea(x1, y1, x2, y2):\n        return (x2-x1)*(y2-y1)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum = sum + i\n    if n == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(2, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            return False\n    return True\ndef isprime(n): \n    '''\n    A function to check if the number is prime or not.\n    '''\n    if n == 2 or n == 3: \n        return True\n    if n < 2 or n % 2 == 0: \n        return False\n    if n <= 3: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef is_prime_func(n):\n    '''\n    A function to check if the number is prime or not.\n    '''\n    if n == 2 or n == 3: \n        return True\n    if n < 2 or n % 2 == 0: \n        return False\n    if n <= 3: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef is_prime_func2(n):\n    '''\n    A function to check if the number is prime or not.\n    '''\n    if n == 2 or n == 3: \n        return True\n    if n < 2 or n % 2 == 0: \n        return False\n    if n <= 3: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef is_prime_func3(n):\n    '''\n    A function to check if the number is prime or not.\n    '''\n    if n == 2 or n == 3: \n        return True\n    if n < 2 or n % 2 == 0: \n        return False\n    if n <= 3: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\ndef check_prime(n):\n    '''\n    A function to check if the given number is prime or not.\n    '''\n    if div_sum(n) or is_prime_func(n) or is_prime_func2(n) or is_prime_func3(n):\n        return True\n    return False\ndef check_prime_func(n):\n    '''\n    A function to check if the given number is prime or not.\n    '''\n    if div_sum(n) or is_prime_func(n) or is_prime_func2(n) or is_prime_func3(n):\n        return True\n    return False\ndef is_prime_list(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list_func(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list2(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func2(i):\n            return True\n    return False\ndef is_prime_list3(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func3(i):\n            return True\n    return False\ndef is_prime_list4(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func3(i):\n            return True\n    return False\ndef is_prime_list5(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func2(i):\n            return True\n    return False\ndef is_prime_list6(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list7(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list8(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list9(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list10(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list11(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list12(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list13(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list14(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list15(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list16(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list17(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list18(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list19(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list20(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is_prime_list21(l):\n    '''\n    A function to check if the given list is prime or not.\n    '''\n    for i in l:\n        if is_prime_func(i):\n            return True\n    return False\ndef is"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #n=int(input(\"Enter a value to find the sum of the divisors of the number: \"))\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0:\n            sum+=i\n    return sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = [2,3,5,7]\n    for i in div:\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0: \n        return \"No\"\n    \n    if n==1: \n        return \"1\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1:\n        return False\n    if n == 1:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum += i\n            sum += n//i\n            if sum == n:\n                print(\"Sum of the divisors of two integers:\",n,\"are\",sum)\n                return n\n    return sum\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==1: \n        return 0 \n    for i in range(2,int(math.sqrt(n))+1): \n        if n%i==0: \n            return False \n    return True \n \ndef is_prime(n): \n    '''\n    Write a function that returns True if the number n is a prime number, \n    and False otherwise.\n    '''\n    if n==2: \n        return True \n    if n<2: \n        return False \n    if n%2==0: \n        return False \n    if n%3==0: \n        return False \n    for i in range(5,int(math.sqrt(n))+1,6): \n        if n%i==0: \n            return False \n    return True \n \ndef prim_exp(n): \n    '''\n    Write a function that returns the sum of the positive integers in the range 2 to sqrt(n) inclusive.\n    '''\n    sum=0\n    for i in range(2,n): \n        if n%i==0: \n            sum+=i \n    return sum\n \ndef prim_exp_v2(n): \n    '''\n    Write a function that returns the sum of the positive integers in the range 2 to sqrt(n) inclusive.\n    '''\n    if n==2: \n        return 2\n    if n==3: \n        return 5\n    if n==5: \n        return 8\n    for i in range(2,n): \n        if i%2==0: \n            sum+=i \n    return sum\n \ndef primes(N): \n    '''\n    Return a list of all prime numbers less than or equal to N.\n    '''\n    l=[]\n    for i in range(2,N+1):\n        if is_prime(i) and div_sum(i)==True:\n            l.append(i)\n    return l\n \ndef prime_exp(N): \n    '''\n    Return the sum of the positive integers in the range 2 to sqrt(N).\n    '''\n    sum=0\n    for i in range(2,N+1):\n        if i%2==0: \n            sum+=i \n    return sum\n \ndef prime_exp_v2(N): \n    '''\n    Return the sum of the positive integers in the range 2 to sqrt(N).\n    '''\n    if N==2: \n        return 2\n    if N==3: \n        return 5\n    if N==5: \n        return 8\n    for i in range(2,N+1): \n        if i%2==0: \n            sum+=i \n    return sum\n \ndef prime_nums(N): \n    '''\n    Return a list of all prime numbers less than or equal to N.\n    '''\n    l=[]\n    for i in range(2,N+1): \n        if is_prime(i): \n            l.append(i)\n    return l\n \ndef next_prime(N): \n    '''\n    Return the next prime number greater than or equal to N.\n    '''\n    if N==2: \n        return 3\n    if N==3: \n        return 5\n    if N==5: \n        return 7\n    if N==7: \n        return 11\n    for i in range(2,N): \n        if is_prime(i) and div_sum(i)==True: \n            break\n    return i+1\n \ndef next_prime_v2(N): \n    '''\n    Return the next prime number greater than or equal to N.\n    '''\n    if N==2: \n        return 3\n    if N==3: \n        return 5\n    if N==5: \n        return 7\n    if N==7: \n        return 11\n    for i in range(2,N): \n        if i%2==0: \n            break\n    return i+1\n \ndef next_prime_v3(N): \n    '''\n    Return the next prime number greater than or equal to N.\n    '''\n    if N==2: \n        return 3\n    if N==3: \n        return 5\n    if N==5: \n        return 7\n    if N==7: \n        return 11\n    for i in range(2,N): \n        if i%2==0: \n            break\n    return i+1\n \ndef is_prime_v1(N): \n    '''\n    Return True if N is a prime number, and False otherwise.\n    '''\n    if N==2: \n        return True\n    if N==3: \n        return True\n    if N==5: \n        return True\n    if N==7: \n        return True\n    if N%2==0: \n        return False\n    if N%3==0: \n        return False\n    if N%5==0: \n        return False\n    for i in range(6,N,2): \n        if N%i==0: \n            return False\n    return True\n \ndef is_prime_v2(N): \n    '''\n    Return True if N is a prime number, and False otherwise.\n    '''\n    if N==2: \n        return True\n    if N==3: \n        return True\n    if N==5: \n        return True\n    if N==7: \n        return True\n    if N%2==0: \n        return False\n    if N%3==0: \n        return False\n    if N%5==0: \n        return False\n    for i in range(6,N,2): \n        if N%i==0: \n            return False\n    return True\n \ndef is_prime_v3(N): \n    '''\n    Return True if N is a prime number, and False otherwise.\n    '''\n    if N==2: \n        return True\n    if N==3: \n        return True\n    if N==5: \n        return True\n    if N==7: \n        return True\n    if N%2==0: \n        return False\n    if N%3==0: \n        return False\n    if N%5==0: \n        return False\n    for i in range(6,N,2): \n        if N%i==0: \n            return False\n    return True\n \ndef is_prime_v4(N): \n    '''\n    Return True if N is a prime number, and False otherwise.\n    '''\n    if N==2: \n        return True\n    if N==3: \n        return True\n    if N==5: \n        return True\n    if N==7: \n        return True\n    if N%2==0: \n        return False\n    if N%3==0: \n        return False\n    if N%5==0: \n        return False\n    for i in range(6,N,2): \n        if N%i==0: \n            return False\n    return True\n \ndef is_prime_v5(N): \n    '''\n    Return True if N is a prime number, and False otherwise.\n    '''\n    if N==2: \n        return True\n    if N==3: \n        return True\n    if N==5: \n        return True\n    if N==7: \n        return True\n    if N%2==0: \n        return False\n    if N%3==0: \n        return False\n    if N%5==0: \n        return False\n    for i in range(6,N,2): \n        if N%i==0: \n            return False\n    return True\n \ndef is_prime_v6(N): \n    '''\n    Return True if N is a prime number, and False otherwise.\n    '''\n    if N==2: \n        return True\n    if N==3: \n        return True\n    if N==5: \n        return True\n    if N==7: \n        return True\n    if N%2==0: \n        return False\n    if N%3==0: \n        return False\n    if N"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        return False\n    d = int(math.sqrt(n)) + 1\n    for i in range(2, d + 1): \n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    l = list(str1.lower())\n    count = 0\n    for i in range(len(l)):\n        if l[i] == l[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(str1.replace(' ', '').replace('.', '').replace('!', '').replace('?', '').replace(',', '').replace(';', '').replace('\\n', '').replace('/', '').replace('\\\\', '').replace('*', '').replace('+', '').replace('=', ''))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str_as_list = list(str1)\n    count = 0\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #convert to lowercase\n    str1 = str1.lower()\n    \n    #Find the number of occurrences\n    total = 0\n    for i in range(len(str1)):\n        total += str1.count(str1[i])\n        \n    #return total\n    return total\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    characters = {\n    'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0,\n    '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0\n    }\n    for i in str1:\n        if i in characters:\n            characters[i]+=1\n    return characters\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Variable to store the position in string\n    pos = 0\n    # Variable to store the frequency of the position\n    count = 0\n    # Loop through the string\n    for i in range(len(str1)):\n        # If the position is in the alphabet\n        if str1[i].isalpha():\n            # Increment the position\n            pos += 1\n            # If the position is the same as the position in the alphabet\n            if str1[i].lower() == str1[pos].lower():\n                # Increment the count\n                count += 1\n    # Return the position, count and frequency of the alphabet\n    return pos, count, str1[pos]\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dictionary that will count the occurrences of each charater as a key\n    char_count_dict = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counts = 0\n    for i in str1:\n        if str1.index(i) == str1.index(i.lower()):\n            counts+=1\n    return counts\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize count dictionary \n    count_dictionary = {}\n    # initialize string \n    str_letters = ''\n    # iterate through string \n    for i in str1:\n        # if letter is in dictionary \n        if i in count_dictionary:\n            # increment count \n            count_dictionary[i] += 1\n        else:\n            # set count \n            count_dictionary[i] = 1\n    # loop through dictionaries \n    for i in count_dictionary: \n        # if count is greater than one \n        if count_dictionary[i] > 1: \n            # append key-value pair \n            str_letters += i +'-'+ str(count_dictionary[i]) + '\\n'\n    # return string \n    return str_letters\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if i in alphabet:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in range(0,len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]==0:\n                count+=1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # solution 1: \n    odd_list = list(filter(lambda x: x & 1, A))\n    if len(odd_list) == 1: return len(odd_list)\n    # solution 2: \n    odd_list = list(filter(lambda x: x & 1, A))\n    return odd_list[::2] \n    \n    "
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    A_even = []\n    for i in range(n):\n        if (A[i]&1) == 0:\n            A_even.append(i)\n    return len(A_even)\n    \ndef main():\n    print(find_even_pair([1,2,3,4,5,6]))\n    print(find_even_pair([1,3,5,7,9]))\n    print(find_even_pair([1,2,6,8,10,11,14,15,18,19]))\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i]^A[j]==0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum(set(A)) // 2\n    \n    \n    "
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(0,len(A)):\n        for j in range(0,len(A)):\n            if A[i] & A[j] == 0:\n                even_count+=1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    i=0\n    j=0\n    for i in range(len(A)):\n        if i % 2 == 0:\n            j += 1\n    for j in range(len(A)):\n        if A[j] == A[j+1]:\n            i+=1\n    return i, j\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_pair_count = 0\n    even_pair_count = 0\n    for i in A:\n        if i % 2 == 1:\n            odd_pair_count += 1\n        else:\n            even_pair_count += 1\n    return odd_pair_count, even_pair_count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return 2\n    n = 2 * n\n    while n < 2**31:\n        n += 1\n    return n - 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 2**n\n    if x > n : \n        return 0\n    else : \n        return x\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    if n < 1:\n        return 0\n    \n    # base case\n    if n % 2!= 0:\n        return 1\n    \n    return next_power_of_2(n//2) + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while i*i <= n:\n        if n%i == 0:\n            return i\n        i+=1\n    return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # your code goes here\n    num_of_digits = len(bin(n)[2:])\n    for i in range(2,num_of_digits+1):\n        if num_of_digits % i == 0:\n            return num_of_digits\n    \n    \n    \ndef compute_next_power_of_2(n):\n    '''\n    Write a python function that returns the smallest power of 2 greater than or equal to n.\n    '''\n    # your code goes here\n    num_of_digits = len(bin(n)[2:])\n    for i in range(2,num_of_digits+1):\n        if num_of_digits % i == 0:\n            return num_of_digits\n    \n    \n    \ndef main():\n    \"\"\"Read command-line arguments\"\"\"\n    if len(sys.argv)!= 2:\n        print(\"Usage:./dna_encoder.py <text>\")\n        return -1\n    text = sys.argv[1]\n    #text = \"banana\"\n    \n    # Break it down into lines\n    lines = text.split('\\n')\n    \n    # Generate the output\n    output = []\n    for line in lines:\n        output.append(compute_next_power_of_2(int(line, 2)))\n    \n    # Print the answer\n    print(output)\n    \n    \n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n!= 0:\n        if n & 1 == 1:\n            return n\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    smallest = n\n    if n == 1:\n        return 1\n    while n > 1:\n        if n & 1 == 0:\n            n = n >> 1\n        else:\n            n = n << 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return 1\n    elif n % 2 == 0:\n        return 3\n    else:\n        return 4\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    power = 2\n    while (n%power!= 0):\n        power+=1\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==1:\n        return 0\n    while n%2==0:\n        n=n//2\n    return n\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # c = 0\n    # for i in a:\n    #     if i == x:\n    #         c += 1\n    # return c\n    return sum([1 for i in a if i == x])\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Define the dictionary with the type of the numbers \n    # and the length of the dictionary\n    dictionary = {'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'0':0} \n    # Loop through the dictionary and find the number\n    for i in dictionary: \n        if dictionary[i] == x: \n            # If the number is found, add 1 to the count \n            dictionary[i] += 1\n    # Return the dictionary \n    return dictionary"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if a[i] == x:\n            count += 1\n    return count \n  "
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    if x in a:\n        return a.count(x)\n    else:\n        return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    from collections import Counter \n    return Counter(a)['a']\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # your code goes here\n    counter = 0\n    for i in a:\n        if i == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pas"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            f +=1\n    return f\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0                                                                                                                                                                                                \n    if len(list1)>=m and len(list1)<=n:\n        for i in range(m-1):\n            sum = sum + list1[i]\n        for j in range(n-1):\n            sum = sum + list1[j]\n        return sum\n    else:\n        return \"Invalid Range\"\n        \n    \nlist1 = [1,2,3,4,5,6]\nm = len(list1)\nn = len(list1)\nprint(sum_range_list(list1, m, n))"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s = s + list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for index in range(m, n):\n        sum += list1[index]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    def add_list(list_of_numbers, index1, index2):                                                                                                                                                                                                                            \n        '''\n        Write a function that adds the given numbers in a list.\n        '''\n        list_of_numbers.append(0)\n        for i in range(index1, index2 + 1):\n            list_of_numbers[i] = list_of_numbers[i] + 1                                                                                                                                                                                        \n        return list_of_numbers                                                                                                                                                                                                                            \n    def sum_range_list_rec(list1, m, n):                                                                                                                                                                                                                                    \n        '''\n        Write a function to find the sum of numbers in a list within a range specified by two indices.\n        '''\n        if n == m:\n            return list1[m]                                                                                                                                                                                                                            \n        else:\n            if m < n:\n                return sum_range_list_rec(list1, n, m + 1)                                                                                                                                                                                                                                    \n            else:\n                return sum_range_list_rec(list1, m + 1, n - 1)                                                                                                                                                                                                                            \n    return add_list(list1, m, n)                                                                                                                                                                                                                            \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m <= 0:\n        return 0\n    elif m >= len(list1):\n        return list1[m]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m == n:\n        return sum\n    else:\n        for i in range(m, n):\n            sum = sum + list1[i]\n    return sum\n    \ndef sum_range_dict(dict1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function that accepts a dictionary and two numbers, m and n, and returns the sum of all the keys in the dictionary.\n    '''\n    sum = 0\n    for key, val in dict1.items():\n        if m < val and m >= n:\n            sum += key\n    return sum\n    \ndef dict_contains_key(dict1, key):                                                                                                                                                                                                \n    '''\n    Write a function that accepts a dictionary and a key, and returns True if the key is in the dictionary and False otherwise.\n    '''\n    if key in dict1:\n        return True\n    else:\n        return False\n    \ndef dict_keys(dict1):                                                                                                                                                                                                \n    '''\n    Write a function that returns the list of all the keys in the dictionary.\n    '''\n    keys = []\n    for key, value in dict1.items():\n        keys.append(key)\n    return keys\n    \ndef dict_values(dict1):                                                                                                                                                                                                \n    '''\n    Write a function that returns the list of all the values in the dictionary.\n    '''\n    vals = []\n    for key, value in dict1.items():\n        vals.append(value)\n    return vals\n    \ndef dict_values_all(dict1):                                                                                                                                                                                                \n    '''\n    Write a function that returns the list of all the values in the dictionary.\n    '''\n    vals = []\n    for key, value in dict1.items():\n        vals.append(value)\n    vals.append(key)\n    return vals\n    \ndef dict_clear(dict1):                                                                                                                                                                                                \n    '''\n    Write a function that accepts a dictionary and clears the values in the dictionary.\n    '''\n    for key, value in dict1.items():\n        dict1[key] = None\n    return dict1\n    \ndef dict_copy(dict1):                                                                                                                                                                                                \n    '''\n    Write a function that accepts a dictionary and returns a new dictionary with the same keys and values.\n    '''\n    newdict = {}\n    for key, value in dict1.items():\n        newdict[key] = value\n    return newdict\n    \ndef dict_contains(dict1, value):                                                                                                                                                                                                \n    '''\n    Write a function that accepts a dictionary and a value, and returns True if the value is in the dictionary and False otherwise.\n    '''\n    if value in dict1:\n        return True\n    else:\n        return False\n    \ndef dict_get(dict1, value):                                                                                                                                                                                                \n    '''\n    Write a function that accepts a dictionary and a value, and returns the value associated with that key.\n    '''\n    for key, value in dict1.items():\n        if value == value:\n            return key\n    return None\n    \ndef dict_contains_keys(dict1, value):                                                                                                                                                                                                \n    '''\n    Write a function that accepts a dictionary and a value, and returns True if the value is in the dictionary and False otherwise.\n    '''\n    if dict1.has_key(value):\n        return True\n    else:\n        return False\n    \ndef dict_get_all(dict1):                                                                                                                                                                                                \n    '''\n    Write a function that accepts a dictionary and returns a list of all the keys and values.\n    '''\n    keys = []\n    values = []\n    for key, value in dict1.items():\n        keys.append(key)\n        values.append(value)\n    return keys, values\n    \ndef dict_get_all_all(dict1):                                                                                                                                                                                                \n    '''\n    Write a function that accepts a dictionary and returns a list of all the keys and values.\n    '''\n    keys = []\n    values = []\n    for key, value in dict1.items():\n        keys.append(key)\n        values.append(value)\n    return keys, values"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m-1, -1, -1):\n        s += list1[i]\n    \n    for i in range(n-1, -1, -1):\n        s += list1[i]\n    \n    return s\n    \n    \n    "
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    def sum_list(list1, m, n):\n        return sum(list1[i:m + n])\n    return sum_list(list1, m, n)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    if n>0:                                                                                                                                                        # if the list length is greater than zero \n        for i in range(m,n):\n            s += list1[i]                                                                                                                                                        # then, multiply it by the element at the i-th position\n    return s\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 2.0:\n        print(\"The length of the sides of a regular pentagon must be greater than or equal to 2.\")\n    else:\n        # generate the perimeter of the triangle, using the formula\n        perimeter = (a * 6 + 4) * (a * 3 + 4) * (2.0 * a + 2.0)\n        print(\"The perimeter of a regular pentagon is:\", perimeter)\n    return perimeter\ndef triangle_area(a):\n    '''\n    Write a function to compute the area of a triangle.\n    '''\n    area = ((a*2.0) + (a*2.0) + (a*2.0)) * (a*2.0)\n    print(\"The area of a triangle is:\", area)\ndef triangle_perimeter(a):\n    '''\n    Write a function to compute the perimeter of a triangle.\n    '''\n    perimeter = (a * 4 + 2.0) * (a * 2.0 + 2.0)\n    print(\"The perimeter of a triangle is:\", perimeter)\ndef cube_volume(a):\n    '''\n    Write a function that returns the volume of a cube given a radius.\n    '''\n    volume = math.pi * (a * 3) * (a * 3)\n    print(\"The volume of a cube is:\", volume)\ndef cube_area(a):\n    '''\n    Write a function that returns the area of a cube given a radius.\n    '''\n    area = math.pi * (a * 3) * (a * 3)\n    print(\"The area of a cube is:\", area)\ndef cube_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a cube given a radius.\n    '''\n    perimeter = math.pi * (a * 3) * (a * 3)\n    print(\"The perimeter of a cube is:\", perimeter)\ndef circle_area(r):\n    '''\n    Write a function that returns the area of a circle given its radius.\n    '''\n    area = math.pi * r ** 2\n    print(\"The area of a circle is:\", area)\ndef circle_perimeter(r):\n    '''\n    Write a function that returns the perimeter of a circle given its radius.\n    '''\n    perimeter = 2 * math.pi * r\n    print(\"The perimeter of a circle is:\", perimeter)\ndef square_area(r):\n    '''\n    Write a function that returns the area of a square given its length.\n    '''\n    area = 4 * math.pi * (r * r)\n    print(\"The area of a square is:\", area)\ndef square_perimeter(r):\n    '''\n    Write a function that returns the perimeter of a square given its length.\n    '''\n    perimeter = 2 * math.pi * r\n    print(\"The perimeter of a square is:\", perimeter)\ndef rectangle_area(length, width):\n    '''\n    Write a function that returns the area of a rectangle given its length and width.\n    '''\n    area = length * width\n    print(\"The area of a rectangle is:\", area)\ndef rectangle_perimeter(length, width):\n    '''\n    Write a function that returns the perimeter of a rectangle given its length and width.\n    '''\n    perimeter = (length + width) * 2\n    print(\"The perimeter of a rectangle is:\", perimeter)\ndef equilateral_triangle_area(a, b, c):\n    '''\n    Write a function that returns the area of an equilateral triangle given its three sides.\n    '''\n    area = (a * (a + b) + 2 * b * (b + c) + 2 * a * b + b * c) / 6.0\n    print(\"The area of an equilateral triangle is:\", area)\ndef equilateral_triangle_perimeter(a, b, c):\n    '''\n    Write a function that returns the perimeter of an equilateral triangle given its three sides.\n    '''\n    perimeter = (a + b + c) * (a + b + c) * 0.5\n    print(\"The perimeter of an equilateral triangle is:\", perimeter)\ndef equilateral_triangle_volume(a, b, c):\n    '''\n    Write a function that returns the volume of an equilateral triangle given its three sides.\n    '''\n    volume = (a * b * (b + c)) / 6\n    print(\"The volume of an equilateral triangle is:\", volume)\ndef parallelogram_area(a, b):\n    '''\n    Write a function that returns the area of a parallelogram given its base and height.\n    '''\n    area = (a + b) * math.sqrt(b * b - a * a)\n    print(\"The area of a parallelogram is:\", area)\ndef parallelogram_perimeter(a, b):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its base and height.\n    '''\n    perimeter = (a + b) * math.sqrt(b * b - a * a)\n    print(\"The perimeter of a parallelogram is:\", perimeter)\ndef parallelogram_volume(a, b):\n    '''\n    Write a function that returns the volume of a parallelogram given its base and height.\n    '''\n    volume = (a + b) * math.sqrt(b * b - a * a)\n    print(\"The volume of a parallelogram is:\", volume)\ndef parallelogram_area(a, b):\n    '''\n    Write a function that returns the area of a parallelogram given its base and height.\n    '''\n    area = (a + b) * (b * (b + a)) / 2\n    print(\"The area of a parallelogram is:\", area)\ndef parallelogram_perimeter(a, b):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its base and height.\n    '''\n    perimeter = (a + b) * (b * (b + a)) / 2\n    print(\"The perimeter of a parallelogram is:\", perimeter)\ndef circle_area_slope(x):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    area = math.pi * (math.pow(x, 2))\n    print(\"The area of a circle is:\", area)\ndef circle_perimeter_slope(x):\n    '''\n    Write a function that calculates the perimeter of a circle given its radius.\n    '''\n    perimeter = (math.pow(x, 2)) * math.sqrt(1 - x * x)\n    print(\"The perimeter of a circle is:\", perimeter)\ndef triangle_area_slope(a, b, c):\n    '''\n    Write a function that calculates the area of a triangle given its three sides.\n    '''\n    area = math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2)\n    print(\"The area of a triangle is:\", area)\ndef triangle_perimeter_slope(a, b, c):\n    '''\n    Write a function that calculates the perimeter of a triangle given its three sides.\n    '''\n    perimeter = math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2)\n    print(\"The perimeter of a triangle is:\", perimeter)\ndef parallelogram_area_slope(a, b, c):\n    '''\n    Write a function that calculates the area of a parallelogram given its base and height.\n    '''\n    area = (math.pow(a, 2)) + (math.pow(b, 2)) + (math.pow(c, 2))\n    print(\"The area of a parallelogram is:\", area)\ndef parallelogram_perimeter_slope(a, b, c):\n    '''\n    Write a function that calculates the perimeter of a parallelogram given its base and height.\n    '''\n    perimeter = math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2)\n    print(\"The perimeter of a parallelogram is:\", perimeter)\ndef parallelogram_area_slope(a, b, c):\n    '''\n    Write a function that calculates the area of a parallelogram given its base and height.\n    ''"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #variable to store perimeter\n    perimeter = 0\n    #base case\n    if (a == 0):\n        return 0\n    #recursive case\n    else:\n        #calculate the perimeter\n        perimeter = (2*a) + (4*a)\n        #return the answer\n        return perimeter\ndef rectangle_rectangle(a,b):\n    '''\n    Write a function to calculate the area of a rectangle from its sides.\n    '''\n    #variable to store the area\n    area = 0\n    #base case\n    if (a == 0 or b == 0):\n        return 0\n    else:\n        #calculate the area\n        area = b*b/4\n        #return the answer\n        return area\ndef triangle_rectangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle from its sides.\n    '''\n    #variable to store the area\n    area = 0\n    #base case\n    if (a == 0 or b == 0 or c == 0):\n        return 0\n    else:\n        #calculate the area\n        area = (3*a*b) / 2\n        #return the answer\n        return area\ndef parallelogram_triangle(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram from its sides.\n    '''\n    #base case\n    if (a == 0 or b == 0):\n        return 0\n    else:\n        #calculate the area\n        area = a*b/3\n        #return the answer\n        return area\ndef circle_circle(r):\n    '''\n    Write a function to calculate the area of a circle from its radius.\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.pi*(r**2)\n        #return the answer\n        return area\ndef square_square(r):\n    '''\n    Write a function to calculate the area of a square from its base\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt(2*(r**2))\n        #return the answer\n        return area\ndef triangle_hexagon(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle from its sides.\n    '''\n    #base case\n    if (a == 0 or b == 0 or c == 0):\n        return 0\n    else:\n        #calculate the area\n        area = b**2 + 4*a*c\n        #return the answer\n        return area\ndef parallelogram_hexagon(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram from its sides.\n    '''\n    #base case\n    if (a == 0 or b == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt(a**2+b**2)\n        #return the answer\n        return area\ndef circle_circle_square(r):\n    '''\n    Write a function to calculate the area of a circle from its radius.\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.pi*(r**2)\n        #return the answer\n        return area\ndef parallelogram_circle_square(r):\n    '''\n    Write a function to calculate the area of a parallelogram from its sides.\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt(r**2 + (r**2)+(2*r))\n        #return the answer\n        return area\ndef square_parallelogram(r):\n    '''\n    Write a function to calculate the area of a square from its base\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = r*r\n        #return the answer\n        return area\ndef triangle_heptagon(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle from its sides.\n    '''\n    #base case\n    if (a == 0 or b == 0 or c == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt(a**2+b**2+c**2)\n        #return the answer\n        return area\ndef parallelogram_heptagon(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram from its sides.\n    '''\n    #base case\n    if (a == 0 or b == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt(a**2+b**2)\n        #return the answer\n        return area\ndef circle_circle_heptagon(r):\n    '''\n    Write a function to calculate the area of a circle from its radius.\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.pi*(r**2)\n        #return the answer\n        return area\ndef parallelogram_circle_heptagon(r):\n    '''\n    Write a function to calculate the area of a parallelogram from its sides.\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt(r**2 + (r**2)+(r*r))\n        #return the answer\n        return area\ndef parallelogram_heptagon_square(r):\n    '''\n    Write a function to calculate the area of a parallelogram from its sides.\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt((r**2)+(r*r)+2)\n        #return the answer\n        return area\ndef parallelogram_circle_square_heptagon(r):\n    '''\n    Write a function to calculate the area of a parallelogram from its sides.\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt(r**2+(r**2)+(r*r)+2)\n        #return the answer\n        return area\ndef square_heptagon_parallelogram(r):\n    '''\n    Write a function to calculate the area of a square from its base\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt(r**2+2*r+r*r)\n        #return the answer\n        return area\ndef parallelogram_heptagon_parallelogram(r):\n    '''\n    Write a function to calculate the area of a parallelogram from its sides.\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt((r**2)+(r*r)+2)\n        #return the answer\n        return area\ndef parallelogram_heptagon_heptagon(r):\n    '''\n    Write a function to calculate the area of a parallelogram from its sides.\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt(r**2+2*r+r*r)\n        #return the answer\n        return area\ndef square_heptagon_heptagon_square(r):\n    '''\n    Write a function to calculate the area of a square from its base\n    '''\n    #base case\n    if (r == 0):\n        return 0\n    else:\n        #calculate the area\n        area = math.sqrt((r**2)+(r*r)+2)\n        #return the answer\n        return area\ndef parallelo"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = a * 0.5\n    return 4 * l + l * l * (a - 1) + l * l * a\n    \ndef perimeter_quadrilateral(a):\n    '''\n    Write a function to find the perimeter of a square with length of a from the bottom left corner and the top right corner.\n    '''\n    l = a * 1.5\n    return (l * (a + l)) + l * l * a + l * l * a\n    \ndef perimeter_rectangle(a):\n    '''\n    Write a function to find the perimeter of a rectangle from the top left corner to the bottom right corner.\n    '''\n    return a * 4\n    \ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the top right corner to the bottom left corner.\n    '''\n    return a * 3\n    \ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    l = a * 2\n    l = l + a\n    return l\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (a**2 + a**4)**0.5\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(3.1416)*((5/4)**0.5)\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a triangle from the base and height.\n    '''\n    return a*(3.1416)/2\ndef area_rectangle(a):\n    '''\n    Write a function to find the area of a rectangle from its length.\n    '''\n    return a*a\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    return a*a\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    return a*4.0*math.pi\ndef volume_triangle(a):\n    '''\n    Write a function to find the volume of a regular triangle from its base and height.\n    '''\n    return a*(3.1416)*(5/4)**2\ndef volume_rectangle(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*math.pi*(a**2)\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*a\ndef volume_circle(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*math.pi*(a**2)\ndef volume_rectangle_2(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*a\ndef volume_square_2(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*a*math.pi\ndef volume_circle_2(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*math.pi*a\ndef volume_rectangle_3(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*(a**2)*math.pi\ndef volume_square_3(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*a*a\ndef volume_circle_3(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*a*a*math.pi\ndef volume_rectangle_4(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*(a**2)*a**2\ndef volume_square_4(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*(a**2)*a\ndef volume_circle_4(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*a*a*a*math.pi\ndef volume_rectangle_5(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*a*(a**2)*math.pi\ndef volume_square_5(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*a*a*a\ndef volume_circle_5(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*a*a*a*a*a*a*a*math.pi\ndef volume_rectangle_6(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*math.pi\ndef volume_square_6(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*a**2\ndef volume_circle_6(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*(a**2)*(a**2)*a**2*math.pi\ndef volume_rectangle_7(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*(a**2)*math.pi\ndef volume_square_7(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*a**2\ndef volume_circle_7(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*(a**2)*(a**2)*a**2*math.pi\ndef volume_rectangle_8(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*(a**2)*a**2\ndef volume_square_8(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*a**2\ndef volume_circle_8(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*a**2\ndef volume_rectangle_9(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*(a**2)*a**2\ndef volume_square_9(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*a**2\ndef volume_circle_9(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*a**2*math.pi\ndef volume_rectangle_10(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*(a**2)*a**2\ndef volume_square_10(a):\n    '''\n    Write a function to find the volume of a square from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*a**2\ndef volume_circle_10(a):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*(a**2)*a**2\ndef volume_rectangle_11(a):\n    '''\n    Write a function to find the volume of a rectangle from its length.\n    '''\n    return a*4.0*(a**2)*(a**2)*(a**2)*(a**2)*a**2\ndef volume"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    x = 0\n    for i in range(5):\n        x = x + a\n    return x\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        print(\"The side length of the regular pentagon should be positive. Try again!\")\n        return 0\n    elif a == 0:\n        return (4 * math.pi * a) / 3\n    else:\n        return a + perimeter_pentagon(a - 1) + perimeter_pentagon(a - 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a=math.sqrt(a**2)\n    return a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here.\n    side_len = int(math.sqrt(a))\n    perimeter = 3.14 * side_len\n    return perimeter\ndef area_rectangle(a):\n    '''\n    Write a function that returns the area of a rectangle given its side lengths.\n    '''\n    # Write your code here.\n    side1 = int(input(\"Please enter side one: \"))\n    side2 = int(input(\"Please enter side two: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (side1 + side2 + perimeter)/2\n    area = math.sqrt(perimeter * (perimeter - side1) * (perimeter - side2))\n    return area\ndef area_triangle(a):\n    '''\n    Write a function that returns the area of a triangle given its base and height.\n    '''\n    # Write your code here.\n    b = int(input(\"Please enter base: \"))\n    h = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (b + h + perimeter)/2\n    area = (b * h) / 2\n    return area\ndef area_circle(a):\n    '''\n    Write a function that returns the area of a circle given its radius.\n    '''\n    # Write your code here.\n    radius = int(input(\"Please enter radius: \"))\n    perimeter = perimeter_pentagon(a)\n    area = (4/3) * math.pi * (radius**2)\n    return area\ndef area_square(a):\n    '''\n    Write a function that returns the area of a square given its base and height.\n    '''\n    # Write your code here.\n    b = int(input(\"Please enter base: \"))\n    h = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (b + h + perimeter)/2\n    area = math.sqrt(perimeter * (perimeter - b) * (perimeter - h))\n    return area\ndef volume_cuboid(a):\n    '''\n    Write a function that returns the volume of a cuboid given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = (4/3) * math.pi * (base **3) * (height **3)\n    return volume\ndef volume_ellipse(a):\n    '''\n    Write a function that returns the volume of an ellipse given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = (4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_square(a):\n    '''\n    Write a function that returns the volume of a square given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = math.sqrt(4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_circle(a):\n    '''\n    Write a function that returns the volume of a circle given its radius.\n    '''\n    # Write your code here.\n    radius = int(input(\"Please enter radius: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (radius + perimeter)/2\n    volume = math.sqrt(4/3) * math.pi * radius * radius\n    return volume\ndef volume_triangle(a):\n    '''\n    Write a function that returns the volume of a triangle given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = math.sqrt(4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_cube(a):\n    '''\n    Write a function that returns the volume of a cube given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = math.sqrt(4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_square(a):\n    '''\n    Write a function that returns the volume of a square given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = math.sqrt(4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_sphere(a):\n    '''\n    Write a function that returns the volume of a sphere given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = (4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_paralell(a):\n    '''\n    Write a function that returns the volume of a parallell given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = math.sqrt(4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_cylinder(a):\n    '''\n    Write a function that returns the volume of a cylinder given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = (4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_cone(a):\n    '''\n    Write a function that returns the volume of a cone given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = (4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_triangle(a):\n    '''\n    Write a function that returns the volume of a triangle given its base and height.\n    '''\n    # Write your code here.\n    base = int(input(\"Please enter base: \"))\n    height = int(input(\"Please enter height: \"))\n    perimeter = perimeter_pentagon(a)\n    perimeter = (base + height + perimeter)/2\n    volume = math.sqrt(4/3) * math.pi * (base **2) * (height **2)\n    return volume\ndef volume_cube(a):"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Find the perimeter of the pentagon\n    base = 4 * (math.sqrt(2) - 1)\n    sides = math.pow(base, 2)\n    return round(base * sides + (base - sides) * 4, 2)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s_count = s.count('std')\n    return s_count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    from collections import Counter\n    c = Counter(s)\n    print(c)\n    print(s in c)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occ = 0\n    for i in s:\n        if i =='s':\n            occ += 1\n    return occ\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = 0\n    for char in s:\n        if char =='std':\n            occurance += 1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurances = {}\n    \n    for i in range(len(s)):\n        if s[i] in occurances:\n            occurances[s[i]] += 1\n        else:\n            occurances[s[i]] = 1\n    return occurances\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    from collections import Counter\n    counter = Counter(s)\n    return counter['std']\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    str = s.lower()\n    counter = {}\n    for char in str:\n        counter[char] = str.count(char)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = str(s)\n    count = 0\n    for i in s:\n        if i == \"std\":\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s)==0:\n        return 0\n    else:\n        result = 0\n        for i in s:\n            if i==' ':\n                result += 1\n        return result\n    \n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is not type(test_tuple[i]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    dic = {\n        'check_type': 'import',\n        'return': 'def check_type(tuple):',\n        'test_tuple': test_tuple\n    }\n    return dic\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # TODO: Write your code here\n    # \uc544\ubb34\ub7f0 \uac83\ub3c4 \uc798\ubabb\ub418\uac8c \ud574\uc57c\ud558\ub294 \uacbd\uc6b0 \uc774\uc720: \uc790\ub8cc\ud615\uc774 \ub098\uc624\ub294 \uacbd\uc6b0, \uc774\uc804 \uc218\uc2dd\uc5d0 \uc704\uce58\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0\ub3c4 \uc788\uc74c.\n    return test_tuple[0][0] == test_tuple[1][0]\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_tuple = tuple([x for x in test_tuple])\n    type_tuple = list(type_tuple)\n    type_tuple = set(type_tuple)\n    if len(type_tuple) == len(set(type_tuple)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_values = tuple(test_tuple)\n    for i in tuple_values:\n        if not isinstance(i, int) and not isinstance(i, float):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    x = len(test_tuple[0])\n    y = len(test_tuple)\n    #print(\"Tuple: \", test_tuple)\n    for i in range(0, y):\n        print(\"Checking data type of \" + str(test_tuple[i]))\n        print(\"data type: \", type(test_tuple[i]))\n        if type(test_tuple[i]) is str:\n            print(\"Data type is string\")\n        else:\n            print(\"Data type is not string\")\n        #print(\"Checking data type of \", test_tuple[i])\n        #print(\"data type: \", type(test_tuple[i]))\n        if test_tuple[i].isdigit() == True:\n            print(\"Data type is digit\")\n        else:\n            print(\"Data type is not digit\")\n    for j in range(0, y):\n        print(\"Checking data type of \", test_tuple[j])\n        print(\"data type: \", type(test_tuple[j]))\n        if test_tuple[j].isdigit() == True:\n            print(\"Data type is digit\")\n        else:\n            print(\"Data type is not digit\")\n    for k in range(0, y):\n        print(\"Checking data type of \", test_tuple[k])\n        print(\"data type: \", type(test_tuple[k]))\n        if test_tuple[k].isdigit() == True:\n            print(\"Data type is digit\")\n        else:\n            print(\"Data type is not digit\")\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_length = len(test_tuple)\n    \n    #check tuple length\n    if tuple_length < 2:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    is_list = False\n    is_tuple = False\n    is_number = False\n    is_string = False\n    is_boolean = False\n    for index in range(len(test_tuple)):\n        if index == 0:\n            is_list = True\n        elif is_list and isinstance(test_tuple[index], list):\n            is_list = False\n        elif is_tuple and isinstance(test_tuple[index], tuple):\n            is_tuple = False\n        elif is_number and isinstance(test_tuple[index], float):\n            is_number = False\n        elif is_string and isinstance(test_tuple[index], str):\n            is_string = False\n        elif is_boolean and isinstance(test_tuple[index], bool):\n            is_boolean = False\n    return is_list, is_tuple, is_number, is_string, is_boolean\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = [str, int, float, tuple, list, dict, np.ndarray, np.generic, np.number]\n    for i in test_tuple:\n        if type(i) not in types:\n            raise TypeError(f'Input value is not a data type : {i}')\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) < 2:\n        raise ValueError('A tuple must have at least two elements')\n    for x in test_tuple:\n        if not isinstance(x, (int, float, complex)):\n            raise TypeError('Element of the tuple must be int or float')\n    return test_tuple\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    r = n-1\n    \n    while l < r:\n        m = l + (r - l) // 2\n        if arr[m] == x:\n            return True\n        elif arr[m] > x:\n            r = m - 1\n        else:\n            l = m + 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for index in range(0,n):\n        if(arr[index] == x):\n            counter = counter + 1\n    if(counter/n > 0.5):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Make a counter of the elements.\n    cnt = [0 for _ in range(n)]\n    \n    # Set the position of the majority element to be equal to the total positions of the elements in the array.\n    for i in range(n):\n        cnt[arr[i]] += 1\n    \n    # If there are two or more elements with the same value, then return false.\n    if n % 2 == 0:\n        if max(cnt) > x:\n            return False\n        else:\n            return True\n    else:\n        if max(cnt) < x:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n-1\n    majority = arr[0]\n    while (i < j):\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n        if arr[i] == majority:\n            break\n    return arr[i] == majority\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    else:\n        if arr[0] == x:\n            return True\n        else:\n            return is_majority(arr[1:], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0 or arr == []:\n        return None\n    elif x > arr[n//2]:\n        return is_majority(arr, n-n//2, x)\n    elif arr[n//2] == x:\n        return True\n    else:\n        return is_majority(arr, n-n//2, x)\n    \n    \ndef sort_array(arr, n):\n    if n == 0:\n        return arr\n    left = sort_array(arr, n//2)\n    right = sort_array(arr, n-n//2)\n    return merge(left, right)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    first_element = arr[0]\n    for i in range(0, n):\n        if arr[i] == first_element:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    x_count = 0\n    for i in range(n):\n        if arr[i] == x:\n            x_count += 1\n    \n    if x_count == n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If the array is empty, the element is the majority element\n    if n == 0:\n        return True\n    # Find the midpoint of the array\n    mid = n // 2\n    # If the midpoint is equal to the element, set it to a flag\n    if arr[mid] == x:\n        return True\n    # If the element is less than the midpoint,\n    # set it to be equal to the last element of the array\n    if arr[n - mid] == x:\n        return True\n    # Set the flag to be true to indicate we need to go through the array\n    flag = False\n    # For every other element\n    for i in range(n - mid):\n        # If the number is less than the midpoint,\n        # then set the flag to be false\n        if arr[i] < x:\n            flag = True\n            break\n    # If we have set the flag to true, we know the element is the majority element\n    if flag == True:\n        return True\n    # If the number is greater than the midpoint,\n    # set the flag to be false\n    if arr[mid] > x:\n        flag = False\n    return flag\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in range(0, n):\n        if (arr[i] == x):\n            counter += 1\n    if (counter >= (n / 2)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n -1\n        count +=1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # define the number\n    num = n \n    # find the number of set bits\n    count = 0\n    while (num!= 0):\n        if (num & 1):\n            count += 1\n        num = num // 2\n    # return the count\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n >= 1): \n        if (n & 1): \n            count = count + 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    for i in range(n):\n        set_bits += 1 if (n % 2) == 1 else 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return (bin(n).count('1'))\n    \ndef count_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return (bin(n).count('1'))\n    \ndef count_Bits_Range(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #Return the count for each bit range in the binary number n\n    return (bin(n).count('1'))\n    \ndef is_Bits_Set(n):\n    '''\n    Write a python function to check if a given number is a set bit.\n    '''\n    #Return the count for each bit range in the binary number n\n    return (bin(n).count('1'))\n    \ndef is_Bits_Range(n):\n    '''\n    Write a python function to check if a given number is a set bit.\n    '''\n    #Return the count for each bit range in the binary number n\n    return (bin(n).count('1'))\n    \ndef is_Bits_Set_Range(n):\n    '''\n    Write a python function to check if a given number is a set bit.\n    '''\n    #Return the count for each bit range in the binary number n\n    return (bin(n).count('1'))\n    \ndef is_Bits_Range_Range(n):\n    '''\n    Write a python function to check if a given number is a set bit.\n    '''\n    #Return the count for each bit range in the binary number n\n    return (bin(n).count('1'))\n    "
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # keep track of bit positions\n    set_bits = 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count_b = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            count_b += 1\n        i += 1\n    return count_b\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n>0:\n        if n&1==1:\n            count=count+1\n        n=n>>1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Inputs:\n    # n: integer, number to calculate the number of set bits in\n    # Output:\n    # Returns:\n    # the number of set bits in n\n    \n    # Your code here\n    return bin(int(n)).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #for each integer, calculate the number of bits needed to represent it and return the sum of these bits\n    #using the code in the previous section of this file\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = []\n    for i in str:\n        if i % 2!= 0:\n            new_str.append(i)\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = 0\n    for i in range(len(str)):\n        if str[i] % 2 == 1:\n            odd_index += 1\n    return odd_index\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indexes = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_indexes.append(str[i])\n    return \"\".join(odd_indexes)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    import re\n    l = str.split()\n    l_new = []\n    for i in l:\n        #if i % 2!= 0:\n        #l_new.append(i)\n        x = re.sub(r'[^\\d]','',i)\n        if int(x) % 2!= 0:\n            l_new.append(x)\n    return''.join(l_new)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[:len(str)//2]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd.append(str[i])\n    return ''.join(odd)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    indices = [i for i, x in enumerate(str) if i % 2]\n    new_str = ''\n    for index in indices:\n        new_str += str[index]\n    return new_str\n    \ndef main():\n    '''\n    Main program that prints the string to be filtered.\n    '''\n    print(\"Hello, world!\")\n    \n    print(\"The string after the odd character:\")\n    print(odd_values_string('abcdef'))\n    \n    print(\"The odd characters are:\")\n    print(odd_values_string('abcdef'))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(\"-\", \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\"#\", \"\").replace(\".\", \"\").replace(\",\", \"\")\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str=='':\n        return ''\n    odd_indexes=[]\n    for index in range(len(str)):\n        if str[index]%2==1:\n            odd_indexes.append(index)\n    if odd_indexes==[]:\n        return ''\n    else:\n        return str[:len(str)-len(odd_indexes)]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == \"\":\n        return \"\"\n    else:\n        odd = []\n        for char in str:\n            if char % 2 == 0:\n                odd.append(char)\n        if len(odd)!= 0:\n            return \"\".join(odd)\n        else:\n            return \"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b and a < c): \n        return a \n    elif (b < a and b < c): \n        return b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a==b==c):\n        return a\n    elif (a<b<c):\n        return a\n    elif (a>b>c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b and b == c: \n        return a \n    elif a == b or b == c: \n        return b \n    else: \n        return a \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n    else:\n        return \"nothin\"\na = int(input(\"Enter First Number : \"))\nb = int(input(\"Enter Second Number : \"))\nc = int(input(\"Enter Third Number : \"))\nprint(min_of_three(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and b < c:\n        return a\n    elif a < c and c < b:\n        return c\n    elif a < b and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # the function returns minimum of three numbers.\n    # if number is 1 then print it.\n    # if number is 2 then print it.\n    # if number is 3 then print it.\n    if a==b==c:\n        return a\n    elif a>b:\n        return b\n    elif a>c:\n        return c\n    else:\n        return a"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = min(a,b,c)\n    return minimum\ndef find_average(a,b,c): \n    '''\n    Write a function to find the average of three numbers.\n    '''\n    average = (a+b+c)/3\n    return average\ndef find_standard_deviation(a,b,c): \n    '''\n    Write a function to find the standard deviation of three numbers.\n    '''\n    standard_deviation = (a-b)**2+(c-b)**2-(a-c)**2+(b-c)**2\n    standard_deviation = standard_deviation/3\n    return standard_deviation\ndef find_variance(a,b,c): \n    '''\n    Write a function to find the variance of three numbers.\n    '''\n    variance = b**2+c**2-2*a*b*c\n    variance = variance/3\n    return variance\ndef find_stdev(a,b,c): \n    '''\n    Write a function to find the standard deviation of three numbers.\n    '''\n    standard_deviation = find_standard_deviation(a,b,c)\n    return standard_deviation\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and b<c:\n        return a\n    if c<a and b<c:\n        return b\n    if a<c and c<b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<=n<=r:\n        if n&(n-1):\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Your code here\n    return sum([1 if n & (1 << i) else 0 for i in range(r-l+1)]) == n\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n <= l) or (n >= r):\n        return False\n    \n    # set all bits in range\n    for i in range(l, r+1):\n        while (n & (1 << i)):\n            print(\"bit\",i)\n            n = n << 1\n    \n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    assert l<=r<=n, \"Invalid range of bits.\"\n    bin_l = bin(l)[2:]\n    bin_r = bin(r)[2:]\n    #print(bin_l, bin_r)\n    if bin_l==bin_r:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n <= 0 or n >= (2**l)-(2**(l-r)) or n>= (2**l)-(2**(l-r)):\n        return True\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    r_temp = r + n\n    if r_temp >= l:\n        r_temp = r_temp - l\n    return r_temp % 2\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l>=0 and r<=n):\n        for i in range(l, r+1):\n            if(i & 1):\n                print(str(i) + \" is set in the given range\")\n            else:\n                print(str(i) + \" is not set in the given range\")\n    else:\n        print(\"Error: invalid range\")\n        \n        \n        "
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r-l<1:\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l==r):\n        return(n==0)\n    if n%(l-1)==r%(l-1):\n        return(all_Bits_Set_In_The_Given_Range(n//(l-1),l-1,r))\n    else:\n        return(False)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    # Check if the number is valid\n    # n > 0\n    if n > 0:\n        \n        # Iterate from l to r inclusive\n        for i in range(l,r+1):\n            \n            # Check if bit is set in the range\n            if n & (1 << i) == 0:\n                print(\"No.{} is Unset in range(0,{})\".format(i,l))\n                return False\n            \n            # Check if bit is set in the range\n            if n & (1 << i)!= 0:\n                print(\"No.{} is set in the range(0,{})\".format(i,l))\n                return True\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[::-1]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Write your code here.\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = list(arr)\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] *= -1\n    i = 0\n    while i < n:\n        arr[i] *= -1\n        arr[i + 1] += 1\n        i += 2\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_reordered = arr.copy()\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr_reordered[i] < 0:\n            negative.append(arr_reordered[i])\n        else:\n            positive.append(arr_reordered[i])\n    if len(negative) > 0:\n        arr_reordered[:len(negative)] = negative\n    if len(positive) > 0:\n        arr_reordered[len(positive):] = positive\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # WRITE YOUR CODE HERE\n    arr = sorted(arr, reverse=True)\n    for i in range(n):\n        arr[i] = arr[i] + abs(arr[i])\n    arr[n] = -arr[n]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    res = []\n    curr_element = 0\n    start = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            res.append(arr[i])\n            start = 1\n        else:\n            res.append(arr[i])\n            curr_element = i\n            if start == 1:\n                curr_element = arr[i]\n            start = 0\n    if curr_element > 0:\n        res.append(curr_element)\n    return res\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Check that the array is non-empty\n    if len(arr) == 0:\n        raise ValueError(\"Array cannot be empty\")\n    # Check that the array is non-decreasing\n    if len(arr) == 1:\n        raise ValueError(\"Array cannot be of length 1\")\n    # Check that the number of elements in the array is less than or equal to n\n    if len(arr) >= n:\n        raise ValueError(\"The array is too big to re-arrange.\")\n    # Initialize the left hand part of the array as the first element, and the right hand part of the array as the last element\n    arr_index = 0\n    arr_left_index = 1\n    arr_right_index = len(arr) - 1\n    arr_left_len = 0\n    arr_right_len = 0\n    # Place the elements in the array in order by relative order of negatives\n    while arr_index < len(arr):\n        if arr[arr_index] < 0:\n            arr[arr_index], arr[arr_left_index] = arr[arr_left_index], arr[arr_index]\n            arr_left_index += 1\n            arr_left_len += 1\n        else:\n            arr[arr_index] += arr[arr_right_index]\n            arr_right_index -= 1\n            arr_right_len += 1\n        arr_index += 1\n    # Check that the initial elements are not negative\n    for i in range(0, arr_left_index):\n        if arr[i] < 0:\n            raise ValueError(\"Negative numbers cannot be re-arranged.\")\n    for i in range(arr_right_index, len(arr)):\n        if arr[i] < 0:\n            raise ValueError(\"Negative numbers cannot be re-arranged.\")\n    # Check that the initial elements are sorted\n    for i in range(0, arr_left_index):\n        if arr[i] < 0:\n            raise ValueError(\"Negative numbers cannot be re-arranged.\")\n    for i in range(arr_right_index, len(arr)):\n        if arr[i] < 0:\n            raise ValueError(\"Negative numbers cannot be re-arranged.\")\n    # Create the new array and shift the elements to the right\n    arr = arr[arr_right_index + 1:len(arr)]\n    arr[0] *= -1\n    # Calculate how many elements can be moved to the left and right of the new array\n    left_len = arr_right_index - arr_left_index\n    right_len = len(arr) - arr_right_index\n    left_len_uniq = right_len - left_len\n    # Calculate how many elements can be moved to the left and right of the new array\n    left_uniq = left_len - arr_left_len\n    right_uniq = len(arr) - left_len_uniq - right_len\n    # Move the elements to the left\n    for i in range(0, left_uniq):\n        arr[arr_left_index + i] *= -1\n    # Move the elements to the right\n    for i in range(0, right_uniq):\n        arr[arr_right_index + i] *= -1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(len(arr)):\n        new_arr.append(arr[i][:n] + arr[i][n:])\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Write your code here\n    for i in range(0, len(arr)):\n        if arr[i] < 0:\n            arr[i] *= -1\n    # arr[0] = arr[len(arr) - 1]\n    arr[:n] = arr[:n][::-1]\n    # arr[n] = arr[len(arr) - 1]\n    arr[n:] = arr[n:][::-1]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[-i-1]\n            arr[-i-1] = temp\n        if arr[i] > 0:\n            temp = arr[i]\n            arr[i] = arr[i]\n            arr[i] = temp\n    return arr\n    \ndef sum_array(arr):\n    '''\n    Write a function that takes in an array and returns the sum of all elements in the array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n    \ndef reverse_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and reverses the given array in-place.\n    '''\n    for i in range(n//2):\n        temp = arr[i]\n        arr[i] = arr[n-i-1]\n        arr[n-i-1] = temp\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #Add your Python code here\n    str1 = str1.replace(char,char.upper())\n    return str1\n    pass"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n    \n    \ndef test():\n    #for i in range(100):\n    #    print(replace_blank(\"elephant\",'e'))\n    #    print(replace_blank(\"elephant\",'j'))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"E\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n    print(replace_blank(\"elephant\",\"j\"))\n    print(replace_blank(\"elephant\",\"e\"))\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"_\")\n    str1=str1.replace(\"\\n\",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char =='':\n        return str1\n    else:\n        return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ','')\n    str2 = str2.replace('&',char)\n    str2 = str2.replace('*',char)\n    str2 = str2.replace('/',char)\n    str2 = str2.replace('+',char)\n    str2 = str2.replace('-',char)\n    str2 = str2.replace('!',char)\n    str2 = str2.replace('?',char)\n    str2 = str2.replace('%',char)\n    str2 = str2.replace('(',char)\n    str2 = str2.replace(')',char)\n    str2 = str2.replace('+',char)\n    str2 = str2.replace('-',char)\n    str2 = str2.replace('=',char)\n    str2 = str2.replace(';',char)\n    str2 = str2.replace('*',char)\n    str2 = str2.replace('!',char)\n    str2 = str2.replace('?',char)\n    str2 = str2.replace('%',char)\n    str2 = str2.replace('{',char)\n    str2 = str2.replace('}',char)\n    return str"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    while char in str1:\n        str1 = str1.replace(char, \"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1.replace(\" \", char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1.replace(str1[i],char)\n            \n    return str1\n    "
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1\n    new_string = new_string.replace(' ',char)\n    return new_string\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for x in list1:\n        heapq.heappush(heap,-x)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-x for x in heap]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #Implement\n    if len(list1)<n:\n        return list1\n    else:\n        list1.sort(reverse=True)\n        return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    list1=sorted(list1)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = []\n    for i in list1:\n        a.append(i)\n    a.sort()\n    heapq.heapify(a)\n    for j in range(n):\n        heapq.heappop(a)\n    return a\ndef print_result(k):\n    '''\n    Write a function that prints a given list after arranging the elements according to their values, then printing it.\n    '''\n    print(k)\n    for i in range(len(k)):\n        print(k[i],end=' ')\n    print('')\n    for i in range(len(k)):\n        print(k[i],end=' ')\n    print('')\ndef delete_duplicates(k):\n    '''\n    Write a function that takes in a given list, and returns a new list where only the values that are present in the list is removed.\n    '''\n    new_list = []\n    for i in range(len(k)):\n        if k[i] not in new_list:\n            new_list.append(k[i])\n    return new_list\ndef sort_nnum(k):\n    '''\n    Write a function that takes in a given list and returns a new list where the values of the elements in the list are sorted according to their positions in the list.\n    '''\n    for i in range(len(k)):\n        for j in range(len(k)):\n            if k[i] > k[j]:\n                temp = k[i]\n                k[i] = k[j]\n                k[j] = temp\n    return k\ndef replace_nnum(k,i,j):\n    '''\n    Write a function that takes in a given list, the index of the element, and the value of the element and returns a new list.\n    '''\n    k[i] = j\n    return k\ndef create_new_list(k):\n    '''\n    Write a function that takes in a given list, and returns a new list where the values of the elements in the list are in the position where the smallest element occurs, and the other values are the smallest elements.\n    '''\n    new_list = []\n    for i in range(len(k)):\n        if k[i]!= k[min(k)]:\n            temp = k[i]\n            k[i] = k[min(k)]\n            k[min(k)] = temp\n    return k\ndef sub_diff_nnum(k):\n    '''\n    Write a function that takes in a given list and returns a new list where the values of the elements in the list are in the index where the smallest element occurs, but the other values are the other elements.\n    '''\n    new_list = []\n    for i in range(len(k)):\n        if k[i]!= k[min(k)]:\n            temp = k[i]\n            k[i] = k[min(k)]\n            k[min(k)] = temp\n    return k\ndef check_if_in_list(k,l):\n    '''\n    Write a function that takes in a given list, the list of values and a given integer and returns a boolean value if the list contains the given value.\n    '''\n    for i in range(len(k)):\n        if k[i] == l:\n            return True\n    return False\ndef merge_sort_nnum(k):\n    '''\n    Write a function that takes in a given list, and returns a new list where the values of the elements in the list are sorted.\n    '''\n    if len(k) < 2:\n        return k\n    mid = len(k) // 2\n    left = k[:mid]\n    right = k[mid:]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list = []\n    heapq.heapify(new_list)\n    for item in list1:\n        if new_list[0] < item:\n            heapq.heappush(new_list,item)\n        elif new_list[0] == item:\n            heapq.heappush(new_list,item)\n            heapq.heappop(new_list)\n            heapq.heappush(new_list,item)\n    new_list = heapq.nsmallest(n,new_list)\n    return new_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    max_heap = []\n    for i in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap,i)\n        else:\n            if i < heapq.heappop(max_heap):\n                heapq.heappush(max_heap,i)\n    return max_heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    \n    for x in list1:\n        heapq.heappush(heap,x)\n    \n    for i in range(n):\n        heapq.heappop(heap)\n    \n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    return heapq.heappop(heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    temp = []\n    while n>0:\n        temp.append(list1[0])\n        list1.remove(list1[0])\n        n-=1\n    return temp\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    count = 0\n    output = []\n    for i in range(n):\n        output.append(heapq.heappop(list1))\n        count = count + 1\n    return output\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import sqrt,sin,cos,pi,exp\n    from matplotlib import pyplot as plt\n    \n    pi=3.14159265\n    area=0\n    for i in range(0,2):\n        for j in range(0,2):\n            for k in range(0,2):\n                area+=r[i][j]*r[k][j]*h[k][i]\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    a = math.pow(r,2) - (math.pow(r,3) + math.pow(r,4))\n    b = math.pow(r,2) + (2*math.pow(r,3))\n    c = math.pow(r,2) + (math.pow(r,3) + math.pow(r,4))\n    return a*b*c\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (r**2)*(h**2)-(r**2)*h**2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    c = r*r\n    s1 = h*(r/2)**2\n    s2 = h*(r/2)\n    s3 = h*(r/2)\n    s4 = h*(r/2)\n    s5 = h*(r/2)**2\n    s6 = h*(r/2)\n    s7 = h*(r/2)**2\n    s8 = h*(r/2)\n    s9 = h*(r/2)**2\n    s10 = h*(r/2)**2\n    s11 = h*(r/2)\n    s12 = h*(r/2)**2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    f = r*(3/2)*h\n    # Set the x,y locations for the points of the circle\n    x = np.linspace(0,r,1000)\n    y = np.linspace(0,h,1000)\n    x2,y2 = np.meshgrid(x,y)\n    # 2-D arrays for storing the local surface area\n    L = np.zeros_like(x2)\n    # 2-D arrays for storing the global surface area\n    G = np.zeros_like(x2)\n    # Loop through the two input vectors\n    for i in range(len(x)):\n        for j in range(len(y)):\n            # Calculate the local surface area using equation\n            L[i,j] = f*((x2[i,j]**3)+(y2[i,j]**3))\n            # Calculate the global surface area using the linear interpolation\n            G[i,j] = 3*(r**3)+(h**3)*(x2[i,j]**3+y2[i,j]**3)\n    # Returns the local surface area and global surface area\n    return L, G"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r >= h:\n        return r * h * 0.5\n    elif r <= 0.5 * (h/h0):\n        return r * (h/h0) * 0.5\n    else:\n        return r * (h/h0) * 0.25\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi, sqrt\n    from sympy import dsolve\n    from sympy.geometry import Circle, Line\n    a = (r**2)*(1+h)\n    b = (r**2)*(1-h)\n    return (a+b)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Call local function\n    cylinder = lu_cylinder(r,h)\n    \n    # Create and return the equation\n    return equation(cylinder[0],cylinder[1],cylinder[2])\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return ((2 * r * math.pi * h) / 3)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return(8*(r*r*h*h))\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # I made the variable side_length the length of the sides of the cube\n    side_length = l\n    side_side_length = l\n    side_side_length = side_length**3\n    volume = side_side_length * side_side_length * side_side_length\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    n = int(input('enter the side length of the cube: '))\n    vol = (n*n)*(n*n)\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for i in range(l):\n        for j in range(i+1):\n            for k in range(j+1):\n                volume += 1\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # compute the volume of the cube\n    volume = 4 * l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l**3) * 4.0\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if (l > 1) and (l % 2!= 0):\n        l = l + 1\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # You must return a value between 1 and 4 inclusive.\n    # For example, volume_cube(1) should return 3.\n    # For example, volume_cube(6) should return 16.\n    # You can assume that you don't have any division by zero errors.\n    # Write a program that returns the volume of a cube given its side length.\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = l**3 # power of 3\n    v = (4*l**2)*(l*3.14) # volume of a cube\n    return v # return result\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            i += 1\n            continue\n        else:\n            i += 1\n            continue\n    print(\"i = \", i)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0: \n        # For every number less than n, set it to a \n        # leading zero. \n        for i in range(n): \n            if (i % 2 == 0): \n                number = (i % 2) \n                if number: \n                    number = 0\n                else: \n                    number = 1\n                # Set the corresponding bit in n. \n                # If the number is even, set the bit on n \n                # to 1. Otherwise, set the bit on n to 0. \n                # This means that the number is odd. \n                n = bin(n | (number << i))[2:] \n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0b1000000000000000 # mask 0b00000011111111100\n    return mask if n & mask else n # n is even or odd, so returning n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = 0\n    while (n > 0):\n        if (n & 2 == 0):\n            n = n & 1\n        else:\n            n = n >> 1\n        i = i + 1\n    return(i)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n > 0:\n        if n & 0x01 == 0:\n            even_bits = even_bits + 1\n        n = n>>1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_str = str(n)\n    odd_bit_num = n_str[::2]\n    even_bit_num = odd_bit_num[::2]\n    return int(even_bit_num, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit_mask = 2**(n.bit_length() - 1)\n    return bit_mask * (2**n)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = int(n)\n    temp = n\n    while n > 0:\n        temp = temp << 1\n        if temp % 2 == 0:\n            temp = temp >> 1\n        n = n - 1\n    return temp\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    output = \"\"\n    while n:\n        output += str(n & 1)\n        n >>= 1\n    return output\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = [0] * n \n    for i in range(n): \n        if (i % 2) == 0: \n            even_bits[i] = 1 \n    return even_bits\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_count = dict()\n    for item in test_list:\n        occurence_count[item[0]] = occurence_count.get(item[0], 0) + 1\n    return occurence_count\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for tuple in test_list:\n        dictionary[tuple] = dictionary.get(tuple,0) + 1\n    return dictionary\n    \ndef get_occurences(test_list, dictionary):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dictionary = {}\n    for tuple in test_list:\n        if tuple not in occurence_dictionary:\n            occurence_dictionary[tuple] = dictionary[tuple]\n    return occurence_dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # test_list = [(1,2),(1,3),(1,4),(2,3),(3,4),(3,4)]\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    new_dict = {}\n    for element in test_list:\n        new_dict[element[0]] = new_dict.get(element[0],0) + 1\n    return new_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list).most_common()\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #This solution is a bit complicated because the outer function gives us a list of tuples, which can be passed as an argument to the function.\n    #You can also get a dictionary by creating an empty dictionary and passing the tuples into it.\n    d = {}\n    for tuple in test_list:\n        if tuple not in d:\n            d[tuple] = 1\n        else:\n            d[tuple] += 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for i in test_list:\n        if i[0] in dictionary:\n            dictionary[i[0]]+=1\n        else:\n            dictionary[i[0]]=1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use a dictionary to store the count of occurences of each tuple\n    occurence = {}\n    for tuple in test_list:\n        occurence[tuple[0]] = occurence.get(tuple[0],0) + 1\n    return occurence\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for i in range(len(test_list)):\n        tupl = tuple(test_list[i])\n        if tupl in dictionary:\n            dictionary[tupl] += 1\n        else:\n            dictionary[tupl] = 1\n    return dictionary\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # To determine the number of substrings of a given string, the number of substrings in the given string is equal to the number of substrings in the string and subtring count is equal to the length of the substring.\n    # Input: string\n    # Output: the number of non-empty substring in string\n    # Constraints:\n    # 1 <= string.length <= 1000\n    # string consists of only lowercase English letters.\n    # Example:\n    # \"abc\" is a substring of \"cab\"\n    # \"aec\" is a substring of \"cba\"\n    # \"aac\" is a substring of \"acb\"\n    # \"cbc\" is a substring of \"acb\"\n    # \"abcde\" is a substring of \"acb\"\n    # \"abcdef\" is a substring of \"acb\"\n    # \"abcdefg\" is a substring of \"acb\"\n    # \"abcdefgh\" is a substring of \"acb\"\n    # \"abcdabcd\" is a substring of \"acb\"\n    # \"abcdabcde\" is a substring of \"acb\"\n    # \"abcdabcdef\" is a substring of \"acb\"\n    # \"abcdabcdgh\" is a substring of \"acb\"\n    # \"abcdabcdghi\" is a substring of \"acb\"\n    # \"abcdabcdghii\" is a substring of \"acb\"\n    # \"abcdabcdghiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiiiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiiiiiiiiiiiii\" is a substring of \"acb\"\n    # \"abcdabcdghiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(0, len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1] == str[i:j+1][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # create empty array to store substrings of the string\n    subs = [''] * len(str)\n    \n    # define the initial index to 0\n    i = 0\n    # iterate the string\n    for j in range(len(str)):\n        # if the current substring has not been used, append the current substring to the array\n        if j not in subs:\n            subs[i] = str[j]\n            i += 1\n        # if the current substring is used, check if it has not been used before\n        else:\n            # if it is, we update the index\n            if subs[i] == str[j]:\n                i += 1\n            # if it is not, add it to the subs array\n            else:\n                subs[i] = str[j]\n                i += 1\n    # return the number of substrings\n    return i\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    count2 = 0\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l_str = list(str)\n    l_str_set = set(l_str)\n    result = 0\n    for i in range(len(l_str)):\n        for j in range(i+1, len(l_str)):\n            if l_str[i:j+1] in l_str_set:\n                result += 1\n    return result\n        \n    \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    counter = 0\n    for i in range(len(str) - 1):\n        if str[i]!= str[i + 1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = 0\n    for i in range(len(str)):\n        if str[i]!= str[i+1]:\n            n += 1\n    return n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i:j] == str[i:j][::-1] :\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    \n    return str.count(\"a\")+str.count(\"e\")+str.count(\"i\")+str.count(\"o\")+str.count(\"u\")\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str) - 1): \n        for j in range(i + 1, len(str)): \n            if str[i:j + 1]!= str[i:j] and str[i:j + 1]!= \"\": \n                count += 1\n    return count\n    \nif __name__ == '__main__': \n    str = 'radha is a good teacher'\n    print(number_of_substrings(str))\n    \n    str = 'akuragh'\n    print(number_of_substrings(str))\n    \n    str = 'jimmy'\n    print(number_of_substrings(str))\n    \n    str = 'what are your friends'\n    print(number_of_substrings(str))\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def is_positive(num):\n        if num >= 0:\n            return True\n        return False\n    def is_prime(num):\n        if num % 2 == 0:\n            return False\n        if num % 3 == 0:\n            return False\n        if num % 5 == 0:\n            return False\n        if num % 7 == 0:\n            return False\n        return True\n    \n    count = 0\n    \n    for i in range(2, n + 1):\n        if is_prime(i):\n            count = count + 1\n    \n    for j in range(2, m + 1):\n        if j % 2 == 0:\n            count = count + 1\n        if j % 3 == 0:\n            count = count + 1\n        if j % 5 == 0:\n            count = count + 1\n        if j % 7 == 0:\n            count = count + 1\n        if j > m:\n            count = count + 1\n    \n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int((m+n)**0.5)+1\ndef fib(n):\n    '''\n    Write a function that returns the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 4*n-3"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number = 0\n    for x in range(m,n+1):\n        if x % 2 == 1 and x > m:\n            continue\n        total_number += x * (x - m)\n    return total_number\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_smallest_number(seq):\n        '''\n        Computes the smallest number of sequences of length n.\n        '''\n        if seq==1:\n            return seq\n        elif seq==2:\n            return seq\n        else:\n            return get_smallest_number(seq-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # variable to store the numbers of sequences\n    sequences = 0\n    # define the sequence\n    sequence = [0] * n\n    # iterate through each element of m\n    for i in range(m):\n        # add the first element of sequence to the sequence\n        sequence[0] = i\n        # iterate through each element of sequence\n        for j in range(1, n):\n            # if the element is less than or equal to m, there are sequences of length n\n            if sequence[j] < i:\n                # add the sequence of length n to sequence\n                sequences += (n - j)\n                # increase the j by one\n                j += 1\n    return sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Starting with the base case, we add the current element to the sequence.\n    # If we cannot add an element, we return the original sequence, and we have exhausted the possible sequences.\n    \n    m += 1\n    n -= 1\n    total = 1\n    seq = []\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    print(f'Solving for number of sequences of length {n} with this function')\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (int(math.sqrt(m*(m+1)**2))+1) * (int(math.sqrt(m*(m+1)**2))+1)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    del list2[-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #check if the first list is empty\n    if(len(list1) == 0):\n        list1.append(list2[-1])\n    else:\n        for i in range(len(list2)-1):\n            list1[-1] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Use the loop to create a for loop to create a nested loop to iterate through each element of the list1,\n    #  and replace the last element of the list2 with the elements of the list2\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # TODO: Write your code here\n    list1=list1.pop(-1)\n    list1=list1+list2\n    list1=list1[::-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1] = list2[len(list2)-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())\n    return list1\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1 is None:\n        return list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[0],list2[0]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)==len(list2):\n        for i in range(len(list2)):\n            list1[i]=list2[i]\n    else:\n        print(\"Lists don't have same length. Cannot replace list elements.\")\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    res = 0\n    for i in str1:\n        res += 1\n    return res\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        char_count += 1\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n    print(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_counter = dict()\n    for i in str1:\n        if i in char_counter:\n            char_counter[i] += 1\n        else:\n            char_counter[i] = 1\n    return char_counter\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i == \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i]==\"a\" or str1[i]==\"e\" or str1[i]==\"i\" or str1[i]==\"o\" or str1[i]==\"u\":\n            count+=1\n    print(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += len(i)\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # TODO: Replace this with real solution\n    if str1==None:\n        return 0\n    else:\n        # str1 = str1.replace(' ','')\n        # print(str1)\n        count=0\n        for i in str1:\n            if i =='a':\n                count+=1\n            elif i =='b':\n                count+=1\n            elif i =='c':\n                count+=1\n            elif i =='d':\n                count+=1\n            elif i =='e':\n                count+=1\n            elif i =='f':\n                count+=1\n            elif i =='g':\n                count+=1\n            elif i =='h':\n                count+=1\n            elif i =='i':\n                count+=1\n            elif i =='j':\n                count+=1\n            elif i =='k':\n                count+=1\n            elif i =='l':\n                count+=1\n            elif i =='m':\n                count+=1\n            elif i =='n':\n                count+=1\n            elif i =='o':\n                count+=1\n            elif i =='p':\n                count+=1\n            elif i =='q':\n                count+=1\n            elif i =='r':\n                count+=1\n            elif i =='s':\n                count+=1\n            elif i =='t':\n                count+=1\n            elif i =='u':\n                count+=1\n            elif i =='v':\n                count+=1\n            elif i =='w':\n                count+=1\n            elif i =='x':\n                count+=1\n            elif i =='y':\n                count+=1\n            elif i =='z':\n                count+=1\n        return count\n    # return count_charac(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 1:\n        M = math.sqrt(N)\n        for i in range(1, int(N)):\n            if (N - i*M) == M:\n                return i*M\n    else:\n        return None\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.sqrt(N) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #    if the number is greater than 4, return the perfect square\n    if N > 4:\n        return False\n    #    if the number is less than 2, return the perfect square\n    elif N < 2:\n        return True\n    #    if the number is even, return the perfect square\n    elif N % 2 == 0:\n        return True\n    else:\n        d = N - (N%2)\n        if d >= 0:\n            return next_Perfect_Square(d)\n        else:\n            return next_Perfect_Square(d+1)\n        \n    \n    \n    #    if the number is greater than 5, return the perfect square\n    if N > 5:\n        return True\n    #    if the number is less than 2, return the perfect square\n    elif N < 2:\n        return False\n    #    if the number is even, return the perfect square\n    elif N % 2 == 0:\n        return False\n    else:\n        d = N - (N%2)\n        if d >= 0:\n            return next_Perfect_Square(d)\n        else:\n            return next_Perfect_Square(d+1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    M = N \n    \n    if M == 0:\n        return 0\n    elif M == 1:\n        return 1\n    elif M == 2:\n        return 2\n    elif M == 3:\n        return 6\n    elif M % 3 == 0:\n        return M\n    elif M % 3 == 1:\n        return M + 1\n    elif M % 3 == 2:\n        return M - 1\n    else:\n        return (M + 1)\n        \n    # if M < 0:\n    #     return 0\n    # if M == 0 or M == 1:\n    #     return 1\n    # else:\n    #     return M + 2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(2, N+1): \n        if (N%i)==0: \n            return i \n    return N+1 \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # N can be negative.\n    if N < 0:\n        print(\"Negative number has no next perfect square\")\n    elif N == 0:\n        print(\"1\")\n    elif N == 1:\n        print(\"1+1\")\n    elif N > 1:\n        print(N,\"+1 = \")\n        for i in range(N, 0, -1):\n            if N % i == 0:\n                break\n            else:\n                print(i)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1:\n        return N\n    else:\n        return math.sqrt(N)+1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Write your code here.\n    if N == 0:\n        return 1\n    elif N == 1:\n        return 2\n    elif N > 1:\n        return N * next_Perfect_Square(N-1) + (N-1)*next_Perfect_Square(N-2)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N%2 == 0:\n        # N must be even\n        return N\n    else:\n        return int(N**0.5) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # if the number is 0 or 1 the return is the square root\n    # if the number is 2 or more the square root of the number is the square root of the 2*number plus 1\n    #if the number is greater than 2 the square root is not the perfect square\n    \n    if N == 0 or N == 1 or N == 2:\n        return N\n    \n    if N < 0:\n        return None\n        \n    if N == 0 or N == 1:\n        return 2 * N + 1\n    \n    if N % 2 == 0:\n        return (N ** 0.5) + 1\n    else:\n        return (N ** 0.5) + 2\n    \n    \n    #find the perfect square\n    '''\n    If the number is a perfect square, return the square root of the number\n    '''\n    \n    if N < 2:\n        return None\n    if N % 2 == 0:\n        return 2 * next_Perfect_Square(N // 2) + 1\n    else:\n        return (N ** 0.5) + 2\n        \n    \n    \n    #if the number is 2 or more the perfect square is the square root of the two squares plus one\n    #if the number is greater than 2 the square root of the two squares is the square root of the two squares plus two\n    #if the number is greater than or equal to 2 the perfect square is the square root of the two squares plus one and the square root of the two squares is not the perfect square\n    #if the number is less than 2 the perfect square is the square root of the two squares plus one and the square root of the two squares is the perfect square\n    \n    \n    \n    #if the number is greater than 2, the square root of the two squares is the perfect square\n    #if the number is less than 2, the perfect square is the square root of the two squares plus one and the perfect square is the perfect square\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # num_arr = len(arr)\n    # if num_arr <= 1:\n    #     return arr[0]\n    \n    # if num_arr == 2:\n    #     return arr[1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return 0\n    # If the array is empty\n    if len(arr) == 0:\n        return -1\n    # Set variable to be the smallest element present in the array\n    smallest = arr[0]\n    # Set variable to be the largest element present in the array\n    largest = arr[-1]\n    # Check to see if the current element is greater than or less than the smallest element\n    if smallest > largest:\n        # Set the current element to the smallest element\n        smallest = smallest\n        # Check to see if the current element is greater than or less than the largest element\n        largest = largest\n    # If the current element is larger than the smallest, set the current element to be the smallest element\n    if smallest > largest:\n        smallest = smallest\n    # Add to the global largest element\n    largest += smallest\n    # Set the current element to be the current largest\n    largest += smallest\n    # Calculate the total element which is the sum of all the bitonic elements\n    total_element = largest\n    # Loop through the elements in the array\n    for i in range(1, len(arr)):\n        # Calculate the total element which is the sum of all the bitonic elements\n        total_element += arr[i]\n        # Check if the total element is greater than or less than the current element\n        if total_element > largest:\n            largest = total_element\n        # If the total element is greater than or less than the current element\n        if total_element < smallest:\n            smallest = total_element\n        # If the total element is greater than the current element\n        if total_element > largest:\n            # Reset the current element and set it to the smallest element\n            total_element = smallest\n            smallest = largest\n    return largest\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    l = len(arr)\n    \n    # the base case\n    if l == 0:\n        return 0\n    if l == 1:\n        return arr[0]\n    \n    # find the first element\n    n = max(arr[:l // 2])\n    \n    # if the first element is not increasing or decreasing\n    if arr[0] < arr[1]:\n        if n > arr[1]:\n            # return max of the arr\n            return max(arr[:l // 2] + [n])\n        else:\n            # return min of the arr\n            return min(arr[:l // 2] + [n])\n    else:\n        if n > arr[1]:\n            # return max of the arr\n            return max(arr[1:] + [n])\n        else:\n            # return min of the arr\n            return min(arr[1:] + [n])\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    \n    arr.sort()\n    max_sum = 0\n    max_sub_sum = 0\n    \n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            continue\n        \n        max_sub_sum = max_sub_sum + arr[i]\n        \n        if max_sub_sum > max_sum:\n            max_sum = max_sub_sum\n    \n    return max_sum\n        \n        "
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0], max_sum(arr[1:]) + arr[0])\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sub = 0\n    max_so_far = 0\n    for i in range(len(arr)):\n        if arr[i] > sub:\n            sub = arr[i]\n        else:\n            sub = max(sub,arr[i])\n        if sub > max_so_far:\n            max_so_far = sub\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    dp = [[-1 for i in range(len(arr)+1)] for j in range(len(arr))]\n    return max_sum(arr, 1, dp)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return sum(sum(a) for a in zip(*arr)) \n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0\n    square = number\n    iteration = 0\n    while square!= 0:\n        root = root + 1\n        square = square / 2\n        iteration += 1\n    return root, iteration\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if not isinstance(number, int):\n        raise TypeError('The argument must be an int.')\n    if number == 0:\n        return 0\n    if number < 0:\n        raise ValueError('The argument must be positive.')\n    a = 1\n    for i in range(1, number):\n        if i % 2 == 0:\n            a = (a * number) / i\n    return a\n    \n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = None\n    while square_root is None:\n        square_root = babylonian_squareroot(number - 2**0.5)\n        if square_root == 0:\n            return 0.5*square_root\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = number\n    if number == 1:\n        return 1\n    while number > 0:\n        if number % 2 == 0:\n            square_root = (square_root * square_root)\n        square_root = square_root * number\n        number = number / 2\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Compute sqrt using the Babylonian method.\n    # Parameters:    number (int): The number to compute the square root.\n    # Returns:        float: The square root of number.\n    \n    # TODO:\n    # Write a function for computing square roots using the Babylonian method.\n    # Parameters:    number (int): The number to compute the square root.\n    # Returns:        float: The square root of number.\n    \n    # TODO:\n    # Write a function for computing square roots using the babylonian method.\n    # Parameters:    number (int): The number to compute the square root.\n    # Returns:        float: The square root of number.\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    '''\n    For the first iteration, try to compute the square root,\n    but throw a ValueError.\n    \n    If the error is too high, try to compute the square root,\n    but throw a ValueError.\n    '''\n    '''\n    For the second iteration, try to compute the square root,\n    but throw a ValueError.\n    '''\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # I want to know if it's a square or not. \n    if number == 0:\n        return False\n    if number == 1:\n        return True\n    else:\n        # The first square root is 0.\n        if number < 2:\n            return False\n        # The second square root is 0.\n        elif (number == 2) and (number > 1):\n            return False\n        # The third square root is 0.\n        elif (number == 3) and (number > 1) and (number < 5):\n            return False\n        # The fourth square root is 0.\n        elif (number == 4) and (number > 1) and (number < 10):\n            return False\n        # The fifth square root is 0.\n        elif (number == 5) and (number > 1) and (number < 15):\n            return False\n        # The sixth square root is 0.\n        elif (number == 6) and (number > 1) and (number < 20):\n            return False\n        # The seventh square root is 0.\n        elif (number == 7) and (number > 1) and (number < 25):\n            return False\n        # The eighth square root is 0.\n        elif (number == 8) and (number > 1) and (number < 25):\n            return False\n        # The ninth square root is 0.\n        elif (number == 9) and (number > 1) and (number < 25):\n            return False\n        # The tenth square root is 0.\n        elif (number == 10) and (number > 1) and (number < 25):\n            return False\n        # The eleventh square root is 0.\n        elif (number == 11) and (number > 1) and (number < 25):\n            return False\n        # The twelfth square root is 0.\n        elif (number == 12) and (number > 1) and (number < 25):\n            return False\n        else:\n            # Only include even numbers.\n            return babylonian_squareroot(number - 2)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = 1.0\n    for i in range(1,number):\n        square_root = square_root*(number-i)\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number > 0:\n        return babylonian_squareroot(number // 2) + 1\n    else:\n        return babylonian_squareroot(-number)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2 or str == str[::-1]: return 0\n    pal = [[0 for j in range(len(str))] for i in range(len(str))]\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if j - i >= 3:\n                pal[i][j] = pal[i][j-3]+1\n    for i in range(len(str)):\n        if str[i] in pal[i]:\n            return len(str)-i\n    return len(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Fill this in.\n    def lps(s, i, j):\n        if j == j.length: return 1\n        if j.is_palindrome(s[i:j+1]): return lps(s, i, j+1) + 1\n        else: return lps(s, i, j)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps = [['' for i in range(len(str) + 1)] for j in range(len(str) + 1)]\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if str[i] == str[j] and i < j:\n                lps[i + 1][j + 1] = lps[i][j] + 1\n            elif str[i]!= str[j]:\n                lps[i + 1][j + 1] = max(lps[i + 1][j], lps[i][j + 1])\n    \n    return lps[-1][-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    len = 0\n    # create a stack for storing all the characters\n    s = []\n    # preorder traversal \n    s.append(str[0])\n    for i in range(len(str)):\n        if len(s) > 0:\n            # pop the first character from stack and compare to the next one\n            while len(s) > 0 and str[i]!= s[-1]:\n                s.pop()\n                # pop the character from stack and compare to the next one\n                if len(s) > 0 and str[i] == s[-1]:\n                    # if the character is the last one, then pop the last element from stack and compare to the next one\n                    s.pop()\n                else:\n                    # if the character is not the last one, then pop the last element from stack and compare to the current element\n                    s.pop()\n            # if the length of stack is greater than 0, then we have a palindrome\n            if len(s) > 0:\n                len = max(len,i - s.pop())\n        # if the string is empty, we have no palindrome\n        if len(s) == 0:\n            len = 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Variables to store lengths\n    substring_lengths = {\n        1: 1,\n        2: 2\n    }\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: \n        return 0\n    pal = [[0 for _ in range(len(str) + 1)] for _ in range(len(str) + 1)]\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            # LPS with L to R \n            lps = max(str[i:j + 1]) \n            if lps > pal[i][j]: \n                pal[i + 1][j + 1] = pal[i][j] \n                # LPS with R to L \n                lps = max(str[i:j]) \n                if lps > pal[i + 1][j]: \n                    pal[i + 1][j + 1] = lps \n    return max(pal[-1])\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pal = 1\n    for i in range(0,len(str)-1):\n        if (str[i] == str[i+1]):\n            pal += 1\n        else:\n            pal = 1\n            if (i>0 and str[i] == str[i-1]):\n                pal += 1\n            if (i+1<len(str) and str[i] == str[i+1]):\n                pal += 1\n    return pal\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    ans = 0\n    i = 0\n    j = 0\n    while i < len(str) - 1:\n        if str[i] == str[j]:\n            ans = max(ans, j - i + 1)\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j = 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if str[j] == str[i] and dp[j][i - 1] == 1:\n                dp[j + 1][i - 1] = dp[j][i] + 2\n            else:\n                dp[j + 1][i - 1] = max(dp[j][i - 1], dp[j][i])\n    return dp[n - 1][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return 0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s = 0\n    for i in range(0, n+1):\n        s += (i/n)\n    return s\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    i = 1\n    while i <= n:\n        harmonic_sum += i\n        i += 1\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s = 0\n    for i in range(n, 0, -1):\n        s += i\n    return s\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h_sum = 0\n    i = 1\n    while i <= n:\n        h_sum += i\n        i += 1\n    return h_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(1+n)/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return n\n    return n * harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 1\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(1/n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    # Base Cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + (harmonic_sum(n - 1) / 2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a=set(array_nums1)\n    b=set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a = set(array_nums1)\n    b = set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_int = []\n    for i in array_nums2:\n        for j in array_nums1:\n            if i == j:\n                array_int.append(i)\n    return array_int\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)==0:\n        return array_nums2\n    elif len(array_nums2)==0:\n        return array_nums1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    my_dict = {}\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            my_dict[array_nums1[i]] = array_nums2.index(array_nums1[i])\n        else:\n            my_dict[array_nums1[i]] = -1\n    return my_dict\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) < len(array_nums2):\n        array_nums2, array_nums1 = array_nums1, array_nums2\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1_set = set(array_nums1)\n    array2_set = set(array_nums2)\n    if len(array1_set.intersection(array2_set)) == 0:\n        return None\n    return array1_set.intersection(array2_set)\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = set(array_nums1) & set(array_nums2)\n    if len(intersect)>0:\n        return list(intersect)\n    else:\n        return []\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # First find the first array\n    count = 0\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            count += array_nums2.count(array_nums1[i])\n            # We ignore the numbers which are already in the second array\n            if count == 0:\n                # No intersection\n                pass\n        else:\n            count += 1\n    # We ignore the numbers which are already in the first array\n    for i in range(len(array_nums2)):\n        if array_nums2[i] in array_nums1:\n            count += array_nums1.count(array_nums2[i])\n            if count == 0:\n                return False\n    return count == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_list = list(tup)\n    count = 0\n    for i in tup_list:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counts = 0\n    for t in tup: \n        if t == x: \n            counts += 1\n    return counts\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n    \ndef main():\n    '''\n    Write a function that prints the numbers from 1 to 100.\n    '''\n    for i in range(1, 101):\n        print(i, end = \" \")\n    print(\"\\n\")\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = x.strip(\" \")\n    if tup[0] == x: \n        return len(tup[1]) \n    else: \n        return count_X(tup[1], x)\n        \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    y = y.strip(\" \")\n    if tup[0] == y: \n        return len(tup[1]) \n    else: \n        return count_Y(tup[1], y)\n        \ndef count_Z(tup, z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    z = z.strip(\" \")\n    if tup[0] == z: \n        return len(tup[1]) \n    else: \n        return count_Z(tup[1], z)\n        \ndef count_W(tup, w): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    w = w.strip(\" \")\n    if tup[0] == w: \n        return len(tup[1]) \n    else: \n        return count_W(tup[1], w)\n        \ndef count_XZ(tup, xz): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    xz = xz.strip(\" \")\n    if tup[0] == xz: \n        return len(tup[1]) \n    else: \n        return count_XZ(tup[1], xz)\n        \ndef count_YZ(tup, yz): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    yz = yz.strip(\" \")\n    if tup[0] == yz: \n        return len(tup[1]) \n    else: \n        return count_YZ(tup[1], yz)\n        \ndef count_ZW(tup, zw): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    zw = zw.strip(\" \")\n    if tup[0] == zw: \n        return len(tup[1]) \n    else: \n        return count_ZW(tup[1], zw)\n        \ndef count_WY(tup, wy): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    wy = wy.strip(\" \")\n    if tup[0] == wy: \n        return len(tup[1]) \n    else: \n        return count_WY(tup[1], wy)\n        \ndef count_WX(tup, xx): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    xxx = xx.strip(\" \")\n    if tup[0] == xx: \n        return len(tup[1]) \n    else: \n        return count_WX(tup[1], xx)\n        \ndef count_YX(tup, yx): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    yx = yx.strip(\" \")\n    if tup[0] == yx: \n        return len(tup[1]) \n    else: \n        return count_YX(tup[1], yx)\n        \ndef count_ZXY(tup, zxy): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    zxy = zxy.strip(\" \")\n    if tup[0] == zxy: \n        return len(tup[1]) \n    else: \n        return count_ZXY(tup[1], zxy)\n        \ndef count_WXY(tup, wxy): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    wxy = wxy.strip(\" \")\n    if tup[0] == wxy: \n        return len(tup[1]) \n    else: \n        return count_WXY(tup[1], wxy)\n        \ndef count_ZWXY(tup, zwxy): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    zwxy = zwxy.strip(\" \")\n    if tup[0] == zwxy: \n        return len(tup[1]) \n    else: \n        return count_ZWXY(tup[1], zwxy)\n        \ndef count_WXZXY(tup, xzx): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    xzx = xzx.strip(\" \")\n    if tup[0] == xzx: \n        return len(tup[1]) \n    else: \n        return count_WXZXY(tup[1], xzx)\n        \ndef count_WXWXY(tup, wx, wxz): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    wx = wx.strip(\" \")\n    wxz = wxz.strip(\" \")\n    if tup[0] == wx: \n        return len(tup[1]) \n    if tup[0] == wxz: \n        return len(tup[1]) \n    else: \n        return count_WXWXY(tup[1], wx, wxz)\n        \ndef count_WXZWXY(tup, wxz, wzx): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    wxz = wzx.strip(\" \")\n    if tup[0] == wxz: \n        return len(tup[1]) \n    else: \n        return count_WXZWXY(tup[1], wxz, wxz)\n        \ndef count_WXYZWXY(tup, wxz, wzx): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    wxz = wzx.strip(\" \")\n    if tup[0] == wxz: \n        return len(tup[1]) \n    else: \n        return count_WXYZWXY(tup[1], wxz, wxz)\n    \ndef count_XYWZXY(tup, xy, wxz, wzx): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    xy = xy.strip(\" \")\n    if tup[0] == xy: \n        return len(tup[1]) \n    else: \n        return count_XYWZXY(tup[1], xy, wxz, wxz)\n        \ndef count_ZXYWZX"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0 \n    for i in tup: \n        if i == x: \n            counter += 1 \n    return counter \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    new_tup = tuple(map(tup, x))\n    return new_tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    total = 0\n    for x in tup:\n        if x == x:\n            total += 1\n    return total\ndef count_O(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    total = 0\n    for x in tup:\n        if x == x:\n            total += 1\n    return total\ndef count_XO(tup, x, y):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    total = 0\n    for x in tup:\n        if x == x:\n            if x == y:\n                total += 1\n            else:\n                total += 1\n    return total\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[0:len(list)] + [element] + list[len(list):]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    new_list = []\n    \n    for index in range(len(list)):\n        new_list.insert(index,list[index])\n        \n    return new_list\n    \ndef main():\n    '''\n    Tests the insertion process.\n    '''\n    \n    my_list = [1, 2, 3, 4, 5, 6]\n    element = 5\n    \n    print('Testing insertion process')\n    print('Inserting')\n    new_list = insert_element(my_list, element)\n    print('After')\n    print(new_list)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for index,element in enumerate(list):\n        if element <= element:\n            result.append(element)\n        else:\n            result.append(result[index-1]+1)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list)==0:\n        return list\n    else:\n        try:\n            index = int(input(\"Which position would you like to insert the element? \"))\n            if index<0:\n                raise ValueError('Position must be positive, try again')\n            else:\n                new_element = int(input(\"Inserted element: \"))\n                if new_element in list[index-1]:\n                    print(\"Element already exists, ignore\")\n                else:\n                    list[index-1].insert(index-1,new_element)\n                    return list\n        except ValueError as err:\n            print(err)\n            \n        \ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and deletes the element and returns the resulting list.\n    '''\n    try:\n        list.remove(element)\n        return list\n    except ValueError as err:\n        print(err)\n        \n        \ndef merge_elements(list1,list2):\n    '''\n    Write a function that takes two lists and returns the resulting list.\n    '''\n    if len(list1)==0:\n        return list2\n    elif len(list2)==0:\n        return list1\n    else:\n        try:\n            index1 = int(input(\"Which position would you like to insert the element? \"))\n            if index1<0:\n                raise ValueError('Position must be positive, try again')\n            else:\n                new_element = int(input(\"Inserted element: \"))\n                list1[index1-1].insert(index1-1,new_element)\n                return list1\n        except ValueError as err:\n            print(err)\n        \n        \ndef calc_length(list):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    length=0\n    for el in list:\n        length+=1\n    return length\n    \ndef calc_sum(list1,list2):\n    '''\n    Write a function that takes two lists and returns the sum of their elements.\n    '''\n    try:\n        if len(list1)==0:\n            return 0\n        else:\n            if len(list2)==0:\n                return sum(list1)\n            else:\n                if len(list1[0])==len(list2[0]):\n                    sum=0\n                    for el in range(len(list1)):\n                        sum+=list1[el][el]\n                    for el in range(len(list2)):\n                        sum+=list2[el][el]\n                    return sum\n                else:\n                    raise ValueError('Not all elements are of the same length')\n    except ValueError as err:\n        print(err)\n        \n            \n        \n        \ndef show_stats(list):\n    '''\n    Write a function that returns a list of the numbers in the list, sorted in descending order, and their counts.\n    '''\n    num_list = []\n    for el in list:\n        num_list.append(el)\n    num_list.sort(reverse=True)\n    print(num_list)\n    print(len(num_list))\n    print(list.count(num_list[0]))\n    \n        \ndef bubble_sort(list):\n    '''\n    Write a function that sorts a list of numbers in ascending order by swapping the smallest number to the last, and then reversing the order of the remaining numbers.\n    '''\n    if len(list)>=1:\n        for index in range(len(list)-1):\n            for i in range(index,len(list)-1):\n                if list[i]>list[i+1]:\n                    list[i],list[i+1]=list[i+1],list[i]\n        print(list)\n        \n        \ndef selection_sort(list):\n    '''\n    Write a function that sorts a list of numbers in ascending order by swapping the smallest number to the second-to-last, and then reversing the order of the remaining numbers.\n    '''\n    if len(list)>=1:\n        for index in range(len(list)-1):\n            for i in range(index,len(list)-1):\n                if list[i]<list[i+1]:\n                    list[i],list[i+1]=list[i+1],list[i]\n        print(list)\n        \n        \ndef insertion_sort(list):\n    '''\n    Write a function that sorts a list of numbers in ascending order by swapping the smallest number to the second-to-last, and then reversing the order of the remaining numbers.\n    '''\n    if len(list)>=1:\n        for index in range(1,len(list)):\n            for i in range(index,len(list)):\n                if list[i]<list[i-1]:\n                    list[i],list[i-1]=list[i-1],list[i]\n        print(list)\n        \n        \ndef merge_sort(list):\n    '''\n    Write a function that sorts a list of numbers in ascending order by swapping the smallest number to the second-to-last, and then reversing the order of the remaining numbers.\n    '''\n    if len(list)>=1:\n        num = int(len(list)/2)\n        list1 = list[:num]\n        list2 = list[num:]\n        merge_sort(list1)\n        merge_sort(list2)\n        print(list1+list2)\n        \n        \ndef selection_sort(list):\n    '''\n    Write a function that sorts a list of numbers in ascending order by swapping the smallest number to the second-to-last, and then reversing the order of the remaining numbers.\n    '''\n    if len(list)>=1:\n        for index in range(len(list)-1):\n            min_index = index\n            for i in range(index+1,len(list)):\n                if list[i]<list[min_index]:\n                    min_index=i\n            list[index],list[min_index]=list[min_index],list[index]\n        print(list)\n        \n        \ndef insertion_sort(list):\n    '''\n    Write a function that sorts a list of numbers in ascending order by swapping the smallest number to the second-to-last, and then reversing the order of the remaining numbers.\n    '''\n    if len(list)>=1:\n        num = int(len(list)/2)\n        for index in range(num):\n            for i in range(index,len(list)):\n                if list[i]<list[index]:\n                    list[i],list[index]=list[index],list[i]\n        print(list)\n        \n        \ndef quick_sort(list):\n    '''\n    Write a function that sorts a list of numbers in ascending order by swapping the smallest number to the second-to-last, and then reversing the order of the remaining numbers.\n    '''\n    if len(list)>=1:\n        num = int(len(list)/2)\n        quick_sort_aux(list,0,len(list)-1,num)\n        quick_sort_aux(list,0,len(list)-1,num)\n        print(list)\n        \ndef quick_sort_aux(list,low,high,num):\n    '''\n    Write a function that sorts a list of numbers in ascending order by swapping the smallest number to the second-to-last, and then reversing the order of the remaining numbers.\n    '''\n    if low<high:\n        # Find the midpoint of the current list\n        mid = int((low+high)/2)\n        # Sort the sublist in ascending order\n        quick_sort_aux(list,low,mid,num)\n        quick_sort_aux(list,mid+1,high,num)\n        # Swap the elements\n        list[low],list[mid] = list[mid],list[low]\n        \ndef quick_sort_recursive(list):\n    '''\n    Write a function that sorts a list of numbers in ascending order by swapping the smallest number to the second-to-last, and then reversing the order of the remaining numbers.\n    '''\n    if len(list)>=1:\n        num = int(len(list)/2)\n        quick_sort_recursive(list[:num])\n        quick_sort_recursive(list[num:])"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index,element in enumerate(list):\n        if element < element:\n            list.insert(index,element)\n            return list\n    else:\n        list.append(element)\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == None:\n        return list\n    for i in range(len(list)-1, -1, -1):\n        list[i] = list[i][0]\n    list[0] = element\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list[:]\n    if new_list[0] == element:\n        new_list.pop(0)\n    new_list.insert(0,element)\n    return new_list\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index,item in enumerate(list):\n        if item == element:\n            return [index+1]+list\n    return [index+1]+list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == None:\n        list = []\n    if type(list)!= list:\n        raise Exception(\"The list to be inserted is not a list\")\n    if len(list) == 0:\n        list.append(element)\n        return list\n    elif type(element) == str:\n        for i in range(len(list)):\n            if element == list[i]:\n                return list.insert(i,element)\n    elif type(element) == list:\n        for i in range(len(list)):\n            if element[i] == list[i]:\n                return list.insert(i,element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list.copy()\n    for index, element_to_insert in enumerate(list):\n        if element_to_insert.value == element:\n            new_list[index] = element\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.polar(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(numbers)\n    x = (numbers[0] + numbers[1]) / 2\n    y = (cmath.sqrt(numbers[0]**2 + numbers[1]**2))\n    z = cmath.atan2(numbers[1], numbers[0])\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers) == 0:\n        return ''\n    else:\n        converstion = ''\n        for i in numbers:\n            if i.imag!= 0:\n                converstion += str(cmath.polar(i.real, cmath.polar(i.imag)))\n                converstion += '+'\n            else:\n                converstion += str(i.real)\n                converstion += '+'\n                converstion += str(i.imag)\n                converstion += 'i'\n                converstion += '+'\n            converstion += '\\n'\n        return converstion\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    value = 'complex'\n    if numbers == '0':\n        return value\n    elif numbers == '1':\n        return '-' + value\n    elif numbers == '2':\n        return '+' + value\n    elif numbers == '3':\n        return '+/-' + value\n    elif numbers == '4':\n        return '+' + value + '/-' + value\n    elif numbers == '5':\n        return '+/-' + value + '+/-' + value\n    elif numbers == '6':\n        return '+' + value + '-' + value + '-' + value\n    elif numbers == '7':\n        return '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '8':\n        return '+' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '9':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '10':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '11':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '12':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '13':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '14':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '15':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '16':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '17':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '18':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '19':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '20':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '21':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '22':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '23':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '24':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '25':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '26':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '27':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '28':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '29':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '30':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '31':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '32':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '33':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '34':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '35':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '36':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '37':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '38':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '39':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '40':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '41':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '42':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '43':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '44':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '45':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '46':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '47':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '48':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '49':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '50':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '51':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '52':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '53':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '54':\n        return '+' + value + '-' + value + '-' + value + '-' + value + '-' + value\n    elif numbers == '55':\n        return '+/-' + value + '+/-' + value + '+/-' + value + '+/-' + value\n    elif numbers == '56':\n        return '+' + value "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c = complex(numbers[0], numbers[1])\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers)==3:\n        c=numbers[0]\n        x=cmath.polar(c)\n        return x\n    elif len(numbers)==2:\n        c=numbers[0]\n        x=cmath.polar(c)\n        return x\n    elif len(numbers)==1:\n        c=numbers[0]\n        x=cmath.polar(c)\n        return x\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    m = len(numbers)\n    a = [0]*(m+1)\n    for i in range(0,m+1):\n        a[i] = cmath.polar(numbers[i])\n    return a\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x, y = 0, 0 \n    cnt = 0 \n    for i in numbers:\n        x += i.real\n        y += i.imag\n        cnt += 1\n    return (x/cnt, y/cnt)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c = str(numbers)\n    c = c.replace(\"-0\",\"-0j\").replace(\",\",\"\")\n    c = c.replace(\"+0\",\"+0j\").replace(\"+\",\"+j\")\n    print(\"Converted to polar coordinates using: \",c,\"\")\n    return(eval(c))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if not numbers:\n        print('Invalid input')\n        return -1\n    else:\n        print('The input is valid')\n        a = cmath.polar(numbers[0])\n        for i in range(1,len(numbers)):\n            b = cmath.polar(numbers[i])\n            c = (a[0] + b[0]) / 2\n            d = (a[1] + b[1]) / 2\n            e = (a[2] + b[2]) / 2\n            f = (a[3] + b[3]) / 2\n            a = cmath.polar(numbers[i])\n            print('\\tAngle from 1st quadrant is', cmath.degrees(a[0]))\n            print('\\tAngle from 2nd quadrant is', cmath.degrees(a[1]))\n            print('\\tAngle from 3rd quadrant is', cmath.degrees(a[2]))\n            print('\\tAngle from 4th quadrant is', cmath.degrees(a[3]))\n            print('\\tAngle from 5th quadrant is', cmath.degrees(a[4]))\n            print('\\tAngle from 6th quadrant is', cmath.degrees(a[5]))\n            print('\\tAngle from 7th quadrant is', cmath.degrees(a[6]))\n            print('\\tAngle from 8th quadrant is', cmath.degrees(a[7]))\n            print('\\tAngle from 9th quadrant is', cmath.degrees(a[8]))\n            print('\\tAngle from 10th quadrant is', cmath.degrees(a[9]))\n            print('\\tAngle from 11th quadrant is', cmath.degrees(a[10]))\n            print('\\tAngle from 12th quadrant is', cmath.degrees(a[11]))\n            print('\\tAngle from 13th quadrant is', cmath.degrees(a[12]))\n            print('\\tAngle from 14th quadrant is', cmath.degrees(a[13]))\n            print('\\tAngle from 15th quadrant is', cmath.degrees(a[14]))\n            print('\\tAngle from 16th quadrant is', cmath.degrees(a[15]))\n            print('\\tAngle from 17th quadrant is', cmath.degrees(a[16]))\n            print('\\tAngle from 18th quadrant is', cmath.degrees(a[17]))\n            print('\\tAngle from 19th quadrant is', cmath.degrees(a[18]))\n            print('\\tAngle from 20th quadrant is', cmath.degrees(a[19]))\n            print('\\tAngle from 21st quadrant is', cmath.degrees(a[20]))\n            print('\\tAngle from 22nd quadrant is', cmath.degrees(a[21]))\n            print('\\tAngle from 23st quadrant is', cmath.degrees(a[22]))\n            print('\\tAngle from 24th quadrant is', cmath.degrees(a[23]))\n            print('\\tAngle from 25st quadrant is', cmath.degrees(a[24]))\n            print('\\tAngle from 26th quadrant is', cmath.degrees(a[25]))\n            print('\\tAngle from 27th quadrant is', cmath.degrees(a[26]))\n            print('\\tAngle from 28th quadrant is', cmath.degrees(a[27]))\n            print('\\tAngle from 29th quadrant is', cmath.degrees(a[28]))\n            print('\\tAngle from 30th quadrant is', cmath.degrees(a[29]))\n            print('\\tAngle from 31st quadrant is', cmath.degrees(a[30]))\n            print('\\tAngle from 32st quadrant is', cmath.degrees(a[31]))\n            print('\\tAngle from 33st quadrant is', cmath.degrees(a[32]))\n            print('\\tAngle from 34st quadrant is', cmath.degrees(a[33]))\n            print('\\tAngle from 35st quadrant is', cmath.degrees(a[34]))\n            print('\\tAngle from 36st quadrant is', cmath.degrees(a[35]))\n            print('\\tAngle from 37st quadrant is', cmath.degrees(a[36]))\n            print('\\tAngle from 38st quadrant is', cmath.degrees(a[37]))\n            print('\\tAngle from 39st quadrant is', cmath.degrees(a[38]))\n            print('\\tAngle from 40st quadrant is', cmath.degrees(a[39]))\n            print('\\tAngle from 41st quadrant is', cmath.degrees(a[40]))\n            print('\\tAngle from 42st quadrant is', cmath.degrees(a[41]))\n            print('\\tAngle from 43st quadrant is', cmath.degrees(a[42]))\n            print('\\tAngle from 44st quadrant is', cmath.degrees(a[43]))\n            print('\\tAngle from 45st quadrant is', cmath.degrees(a[44]))\n            print('\\tAngle from 46st quadrant is', cmath.degrees(a[45]))\n            print('\\tAngle from 47st quadrant is', cmath.degrees(a[46]))\n            print('\\tAngle from 48st quadrant is', cmath.degrees(a[47]))\n            print('\\tAngle from 49st quadrant is', cmath.degrees(a[48]))\n            print('\\tAngle from 50st quadrant is', cmath.degrees(a[49]))\n            print('\\tAngle from 51st quadrant is', cmath.degrees(a[50]))\n            print('\\tAngle from 52st quadrant is', cmath.degrees(a[51]))\n            print('\\tAngle from 53st quadrant is', cmath.degrees(a[52]))\n            print('\\tAngle from 54st quadrant is', cmath.degrees(a[53]))\n            print('\\tAngle from 55st quadrant is', cmath.degrees(a[54]))\n            print('\\tAngle from 56st quadrant is', cmath.degrees(a[55]))\n            print('\\tAngle from 57st quadrant is', cmath.degrees(a[56]))\n            print('\\tAngle from 58st quadrant is', cmath.degrees(a[57]))\n            print('\\tAngle from 59st quadrant is', cmath.degrees(a[58]))\n            print('\\tAngle from 60st quadrant is', cmath.degrees(a[59]))\n            print('\\tAngle from 61st quadrant is', cmath.degrees(a[60]))\n            print('\\tAngle from 62st quadrant is', cmath.degrees(a[61]))\n            print('\\tAngle from 63st quadrant is', cmath.degrees(a[62]))\n            print('\\tAngle from 64st quadrant is', cmath.degrees(a[63]))\n            print('\\tAngle from 65st quadrant is', cmath.degrees(a[64]))\n            print('\\tAngle from 66st quadrant is', cmath.degrees(a[65]))\n            print('\\tAngle from 67st quadrant is', cmath.degrees(a[66]))\n            print('\\tAngle from 68st quadrant is', cmath.degrees(a[67]))\n            print('\\tAngle from 69st quadrant is', cmath.degrees(a[68]))\n            print('\\tAngle from 70st quadrant is', cmath.degrees(a[69]))\n            print('\\tAngle from 71st quadrant is', cmath.degrees(a[70]))\n            print('\\tAngle from 72st quadran"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    def count_integer2(list1):\n        '''\n        Write a python function that returns the number of integer elements in a given list.\n        '''\n        return len(list(list1))\n    return count_integer2\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if list1==None:\n        return None\n    else:\n        count=0\n        for i in list1:\n            if type(i)==int:\n                count+=1\n        return count\nlist1=[1,2,3,4,5]\nprint(count_integer(list1)"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    number_of_elements = 0\n    for i in list1:\n        if type(i) == int:\n            number_of_elements += 1\n    return number_of_elements\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count=count+1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return [tuple(l)]\n    else:\n        # print(type(l), type(n))\n        # print(l)\n        # print(n)\n        # print(type(combinations_with_replacement([1, 2, 3, 4, 5], 3)))\n        # print(type(combinations_with_replacement([1, 2, 3, 4, 5], 3)))\n        return combinations_colors([l[i] for i in range(len(l))], n - 1)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos_colors = []\n    for i in range(l):\n        for j in range(l):\n            combos_colors.append((i,j))\n    return combos_colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # TODO:  Hint:  Use combinations_with_replacement to generate all combinations of length n without repetition.\n    #          Convert combinations_with_replacement to a list so it's easier to understand.\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    comb = combinations_with_replacement(l, n)\n    return list(comb)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(0, n, 2):\n        combinations.append(combinations_with_replacement(l, i))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = combinations_with_replacement(l, n)\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    results = []\n    for i in range(1, l + 1):\n        new = combinations_with_replacement(l, i)\n        for x in new:\n            results.append(tuple(x))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l,n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    else:\n        comb_list = []\n        comb_list += combinations_colors(l, n-1)\n        comb_list += [tuple(x) for x in combinations(l, n)]\n        return comb_list\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(l):\n        comb = combinations_with_replacement([i]*n, n)\n        comb_list.append(tuple(comb))\n    return comb_list\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    l = 0\n    for i in range(1,n):\n        if is_prime(i):\n            l += 1\n    return l\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(n,0,-1):\n        if is_prime(num) == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    p = 0\n    count = 0\n    for p in range(n):\n        if isPrime(p) == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def count_primes(n):\n        if n==0:\n            return 0\n        else:\n            if n==1 or n==2:\n                return 1\n            else:\n                for i in range(n//2, n+1):\n                    if is_prime(i):\n                        print(i, end=' ')\n                        count_primes(i)\n    count_primes(n)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    count = 0\n    for i in range(3, n + 1, 2):\n        if (i % 2) == 0:\n            count = count + 1\n        if i == 2 or i % 3 == 0:\n            continue\n        if (i % 5) == 0:\n            continue\n        if (i % 10) == 0:\n            continue\n        count = count + count_Primes_nums(i)\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_num = 1\n    for i in range(2, n):\n        if is_prime(i):\n            prime_num += 1\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    total = 0\n    for i in range(2, n):\n        if is_prime(i):\n            total += 1\n    return total\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = 0\n    for i in range(1,n+1):\n        if (is_prime(i)):\n            prime_nums += 1\n    return prime_nums\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(i + 1, n + 1):\n            if i % j == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef reverse_string(s):\n    '''\n    Return the reverse string.\n    '''\n    return s[::-1]\n    \ndef remove_duplicates(s):\n    '''\n    Return a string with all the unique characters in the given string.\n    '''\n    # We only need to consider unique characters\n    res = set(s)\n    return \"\".join([i for i in s if i not in res])\n    \ndef group_evens(nums):\n    '''\n    Return a list of all the even numbers in the given list.\n    '''\n    # We need to consider the even numbers\n    res = []\n    for i in nums:\n        if i%2==0:\n            res.append(i)\n    return res\n    \ndef contains_duplicate(num):\n    '''\n    Return True if there is at least one number in the given list that appears more than once. Otherwise return False.\n    '''\n    # We need to consider the duplicates\n    res = set(num)\n    return len(res)>1\n    \ndef make_changes(s,n):\n    '''\n    Return a new string made of the characters in s having no duplicates except for the first n characters.\n    '''\n    # We need to consider the characters\n    res = []\n    for i in s:\n        if i not in res:\n            res.append(i)\n    return \"\".join(res[1:n])\n    \ndef smallest_multiple(n):\n    '''\n    Return the smallest multiple of n that is larger than or equal to the integer.\n    '''\n    # We need to consider the numbers\n    res = []\n    for i in range(1,n+1):\n        if n%i==0:\n            res.append(i)\n            \n    return min(res)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Hint - You can do this by writing a loop like this:\n    # i = 0\n    # while i < len(a):\n    #     j = i + 1\n    #     while j < len(b):\n    #         temp = a[i]\n    #         a[i] = b[j]\n    #         b[j] = temp\n    #         j += 1\n    #     i += 1\n    \n    return (b[0],a[0])\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Replace None with a return statement.\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    new_tuple = (b,a)\n    return new_tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a + b\n    b = a - b\n    return a, b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # your code goes here\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = sorted(test_tup1, key = lambda x : x[1])\n    test_tup2 = sorted(test_tup2, key = lambda x : x[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] > test_tup2[0]) or (test_tup1[1] > test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1), max(test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pas"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    if (l1 < l2):\n        tup = test_tup1\n    else:\n        tup = test_tup2\n    for i in range(l1):\n        tup[i] = max(tup[i], tup[i + 1])\n    return tup\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = tuple(sorted(test_tup1))\n    test_tup2 = tuple(sorted(test_tup2))\n    return test_tup1, test_tup2\n    \ndef main():\n    '''\n    Write a function to check if you can solve a linear system.\n    '''\n    print(__doc__)\n    \n    # Get the tuple\n    test_tup1 = (2, 4)\n    test_tup2 = (1, 3)\n    \n    # Get the tuples\n    test_tup1, test_tup2 = maximize_elements(test_tup1, test_tup2)\n    \n    # Print the result\n    print(f'[{test_tup1}] - {test_tup2}')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Write your code here\n    \n    if (n == 1):\n        return 1\n    if (n % 2 == 0):\n        return 0\n    for i in range(3, n+1, 2):\n        if (n % i == 0):\n            break\n    else:\n        return 0\n    temp = n\n    for j in range(3,n, 2):\n        if (n % j == 0):\n            break\n    else:\n        return 0\n    \n    for k in range(3,n//2):\n        if (n % k == 0):\n            break\n    else:\n        return 0\n    if (n % 3 == 0):\n        return 0\n    \n    for l in range(5, (n//3)*(n//3), 3):\n        if (n % l == 0):\n            break\n    else:\n        return 0\n    if (n % 3 == 0):\n        return 0\n    \n    for m in range(6, (n//4)*(n//4), 6):\n        if (n % m == 0):\n            break\n    else:\n        return 0\n    if (n % 7 == 0):\n        return 0\n    \n    return 1 + newman_prime(n//3) + newman_prime(n//2) + newman_prime(n//5) + newman_prime(n//7)\n    \n    \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = []\n    for i in range(2,n):\n        if n%i==0:\n            prime_list.append(i)\n    return prime_list[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2, n+1):\n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = 1\n    for k in range(2,n):\n        if (k*(k+1))%10==1:\n            prime+=1\n    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while i < n:\n        i = i * 3 + 1\n    return i\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2, n):\n        prime_num = i\n        for j in range(i):\n            if prime_num % j == 0 and prime_num / j!= i:\n                break\n            else:\n                prime_num += i\n                \n        else:\n            return i\n        return prime_num\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def checkPrime(n):\n        if n == 1: return True\n        if n == 2 or n == 3: return True\n        if n % 2 == 0 or n % 3 == 0: return False\n        i = 5\n        while i ** 2 <= n:\n            if n % i == 0 or n % (i + 2) == 0: return False\n            i += 6\n        return True\n    \n    for i in range(1, n+1):\n        if checkPrime(i):\n            result += [i]\n    return result\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_check = True\n    while prime_check == True:\n        prime_check = True\n        a = n * n\n        if a == 1:\n            return a\n        for i in range(2, a//2 + 1):\n            if (a%i == 0) and (a//i == i):\n                prime_check = False\n                break\n        if prime_check == True:\n            return a\n    \ndef main():\n    print(newman_prime(200))\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 0\n    prime = []\n    while (i <= n):\n        j = 2\n        while (j <= n/2):\n            if (n % j == 0):\n                break\n            j += 1\n        if (j > n/2):\n            i += 1\n            prime.append(j)\n            n = n/j\n        else:\n            n -= 1\n            prime.append(n)\n    return prime[len(prime) - 1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 893, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    if len(prime) < n: \n        prime = prime[:n]\n    primes = [2]\n    for i in prime: \n        if i % 3 == 0 and i % 5 == 0: \n            primes.append(i)\n    for i in primes: \n        if i == 3 or i == 5 or i == 7: \n            continue\n        for j in range(i * 2, n, i): \n            if j in prime: \n                continue\n            if j in primes: \n                return j\n    return None\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x/y for (x,y) in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = tuple(tup1 / tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    return result_tup\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1_divided = []\n    test_tup2_divided = []\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            test_tup2_divided.append(tup)\n    for tup in test_tup2:\n        if tup not in test_tup1:\n            test_tup1_divided.append(tup)\n    test_tup1_divided.sort()\n    test_tup2_divided.sort()\n    return (test_tup1_divided, test_tup2_divided)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append(test_tup1[i] / test_tup2[i])\n    return test_list\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    '''\n    A 1 element tuple is given as an argument.\n    A 2 element tuple is given as an argument.\n    A 3 element tuple is given as an argument.\n    A 4 element tuple is given as an argument.\n    A 5 element tuple is given as an argument.\n    A 6 element tuple is given as an argument.\n    A 7 element tuple is given as an argument.\n    A 8 element tuple is given as an argument.\n    A 9 element tuple is given as an argument.\n    A 10 element tuple is given as an argument.\n    A 11 element tuple is given as an argument.\n    A 12 element tuple is given as an argument.\n    A 13 element tuple is given as an argument.\n    A 14 element tuple is given as an argument.\n    A 15 element tuple is given as an argument.\n    A 16 element tuple is given as an argument.\n    A 17 element tuple is given as an argument.\n    A 18 element tuple is given as an argument.\n    A 19 element tuple is given as an argument.\n    A 20 element tuple is given as an argument.\n    A 21 element tuple is given as an argument.\n    A 22 element tuple is given as an argument.\n    A 23 element tuple is given as an argument.\n    A 24 element tuple is given as an argument.\n    A 25 element tuple is given as an argument.\n    A 26 element tuple is given as an argument.\n    A 27 element tuple is given as an argument.\n    A 28 element tuple is given as an argument.\n    A 29 element tuple is given as an argument.\n    A 30 element tuple is given as an argument.\n    A 31 element tuple is given as an argument.\n    A 32 element tuple is given as an argument.\n    A 33 element tuple is given as an argument.\n    A 34 element tuple is given as an argument.\n    A 35 element tuple is given as an argument.\n    A 36 element tuple is given as an argument.\n    A 37 element tuple is given as an argument.\n    A 38 element tuple is given as an argument.\n    A 39 element tuple is given as an argument.\n    A 40 element tuple is given as an argument.\n    A 41 element tuple is given as an argument.\n    A 42 element tuple is given as an argument.\n    A 43 element tuple is given as an argument.\n    A 44 element tuple is given as an argument.\n    A 45 element tuple is given as an argument.\n    A 46 element tuple is given as an argument.\n    A 47 element tuple is given as an argument.\n    A 48 element tuple is given as an argument.\n    A 49 element tuple is given as an argument.\n    A 50 element tuple is given as an argument.\n    A 51 element tuple is given as an argument.\n    A 52 element tuple is given as an argument.\n    A 53 element tuple is given as an argument.\n    A 54 element tuple is given as an argument.\n    A 55 element tuple is given as an argument.\n    A 56 element tuple is given as an argument.\n    A 57 element tuple is given as an argument.\n    A 58 element tuple is given as an argument.\n    A 59 element tuple is given as an argument.\n    A 60 element tuple is given as an argument.\n    A 61 element tuple is given as an argument.\n    A 62 element tuple is given as an argument.\n    A 63 element tuple is given as an argument.\n    A 64 element tuple is given as an argument.\n    A 65 element tuple is given as an argument.\n    A 66 element tuple is given as an argument.\n    A 67 element tuple is given as an argument.\n    A 68 element tuple is given as an argument.\n    A 69 element tuple is given as an argument.\n    A 70 element tuple is given as an argument.\n    A 71 element tuple is given as an argument.\n    A 72 element tuple is given as an argument.\n    A 73 element tuple is given as an argument.\n    A 74 element tuple is given as an argument.\n    A 75 element tuple is given as an argument.\n    A 76 element tuple is given as an argument.\n    A 77 element tuple is given as an argument.\n    A 78 element tuple is given as an argument.\n    A 79 element tuple is given as an argument.\n    A 80 element tuple is given as an argument.\n    A 81 element tuple is given as an argument.\n    A 82 element tuple is given as an argument.\n    A 83 element tuple is given as an argument.\n    A 84 element tuple is given as an argument.\n    A 85 element tuple is given as an argument.\n    A 86 element tuple is given as an argument.\n    A 87 element tuple is given as an argument.\n    A 88 element tuple is given as an argument.\n    A 89 element tuple is given as an argument.\n    A 90 element tuple is given as an argument.\n    A 91 element tuple is given as an argument.\n    A 92 element tuple is given as an argument.\n    A 93 element tuple is given as an argument.\n    A 94 element tuple is given as an argument.\n    A 95 element tuple is given as an argument.\n    A 96 element tuple is given as an argument.\n    A 97 element tuple is given as an argument.\n    A 98 element tuple is given as an argument.\n    A 99 element tuple is given as an argument.\n    A 100 element tuple is given as an argument.\n    A 101 element tuple is given as an argument.\n    A 102 element tuple is given as an argument.\n    A 103 element tuple is given as an argument.\n    A 104 element tuple is given as an argument.\n    A 105 element tuple is given as an argument.\n    A 106 element tuple is given as an argument.\n    A 107 element tuple is given as an argument.\n    A 108 element tuple is given as an argument.\n    A 109 element tuple is given as an argument.\n    A 110 element tuple is given as an argument.\n    A 111 element tuple is given as an argument.\n    A 112 element tuple is given as an argument.\n    A 113 element tuple is given as an argument.\n    A 114 element tuple is given as an argument.\n    A 115 element tuple is given as an argument.\n    A 116 element tuple is given as an argument.\n    A 117 element tuple is given as an argument.\n    A 118 element tuple is given as an argument.\n    A 119 element tuple is given as an argument.\n    A 120 element tuple is given as an argument.\n    A 121 element tuple is given as an argument.\n    A 122 element tuple is given as an argument.\n    A 123 element tuple is given as an argument.\n    A 124 element tuple is given as an argument.\n    A 125 element tuple is given as an argument.\n    A 126 element tuple is given as an argument.\n    A 127 element tuple is given as an argument.\n    A 128 element tuple is given as an argument.\n    A 129 element tuple is given as an argument.\n    A 130 element tuple is given as an argument.\n    A 131 element tuple is given as an argument.\n    A 132 element tuple is given as an argument.\n    A 133 element tuple is given as an argument.\n    A 134 element tuple is given as an argument.\n    A 135 element tuple is given as an argument.\n    A 136 element tuple is given as an argument.\n    A 137 element tuple is given as an argument.\n    A 138 element tuple is given as an argument.\n    A 139 element tuple is given as an argument.\n    A 140 element tuple is given as an argument.\n    A 141 element tuple is given as an argument.\n    A 142 element tuple is given as an argument.\n    A 143 element tuple is given as an argument.\n    A 144 element tuple is given as an argument.\n    A 145 element tuple is given as an argument.\n    A 146 element tuple is given as an argument.\n    A 147 element tuple is given as an argument.\n    A 148 element tuple is given as an argument.\n    A 149 element tuple is given as an argument.\n    A 150 element tuple is given as an argument.\n    A 151 element tuple is given as an argument.\n    A 152 element tuple is given as an argument.\n    A 153 element tuple is given as an argument.\n    A 154 element tuple is given as an argument.\n    A 155 element tuple is given as an argument.\n    A 156 element tuple is given as an argument.\n    A 157 element tuple is given as an argument.\n    A 158 element tuple is given as an argument.\n    A 159 element tuple is given as an argument.\n    A 160 element tuple is given as an argument.\n    A 161 element tuple is given as an argument.\n    A 162 element tuple is given as an argument.\n    A 163 element tuple is given as an argument.\n    A 164 element tuple is given as an argument.\n    A 165 element tuple is given as an argument.\n    A 166 element tuple is given as an argumen"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = test_tup1[0] / test_tup2[0]\n    print(f\"The result is: {result}\")\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = [tuple_to_list(x) for x in test_tup1]\n    test_tup2 = [tuple_to_list(x) for x in test_tup2]\n    output = []\n    for x in range(0, len(test_tup1)):\n        output.append(math.divide(test_tup1[x], test_tup2[x]))\n    return output\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    t1_dividing = [el for el in test_tup1 if el!= 'x']\n    t2_dividing = [el for el in test_tup2 if el!= 'x']\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple size not equal to tuple size.')\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup_1, test_tup_2 = test_tup1, test_tup2\n    result = list(map(lambda x: (x[0] / x[1]), zip(test_tup_1, test_tup_2)))\n    return result\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    return (list1[:L],list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return tuple([list1[i:i+L] for i in range(0, len(list1), L)])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    x = list(map(int, list1))\n    return (x[:L], x[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return ()\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Write your code here\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    num1 = 0\n    num2 = 0\n    count = 0\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result = []\n    if L > 0:\n        result.append(list1[:L])\n        result.append(list1[L:])\n        return result\n    else:\n        return [list1]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result = list1[0:L]\n    return result, list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    list1.sort()\n    split1 = len(list1)//2\n    split2 = len(list1)//2 - split1\n    return list1[split1:split2], list1[:split1], list1[split2:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import math\n    import csv\n    with open('text_files/height_weight.csv',newline='',encoding=\"utf-8\") as f:\n        reader = csv.reader(f)\n        file_data = list(reader)\n    file_data.pop(0) # remove the header row\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = 1\n    if h_age <=1:\n        dogs_years = 0\n    if h_age <=3:\n        dogs_years = 5\n    if h_age <=6:\n        dogs_years = 10\n    if h_age <=8:\n        dogs_years = 15\n    if h_age <=10:\n        dogs_years = 20\n    if h_age <=12:\n        dogs_years = 25\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 1:\n        return 0\n    if h_age > 2:\n        return h_age - 2\n    else:\n        return h_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_list = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    def dog_age(h_age):\n        if h_age <= 5:\n            return h_age\n        elif h_age <= 18:\n            return h_age*5\n        elif h_age <= 35:\n            return h_age*7\n        else:\n            return h_age*8\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 1:\n        return \"Error: h_age should be greater than 0\"\n    elif h_age <= 10:\n        return f\"{h_age} year old\"\n    elif h_age <= 50:\n        return f\"{h_age} years old\"\n    elif h_age <= 70:\n        return f\"{h_age} years old\"\n    elif h_age <= 90:\n        return f\"{h_age} years old\"\n    else:\n        return f\"{h_age} years old\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return(0)\n    elif h_age <= 4:\n        return(2)\n    elif h_age <= 6:\n        return(3)\n    elif h_age <= 8:\n        return(4)\n    else:\n        return(5)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age/7\n    if(dog_years>2):\n        print(f\"{dog_years} dog years are over the age of 2\")\n    else:\n        print(f\"{dog_years} dog years are over the age of 1\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    def age_in_dogs(y):\n        \"\"\"\n        >>> age_in_dogs(10)\n        10\n        \"\"\"\n        return y * 365\n    def age_in_cats(y):\n        \"\"\"\n        >>> age_in_cats(10)\n        20\n        \"\"\"\n        return y * 150\n    def age_in_tigers(y):\n        \"\"\"\n        >>> age_in_tigers(10)\n        30\n        \"\"\"\n        return y * 70\n    return dog_age(h_age) + age_in_dogs(h_age) + age_in_cats(h_age) + age_in_tigers(h_age)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    i = 1\n    return [list(S[i:i+step]) for i in range(0, len(S), step)]\n    \ndef main():\n    '''\n    This program is part of the solution to problem 64.\n    '''\n    S = 'abcd'\n    step = 3\n    print(list_split(S, step))\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split(S, l):\n        for i in range(len(l)):\n            if i % step == 0:\n                yield l\n            l.append(S[i])\n    return split(S, range(0, len(S), step))\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    splits = [S[i:i+step] for i in range(0, len(S), step)]\n    return splits\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return [S[x:x + step] for x in range(0, len(S), step)]\n    else:\n        return [S[x:x + step] for x in range(0, len(S), step)] + [S[x + step:x + step * 2] for x in range(0, len(S), step)] + [S[x + step * 2:x + step * 3] for x in range(0, len(S), step)] + [S[x + step * 3:x + step * 4] for x in range(0, len(S), step)] + [S[x + step * 4:x + step * 5] for x in range(0, len(S), step)] + [S[x + step * 5:x + step * 6] for x in range(0, len(S), step)] + [S[x + step * 6:x + step * 7] for x in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: Write a function that takes a list and an integer n and returns a list of lists.\n    #       For example: [[1], [2], [3], [4], [5]]\n    #       Should return [[1], [2], [3], [4], [5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n=len(S)\n    if n<step+1:\n        return []\n    numbers=[None]*n\n    for i in range(n):\n        numbers[i]=i\n    return numbers\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l) # convert to float to allow it to work with Python 2\n    import math\n    import numpy as np\n    from PIL import Image\n    # import sys\n    # sys.path.append('/Users/zack/Python_projects')\n    import plotting\n    # sys.path.append(r'/Users/zack/Library/Developer/Command-line-Arguments')\n    from PIL import Image\n    #sys.path.append('/Users/zack/Library/Developer/Command-line-Arguments/python_packages')\n    # sys.path.append('/Users/zack/Library/Developer/Command-line-Arguments/Library/Python/Python3.8/site-packages')\n    from math import pi\n    # Import the cube image\n    from cube import cube\n    from numpy import asarray\n    from numpy import zeros\n    from numpy import ones\n    from numpy import sqrt\n    from numpy import pi\n    # import numpy as np\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = 0\n    for i in l:\n        surface += 4 * i\n    return surface\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #Surface area of a cube is the area of the surface obtained by using the\n    # equation of a cuboid:\n    #\n    #S = 2C x y z\n    #\n    #The values are expressed as:\n    #\n    #S = 2C x y z -2\n    #\n    #where, C is the center of the cuboid, x is the coordinate along the x axis,\n    #y is the coordinate along the y axis, and z is the coordinate along the\n    #z axis.\n    #\n    #\n    #This method is simply a little confusing because it is computing the surface\n    #area and not simply the volume of the cuboid.\n    #\n    #\n    #\n    #\n    #In general, this method returns None if the cube is empty.\n    #\n    #This happens when the cubic is at a height of 0 or the cube is one of\n    #multiple cubes, or when the cube is completely made of many surfaces.\n    #\n    #\n    #\n    #You are given:\n    #\n    #l - an integer\n    #\n    #Return the surface area of the cube, as described above.\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #Examples:\n    #\n    #\n    #Input: l = 4\n    #Output: 12\n    #Explanation: The cuboid at the location (1, 1, 1) has surface area = 4\n    #\n    #\n    #Input: l = 2\n    #Output: 0\n    #Explanation: The cube at the location (0, 0, 0) has surface area = 0\n    #\n    #\n    #\n    #Input: l = 4\n    #Output: 12\n    #Explanation: The cuboid at the location (0, 0, 0) has surface area = 4\n    #\n    #\n    #Input: l = 2\n    #Output: 0\n    #Explanation: The cube at the location (0, 0, 0) has surface area = 0\n    #\n    #\n    #\n    #Input: l = 6\n    #Output: 36\n    #Explanation: The cuboid at the location (0, 0, 0) has surface area = 12\n    #\n    #\n    #\n    #Input: l = 5\n    #Output: 16\n    #Explanation: The cuboid at the location (0, 0, 0) has surface area = 6\n    #\n    #\n    #Input: l = 4\n    #Output: 24\n    #Explanation: The cuboid at the location (0, 0, 0) has surface area = 4\n    #\n    #\n    #\n    #Input: l = 1\n    #Output: 1\n    #Explanation: The cube at the location (0, 0, 0) has surface area = 0\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    # TO DO\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 0.6*l**3\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*2*(l+l+l+l+l+l+l+l+l)**0.5\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = l**0.5 #in cm\n    l = l*0.01 #in m\n    l = l*2.54 #in m\n    l = l*0.5 #in m\n    l = l*0.38 #in m\n    l = l*0.5 #in m\n    l = l*0.6 #in m\n    l = l*0.8 #in m\n    l = l*0.89 #in m\n    l = l*0.9 #in m\n    l = l*0.98 #in m\n    l = l*1.1 #in m\n    l = l*1.2 #in m\n    l = l*1.39 #in m\n    l = l*1.5 #in m\n    l = l*1.6 #in m\n    l = l*1.8 #in m\n    l = l*1.9 #in m\n    l = l*2.08 #in m\n    l = l*2.0 #in m\n    l = l*2.15 #in m\n    l = l*2.24 #in m\n    l = l*2.36 #in m\n    l = l*2.48 #in m\n    l = l*2.65 #in m\n    l = l*2.8 #in m\n    l = l*2.96 #in m\n    l = l*3.14 #in m\n    l = l*3.2 #in m\n    l = l*3.38 #in m\n    l = l*3.54 #in m\n    l = l*3.68 #in m\n    l = l*3.84 #in m\n    l = l*3.98 #in m\n    l = l*4.1 #in m\n    l = l*4.3 #in m\n    l = l*4.6 #in m\n    l = l*4.8 #in m\n    l = l*5.1 #in m\n    l = l*5.2 #in m\n    l = l*5.4 #in m\n    l = l*5.6 #in m\n    l = l*5.8 #in m\n    l = l*6.1 #in m\n    l = l*6.3 #in m\n    l = l*6.6 #in m\n    l = l*6.8 #in m\n    l = l*7.1 #in m\n    l = l*7.2 #in m\n    l = l*7.4 #in m\n    l = l*7.6 #in m\n    l = l*7.8 #in m\n    l = l*8.1 #in m\n    l = l*8.2 #in m\n    l = l*8.3 #in m\n    l = l*8.5 #in m\n    l = l*8.7 #in m\n    l = l*8.9 #in m\n    l = l*9.1 #in m\n    l = l*9.3 #in m\n    l = l*9.4 #in m\n    l = l*9.6 #in m\n    l = l*9.8 #in m\n    l = l*10.1 #in m\n    l = l*10.2 #in m\n    l = l*10.4 #in m\n    l = l*10.6 #in m\n    l = l*10.8 #in m\n    l = l*11.1 #in m\n    l = l*11.3 #in m\n    l = l*11.4 #in m\n    l = l*11.6 #in m\n    l = l*11.8 #in m\n    l = l*12.1 #in m\n    l = l*12.3 #in m\n    l = l*12.4 #in m\n    l = l*12.6 #in m\n    l = l*12.8 #in m\n    l = l*13.1 #in m\n    l = l*13.3 #in m\n    l = l*13.4 #in m\n    l = l*13.6 #in m\n    l = l*13.8 #in m\n    l = l*14.1 #in m\n    l = l*14.3 #in m\n    l = l*14.4 #in m\n    l = l*14.6 #in m\n    l = l*14.8 #in m\n    l = l*15.1 #in m\n    l = l*15.3 #in m\n    l = l*15.4 #in m\n    l = l*15.6 #in m\n    l = l*15.8 #in m\n    l = l*16.1 #in m\n    l = l*16.3 #in m\n    l = l*16.4 #in m\n    l = l*16.6 #in m\n    l = l*16.8 #in m\n    l = l*17.1 #in m\n    l = l*17.3 #in m\n    l = l*17.4 #in m\n    l = l*17.6 #in m\n    l = l*17.8 #in m\n    l = l*18.1 #in m\n    l = l*18.3 #in m\n    l = l*18.4 #in m\n    l = l*18.6 #in m\n    l = l*18.8 #in m\n    l = l*19.1 #in m\n    l = l*19.3 #in m\n    l = l*19.4 #in m\n    l = l*19.6 #in m\n    l = l*19.8 #in m\n    l = l*20.1 #in m\n    l = l*20.3 #in m\n    l = l*20.4 #in m\n    l = l*20.6 #in m\n    l = l*20.8 #in m\n    l = l*21.1 #in m\n    l = l*21.3 #in m\n    l = l*21.4 #in m\n    l = l*21.6 #in m\n    l = l*21.8 #in m\n    l = l*22.1 #in m\n    l = l*22.3 #in m\n    l = l*22.4 #in m\n    l = l*22.6 #in m\n    l = l*22.8 #in m\n    l = l*23.1 #in m\n    l = l*23.3 #in m\n    l = l*23.4 #in m\n    l = l*23.6 #in m\n    l = l*23.8 #in m\n    l = l*24.1 #in m\n    l = l*24.3 #in m\n    l = l*24.4 #in m\n    l = l*24.6 #in m\n    l = l*24.8 #in m\n    l = l*25.1 #in m\n    l = l*25.3 #in m\n    l = l*25.4 #in m\n    l = l*25.6 #in m\n    l = l*25.8 #in m\n    l = l*26.1 #in m\n    l = l*26.3 #in m\n    l = l*26.4 #in m\n    l = l*26.6 #in m\n    l = l*26.8 #in m\n    l = l*27.1 #in m\n    l = l*27.3 #in m\n    l = l*27.4 #in m\n    l = l*27.6 #in m\n    l = l*27.8 #in m\n    l = l*28.1 #in m\n    l = l*28.3 #in m\n    l = l*28.4 #in m\n    l = l*28.6 #in m\n    l = l*28.8 #in m\n    l = l*29.1 #in m\n    l = l*29.3 #in m\n    l = l*29.4 #in m\n    l = l*29.6 #in m\n    l = l*29.8 #in m\n    l = l*30.1 #in m\n    l = l*30.3 #in m\n    l = l*30.4 #in m\n    l = l*30.6 #in m\n    l = l*3"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*(l+1)\n    "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #1: create a base\n    #2: calculate the area\n    #3: create a new array to save the index value\n    #4: create a for loop to get the i and j value\n    #5: add 1 to the area value\n    #6: create a for loop to get the square value\n    #7: add 1 to the square value\n    #8: add 1 to the area value\n    #9: create a for loop to get the i and j value\n    #10: add 1 to the i and j value\n    #11: add 1 to the square value\n    #12: create a for loop to get the area value\n    #13: add 1 to the area value\n    #14: create a for loop to get the i and j value\n    #15: add 1 to the i and j value\n    #16: create a for loop to get the square value\n    #17: add 1 to the square value\n    #18: add 1 to the area value\n    #19: create a for loop to get the i and j value\n    #20: add 1 to the i and j value\n    #21: add 1 to the square value\n    #22: create a for loop to get the area value\n    #23: add 1 to the area value\n    #24: create a for loop to get the i and j value\n    #25: add 1 to the i and j value\n    #26: create a for loop to get the square value\n    #27: add 1 to the square value\n    #28: create a for loop to get the area value\n    #29: add 1 to the area value\n    #30: create a for loop to get the i and j value\n    #31: add 1 to the i and j value\n    #32: create a for loop to get the square value\n    #33: add 1 to the square value\n    #34: create a for loop to get the area value\n    #35: add 1 to the area value\n    #36: create a for loop to get the i and j value\n    #37: add 1 to the i and j value\n    #38: create a for loop to get the square value\n    #39: add 1 to the square value\n    #40: create a for loop to get the area value\n    #41: add 1 to the area value\n    #42: create a for loop to get the i and j value\n    #43: add 1 to the i and j value\n    #44: create a for loop to get the square value\n    #45: add 1 to the square value\n    #46: create a for loop to get the area value\n    #47: add 1 to the area value\n    #48: create a for loop to get the i and j value\n    #49: add 1 to the i and j value\n    #50: create a for loop to get the square value\n    #51: add 1 to the square value\n    #52: create a for loop to get the area value\n    #53: add 1 to the area value\n    #54: create a for loop to get the i and j value\n    #55: add 1 to the i and j value\n    #56: create a for loop to get the square value\n    #57: add 1 to the square value\n    #58: create a for loop to get the area value\n    #59: add 1 to the area value\n    #60: create a for loop to get the i and j value\n    #61: add 1 to the i and j value\n    #62: create a for loop to get the square value\n    #63: add 1 to the square value\n    #64: create a for loop to get the area value\n    #65: add 1 to the area value\n    #66: create a for loop to get the i and j value\n    #67: add 1 to the i and j value\n    #68: create a for loop to get the square value\n    #69: add 1 to the square value\n    #70: create a for loop to get the area value\n    #71: add 1 to the area value\n    #72: create a for loop to get the i and j value\n    #73: add 1 to the i and j value\n    #74: create a for loop to get the square value\n    #75: add 1 to the square value\n    #76: create a for loop to get the area value\n    #77: add 1 to the area value\n    #78: create a for loop to get the i and j value\n    #79: add 1 to the i and j value\n    #80: create a for loop to get the square value\n    #81: add 1 to the square value\n    #82: create a for loop to get the area value\n    #83: add 1 to the area value\n    #84: create a for loop to get the i and j value\n    #85: add 1 to the i and j value\n    #86: create a for loop to get the square value\n    #87: add 1 to the square value\n    #88: create a for loop to get the area value\n    #89: add 1 to the area value\n    #90: create a for loop to get the i and j value\n    #91: add 1 to the i and j value\n    #92: create a for loop to get the square value\n    #93: add 1 to the square value\n    #94: create a for loop to get the area value\n    #95: add 1 to the area value\n    #96: create a for loop to get the i and j value\n    #97: add 1 to the i and j value\n    #98: create a for loop to get the square value\n    #99: add 1 to the square value\n    #100: create a for loop to get the area value\n    #101: add 1 to the area value\n    #102: create a for loop to get the i and j value\n    #103: add 1 to the i and j value\n    #104: create a for loop to get the square value\n    #105: add 1 to the square value\n    #106: create a for loop to get the area value\n    #107: add 1 to the area value\n    #108: create a for loop to get the i and j value\n    #109: add 1 to the i and j value\n    #110: create a for loop to get the square value\n    #111: add 1 to the square value\n    #112: create a for loop to get the area value\n    #113: add 1 to the area value\n    #114: create a for loop to get the i and j value\n    #115: add 1 to the i and j value\n    #116: create a for loop to get the square value\n    #117: add 1 to the square value\n    #118: create a for loop to get the area value\n    #119: add 1 to the area value\n    #120: create a for loop to get the i and j value\n    #121: add 1 to the i and j value\n    #122: create a for loop to get the square value\n    #123: add 1 to the square value\n    #124: create a for loop to get the area value\n    #125: add 1 to the area value\n    #126: create a for loop to get the i and j value\n    #127: add 1 to the i and j value\n    #128: create a for loop to get the square value\n    #129: add 1 to the square value\n    #130: create a for loop to get the area value\n    #131: add 1 to the area value\n    #132: create a for loop to get the i and j value\n    #133: add 1 to the i and j value\n    #134: create a for loop to get the square value\n    #135: add 1 to the square value\n    #136: create a for loop to get the area value\n    #137: add 1 to the area value\n    #138: create a for loop to get the i and j value\n    #139: add 1 to the i and j value\n    #140: create a for loop to get the square value\n    #141: add 1 to the square value\n    #142: create a for loop to get the area value\n    #143: add 1 to the area value\n    #144: create a for loop to get the i and j value\n    #145: add 1 to the i and j value\n    #146: create a for loop to get the square value\n    #147: add 1 to the square value\n    #148: create a for loop to get the area value\n    #149: add 1 to the area value\n    #150: create a for loop to get the i and j value\n    #151: add 1 to the i and j value\n    #152: create a for loop to get the square value\n    #153: add 1 to the square value\n    #154: create a for loop t"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code goes here\n    return 0\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n > 0:\n        return n*n\n    else:\n        return 0\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0 \n    for i in range(1, n+1):\n        result += i*i\n        #print(result)\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*square_Sum(n-1)\n    \n    "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def sommation(n):\n        return n*(n+1)//2\n    if n < 0:\n        return 'No sum'\n    else:\n        return sommation(n)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n<2:\n        return n\n    else:\n        sum=0\n        for i in range(n):\n            sum+=square_Sum(i*i)\n        return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    square_sum = 0\n    for i in range(1,n+1):\n        square_sum += i**2\n    return square_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0 \n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    print(\"Sum of squares: \")\n    s = 0\n    for i in range(1,n+1):\n        s = s + i\n        print(s)\n    return s\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # find the first n numbers\n    if n == 1: \n        return 1\n    # find the first n numbers in a list \n    for i in range(n): \n        # check if n+i is even number or not \n        if n % 2 == 0: \n            # if yes return n+i \n            return n + i \n        # if not return 1 \n        else: \n            # return 1 \n            return 1 \n    # if not return n+i \n    return n + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            return i\n        i = i + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = n+1\n    if n == 1:\n        return n\n    else:\n        return find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    nums = list(range(1, n + 1))\n    num_star = list(reversed(nums))\n    nums.remove(num_star[0])\n    star = num_star[-1] + 1\n    return star\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    while n >= star_num: \n        n = n - star_num\n        star_num = star_num * 10\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 5\n    elif n == 5: \n        return 6\n    elif n == 6: \n        return 7\n    elif n == 7: \n        return 8\n    elif n == 8: \n        return 9\n    elif n == 9: \n        return 10\n    else: \n        return 11\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    if n % 3 == 0:\n        return find_star_num(n // 3) + 2 * find_star_num(n // 3)\n    else:\n        return find_star_num(n - 1) + 2\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n > 2 and n <= 10:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if (n==1 or n==2): \n        return 1 \n    elif (n%2==0): \n        return find_star_num(3*n+2) \n    else: \n        return find_star_num(n//2) "
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return chr(k)\n    except ValueError:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        k = int(k)\n    except:\n        k = ord(k)\n    \n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert into string\n    if type(k) == int:\n        k = str(k)\n    # If it's a string, try to convert it to ascii\n    try:\n        return chr(ord(k) - 65)\n    except:\n        return '?'\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower()\n    if k in \"abcdefghijklmnopqrstuvwxyz\":\n        return ord(k)\n    else:\n        raise ValueError(\"char value not in ascii_value set\")\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord('a') + ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k > 0x20 and k < 0x7F:\n        return k\n    else:\n        return -1\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if (k == \" \" or k == \"\\n\"):\n        return \"\\n\"\n    if (k < 32):\n        return k\n    return chr(k - 32)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    index = 0\n    while index < len(arr):\n        if arr[index] % 2 == 0:\n            even_sum += arr[index]\n        index += 1\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2) == 0:\n            s = s + arr[i]\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_num_sum = 0\n    #\n    # Your code here\n    #\n    for i in range(0, len(arr)):\n        if(arr[i] % 2 == 0):\n            even_num_sum = even_num_sum + arr[i]\n    return even_num_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            even_sum += arr[index]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    \n    for i in range(len(arr)):\n        if i%2==0:\n            sum +=arr[i]\n    \n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum( [i for i in arr if i%2==0] )\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_num_list = []\n    for i in arr:\n        if i % 2 == 0:\n            even_num_list.append(i)\n    \n    return sum(even_num_list)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    print(sum)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    if n < 0:\n        return(Exception(\"Please enter a positive integer\"))\n    if n == 0:\n        return(0)\n    for x in range(1, n+1):\n        if(x % 2 == 0):\n            result += x\n        else:\n            result = result * x\n    return(result)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for x in range(1,n+1):\n        sum = sum + x*x\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n, 0, -5):\n        sum = sum + (i ** 5)\n    print(sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    list = [None] * n\n    for i in range(n):\n        list[i] = i ** 2\n    print(list)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result = result + i ** 5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return n * n * n * n\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return -1\n    else: \n        return n * sum(range(2, n+1))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    num=1\n    sum=0\n    while num<=n:\n        num=num+1\n        sum=sum+num**5\n    return sum\nprint(even_Power_Sum(5)"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i**3\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    front_extracted_list = []\n    for i in test_list:\n        front_extracted_list.append(i[1])\n    return front_extracted_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in test_list:\n        return_list.append(i[1])\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n    \n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    front_list = []\n    for i in test_list:\n        front_list.append(i[0])\n    return front_list\n    \n    \ndef reverse_list(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    reversed_list = []\n    for i in test_list:\n        reversed_list.append(i[0])\n    return reversed_list\n    \n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        if i not in result:\n            result.append(i)\n    return result\n    \n    \ndef find_max(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the maximum element in the list.\n    '''\n    max_ele = test_list[0]\n    for i in test_list:\n        if i > max_ele:\n            max_ele = i\n    return max_ele\n    \n    \ndef reverse_list_recursive(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    result = []\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return reverse_list_recursive(test_list[1:]) + [test_list[0]]\n    \n    \ndef is_palindrome(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    test_list = test_list[::-1]\n    if test_list == sorted(test_list):\n        return True\n    return False\n    \n    \ndef is_triangle(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return False\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return is_triangle(test_list[1:]) + [test_list[0]] + is_triangle(test_list[1:])\n    \n    \ndef is_triangle_recursive(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return is_triangle_recursive(test_list[1:]) + is_triangle_recursive(test_list[1:])\n    \n    \ndef is_triangle_recursive_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return is_triangle_recursive_2(test_list[1:]) + is_triangle_recursive_2(test_list[1:])\n    \n    \ndef is_pentagonal(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        if test_list[0] + test_list[-1] > test_list[-1]:\n            return is_pentagonal(test_list[1:])\n        return is_pentagonal(test_list[1:]) + [test_list[-1]]\n    \n    \ndef is_pentagonal_recursive(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        if test_list[0] + test_list[-1] > test_list[-1]:\n            return is_pentagonal_recursive(test_list[1:])\n        return is_pentagonal_recursive(test_list[1:]) + [test_list[0]]\n    \n    \ndef is_pentagonal_recursive_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return is_pentagonal_recursive_2(test_list[1:]) + is_pentagonal_recursive_2(test_list[1:])\n    \n    \ndef is_hexagonal(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return [test_list[0]] + is_hexagonal(test_list[1:])\n    \n    \ndef is_hexagonal_recursive(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return [test_list[0]] + is_hexagonal_recursive(test_list[1:])\n    \n    \ndef is_hexagonal_recursive_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return is_hexagonal_recursive_2(test_list[1:]) + is_hexagonal_recursive_2(test_list[1:])\n    \n    \ndef is_pentagonal_recursive_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return [test_list[0]] + is_pentagonal_recursive_2(test_list[1:]) + is_pentagonal_recursive_2(test_list[1:])\n    \n    \ndef is_pentagonal_recursive_3(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return is_pentagonal_recursive_2(test_list[1:]) + is_pentagonal_recursive_2(test_list[1:]) + is_pentagonal_recursive_2(test_list["
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    r_list = []\n    for entry in test_list:\n        r_list.append(entry[1])\n    return r_list\n    \ndef rear_extract_all(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    r_list = []\n    for entry in test_list:\n        r_list.append(entry[1])\n    return r_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for index in range(len(test_list)):\n        temp = test_list[index][1]\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for item in test_list:\n        rear.append(item[0])\n    return rear\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # YOUR CODE HERE\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n    "
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code goes here\n    print(test_tup1, test_tup2)\n    # Check the size of the tuple\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same size!\"\n    # For each element in the tuples, subtract it by it's previous element\n    for elem in test_tup1:\n        test_tup2.remove(elem)\n        test_tup2.insert(0,elem)\n    return test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    #TODO: TEST CODE HERE\n    return [a-b for a,b in zip(test_tup1,test_tup2)]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #TODO: complete the function and write it\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            test_tup1[i] = test_tup1[i]-test_tup2[i]\n        else:\n            test_tup1[i] = 0\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = list(test_tup1)\n    for index, value in enumerate(test_tup2):\n        result[index] -= value\n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    test_tup1_stripped = []\n    test_tup2_stripped = []\n    for i in range(len(test_tup1)):\n        test_tup1_stripped.append(test_tup1[i])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for elem in test_tup1:\n        result.append(elem-test_tup2[test_tup2.index(elem)])\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff_sum += math.comb(i, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 1\n    for i in range(1,n+1):\n        result += math.factorial(i) // math.factorial(i-1)\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Get the correct answer\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n    else: \n        return 2 * even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n        \ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    # Get the correct answer\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return odd_binomial_Coeff_Sum(n-1) + odd_binomial_Coeff_Sum(n-2)\n    else: \n        return 3 * odd_binomial_Coeff_Sum(n-1) + odd_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n == 0): \n        return 1\n    elif(n % 2 == 1):\n        return even_binomial_Coeff_Sum(n // 2)\n    else: \n        return even_binomial_Coeff_Sum(n // 2) + even_binomial_Coeff_Sum(n//2) \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(n):\n        result += binomial(n,i+1)\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n % 2 == 0: \n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n    else: \n        return even_binomial_Coeff_Sum(n - 2) + even_binomial_Coeff_Sum(n - 3)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=even_binomial_Coeff_Sum(i)\n    return sum\ndef even_binomial_Coeff_Sum_2(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=even_binomial_Coeff_Sum(i)\n    return sum\ndef double_even_binomial_coeff(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef double_even_binomial_coeff_2(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_3(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_4(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_5(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_6(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_7(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_8(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef double_even_binomial_coeff_2(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef double_even_binomial_coeff_3(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_9(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_10(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_11(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef even_binomial_Coeff_Sum_12(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef double_even_binomial_coeff_3(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef double_even_binomial_coeff_4(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef double_even_binomial_coeff_5(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef double_even_binomial_coeff_6(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):\n        sum+=2*even_binomial_Coeff(i)\n    return sum\ndef double_even_binomial_coeff_7(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 1\n    for i in range(1,n+1):"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    odd_binomial = n - 2*n - 2\n    # print odd_binomial\n    # print(odd_binomial)\n    sum = (odd_binomial/math.factorial(n))*(odd_binomial/math.factorial(n-2))*(odd_binomial/math.factorial(n-4))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0: \n        return -1\n    elif n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n / 2)\n    else: \n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n / 2) + 1\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    print('Volume of a cylinder with radius'+ str(r) +'and height'+ str(h) +'is:'+ str(volume(r,h)))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4 * (pi * r**3))\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3*h**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    c=r*h\n    return c\n    "
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r*r*h)/6\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # your code here\n    \n    return 1/3*(3*r**2-3*h**2)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    r = float(r)\n    h = float(h)\n    vol = 3.14 * (r ** 2) * h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**2*h**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    v = (4/3)*math.pi*r*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=4*3.14*r*h\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n    "
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    lst = list(dict.items())\n    for i in range(0,n):\n        if dict[i] >= n:\n            lst.remove(dict[i])\n            lst.append(dict[i])\n    return lst\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict.keys():\n        if dict[key] >= n:\n            dict[key] = True\n        else:\n            dict[key] = False\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = dict.copy()\n    for key, value in d.items():\n        if value > n:\n            d[key] = value\n    return d\n    "
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = dict.copy()\n    for key in dict:\n        if dict[key] > n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Create a list for the filtered values\n    filter_list = []\n    for key, value in dict.items():\n        if value >= n:\n            filter_list.append(key)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if not isinstance(dict,dict):\n        raise TypeError(\"The function should be called with a dictionary\")\n    filtered_dict = dict.copy()\n    for k,v in dict.items():\n        if v >= n:\n            filtered_dict.pop(k)\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {i:j for i,j in dict.items() if j>=n}\n    \ndef select_menu(options):\n    '''\n    Write a function that uses a list to choose between functions.\n    '''\n    func_options=[\"add\",\"search\",\"list\",\"edit\",\"delete\",\"check\",\"move\",\"status\",\"more\",\"status-more\",\"rename\"]\n    while True:\n        for i in options:\n            print(i)\n        option=input(\"What would you like to do? \")\n        if option in func_options:\n            return option\n        else:\n            print(\"Please choose one of the above functions.\")\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = dict.copy()\n    for key,value in dict.items():\n        if (value >= n):\n            filtered[key] = value\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict[dict.get(n, n)]\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    return count(test_tup,0)\n    \ndef count(tup, pos):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # determine if pos is the end of the tuple\n    if pos >= len(tup):\n        return 0\n    \n    # count occurrences of position p\n    # take the first occurrence\n    # loop through the list to get the end of the list\n    # if the index of the first element of the tuple is greater than pos then\n    # increase pos by 1 to calculate the next position\n    return 1 + count(tup[pos:], pos + 1)\n    \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    \n    return count(test_tup,len(test_tup)-1)\n    \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    \n    return count(test_tup, len(test_tup) - 1)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if not test_tup:\n        return 0\n    if len(test_tup) == 1:\n        return 1\n    if len(test_tup) < 2:\n        return 0\n    return 1 + count_first_elements(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # first element of tuple\n    first_element = test_tup[0]\n    # length of given tuple\n    length = len(test_tup)\n    # length of first element\n    first_element_index = length - 1\n    # index of first element\n    index = first_element_index\n    # second element of tuple\n    second_element = test_tup[1]\n    # length of second element\n    second_element_index = length - 2\n    # index of second element\n    index = second_element_index\n    # third element of tuple\n    third_element = test_tup[2]\n    # length of third element\n    third_element_index = length - 3\n    # index of third element\n    index = third_element_index\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    t = test_tup\n    c = 0\n    while(t):\n        if t[0] < t[1]:\n            c += 1\n        t = t[1]\n    return c\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for index in range(len(test_tup)):\n        if test_tup[index][0] == test_tup[index][1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # Write your code here.\n    element_before = test_tup[0]\n    return element_before\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # count number of elements that occur before the tuple element\n    counter = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    from collections import Counter\n    # your code\n    counter = Counter(test_tup)\n    return counter.most_common(1)[0][1]\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if not test_tup:\n        return 0\n    else:\n        first_elem = 0\n        for i in range(len(test_tup) - 1):\n            if test_tup[i] == test_tup[i + 1]:\n                first_elem += 1\n            else:\n                break\n    return first_elem\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    lst = []\n    for i in range(0, n):\n        lst.append(1)\n        for j in range(0, i):\n            lst[i] = lst[i] * lst[j]\n        \n    return lst[n] \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = [1, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    dec = 1\n    # when n is odd\n    if (n%2 == 1):\n        # if n is even, add 1 to the dec\n        dec = a[n]\n    # when n is even, add the digit n/2 to the dec\n    else:\n        # when n is odd, add the digit n/2 - 1 to the dec\n        dec = a[n] + 1\n    return dec\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = 1\n    while(x < n + 1):\n        if x % 2 == 0:\n            y = (x + 1) * (x + 2)\n            z = y + 1\n            if z > n:\n                break\n        else:\n            y = (x - 1) * (x - 2)\n            z = y + 1\n        if z == n:\n            return x\n        x += 1\n    return None\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # If n is odd, return\n    # 2*n*n+1 or n*n+1\n    if n % 2 == 1:\n        return 2*n*n+1\n    # If n is even, return n*n\n    return n*n+1\n    "
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    if n == 4: \n        return 4\n    if n == 5: \n        return 5\n    if n == 6: \n        return 6\n    if n == 7: \n        return 7\n    if n == 8: \n        return 8\n    if n == 9: \n        return 9\n    if n == 10: \n        return 10\n    if n == 11: \n        return 11\n    if n == 12: \n        return 12\n    if n == 13: \n        return 13\n    if n == 14: \n        return 14\n    if n == 15: \n        return 15\n    if n == 16: \n        return 16\n    if n == 17: \n        return 17\n    if n == 18: \n        return 18\n    if n == 19: \n        return 19\n    if n == 20: \n        return 20\n    if n == 21: \n        return 21\n    if n == 22: \n        return 22\n    if n == 23: \n        return 23\n    if n == 24: \n        return 24\n    if n == 25: \n        return 25\n    if n == 26: \n        return 26\n    if n == 27: \n        return 27\n    if n == 28: \n        return 28\n    if n == 29: \n        return 29\n    if n == 30: \n        return 30\n    if n == 31: \n        return 31\n    if n == 32: \n        return 32\n    if n == 33: \n        return 33\n    if n == 34: \n        return 34\n    if n == 35: \n        return 35\n    if n == 36: \n        return 36\n    if n == 37: \n        return 37\n    if n == 38: \n        return 38\n    if n == 39: \n        return 39\n    if n == 40: \n        return 40\n    if n == 41: \n        return 41\n    if n == 42: \n        return 42\n    if n == 43: \n        return 43\n    if n == 44: \n        return 44\n    if n == 45: \n        return 45\n    if n == 46: \n        return 46\n    if n == 47: \n        return 47\n    if n == 48: \n        return 48\n    if n == 49: \n        return 49\n    if n == 50: \n        return 50\n    if n == 51: \n        return 51\n    if n == 52: \n        return 52\n    if n == 53: \n        return 53\n    if n == 54: \n        return 54\n    if n == 55: \n        return 55\n    if n == 56: \n        return 56\n    if n == 57: \n        return 57\n    if n == 58: \n        return 58\n    if n == 59: \n        return 59\n    if n == 60: \n        return 60\n    if n == 61: \n        return 61\n    if n == 62: \n        return 62\n    if n == 63: \n        return 63\n    if n == 64: \n        return 64\n    if n == 65: \n        return 65\n    if n == 66: \n        return 66\n    if n == 67: \n        return 67\n    if n == 68: \n        return 68\n    if n == 69: \n        return 69\n    if n == 70: \n        return 70\n    if n == 71: \n        return 71\n    if n == 72: \n        return 72\n    if n == 73: \n        return 73\n    if n == 74: \n        return 74\n    if n == 75: \n        return 75\n    if n == 76: \n        return 76\n    if n == 77: \n        return 77\n    if n == 78: \n        return 78\n    if n == 79: \n        return 79\n    if n == 80: \n        return 80\n    if n == 81: \n        return 81\n    if n == 82: \n        return 82\n    if n == 83: \n        return 83\n    if n == 84: \n        return 84\n    if n == 85: \n        return 85\n    if n == 86: \n        return 86\n    if n == 87: \n        return 87\n    if n == 88: \n        return 88\n    if n == 89: \n        return 89\n    if n == 90: \n        return 90\n    if n == 91: \n        return 91\n    if n == 92: \n        return 92\n    if n == 93: \n        return 93\n    if n == 94: \n        return 94\n    if n == 95: \n        return 95\n    if n == 96: \n        return 96\n    if n == 97: \n        return 97\n    if n == 98: \n        return 98\n    if n == 99: \n        return 99\n    if n == 100: \n        return 100\n    if n == 101: \n        return 101\n    if n == 102: \n        return 102\n    if n == 103: \n        return 103\n    if n == 104: \n        return 104\n    if n == 105: \n        return 105\n    if n == 106: \n        return 106\n    if n == 107: \n        return 107\n    if n == 108: \n        return 108\n    if n == 109: \n        return 109\n    if n == 110: \n        return 110\n    if n == 111: \n        return 111\n    if n == 112: \n        return 112\n    if n == 113: \n        return 113\n    if n == 114: \n        return 114\n    if n == 115: \n        return 115\n    if n == 116: \n        return 116\n    if n == 117: \n        return 117\n    if n == 118: \n        return 118\n    if n == 119: \n        return 119\n    if n == 120: \n        return 120\n    if n == 121: \n        return 121\n    if n == 122: \n        return 122\n    if n == 123: \n        return 123\n    if n == 124: \n        return 124\n    if n == 125: \n        return 125\n    if n == 126: \n        return 126\n    if n == 127: \n        return 127\n    if n == 128: \n        return 128\n    if n == 129: \n        return 129\n    if n == 130: \n        return 130\n    if n == 131: \n        return 131\n    if n == 132: \n        return 132\n    if n == 133: \n        return 133\n    if n == 134: \n        return 134\n    if n == 135: \n        return 135\n    if n == 136: \n        return 136\n    if n == 137: \n        return 137\n    if n == 138: \n        return 138\n    if n == 139: \n        return 139\n    if n == 140: \n        return 140\n    if n == 141: \n        return 141\n    if n == 142: \n        return 142\n    if n == 143: \n        return 143\n    if n == 144: \n        return 144\n    if n == 145: \n        return 145\n    if n == 146: \n        return 146\n    if n == 147: \n        return 147\n    if n == 148: \n        return 148\n    if n == 149: \n        return 149\n    if n == 150: \n        return 150\n    if n == 151: \n        return 151\n    if n == 152: \n        return 152\n    if n == 153: \n        return 153\n    if n == 154: \n        return 154\n    if n == 155: \n        return 155\n    if n == 156: \n        return 156\n    if n == 157: \n        return 157\n    if n == 158: \n        return 158\n    if n == 159: \n        return 159\n    if n == 160: \n        return 160\n    if n == 161: \n        return 161\n    if n == 162: \n        return 162\n    if n == 163: \n        return 163\n    if n == 164: \n        return 164\n    if n == 165: \n        return 165\n    if n == 166: \n        return 166\n    if n == 167: \n        retur"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        if n % 2 == 0:\n            return is_num_decagonal(n - 1) + is_num_decagonal(n // 2)\n        else:\n            return is_num_decagonal(n // 2) + is_num_decagonal(n - 1)\n    \nn = int(input())\nprint(is_num_decagonal(n)"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1\n        if n % sum == 0:\n            return i + 1\n    return n\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = int(n/2)\n    n = n%2\n    i = 0\n    while i < a:\n        if (n-i) >= 0:\n            i = i + 1\n            j = n - (i-1)\n            k = 2*i - j\n            if k > 1:\n                return False\n        else:\n            i = i + 1\n    return True\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 2\n    if n < a:\n        return False\n    for i in range(n):\n        if n % a == 0:\n            return n / a\n        a += 2\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0: return 0\n    if n%2==0: return 1\n    n1 = 2 * n * (n - 1)\n    return n1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # For python 3.6+ use range()\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (i, dlist.index(item))\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return(True, i)\n    return(False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = -1\n    for i, e in enumerate(dlist):\n        if e == item:\n            idx = i\n            break\n    return idx, idx!= -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, item in enumerate(dlist):\n        if item == item:\n            return (True, i)\n    return (-1, -1"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    try:\n        for i in range(len(dlist)):\n            if item == dlist[i]:\n                return (True,i)\n    except IndexError:\n        return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Test your code here\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                print(False)\n                break\n    else:\n        print(True)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return True if len(test_list) == len(set(test_list)) else False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list) == len(set(unique_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    from itertools import groupby\n    count = {}\n    for num in test_list:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    grouped_values = groupby(sorted(count.values()), key=count.__getitem__)\n    for group in grouped_values:\n        if len(list(group))!= len(set(group)):\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_copy = test_list.copy()\n    new_test_list = []\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    hash_table = {}\n    for item in test_list:\n        if item in hash_table:\n            return False\n        else:\n            hash_table[item] = 1\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if test_list == []:\n        return True\n    else:\n        for i in range(0, len(test_list)):\n            if test_list[i] in test_list[i+1:]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # traverse through the list\n    for test_item in test_list:\n        # if the element is not a string\n        if not isinstance(test_item, str):\n            # if the element is not in the list\n            if test_item not in test_list:\n                # then the element is not in the list\n                return False\n    # if it is\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    nums1.sort()\n    nums2.sort()\n    \n    return (nums1+nums2[1:])\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1=[]\n    l2=[]\n    for i in range(len(nums1)):\n        l1.append(nums1[i])\n    for i in range(len(nums2)):\n        l2.append(nums2[i])\n    l1=list(set(l1))\n    l2=list(set(l2))\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            l2.remove(l1[i])\n    return l1+l2\n    \nnumbers=[3,6,1,7]\nprint(numbers)\nprint(sub_list(numbers,numbers))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # replace (a,b,c) with (a-b,b,c)\n    # a list will be modified in place, otherwise original list will remain unchanged\n    def replace(a,b,c):\n        a,b,c = (a,b,c),(a,c,b)\n        return a,b,c\n    def swap(a,b,c):\n        a,b,c = (a,b,c),(b,c,a)\n        return a,b,c\n    # remove duplicate values\n    def remove_duplicates(a,b,c):\n        a,b,c = (a,b,c),(b,a,c),(c,b,a)\n        return a,b,c\n    \n    a,b,c = [0]*len(nums1),[0]*len(nums2),[0]*len(nums2)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            a[i],b[j],c[j] = nums1[i],nums2[j],nums2[i]\n            # a,b,c are modified\n            if i==j:\n                a,b,c = replace(a,b,c)\n                a,b,c = swap(a,b,c)\n                a,b,c = remove_duplicates(a,b,c)\n    # return the result\n    return [a[i] for i in range(len(a)) if i%2==1]\n    \nnums1 = [2,3,3,3,2,3,2,3,3,3,3,3,3,3,3]\nnums2 = [3,3,2,2,2,2,2,3,3,3,3,3,3,3,3]\nprint(sub_list(nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y: x-y,nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = [int(i) for i in nums1]\n    nums2 = [int(i) for i in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    sub = []\n    for i in range(n):\n        sub.append(nums1[i]-nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    # list 1\n    # list 2\n    \n    def sub(l1,l2):\n        # l1 is a list of elements that should be subtracted\n        # l2 is a list of elements that should be subtracted\n        # return a new list\n        sub_list = []\n        for x in l1:\n            if x in l2:\n                sub_list.append(x)\n            else:\n                sub_list.append(-x)\n        return sub_list\n    \n    # add element to sub list\n    def add(l1,l2,num):\n        # l1 is a list of elements that should be subtracted\n        # l2 is a list of elements that should be subtracted\n        # return a new list\n        sub_list = []\n        for x in l1:\n            if x in l2:\n                sub_list.append(num)\n            else:\n                sub_list.append(-num)\n        return sub_list\n        \n    # find index of item in list\n    def find(l1,item):\n        # l1 is a list of elements that should be subtracted\n        # item is a value\n        for index,x in enumerate(l1):\n            if x == item:\n                return index\n        return -1\n        \n    # subtract two lists\n    return add(sub(nums1,nums2),sub(nums2,nums1),0)\n    "
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    # Your code here\n    if len(nums2) == 1:\n        return nums1\n    \n    if len(nums2) == 0:\n        return nums1\n    \n    return nums1 - nums2\n    \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    x = 0\n    for i in range(len(n)):\n        if n[i] in n[x:x+2]:\n            x = n.find(n[i])\n        else:\n            x = x+1\n    if n[x+1] == '0':\n        return(True)\n    else:\n        return(False)"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<0:\n        return False\n    elif n==0:\n        return True\n    else:\n        lst=[]\n        for i in range(0,10):\n            if n%i==0:\n                lst.append(i)\n        if len(lst)==len(str(n)):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    try:\n        int(n)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def valid(n):\n        count = 0\n        for digit in str(n):\n            if(digit not in digit_counter):\n                count = count + 1\n        if(count > 0):\n            return False\n        else:\n            return True\n    return valid\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    val = int(n)\n    val = str(val)\n    val = list(val)\n    val = [int(i) for i in val]\n    print(val)\n    for i in range(0,len(val),2):\n        # print(i)\n        if val[i] < val[i+1]:\n            # print(val[i])\n            return(\"False\")\n    return(\"True\")\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Set up variables\n    digit_freq = [0 for i in range(10)]\n    for num in n:\n        for i in range(10):\n            digit_freq[i] += num % 10\n            num //= 10\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return not any([True for i in range(len(str(n))) if str(n)[i] < str(n)[i]])\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0:\n        raise ValueError(\"Integer must be non-negative\")\n    \n    for i in str(n):\n        if int(i) >= 10:\n            raise ValueError(\"Integer must not contain numbers less than 10\")\n    return n\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp = str(n)\n    temp = temp.zfill(len(str(n)))\n    final = 0\n    for i in temp:\n        final = final + int(i)\n    if final == n:\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def sub_subs(m,n):\n        if n >= m:\n            return n-m\n        else:\n            return n\n    def validate(x): \n        if x == 0:\n            return 0\n        if x <= 9:\n            return x\n        else:\n            return x - 9\n    def sum_digits(x):\n        s = 0\n        while(x>0):\n            s += x%10\n            x//=10\n        return s\n    def is_palindrome(x):\n        s = 0\n        while(x>0):\n            s += x%10\n            x//=10\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n    def sum_digs_pos(x):\n        s = 0\n        while(x>0):\n            s += x%10\n            x//=10\n        return s\n    def sum_digs_neg(x):\n        s = 0\n        while(x>0):\n            s += x%10\n            x//=10\n        return s\n    def is_palindrome(x):\n        s = 0\n        while(x>0):\n            s += x%10\n            x//=10\n        return s == s[::-1]\n    def is_prime(x):\n        for i in range(2,x):\n            if x%i==0:\n                return False\n        return True\n    def sum_digits_pos(x):\n        s = 0\n        while(x>0):\n            s += x%10\n            x//=10\n        return s\n    def sum_digits_neg(x):\n        s = 0\n        while(x>0):\n            s += x%10\n            x//=10\n        return s\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    if len(list) == 0:\n        return True\n    return list[0] == element\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for elem in list:\n        if elem!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    is_equal_to=True\n    for item in list:\n        if item == element:\n            is_equal_to = False\n    return is_equal_to\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if list.count(i) == 1:\n            if i == element:\n                print(f\"{i} is equal to {element}\")\n            else:\n                print(f\"{i} is not equal to {element}\")\n        else:\n            print(f\"{i} is not equal to {element}\")\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if not isinstance(list, list):\n        raise TypeError('You must pass a list')\n    \n    if not isinstance(element, int):\n        raise TypeError('The element must be an integer')\n    \n    if not element in list:\n        raise ValueError('The element must be in the list')\n    else:\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    try:\n        count=0\n        if type(list)!=list:\n            raise TypeError('list must be a list')\n        if type(element)!=int:\n            raise TypeError('element must be an integer')\n        for item in list:\n            if item!= element:\n                count+=1\n        return count\n    except TypeError as err:\n        print('There was an error')\n        print(err)\n    except:\n        print('There was an error in the list')\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Your code here\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    matcher = re.match('a[b]', text)\n    if matcher:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'[a|b]'\n    if len(re.findall(pattern, text)) >= 2 or len(re.findall(pattern, text)) >= 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r'(a)(b)', text):\n        return True\n    elif re.match(r'a(b)', text):\n        return True\n    else:\n        return False\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    if re.match(r'(a)(b)(c)(d)', text):\n        return True\n    elif re.match(r'(a)(b)(c)(d)', text):\n        return True\n    else:\n        return False\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    if re.match(r'(a)(b)(c)(d)(e)(f)', text):\n        return True\n    elif re.match(r'(a)(b)(c)(d)(e)(f)', text):\n        return True\n    else:\n        return False\ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    if re.match(r'(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)', text):\n        return True\n    elif re.match(r'(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a',' ')\n    text = text.replace('b',' ')\n    #print(text)\n    if'' in text:\n        return False\n    if text.count('b')==3:\n        return False\n    if text.count('a')==2:\n        return False\n    if text.count('a')==1:\n        return False\n    if text.count('b')==1:\n        return False\n    if text.count('b')==2:\n        return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    p = re.compile('[a-zA-Z]+')\n    return p.search(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #Your code goes here\n    regex_pattern = r\"[AaBb]$\"\n    return re.match(regex_pattern,text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # check if 'a' is followed by two 'b' characters\n    if re.match(r'a\\b', text):\n        return True\n    # if the string doesn't contain a 'a' character, it should return false\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Initialize the variables\n    result = ''\n    count = 0\n    length = len(text)\n    for i in range(0, length):\n        if text[i] == 'a' or text[i] == 'b':\n            result = result + text[i]\n    # Split the result into separate strings\n    result = result.split()\n    # Split the result into a list of length three\n    for i in range(len(result)):\n        if len(result[i]) == 3:\n            # Check whether the result contains the 'b' character\n            if result[i][2] == 'b':\n                count = count + 1\n        elif len(result[i]) == 2:\n            # Check whether the result contains the 'a' character\n            if result[i][1] == 'a':\n                count = count + 1\n    # Return the count\n    return count\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = '^(a)|(b)'\n    if text.find(regex)!= -1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    two_three = re.findall('[ab]', text)\n    return len(two_three) == 2 or len(two_three) == 3\n    #return ''.join(two_three) == 'a' or 'a' + 'b' == 'b'\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    count = 0\n    max_sum = 0\n    result = []\n    for i in range(0, n):\n        max_sum += a[i]\n        count += 1\n        if count == k:\n            count = 0\n            result.append(max_sum)\n            max_sum = 0\n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # your code here\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if a == []:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # k is the length of the repeated array\n    return find_max_sub_array_sum_repeated(a, n, k, 1)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    count = 0\n    result = a[0]\n    \n    for i in range(len(a)):\n        \n        for j in range(k):\n            count += 1\n            result = max(result, a[i + j])\n    \n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a large array to store the largest sub array sum in.\n    a = [0] * n\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n_sub_array = []\n    for i in range(len(a)-k+1):\n        n_sub_array.append(a[i:i+k])\n    max_sub_array = []\n    for n_sub_array_part in n_sub_array:\n        max_sub_array_part = max(n_sub_array_part)\n        max_sub_array.append(max_sub_array_part)\n    return max_sub_array\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    \n    #if the array is empty return 0\n    if a[n-1] is None:\n        return 0\n    \n    #getting the value of the k-th non-repeated\n    result = a[n-1] * k\n    #if there is only one repeat\n    if n == 1:\n        return result\n    \n    #using the logic in the above calculation\n    #we need to check if the sum of the previous\n    #k-th non-repeated values is greater than result\n    #or not\n    if a[n-1] >= result:\n        #checking if the sum of the previous\n        #k-th non-repeated values is greater than\n        #the sum of the previous k-th non-repeated values\n        #if so return the sum of the previous k-th non-repeated values\n        result = max(result, a[n-1] * k)\n    else:\n        #if the previous sum of the previous k-th non-repeated\n        #values is greater than the sum of the previous\n        #k-th non-repeated values, then we need to do\n        #the same for the previous k-th non-repeated values\n        result = max(result, a[n-1] * k)\n        result = max_sub_array_sum_repeated(a, n-1, k)\n    \n    return result\n    \ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = int(input())\n    \n    print(max_sub_array_sum_repeated(a, n, k))\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Your code here\n    # please do not import any additional modules\n    n = len(a)\n    def rev(a):\n        return a[::-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    from itertools import combinations\n    from collections import defaultdict\n    \n    # assumes the input array is a copy of the original array\n    if n == k: \n        return max_sub_array_sum_repeated(a, n, 1)\n    \n    dp = [[0]*n for _ in range(k+1)]\n    \n    # set all values of the array to 0, sum_x is the sum of its elements, and to k we need to calculate which one has to repeat\n    # sum_x = sum(a) + sum_k * k\n    # sum_x = sum_x + sum_x * k\n    # sum_x = sum_x + sum_x * k\n    \n    # sum_x = sum_x + sum_x * k\n    for i in range(1, n):\n        dp[1][i] = dp[0][i]\n    \n    for i in range(2, k+1):\n        for j in range(i):\n            # j represents the number of times we'll repeat the current number\n            # sum_x = sum_x + sum_x * j\n            # sum_x = sum_x + sum_x * j\n            # sum_x = sum_x + sum_x * j\n            sum_x = dp[j][i-1] + dp[j][i]\n            if sum_x > dp[i][j]:\n                dp[i][j] = sum_x\n    \n    return max(dp[k])\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(1,n+1):\n        sum = sum + (x**2)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        sum += num**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x**2 for x in range(1, n + 1))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squared_sum = 0\n    for num in range(1, n+1):\n        if num % 2 == 0:\n            squared_sum += num\n        else:\n            continue\n    return squared_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    '''\n    def square_Sum(n):\n        return n*(n+1)//2\n    '''\n    \n    return sum(i*i for i in range(1, n + 1))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return int(n ** 0.5)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*n\n    "
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s+=i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_=0\n    for i in range(1,n+1):\n        sum_=sum_+i*i\n    return sum_\nn=int(input(\"enter number of element you want to add in a list:\"))\na=list(range(n))\nprint(\"the sum of squares of first {} elements is {}\".format(n,square_Sum(n)))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    pas"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = list1[0]\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if max_list[j] < list1[i][j]:\n                max_list = list1[i][j]\n                max_length = max_length + 1\n    print('The maximum length is {}'.format(max_length))\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for lst in list1:\n        if len(lst) > max:\n            max = len(lst)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    if len(list1) == 1:\n        return len(list1[0])\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n    \n    # DO NOT TOUCH"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    max_index = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max:\n                max = list1[i][j]\n                max_index = i\n    return max_index\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_array = []\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    a = [1, 2, 3, 4, 5]\n    b = [6, 7, 8, 9, 10]\n    c = [11, 12, 13, 14, 15]\n    d = [16, 17, 18, 19, 20]\n    \n    for i in range(n):\n        a[i] = a[i] * 2\n        b[i] = b[i] * 3\n        c[i] = c[i] * 4\n        d[i] = d[i] * 5\n        \n    d[0] = d[0] + a[0] + b[0] + c[0] + d[0]\n    d[1] = d[1] + a[1] + b[1] + c[1] + d[1]\n    d[2] = d[2] + a[2] + b[2] + c[2] + d[2]\n    d[3] = d[3] + a[3] + b[3] + c[3] + d[3]\n    d[4] = d[4] + a[4] + b[4] + c[4] + d[4]\n    \n    return d[k]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    '''\n    Problem\n    There are 2 ways to draw the fence given n = 3 and k = 2. In the fence we have to draw n posts and 2 colors in each post with the same color. \n    The number of ways to draw n posts is given by the number of ways to draw n posts in the fence. \n    The same color can be chosen as each post has at most two colors with the same color in the post.\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    return count_no_of_ways_dp(n, k, 1, dp)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    c = [0] * (n + 1)\n    c[1] = 1\n    \n    for i in range(2, n + 1):\n        \n        # print(f\"j {i}\")\n        for j in range(1, k + 1):\n            c[i] += c[i - j]\n            \n    return c[n]"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    d = [i for i in range(n+1)]\n    if n==1:\n        return 1\n    elif k==1:\n        return 1\n    else:\n        \n        d[0] = 0\n        d[1] = 1\n        for i in range(2, n+1):\n            d[i] = d[i-1] + d[i-2]\n        return d[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0: \n        return 0\n    elif n > 0 and k > 0: \n        return int(factorial(n) / (factorial(k) * factorial(n-k)))\n    else: \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 2:\n        return n * n\n    if n < 1: \n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n * count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n == 0):\n        return 1\n    elif (k == 1):\n        return n + count_no_of_ways(n-1, k)\n    elif (k == 2):\n        return n * count_no_of_ways(n-1, k-1)\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # step 1: check number of digits\n    if n == 0:\n        return -1\n    elif n < 0:\n        return -2\n    elif m < 0:\n        return -3\n    \n    # step 2: check sign and negative\n    if n % n == 0:\n        return n\n    elif n % n == 1:\n        return n + n\n    elif n % n == -1:\n        return n + m - (n - m)\n    \n    # step 3: check sign and positive\n    if n % n == -1:\n        return n + m - (n - m)\n    elif n % n == 1:\n        return n + m\n    \n    # step 4: no rounding errors\n    if n == 2:\n        return n + m\n    elif n == 3:\n        return n + m + 1\n    \n    return -1\n    \ndef solve(n,m):\n    # define quadrant and find the correct result\n    quotient = find(n,m)\n    if quotient == -1:\n        return -3\n    elif quotient == -2:\n        return -2\n    elif quotient == -3:\n        return -1\n    elif quotient > 3:\n        return -1\n    elif quotient < 1:\n        return 3\n    \n    return solve(n//2,m//2)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or n==m:\n        return 0\n    if m<n:\n        return find(n,m-1)\n    else:\n        return find(n-1,m)\n    \n    \ndef Divisors(n) : \n    l = []  \n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                l.append(n//i)\n    return l\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    if n<=0:\n        print('n must be positive')\n        return None\n    if m<=0:\n        print('m must be positive')\n        return None\n    quotient=n//m\n    if (m%quotient==0):\n        return m//quotient\n    else:\n        return None\ndef find2(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        print('n must be positive')\n        return None\n    if m<=0:\n        print('m must be positive')\n        return None\n    quotient=n//m\n    if (m%quotient==0):\n        return m//quotient\n    else:\n        return None\ndef find3(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        print('n must be positive')\n        return None\n    if m<=0:\n        print('m must be positive')\n        return None\n    quotient=n//m\n    if (m%quotient==0):\n        return m//quotient\n    else:\n        return None\ndef find4(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        print('n must be positive')\n        return None\n    if m<=0:\n        print('m must be positive')\n        return None\n    quotient=n//m\n    if (m%quotient==0):\n        return m//quotient\n    else:\n        return None\ndef find5(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        print('n must be positive')\n        return None\n    if m<=0:\n        print('m must be positive')\n        return None\n    quotient=n//m\n    if (m%quotient==0):\n        return m//quotient\n    else:\n        return None\ndef find6(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        print('n must be positive')\n        return None\n    if m<=0:\n        print('m must be positive')\n        return None\n    quotient=n//m\n    if (m%quotient==0):\n        return m//quotient\n    else:\n        return None\ndef find7(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        print('n must be positive')\n        return None\n    if m<=0:\n        print('m must be positive')\n        return None\n    quotient=n//m\n    if (m%quotient==0):\n        return m//quotient\n    else:\n        return None\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return n\n    else:\n        return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n+m) == 0:\n        return 0\n    else:\n        return n/m\n        \n    \ndef main():\n    n=int(input(\"Enter the value of n: \"))\n    m=int(input(\"Enter the value of m: \"))\n    print(find(n,m))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m < n:\n        m, n = n, m\n    if m % 2 == 0:\n        a = m//2\n    else:\n        a = (m//2) + 1\n    return a\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m : return n\n    elif n == 0: return 0\n    elif m == 0: return -1\n    elif m > 0:\n        return (n % m) / m\n    else:\n        return (n - 1) // -1\n    \n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n <= 0) or (m <= 0):\n        raise Exception('n and m must be positive')\n    if (n == m) or (n == 0 and m == 0):\n        return n\n    else:\n        n //= 10\n        m //= 10\n        return find(n,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return m\n    if n < 0:\n        n = -n\n    if m < 0:\n        m = -m\n    if n > m:\n        print (\"No valid quadratic equation\")\n    else:\n        if n == m == 0:\n            return 1\n        n = round(n, m)\n        m = round(m, m)\n        d = m/n\n        if m == 0:\n            return 0\n        else:\n            print (\"{0:.2f} \".format(n) + \"x^{0} + {0:.2f}x^{1} = 0\".format(n,m))\n            return find(n,m)\n        \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    elif m == 1:\n        return 1\n    else:\n        return (n/m)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w1=0\n    h1=0\n    '''\n    For each triangle.\n    '''\n    # if the height of triangle is less than half the length of horizontal line\n    if w<(h/2):\n        # check if a rectangle is inside triangle\n        if 0<((2*w)/math.pi)<(math.pi/2) and ((2*w)/math.pi)<(2*h/math.pi):\n            # if triangle is inside rectangle\n            if h>h/2:\n                # if h is less than triangle height\n                if h<(w/2):\n                    # calculate the side\n                    w1=w/2\n                    h1=h-w\n                    # if the side is less than the whole height of rectangle\n                    if w1<(h/2):\n                        # if the side is more than the whole height of rectangle\n                        if w1>w/2:\n                            # return the value\n                            return w1,h1\n                # if the side is more than the whole height of rectangle\n                else:\n                    # if the side is less than the whole height of rectangle\n                    if h>w/2:\n                        # if the side is more than the whole height of rectangle\n                        if w1>w/2:\n                            # return the value\n                            return w1,h1\n            # if the side is greater than the whole height of rectangle\n            else:\n                # if the side is more than the whole height of rectangle\n                if w>w/2:\n                    # if the side is more than the whole height of rectangle\n                    if h>w/2:\n                        # if the side is less than the whole height of rectangle\n                        if w1>w/2:\n                            # return the value\n                            return w1,h1\n                    # if the side is less than the whole height of rectangle\n                    else:\n                        # if the side is more than the whole height of rectangle\n                        if w>w/2:\n                            # return the value\n                            return w1,h1\n    # if the height of triangle is more than half of the length of horizontal line\n    else:\n        # if h<(w/2):\n        #     return 2*w/math.pi\n        # if h<(2*w/math.pi):\n        #     return 2*w/math.pi\n        # if h<(w/2):\n        #     return 2*w/math.pi\n        # if h<(2*w/math.pi):\n        #     return 2*w/math.pi\n        # if h<(w/2):\n        #     return 2*w/math.pi\n        # else:\n        #     return 2*w/math.pi\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_one = w*h\n    side_two = math.sqrt(side_one*side_one - w*h)\n    side_three = math.sqrt(side_one*side_one - w*h - (h/2))\n    return side_one,side_two,side_three\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    cos_a = math.cos(math.radians(90-w))\n    sin_a = math.sin(math.radians(90-w))\n    x0 = -cos_a * w * h\n    x1 = cos_a * w * h + h * cos_a * w * (1-sin_a)\n    x2 = sin_a * w * h - h * cos_a * w * (1-sin_a)\n    return (x0,x1,x2)\n    \ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    cos_a = math.cos(math.radians(90+w))\n    sin_a = math.sin(math.radians(90+w))\n    x0 = -cos_a * w * h\n    x1 = cos_a * w * h + h * cos_a * w * (1-sin_a)\n    x2 = sin_a * w * h - h * cos_a * w * (1-sin_a)\n    return (x0,x1,x2)\n    \ndef angle_truncate(a):\n    '''\n    Write a function to find the truncated angle (the angle between the two sides).\n    '''\n    if a==0:\n        return 0\n    if a>0:\n        return (math.acos(a)/a)\n    if a<0:\n        return (math.asin(a)/a)\n    if a==-1:\n        return 180\n    if a<-1:\n        return (math.atan(a)/a)\n    if a>-1 and a<-math.pi:\n        return (math.acos(a)/a)\n    if a==-math.pi:\n        return 180\n    if a>math.pi:\n        return (math.asin(a)/a)\n    if a<math.pi:\n        return (math.atan(a)/a)\n    if a==0:\n        return 180\n    if a==math.pi:\n        return 90\n    if a<-math.pi:\n        return (math.acos(a)/a)\n    if a==-math.pi:\n        return -90\n    if a<-math.pi:\n        return (math.asin(a)/a)\n    if a==-1:\n        return -180\n    if a>-1:\n        return (math.atan(a)/a)\n    if a==-math.pi:\n        return 0\n    if a<math.pi:\n        return (math.acos(a)/a)\n    if a==0:\n        return 0\n    if a==math.pi:\n        return 180\n    if a>math.pi:\n        return (math.asin(a)/a)\n    if a>-math.pi:\n        return (math.atan(a)/a)\n    if a<-math.pi:\n        return (math.acos(a)/a)\n    if a==-1:\n        return 0\n    if a>-1:\n        return (math.atan(a)/a)\n    if a==-math.pi:\n        return 0\n    if a>math.pi:\n        return (math.acos(a)/a)\n    if a>-math.pi:\n        return (math.asin(a)/a)\n    if a==-math.pi:\n        return 0\n    if a==0:\n        return 0\n    if a>math.pi:\n        return (math.acos(a)/a)\n    if a>-math.pi:\n        return (math.asin(a)/a)\n    if a==-math.pi:\n        return 180\n    if a>-math.pi:\n        return (math.atan(a)/a)\n    if a==-1:\n        return -180\n    if a>-1:\n        return (math.atan(a)/a)\n    if a==-math.pi:\n        return 180\n    if a>math.pi:\n        return (math.acos(a)/a)\n    if a==0:\n        return 0\n    if a>math.pi:\n        return (math.acos(a)/a)\n    if a==math.pi:\n        return 0\n    if a>-math.pi:\n        return (math.asin(a)/a)\n    if a==-math.pi:\n        return -180\n    if a>-math.pi:\n        return (math.atan(a)/a)\n    if a==-1:\n        return -180\n    if a>-1:\n        return (math.atan(a)/a)\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return 0\n    if a>math.pi:\n        return (math.acos(a)/a)\n    if a==0:\n        return 0\n    if a==math.pi:\n        return 180\n    if a>math.pi:\n        return (math.acos(a)/a)\n    if a==-math.pi:\n        return -180\n    if a>-math.pi:\n        return (math.asin(a)/a)\n    if a==-math.pi:\n        return -180\n    if a>-math.pi:\n        return (math.atan(a)/a)\n    if a==-1:\n        return -180\n    if a>-1:\n        return (math.atan(a)/a)\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return 0\n    if a==0:\n        return 0\n    if a==math.pi:\n        return 180\n    if a>math.pi:\n        return (math.acos(a)/a)\n    if a==math.pi:\n        return 0\n    if a>math.pi:\n        return (math.asin(a)/a)\n    if a==-math.pi:\n        return -180\n    if a>math.pi:\n        return (math.atan(a)/a)\n    if a==-math.pi:\n        return -180\n    if a>-math.pi:\n        return (math.acos(a)/a)\n    if a==-math.pi:\n        return -180\n    if a>-math.pi:\n        return (math.asin(a)/a)\n    if a==-1:\n        return -180\n    if a>-1:\n        return (math.atan(a)/a)\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return 0\n    if a==0:\n        return 0\n    if a==math.pi:\n        return 180\n    if a>math.pi:\n        return (math.acos(a)/a)\n    if a==math.pi:\n        return 0\n    if a>-math.pi:\n        return (math.asin(a)/a)\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return 0\n    if a==-math.pi:\n        return 180\n    if a==-1:\n        return -180\n    if a==-1:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return 180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-math.pi:\n        return -180\n    if a==-mat"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle_a = 0\n    angle_b = 0\n    angle_c = 0\n    if w > h:\n        angle_b = (180/math.pi)*w\n        angle_c = (180/math.pi)*(w+h)\n        angle_a = (180/math.pi)*(w-h)\n    elif w < h:\n        angle_b = (180/math.pi)*(w-h)\n        angle_c = (180/math.pi)*h\n        angle_a = (180/math.pi)*(w+h)\n    return angle_a, angle_b, angle_c\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h > 0 and w > 0:\n        side = math.sqrt(h**2 + w**2)\n        return side\n    elif h > 0 and w < 0:\n        side = math.sqrt(h**2 + w**2)\n        return side\n    elif h < 0 and w > 0:\n        side = math.sqrt(h**2 + w**2)\n        return side\n    else:\n        side = 0\n        return side\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = (math.acos(w/h) * 180 / math.pi) % 360\n    return angle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h<w:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    else:\n        temp1 = h\n        temp2 = w\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_rightangledge(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h<w:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    else:\n        temp1 = h\n        temp2 = w\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_rightangledleft(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h<w:\n        temp1 = h\n        temp2 = w\n        temp3 = 0\n    else:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_rightangledleft(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h<w:\n        temp1 = h\n        temp2 = w\n        temp3 = 0\n    else:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_bottomleft(w,h):\n    '''\n    Write a function to find the third side of a bottom left triangle.\n    '''\n    if h<w:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    else:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_bottomleft(w,h):\n    '''\n    Write a function to find the third side of a bottom left triangle.\n    '''\n    if h<w:\n        temp1 = h\n        temp2 = w\n        temp3 = 0\n    else:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_bottomright(w,h):\n    '''\n    Write a function to find the third side of a bottom right triangle.\n    '''\n    if h<w:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    else:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_bottomright(w,h):\n    '''\n    Write a function to find the third side of a bottom right triangle.\n    '''\n    if h<w:\n        temp1 = h\n        temp2 = w\n        temp3 = 0\n    else:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_topleft(w,h):\n    '''\n    Write a function to find the third side of a top left triangle.\n    '''\n    if h<w:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    else:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_topright(w,h):\n    '''\n    Write a function to find the third side of a top right triangle.\n    '''\n    if h<w:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    else:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_topright(w,h):\n    '''\n    Write a function to find the third side of a top right triangle.\n    '''\n    if h<w:\n        temp1 = h\n        temp2 = w\n        temp3 = 0\n    else:\n        temp1 = h\n        temp2 = w\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j in range(2):\n            if temp2>temp3:\n                temp3 = temp3-h\n            else:\n                temp3 = temp3-w\n    return temp1+temp2+temp3\ndef otherside_topleft(w,h):\n    '''\n    Write a function to find the third side of a top left triangle.\n    '''\n    if h<w:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    else:\n        temp1 = w\n        temp2 = h\n        temp3 = 0\n    for i in range(2):\n        if temp1>temp2:\n            temp2 = temp2-w\n        else:\n            temp2 = temp2-h\n        for j i"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = (math.sqrt(a * a + b * b)) / 2\n    return a,b,c\ndef otherside_rightangle_m1(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = (math.sqrt(a * a + b * b)) / 2\n    return a,b,c\ndef otherside_rightangle_m2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = (math.sqrt(a * a + b * b)) / 2\n    return a,b,c\ndef otherside_rightangle_m3(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = (math.sqrt(a * a + b * b)) / 2\n    return a,b,c\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    a = h / 2\n    b = w / 2\n    c = (math.sqrt(a * a + b * b)) / 2\n    return a,b,c\ndef otherside_leftangle_m1(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    a = h / 2\n    b = w / 2\n    c = (math.sqrt(a * a + b * b)) / 2\n    return a,b,c\ndef otherside_leftangle_m2(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = (math.sqrt(a * a + b * b)) / 2\n    return a,b,c\ndef otherside_leftangle_m3(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    a = w / 2\n    b = h / 2\n    c = (math.sqrt(a * a + b * b)) / 2\n    return a,b,c\ndef check_vertical_triangle_area(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_horizontal_triangle_area(a,b,c):\n    '''\n    Check if the triangle given are passed the left side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_triangle_area(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_equilateral_triangle_area(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_scalene_triangle_area(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_parallel_triangle_area(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_right_side_diagonal(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * a) == c * c:\n        return True\n    else:\n        return False\ndef check_right_side_cross(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * a) == c * c:\n        return True\n    else:\n        return False\ndef check_left_side_diagonal(a,b,c):\n    '''\n    Check if the triangle given are passed the left side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_left_side_cross(a,b,c):\n    '''\n    Check if the triangle given are passed the left side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_scalene_triangle_diagonal(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * a) == c * c:\n        return True\n    else:\n        return False\ndef check_parallel_triangle_diagonal(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_equilateral_triangle_diagonal(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_right_side_equilateral(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_left_side_equilateral(a,b,c):\n    '''\n    Check if the triangle given are passed the left side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_right_side_inferior(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_right_side_supior(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_scalene_triangle_inside(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_parallel_triangle_inside(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_right_side_parallel(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_left_side_parallel(a,b,c):\n    '''\n    Check if the triangle given are passed the left side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check_parallel_triangle_inside(a,b,c):\n    '''\n    Check if the triangle given are passed the right side.\n    '''\n    if (a * b) == c * c:\n        return True\n    else:\n        return False\ndef check"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if(w==h):\n        return (w,h)\n    else:\n        v = math.sqrt((w**2)+(h**2))\n        return (v/2, h/2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w/math.sin(math.radians(180-h))\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for item in listval:\n        if maxval < item:\n            maxval = item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = 0\n    for element in listval:\n        if element > maximum:\n            maximum = element\n    return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n    \ndef sort_by_vals(listval):\n    '''\n    Write a function to sort a given heterogeneous list.\n    '''\n    alist = []\n    for i in range(len(listval)):\n        alist.append(listval[i][0])\n    alist.sort()\n    for i in range(len(alist)):\n        listval[i] = (alist[i],i)\n    return listval\n    \ndef counting(listval):\n    '''\n    Write a function to count the number of occurrences of each value in a given list.\n    '''\n    temp_list = []\n    for i in range(len(listval)):\n        if listval[i][1] not in temp_list:\n            temp_list.append(listval[i][1])\n    temp_list.sort()\n    for i in range(len(temp_list)):\n        listval[i] = (listval[i],1)\n    for i in range(len(listval)):\n        listval[i] = listval[i][0]\n        listval[i] = (listval[i][0],listval[i][1] + 1)\n    return listval\n    \ndef reverse_dict(dict_obj):\n    '''\n    Write a function that reads a dictionary and returns a dictionary of values sorted by keys.\n    '''\n    temp_dict = {}\n    for i in range(len(dict_obj)):\n        temp_dict[dict_obj[i][0]] = dict_obj[i][1]\n    temp_dict.sort()\n    for i in range(len(temp_dict)):\n        dict_obj[i] = (temp_dict[i],1)\n    return dict_obj\n    \ndef second_largest(listval):\n    '''\n    Write a function to get the second largest item in a given list.\n    '''\n    second_largest = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > second_largest:\n            second_largest = listval[i]\n    return second_largest\n    \ndef count_values(listval):\n    '''\n    Write a function that counts the number of values in a given list.\n    '''\n    count = 0\n    for i in range(len(listval)):\n        count = count + 1\n    return count\n    \ndef list_of_strings(listval):\n    '''\n    Write a function that gets the number of occurrences of each word in a given list.\n    '''\n    alist = []\n    for i in range(len(listval)):\n        alist.append(listval[i][0])\n    alist.sort()\n    for i in range(len(alist)):\n        listval[i] = (alist[i],i)\n    return listval\n    \ndef reverse_list(listval):\n    '''\n    Write a function that reverses a given list.\n    '''\n    alist = []\n    for i in range(len(listval)):\n        alist.append(listval[i][1])\n    alist.reverse()\n    for i in range(len(alist)):\n        listval[i] = (alist[i],i)\n    return listval\n    \ndef find_all_matches(listval,words):\n    '''\n    Write a function that finds all the matches in a given list.\n    '''\n    found_matches = []\n    for i in range(len(listval)):\n        if listval[i] == words:\n            found_matches.append(listval[i])\n    return found_matches\n    \ndef find_all_matches_2(listval,words):\n    '''\n    Write a function that finds all the matches in a given list.\n    '''\n    found_matches = []\n    for i in range(len(listval)):\n        if listval[i] == words:\n            found_matches.append(listval[i])\n    return found_matches\n    \ndef first_occurrence(listval):\n    '''\n    Write a function that gets the first occurrence of a given value in a given list.\n    '''\n    index = 0\n    for i in range(len(listval)):\n        if listval[i] == listval[index]:\n            index = i\n        else:\n            index = index\n    return index\n    \ndef sec_occurrence(listval):\n    '''\n    Write a function that gets the second occurrence of a given value in a given list.\n    '''\n    index = 0\n    for i in range(len(listval)):\n        if listval[i] == listval[index]:\n            index = i\n        else:\n            index = index\n    return index\n    \ndef sum_of_list_val(listval):\n    '''\n    Write a function that gets the sum of all the elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(listval)):\n        sum = sum + listval[i][0]\n    return sum\n    \ndef first_occurrence_of_val(listval):\n    '''\n    Write a function that gets the first occurrence of a given value in a given list.\n    '''\n    index = 0\n    for i in range(len(listval)):\n        if listval[i] == listval[index]:\n            index = i\n        else:\n            index = index\n    return index\n    \ndef get_dic_val(listval):\n    '''\n    Write a function that gets the value associated with a given key in a given dictionary.\n    '''\n    for i in range(len(listval)):\n        if listval[i][0] == listval[i][1]:\n            listval[i][0] = listval[i][0]\n            listval[i] = (listval[i][0],i)\n    return listval\n    \ndef second_occurrence(listval):\n    '''\n    Write a function that gets the second occurrence of a given value in a given list.\n    '''\n    index = 0\n    for i in range(len(listval)):\n        if listval[i] == listval[index]:\n            index = i\n        else:\n            index = index\n    return index\n    \ndef reverse_dic(listval):\n    '''\n    Write a function that reverses a given dictionary.\n    '''\n    alist = []\n    for i in range(len(listval)):\n        alist.append(listval[i][0])\n    alist.sort()\n    for i in range(len(alist)):\n        listval[i] = (alist[i],i)\n    return listval\n    \ndef max_val_in_list(listval):\n    '''\n    Write a function that gets the maximum value in a given list.\n    '''\n    max = listval[0][0]\n    for i in range(len(listval)):\n        if listval[i][0] > max:\n            max = listval[i][0]\n    return max\n    \ndef min_val_in_list(listval):\n    '''\n    Write a function that gets the minimum value in a given list.\n    '''\n    min = listval[0][0]\n    for i in range(len(listval)):\n        if listval[i][0] < min:\n            min = listval[i][0]\n    return min\n    \ndef count_occur(listval):\n    '''\n    Write a function that counts the number of times a given value occurs in a given list.\n    '''\n    count = 0\n    for i in range(len(listval)):\n        if listval[i] == listval[i]:\n            count = count + 1\n    return count\n    \ndef count_all(listval)"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max=listval[0]\n    for i in range(len(listval)):\n        if(listval[i]>max):\n            max=listval[i]\n    return max\ndef sort_list(listval):\n    '''\n    Write a function to sort a heterogeneous list using Bubble Sort algorithm.\n    '''\n    temp=listval[0]\n    for i in range(len(listval)):\n        if(listval[i]>temp):\n            temp=listval[i]\n    for j in range(len(listval)):\n        if(listval[j]>temp):\n            temp=listval[j]\n    listval[0]=temp\n    for i in range(1,len(listval)):\n        if(listval[i]>listval[0]):\n            temp=listval[i]\n            listval[i]=temp\n    return listval\ndef main():\n    '''\n    Write a function that has two parameters: a string that contains a list of numbers, and a function that takes in a string and returns a list.\n    The function should create a list of strings, where each string represents a number and should be sorted alphabetically.\n    '''\n    string=input(\"Enter a list of numbers: \")\n    numbers=string.split(',')\n    numbers=sort_list(numbers)\n    for i in range(len(numbers)):\n        print(str(numbers[i]),' ',end='')\nmain("
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for el in listval:\n        if el > max:\n            max = el\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = -1\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # TODO: complete this function\n    # return the max element\n    if len(listval) <= 0:\n        return None\n    max = listval[0]\n    for element in listval:\n        if element > max:\n            max = element\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for element in listval:\n        if element > element:\n            return element\n        \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for element in listval:\n        if element < element:\n            return element\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total_div = 0\n    for num in range(1, number+1):\n        if number % num == 0:\n            total_div += num\n    return total_div\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    return sum_div(number // 2) + sum_div(number - (number // 2))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number % 2 == 0:\n        return 2 + sum_div(number - 1)\n    else:\n        return sum_div(number - 1) + 1"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        for i in range(1, number):\n            if number % i == 0:\n                return number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 1\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        # write your code here\n        total = 0\n        for i in range(1,number):\n            if number % i == 0:\n                total += i\n        return total\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    def check_divisors(number):\n        '''\n        Write a function that accepts a number. \n        Return True if the number is divisible by 1, else False.\n        '''\n        \n        # Here we are checking for divisors of a number\n        # See if a number is divisible by any of the divisors of the number.\n        divisors = []\n        \n        for divisor in range(1, number):\n            if number % divisor == 0:\n                divisors.append(divisor)\n        \n        if len(divisors) == 0:\n            return False\n        \n        else:\n            return True\n        \n    \n    # The function call here returns True if the given number is divisible by 1 and False otherwise.\n    return check_divisors(number)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    elif number == 0:\n        return 0\n    elif number % 2 == 0:\n        return 0\n    else:\n        return (sum_div(number-1)+sum_div(number+1))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # count = 0\n    # while number!= 0:\n    #     if number % 10 == 0:\n    #         number //= 10\n    #         count += 1\n    # return number + count\n    # pass\n    count = 1\n    sum = 0\n    while number!= 0:\n        if number % 10 == 0:\n            number //= 10\n            count += 1\n        else:\n            sum += number\n            number = 0\n            count = 1\n    return sum + count\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for num in range(1,number+1):\n        if number % num == 0:\n            s += num\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n    elif number == 2:\n        return 1\n    else:\n        return sum_div(number-1) + sum_div(number-2)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] < arr[i+1]:\n            inv += 1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count=0\n    n=len(arr)\n    for i in range(1,n):\n        for j in range(i):\n            if(arr[i]<arr[j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort array in ascending order\n    arr.sort()\n    # Track number of inversions in array\n    i = 0\n    j = 0\n    # Create counting variable\n    count = 0\n    # Loop through array and iterate\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - 1 - i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                Inv_Count += 1\n            else:\n                break\n    return Inv_Count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return get_length_inversions(arr) \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def count_inversions(arr):\n        inv=0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if(arr[i] > arr[j]):\n                    inv+=1\n        return inv\n        \n    return count_inversions(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        x = arr[0]\n        i = 1\n        j = n - 1\n        while i < j: \n            if arr[i] > x: \n                arr[i], arr[j] = arr[j], arr[i] \n                j -= 1\n            else: \n                i += 1\n        return j + 1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(0,i):\n            if arr[i] > arr[j] and arr[i] > arr[j+1]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count+=1\n    return count\n    \n    \ndef mergeSort(arr): \n    '''\n    Write a python function that merges the elements of an array in sorted order.\n    '''\n    if len(arr) > 1: \n        mid = len(arr)//2 # find the middle\n        L = arr[:mid] # keep the first half\n        R = arr[mid:] # keep the second half\n        mergeSort(L) # sort the left half\n        mergeSort(R) # sort the right half\n        i = j = k = 0\n        # compare the two sorted arrays\n        # and if one is smaller, move it to the left\n        # and if it is larger, move it to the right\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i+=1\n            else:\n                arr[k] = R[j]\n                j+=1\n            k+=1\n        # copy remaining elements\n        while i < len(L):\n            arr[k] = L[i]\n            i+=1\n            k+=1\n        while j < len(R):\n            arr[k] = R[j]\n            j+=1\n            k+=1\n    return arr\n    \n    \ndef quickSort(arr): \n    '''\n    Write a python function that sort an array in the same order.\n    '''\n    def partition(arr, start, end): \n        pivot = arr[end]\n        i = start\n        for j in range(start, end): \n            if arr[j] < pivot: \n                arr[i] = arr[j]\n                i+=1\n        arr[i] = arr[end] \n        arr[end] = pivot \n        return i \n    \n    def qs(arr, start, end): \n        if start < end: \n            pi = partition(arr, start, end) \n            qs(arr, start, pi-1) \n            qs(arr, pi+1, end) \n    \n    qs(arr, 0, len(arr)-1)\n    return arr\n    \n    \ndef insertSort(arr):\n    '''\n    Write a python function that inserts the given elements in an array.\n    '''\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j+1] = arr[j]\n            j-=1\n        arr[j+1] = key\n    return arr\n    \n    \ndef shellSort(arr): \n    '''\n    Write a python function that sort an array in ascending order.\n    '''\n    for i in range(len(arr)):\n        while arr[i]>0:\n            arr[i+i] = arr[i]\n            i+=1\n        arr[i]=arr[i]\n    return arr\n    \n    \ndef bucketSort(arr): \n    '''\n    Sort the elements of a given array in the bucket manner. \n    '''\n    arr = sorted(arr)\n    B = [0]*1024\n    for i in range(len(arr)):\n        B[arr[i]]+=1\n    bucket = [[] for i in range(1024)]\n    for i in range(1024):\n        bucket[B[i]].append(arr[i])\n    return arr\n    \n    \ndef heapSort(arr):\n    '''\n    Sort the elements of a given array in the heap manner.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j]>arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n        \ndef mergeSort(arr):\n    '''\n    Sort the elements of a given array in the merge manner.\n    '''\n    def partition(arr, start, end): \n        pivot = arr[start]\n        i = start\n        j = end\n        while i < j: \n            while i<j and arr[j] >= pivot: \n                j-=1\n            arr[i] = arr[j]\n            while i<j and arr[i]<=pivot: \n                i+=1\n            arr[i] = arr[j]\n        arr[j] = pivot\n        return j\n    \n    def qs(arr, start, end): \n        if start<=end:\n            mid = partition(arr, start, end)\n            qs(arr, start, mid-1) \n            qs(arr, mid+1, end) \n    \n    qs(arr, 0, len(arr)-1)\n    return arr\n    \n    \ndef quickSort(arr): \n    '''\n    Sort the elements of a given array in the quick manner. \n    '''\n    def partition(arr, start, end): \n        pivot = arr[start]\n        i = start\n        j = end\n        while i < j: \n            while i < j and arr[j] > pivot: \n                j-=1\n            arr[i] = arr[j]\n            while i < j and arr[i]<=pivot: \n                i+=1\n            arr[i] = arr[j]\n        arr[j] = pivot\n        return j\n    \n    def qs(arr, start, end): \n        if start<=end:\n            mid = partition(arr, start, end)\n            qs(arr, start, mid-1) \n            qs(arr, mid+1, end)\n    \n    qs(arr, 0, len(arr)-1)\n    return arr\n    \n    \ndef shellSort(arr): \n    '''\n    Sort the elements of a given array in the shell manner.\n    '''\n    def partition(arr, start, end): \n        for i in range(start, end): \n            curr_val = arr[i]\n            j = i\n            while j>=start and arr[j-1]>curr_val:\n                arr[j] = arr[j-1]\n                j-=1\n            arr[j] = curr_val\n        return j+1\n        \n    def qs(arr, start, end):\n        if start<=end:\n            mid = partition(arr, start, end)\n            qs(arr, start, mid-1) \n            qs(arr, mid+1, end)\n    \n    qs(arr, 0, len(arr)-1)\n    return arr\n    \n    \ndef insertionSort(arr):\n    '''\n    Sort the elements of a given array in the insertion manner.\n    '''\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i]>arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n    \n    \ndef shellSort(arr):\n    '''\n    Sort the elements of a given array in the shell manner.\n    '''\n    def partition(arr, start, end): \n        for i in range(start, end): \n            curr_val = arr[i]\n            j = i\n            while j >= start and arr[j]<curr_val: \n                arr[j] = arr[j-1]\n                j-=1\n            arr[j] = curr_val\n        return j+1\n    \n    def qs(arr, start, end):\n        if start<=end:\n            mid = partition(arr, start, end)\n            qs(arr, start, mid-1) \n            qs(arr, mid+1, end)\n    \n    qs(arr, 0, len(arr)-1)\n    return arr\n    \n    \ndef heapSort(arr):\n    '''\n    Sort the elements of a given array in the heap manner.\n    '''\n    def partition(arr, start, end): \n        pivot "
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    cnt = 0\n    for i in range(0,len(arr)):\n        if arr[i] > arr[i+1]:\n            arr[i],arr[i+1] = arr[i+1],arr[i]\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # return a single list item\n    if list1 == []:\n        return []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1)==0:\n        return []\n    else:\n        temp=[]\n        for item in list1:\n            if type(item)==list:\n                temp+=flatten_list(item)\n            else:\n                temp.append(item)\n        return temp\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for obj in list1:\n        if isinstance(obj, list):\n            flattened.extend(flatten_list(obj))\n        else:\n            flattened.append(obj)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    \n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    \n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten_string(list_to_flatten):\n        '''\n        Write a function to flatten a given nested list structure.\n        '''\n        def flatten_list(item_to_flatten):\n            if type(item_to_flatten) is list:\n                for i in item_to_flatten:\n                    if type(i) is list:\n                        flatten_list(i)\n                    else:\n                        if type(i) is dict:\n                            flatten_list(i['list'])\n                        else:\n                            if type(i) is str:\n                                for j in i:\n                                    if type(j) is str:\n                                        flatten_string(j)\n                                    else:\n                                        flatten_list(j)\n                                \n        if type(list_to_flatten) is list:\n            flatten_list(list_to_flatten)\n        elif type(list_to_flatten) is dict:\n            flatten_list(list_to_flatten)\n        return list_to_flatten\n    \n    if type(list1) is dict:\n        flatten_list(list1)\n    elif type(list1) is list:\n        flatten_string(list1)\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    out = []\n    if len(list1) == 0:\n        return out\n    for item in list1:\n        if type(item) == list:\n            out += flatten_list(item)\n        else:\n            out.append(item)\n    return out\n    \ndef double_string(in_string):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    out = []\n    if len(in_string) == 0:\n        return out\n    for item in in_string:\n        if type(item) == list:\n            out += double_string(item)\n        else:\n            out.append(item)\n    return out\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    if list1 == None:\n        return result\n    for element in list1:\n        if type(element) == list:\n            result += flatten_list(element)\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if type(i) is list:\n            result += flatten_list(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_dict = defaultdict(int)\n    for key, value in stdata.items():\n        max_aggregate_dict[value] = max(max_aggregate_dict[value], key)\n    return max_aggregate_dict\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key=lambda x: x[2])[2]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    cur_agg = 0\n    for u in stdata:\n        if cur_agg == 0:\n            cur_agg += u[2]\n        else:\n            cur_agg += max(cur_agg, u[2])\n    return cur_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = 0\n    for tup in stdata:\n        agg += tup[2]\n    return agg\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    agg = 0\n    for tup in stdata:\n        agg += tup[2]\n    return agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    count = len(stdata)\n    max_value = float('-inf')\n    for i in stdata:\n        if i[1] > max_value:\n            max_value = i[1]\n    return max_value\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([(x[0], x[1]) for x in stdata])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    ret = 0\n    for item in stdata:\n        ret = max(ret, item[1])\n    return ret\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # remove duplicates\n    stdata = list(set(stdata))\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # convert list of tuples to list of dictionaries\n    data = stdata\n    count = 0\n    \n    # for every row in the list, calculate the maximum aggregate\n    # return the max aggregate\n    for row in data:\n        temp_agg = 0\n        for field in row.keys():\n            temp_agg += row[field]\n        temp_agg = temp_agg / len(row.keys())\n        if temp_agg > count:\n            count = temp_agg\n            # set the highest aggregate to the new highest aggreg\n            row[field] = count\n    return count\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maximum_aggregate = 0\n    for r in stdata:\n        if r[1] > maximum_aggregate:\n            maximum_aggregate = r[1]\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    while n:\n        if n & 1: \n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # get array\n    arr = [i for i in range(1, n + 1)]\n    \n    # create array to store sum of first 2n bitwise numbers\n    arr_2 = [0] * (n + 1)\n    for i in range(2, n + 1):\n        arr_2[i] = (arr[i - 1] + arr[i - 2]) % 256\n    # convert array into string\n    arr_2 = str(arr_2)\n    # convert string into int\n    arr_2 = int(arr_2, 2)\n    \n    # add the last two bits to the sum\n    arr_2 = arr_2 + arr[n]\n    \n    # get sum of first 2n bitwise numbers\n    sum_binary_arr = (arr[0] + arr[1] + arr_2) % 256\n    \n    # return count of all binary sequences\n    return sum_binary_arr\n    \n    \n    \ndef count_binary_seq_solution():\n    # get array\n    arr = [i for i in range(1, n + 1)]\n    \n    # create array to store sum of first 2n bitwise numbers\n    arr_2 = [0] * (n + 1)\n    for i in range(2, n + 1):\n        arr_2[i] = (arr[i - 1] + arr[i - 2]) % 256\n    # convert array into string\n    arr_2 = str(arr_2)\n    # convert string into int\n    arr_2 = int(arr_2, 2)\n    \n    # add the last two bits to the sum\n    arr_2 = arr_2 + arr[n]\n    \n    # get sum of first 2n bitwise numbers\n    sum_binary_arr = (arr[0] + arr[1] + arr_2) % 256\n    \n    # return count of all binary sequences\n    return sum_binary_arr\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    \n    for i in range(n):\n        if n % 2: # i will be odd number\n            count += 1 # adding 1 for even number\n        else:\n            count += n - 1 # adding 1 for odd number\n        \n        # n = n // 2\n        \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def bin_list(n):\n        sum = 0\n        for i in range(0, n):\n            sum += 2**i\n        return sum\n    return bin_list(n)\n    \n    # or\n    # sum = 0\n    # for i in range(n):\n    #     sum += 2**i\n    # return sum\n    \n    # or\n    # sum = 0\n    # for i in range(n):\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    # return sum\n    \n    # or\n    # sum = 0\n    # for i in range(n):\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**(n-i)\n    #     sum -= 2**(n-i)\n    #     sum += 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i)\n    #     sum += 2**i\n    #     sum -= 2**(n-i"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    l = bin(n)[2:]\n    i = len(l)\n    j = i\n    count = 0\n    if len(l) == 0:\n        return count\n    else:\n        while j>0:\n            if int(l[j-1],2)!= int(l[j],2):\n                break\n            else:\n                j -= 1\n        count += 1\n        return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_2(n):\n        '''\n        #count_binary_seq_2(n=3)\n        Given n is positive integer, return count of binary sequence from 0 to n, where ith bit is the sum of the first n bits.\n        Example 1:\n        Input: n = 2\n        Output: 0\n        Explanation:\n        For n = 2, the binary sequence is: 1111.\n        For n = 3, the binary sequence is: 11111.\n        Example 2:\n        Input: n = 4\n        Output: 5\n        Explanation:\n        For n = 4, the binary sequence is: 111111.\n        For n = 5, the binary sequence is: 1111111.\n        '''\n        def count_binary_seq_4(n):\n            '''\n            #count_binary_seq_4(n=3)\n            Given n is positive integer, return count of binary sequence from 0 to n, where ith bit is the sum of the first n bits.\n            Example 1:\n            Input: n = 2\n            Output: 0\n            Explanation:\n            For n = 2, the binary sequence is: 1111.\n            For n = 3, the binary sequence is: 11111.\n            Example 2:\n            Input: n = 4\n            Output: 5\n            Explanation:\n            For n = 4, the binary sequence is: 111111.\n            For n = 5, the binary sequence is: 1111111.\n            '''\n            dp = [[0]*(n+1) for _ in range(n+1)]\n            dp[0][0] = 1\n            for i in range(1,n+1):\n                for j in range(i,0,-1):\n                    dp[i][j] = dp[i-1][j]\n                    if j - i >= 0:\n                        dp[i][j] += dp[i-1][j-1]\n            return sum(map(int,str(dp[n][-1])))\n        return count_binary_seq_4(n)\n    return count_binary_seq_2(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #Initialize count array\n    count = [0] * (n + 1)\n    #For each binary value\n    for i in range(n):\n        #add count for each of the bit positions\n        count[i + 1] = count[i] + 1\n    #Find the sum of the bit positions\n    for i in range(1, n + 1):\n        #calculate the sum\n        sum = count[i] * 2\n        #count the bit positions with the same sum\n        for j in range(i, n + 1):\n            sum = sum + count[j]\n            if sum == i:\n                count[j] = count[j] + 1\n    #Return the count\n    return count[n]\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1,n):\n        if (i & (1 << n) - 1) == 0:\n            count += 1\n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Note : bit-wise operators can be used in python, like (and) or (|)\n    # binary = bin(n)\n    # print(binary[2:])\n    # print(binary[:-2])\n    # print(binary[-2:])\n    # if len(binary) % 2 == 1:\n    #     print(\"Binary sequence is not a binary sequence.\")\n    #     return \"Binary sequence is not a binary sequence.\"\n    # if len(binary) % 2 == 0:\n    #     for i in range(0, len(binary), 2):\n    #         if binary[i] == '1':\n    #             if binary[i+1] == '1':\n    #                 return \"Binary sequence is a binary sequence.\"\n    #             elif binary[i+1] == '0':\n    #                 return \"Binary sequence is not a binary sequence.\"\n    #     return \"Binary sequence is a binary sequence.\"\n    # else:\n    #     print(\"Binary sequence is not a binary sequence.\")\n    #     return \"Binary sequence is not a binary sequence.\"\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    \n    for i in range(n):\n        if i > 0 and n-i>=1:\n            sum = n-i\n            for j in range(i,n):\n                if (j+sum)%2 == 0:\n                    count += 1\n                    sum += 1\n                else:\n                    break\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = depth + 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    #d: dictionary to count depth\n    count = 0\n    while d:\n        count += 1\n        d = d.values()\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for k in d:\n        if isinstance(d[k], dict):\n            depth += dict_depth(d[k])\n        elif isinstance(d[k], list):\n            depth += 1\n        else:\n            depth += 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    print(\"\\nThe depth of a dictionary is: \" + str(d.__depth__))\n    return\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d = dict(d)\n    depth = 0\n    for k, v in d.items():\n        depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    # Print dictionary and current depth\n    print(\"\\nDictionary:\\n\")\n    for key,value in d.items():\n        print(f\"{key:<15} {value}\")\n    print(f\"\\nCurrent depth: {len(d)}\")\n    \n    # Loop through and calculate depth\n    for i in range(1, len(d) + 1):\n        d[i] = dict_depth(d[i]) + 1\n    \n    # Return depth\n    return d\n    \n    \n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    d_depth = 0\n    for key, value in d.items():\n        d_depth += 1\n        if type(value) == dict:\n            d_depth += dict_depth(value)\n    return d_depth\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return sum(map(dict_depth, d.values()))\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if '__dict__' in dir(d):\n        return 0\n    else:\n        return 1 + dict_depth(d['__dict__'])\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # declare a list to store all the rotated numbers\n    rotated_list = []\n    \n    # define a function to get all the numbers\n    # from a range\n    def get_all_numbers(range) :\n        '''\n        Write a function that returns a list\n        of numbers from the given range.\n        '''\n        \n        # define a loop to get all numbers\n        # from a range\n        for i in range(0,len(arr),ranges[1]-ranges[0]) :\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr[i])\n            rotated_list.append(arr["
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)-rotations) :\n        temp = arr[i]\n        arr[i] = arr[-rotations-1]\n        arr[-rotations-1] = temp\n        index +=1\n    return arr, index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(ranges) or index < 0:\n        return -1\n    else:\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # checking out the indexes\n    for i in range(len(ranges)) :\n        if ranges[i][0] <= index <= ranges[i][1] :\n            return i\n    for i in range(len(rotations)) :\n        if rotations[i][0] <= index <= rotations[i][1] :\n            return i\n    return -1\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    try:\n        if arr[index] in ranges and arr[index] in rotations:\n            return arr[index]\n    except IndexError as e:\n        print(\"Index Error\")\n        print(e)\n        \ndef find_Max(arr,ranges) :\n    '''\n    Write a python function to find maximum element in array.\n    '''\n    try:\n        return arr[arr.index(max(arr))]\n    except IndexError as e:\n        print(\"Index Error\")\n        print(e)\n        \ndef find_Min(arr,ranges) :\n    '''\n    Write a python function to find minimum element in array.\n    '''\n    try:\n        return arr[arr.index(min(arr))]\n    except IndexError as e:\n        print(\"Index Error\")\n        print(e)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    l, r = ranges\n    if l + r > len(arr) - 1:\n        return -1\n    if r == 1 and l == 0:\n        if index == arr[l]:\n            return arr[l]\n        return -1\n    if r == 1 and l == len(arr) - 1:\n        if index == arr[l]:\n            return arr[l]\n        return -1\n    if l == r:\n        if index == arr[l]:\n            return arr[l]\n        return -1\n    if r >= l:\n        mid = (l + r) // 2\n        if arr[mid] == index:\n            return mid\n        elif arr[mid] < index:\n            return find_Element(arr,ranges,rotations,mid + 1)\n        elif arr[mid] > index:\n            return find_Element(arr,ranges,rotations,mid - 1)\n        return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations < len(ranges):\n        return arr[index]\n    else :\n        if arr[index] < ranges[0] :\n            if arr[index] <= ranges[1] :\n                return find_Element(arr,ranges,rotations-1,index)\n            else :\n                return arr[index]\n        else :\n            if arr[index] <= ranges[1] :\n                return find_Element(arr,ranges,rotations,index-1)\n            else :\n                return arr[index]\n        \ndef get_rotations_and_index(arr,ranges,rotations) :\n    '''\n    Finds index of element and rotates it.\n    '''\n    index = 0\n    while True :\n        if index == len(arr):\n            break\n        if arr[index] < ranges[0] :\n            if arr[index] <= ranges[1] :\n                rotations = rotations+1\n            else :\n                rotations = rotations-1\n        else :\n            if arr[index] <= ranges[1] :\n                rotations = rotations-1\n            else :\n                rotations = rotations+1\n        index += 1\n    return rotations,index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(rotations == 0) :\n        return arr[index]\n    elif(rotations > 0) :\n        mid = (len(arr) - (rotations - 1) )//2\n        if(index >= mid) :\n            return arr[index + len(arr) - 1]\n        else :\n            return arr[index]\n    else :\n        return arr[index]\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #list of possible rotations\n    rotation_list = ['STO', 'ACO', 'CLI']\n    #list of possible ranges\n    range_list = ['MIN', 'MAX']\n    #list of possible rotations\n    rotation_list = ['STO', 'ACO', 'CLI']\n    #list of possible ranges\n    range_list = ['MIN', 'MAX']\n    #list of possible rotations\n    rotation_list = ['STO', 'ACO', 'CLI']\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Read in input\n    for i in range(0,rotations) :\n        new_arr = []\n        for j in range(0,ranges) :\n            new_arr.append(arr[index+j])\n        arr = new_arr\n    return arr[index]\n    \n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    search = re.search('^p', words)\n    word = search.group()\n    return word\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = []\n    for word in words:\n        if word.startswith('p'):\n            p_list.append(word)\n    return p_list\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p_list = []\n    for word in words:\n        if word.endswith('p'):\n            p_list.append(word)\n    return p_list\ndef start_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    r_list = []\n    for word in words:\n        if word.startswith('r'):\n            r_list.append(word)\n    return r_list\ndef end_withr(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'r'.\n    '''\n    r_list = []\n    for word in words:\n        if word.endswith('r'):\n            r_list.append(word)\n    return r_list\ndef start_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    l_list = []\n    for word in words:\n        if word.startswith('l'):\n            l_list.append(word)\n    return l_list\ndef end_withl(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'l'.\n    '''\n    l_list = []\n    for word in words:\n        if word.endswith('l'):\n            l_list.append(word)\n    return l_list\ndef start_withm(words):\n    '''\n    Write a function to return two words from a list of words starting with letter'm'.\n    '''\n    m_list = []\n    for word in words:\n        if word.startswith('m'):\n            m_list.append(word)\n    return m_list\ndef end_withm(words):\n    '''\n    Write a function to return two words from a list of words ending with letter'm'.\n    '''\n    m_list = []\n    for word in words:\n        if word.endswith('m'):\n            m_list.append(word)\n    return m_list\ndef start_withs(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    s_list = []\n    for word in words:\n        if word.startswith('s'):\n            s_list.append(word)\n    return s_list\ndef end_withs(words):\n    '''\n    Write a function to return two words from a list of words ending with letter's'.\n    '''\n    s_list = []\n    for word in words:\n        if word.endswith('s'):\n            s_list.append(word)\n    return s_list\ndef start_withd(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'd'.\n    '''\n    d_list = []\n    for word in words:\n        if word.startswith('d'):\n            d_list.append(word)\n    return d_list\ndef end_withd(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'd'.\n    '''\n    d_list = []\n    for word in words:\n        if word.endswith('d'):\n            d_list.append(word)\n    return d_list\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    q_list = []\n    for word in words:\n        if word.startswith('q'):\n            q_list.append(word)\n    return q_list\ndef end_withq(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'q'.\n    '''\n    q_list = []\n    for word in words:\n        if word.endswith('q'):\n            q_list.append(word)\n    return q_list\ndef start_withu(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'u'.\n    '''\n    u_list = []\n    for word in words:\n        if word.startswith('u'):\n            u_list.append(word)\n    return u_list\ndef end_withu(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'u'.\n    '''\n    u_list = []\n    for word in words:\n        if word.endswith('u'):\n            u_list.append(word)\n    return u_list\ndef start_withi(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'i'.\n    '''\n    i_list = []\n    for word in words:\n        if word.startswith('i'):\n            i_list.append(word)\n    return i_list\ndef end_withi(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'i'.\n    '''\n    i_list = []\n    for word in words:\n        if word.endswith('i'):\n            i_list.append(word)\n    return i_list\ndef start_witho(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'o'.\n    '''\n    o_list = []\n    for word in words:\n        if word.startswith('o'):\n            o_list.append(word)\n    return o_list\ndef end_witho(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'o'.\n    '''\n    o_list = []\n    for word in words:\n        if word.endswith('o'):\n            o_list.append(word)\n    return o_list\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = []\n    for word in words:\n        if word.startswith('p'):\n            p_list.append(word)\n    return p_list\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p_list = []\n    for word in words:\n        if word.endswith('p'):\n            p_list.append(word)\n    return p_list\ndef start_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    r_list = []\n    for word in words:\n        if word.startswith('r'):\n            r_list.append(word)\n    return r_list\ndef end_withr(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'r'.\n    '''\n    r_list = []\n    for word in words:\n        if word.endswith('r'):\n            r_list.append(word)\n    return r_list\ndef start_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    l_list = []\n    for word in words:\n        if word.startswith('l'):\n            l_list.append(word)\n    return l_list\ndef end_withl(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'l'.\n    '''\n    l_list = []\n    for word in words:\n        if word.endswith('l'):\n            l_list.append"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = False\n    for word in words:\n        if word[0] == 'p':\n            p = True\n            return word, p\n    return word, p\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word, word[1:]\n    return None, None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return (i,i[2:])\n    return ('','')\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    for i in words:\n        if i[0] == 'q':\n            return (i,i[2:])\n    return ('','')\ndef start_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    for i in words:\n        if i[0] == 'r':\n            return (i,i[2:])\n    return ('','')\ndef start_withs(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    for i in words:\n        if i[0] =='s':\n            return (i,i[2:])\n    return ('','')\ndef start_witht(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 't'.\n    '''\n    for i in words:\n        if i[0] == 't':\n            return (i,i[2:])\n    return ('','')\ndef start_withu(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'u'.\n    '''\n    for i in words:\n        if i[0] == 'u':\n            return (i,i[2:])\n    return ('','')\ndef start_withv(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'v'.\n    '''\n    for i in words:\n        if i[0] == 'v':\n            return (i,i[2:])\n    return ('','')\ndef start_withw(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'w'.\n    '''\n    for i in words:\n        if i[0] == 'w':\n            return (i,i[2:])\n    return ('','')\ndef start_withx(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'x'.\n    '''\n    for i in words:\n        if i[0] == 'x':\n            return (i,i[2:])\n    return ('','')\ndef start_withy(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'y'.\n    '''\n    for i in words:\n        if i[0] == 'y':\n            return (i,i[2:])\n    return ('','')\ndef start_withz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'z'.\n    '''\n    for i in words:\n        if i[0] == 'z':\n            return (i,i[2:])\n    return ('','')\ndef start_with{}:\n    '''\n    Write a function to return two words from a list of words starting with letter '}'.\n    '''\n    for i in words:\n        if i[0] == '}':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} and '.\n    '''\n    for i in words:\n        if i[0] == '} and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_and_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} and and '.\n    '''\n    for i in words:\n        if i[0] == '} and and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_and_or(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} and or '.\n    '''\n    for i in words:\n        if i[0] == '} and or':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_or_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} or and '.\n    '''\n    for i in words:\n        if i[0] == '} or and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_or_or_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} or or and '.\n    '''\n    for i in words:\n        if i[0] == '} or or and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_or_and_or(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} or or and or '.\n    '''\n    for i in words:\n        if i[0] == '} or or and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_or_and_or_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} or or and or and '.\n    '''\n    for i in words:\n        if i[0] == '} or or and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_or_and_or_or_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} or or and or or and '.\n    '''\n    for i in words:\n        if i[0] == '} or or and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_or_and_or_and_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} or or and or or and '.\n    '''\n    for i in words:\n        if i[0] == '} or or and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_and_and_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} and and '.\n    '''\n    for i in words:\n        if i[0] == '} and and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_and_and_or(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} and and or '.\n    '''\n    for i in words:\n        if i[0] == '} and or':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_and_and_or_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} and and or and or '.\n    '''\n    for i in words:\n        if i[0] == '} and or and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_and_and_or_and_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} and and or and or and '.\n    '''\n    for i in words:\n        if i[0] == '} and or and and':\n            return (i,i[2:])\n    return ('','')\ndef start_with}_and_and_and_or_and_and(words):\n    '''\n    Write a function to return two words from a list of words starting with letter '} and and or and or and or '.\n    '''\n    fo"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_start = True\n    p_start_word = False\n    p_start_2 = False\n    p_start_3 = False\n    p_start_4 = False\n    p_start_5 = False\n    p_start_6 = False\n    p_start_7 = False\n    p_start_8 = False\n    p_start_9 = False\n    p_start_10 = False\n    p_start_11 = False\n    p_start_12 = False\n    p_start_13 = False\n    p_start_14 = False\n    p_start_15 = False\n    p_start_16 = False\n    p_start_17 = False\n    p_start_18 = False\n    p_start_19 = False\n    p_start_20 = False\n    p_start_21 = False\n    p_start_22 = False\n    p_start_23 = False\n    p_start_24 = False\n    p_start_25 = False\n    p_start_26 = False\n    p_start_27 = False\n    p_start_28 = False\n    p_start_29 = False\n    p_start_30 = False\n    p_start_31 = False\n    p_start_32 = False\n    p_start_33 = False\n    p_start_34 = False\n    p_start_35 = False\n    p_start_36 = False\n    p_start_37 = False\n    p_start_38 = False\n    p_start_39 = False\n    p_start_40 = False\n    p_start_41 = False\n    p_start_42 = False\n    p_start_43 = False\n    p_start_44 = False\n    p_start_45 = False\n    p_start_46 = False\n    p_start_47 = False\n    p_start_48 = False\n    p_start_49 = False\n    p_start_50 = False\n    p_start_51 = False\n    p_start_52 = False\n    p_start_53 = False\n    p_start_54 = False\n    p_start_55 = False\n    p_start_56 = False\n    p_start_57 = False\n    p_start_58 = False\n    p_start_59 = False\n    p_start_60 = False\n    p_start_61 = False\n    p_start_62 = False\n    p_start_63 = False\n    p_start_64 = False\n    p_start_65 = False\n    p_start_66 = False\n    p_start_67 = False\n    p_start_68 = False\n    p_start_69 = False\n    p_start_70 = False\n    p_start_71 = False\n    p_start_72 = False\n    p_start_73 = False\n    p_start_74 = False\n    p_start_75 = False\n    p_start_76 = False\n    p_start_77 = False\n    p_start_78 = False\n    p_start_79 = False\n    p_start_80 = False\n    p_start_81 = False\n    p_start_82 = False\n    p_start_83 = False\n    p_start_84 = False\n    p_start_85 = False\n    p_start_86 = False\n    p_start_87 = False\n    p_start_88 = False\n    p_start_89 = False\n    p_start_90 = False\n    p_start_91 = False\n    p_start_92 = False\n    p_start_93 = False\n    p_start_94 = False\n    p_start_95 = False\n    p_start_96 = False\n    p_start_97 = False\n    p_start_98 = False\n    p_start_99 = False\n    p_start_100 = False\n    p_start_101 = False\n    p_start_102 = False\n    p_start_103 = False\n    p_start_104 = False\n    p_start_105 = False\n    p_start_106 = False\n    p_start_107 = False\n    p_start_108 = False\n    p_start_109 = False\n    p_start_110 = False\n    p_start_111 = False\n    p_start_112 = False\n    p_start_113 = False\n    p_start_114 = False\n    p_start_115 = False\n    p_start_116 = False\n    p_start_117 = False\n    p_start_118 = False\n    p_start_119 = False\n    p_start_120 = False\n    p_start_121 = False\n    p_start_122 = False\n    p_start_123 = False\n    p_start_124 = False\n    p_start_125 = False\n    p_start_126 = False\n    p_start_127 = False\n    p_start_128 = False\n    p_start_129 = False\n    p_start_130 = False\n    p_start_131 = False\n    p_start_132 = False\n    p_start_133 = False\n    p_start_134 = False\n    p_start_135 = False\n    p_start_136 = False\n    p_start_137 = False\n    p_start_138 = False\n    p_start_139 = False\n    p_start_140 = False\n    p_start_141 = False\n    p_start_142 = False\n    p_start_143 = False\n    p_start_144 = False\n    p_start_145 = False\n    p_start_146 = False\n    p_start_147 = False\n    p_start_148 = False\n    p_start_149 = False\n    p_start_150 = False\n    p_start_151 = False\n    p_start_152 = False\n    p_start_153 = False\n    p_start_154 = False\n    p_start_155 = False\n    p_start_156 = False\n    p_start_157 = False\n    p_start_158 = False\n    p_start_159 = False\n    p_start_160 = False\n    p_start_161 = False\n    p_start_162 = False\n    p_start_163 = False\n    p_start_164 = False\n    p_start_165 = False\n    p_start_166 = False\n    p_start_167 = False\n    p_start_168 = False\n    p_start_169 = False\n    p_start_170 = False\n    p_start_171 = False\n    p_start_172 = False\n    p_start_173 = False\n    p_start_174 = False\n    p_start_175 = False\n    p_start_176 = False\n    p_start_177 = False\n    p_start_178 = False\n    p_start_179 = False\n    p_start_180 = False\n    p_start_181 = False\n    p_start_182 = False\n    p_start_183 = False\n    p_start_184 = False\n    p_start_185 = False\n    p_start_186 = False\n    p_start_187 = False\n    p_start_188 = False\n    p_start_189 = False\n    p_start_190 = False\n    p_start_191 = False\n    p_start_192 = False\n    p_start_193 = False\n    p_start_194 = False\n    p_start_195 = False\n    p_start_196 = False\n    p_start_197 = False\n    p_start_198 = False\n    p_start_199 = False\n    p_start_200 = False\n    p_start_201 = False\n    p_start_202 = False\n    p_start_203 = False\n    p_start_204 = False\n    p_start_205 = False\n    p_start_206 = False\n    p_start_207 = False\n    p_start_208 = False\n    p_start_209 = False\n    p_start_210 = False\n    p_start_211 = False\n    p_start_212 = False\n    p_start_213 = False\n    p_start_214 = False\n    p_start_215 = False\n    p_start_216 = False\n    p_start_217 = False\n    p_start_218 = False\n    p_start_219 = False\n    p_start_220 = False\n    p_start_221 = False\n    p_start_222 = False\n    p"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = \"\"\n    second = \"\"\n    for word in words:\n        if word[0] == 'p':\n            first += word[1:]\n        else:\n            second += word[1:]\n    return first, second\ndef ends_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    first = \"\"\n    second = \"\"\n    for word in words:\n        if word[-1] == 'p':\n            first += word[:-1]\n        else:\n            second += word[:-1]\n    return first, second\ndef has_at(words):\n    '''\n    Write a function to return 'at' in a list of words.\n    '''\n    for word in words:\n        if word[:3] == \"at\":\n            return word\ndef is_in_sentence(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    word = \"\"\n    for word in sentence:\n        word += word[-1]\n        if word in words:\n            return True\n    for word in sentence:\n        word = word[:-1]\n        if word in words:\n            return True\n    return False\ndef is_in_sentence_multiply(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word in words:\n            word = \"*\" + word\n            return word\n    return False\ndef is_in_sentence_substring(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word in words:\n            word = \".\" + word\n            return word\n    return False\ndef is_in_sentence_punctuation(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word in words:\n            word = \",\" + word\n            return word\n    return False\ndef is_in_sentence_quotation(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '?':\n            return word\n        else:\n            return False\ndef is_in_sentence_word(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '?':\n            return False\n        else:\n            return True\ndef is_in_sentence_space(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] =='':\n            return False\n        else:\n            return True\ndef is_in_sentence_period(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '.':\n            return False\n        else:\n            return True\ndef is_in_sentence_number(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '0':\n            return False\n        else:\n            return True\ndef is_in_sentence_letter(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '.':\n            return False\n        else:\n            if word[-1] in words:\n                return True\n    return False\ndef is_in_sentence_space_number(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '0':\n            if word in words:\n                return True\n        else:\n            if word in words:\n                return True\n    return False\ndef is_in_sentence_punctuation_number(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '.':\n            if word in words:\n                return True\n        else:\n            if word in words:\n                return True\n    return False\ndef is_in_sentence_period_number(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '0':\n            if word in words:\n                return True\n        else:\n            if word in words:\n                return True\n    return False\ndef is_in_sentence_number_number(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '.':\n            if word in words:\n                return True\n        else:\n            if word in words:\n                return True\n    return False\ndef is_in_sentence_space_number_number(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '0':\n            if word in words:\n                return True\n        else:\n            if word in words:\n                return True\n    return False\ndef is_in_sentence_number_letter(sentence, words):\n    '''\n    Given a list of words and a sentence, return True if the first word in sentence is a substring of the second word in sentence,\n    or if the second word is a substring of the first word.\n    '''\n    for word in sentence:\n        if word[-1] == '.':\n            if word in words:\n                return True\n        else:\n            if word in words:\n                return True\n    return False\ndef is_in_sentence_space_number_letter(sentenc"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start_word = words[0]\n    end_word = words[0]\n    for word in words:\n        if word[0]!= start_word[0]:\n            start_word = word\n            end_word = start_word[0]\n    return start_word, end_word\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i=0\n    i=words.index('p')\n    if len(words[i-1])==1:\n        return words[i-1],words[i]\n    else:\n        return words[i-1],words[i-1][:-1]\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    i=0\n    i=words.index('p')\n    if len(words[i+1])==1:\n        return words[i+1],words[i]\n    else:\n        return words[i+1],words[i]\ndef one_of_words(words):\n    '''\n    Write a function to return a list of two words, starting with letters 'a' and 'e', that occur in at least one word in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==1:\n        return words[i-1],words[i]\n    else:\n        return words[i-1],words[i-1][:-1]\ndef two_words(words):\n    '''\n    Write a function that returns a list of two words, starting with letters 'a' and 'e', that occur in at least two words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==1 and len(words[i+1])==1:\n        return words[i-1],words[i]\n    else:\n        return words[i-1],words[i-1][:-1]\ndef one_of_two_words(words):\n    '''\n    Write a function that returns a list of two words, starting with letters 'a' and 'e', that occur in at least two words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==1:\n        return words[i-1],words[i]\n    else:\n        return words[i-1],words[i-1][:-1]\ndef two_words_two_letters(words):\n    '''\n    Write a function that returns a list of two words, starting with letters 'a' and 'e', that occur in at least two words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==2 and len(words[i+1])==2:\n        return words[i-1],words[i]\n    else:\n        return words[i-1],words[i-1][:-1]\ndef one_of_two_words_two_letters(words):\n    '''\n    Write a function that returns a list of two words, starting with letters 'a' and 'e', that occur in at least two words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==2 and len(words[i+1])==2:\n        return words[i-1],words[i]\n    else:\n        return words[i-1],words[i-1][:-1]\ndef two_of_two_words(words):\n    '''\n    Write a function that returns a list of two words, starting with letters 'a' and 'e', that occur in at least two words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==2 and len(words[i+1])==2:\n        return words[i-1],words[i]\n    else:\n        return words[i-1],words[i-1][:-1]\ndef three_words_two_letters(words):\n    '''\n    Write a function that returns a list of three words, starting with letters 'a' and 'e', that occur in at least three words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==3 and len(words[i+1])==3 and len(words[i+2])==3:\n        return words[i-1],words[i],words[i]\n    else:\n        return words[i-1],words[i-1][:-1],words[i-1][:-1]\ndef one_of_three_words_two_letters(words):\n    '''\n    Write a function that returns a list of three words, starting with letters 'a' and 'e', that occur in at least three words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==3 and len(words[i+1])==3 and len(words[i+2])==3:\n        return words[i-1],words[i],words[i]\n    else:\n        return words[i-1],words[i-1][:-1],words[i-1][:-1]\ndef three_words(words):\n    '''\n    Write a function that returns a list of three words, starting with letters 'a' and 'e', that occur in at least three words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==3 and len(words[i+1])==3 and len(words[i+2])==3:\n        return words[i-1],words[i],words[i]\n    else:\n        return words[i-1],words[i-1][:-1],words[i-1][:-1]\ndef four_words(words):\n    '''\n    Write a function that returns a list of four words, starting with letters 'a' and 'e', that occur in at least four words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==4 and len(words[i+1])==4 and len(words[i+2])==4 and len(words[i+3])==4:\n        return words[i-1],words[i],words[i],words[i+1]\n    else:\n        return words[i-1],words[i-1][:-1],words[i-1][:-1],words[i-1][:-1]\ndef one_of_four_words(words):\n    '''\n    Write a function that returns a list of four words, starting with letters 'a' and 'e', that occur in at least four words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==4 and len(words[i+1])==4 and len(words[i+2])==4 and len(words[i+3])==4:\n        return words[i-1],words[i],words[i+1],words[i]\n    else:\n        return words[i-1],words[i-1][:-1],words[i-1][:-1],words[i-1][:-1]\ndef two_of_four_words(words):\n    '''\n    Write a function that returns a list of four words, starting with letters 'a' and 'e', that occur in at least four words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words[i-1])==4 and len(words[i+1])==4 and len(words[i+2])==4 and len(words[i+3])==4:\n        return words[i-1],words[i],words[i+1],words[i]\n    else:\n        return words[i-1],words[i-1][:-1],words[i-1][:-1],words[i-1][:-1]\ndef two_of_four_words_two_letters(words):\n    '''\n    Write a function that returns a list of two words, starting with letters 'a' and 'e', that occur in at least two words in the list of words.\n    '''\n    i=0\n    i=words.index('a')\n    if len(words["
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i=0\n    while i<len(words):\n        if words[i][0]=='p':\n            return words[i],words[i+1]\n        i=i+1\n    return None\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    i=0\n    while i<len(words):\n        if words[i][-1]=='p':\n            return words[i],words[i+1]\n        i=i+1\n    return None\ndef skip_to(words,t):\n    '''\n    Write a function that returns the words after a certain number of occurrences of 't'\n    '''\n    start_ind=0\n    end_ind=0\n    for i in range(len(words)):\n        if words[i][-len(t):]==t:\n            start_ind=i\n            break\n    for i in range(len(words)):\n        if words[i][:len(t)]==t:\n            end_ind=i\n            break\n    return words[start_ind:end_ind]\ndef reverse(s):\n    '''\n    Write a function that reverses a string.\n    '''\n    return s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    return s==s[::-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = float('-inf')\n    for i in range(n - index):\n        if i == 0:\n            a[i+1] = a[i]\n        else:\n            if a[i] >= a[i+1]:\n                a[i+1] = a[i]\n            a[i] += a[i+1]\n        if a[i] > max_sum:\n            max_sum = a[i]\n        if i + 1 == k:\n            break\n        if i + 1 < n and a[i+1] >= a[i]:\n            max_sum += a[i+1]\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[0] + k\n    else:\n        return max(k, max_sum_increasing_subseq(a, n - 1, index, k)) + a[n - 1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Conditions\n    # Array\n    if index == k:\n        return sum(a[:k])\n    \n    # Checking if arr[i] <= k\n    if a[index] <= k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    \n    # Find minimum number\n    return max(min_sum_increasing_subseq(a, n, index, k-a[index]), max_sum_increasing_subseq(a, n, index+1, k))\n    \n    \ndef max_sum_increasing_subseq_v2(a, n, k):\n    '''\n    This is a implementation of the max_sum_increasing_subseq_v2.\n    We use Dynamic programming to optimize the approach.\n    '''\n    # Maximum sum\n    m = [0]*n\n    \n    # Base case\n    m[0] = a[0]\n    \n    # Iterate from 1 to n\n    for i in range(1, n):\n        # Find the next sum\n        s = m[i-1] + a[i]\n        \n        # Update m[i]\n        m[i] = max(m[i-1], s)\n        \n    # Return the maximum sum\n    return m[n-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    maximum = 0\n    index_max = -1\n    for i in range(len(a)):\n        if i == 0 or a[i - 1] < a[i] and index < i + k:\n            maximum = a[i]\n            index_max = i + k - 1\n    return maximum, index_max\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k >= len(a):\n        return 0\n    if k == len(a) - 1:\n        return a[index]\n    i = index\n    j = index + 1\n    cur_max = -(1e8)\n    for k in range(k):\n        tmp = sum(a[i:j+1])\n        if tmp < cur_max:\n            cur_max = tmp\n            i = j\n            j = j + 1\n        else:\n            break\n    return cur_max\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    elif k == 0:\n        return a[index]\n    elif k == 1:\n        return max(a[index-1] + a[index+1], a[index])\n    elif k > 1:\n        return max_sum_increasing_subseq(a, n, index + 1, k - 1) + max(a[index - 1] + a[index + 1], a[index])\n    "
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return a[k]\n    if(index == 0 or index == n):\n        return a[-1]\n    if(k > index):\n        ans = max(a[index-k:index+1], a[index-1] + max_sum_increasing_subseq(a, n, index-k, k))\n        return ans\n    return a[index]\n    \ndef minimum_index(a, n):\n    '''\n    Find the index of a given number in a list of numbers.\n    '''\n    left, right = 0, n - 1\n    \n    # If a[0] is greater than the first index, return it\n    while a[left] < a[0]:\n        left += 1\n    \n    # Return the index of the smallest element\n    # that is greater than the first element\n    if a[left] > a[0]:\n        return left\n    \n    # If a[right] is greater than the last index,\n    # return it\n    if a[right] < a[-1]:\n        return right\n    \n    # If a[left] and a[right] are equal, then a[left]\n    # is index and a[right] is index+1\n    if a[left] == a[right]:\n        return right\n    \n    return n\n    \ndef reverse_recursive(a, n, left, right):\n    '''\n    Recursive function that does the same thing\n    as the recursive function, but instead of\n    returning the two indices, it returns\n    a, left and right instead of a, a and\n    left and right, respectively.\n    '''\n    if left >= right:\n        return 0, 0\n    \n    # a is the two indices of the element\n    # to the left of the two indices\n    i, j = left, right\n    \n    # A is the maximum sum of increasing subsequence from\n    # the first index, which is i and the last index.\n    A = max_sum_increasing_subseq(a, n, i, j)\n    \n    # Call function to return the two indices\n    # of the element to the left and right\n    return (reverse_recursive(a, n, left, i) +\n            reverse_recursive(a, n, i, j) +\n            A)\n    \ndef two_sum(nums, target):\n    '''\n    Find the first index of a given number which\n    is also present in nums.\n    '''\n    for i in range(len(nums)):\n        left, right = i, len(nums) - 1\n        while left < right:\n            if nums[i] + nums[left] + nums[right] == target:\n                return [i, left, right]\n            elif nums[i] + nums[left] + nums[right] < target:\n                left += 1\n            elif nums[i] + nums[left] + nums[right] > target:\n                right -= 1\n        \n    return None\n    \ndef two_sum_hash_table(nums, target):\n    '''\n    Find the first index of a given number which\n    is also present in nums.\n    '''\n    hash_table = {}\n    \n    # A hash map which will map the values\n    # of the list of nums to the indexes of the two\n    # elements which are also present in the list.\n    for index, num in enumerate(nums):\n        if num in hash_table:\n            return [hash_table[num], index]\n        \n        hash_table[target - num] = index\n        \n    return None\n    \ndef count_smallest_numbers(nums):\n    '''\n    Given a list of integers, return the count of the\n    smallest elements.\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    if k == 0:\n        return a[0]\n    if index == n:\n        return max_sum_increasing_subseq(a, n-1, index-1, k) + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    i = index\n    while i < n:\n        if a[i] < 0:\n            break\n        max_sum += a[i]\n        i += 1\n    while i < n:\n        if a[i] < 0:\n            return -1\n        a[i] += a[i - 1]\n        i += 1\n    # print(a)\n    # print(i)\n    # print(index)\n    # print(n)\n    # print(a)\n    # print(i)\n    return i\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    k = -k\n    max_sum = 0\n    current_sum = 0\n    i = index\n    # at any point we try to find the kth element, in which case we get the maxsum of current_sum + a[i]\n    while i < n and k > i:\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        i += 1\n        k -= 1\n    # if we try to reach the end of the array and if k is not given, then the element at index is not present in the array\n    if i >= n:\n        return max_sum\n    else:\n        return max_sum + a[i]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) < m:\n        raise ValueError('Tuple too short')\n    if len(tuplex) > n:\n        raise ValueError('Tuple too long')\n    return tuple(tuplex[:m]) + tuple(tuplex[m:n])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n == 1:\n        return tuplex[m]\n    else:\n        return colon_tuplex(tuplex, m-1, n-1) + tuplex[m][n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(len(tuplex)):\n        if i%m==0:\n            colon.append(tuplex[i])\n        elif i%n==0:\n            colon.append(tuplex[i])\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=tuplex[m:n]\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0:\n        return -1\n    else:\n        m -= 1\n        n -= 1\n        if (tuplex[m][n] == '['):\n            return colon_tuplex(tuplex,m,n)\n        else:\n            return tuplex[m][n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex[n-1]=tuplex[m-1]\n    return tuplex\ndef colon_set(set):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    set[len(set)-1]=set[len(set)-1]-set[len(set)-1]\n    return set\ndef col_set(set):\n    '''\n    Write a function to get a list of a set.\n    '''\n    set[0]=set[0]-set[0]\n    return set\ndef xor_tuplex(tuplex,m,n):\n    '''\n    Write a function to xor a tuple with another tuple.\n    '''\n    tuplex=xor_set(tuplex,m,n)\n    tuplex=xor_set(tuplex,m,n)\n    return tuplex\ndef xor_set(set,m,n):\n    '''\n    Write a function to xor a set with another set.\n    '''\n    set[m-1]=set[m-1]-set[m-1]\n    set[n-1]=set[n-1]-set[n-1]\n    set[m-1]=set[m-1]\n    set[n-1]=set[n-1]\n    return set\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if tuplex == 0:\n        tuplex = m\n    elif tuplex == 1:\n        tuplex = n\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    n = len(tuplex)\n    m = len(tuplex[0])\n    return colon_tuplex_colon(tuplex,m,n)\ndef colon_tuplex_colon(tuplex,m,n):\n    '''\n    Given a tuple of m column groups, return the colon of a tuple.\n    '''\n    if m == 0:\n        return (tuplex[0])\n    elif m == 1:\n        return tuple(tuplex[0])\n    elif m > 1:\n        return tuple(tuplex[m-1][n-1:])\ndef colon_tuplex_non_colon(tuplex,m,n):\n    '''\n    Given a tuple of m columns, return the non-colon of a tuple.\n    '''\n    if m == 0:\n        return tuplex[0]\n    elif m == 1:\n        return tuple()\n    elif m > 1:\n        return tuple(tuplex[m-1][:n])\ndef tuplex_nested_elements(tuplex,m,n):\n    '''\n    Write a function to get the nested elements of a tuple.\n    '''\n    if m == 0:\n        return tuple(tuplex[0])\n    elif m == 1:\n        return tuplex[0]\n    elif m > 1:\n        return tuplex[m-1][:n]\ndef tuplex_list(tuplex,m,n):\n    '''\n    Return a list of elements of a tuple.\n    '''\n    if m == 0:\n        return tuplex[0]\n    elif m == 1:\n        return tuplex[0]\n    elif m > 1:\n        return tuplex[m-1][:n]\ndef tuplex_other(tuplex,m,n):\n    '''\n    Return an element of the tuple as a list.\n    '''\n    if m == 0:\n        return tuplex[0]\n    elif m == 1:\n        return tuple()\n    elif m > 1:\n        return tuple(tuplex[m-1][:n])\ndef tuplex_index(tuplex,m,n):\n    '''\n    Return the index of the tuple in a list.\n    '''\n    if m == 0:\n        return n\n    elif m == 1:\n        return n\n    elif m > 1:\n        return m-1\ndef tuplex_slice(tuplex,m,n):\n    '''\n    Return the slice of a tuple.\n    '''\n    return tuplex[:m][:n]\ndef tuplex_set(tuplex,m,n):\n    '''\n    Return a set of elements of a tuple.\n    '''\n    return set(tuplex[:m][:n])\ndef tuplex_is_empty(tuplex,m,n):\n    '''\n    Return a boolean of whether the tuple is empty.\n    '''\n    return len(tuplex[:m][:n]) == 0\ndef tuplex_reorder(tuplex,m,n):\n    '''\n    Return a new tuple of the reordered tuple of the tuple.\n    '''\n    #return tuple(reversed(tuplex[:m][:n]))\n    return tuple(reversed(tuplex[:m]))\ndef tuplex_tuple_index(tuplex,m,n):\n    '''\n    Return the index of the tuple in a list.\n    '''\n    return n-m\ndef tuplex_tuple_slice(tuplex,m,n):\n    '''\n    Return the slice of a tuple.\n    '''\n    return tuplex[:m][:n]\ndef tuplex_to_string(tuplex,m,n):\n    '''\n    Return a string representation of a tuple.\n    '''\n    return ''.join(str(tuplex_tuple_index(tuplex,m,n)) for n in range(n+1))\ndef tuplex_is_comparison(tuplex,m,n):\n    '''\n    Return a boolean of whether the tuple is comparison.\n    '''\n    return n == 0 or n == m\ndef tuplex_sort(tuplex,m,n):\n    '''\n    Return the sorted tuple of the tuple.\n    '''\n    if n == 0:\n        return tuple(reversed(tuplex))\n    elif n == 1:\n        return tuple(tuplex[0])\n    else:\n        s = sorted(tuplex[:n])\n        return tuple(s[m-1])\ndef tuplex_copy(tuplex):\n    '''\n    Return a copy of a tuple.\n    '''\n    return tuple(tuplex[:])\ndef tuplex_copy_sort(tuplex,n):\n    '''\n    Return a copy of a tuple.\n    '''\n    if n == 0:\n        return tuplex[:]\n    elif n == 1:\n        return tuplex\n    else:\n        s = sorted(tuplex[:n])\n        return tuple(s[:])\ndef tuplex_deepcopy(tuplex):\n    '''\n    Return a deep copy of a tuple.\n    '''\n    if n == 0:\n        return deepcopy(tuplex)\n    elif n == 1:\n        return tuplex\n    else:\n        return tuple(deepcopy(tuplex[:n]))\ndef tuplex_remove_nth(tuplex,m,n):\n    '''\n    Remove nth element from a tuple.\n    '''\n    if n == 0:\n        return tuplex[:m]\n    elif n == 1:\n        return tuplex[:m-1]\n    elif n > 1:\n        return tuple(tuplex[:m-n])\ndef tuplex_remove_nth_n(tuplex,m,n):\n    '''\n    Remove nth element from a tuple.\n    '''\n    if n == 0:\n        return tuplex[:m]\n    elif n == 1:\n        return tuplex[:m-1]\n    elif n > 1:\n        return tuple(tuplex[:m-n])\ndef tuplex_remove_nth_tuple(tuplex,m,n):\n    '''\n    Remove nth element from a tuple.\n    '''\n    if n == 0:\n        return tuple()\n    elif n == 1:\n        return tuplex[:m]\n    elif n > 1:\n        return tuple(tuplex[:m-n])\ndef tuplex_mul(tuplex,m,n):\n    '''\n    Multiply a tuple of n elements by a number.\n    '''\n    if m == 0:\n        return tuple(tuplex[:n])\n    elif m == 1:\n        return tuplex[:n]\n    elif m > 1:\n        return tuple(tuplex[m-1][:n])\ndef tuplex_mul_n(tuplex,m,n):\n    '''\n    Multiply a tuple of n elements by a number.\n    '''\n    if n == 0:\n        return tuple(tuplex[:m])\n    elif n == 1:\n        return tuplex[:m]\n    elif n > 1:\n        return tuple(tuplex[m-1][:n])\ndef tuplex_mul_tuple(tuplex,m,n):\n    '''\n    Multiply a tuple of n elements by a number.\n    '''\n    if m == 0:\n        return tuple()\n    elif m == 1:\n        return tuplex[:n]\n    elif m > 1:\n        return tuple(tuplex[m-1][:n])\ndef tuplex_reorder_by_sort(tuplex,m,n):\n    '''\n    Return the tuple in the order in which the elements were first sorted.\n    '''\n    return tuple(sorted(tuplex[:m][:n]))\ndef "
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if (len(tuplex)!= m*n):\n        raise ValueError(\"tuplex must be of length n*m\")\n    return tuplex[0:m*n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    res=[]\n    for i in range(len(tuplex)):\n        res.append(tuplex[i][n])\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factor = 0\n    index = 0\n    while(index < N):\n        if len(nums1) > index + factor:\n            if len(nums2) > index + factor:\n                if nums1[index] > nums2[index]:\n                    factor += 1\n                else:\n                    factor += 1\n                    nums1.remove(nums1[index])\n                    nums2.remove(nums2[index])\n                    index -= 1\n            else:\n                factor += 1\n                index -= 1\n        else:\n            factor += 1\n            index -= 1\n    return factor\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # if the two lists have different size, return 0\n    if len(nums1)!= len(nums2):\n        return 0\n    \n    # create a new list to store the product of all factors\n    new_list = []\n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            new_list.append(nums1[i] * nums2[j])\n    \n    # for each of the lists, check if it's all products of the same number\n    for k in range(0, len(nums1)):\n        for l in range(0, len(nums2)):\n            if nums1[k] * nums2[l] == nums1[k] * nums2[l]:\n                new_list.remove(nums1[k] * nums2[l])\n    \n    # if there's a product, return that product\n    if len(new_list)!= 0:\n        return new_list[-1]\n    \n    # if there's not a product, return 0\n    else:\n        return 0\n    "
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    total_products = 0\n    largest_prod = 0\n    small_prod = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] * nums2[j] > largest_prod:\n                largest_prod = nums1[i] * nums2[j]\n                if nums1[i] < nums2[j]:\n                    small_prod = nums1[i]\n                else:\n                    small_prod = nums2[j]\n        total_products += largest_prod * small_prod\n    return total_products\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # write your code here\n    # return largest number in list\n    if N == 1:\n        return max(nums1, nums2)\n    return max(large_product(nums1, nums2, N-1), large_product(nums1, nums2, N-1))\n    \n    \n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # taking in the lists\n    m=len(nums1)\n    n=len(nums2)\n    # creating the list to store the result\n    lis1=[0]*(N)\n    lis2=[0]*(N)\n    # initializing the list for factor of the numbers\n    for i in range(0,N):\n        lis1[i]=nums1[i]\n        lis2[i]=nums2[i]\n    # setting the size of the list for largest product\n    l=0\n    # running a loop to find the largest product\n    while (l<m):\n        # initialize the starting value\n        start=0\n        # iterate over all the values\n        while(start<(m-l)):\n            if(lis1[start]*lis2[start+l]>0):\n                # if the number of factor is greater than the number of values\n                # then the values is stored\n                if(lis1[start]!=0 and lis2[start]!=0):\n                    for i in range(0,l):\n                        # if the product is greater than 0 then the factor is stored\n                        if(lis1[start]*lis2[start+l]>0):\n                            if(lis1[start]!=lis2[start] and lis2[start]!=0):\n                                lis1[start]=lis1[start]+lis2[start]\n                                lis2[start]=0\n                                lis2[start+l]=lis2[start+l]-lis1[start]\n                                start=start+1\n                                break\n            start=start+1\n        if(l==m):\n            break\n        l=l+1\n    return(lis1)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    index_1, index_2 = -1, -1\n    l_index_1, l_index_2 = -1, -1\n    l_index_1, l_index_2 = -1, -1\n    l_index_1, l_index_2 = -1, -1\n    max_1 = -1\n    max_2 = -1\n    max_product = -1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # The initial lists are sorted\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    if len(nums1) == 0 or len(nums2) == 0:\n        return\n    \n    n1 = len(nums1)\n    n2 = len(nums2)\n    \n    if n1 * n2 == N:\n        return\n    \n    if n1 < n2:\n        n1, n2 = n2, n1\n    \n    L = [0] * N\n    \n    # initialization\n    L[0] = nums1[0] * nums2[0]\n    for i in range(1, n1):\n        L[i] = max(L[i - 1], nums1[i] * nums2[i])\n    \n    # recursion\n    for i in range(n2):\n        if i > 0:\n            L[n1] = max(L[n1 - 1], L[i] * nums1[i])\n        if i < n1 - 1:\n            L[n1] = max(L[n1 - 1], L[i] * nums2[i])\n    \n    # print(L)\n    \n    return max(L)"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import math\n    # import itertools\n    # return sorted(itertools.combinations(nums1, N//2))\n    # return math.factorial(N//2)\n    \n    # n, m = len(nums1), len(nums2)\n    # if n > m:\n        # return -1\n    # L = sorted([sum(i) for i in zip(nums1, nums2)])\n    # return L[-1]//L[-2]\n    \n    # return (len(nums1) - len(nums2)) * math.gcd(len(nums1), len(nums2))\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    M = len(nums1)\n    N = len(nums2)\n    lP = [[] for i in range(N+1)]\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a==b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(a>b)\n    "
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # your code here\n    return max(a,b)\n    pass\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # your code here\n    return min(a,b)\n    pass\n    \ndef factorial(a):\n    '''\n    Write a python function that returns the factorial of a number.\n    '''\n    # your code here\n    if a == 1 or a == 0:\n        return 1\n    else:\n        return a * factorial(a-1)\n    pass\n    \n    \nif __name__ == '__main__':\n    print(\"Enter the two numbers: \")\n    a = int(input())\n    b = int(input())\n    print(\"The sum of the two numbers is \", maximum(a,b))\n    print(\"The minimum of the two numbers is \", minimum(a,b))\n    print(\"The factorial of the two numbers is \", factorial(a))\n    pass"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(f'The maximum of {a} and {b} is {a}')\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        max = a\n        if(a>b):\n            max = b\n        return max\n    else:\n        max = b\n        if(a>b):\n            max = a\n        return max\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nprint(\"Maximum of both numbers is: \",maximum(a,b))"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        max=a\n    else:\n        max=b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b>a:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    if (a>b):\n        return a\n    else:\n        return b\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1=[]\n    for i in range(len(str1)):\n        char=str1[i]\n        tuple1.append(char)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_list = list(str1)\n    return tuple(str_list)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_str = tuple(str1.split(\",\"))\n    return tuple_str\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \", \"\")\n    str1 = str1.replace(\".\", \"\")\n    str1 = str1.replace(\",\", \"\")\n    str1 = str1.replace(\"!\", \"\")\n    str1 = str1.replace(\"?\", \"\")\n    str1 = str1.replace(\"(\", \"\")\n    str1 = str1.replace(\")\", \"\")\n    str1 = str1.replace(\"[\", \"\")\n    str1 = str1.replace(\"]\", \"\")\n    str1 = str1.replace(\"{\", \"\")\n    str1 = str1.replace(\"}\", \"\")\n    return str1"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    str2 = str1.split()\n    return tuple(str2)"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = \"\"\n    str1 = str1.split(\" \")\n    for i in str1:\n        str2 += chr(ord(i)+1)\n    return str2\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    import string\n    return tuple(string.ascii_lowercase)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = ()\n    if not str1:\n        return t\n    for i in range(len(str1)):\n        t = t + (str1[i],)\n    return t\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_list = []\n    for char in str1:\n        tuple_list.append(char)\n    return tuple_list\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0x80:\n        return n\n    return (n & 0xFF) | 0x80\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n ^= 1\n    # To prevent the rightmost bit of the n^n = 1\n    n ^= n >> 1\n    # The first bit of n = 1\n    n ^= n >> 1\n    # The rightmost bit of n = 1\n    n ^= n >> 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return pow(n, 2, n)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        n = 1\n    return n \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(1 << n.bit_length())\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = ~n & (1 << n.bit_length())\n    return mask\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = n & ((1 << n.bit_length() - 1) - 1)\n    # print(mask)\n    n.bit_length() - 1\n    # print(n.bit_length())\n    return mask\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n & (1 << 31)):\n        return 1\n    else:\n        return 0\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    if (n & (1 << 30)):\n        return 1\n    else:\n        return 0\n    \ndef set_unset_bits(n): \n    '''\n    Write a python function to set the unset bits.\n    '''\n    output = \"\"\n    if (n & (1 << 31)):\n        output = \"0\"\n    else:\n        output = \"1\"\n    \n    if (n & (1 << 30)):\n        output = \"1\"\n    else:\n        output = \"0\"\n    \n    return output\n        \ndef convert_to_binary_and_convert_to_integer(n): \n    '''\n    Write a python function to convert a binary number to an integer.\n    '''\n    output = 0\n    for i in range(len(n)): \n        output += int(n[i]) * 2**(len(n) - 1 - i)\n    return output\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0xFF:\n        return 0xFF\n    elif n < 0xFF:\n        return 0x00\n    elif n >= 0xFF:\n        return 0xFF\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n & (1 << 31))!= 0:\n        n = n | 0x100000000\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*(h/2)**3\ndef area_of_circle(r,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r*r\ndef main():\n    '''\n    this is the main entry point for your program.\n    '''\n    # Fill in the blanks\n    print('Welcome to the volume cone program!')\n    print('What do you want to do?')\n    print('1) Find the volume of a cone')\n    print('2) Find the area of a circle')\n    print('3) Find the volume of an object')\n    print('4) Find the area of an object')\n    print('5) Quit')\n    # Read user input\n    selection = get_selection()\n    # Check if user wants to perform calculations\n    if selection == 1:\n        # Get user input\n        r = get_r()\n        # Call the function\n        volume_cone(r,get_h())\n    elif selection == 2:\n        # Get user input\n        r = get_r()\n        # Call the function\n        area_of_circle(r,get_h())\n    elif selection == 3:\n        # Get user input\n        r = get_r()\n        # Call the function\n        volume_object(r,get_h())\n    elif selection == 4:\n        # Get user input\n        r = get_r()\n        # Call the function\n        area_object(r,get_h())\n    elif selection == 5:\n        print('Goodbye.')\n        # Go to the main menu\n        pass\n    else:\n        print('Invalid selection.')\n        print('Quitting...')\n        # Call the function\n        main()\ndef get_selection():\n    '''\n    This function returns the user input for what they want to do.\n    '''\n    selection = input('Do you want to (1), (2), (3), or (4)?')\n    return selection\ndef get_r():\n    '''\n    This function returns the user input for the radius of a cone.\n    '''\n    # Fill in the blanks\n    print('What do you want to do?')\n    print('1) Get the radius of a cone')\n    print('2) Get the area of a circle')\n    print('3) Get the volume of a cone')\n    print('4) Get the area of a circle')\n    print('5) Quit')\n    # Read user input\n    selection = get_selection()\n    # Check if user wants to perform calculations\n    if selection == 1:\n        # Get user input\n        r = float(input('What is the radius of a cone? '))\n        # Call the function\n        return r\n    elif selection == 2:\n        # Get user input\n        h = float(input('What is the height of a circle? '))\n        # Call the function\n        return h\n    elif selection == 3:\n        # Get user input\n        r = float(input('What is the radius of an object? '))\n        # Call the function\n        return r\n    elif selection == 4:\n        # Get user input\n        h = float(input('What is the height of an object? '))\n        # Call the function\n        return h\n    elif selection == 5:\n        # Go to the main menu\n        pass\n    else:\n        print('Invalid selection.')\n        print('Quitting...')\n        # Call the function\n        main()\ndef get_h():\n    '''\n    This function returns the user input for the height of a cone.\n    '''\n    # Fill in the blanks\n    print('What do you want to do?')\n    print('1) Get the height of a cone')\n    print('2) Get the area of a circle')\n    print('3) Get the volume of a cone')\n    print('4) Get the area of a circle')\n    print('5) Quit')\n    # Read user input\n    selection = get_selection()\n    # Check if user wants to perform calculations\n    if selection == 1:\n        # Get user input\n        h = float(input('What is the height? '))\n        # Call the function\n        return h\n    elif selection == 2:\n        # Get user input\n        r = float(input('What is the radius of a cone? '))\n        # Call the function\n        return r\n    elif selection == 3:\n        # Get user input\n        r = float(input('What is the radius of an object? '))\n        # Call the function\n        return r\n    elif selection == 4:\n        # Get user input\n        r = float(input('What is the radius of an object? '))\n        # Call the function\n        return r\n    elif selection == 5:\n        # Go to the main menu\n        pass\n    else:\n        print('Invalid selection.')\n        print('Quitting...')\n        # Call the function\n        main()\ndef get_object(r,h):\n    '''\n    This function returns the user input for what they want to do with the object.\n    '''\n    # Fill in the blanks\n    print('What do you want to do?')\n    print('1) Get the volume of a cone')\n    print('2) Get the area of a circle')\n    print('3) Get the volume of an object')\n    print('4) Get the area of an object')\n    print('5) Quit')\n    # Read user input\n    selection = get_selection()\n    # Check if user wants to perform calculations\n    if selection == 1:\n        # Get user input\n        volume = volume_cone(r,h)\n        # Call the function\n        return volume\n    elif selection == 2:\n        # Get user input\n        r = get_r()\n        # Call the function\n        area = area_of_circle(r,h)\n        # Call the function\n        return area\n    elif selection == 3:\n        # Get user input\n        r = get_r()\n        # Call the function\n        volume = volume_object(r,h)\n        # Call the function\n        return volume\n    elif selection == 4:\n        # Get user input\n        r = get_r()\n        # Call the function\n        area = area_object(r,h)\n        # Call the function\n        return area\n    elif selection == 5:\n        # Go to the main menu\n        pass\n    else:\n        print('Invalid selection.')\n        print('Quitting...')\n        # Call the function\n        main()\ndef get_cone(r,h):\n    '''\n    This function returns the user input for what they want to do with the cone.\n    '''\n    # Fill in the blanks\n    print('What do you want to do?')\n    print('1) Get the volume of a cone')\n    print('2) Get the area of a circle')\n    print('3) Get the volume of an object')\n    print('4) Get the area of an object')\n    print('5) Quit')\n    # Read user input\n    selection = get_selection()\n    # Check if user wants to perform calculations\n    if selection == 1:\n        # Get user input\n        volume = volume_cone(r,h)\n        # Call the function\n        return volume\n    elif selection == 2:\n        # Get user input\n        r = get_r()\n        # Call the function\n        area = area_of_circle(r,h)\n        # Call the function\n        return area\n    elif selection == 3:\n        # Get user input\n        r = get_r()\n        # Call the function\n        volume = volume_object(r,h)\n        # Call the function\n        return volume\n    elif selection == 4:\n        # Get user input\n        r = get_r()\n        # Call the function\n        area = area_object(r,h)\n        # Call the function\n        return area\n    elif selection == 5:\n        # Go to the main menu\n        pass\n    else:\n        print('Invalid selection.')\n        print('Quitting...')\n        # Call the function\n        main()\ndef get_circle(r,h):\n    '''\n    This function returns the user input for what they want to do with the circle.\n    '''\n    # Fill in the blanks\n    print('What do you want to do?')\n    print('1) Get the volume of a circle')\n    print('2) Get the area of a circle')\n    print('3) Get the volume of a"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4*math.pi*r*h)/3.0\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r==0:\n        return h*h\n    else:\n        return r*volume_cone(r/2,h/2)+volume_cone(r/2,h/2)*volume_cone(r/2,h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    for i in range(0,h):\n        for j in range(0,h):\n            for k in range(0,h):\n                volume += 1/6*(4/3)**(3/2)*(((1/3)**(3/2))*((math.sin(2*math.pi*r*i/h)**3)+(math.sin(2*math.pi*r*j/h)**3)+(math.sin(2*math.pi*r*k/h)**3)))\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=0\n    for i in range(2,int(math.sqrt(r**2-h**2))):\n        if r**2-h**2<=i**2+h**2:\n            v+=1\n        if r**2-h**2>i**2+h**2:\n            break\n    return v\ndef d2(a,b):\n    '''\n    Write a function to compute the distance between two points.\n    '''\n    return math.sqrt((a[0]-b[0])**2+(a[1]-b[1])**2)\ndef find_intersection(v,h):\n    '''\n    This function is given the volume of a cone and its h value.\n    '''\n    vh=volume_cone(v,h)\n    i=0\n    x1=0\n    x2=0\n    while i<vh:\n        x1+=d2(v,v[i])\n        i+=1\n    while i<len(v)-1:\n        x2+=d2(v[i],v[i+1])\n        i+=1\n    return d2(v,v[0])*d2(v[-1],v[0])/(x1*x2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4 * math.pi * math.pow(r,2) * h\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4 * math.pi * (r**2) * (h/2)\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * r * (r/2)\n    return volume\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    volume = 4 * math.pi * (r**2)\n    return volume\ndef volume_square(a,b):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume = 4 * math.pi * (b**2)\n    return volume\ndef volume_triangle(a,b):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2)\n    return volume\ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2 + c**2)\n    return volume\ndef volume_trapezoid(a,b,c):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2 + c**2)\n    return volume\ndef volume_cylinder_transverse(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder with a transverse height.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cylinder_inverse_transverse(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder with a inverse transverse height.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_sphere_inverse_transverse(a,b,h):\n    '''\n    Write a function to find the volume of a sphere with a inverse transverse height.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cone_inverse_transverse(a,b,h):\n    '''\n    Write a function to find the volume of a cone with a inverse transverse height.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_sphere_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a sphere with a inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_circle_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a circle with a inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cylinder_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder with a inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_parallelepiped_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a parallelepiped with a inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_triangle_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a triangle with a inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cylinder_transverse_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder with a transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cylinder_inverse_transverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder with an inverse transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_sphere_inverse_transverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a sphere with an inverse transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cone_inverse_transverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cone with an inverse transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_triangle_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a triangle with an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cylinder_transverse_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder with a transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cylinder_inverse_transverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder with an inverse transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_parallelepiped_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a parallelepiped with an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_triangle_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a triangle with an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cylinder_inverse_transverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder with an inverse transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cylinder_inverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder with an inverse transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_sphere_inverse_transverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a sphere with an inverse transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume_cone_inverse_transverse_volume(a,b,h):\n    '''\n    Write a function to find the volume of a cone with an inverse transverse height and an inverse volume.\n    '''\n    volume = 4 * math.pi * (a**2 + b**2) * h\n    return volume\ndef volume"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14159*(r**2)*(math.sin(math.radians(h)))**3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (4*math.pi)*h*r**2\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0: \n        return 0\n    i = 2\n    while i < n: \n        if n % i == 0: \n            return i \n        i += 1\n    return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for num in range(2,n):\n        if num % 2 == 1:\n            return num\n        else:\n            pass\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high_Power_of_2 = 0\n    for i in range(n):\n        if (i > 0):\n            if (i == 0):\n                high_Power_of_2 = high_Power_of_2\n            elif (i < n):\n                high_Power_of_2 = max(high_Power_of_2, i**2)\n    return high_Power_of_2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n <= 1):\n        return n\n    \n    first = highest_Power_of_2(n//2)\n    second = highest_Power_of_2(n//2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n <= 0):\n        return -1\n    if(n == 1):\n        return 1\n    i = 2\n    power = 1\n    while(i <= n):\n        if(power == 2):\n            return i\n        power = power*2\n        i += 1\n    return -1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = n;\n    for i in range(2, n):\n        if (i**2) < n:\n            if i**2 > max:\n                max = i**2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def power_of_2(n): \n        '''\n        Write a python function that returns the sum of all the power of 2 smaller than or equal to n.\n        '''\n        if n < 0: \n            return None\n        if n == 0: \n            return 1\n        n_power_of_2 = power_of_2(n//2) \n        if n == n_power_of_2: \n            return n_power_of_2\n        elif n < n_power_of_2: \n            return n_power_of_2+power_of_2(n//2)\n        else: \n            return n_power_of_2\n    return power_of_2(n)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        if i < n:\n            result = result + i\n        else:\n            result = result - i\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while n!= 1: \n        if n % 2 == 0: \n            n //= 2\n            count += 1\n        else: \n            break \n    return count\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    h = 0\n    while n >= 2**h:\n        h += 1\n    return h\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n - 1) + find_lucas(n - 2))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return n\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # For numbers n greater than 1\n    # For numbers less than 1\n    if n <= 1:\n        return 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    for i in range(2,n+1):\n        lucas = lucas * i\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    luc = 2\n    x = 3\n    while x <= n:\n        y = 1\n        while y <= x:\n            yield y\n            y = y + 2\n        x += 1\n    \ndef main():\n    '''\n    Main function for testing.\n    '''\n    print(\"\\nStarting tests.\\n\")\n    for x in find_lucas(1000):\n        print(x)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 2: \n        return n\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2)\n \nprint(find_lucas(5))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 4\n    if n==5:\n        return 5\n    if n==6:\n        return 6\n    if n==7:\n        return 7\n    if n==8:\n        return 8\n    if n==9:\n        return 9\n    if n==10:\n        return 10\n    if n==11:\n        return 11\n    if n==12:\n        return 12\n    if n==13:\n        return 13\n    if n==14:\n        return 14\n    if n==15:\n        return 15\n    if n==16:\n        return 16\n    if n==17:\n        return 17\n    if n==18:\n        return 18\n    if n==19:\n        return 19\n    if n==20:\n        return 20\n    if n==21:\n        return 21\n    if n==22:\n        return 22\n    if n==23:\n        return 23\n    if n==24:\n        return 24\n    if n==25:\n        return 25\n    if n==26:\n        return 26\n    if n==27:\n        return 27\n    if n==28:\n        return 28\n    if n==29:\n        return 29\n    if n==30:\n        return 30\n    if n==31:\n        return 31\n    if n==32:\n        return 32\n    if n==33:\n        return 33\n    if n==34:\n        return 34\n    if n==35:\n        return 35\n    if n==36:\n        return 36\n    if n==37:\n        return 37\n    if n==38:\n        return 38\n    if n==39:\n        return 39\n    if n==40:\n        return 40\n    if n==41:\n        return 41\n    if n==42:\n        return 42\n    if n==43:\n        return 43\n    if n==44:\n        return 44\n    if n==45:\n        return 45\n    if n==46:\n        return 46\n    if n==47:\n        return 47\n    if n==48:\n        return 48\n    if n==49:\n        return 49\n    if n==50:\n        return 50\n    if n==51:\n        return 51\n    if n==52:\n        return 52\n    if n==53:\n        return 53\n    if n==54:\n        return 54\n    if n==55:\n        return 55\n    if n==56:\n        return 56\n    if n==57:\n        return 57\n    if n==58:\n        return 58\n    if n==59:\n        return 59\n    if n==60:\n        return 60\n    if n==61:\n        return 61\n    if n==62:\n        return 62\n    if n==63:\n        return 63\n    if n==64:\n        return 64\n    if n==65:\n        return 65\n    if n==66:\n        return 66\n    if n==67:\n        return 67\n    if n==68:\n        return 68\n    if n==69:\n        return 69\n    if n==70:\n        return 70\n    if n==71:\n        return 71\n    if n==72:\n        return 72\n    if n==73:\n        return 73\n    if n==74:\n        return 74\n    if n==75:\n        return 75\n    if n==76:\n        return 76\n    if n==77:\n        return 77\n    if n==78:\n        return 78\n    if n==79:\n        return 79\n    if n==80:\n        return 80\n    if n==81:\n        return 81\n    if n==82:\n        return 82\n    if n==83:\n        return 83\n    if n==84:\n        return 84\n    if n==85:\n        return 85\n    if n==86:\n        return 86\n    if n==87:\n        return 87\n    if n==88:\n        return 88\n    if n==89:\n        return 89\n    if n==90:\n        return 90\n    if n==91:\n        return 91\n    if n==92:\n        return 92\n    if n==93:\n        return 93\n    if n==94:\n        return 94\n    if n==95:\n        return 95\n    if n==96:\n        return 96\n    if n==97:\n        return 97\n    if n==98:\n        return 98\n    if n==99:\n        return 99\n    if n==100:\n        return 100\n    if n==101:\n        return 101\n    if n==102:\n        return 102\n    if n==103:\n        return 103\n    if n==104:\n        return 104\n    if n==105:\n        return 105\n    if n==106:\n        return 106\n    if n==107:\n        return 107\n    if n==108:\n        return 108\n    if n==109:\n        return 109\n    if n==110:\n        return 110\n    if n==111:\n        return 111\n    if n==112:\n        return 112\n    if n==113:\n        return 113\n    if n==114:\n        return 114\n    if n==115:\n        return 115\n    if n==116:\n        return 116\n    if n==117:\n        return 117\n    if n==118:\n        return 118\n    if n==119:\n        return 119\n    if n==120:\n        return 120\n    if n==121:\n        return 121\n    if n==122:\n        return 122\n    if n==123:\n        return 123\n    if n==124:\n        return 124\n    if n==125:\n        return 125\n    if n==126:\n        return 126\n    if n==127:\n        return 127\n    if n==128:\n        return 128\n    if n==129:\n        return 129\n    if n==130:\n        return 130\n    if n==131:\n        return 131\n    if n==132:\n        return 132\n    if n==133:\n        return 133\n    if n==134:\n        return 134\n    if n==135:\n        return 135\n    if n==136:\n        return 136\n    if n==137:\n        return 137\n    if n==138:\n        return 138\n    if n==139:\n        return 139\n    if n==140:\n        return 140\n    if n==141:\n        return 141\n    if n==142:\n        return 142\n    if n==143:\n        return 143\n    if n==144:\n        return 144\n    if n==145:\n        return 145\n    if n==146:\n        return 146\n    if n==147:\n        return 147\n    if n==148:\n        return 148\n    if n==149:\n        return 149\n    if n==150:\n        return 150\n    if n==151:\n        return 151\n    if n==152:\n        return 152\n    if n==153:\n        return 153\n    if n==154:\n        return 154\n    if n==155:\n        return 155\n    if n==156:\n        return 156\n    if n==157:\n        return 157\n    if n==158:\n        return 158\n    if n==159:\n        return 159\n    if n==160:\n        return 160\n    if n==161:\n        return 161\n    if n==162:\n        return 162\n    if n==163:\n        return 163\n    if n==164:\n        return 164\n    if n==165:\n        return 165\n    if n==166:\n        return 166\n    if n==167:\n        return 167\n    if n==168:\n        return 168\n    if n==169:\n        return 169\n    if n==170:\n        return 170\n    if n==171:\n        return 171\n    if n==172:\n        return 172\n    if n==173:\n        return 173\n    if n==174:\n        return 174\n    if n==175:\n        return 175\n    if n==176:\n        return 176\n    if n==177:\n        return 177\n    if n==178:\n        return 178\n    if n==179:\n        return 179\n    if n==180:\n        return 180\n    if n==181:\n        return 181\n    if n==182:\n        return 182\n    if n==183:\n        return 183\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2: \n        return n\n    else:\n        return (find_lucas(n - 1) + find_lucas(n - 2))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # Write your code here\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return find_lucas(n//2)\n    else:\n        return find_lucas(n-1) + find_lucas(n//2)\n    \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = []\n    for i in range(n+1):\n        if i%2 == 0:\n            lucas.append(i)\n    return lucas[n]\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string_list = string.split(\",\")\n    for i in range(len(list_)):\n        list_[i] = list_[i].strip()\n        list_[i] = list_[i].split(\",\")\n        for x in range(len(string_list)):\n            list_[i].append(string_list[x].strip())\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    newlist = []\n    for i in range(len(list_)):\n        newlist.append(list_[i])\n        newlist.append(string)\n    return newlist\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string=='{':\n        list_.append('{')\n    if string=='[':\n        list_.append('[')\n    if string=='}':\n        list_.append('}')\n    if string==']':\n        list_.append(']')\n    if string==\"}\":\n        list_.append('}')\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_+[string]\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = string.replace(',','').replace('.','')\n        i = '(' + i + ')'\n        print(i, end='')\n    print()\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        try:\n            element = element.format(string)\n        except AttributeError:\n            element = element.format(string)\n        \n        list_.append(element)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print(list_)\n    for ele in list_:\n        print('%s%s' % (ele, string), end='')\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # list is empty\n    if len(list_) == 0:\n        return\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = element.replace('{', '')\n        element = element.replace('}', '')\n        element = element.replace('%', '')\n        element = element.replace('&', '')\n        element = element.replace('\\n', '')\n        element = element.replace('\\r', '')\n        element = element.replace('\\t', '')\n        element = element.replace('\\u00a0', '')\n        element = element.replace('\\xa0', '')\n        element = element.replace('\\x00', '')\n        element = element.replace('\\x20', '')\n        element = element.replace('\\u200f', '')\n        element = element.replace('\\u200b', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\\\', '')\n        element = element.replace('(', '')\n        element = element.replace(')', '')\n        element = element.replace('{', '')\n        element = element.replace('}', '')\n        element = element.replace('<', '')\n        element = element.replace('<', '')\n        element = element.replace('>', '')\n        element = element.replace('>', '')\n        element = element.replace('&', '')\n        element = element.replace('\\n', '')\n        element = element.replace('\\r', '')\n        element = element.replace('\\t', '')\n        element = element.replace('\\u00a0', '')\n        element = element.replace('\\xa0', '')\n        element = element.replace('\\x00', '')\n        element = element.replace('\\x20', '')\n        element = element.replace('\\u200f', '')\n        element = element.replace('\\u200b', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\x20', '')\n        element = element.replace('\\x20', '')\n        element = element.replace('\\x20', '')\n        element = element.replace('\\x20', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('\\u2029', '')\n        element = element.replace('\\u2028', '')\n        element = element.replace('"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(item.format(string))\n    return new_list\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d1 = l1 + \" \" * (l2 + 1)\n    d1 = l1 + \" \" * (l3 + 1)\n    d1 = d1 + l3 * \"= \"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d1 = d1 + \" \" * (l2 + 1)\n    d1 = d1 + l3 * \"=\"\n    d"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = dict()\n    if l1 and l2 and l3:\n        #if key exist in the first list, convert it to nested dictionary\n        if len(l1) == len(l2):\n            for index in range(len(l1)):\n                result.setdefault(l1[index], dict())\n                result[l1[index]].setdefault(l2[index], l3[index])\n        #if key exist in the second list, convert it to nested dictionary\n        elif len(l2) == len(l3):\n            for index in range(len(l2)):\n                result.setdefault(l2[index], dict())\n                result[l2[index]].setdefault(l3[index], l1[index])\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l4 = []\n    for each_item in l1:\n        l4.append(dict(each_item))\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Write your code here.\n    newdict = {}\n    newdict['fruits'] = {}\n    newdict['fruits']['bananas'] = {}\n    newdict['fruits']['oranges'] = {}\n    newdict['fruits']['watermelon'] = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new = {}\n    new['version'] = l2\n    new['name'] = l1\n    new['url'] = l3\n    return new\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # add keys for each item\n    if l1.__class__.__name__ == 'list':\n        for k, v in l1.__dict__.items():\n            l3[k] = convert_list_dictionary(v, l2[k], l3)\n    elif l1.__class__.__name__ == 'dict':\n        l3[l1.__class__.__name__] = {}\n        for k, v in l1.__dict__.items():\n            l3[l1.__class__.__name__][k] = convert_list_dictionary(v, l2[k], l3)\n    elif l1.__class__.__name__ =='str':\n        l3[l1.__class__.__name__] = l1\n    return l3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1[0] not in [list(l1[1:])[0]] and l2[0] not in [list(l2[1:])[0]] and l3[0] not in [list(l3[1:])[0]]:\n        d1 = {}\n        d2 = {}\n        d3 = {}\n        for i in range(len(l1)):\n            if l1[i] not in [list(l1[i+1:])[0]]:\n                d1[l1[i]] = convert_list_dictionary(l1[:i], l2[:i], l3[:i])\n        for i in range(len(l2)):\n            if l2[i] not in [list(l2[i+1:])[0]]:\n                d2[l2[i]] = convert_list_dictionary(l1[:i], l3[:i], l3[i+1:])\n        for i in range(len(l3)):\n            if l3[i] not in [list(l3[i+1:])[0]]:\n                d3[l3[i]] = convert_list_dictionary(l1[:i], l2[:i], l1[i+1:])\n        return d1, d2, d3\n    else:\n        return [{l1[i]:convert_list_dictionary(l1[:i], l2[:i], l3[:i])[l1[i]:][l2[i]:]} for i in range(len(l1))]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    \n    if len(l1) > 0 and l2 == [] and len(l3) == 0:\n        d = l1[0]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    dict2 = {}\n    dict3 = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        d1[i] = {}\n        for j in range(len(l1[i])):\n            d1[i][j] = l1[i][j]\n    for i in range(len(l2)):\n        d2 = {}\n        for j in range(len(l2[i])):\n            d2[j] = {}\n            for k in range(len(l2[i][j])):\n                d2[j][k] = l2[i][j][k]\n        d3 = {}\n        for k in range(len(l3[i])):\n            d3[k] = {}\n            for l in range(len(l3[i][k])):\n                d3[k][l] = l3[i][k][l]\n    return d1, d2, d3\n    \ndef convert_to_list(s):\n    '''\n    Take a string as input and return a list of that string.\n    '''\n    if isinstance(s, str):\n        return [s]\n    else:\n        return s\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_sum (n):\n        sum = 0\n        for i in range (n):\n            sum = sum + (i * (i + 1)) // 2\n        return sum\n    \n    def get_result (n):\n        sum = get_sum(n) // (n * (n + 1))\n        return sum\n    \n    return get_result(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # For the given number n\n    # Try to find the maximum sum possible by using this formula:\n    #  f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # return f(n)\n    \n    # For the given number n,\n    # try to find the maximum sum possible by using this formula:\n    # f(n) = max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # return f(n)\n    \n    # For the given number n,\n    # try to find the maximum sum possible by using this formula:\n    # f(n) = max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # return f(n)\n    \n    # For the given number n,\n    # try to find the maximum sum possible by using this formula:\n    # f(n) = max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #find the even numbers\n    even_numbers = [0,0,0,0]\n    for i in range (2,n+1):\n        if (i % 2 == 0):\n            even_numbers[i-2] = even_numbers[i-1] + i\n    #find the odd numbers\n    odd_numbers = [0,0,0,0]\n    for i in range (2,n+1):\n        if (i % 3 == 0):\n            odd_numbers[i-2] = odd_numbers[i-1] + i\n    #get the max\n    max_sum = max(even_numbers[1] + odd_numbers[1])\n    for i in range (2,n+1):\n        if (even_numbers[i-2] == odd_numbers[i-1]):\n            max_sum = max(max_sum,even_numbers[i-2] + odd_numbers[i-1])\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    sum_numbers = 0\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return -1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    MAX = -1\n    s = 0\n    m = 1\n    # f(n) = ((f(n/2) + f(n/3) + f(n/4) + f(n/5)) / (2 * n))\n    for i in range (1, n+1):\n        s += i*i\n        m *= i\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    max_f = 1\n    for n in range (2, n):\n        max_f = max (max_f, (f (n/2) + f (n/3) + f (n/4) + f (n/5)) - n)\n    return max_f\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # f(n/2)\n    # f(n/3)\n    # f(n/4)\n    # f(n/5)\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #dynamic programming\n    dp = [0 for i in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-1] + 2*dp[i])\n    return dp[n-1]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return [len(i) for i in input_list]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for ele in input_list:\n        if len(ele) > max_len:\n            max_len = len(ele)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list)\n    for i in range(len(input_list)):\n        if input_list[i] > max_length:\n            max_length = input_list[i]\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lst = list()\n    for num in input_list:\n        lst.append(num)\n    return max(lst, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key = len)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # this is a tuple of (1, 'hello', 3, 'there')\n    tup_check = []\n    for i in test_tup:\n        if i not in tup_check:\n            tup_check.append(i)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    counter = 0\n    for i in test_tup:\n        if i in test_tup:\n            counter += 1\n    if counter == len(test_tup):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if type(test_tup) is tuple:\n        for i in range(len(test_tup)):\n            if test_tup[i] in test_tup:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = set(test_tup)\n    if len(test_tup) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Base case - empty list\n    if len(test_tup) == 0:\n        return True\n    \n    # Calculate the minimum element in a tuple\n    # If it is equal to the next element of a tuple\n    min_index = min(test_tup, key=lambda i: test_tup.count(i))\n    \n    # Update all elements of the tuple in an ordered list\n    # with the minimum element\n    test_tup.remove(min_index)\n    test_tup.append(min_index)\n    \n    # Check if the tuple contains no duplicate values\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = len(set(test_tup))\n    return True, distinct\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #check if any value in tup is duplicated\n    val_set = set(test_tup)\n    return len(val_set) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct_tuple = set(test_tup)\n    return len(distinct_tuple) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Initialize an empty dictionary\n    d = dict()\n    for tup in test_tup:\n        # Add each element to the dictionary\n        if tup in d.keys():\n            d[tup] += 1\n        else:\n            d[tup] = 1\n    # Loop through the dictionary and check for any duplicate entries\n    for key, value in d.items():\n        if value > 1:\n            print(\"'%s' is a duplicate.\" % key)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Iterate through the string and remove all occurrences of first character from string.\n    # Return character that is not repeated anywhere.\n    \n    # Approach 1 - Using Python Dictionary, O(N)\n    # Time O(N)\n    # Space O(1)\n    \n    my_dictionary = {}\n    for i in range(len(str1)):\n        if str1[i] not in my_dictionary:\n            my_dictionary[str1[i]] = 1\n        else:\n            my_dictionary[str1[i]] += 1\n    \n    first_non_repeating_char = list(my_dictionary)[0]\n    return first_non_repeating_char\n    \n    # Approach 2 - Using Hash Table, O(N)\n    # Time O(N)\n    # Space O(N)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1)<=1:\n        return -1\n    else:\n        count = {}\n        for c in str1:\n            if c in count:\n                count[c]+=1\n            else:\n                count[c]=1\n        for k,v in count.items():\n            if v==1:\n                return k\n        return -1\nstr1 = \"dccb\""
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = dict()\n    for char in str1:\n        if char not in count:\n            count[char] = 0\n        count[char] += 1\n    return count.most_common(1)[0][0]\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for c in str1:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for c in freq:\n        if freq[c] == 1:\n            return c\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = list(str1)\n    \n    char_set = set(char_list)\n    \n    if char_set.issubset(set(str1)):\n        return char_list[0]\n    else:\n        return '#'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # The value of each character is stored in a list.\n    # This function will iterate through the list of characters,\n    # and if a character is repeated in the given string, it will return that character.\n    # This function will return the first character that is not repeated.\n    # First pass:\n    # Find the first character that is not repeated.\n    # Second pass:\n    # Keep going until the first character is repeated in the string.\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # This is a little trick that makes it more efficient, because I don't know the length of the string.\n    # I want to avoid this if I want to return the first character that is not repeated, because the first character\n    # is already repeated in the string, and you have to return the second character.\n    '''\n    string = str1\n    character = str1[0]\n    index = 0\n    while index < len(str1):\n        if str1[index]!= character:\n            return character\n        index += 1\n    return character\n    '''\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    s = str1.lower().strip()\n    \n    # if the string is empty, return None\n    if len(s) == 0:\n        return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    patterns = ['0','1','2','3','4','5','6','7','8','9']\n    index = 0\n    while index < len(str1):\n        if str1[index] not in patterns:\n            index += 1\n        else:\n            break\n    if index == len(str1):\n        return '\\0'\n    return str1[index]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = str1.split()\n    for char in char_list:\n        if char not in char_list:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    frequency = {}\n    for i in str1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    for i in range(len(str1)):\n        if frequency[str1[i]] == 1:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string: \n        return False\n    check = re.match(regex, string)\n    if not check: \n        return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #the regex is to check whether the given string starts and ends with the same character or not\n    if string.startswith(string[::-1]) and string.endswith(string[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.lower()\n    if string[0] == string[-1]: \n        return string[0] == string[-1]\n    else: \n        return False \n    \ndef is_alpha(string): \n    '''\n    Check whether a given string is alpha or not.\n    '''\n    return all(c.isalpha() for c in string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('['):\n        return False\n    if string.endswith(']'):\n        return False\n    if re.match(regex, string) == None:\n        return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\ndef filter_char(string):\n    '''\n    Filter string such that:\n    1. all characters only that are alphabetic are typed and\n    2. every character except the first character is typed (also not included).\n    '''\n    # Remove white spaces\n    string = re.sub(r'\\s+','', string)\n    # Remove all punctuations\n    string = re.sub(r'[!?]+', '', string)\n    # Remove whitespace characters\n    string = re.sub(r'[\\s]+','', string)\n    # Remove digits\n    string = re.sub(r'\\d+', '', string)\n    # Replace spaces with an underscore\n    string = re.sub(r'\\s+', '_', string)\n    return string\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match is not None:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string:\n        raise TypeError(\"Input should not be empty\")\n    if len(string) < 1 or len(string) > 50:\n        raise TypeError(\"Input should be between 1 to 50 characters\")\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    elif string[0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return True\n    for c in string:\n        if c not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return False\n    return True\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)<3:\n        raise ValueError('Less than three numbers needed for median')\n    if len(b)<3:\n        raise ValueError('Less than three numbers needed for median')\n    if len(c)<3:\n        raise ValueError('Less than three numbers needed for median')\n    \n    d=[]\n    for i in range(len(a)):\n        d.append(a[i]+b[i]+c[i])\n    d.sort()\n    x=len(d)\n    if x%2==1:\n        return d[x//2]\n    else:\n        return (d[x//2-1]+d[x//2])/2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==0:\n        a=0.00\n    if b==0:\n        b=0.00\n    if c==0:\n        c=0.00\n    if a==b:\n        a=0.00\n    if a==c:\n        a=0.00\n    if b==c:\n        b=0.00\n    if c==a:\n        c=0.00\n    if a<b and b<c:\n        return a\n    if a<b and c<a:\n        return b\n    if a<c and b<a:\n        return c\n    if a<c and c<b:\n        return a\n    if b<c and a<a:\n        return b\n    if a<c and c<b:\n        return c\n    if c<a and b<a:\n        return c\n    if c<a and a<b:\n        return c\n    if a<b and b<c:\n        return a\n    if b<c and a<c:\n        return b\n    if b<c and c<a:\n        return c\n    if a<b and c<b:\n        return a\n    if a<c and c<c:\n        return b\n    if a<b and c<c:\n        return c\n    if a<c and c<a:\n        return a\n    if c<b and a<b:\n        return c\n    if c<b and a<b:\n        return b\n    if c<b and b<a:\n        return b\n    if c<b and a<a:\n        return c\n    if a<b and b<c:\n        return b\n    if c<b and a<c:\n        return a\n    if a<b and c<b:\n        return b\n    if c<b and b<a:\n        return a\n    if c<b and a<c:\n        return b\n    if a<b and b<c:\n        return a\n    if b<c and a<c:\n        return a\n    if a<b and c<b:\n        return b\n    if a<b and c<a:\n        return a\n    if b<c and a<c:\n        return b\n    if b<c and a<a:\n        return a\n    if a<c and a<c:\n        return a\n    if c<b and a<b:\n        return c\n    if a<c and b<a:\n        return b\n    if a<c and b<c:\n        return c\n    if a<c and b<a:\n        return a\n    if a<b and b<b:\n        return b\n    if b<c and a<c:\n        return b\n    if a<b and b<a:\n        return a\n    if a<c and a<c:\n        return a\n    if c<b and a<b:\n        return c\n    if c<b and a<a:\n        return b\n    if c<b and a<a:\n        return c\n    if a<b and b<a:\n        return a\n    if a<b and b<b:\n        return a\n    if a<c and b<c:\n        return b\n    if b<c and a<c:\n        return c\n    if b<c and a<a:\n        return a\n    if c<b and a<b:\n        return a\n    if c<b and a<a:\n        return a\n    if c<b and b<a:\n        return b\n    if c<b and a<c:\n        return b\n    if a<b and a<c:\n        return a\n    if a<c and a<c:\n        return c\n    if a<c and b<c:\n        return a\n    if b<c and a<c:\n        return b\n    if c<b and a<b:\n        return c\n    if a<b and a<a:\n        return a\n    if b<c and a<a:\n        return b\n    if a<b and a<c:\n        return a\n    if a<b and b<c:\n        return a\n    if b<c and a<b:\n        return b\n    if a<c and a<c:\n        return a\n    if a<c and b<a:\n        return c\n    if a<c and b<c:\n        return c\n    if b<c and a<a:\n        return b\n    if c<b and a<b:\n        return c\n    if c<b and a<b:\n        return a\n    if c<b and b<a:\n        return c\n    if a<b and a<a:\n        return a\n    if a<b and a<c:\n        return a\n    if b<c and a<c:\n        return b\n    if a<c and a<c:\n        return a\n    if a<c and b<a:\n        return b\n    if a<c and a<a:\n        return a\n    if a<c and b<b:\n        return a\n    if c<b and a<b:\n        return a\n    if c<b and b<b:\n        return a\n    if c<b and b<c:\n        return a\n    if b<c and a<c:\n        return a\n    if c<b and a<b:\n        return a\n    if c<b and a<b:\n        return b\n    if b<c and a<c:\n        return b\n    if c<b and a<c:\n        return c\n    if a<b and a<a:\n        return a\n    if a<b and a<b:\n        return b\n    if a<c and b<c:\n        return a\n    if a<c and b<a:\n        return c\n    if a<c and b<b:\n        return a\n    if a<c and c<b:\n        return a\n    if a<c and c<c:\n        return a\n    if a<b and c<c:\n        return a\n    if b<c and a<c:\n        return b\n    if a<c and c<c:\n        return a\n    if a<c and c<b:\n        return c\n    if a<b and c<b:\n        return a\n    if b<c and a<c:\n        return b\n    if c<b and a<c:\n        return c\n    if a<c and a<b:\n        return a\n    if b<c and a<b:\n        return b\n    if b<c and a<a:\n        return b\n    if c<b and a<a:\n        return b\n    if a<b and a<c:\n        return a\n    if b<c and a<c:\n        return a\n    if c<b and a<b:\n        return a\n    if a<c and a<b:\n        return b\n    if c<b and b<a:\n        return c\n    if b<c and a<c:\n        return b\n    if c<b and a<c:\n        return b\n    if c<b and a<b:\n        return a\n    if a<c and a<b:\n        return a\n    if a<b and a<c:\n        return b\n    if a<b and c<c:\n        return a\n    if c<b and a<b:\n        return c\n    if c<b and a<c:\n        return c\n    if a<b and b<a:\n        return c\n    if c<b and b<c:\n        return b\n    if a<b and b<a:\n        return b\n    if c<b and b<c:\n        return b\n    if a<b and c<c:\n        return a\n    if c<b and c<b:\n        return a\n    if a<c and c<c:\n        return a\n    if b<c and a<c:\n        return a\n    if c<c and a<c:\n        return c\n    if a<c and c<c:\n        return a\n    if b<c and a<c:\n        return b\n    if c<c and a<a:\n        return a\n    if b<c and a<a:\n        return b\n    if c<c and a<c:"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a>b and a>c:\n        median=a\n    elif b>a and b>c:\n        median=b\n    else:\n        median=c\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if b>a and b>c:\n        return a\n    elif c>a and c>b:\n        return c\n    elif a<b and a<c:\n        return b\n    else:\n        return c\ndef median(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if b>a and b>c:\n        return a\n    elif c>a and c>b:\n        return c\n    elif a<b and a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = []\n    for i in range(a,b):\n        for j in range(c,d):\n            lst.append(i+j)\n    lst.sort()\n    print(lst[int(len(lst)/3)])\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0:\n        return None\n    if len(a) % 2 == 0:\n        return (a[len(a)//2 -1]+a[len(a)//2])/2\n    else:\n        return a[(len(a)-1)//2]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) < 3:\n        return\n    if len(a)%2 == 1:\n        return a[int((len(a)-1)/2)]\n    if len(a)%2 == 0:\n        return a[int((len(a)/2) -1)]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) > len(b) and len(a) > len(c):\n        med = a[len(a)-1]\n    elif len(b) > len(a) and len(b) > len(c):\n        med = b[len(b)-1]\n    else:\n        med = c[len(c)-1]\n    return med\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create three list, both will be used later\n    list1 = [a,b,c]\n    # Sort them, and get the middle one\n    a,b,c = sorted(list1)\n    # Check if the list is in ascending order, if not return the smallest\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = (a + b + c) // 3\n    print(median)\n    return median\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Hint: https://www.youtube.com/watch?v=M8SZcX5FVMQ&ab_channel=Praw\n    nums_length = len(nums)\n    # initialize the sum\n    sum = 0\n    # traverse through each number in the list\n    for num in nums:\n        # if it is a digit then sum up the digits\n        # (number may be divisible by 10)\n        if num!= 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(c) for c in str(nums) if c.isdigit()])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # TODO: Your code here\n    if nums == []:\n        return 0\n    elif len(nums) == 1:\n        return sum(nums)\n    else:\n        return nums[0]+sum_of_digits(nums[1:])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    # if len(nums) == 1:\n    #     return nums[0]\n    # else:\n    #     return nums[0] + sum_of_digits(nums[1:])\n    \n    return sum([int(num) for num in str(nums)])\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + int(str(num)[::-1])\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # TODO\n    total_sum = 0\n    for i in nums:\n        total_sum += i\n    return total_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    \n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums_sum = 0\n    for num in nums:\n        nums_sum += int(num)\n    return nums_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = 0\n    for i in nums:\n        digits_sum += i\n    return digits_sum\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        xor_tup1 = tuple(map(lambda a, b: a ^ b, test_tup1, test_tup2))\n        xor_tup2 = tuple(map(lambda a, b: a ^ b, test_tup2, test_tup1))\n        return (xor_tup1, xor_tup2)\n    else:\n        return tuple((lambda a: a ^ b, lambda b: b ^ a) for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for x,y in zip(test_tup1,test_tup2):\n        xor_result |= x ^ y\n    return xor_result\n    \ndef xor_num_bytes(value,n):\n    '''\n    Write a function to perform the xor operation between the given number and n bytes of data.\n    '''\n    if n == 1:\n        return value\n    \n    # initialize the result\n    res = 0\n    for i in range(n):\n        res = (res << 1) + value\n        res = (res & 2**(n-1))\n    return res\n    \ndef xor_bytes(a,b):\n    '''\n    Write a function to perform the xor operation between the given bytes of data and n bytes.\n    '''\n    if len(a)!= len(b):\n        print(\"Error: Invalid number of bytes\")\n        return\n    \n    # initialize result\n    res = 0\n    for i in range(len(a)):\n        res = (res << 1) + a[i] ^ b[i]\n        res = (res & 2**(len(b)-1))\n    return res\n    \ndef mul_bytes(a, b):\n    '''\n    Write a function to perform the xor operation between the given bytes of data and n bytes.\n    '''\n    if len(a)!= len(b):\n        print(\"Error: Invalid number of bytes\")\n        return\n    \n    # initialize result\n    res = 0\n    for i in range(len(a)):\n        res = (res << 1) + a[i] * b[i]\n        res = (res & 2**(len(b)-1))\n    return res\n    \ndef add_bytes(a, b):\n    '''\n    Write a function to perform the xor operation between the given bytes of data and n bytes.\n    '''\n    if len(a)!= len(b):\n        print(\"Error: Invalid number of bytes\")\n        return\n    \n    # initialize result\n    res = 0\n    for i in range(len(a)):\n        res = (res << 1) + a[i] + b[i]\n        res = (res & 2**(len(b)-1))\n    return res\n    \ndef add_bytes_dec(a,b):\n    '''\n    Write a function to perform the xor operation between the given bytes of data and n bytes.\n    '''\n    if len(a)!= len(b):\n        print(\"Error: Invalid number of bytes\")\n        return\n    \n    # initialize result\n    res = 0\n    for i in range(len(a)):\n        res = (res << 1) + b[i] + a[i]\n        res = (res & 2**(len(a)-1))\n    return res\n    \ndef mult_bytes(a,b):\n    '''\n    Write a function to perform the xor operation between the given bytes of data and n bytes.\n    '''\n    if len(a)!= len(b):\n        print(\"Error: Invalid number of bytes\")\n        return\n    \n    # initialize result\n    res = 0\n    for i in range(len(a)):\n        res = (res << 1) + a[i] * b[i]\n        res = (res & 2**(len(b)-1))\n    return res\n    \ndef div_bytes(a,b):\n    '''\n    Write a function to perform the xor operation between the given bytes of data and n bytes.\n    '''\n    if len(a)!= len(b):\n        print(\"Error: Invalid number of bytes\")\n        return\n    \n    # initialize result\n    res = 0\n    for i in range(len(a)):\n        res = (res << 1) + a[i] * b[i]\n        res = (res & 2**(len(b)-1))\n    return res\n    \ndef divide_bytes(a, b):\n    '''\n    Write a function to perform the xor operation between the given bytes of data and n bytes.\n    '''\n    if len(a)!= len(b):\n        print(\"Error: Invalid number of bytes\")\n        return\n    \n    # initialize result\n    res = 0\n    for i in range(len(a)):\n        res = (res << 1) + a[i] * b[i]\n        res = (res & 2**(len(b)-1))\n    return res\n    \ndef xor_bytes_dec(a, b):\n    '''\n    Write a function to perform the xor operation between the given bytes of data and n bytes.\n    '''\n    if len(a)!= len(b):\n        print(\"Error: Invalid number of bytes\")\n        return\n    \n    # initialize result\n    res = 0\n    for i in range(len(a)):\n        res = (res << 1) + a[i] ^ b[i]\n        res = (res & 2**(len(b)-1))\n    return res\n    "
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # complete the code here\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_list = []\n    test_tup2_list = []\n    for i in range(len(test_tup1)):\n        test_tup1_list.append(test_tup1[i] ^ test_tup2[i])\n    return test_tup1_list\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return sum(xor(test_tup1[i],test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    for index in range(len(test_tup1)):\n        if index % 2 == 1:\n            test_tup1[index] = test_tup1[index] ^ test_tup2[index]\n        else:\n            test_tup1[index] = test_tup1[index] ^ test_tup2[index] ^ test_tup1[index]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = 0\n    for i in range(len(test_tup1)):\n        res += int(test_tup1[i]) * int(test_tup2[i])\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tuple += (test_tup1[i], test_tup2[i])\n        return result_tuple\n    else:\n        return \"Wrong tuples in xor operation\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = 0\n    for i in test_tup1:\n        res = res ^ i\n    for i in test_tup2:\n        res = res ^ i\n    return res\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for i in test_list:\n        freq.append(i.count('('))\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # TO DO: convert test_list to a list of tuples, then count how many unique tuples there are\n    # TO DO: write a test for this function and complete the tests\n    # HINT: you may need to read the docs for this function, to help you debug\n    # HINT: you may want to ignore the following comment and uncomment the code below\n    # HINT: consider using the count function and a while loop\n    # HINT: use the len function to find the length of the list\n    # HINT: remember to include spaces around the comma and quote around the values\n    # HINT: use a return statement to print the result of your function\n    # HINT: use two for loops for testing\n    # HINT: use the sum() function to sum all the numbers in a list\n    # HINT: use the index() function to find the index of a particular value in a list\n    # HINT: use the sorted() function to return a list sorted in ascending order\n    # HINT: use the sum() function to return the total number of numbers in a list\n    # HINT: use the len() function to find the length of a list\n    # HINT: use a for loop for testing\n    # HINT: write two nested loops to test your function\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # Create a list to hold frequency counts\n    freq_list = []\n    for i in range(len(test_list)):\n        freq_list.append(0)\n    \n    # Process all items in the test_list\n    for i in test_list:\n        # Append the frequency of that item to the\n        # corresponding index of the frequency list\n        freq_list[i] += 1\n    \n    # Return the number of unique tuples in the list\n    return len(freq_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_test_list = []\n    test_list = []\n    for i in range(len(test_list)):\n        test_list.append(test_list[i])\n        test_list[i] = tuple(test_list[i])\n        unique_test_list.append(len(test_list[i]))\n    return unique_test_list\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for item in test_list:\n        if item not in freq_list:\n            freq_list.append(item)\n    return freq_list\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    cnt = 0\n    for line in test_list:\n        line = line.strip('\\n')\n        line = line.split(': ')\n        if len(line) > 2:\n            line = line[1]\n        else:\n            line = line[0]\n        try:\n            freq = int(line)\n        except ValueError:\n            continue\n        cnt += freq\n    return cnt\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    for i in test_list:\n        i = i.strip()\n        i = i.replace('\\n', '')\n        if ',' in i:\n            i = i.split(',')\n            for j in i:\n                j = j.strip()\n                j = j.replace('\\n', '')\n                if ',' in j:\n                    j = j.split(',')\n                    count = 0\n                    for k in j:\n                        k = k.strip()\n                        k = k.replace('\\n', '')\n                        if k!= '':\n                            count += 1\n                    print(count)\n                else:\n                    j = j.strip()\n                    j = j.replace('\\n', '')\n                    if j!= '':\n                        count += 1\n                    print(count)\n        else:\n            if i!= '':\n                j = i.strip()\n                j = j.replace('\\n', '')\n                if j!= '':\n                    count += 1\n                print(count)\n    print(count)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_test_list = []\n    for element in test_list:\n        unique_test_list.append(element[1])\n    return len(unique_test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count_of_tuples = 0\n    for tup in test_list:\n        count_of_tuples += len(tup)\n    return count_of_tuples\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    \n    def add_nested_tuples(tup1, tup2):\n        # Base Case\n        if len(tup1)!= len(tup2):\n            print('Error - Please enter two different nested tuples')\n            return\n        \n        # Base Case\n        if len(tup1) == 1:\n            return tup1[0] + tup2[0]\n        \n        # Edge Cases\n        elif len(tup1) == 2:\n            return tup1[0] + tup2[0] + tup2[1]\n        \n        # Edge Cases\n        else:\n            return tup1[0] + tup2[0] + tup2[1] + tup2[2]\n        \n    #Initializing variables\n    add_tup1 = []\n    add_tup2 = []\n    \n    #Looping through the given tuples, extracting them and adding them to the correct nested tuples\n    for index in range(len(test_tup1)):\n        add_tup1.append(test_tup1[index][0])\n        add_tup2.append(test_tup2[index][0])\n    \n    #Adding the tuples into the correct nested tuples\n    for index in range(len(add_tup1)):\n        add_nested_tuples(add_tup1[index], add_tup2[index])\n        \n    #Returning the adder with the first element of the two tuples\n    return add_nested_tuples(add_tup1[0], add_tup2[0])\n    \n    \n    \ndef main():\n    '''\n    Tests the add_nested_tuples function\n    '''\n    \n    #Test 1 - Basic cases\n    test_tup1 = [ [1,2,3], [4,5,6], [7,8,9] ]\n    test_tup2 = [ [11,12,13], [14,15,16], [17,18,19] ]\n    assert add_nested_tuples(test_tup1, test_tup2) == 18, f'Expected {18}, got {add_nested_tuples(test_tup1, test_tup2)}'\n    \n    #Test 2 - Tuples with one inner tuple and two outer tuples\n    test_tup3 = [ [1,2,3], [4,5,6], [7,8,9] ]\n    test_tup4 = [ [11,12,13], [14,15,16], [17,18,19] ]\n    assert add_nested_tuples(test_tup3, test_tup4) == 18, f'Expected {18}, got {add_nested_tuples(test_tup3, test_tup4)}'\n    \n    #Test 3 - Tuple with one tuple\n    test_tup5 = [ [1,2,3], ]\n    assert add_nested_tuples(test_tup5, test_tup5) == 0, f'Expected 0, got {add_nested_tuples(test_tup5, test_tup5)}'\n    \n    #Test 4 - Tuple with two nested tuples\n    test_tup6 = [ [1,2,3], [4,5,6], [7,8,9] ]\n    assert add_nested_tuples(test_tup6, test_tup6) == 18, f'Expected {18}, got {add_nested_tuples(test_tup6, test_tup6)}'\n    \n    #Test 5 - Tuple with one nested tuple with two tuples\n    test_tup7 = [ [1,2,3], [4,5,6], [7,8,9] ]\n    assert add_nested_tuples(test_tup7, test_tup7) == 18, f'Expected {18}, got {add_nested_tuples(test_tup7, test_tup7)}'\n    \n    #Test 6 - Tuple with one nested tuple with one tuple\n    test_tup8 = [ [1,2,3], ]\n    assert add_nested_tuples(test_tup8, test_tup8) == 0, f'Expected 0, got {add_nested_tuples(test_tup8, test_tup8)}'\n    \n    #Test 7 - Tuple with one nested tuple with one nested tuple\n    test_tup9 = [ [1,2,3], [4,5,6], [7,8,9] ]\n    assert add_nested_tuples(test_tup9, test_tup9) == 18, f'Expected {18}, got {add_nested_tuples(test_tup9, test_tup9)}'\n    \n    #Test 8 - Tuple with one nested tuple with one nested tuple\n    test_tup10 = [ [1,2,3], [4,5,6], [7,8,9] ]\n    assert add_nested_tuples(test_tup10, test_tup10) == 18, f'Expected {18}, got {add_nested_tuples(test_tup10, test_tup10)}'\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print(f'TUPLES: {test_tup1} and {test_tup2}')\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # TODO: Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    # Hint: You'll need to create a new tuple from the two existing tuples in your code.\n    # More information: https://www.w3schools.com/python/python_tuples.asp\n    \n    result = tuple([])\n    \n    for index, value in enumerate(test_tup1):\n        add_tuple = (test_tup2[index])\n        result = result + add_tuple\n    \n    return result\n    \n    \ndef test_add_nested_tuples():\n    assert add_nested_tuples([1, 2, 3], [4, 5, 6]) == (6, 7, 8)\n    assert add_nested_tuples([1, 2, 3], [4, 5, 6, 7]) == (6, 7, 8)\n    \ndef main():\n    assert add_nested_tuples([1, 2, 3], [4, 5, 6]) == (6, 7, 8)\n    assert add_nested_tuples([1, 2, 3], [4, 5, 6, 7]) == (6, 7, 8)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # First we create a list of tuples with the tuple contents\n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        # We use a for loop to access the tuple contents\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] + test_tup2[i]\n        # We return the tuple with the tuple contents\n        return tuple(test_tup1)\n    else:\n        return \"Error, the given arguments must be of type tuple\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # TODO: Write code to perform index wise addition of tuple elements in the given two nested tuples.\n    # NOTE: Assume that indexing from beginning of the tuple is the same as indexing from the first element of the tuple.\n    #       So if you want to write an index-wise addition of two tuples, you have to perform it via the function first_tuple.add_nested_tuples().\n    #       Hint: Use a new function called nested_tuples_to_index_wise.\n    #       You can write the function and test it using this function index_wise_add_tuples().\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested(t1, t2):\n        i = 0\n        while i < len(t1) and i < len(t2):\n            temp_tuple = (t1[i], t2[i])\n            print(tuple(temp_tuple))\n            i += 1\n    add_nested(test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    t1_index = 0\n    t2_index = 0\n    index_t1 = 0\n    index_t2 = 0\n    t1_tuple = ()\n    t2_tuple = ()\n    t1_index_tuple = ()\n    t2_index_tuple = ()\n    t1_index_tuple = ()\n    t2_index_tuple = ()\n    t1_index_tuple = ()\n    t2_index_tuple = ()\n    index_t1_tuple = ()\n    index_t2_tuple = ()\n    t1_index_tuple = ()\n    t2_index_tuple = ()\n    t1_index_tuple = ()\n    t2_index_tuple = ()\n    index_t1_tuple = ()\n    index_t2_tuple = ()\n    index_t1_tuple = ()\n    index_t2_tuple = ()\n    for i in range(len(test_tup1)):\n        t1_index_tuple = (index_t1, test_tup1[i][0], test_tup1[i][1])\n        t1_index_tuple = tuple(t1_index_tuple)\n        t1_index_tuple = str(t1_index_tuple)\n        index_t1_tuple = (index_t1_tuple, t1_index_tuple)\n        index_t1_tuple = str(index_t1_tuple)\n        t1_index_tuple = (index_t1_tuple, t1_index_tuple)\n        index_t1_tuple = str(index_t1_tuple)\n        t1_index_tuple = (index_t1_tuple, t1_index_tuple)\n        index_t1_tuple = str(index_t1_tuple)\n        t1_index = int(index_t1_tuple[0])\n        t1_index = t1_index\n        t1_index = str(t1_index)\n        t1_index = t1_index\n        t1_index = t1_index\n        t1_index_tuple = (index_t1_tuple, t1_index)\n        t1_index_tuple = str(t1_index_tuple)\n        index_t1_tuple = (index_t1_tuple, t1_index_tuple)\n        index_t1_tuple = str(index_t1_tuple)\n        t1_index_tuple = (index_t1_tuple, t1_index_tuple)\n        t1_index_tuple = str(t1_index_tuple)\n        index_t1_tuple = (index_t1_tuple, t1_index_tuple)\n        t1_index_tuple = str(t1_index_tuple)\n        t1_index = int(t1_index_tuple[0])\n        t1_index = t1_index\n        t1_index = t1_index\n        t1_index_tuple = (index_t1_tuple, t1_index)\n        t1_index_tuple = str(t1_index_tuple)\n        index_t1_tuple = (index_t1_tuple, t1_index_tuple)\n        index_t1_tuple = str(index_t1_tuple)\n        t1_index = int(index_t1_tuple[0])\n        t1_index = t1_index\n        t1_index = t1_index\n        t1_index_tuple = (index_t1_tuple, t1_index)\n        t1_index_tuple = str(t1_index_tuple)\n        index_t1_tuple = (index_t1_tuple, t1_index_tuple)\n        index_t1_tuple = str(index_t1_tuple)\n        t2_index = 0\n        t2_index = 0\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        index_t2_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        t2_index_tuple = ()\n        index_t2_tuple = ()\n        t2_index"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples(tup1, tup2):\n        '''\n        Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        def add_nested_tuples(tup1, tup2):\n            '''\n            Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n            '''\n            new_tup = []\n            for i in range(len(tup1)):\n                new_tup.append((tup1[i][0]+tup2[i][0],tup1[i][1]+tup2[i][1]))\n            return new_tup\n        return add_nested_tuples(tup1,tup2)\n    def add_nested_tuples(tup1, tup2):\n        '''\n        Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        if len(tup1)!= len(tup2):\n            return None\n        else:\n            new_tup = []\n            for i in range(len(tup1)):\n                if i % 2 == 0:\n                    new_tup.append(tup1[i] + tup2[i])\n                else:\n                    new_tup.append(tup1[i] + tup2[i])\n            return new_tup\n    tup_1 = list(test_tup1)\n    tup_2 = list(test_tup2)\n    return add_nested_tuples(tup_1,tup_2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    for x in range(len(tuple1)):\n        if x < len(tuple2):\n            print(tuple1[x] + tuple2[x])\n        else:\n            print('x is the same as len of tuple1')\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here.\n    add_tup1=[]\n    add_tup2=[]\n    for i in range(len(test_tup1)):\n        add_tup1.append((test_tup1[i][0]+test_tup2[i][0]))\n        add_tup2.append((test_tup1[i][1]+test_tup2[i][1]))\n    return add_tup1, add_tup2\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return b\n    elif a > b:\n        return a\n    else:\n        return None\nprint(minimum(5,10))\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    for i in range(b-a):\n        if a<=b:\n            a+=1\n        else:\n            break\n    return a\n    \nprint(minimum(20,60)"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    if a<b:\n        return b\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    for i in range(a, b, -1):\n        if a < b and a <= i:\n            return i\n    return 0\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    for i in range(a, b, 1):\n        if a > b and a >= i:\n            return i\n    return 0\n    \ndef fib(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    return fib(n-1) + fib(n-2)\n    \ndef fib2(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    return a\n    \ndef prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n<2:\n        return False\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef primeFactors(n):\n    '''\n    Write a python function to get all prime factors of a number.\n    '''\n    if n<2:\n        return []\n    if n==2 or n==3:\n        return [2]\n    elif n%2 == 0:\n        return primeFactors(n//2)\n    elif n%2 == 1:\n        a, b, i, n = n//2, n%2, 0, 3\n        while True:\n            i += 1\n            if b == 0:\n                return [a, b, i]\n            elif b == 1:\n                return [a, b, i]\n            elif b == 2:\n                return [a, b, i]\n            else:\n                a, b, i = a*2, b*2, i+2\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    c = a if a > b else b\n    return c\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    print(a)\n    print(b)\n    if(a<b):\n        print(a)\n    elif(a>b):\n        print(b)\n    else:\n        print(a)\n        print(b)\n    print(a+b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        smaller = a\n    else:\n        smaller = b\n    for i in range(1,(b-a)+1):\n        if a < smaller:\n            smaller = a\n        elif a == smaller:\n            smaller += 1\n    return smaller\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return a+minimum(a,b-1)\ndef main():\n    '''\n    Main driver function\n    '''\n    try:\n        a=int(input('Please enter first number '))\n        b=int(input('Please enter second number '))\n        print('Minimum of',a,b,'is',minimum(a,b))\n    except Exception as e:\n        print(e)\nmain()\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    if a<b:\n        a,b=b,a\n    return a\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else: \n        return False\n    \ndef check_dictionary(dictionary,tuple1):\n    '''\n    Write a function to check whether an element exists within a dictionary.\n    '''\n    if dictionary in tuple1:\n        return True\n    else: \n        return False\n    \ndef check_set(set1,set2): \n    '''\n    Write a function to check whether an element exists within a set.\n    '''\n    if set1.issubset(set2):\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple_list = []\n    \n    if type(tuplex)!= tuple:\n        print(\"this is not a tuple\")\n        return False\n    \n    for i in range(len(tuplex)):\n        if tuplex[i]!= tuple1[i]:\n            return False\n    tuple_list.append(tuplex)\n    return tuple_list\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return len(tuplex) == len(tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # iterate throught the tuple and check if the element exists\n    for i in range(len(tuplex)): \n        if tuplex[i] == tuple1: \n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n    \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == len(tuple1):\n        for i in range(len(tuplex)):\n            if tuplex[i] == tuple1[i]:\n                pass\n            else:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == len(tuple1):\n        for index, item in enumerate(tuplex):\n            if item in tuple1:\n                return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        for j in range(len(tuple1)):\n            if tuplex[i]==tuple1[j]:\n                tuplex[i]='KEY'\n    return tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if(tuplex[i]==tuple1):\n            return i\n    return -1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x%2\n    if (x == 0):\n        return 'even'\n    elif (x==1):\n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd = 0\n    for i in range(1, x+1):\n        if i % 2 == 1:\n            if i % 3 == 0:\n                odd += 1\n            else:\n                odd += 1\n                \n    if odd == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    i = 0\n    count = 0\n    while (i<x):\n        if (x%2 == 0):\n            count += 1\n        i+=1\n    return count\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # step 1: define a variable with 2 values\n    n = 0\n    # loop through the values in x\n    for num in x:\n        # if it's odd, add 1 to n\n        if num % 2 == 1:\n            n += 1\n    # return the number of even numbers\n    return n\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count=0\n    for i in range(1,x):\n        if x%i==0:\n            count=count+1\n    if count%2==0:\n        return True\n    else:\n        return False\ndef find_RestParity(x): \n    '''\n    Write a python function to find whether the parity of a given number is even.\n    '''\n    count=0\n    for i in range(1,x):\n        if x%i==0:\n            count=count+1\n    if count==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Write your code here\n    if x%2 == 0:\n        print(x,'is even')\n    else:\n        print(x,'is odd')\n    return \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def rearrange(n):\n        digit = int(str(n)[-1])\n        rem = n % 10\n        return int(str(n)[:-1]+str(rem)+str(digit))\n    return rearrange(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return (n + 1) * 10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    bigger_number = 0\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # return the next bigger number using the following formula:\n    # (n / 10) + (n / 100) + (n / 1000) + (n / 10000) + (n / 100000) + (n / 1000000) + (n / 10000000) + (n / 100000000)\n    return n / (10 ** 3) + (n / (10 ** 3)) + (n / (10 ** 4)) + (n / (10 ** 4)) + (n / (10 ** 4)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5)) + (n / (10 ** 5))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) == 1:\n        return n\n    else:\n        new_n = 0\n        for i in range(len(str(n))):\n            new_n += int(str(n)[i])\n        if new_n > 1:\n            return rearrange_bigger(new_n)\n        else:\n            return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = \"\"\n    while n > 0:\n        result += str(n % 10)\n        n //= 10\n    return int(result[::-1])\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    rearrangement_bigger = []\n    \n    for i in range(n):\n        rearrangement_bigger.append(int(str(n)[i]))\n    \n    return int(''.join(map(str,rearrangement_bigger)))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    val = n\n    new_num = 0\n    \n    for digit in reversed(str(val)):\n        new_num = new_num * 10 + int(digit)\n    \n    return new_num\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # return the number of pairs which consist of one element from the first array and one element from the second array\n    # for example if the first array contains all these number then it should return 1\n    # the second array can have any number of elements in it\n    if k == 0:\n        return 0\n    \n    # an array with k number of pairs\n    # return the number of pairs which consist of one element from the first array and one element from the second array\n    # the number of pairs which consist of one element from the first array and one element from the second array should be equal to the number of pairs\n    # the k number of pairs which consist of one element from the first array and one element from the second array is the smallest\n    # the other elements in the first array and the second array should be sorted\n    # the heap should be sift into the order that the elements in the first array and the second array are sorted\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    small_pairs = []\n    heapq.heapify(small_pairs)\n    for i in nums1:\n        if i in nums2:\n            small_pairs.append((i, nums2.count(i)))\n    for i in nums2:\n        if i in nums1:\n            small_pairs.append((nums1.count(i), i))\n    small_pairs.sort()\n    print(small_pairs)\n    if k <= len(small_pairs):\n        return k\n    else:\n        return 0\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        # find the smallest pair that does not exist in first array\n        smallest_pair = find_smallest_pair(nums1, nums2)\n        smallest_pair_first = smallest_pair[0]\n        smallest_pair_second = smallest_pair[1]\n    else:\n        smallest_pair_first = find_smallest_pair(nums1, nums2)\n        smallest_pair_second = smallest_pair_first[1]\n    \n    count = 0\n    \n    # to get the number of smallest pairs\n    for i in range(len(nums1) - 1):\n        for j in range(len(nums2) - 1):\n            if nums1[i] == nums2[j] and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for num in nums1:\n        heapq.heappush(heap, -num)\n    for num in nums2:\n        heapq.heappush(heap, -num)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in nums1:\n        for j in nums2:\n            if i == j:\n                continue\n            heapq.heappush(heap, (i, j))\n    \n    if k == 1:\n        return heapq.heappop(heap)\n    \n    if k % 2 == 0:\n        return heapq.heappop(heap)\n    else:\n        return heapq.heappop(heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    return k_smallest_pairs_helper(nums1, nums2, k, 0)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(k):\n        heapq.heappush(heap, (nums1[i], nums2[i], i))\n    output_list = []\n    while heap:\n        smallest_num_pair, smallest_num_pair_index, smallest_index = heapq.heappop(heap)\n        if smallest_index!= smallest_index:\n            output_list.append((smallest_num_pair, smallest_num_pair_index, smallest_index))\n    return output_list\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # O(n1 + n2)\n    # O(n1 + n2 + k)\n    # O(n1 + n2 + k)\n    # O(n1 + n2 + k)\n    # O(n1 + n2 + k)\n    # O(n1 + n2 + k)\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in nums1:\n        heapq.heappush(heap, i)\n        if len(nums2) > 0 and heap[0] == nums2[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums2[-1])\n    result = []\n    while len(heap) > k:\n        result.append([heapq.heappop(heap), heapq.heappop(heap)])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs=[]\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i]==nums2[j] and i!=j:\n                pairs.append([nums1[i],nums2[j]])\n    pairs.sort()\n    return pairs[:k]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(len(list1) - 1):\n        if min_product < list1[i][0] * list1[i][1] < min_product:\n            min_product = list1[i][0] * list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_val = list1[0][0]*list1[1][1]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(list1[i][1]*list1[j][1]<min_val):\n                min_val = list1[i][0]*list1[j][1]\n    return min_val\ndef main():\n    '''\n    Write a main function for the program. \n    '''\n    list = []\n    a = int(input('Please enter number of tuples : '))\n    print('Enter the elements of the tuples :')\n    for i in range(0,a):\n        tuple = tuple()\n        tuple.append(int(input()))\n        tuple.append(int(input()))\n        tuple.append(int(input()))\n        list.append(tuple)\n    print('The minimum product of the elements is :',min_product_tuple(list))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list_product = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list_product.append(list1[i] * list1[j])\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product.append(list1[i][0]*list1[j][0])\n    product.sort()\n    for i in product:\n        if i not in product:\n            return i\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # create a new list\n    min_list = []\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    lst = []\n    if len(list1) == 0:\n        return 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] < list1[j][0] and list1[i][1] > list1[j][1]:\n                lst.append(list1[i])\n    return min(lst)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)-1):\n        min_product = list1[i][0] * list1[i+1][0]\n        if min_product < list1[i+1][1]:\n            min_product = list1[i+1][1]\n        if min_product < list1[i][1]:\n            min_product = list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1)\n    min_product = list1[0][1]\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list1):\n        if list1[i][1] < min_product:\n            min_product = list1[i][1]\n        if list1[j][1] < min_product:\n            min_product = list1[j][1]\n        i += 1\n        j += 1\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = list1[0][0]*list1[0][1] + list1[1][0]*list1[1][1]\n    for i in range(2, len(list1)):\n        minimum = min(minimum, list1[i][0]*list1[i][1] + list1[i-1][0]*list1[i-1][1])\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = 0\n    for x in listval:\n        if x < min_val:\n            min_val = x\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=listval[0]\n    for i in range(len(listval)):\n        if listval[i]<min:\n            min=listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = 0\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for elem in listval:\n        if elem < min_val:\n            min_val = elem\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in listval:\n        if i < minimum:\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #for each item in the list, find its index\n    min_index = 0\n    min_item = 0\n    for i in range(len(listval)):\n        if listval[i] < listval[min_index]:\n            min_index = i\n            min_item = listval[i]\n    return min_item\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if min > listval[i]:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    #Iterate over the words in the snake_case\n    for w in word:\n        if w == '_':\n            if result:\n                result += '_'\n        elif w == '-':\n            if result:\n                result += '-'\n        else:\n            result += w\n    return result\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    result = ''\n    #Iterate over the words in the camel case string\n    for w in word:\n        if w == '_':\n            if result:\n                result += '_'\n        elif w == '-' and result:\n            if result:\n                result += '-'\n            else:\n                result += w\n        else:\n            result += w\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    return re.sub('(.)([A-Z][a-z]+)', r' \\1_\\2', word).lstrip('_').lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    re_exp = re.compile('(.)([A-Z][a-z]+)')\n    return re_exp.sub(r' \\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return '_'.join(word[0].title() + word[1].upper() + word[2].lower())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case_str = re.sub(r\"[^A-Z]\", lambda x: \"\".join([x.group(0)[0].upper(), x.group(0)[1:]]), word)\n    return camel_case_str\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', s).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title() + '_' + word[0].upper() + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    def convert_to_camel_case(x):\n        if x.title() == \"\":\n            return x\n        else:\n            return x[:x.index(\"_\")]+x[x.index(\"_\")+1:].lower()\n    word = word.lower()\n    return convert_to_camel_case(word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all the special characters with their equivalent characters\n    word = re.sub('[^a-zA-Z0-9]','_',word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(((?!^)(?=[A-Z])[a-z])|(?<=[A-Z])[A-Z](?=[A-Z]))', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if(i%2==0):\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2=[]\n    for elem in l:\n        if elem % 2!= 0:\n            l2.append(elem)\n    return l2\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(remove_odd([1, 2, 3, 4, 5])"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if not l:\n        return []\n    elif len(l)==1:\n        return l\n    else:\n        res = []\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                l.pop(i)\n            else:\n                i+=1\n        return res\n    \n    #------------------\n    '''\n    Write a python function to remove all even numbers from a given list.\n    '''\n    if not l:\n        return []\n    elif len(l)==1:\n        return l\n    else:\n        res = []\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                l.pop(i)\n            else:\n                i+=1\n        return res\n    \n    #------------------\n    '''\n    Write a python function to count the number of odd items from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of even items from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count\n        \n    #------------------\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==1:\n                count+=1\n            else:\n                i+=1\n        return count\n    \n    #------------------\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    if not l:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(l):\n            if l[i]%2==0:\n                count+=1\n            else:\n                i+=1\n        return count"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = l[i] * 2\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # your code goes here\n    return l[0::2]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2 == 0:\n            new_l.append(i)\n    return new_l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i%2!= 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #If there is only one element in the list\n    if len(l) == 1:\n        return l\n    #If there are more than one element in the list\n    if len(l) > 1:\n        mid = len(l)//2\n        if mid % 2 == 0:\n            #In order to remove even numbers, we need to remove the left half\n            l = [x for x in l if x % 2!= 0]\n            #Then we need to remove the even numbers from the right half\n            l = [x for x in l if x % 2 == 0]\n        else:\n            #In order to remove odd numbers, we need to remove the right half\n            l = [x for x in l if x % 2!= 0]\n            #Then we need to remove the odd numbers from the left half\n            l = [x for x in l if x % 2 == 0]\n        return remove_odd(l)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd=[]\n    for i in l:\n        if(i%2!=0):\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return list1[0]\n    elif n < len(list1):\n        return list1[n-1]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n==0:\n        return None\n    if n==len(list1):\n        return list1[0]\n    nth_elem = list1[n]\n    return extract_nth_element(list1, n+1)\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Creating a list of tuples to iterate through\n    lst = []\n    for element in list1:\n        lst.append(element[n])\n    return lst\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    length = len(list1)\n    if n <= length:\n        return list1[n-1][0]\n    else:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    x = list1[n-1]\n    return x\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n    list_length = len(list1)\n    for i in range(0, list_length, n):\n        yield list1[i]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    count = 0\n    for i in list1:\n        count += 1\n        if count == n:\n            return i[1]\n    return 'None'\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1.count(list2[0])>1 and list1.count(list2[1])>1\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            count += 1\n    return count > 0\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    over = False\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                over = True\n    return over\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\ndef main():\n    list1 = ['apple','banana','cat']\n    list2 = ['dog','cat','mouse','pig']\n    result = overlapping(list1,list2)\n    if result == True:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    # YOUR CODE HERE\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Start writing your code here\n    #pass\n    if list1[0] in list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count = 0\n    for x in list1:\n        if x in list2:\n            count = count + 1\n    if count == len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    output=[]\n    if len(list1)>len(list2):\n        for i in range(len(list2)):\n            if list1[i] in list2:\n                output.append(list1[i])\n    else:\n        for i in range(len(list1)):\n            if list2[i] in list1:\n                output.append(list2[i])\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # return any(value in sequence for value in list1)\n    # return any(value in sequence for value in list2)\n    return list1!= list2 and list1 in list2\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(list1)>= len(list2)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    max_product_index = 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # use sorted() to sort the array\n    arr = sorted(arr)\n    start, end = 0, len(arr)-1\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    for i in range(1,n):\n        max_product = max(arr[i]*max_product,arr[i])\n    return (max_product,arr[0:n//2])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    i = 0\n    n = len(arr)\n    while i < n:\n        if arr[i] * arr[i + 1] > arr[i + 2]:\n            return arr[i], arr[i + 1]\n        i += 1\n    return arr[i - 1], arr[n - 1]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1: \n        return -1\n    low = 0\n    high = len(arr) - 1\n    \n    # For every pair, find the highest product and return the pair. \n    # Note: For every pair, arr[low]*arr[high]*arr[low] > arr[high]*arr[low]\n    \n    while low < high: \n        \n        if arr[low] * arr[high] > arr[low] * arr[high]: \n            low += 1\n            high -= 1\n            \n        elif arr[low] * arr[high] == arr[low] * arr[high]: \n            # arr[low]*arr[high] is the highest product. \n            return arr[low], arr[high]\n        \n        else: \n            high -= 1\n            \n    # If all the above conditions are not met, return -1. \n    return -1\n        \narr = [1, 2, 3, 4, 5]\nprint(max_Product(arr)"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_x = -1\n    for i in range(n):\n        for j in range(i, n):\n            x = arr[i] * arr[j]\n            if x > max_x:\n                max_x = x\n                res = arr[i] * arr[j]\n    return res, max_x\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                \n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = -1\n    maxProductPair = []\n    \n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i!= j:\n                if (arr[i] * arr[j]) > maxProduct:\n                    maxProduct = arr[i] * arr[j]\n                    maxProductPair = (arr[i], arr[j])\n    return maxProductPair\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr)\n    res=[]\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]*arr[j]>arr[i]*arr[j]:\n                res.append((arr[i],arr[j]))\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n == 1:\n        return None\n    if n == 2:\n        return (arr[0],arr[1])\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            if arr[i]*arr[j] > arr[i+1]*arr[j+1]:\n                return (arr[i],arr[j])\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a=[]\n    for i in range(len(Input)):\n        a.append(Input[i])\n    a=set(a)\n    return a\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i] == Input[j]:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import collections\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l = []\n    for x in Input:\n        if x not in l:\n            l.append(x)\n    return sorted(l)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(map(tuple,set(Input)))\n    \ndef group_pair(Input):\n    '''\n    Write a function that takes the first element as the input and removes it from the list.\n    '''\n    return list(map(lambda t:t[0].replace(t[0][-1],''),Input))\n    \ndef num_of_words(Input):\n    '''\n    Write a function that takes the string input and returns a list of words.\n    '''\n    return [word for word in Input.split() if word.isalpha()]\n    \ndef filter_string(Input):\n    '''\n    Write a function that takes a string as input and filters it by using the following patterns:\n    - a single word\n    - a word with letters or digits\n    - a word with at least 3 letters\n    - an email address\n    - a period\n    \n    Find the length of each word and filter out words with length greater than 5.\n    If the length of a word is greater than 5, remove the word.\n    If the length of a word is less than 5, remove the word.\n    '''\n    word_list = num_of_words(Input)\n    output = []\n    if word_list:\n        for word in word_list:\n            if len(word) >= 5:\n                output.append(word)\n    return output\n    \ndef strip_punctuation(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    return''.join(Input.split())\n    \ndef remove_punctuation(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    return''.join(Input.split(string.punctuation))\n    \ndef remove_punctuation_and_stopwords(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    return Input\n    \ndef remove_stopwords(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = Input.split()\n    Input = [word for word in Input if word not in stopwords.words('english')]\n    return''.join(Input)\n    \ndef is_latin(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if Input.isalpha():\n        return '.' in Input\n    else:\n        return False\n    \ndef is_number(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if len(Input) >= 3 and not Input.isalpha():\n        if Input[0] in '0123456789':\n            if Input[1] in '0123456789':\n                return True\n    return False\n    \ndef is_date(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if len(Input) == 13:\n        return True\n    else:\n        return False\n    \ndef is_email(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if len(Input) >= 12 and not Input.isalpha() and Input[0] == '@' and not Input[-1].isalpha():\n        return True\n    else:\n        return False\n    \ndef is_url(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if len(Input) >= 12 and not Input.isalpha() and Input[0] == 'http' and not Input[-1].isalpha():\n        return True\n    else:\n        return False\n    \ndef is_url_or_email(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if len(Input) >= 12 and not Input.isalpha() and Input[0] == 'http' and not Input[-1].isalpha():\n        return True\n    else:\n        return False\n    \ndef get_urls(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if not Input.endswith('.') and len(Input) >= 3:\n        return True\n    else:\n        return False\n    \ndef get_date(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if len(Input) >= 5:\n        if is_latin(Input) and is_number(Input) and is_date(Input) and is_email(Input) and is_url(Input) and is_url_or_email(Input):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef get_emails(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if len(Input) >= 3 and not Input.isalpha() and Input[0] == '@':\n        if len(Input) == 5:\n            if Input.startswith('gmail.'):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef get_urls_and_emails(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    if len(Input) >= 13:\n        if is_latin(Input) and is_number(Input) and is_date(Input) and is_email(Input) and is_url(Input) and is_url_or_email(Input):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef get_top_5_words(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)\n    Input =''.join(Input.split())\n    words = num_of_words(Input)\n    output = []\n    for word in words:\n        if len(word) >= 5 and word not in output:\n            output.append(word)\n    return output[:5]\n    \ndef get_common_words(Input):\n    '''\n    Write a function that takes a string as an input and returns a filtered string.\n    '''\n    Input = strip_punctuation(Input)\n    Input = remove_punctuation(Input)"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i]==Input[j]:\n                Output.append(Input[i])\n                break\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [item for item in Input if item[0] == item[1]]\n    \ndef tuple_to_str(Input): \n    '''\n    Convert a tuple to string.\n    '''\n    return ','.join(map(str,Input))\n    \ndef str_to_tuple(Input): \n    '''\n    Convert string to tuple.\n    '''\n    return tuple(map(int,Input.split(',')))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    lst = []\n    for i in Input:\n        if i not in lst:\n            lst.append(i)\n    return lst[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Write your code here\n    x = input.split(\",\")\n    for i in range(len(x)):\n        x[i] = tuple(x[i].split(\",\"))\n    return x[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list1 = list(map(tuple, Input)) \n    list2 = list(set(list1))\n    return list2[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    if len(lst) == 0:\n        return 0\n    \n    if len(lst) == 1:\n        return lst[0]\n    \n    lst.sort()\n    mid = (len(lst)//2) \n    \n    if lst[mid] == lst[mid-1]:\n        return lst[mid]\n    \n    if lst[mid] == lst[mid+1]:\n        return lst[mid]\n    \n    return Find_Max(lst[mid+1:])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_max = lst[0]\n    for i in lst:\n        if i > lst_max:\n            lst_max = i\n    return lst_max \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return max(lst)\n    max_value = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_value:\n            max_value = lst[i]\n    return max_value\n        \nif __name__ == '__main__':\n    lst = [3,1,4,1,2,6,8,4,3,7,9,10,11,12]\n    print(Find_Max(lst))"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    count = 0\n    max_len = 0\n    for ele in lst:\n        if len(str(ele)) > max_len:\n            count = lst.index(ele)\n            max_len = len(str(ele))\n    return count\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0: \n        return None\n    else: \n        return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    i = 0\n    for j in lst:\n        if max_len < len(j):\n            max_len = len(j)\n            i = j\n    return i"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1 = []\n    lst = sorted(lst)\n    for i in lst:\n        if len(str(i)) == len(lst1):\n            lst1.append(i)\n    return max(lst1)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n    return max\n        \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = lst[0] \n    for i in lst: \n        if i > max_length: \n            max_length = i \n    return max_length\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    list1 = sorted(list1)\n    for i in list1:\n        list2.append(int(i))\n    list3 = []\n    for i in list2:\n        list3.append(i*len(list2))\n    return sum(list3)\ndef print_mul(mul1):\n    '''\n    Write a function to print the multiplication table of a given list of numbers and print the list.\n    '''\n    print(mul1)\ndef multi(mul1, mul2):\n    '''\n    Write a function to print the multiplication table of two given list of numbers and print the list.\n    '''\n    print(mul1 * mul2)\ndef main():\n    '''\n    The main function of the program.\n    '''\n    list1 = []\n    while True:\n        try:\n            mul = input('How many times do you want to multiply? ')\n            mul = int(mul)\n            break\n        except:\n            print('That is not a number. Try again.')\n    while True:\n        try:\n            mul2 = input('How many times do you want to add? ')\n            mul2 = int(mul2)\n            break\n        except:\n            print('That is not a number. Try again.')\n    if mul == 0 and mul2 == 0:\n        print('Program has ended.')\n        break\n    else:\n        list1.append(mul)\n        list1.append(mul2)\n    print_mul(list1)\n    print(round_and_sum(list1))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #Time to write your code here\n    #Rough try/except lines\n    try:\n        total_sum=0\n        for num in list1:\n            total_sum+=num\n        print(round(total_sum,2))\n    except TypeError:\n        print(\"The type of this variable is not correct\")\n    except ZeroDivisionError:\n        print(\"This list contains a 0 value. Please try again\")\n    except ValueError:\n        print(\"This variable contains a wrong data type. Please try again\")\n    except NameError:\n        print(\"This variable does not exist. Please try again\")\n    except Exception as e:\n        print(e)\n        \n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # if len(list1) < 1:\n    #     raise TypeError('The list of numbers must be non-negative')\n    # elif len(list1) == 1:\n    #     list1.append(list1[0])\n    #     return list1\n    # elif len(list1) == 2:\n    #     list1.append(list1[0])\n    #     list1.append(list1[1])\n    # elif len(list1) == 3:\n    #     list1.append(list1[0])\n    #     list1.append(list1[1])\n    #     list1.append(list1[2])\n    # elif len(list1) > 3:\n    #     list1.append(list1[0])\n    #     list1.append(list1[1])\n    #     list1.append(list1[2])\n    #     list1.append(list1[3])\n    # else:\n    #     list1.append(list1[0])\n    #     list1.append(list1[1])\n    #     list1.append(list1[2])\n    #     list1.append(list1[3])\n    #     list1.append(list1[4])\n    #     list1.append(list1[5])\n    #     list1.append(list1[6])\n    #     list1.append(list1[7])\n    #     list1.append(list1[8])\n    #     list1.append(list1[9])\n    #     list1.append(list1[10])\n    #     list1.append(list1[11])\n    #     list1.append(list1[12])\n    #     list1.append(list1[13])\n    #     list1.append(list1[14])\n    #     list1.append(list1[15])\n    #     list1.append(list1[16])\n    #     list1.append(list1[17])\n    #     list1.append(list1[18])\n    #     list1.append(list1[19])\n    #     list1.append(list1[20])\n    #     list1.append(list1[21])\n    #     list1.append(list1[22])\n    #     list1.append(list1[23])\n    #     list1.append(list1[24])\n    #     list1.append(list1[25])\n    #     list1.append(list1[26])\n    #     list1.append(list1[27])\n    #     list1.append(list1[28])\n    #     list1.append(list1[29])\n    #     list1.append(list1[30])\n    #     list1.append(list1[31])\n    #     list1.append(list1[32])\n    #     list1.append(list1[33])\n    #     list1.append(list1[34])\n    #     list1.append(list1[35])\n    #     list1.append(list1[36])\n    #     list1.append(list1[37])\n    #     list1.append(list1[38])\n    #     list1.append(list1[39])\n    #     list1.append(list1[40])\n    #     list1.append(list1[41])\n    #     list1.append(list1[42])\n    #     list1.append(list1[43])\n    #     list1.append(list1[44])\n    #     list1.append(list1[45])\n    #     list1.append(list1[46])\n    #     list1.append(list1[47])\n    #     list1.append(list1[48])\n    #     list1.append(list1[49])\n    #     list1.append(list1[50])\n    #     list1.append(list1[51])\n    #     list1.append(list1[52])\n    #     list1.append(list1[53])\n    #     list1.append(list1[54])\n    #     list1.append(list1[55])\n    #     list1.append(list1[56])\n    #     list1.append(list1[57])\n    #     list1.append(list1[58])\n    #     list1.append(list1[59])\n    #     list1.append(list1[60])\n    #     list1.append(list1[61])\n    #     list1.append(list1[62])\n    #     list1.append(list1[63])\n    #     list1.append(list1[64])\n    #     list1.append(list1[65])\n    #     list1.append(list1[66])\n    #     list1.append(list1[67])\n    #     list1.append(list1[68])\n    #     list1.append(list1[69])\n    #     list1.append(list1[70])\n    #     list1.append(list1[71])\n    #     list1.append(list1[72])\n    #     list1.append(list1[73])\n    #     list1.append(list1[74])\n    #     list1.append(list1[75])\n    #     list1.append(list1[76])\n    #     list1.append(list1[77])\n    #     list1.append(list1[78])\n    #     list1.append(list1[79])\n    #     list1.append(list1[80])\n    #     list1.append(list1[81])\n    #     list1.append(list1[82])\n    #     list1.append(list1[83])\n    #     list1.append(list1[84])\n    #     list1.append(list1[85])\n    #     list1.append(list1[86])\n    #     list1.append(list1[87])\n    #     list1.append(list1[88])\n    #     list1.append(list1[89])\n    #     list1.append(list1[90])\n    #     list1.append(list1[91])\n    #     list1.append(list1[92])\n    #     list1.append(list1[93])\n    #     list1.append(list1[94])\n    #     list1.append(list1[95])\n    #     list1.append(list1[96])\n    #     list1.append(list1[97])\n    #     list1.append(list1[98])\n    #     list1.append(list1[99])\n    #     list1.append(list1[100])\n    #     list1.append(list1[101])\n    #     list1.append(list1[102])\n    #     list1.append(list1[103])\n    #     list1.append(list1[104])\n    #     list1.append(list1[105])\n    #     list1.append(list1[106])\n    #     list1.append(list1[107])\n    #     list1.append(list1[108])\n    #     list1.append(list1[109])\n    #     list1.append(list1[110])\n    #     list1.append(list1[111])\n    #     list1.append(list1[112])\n    #     list1.append(list1[113])\n    #     list1.append(list1[114])\n    #     list1.append(list1[115])\n    #     list1.append(list1[116])"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num, 0)\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s=0\n    for i in range(len(list1)):\n        s=s+list1[i]\n    return s*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = 0\n    for number in list1:\n        sum_list += round(number, 2)\n    return sum_list\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    len_list = len(list1)\n    for num in list1:\n        sum += num\n    return sum*len_list\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for n in list1:\n        total += n\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1_sum = 0\n    for item in list1:\n        list1_sum += item\n    print(\"The total sum is: {}\".format(list1_sum*len(list1)))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum = sum + i\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n*cube_Sum(n-1)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n + 1):\n        cube_sum += i**3\n    print(\"Cube Sum is : \", cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    elif n%2==0: \n        return n*(cube_Sum(n-1)+cube_Sum(n-3))\n    else: \n        return cube_Sum(n-1)+cube_Sum(n-3)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i\n    return sum\n    # print(sum)\ndef main(): \n    '''\n    Expected Output:\n    34\n    '''\n    print(cube_Sum(100))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cub = []\n    for i in range(n, 0, -2):\n        cub.append(i*i*i)\n    return sum(cub)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1): \n        sum = sum + i **3 \n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        ans += i ** 3\n    return ans\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += i ** 2\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i**3)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #print(test_tup)\n    return '-'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delim = ','\n    return delim.join([str(x) for x in test_tup])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # convert tuple to list\n    test_list = list(test_tup)\n    # remove first element\n    test_list.pop(0)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (''.join(test_tup[0]), ''.join(test_tup[1]))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(map(str, test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + str(elem) + str(elem)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_list = []\n    for i in test_tup:\n        new_list.append(i)\n    return tuple(new_list)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for e in test_tup:\n        result += e\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (' '.join(list(test_tup)))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n    return total/n**3\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    arr = list(range(1,n+1))\n    return (sum(arr))/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    from functools import reduce\n    list_numbers = [x for x in range(1,n)]\n    return reduce(lambda x, y: x + y, list_numbers) / len(list_numbers)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    for i in range(1, n + 1):\n        yield i**3\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # get n natural numbers\n    n_natural_numbers = [x for x in range(1, n + 1)]\n    \n    # sum all natural numbers\n    sum = 0\n    \n    # traverse the array\n    for i in n_natural_numbers:\n        sum += i\n    \n    # return the average of all numbers\n    return sum / len(n_natural_numbers)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n + 1):\n        total += i**3\n        count += 1\n    return total/count\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes=[]\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    return sum(cubes)//len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(n):\n        cubes.append(i**3)\n    print(f'The cubes of {n} natural numbers are {cubes}')\n    return sum(cubes)//n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    cubes = [1,4,9,16,25,36,49,64,81]\n    for i in range(1,n+1):\n        cubes[i] = cubes[i-1] * cubes[i-1]\n    return sum(cubes)/len(cubes)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_str = []\n    for i in test_tuple:\n        list_str.append(i[-1])\n    return list_str\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    out_list = []\n    for i in test_tuple:\n        if i == 'Rear':\n            out_list.append(i)\n    return out_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # e.g. (('a','b'), ('c', 'd')) = ('a','d')\n    rear_index = test_tuple[0]\n    # Write your code here\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    '''\n    Input:\n    test_tuple = [(1, 2, 3, 4, 5, 6), (4, 5, 6, 7, 8, 9), (9, 8, 7, 6, 5, 4), (2, 4, 5, 6), (1, 5, 4, 8, 3, 7)]\n    Output:\n    ((1, 2), (4, 5), (9, 8), (2, 4), (1, 5), (6, 7), (5, 4), (8, 3))\n    '''\n    '''\n    Write your solution here\n    '''\n    return (tuple(filter(lambda x: x[0]!= 'Rear', test_tuple)))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front, rear = test_tuple[0][0], test_tuple[-1][-1]\n    index = {'front':0,'rear':1, 'back':2}\n    rear_indices = []\n    for element in rear:\n        rear_indices.append(index[element])\n    return (front, rear_indices)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [t[0] for t in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = [index for index in range(len(test_tuple[0])) if test_tuple[1][index] == 'R']\n    return tuple(rear_index_list)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple[0])):\n        rear_list.append(test_tuple[1][i][0])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # for i in range(len(test_tuple)):\n    #     if test_tuple[i] == rear:\n    #         return i\n    #     else:\n    #         return -1\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i][0] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)-1):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # initialize counter\n    count = 0 \n    # loop through each sublist\n    for x in list1: \n        # check if x is in the sublist\n        if x == x: \n            # increment counter if true\n            count = count + 1\n    # return the number of times that the element was found\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    for i in range(0, len(list1)):\n        if list1[i][x] == 1:\n            return list1[i][0] + list1[i][1]\n    return list1[i][0] + list1[i][1] + 1\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(x in list1[i]):\n            count += 1\n    return count\n    \n    \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    j = 0\n    count = 0\n    while i < len(list1):\n        while j < len(list1[i]):\n            if x == list1[i][j]:\n                count += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filter_out = []\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            filter_out.append(nums[i])\n    return filter_out\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n    "
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums = [int(num) for num in nums]\n    odds = []\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    new_nums = list(filter(lambda x: x % 2!= 0, nums))\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    newlist = []\n    for item in nums:\n        if item % 2 == 1:\n            newlist.append(item)\n    return newlist\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n        \nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print('Oddnumbers are:', filter_oddnumbers(nums)"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnums = []\n    for num in nums:\n        if num % 2!= 0:\n            oddnums.append(num)\n    return oddnums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_numbers = []\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = dt.replace(\"-\", \"\").replace(\":\",\"-\")\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    d,m,y = date[0],date[1],date[2]\n    d,m,y = int(d),int(m),int(y)\n    if int(y%100)<10:\n        m = '0'+str(m)\n    else:\n        m = str(m)\n    if int(d)<10:\n        d = '0'+str(d)\n    else:\n        d = str(d)\n    return d+'-'+m+'-'+str(y)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # if no format is entered, assume dd-mm-yyy\n    if not dt.find('-') == -1:\n        dd = dt[:dt.find('-')]\n        mm = dt[dt.find('-')+1:]\n        yy = dt[dt.find('-')+1:dt.find('-')+2]\n        dt = dd + '-' + mm + '-' + yy\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = str(dt)\n    p1 = '^'\n    p2 = '$'\n    p3 = '-'\n    p4 = '.'\n    p5 = '-'\n    p6 = '-'\n    p7 = '-'\n    p8 = '-'\n    p9 = '-'\n    p10 = '-'\n    p11 = '-'\n    p12 = '-'\n    p13 = '-'\n    p14 = '-'\n    p15 = '-'\n    p16 = '-'\n    p17 = '-'\n    p18 = '-'\n    p19 = '-'\n    p20 = '-'\n    p21 = '-'\n    p22 = '-'\n    p23 = '-'\n    p24 = '-'\n    p25 = '-'\n    p26 = '-'\n    p27 = '-'\n    p28 = '-'\n    p29 = '-'\n    p30 = '-'\n    p31 = '-'\n    p32 = '-'\n    p33 = '-'\n    p34 = '-'\n    p35 = '-'\n    p36 = '-'\n    p37 = '-'\n    p38 = '-'\n    p39 = '-'\n    p40 = '-'\n    p41 = '-'\n    p42 = '-'\n    p43 = '-'\n    p44 = '-'\n    p45 = '-'\n    p46 = '-'\n    p47 = '-'\n    p48 = '-'\n    p49 = '-'\n    p50 = '-'\n    p51 = '-'\n    p52 = '-'\n    p53 = '-'\n    p54 = '-'\n    p55 = '-'\n    p56 = '-'\n    p57 = '-'\n    p58 = '-'\n    p59 = '-'\n    p60 = '-'\n    p61 = '-'\n    p62 = '-'\n    p63 = '-'\n    p64 = '-'\n    p65 = '-'\n    p66 = '-'\n    p67 = '-'\n    p68 = '-'\n    p69 = '-'\n    p70 = '-'\n    p71 = '-'\n    p72 = '-'\n    p73 = '-'\n    p74 = '-'\n    p75 = '-'\n    p76 = '-'\n    p77 = '-'\n    p78 = '-'\n    p79 = '-'\n    p80 = '-'\n    p81 = '-'\n    p82 = '-'\n    p83 = '-'\n    p84 = '-'\n    p85 = '-'\n    p86 = '-'\n    p87 = '-'\n    p88 = '-'\n    p89 = '-'\n    p90 = '-'\n    p91 = '-'\n    p92 = '-'\n    p93 = '-'\n    p94 = '-'\n    p95 = '-'\n    p96 = '-'\n    p97 = '-'\n    p98 = '-'\n    p99 = '-'\n    p100 = '-'\n    p101 = '-'\n    p102 = '-'\n    p103 = '-'\n    p104 = '-'\n    p105 = '-'\n    p106 = '-'\n    p107 = '-'\n    p108 = '-'\n    p109 = '-'\n    p110 = '-'\n    p111 = '-'\n    p112 = '-'\n    p113 = '-'\n    p114 = '-'\n    p115 = '-'\n    p116 = '-'\n    p117 = '-'\n    p118 = '-'\n    p119 = '-'\n    p120 = '-'\n    p121 = '-'\n    p122 = '-'\n    p123 = '-'\n    p124 = '-'\n    p125 = '-'\n    p126 = '-'\n    p127 = '-'\n    p128 = '-'\n    p129 = '-'\n    p130 = '-'\n    p131 = '-'\n    p132 = '-'\n    p133 = '-'\n    p134 = '-'\n    p135 = '-'\n    p136 = '-'\n    p137 = '-'\n    p138 = '-'\n    p139 = '-'\n    p140 = '-'\n    p141 = '-'\n    p142 = '-'\n    p143 = '-'\n    p144 = '-'\n    p145 = '-'\n    p146 = '-'\n    p147 = '-'\n    p148 = '-'\n    p149 = '-'\n    p150 = '-'\n    p151 = '-'\n    p152 = '-'\n    p153 = '-'\n    p154 = '-'\n    p155 = '-'\n    p156 = '-'\n    p157 = '-'\n    p158 = '-'\n    p159 = '-'\n    p160 = '-'\n    p161 = '-'\n    p162 = '-'\n    p163 = '-'\n    p164 = '-'\n    p165 = '-'\n    p166 = '-'\n    p167 = '-'\n    p168 = '-'\n    p169 = '-'\n    p170 = '-'\n    p171 = '-'\n    p172 = '-'\n    p173 = '-'\n    p174 = '-'\n    p175 = '-'\n    p176 = '-'\n    p177 = '-'\n    p178 = '-'\n    p179 = '-'\n    p180 = '-'\n    p181 = '-'\n    p182 = '-'\n    p183 = '-'\n    p184 = '-'\n    p185 = '-'\n    p186 = '-'\n    p187 = '-'\n    p188 = '-'\n    p189 = '-'\n    p190 = '-'\n    p191 = '-'\n    p192 = '-'\n    p193 = '-'\n    p194 = '-'\n    p195 = '-'\n    p196 = '-'\n    p197 = '-'\n    p198 = '-'\n    p199 = '-'\n    p200 = '-'\n    p201 = '-'\n    p202 = '-'\n    p203 = '-'\n    p204 = '-'\n    p205 = '-'\n    p206 = '-'\n    p207 = '-'\n    p208 = '-'\n    p209 = '-'\n    p210 = '-'\n    p211 = '-'\n    p212 = '-'\n    p213 = '-'\n    p214 = '-'\n    p215 = '-'\n    p216 = '-'\n    p217 = '-'\n    p218 = '-'\n    p219 = '-'\n    p220 = '-'\n    p221 = '-'\n    p222 = '-'\n    p223 = '-'\n    p224 = '-'\n    p225 = '-'\n    p226 = '-'\n    p227 = '-'\n    p228 = '-'\n    p229 = '-'\n    p230 = '-'\n    p231 = '-'\n    p232 = '-'\n    p233 = '-'\n    p234 = '-'\n    p235 = '-'\n    p236 = '-'\n    p237 = '-'\n    p238 = '-'\n    p239 = '-'\n    p240 = '-'\n    p241 = '-'\n    p242 = '-'\n    p243 = '-'\n    p244 = '-'\n    p245 = '-'\n    p246 = '-'\n    p247 = '-'\n    p248 = '-'\n    p249 = '-'\n    p250 = '-'\n    p251 = '-'\n    p252 = '-'\n    p253 = '-'\n    p254 = '-'\n    p255 = '-'\n    p256 = '-'\n    p257 = '-'\n    p258 = '-'\n    p259 = '-'\n    p260 = '-'\n    p261 = '-'\n    p262 = '-'\n    p263 = '-'\n    p264 = '-'\n    p265 = '-'\n    p266 = '-'\n    p267 = '-'\n    p268 = '-'\n    p269 = '-'\n    p270 = '-'\n    p271 = '-'\n    p272 = '-'\n    p273 = '-'\n    p274 = '-'\n    p275 = '-'\n    p276 = '-'\n    p277 = '-'\n    p278 = '-'\n    p279 = '-'\n    p280 = '-'\n    p281 = '-'\n    p282 = '-'\n    p283 = '-'\n    p284 = '-'\n    "
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{1,2})-(\\d{1,2})-(\\d{4})$\"\n    m = re.search(pattern, dt)\n    if m:\n        d,m,y = m.groups()\n        return f\"{y}-{m}-{d}\"\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = '%d-%m-%Y'\n    dt = dt.split(' ')\n    y, m, d = dt[0], dt[1], dt[2]\n    \n    # If dt is an integer, assume the date is a date.\n    if isinstance(dt, int):\n        dt = '%d-%d-%d' % (dt, 1, 1)\n    \n    # Remove the leading and trailing spaces and dash characters.\n    y = y.strip()\n    m = m.strip()\n    d = d.strip()\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', dt)\n    if match is not None:\n        day = int(match.group(1))\n        month = int(match.group(2))\n        year = int(match.group(3))\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            month = '01'\n        if day == 31 and month == 12:\n            day = 1\n            month = 1\n        if day > 28 or (year % 4 == 0 and month > 2 and month < 12):\n            return ''\n        else:\n            return dt\n    else:\n        return ''\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove whitespaces \n    dt = dt.replace('\\t',' ')\n    dt = dt.replace('\\n',' ')\n    dt = dt.replace('\\r',' ')\n    # remove periods \n    dt = dt.replace('.','-')\n    # remove leading and trailing whitespaces\n    dt = dt.strip()\n    # remove leading and trailing whitespaces\n    dt = dt.strip(' \\t\\n\\r')\n    # replace invalid character \n    dt = dt.replace(\"\\u2009\",\"-\")\n    dt = dt.replace(\"\\u200b\",\"-\")\n    dt = dt.replace(\"\\n\",\"-\")\n    dt = dt.replace(\"\\r\",\"-\")\n    # remove periods \n    dt = dt.replace(\".\",\"-\")\n    # remove leading and trailing whitespaces\n    dt = dt.strip()\n    # remove leading and trailing whitespaces\n    dt = dt.strip(' \\t\\n\\r')\n    # remove duplicate dates in list \n    if dt in list_date:\n        list_date.remove(dt)\n    # add dates to list \n    else:\n        list_date.append(dt)\n    return(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        year,month,day=dt.split('-')\n    except:\n        return dt\n    return year+'-'+month+'-'+day\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(?P<day>\\d{2})-(?P<month>\\d{2})-(?P<year>\\d{4})$\"\n    result = re.search(pattern, dt)\n    if not result:\n        return dt\n    \n    #print(result.group('day'))\n    #print(result.group('month'))\n    #print(result.group('year'))\n    day = int(result.group('day'))\n    month = int(result.group('month'))\n    year = int(result.group('year'))\n    #print(day, month, year)\n    \n    d1 = day - 1\n    m1 = month - 1\n    y1 = year - 1\n    #print(d1, m1, y1)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    my_list = my_list[:]\n    for i in range(1, len(my_list)):\n        # Find the next midpoint\n        # If midpoint is already in the right place, skip\n        # If it's the start of the array, skip\n        # If it's not, cut and reorder\n        midpoint = (i + (i//3))\n        # if i is not midpoint, cut it in half\n        # If i is midpoint, reverse it and add it to the left\n        # If i is midpoint, reverse it and add it to the right\n        if midpoint > len(my_list) - i:\n            # cut it and add it to the left\n            cut_left = my_list[:midpoint]\n            # if we cut out all the half\n            # we have a list of cut out halfs\n            # we have now a sorted array\n            cut_left = shell_sort(cut_left)\n            # cut it and add it to the right\n            cut_right = my_list[midpoint:]\n            # if we cut out all the half\n            # we have a list of cut out halfs\n            # we have now a sorted array\n            cut_right = shell_sort(cut_right)\n            # add the two lists\n            my_list[:midpoint] = cut_left + cut_right\n        # if i is not midpoint, we're not cutting\n        # so add it to the left\n        else:\n            # add it to the left\n            # if it's the start of the array, we are not adding\n            # to the right\n            # add it to the right\n            add_left = my_list[:midpoint]\n            # if we add it to the start of the array, we are\n            # adding to the end of the array\n            add_right = my_list[midpoint:]\n            # if we add it to the end of the array, we are adding\n            # to the start of the array\n            my_list[:midpoint] = add_left + add_right\n    # return the sorted array\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            # Set current to the rightmost element.\n            # A small gap is a good spot.\n            curr = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > curr:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = curr\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    arr = [None] * len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_recur(arr,n):\n        # Find the middle element \n        # Create two sub arrays \n        # iterate through the array \n        # copy the middle element to the first \n        # and then iterate through the rest of the array \n        # and copy the middle element to the second \n        # If the element in both sub arrays is less than the \n        # element we are looking for then increment the mid \n        # element by 1. \n        # Otherwise, decrement the mid element \n        # and go to the next element \n        for i in range(n//2-1, -1, -1):\n            for j in range(i+1, n, 1):\n                if arr[j] < arr[i]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                else:\n                    break\n        return arr\n    # Get length of the given array\n    n = len(my_list)\n    if n <= 1:\n        return\n    # Sort the array using shell sort\n    # array[i] = array[i//2] + array[i//4] + array[i//8] + array[i//16]\n    # array[i] = shell_sort_recur(array[i//4:], n//4)\n    # array[i] = shell_sort_recur(array[i//8:], n//8)\n    # array[i] = shell_sort_recur(array[i//16:], n//16)\n    return shell_sort_recur(my_list, n)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #\u00a0Useless variable\n    pass\n    #\u00a0You can add your code here\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    list_len = len(my_list)\n    list_gap = list_len//2\n    while list_gap > 0:\n        list_gap_start = list_gap\n        list_gap_end = list_gap//2\n        while list_gap_start < list_gap_end:\n            for i in range(list_gap_start,list_gap_end+1):\n                temp = my_list[i]\n                j = i\n                while j>=list_gap_start and my_list[j-list_gap_start] > temp:\n                    my_list[j]=my_list[j-list_gap_start]\n                    j-=list_gap_start\n                my_list[j]=temp\n            list_gap_start = list_gap_end\n            list_gap_end = list_gap_end//2\n        list_gap = list_gap_end\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list) - 1):\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n            my_list[j] = my_list[i]\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = temp\n        gap = gap // 2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == 1:\n        return test_tup1\n    else:\n        return test_tup1 + test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ''\n    for i in test_tup1 + test_tup2:\n        result = result + '\\n' + str(i)\n    \n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    list1=[]\n    list2=[]\n    for i in test_tup1:\n        list1.append(i)\n    for j in test_tup2:\n        list2.append(j)\n    return list1,list2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0] and tuple(test_tup1[1]) == tuple(test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    \n    # build the tuple from the tuples\n    if isinstance(test_tup1, tuple):\n        for elem in test_tup1:\n            result.append(elem)\n    else:\n        result = [test_tup1]\n    if isinstance(test_tup2, tuple):\n        for elem in test_tup2:\n            result.append(elem)\n    else:\n        result = [test_tup2]\n    \n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for tup in zip(test_tup1, test_tup2):\n        result.append(tup)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] == test_tup2[0], test_tup1[1] == test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # YOUR CODE HERE\n    if len(test_tup1) < len(test_tup2):\n        test_tup2 = test_tup2 + (test_tup1[-1],)\n        test_tup1 = test_tup1[:-1]\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append(test_tup1[i] + test_tup2[i])\n    test_list.sort()\n    return test_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if type(test_tup1[0]) is tuple and type(test_tup2[0]) is tuple:\n        a_tuple = extract_tuples(test_tup1)\n        b_tuple = extract_tuples(test_tup2)\n        if len(a_tuple) > 1 or len(b_tuple) > 1:\n            return False\n        return(a_tuple[0],b_tuple[0])\n    else:\n        return(test_tup1,test_tup2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0: \n        print(\"The directrix of a parabola is: \", ((b**2) - (4*a*c))/(2*a)) \n        print(\"\\n\")\n    elif b == 0: \n        print(\"The directrix of a parabola is: \", (((c**2) - (4*a*b))/(2*a)) * 1.1) \n        print(\"\\n\")\n    elif c == 0: \n        print(\"The directrix of a parabola is: \", (((b**2) - (4*a*c))/(2*a)) * 1.1) \n        print(\"\\n\")\n    else: \n        print(\"The directrix of a parabola is: \", (((b**2) - (4*a*c))/(2*a)) * 1.1) \n        print(\"\\n\")\n    print(\"\\n\")\n    retur"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return int(a + b*b + c*c - math.sqrt((a**2) + (b**2) + (c**2)))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola(x): \n        return (a*x**2+b*x+c)\n    return parabola(x)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(\"\\nDirectrix of the parabola with a,b,c:\")\n    print(\"{} = {}x^2 + {}x + {}\".format(a, b, c, a+b+c))\n    print(\"{:.6f} = {:.6f}x^2 + {:.6f}x + {:.6f}\".format(a, a+b+c, b, b+c))\n    print(\"{:.6f} = {:.6f}x^2 + {:.6f}x + {:.6f}\".format(a, a+b+c, a+b+c, a+b+c))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (b*b-4*a*c)\n    y = (-b-((b*b-4*a*c)**0.5))/2*a\n    z = (-b+((b*b-4*a*c)**0.5))/2*a\n    return x, y, z\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b*c \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = []\n    y = []\n    for i in range (a, b): \n        y.append(i**2)\n    x = [i**2 for i in range (a, b)]\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b ** 2 - 4 * a * c\n    return D\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # define the directrix matrix \n    y = np.array([[a, -b, c], [b, -c, a], [-c, a, -b]])\n    # transpose matrix\n    y = y.T\n    # apply transform\n    return np.dot(y, np.linalg.inv(y))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    n = len(a)\n    p = (a[1] - a[0])/(b[1] - b[0])\n    d = b[0] - a[0]*p\n    \n    return p, d\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # TODO: Write your code here\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    if len(list1) == 1 and len(list2) == 1:\n        return True\n    if len(list1) > len(list2) and list1 > list2:\n        return True\n    if len(list2) > len(list1) and list2 > list1:\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for item in list1:\n        if item in list2:\n            common.append(item)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # your code here\n    if len(list1) > len(list2):\n        return len(list1) >= len(list2)\n    else:\n        return len(list1) < len(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n    \n    if len(list1) == 0:\n        return True\n    elif len(list2) == 0:\n        return False\n    elif list1[0] == list2[0]:\n        return True\n    else:\n        return False\n    \n    \n    \n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Write your code here.\n    return len(list1) > len(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #print(len(list1))\n    #print(len(list2))\n    common = False\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            pass\n        else:\n            common = True\n    return common\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Your code here\n    return round(base1 + (base2 - base1)*(height/2),3)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    try:\n        return round(median(abs(base1-base2),height),2)\n    except ValueError:\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_mean = float(base1)/float(len(base1))\n    base2_mean = float(base2)/float(len(base2))\n    return(sum([base1_mean, base2_mean]))/2\n    \ndef test_median_trapezium():\n    assert median_trapezium(1,2,3) == 3\n    assert median_trapezium(1,1,3) == 1\n    assert median_trapezium(1,1,2) == 2\n    assert median_trapezium(1,1,1) == 0\n    assert median_trapezium(1,1,0) == 0\n    assert median_trapezium(1,1,0.5) == 0.5\n    assert median_trapezium(1,1,0.5+0.1) == 1\n    assert median_trapezium(1,1,0.5+0.2) == 2\n    assert median_trapezium(1,1,0.5+0.3) == 3\n    assert median_trapezium(1,1,0.5+0.4) == 4\n    assert median_trapezium(1,1,0.5+0.5) == 4\n    assert median_trapezium(1,1,0.5+0.6) == 5\n    assert median_trapezium(1,1,0.5+0.7) == 6\n    assert median_trapezium(1,1,0.5+0.8) == 7\n    assert median_trapezium(1,1,0.5+0.9) == 8\n    assert median_trapezium(1,1,0.5+1) == 8\n    assert median_trapezium(1,1,0.5+2) == 9\n    assert median_trapezium(1,1,0.5+3) == 9\n    assert median_trapezium(1,1,0.5+4) == 10\n    assert median_trapezium(1,1,0.5+5) == 10\n    assert median_trapezium(1,1,0.5+6) == 10\n    assert median_trapezium(1,1,0.5+7) == 10\n    assert median_trapezium(1,1,0.5+8) == 10\n    assert median_trapezium(1,1,0.5+9) == 10\n    assert median_trapezium(1,1,0.5+10) == 10\n    assert median_trapezium(1,1,0.5+11) == 10\n    assert median_trapezium(1,1,0.5+12) == 10\n    assert median_trapezium(1,1,0.5+13) == 10\n    assert median_trapezium(1,1,0.5+14) == 10\n    assert median_trapezium(1,1,0.5+15) == 10\n    assert median_trapezium(1,1,0.5+16) == 10\n    assert median_trapezium(1,1,0.5+17) == 10\n    assert median_trapezium(1,1,0.5+18) == 10\n    assert median_trapezium(1,1,0.5+19) == 10\n    assert median_trapezium(1,1,0.5+20) == 10\n    assert median_trapezium(1,1,0.5+21) == 10\n    assert median_trapezium(1,1,0.5+22) == 10\n    assert median_trapezium(1,1,0.5+23) == 10\n    assert median_trapezium(1,1,0.5+24) == 10\n    assert median_trapezium(1,1,0.5+25) == 10\n    assert median_trapezium(1,1,0.5+26) == 10\n    assert median_trapezium(1,1,0.5+27) == 10\n    assert median_trapezium(1,1,0.5+28) == 10\n    assert median_trapezium(1,1,0.5+29) == 10\n    assert median_trapezium(1,1,0.5+30) == 10\n    assert median_trapezium(1,1,0.5+31) == 10\n    assert median_trapezium(1,1,0.5+32) == 10\n    assert median_trapezium(1,1,0.5+33) == 10\n    assert median_trapezium(1,1,0.5+34) == 10\n    assert median_trapezium(1,1,0.5+35) == 10\n    assert median_trapezium(1,1,0.5+36) == 10\n    assert median_trapezium(1,1,0.5+37) == 10\n    assert median_trapezium(1,1,0.5+38) == 10\n    assert median_trapezium(1,1,0.5+39) == 10\n    assert median_trapezium(1,1,0.5+40) == 10\n    assert median_trapezium(1,1,0.5+41) == 10\n    assert median_trapezium(1,1,0.5+42) == 10\n    assert median_trapezium(1,1,0.5+43) == 10\n    assert median_trapezium(1,1,0.5+44) == 10\n    assert median_trapezium(1,1,0.5+45) == 10\n    assert median_trapezium(1,1,0.5+46) == 10\n    assert median_trapezium(1,1,0.5+47) == 10\n    assert median_trapezium(1,1,0.5+48) == 10\n    assert median_trapezium(1,1,0.5+49) == 10\n    assert median_trapezium(1,1,0.5+50) == 10\n    assert median_trapezium(1,1,0.5+51) == 10\n    assert median_trapezium(1,1,0.5+52) == 10\n    assert median_trapezium(1,1,0.5+53) == 10\n    assert median_trapezium(1,1,0.5+54) == 10\n    assert median_trapezium(1,1,0.5+55) == 10\n    assert median_trapezium(1,1,0.5+56) == 10\n    assert median_trapezium(1,1,0.5+57) == 10\n    assert median_trapezium(1,1,0.5+58) == 10\n    assert median_trapezium(1,1,0.5+59) == 10\n    assert median_trapezium(1,1,0.5+60) == 10\n    assert median_trapezium(1,1,0.5+61) == 10\n    assert median_trapezium(1,1,0.5+62) == 10\n    assert median_trapezium(1,1,0.5+63) == 10\n    assert median_trapezium(1,1,0.5+64) == 10\n    assert median_trapezium(1,1,0.5+65) == 10\n    assert median_trapezium(1,1,0.5+66) == 10\n    assert median_trapezium(1,1,0.5+67) == 10\n    assert median_trapezium(1,1,0.5+68) == 10\n    assert median_trapezium(1,1,0.5+69) == 10\n    assert median_trapezium(1,1,0.5+70) == 10\n    assert median_trapezium(1,1,0.5+71) == 10\n    assert median_trapezium(1,1,0.5+72) == 10\n    assert median_trapezium(1,1,0.5+73) == 10\n    assert median_trapezium(1,1,0.5+74) == 10\n    assert median_trapezium(1,1,0.5+75) == 10\n    assert median_trapezium(1,1,0.5+76) == 10\n    assert median_trapezium(1,1,0.5+77) == 10\n    assert median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (height - (base1 + base2)) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Using the len() function, get the length of the trapezium.\n    # The formula:\n    # t = (base1 + base2) / 2\n    # is used here\n    # and a trailing 0.5 is added\n    # to the end of the result\n    t = ((base1 + base2) / 2 + height / 2)\n    # Once the formula is evaluated, we can use it as follows:\n    # t = (height + 0.5) / 2\n    return t\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_size = base1 + base2\n    return (height/2) + (height/2)/(2*trapezium_size)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height1 = base1 + (height / 2)\n    height2 = base2 + (height / 2)\n    if height1 > height2:\n        left_side = height1\n        height1 = height2\n        height2 = left_side\n    if height1 < height2:\n        right_side = height2\n        height2 = height1\n        height1 = right_side\n    if height1 == 0:\n        return 0\n    return (height1 + (height2 - height1) / 2) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    n = int(height)\n    s = height*(height+1)/2\n    #print(s)\n    area = (n*s)/2\n    #print(area)\n    #print(s)\n    if n==0:\n        return 0\n    else:\n        return area/n\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # find the midpoint of the trapezium\n    midpoint = round((base1+base2)/2)\n    midpoint2 = round((base2+base1)/2)\n    #print(midpoint, midpoint2)\n    # find the first half of the trapezium\n    if height > midpoint2:\n        firsthalf = midpoint2\n        secondhalf = midpoint2-height\n    else:\n        firsthalf = midpoint2\n        secondhalf = midpoint2-height\n    # find the last half of the trapezium\n    if height > firsthalf:\n        lasthalf = firsthalf\n        middle = round((base1+base2)/2)\n        if height > middle:\n            trapezium = middle\n            if height > lasthalf:\n                trapezium = lasthalf\n        else:\n            trapezium = lasthalf\n    else:\n        lasthalf = midpoint2\n        middle = round((base2+base1)/2)\n        if height > middle:\n            trapezium = middle\n            if height > lasthalf:\n                trapezium = lasthalf\n    #print(trapezium)\n    #find the area of the trapezium\n    area = trapezium*height\n    #print(area)\n    #find the average area of the trapezium\n    trapezium_area = area/2\n    #print(trapezium_area)\n    # find the median area\n    median_area = trapezium_area\n    return median_area\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > number:\n            print(\"false\")\n            return\n    print(\"true\")\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return False\n    for i in range(1, len(arr)):\n        if number > arr[i] and (number < arr[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 1:\n        if arr[0] > number:\n            return False\n        else:\n            return True\n    if number > arr[-1]:\n        return False\n    else:\n        if arr[0] < number:\n            for i in range(len(arr)):\n                if arr[i] > number:\n                    return False\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0] > number\n    else:\n        if arr[0] > number and arr[1] > number:\n            return check_greater(arr[2:], number)\n        elif arr[0] > number and arr[1] < number:\n            return check_greater(arr[2:], number)\n        elif arr[0] > number and arr[1] == number:\n            return True\n        elif arr[0] < number and arr[1] > number:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    if arr[0] > number:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.strip()\n    return re.search(r\"\\b[a-z]+\\b\",text) is not None\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return_string = ''\n    b = ['a', 'b']\n    for i in range(len(text)):\n        if text[i] in b:\n            return_string += text[i]\n    return return_string\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a\"\n    match = re.findall(pattern, text)\n    return match\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # your code goes here\n    if not is_empty(text):\n        if len(text) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r'\\(a\\) \\{(.*?)\\}'\n    return re.findall(regex, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    b_num = [1,2]\n    b_in_text = [re.match(r'(?P<b>a){1}', text).group('b')]\n    \n    for i in b_num:\n        b_in_text.extend(re.findall(r'(?P<b>a){{i}}', text))\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"^(?:(\\w|[^\\w\\s])\\w*(?:\\b(?:[^\\w\\s]+))?)?(\\s|$)|\\b((?:(?:[^\\w\\s]+)|(\\w+)))+$\"\n    return re.match(regex, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\b'\n    subpattern = r'\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has two a's followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has three a's followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has four a's followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has five a's followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has six a's followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has seven a's followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has eight a's followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has nine a's followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has zero a's followed by one or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_one_and_two(text):\n    '''\n    Write a function that matches a string that has one a followed by two or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_three_and_four(text):\n    '''\n    Write a function that matches a string that has three a followed by four or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_five_and_six(text):\n    '''\n    Write a function that matches a string that has five a followed by six or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_seven_and_eight(text):\n    '''\n    Write a function that matches a string that has seven a followed by eight or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_nine_and_ten(text):\n    '''\n    Write a function that matches a string that has nine a followed by ten or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_eleven_and_twelve(text):\n    '''\n    Write a function that matches a string that has eleven a followed by two or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_thirteen_and_fourteen(text):\n    '''\n    Write a function that matches a string that has thirteen a followed by fourteen or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_eleven_and_twelve_and_thirteen(text):\n    '''\n    Write a function that matches a string that has eleven a followed by eight or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_eleven_and_fourteen(text):\n    '''\n    Write a function that matches a string that has eleven a followed by six or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_twelve_and_twenty_three(text):\n    '''\n    Write a function that matches a string that has twelve a followed by twelve or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_eleven_and_fourteen_and_twelve(text):\n    '''\n    Write a function that matches a string that has eleven a followed by four or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_twelve_and_twenty_five(text):\n    '''\n    Write a function that matches a string that has twelve a followed by five or more b's.\n    '''\n    matches = re.findall(r'^\\w+\\w+\\w+\\w+\\w+\\b', text)\n    for i in matches:\n        print(i)\n        \ndef text_match_twelve_and_fourteen_and_twenty_six(text):\n    '''\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'^(?:a|b|c)$')\n    return re.match(pattern, text)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lst = []\n    for i in str(n) :\n        lst.append(i)\n    if len(lst) <= 1 :\n        return len(lst)\n    return len(lst) - 1\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #Your code here\n    n = str(n)\n    if n == '0':\n        return 0\n    else:\n        return int(n[-1])\n    \nprint(last_Digit(8))\nprint(last_Digit(15))\nprint(last_Digit(15.5))\nprint(last_Digit(15.5))\nprint(last_Digit(3.14))\nprint(last_Digit(3.14))\nprint(last_Digit(3.14.123))\nprint(last_Digit(123.456)"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    n = n[::-1]\n    for i in range(len(n)) :\n        if n[i] == \"9\" :\n            return i\n    return len(n)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    import math\n    return math.floor(n/10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n%10 + last_Digit(n//10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n%2==0:\n        return last_Digit(n//2)\n    if n%2!=0:\n        return last_Digit(n//2)+1\n    "
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return '0'\n    elif n == 1 :\n        return '1'\n    else :\n        return last_Digit(n-1) + last_Digit(n-2)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = len(str(n))-1\n    if n < 10 :\n        return int(str(n)[-1])\n    return last_Digit(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg = []\n    for num in list1:\n        list_neg.append(-1*num)\n    return list_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for n in list1:\n        neg_list.append(-n)\n    return neg_list\n    \ndef my_print_neg_nos(list1):\n    '''\n    Write a python function to print the negative numbers in a list.\n    '''\n    for n in list1:\n        print(n, end=\" \")\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i<0:\n            neg_list.append(-i)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list2.append(-1 * list1[i])\n        else:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for n in list1:\n        if n < 0:\n            neg_nos.append(n)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1\n    \n    "
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1[::-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i] * (-1)\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        neg_list.append(abs(i))\n    return neg_list\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Your code here\n    if len(str1)%2==0:\n        return str1[0:len(str1)/2]\n    else:\n        return str1[0:len(str1)//2] + str1[len(str1)//2:]\n    \n    \n    \n    \ndef num_to_str(n):\n    '''\n    Write a function to convert a positive integer into a string.\n    '''\n    # Your code here\n    return str(n)\n    \n    \n    \n    \ndef str_to_num(s):\n    '''\n    Write a function to convert a string into a positive integer.\n    '''\n    # Your code here\n    if len(s)==0:\n        return 0\n    else:\n        return int(s)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if(str1.isdigit()):\n        return str1\n    else:\n        i = 0\n        while(i < len(str1)):\n            if(str1[i] % 2!= 0):\n                str1 = str1[:i] + str(str1[i]) + str(str1[i+1])\n            i += 1\n        return str1\n    \n    \n    \ndef solution(str1):\n    \n    return str1.replace('0','1').replace('1','0')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list_of_str = list(str1)\n    i = 0\n    while i < len(list_of_str):\n        if list_of_str[i] % 2!= 0:\n            list_of_str.remove(list_of_str[i])\n            i = i-1\n        i += 1\n    return \"\".join(list_of_str)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # your code here\n    return str1[::2]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for c in str1:\n        if c % 2!= 0:\n            result += c\n    return result\n    \ndef remove_even(str1):\n    '''\n    Write a function to remove even characters in a string.\n    '''\n    result = ''\n    for c in str1:\n        if c % 2 == 0:\n            result += c\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(\"Enter the string : \")\n    str2 = input()\n    print(\"Expected Output : \")\n    print(str2.replace('o','0'))\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1=str1.lower()\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replac"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    def remove_odd(str1):\n        '''\n        Function that takes a string as an argument,\n        returns a new string with all the odd characters removed.\n        '''\n        new_str1 = \"\"\n        if len(str1) == 0:\n            return str1\n        for i in range(0, len(str1)):\n            if str1[i] % 2 == 0:\n                new_str1 += str1[i]\n        return new_str1\n    return remove_odd\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str1[::2], '')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Your code here\n    return str1\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # sort out dataframe\n    test_list.sort_values(by='price', inplace=True)\n    # count pairs\n    counts = test_list.groupby(by='price').count()\n    # how many total pairs\n    total = test_list.groupby(by='price').size()\n    # return all pairs\n    return counts, total\n    \ndef count_unique(test_list):\n    '''\n    Write a function to count unique elements.\n    '''\n    # count each unique element\n    counts = test_list.groupby(by='price').count()\n    # get the elements that are unique\n    return counts\n    \ndef count_top_n(test_list, n):\n    '''\n    Write a function to count n top items from a dataframe.\n    '''\n    # create empty dictionary\n    test_dict = {}\n    # count each element\n    test_dict = {key: test_list[key].value_counts().iloc[:n].index[0] for key in test_list[key].value_counts().index[:n]}\n    # return dictionary\n    return test_dict\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item in test_list:\n        for i in range(0, len(item)-1):\n            if item[i][1] > item[i][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for t in test_list:\n        for k in t:\n            if k == (0, 0):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    lst = []\n    lst_2 = []\n    for i in test_list:\n        lst_2.append(i)\n        lst.append(tuple(lst_2))\n        lst_2 = []\n    return lst\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    print(\"\\n\\nA.B.C.D:\")\n    count = 0\n    if len(test_list) == 1:\n        return count\n    for i in range(len(test_list) - 1):\n        for j in range(len(test_list[i + 1]) - 1):\n            if test_list[i][0] == test_list[i + 1][j][0] and test_list[i][1] == test_list[i + 1][j][1]:\n                count += 1\n                print(test_list[i][1], test_list[i + 1][j], test_list[i + 1][j][1])\n    print(\"\\n\")\n    return count\n    \n    \ndef count_strict_bidirectional(test_list):\n    '''\n    Write a function to count strict bidirectional tuple pairs.\n    '''\n    print(\"\\n\\nA.B.C.D:\")\n    count = 0\n    if len(test_list) == 1:\n        return count\n    for i in range(len(test_list) - 1):\n        if test_list[i][0] == test_list[i + 1][0]:\n            for j in range(len(test_list[i]) - 1):\n                if test_list[i][j] == test_list[i + 1][j]:\n                    count += 1\n                    print(test_list[i][j], test_list[i + 1][j], test_list[i + 1][j])\n    print(\"\\n\")\n    return count\n    \ndef count_decreasing(test_list):\n    '''\n    Write a function to count decreasing tuples.\n    '''\n    print(\"\\n\\nA.B.C.D:\")\n    count = 0\n    if len(test_list) == 1:\n        return count\n    for i in range(len(test_list) - 1):\n        for j in range(len(test_list[i]) - 1):\n            if test_list[i][j] < test_list[i + 1][j]:\n                count += 1\n                print(test_list[i][j], test_list[i + 1][j], test_list[i + 1][j])\n    print(\"\\n\")\n    return count\n    \ndef count_increasing(test_list):\n    '''\n    Write a function to count increasing tuples.\n    '''\n    print(\"\\n\\nA.B.C.D:\")\n    count = 0\n    if len(test_list) == 1:\n        return count\n    for i in range(len(test_list) - 1):\n        for j in range(len(test_list[i]) - 1):\n            if test_list[i][j] > test_list[i + 1][j]:\n                count += 1\n                print(test_list[i][j], test_list[i + 1][j], test_list[i + 1][j])\n    print(\"\\n\")\n    return count\n    \ndef count_common_prefix(test_list):\n    '''\n    Write a function to count common prefix.\n    '''\n    print(\"\\n\\nA.B.C.D:\")\n    count = 0\n    if len(test_list) == 1:\n        return count\n    for i in range(len(test_list) - 1):\n        if test_list[i][0] == test_list[i + 1][0]:\n            count += 1\n            print(test_list[i][0], test_list[i + 1][0])\n    print(\"\\n\")\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    test_list = list(test_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = sorted(test_list, key=lambda x: (len(x[1]), x[0]))\n    # print(test_list)\n    bidirectional_count = 0\n    for j in range(len(test_list)-1):\n        for i in range(j+1, len(test_list)):\n            bidirectional_count += 1\n            # print(\"{}-{}\".format(test_list[j], test_list[i]))\n            if bidirectional_count > 1:\n                return test_list[j], test_list[i]\n    return test_list[-1], test_list[0]\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for test in test_list:\n        if isinstance(test, tuple):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    max = 0\n    for x in L:\n        if x > max:\n            max = x\n    print(max)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #returns list of ints\n    #Takes in a list of ints and returns the ints as a list\n    return list(map(int,L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    S = ''\n    for i in L:\n        S += str(i)\n    return S\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([int(x) for x in L])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    if len(L) == 2:\n        return L[0] + L[1]\n    else:\n        result = L[0]\n        for item in L[1:]:\n            result = result + item\n        return result\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y:str(x) + str(y), L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # TODO: Write the function so that it returns the integer as the only parameter passed to it.\n    print(L)\n    return int(\"\".join(map(str, L)))\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = re.sub(r'\\s+','', text)\n    adverbs = re.findall('\\+\\+|\\-\\-\\-+|\\*\\*|\\*\\*\\-\\-+|\\*\\*\\-\\-+|\\*\\*\\-\\+|\\-\\+', text)\n    adverbs_index = []\n    for adverb in adverbs:\n        adverbs_index.append(adverb.find(' '))\n    # check if there are more adverbs than 1\n    if len(adverbs) > 1:\n        for index, adverb in enumerate(adverbs_index):\n            if adverb > 0:\n                # if there are adverbs > 1, a position is when it's the first adverb,\n                # so we will have to check if there are more adverbs, if there are more,\n                # then we can return the indexes of the first adverb, and the position of the\n                # first adverb, then return a position.\n                if index + adverbs_index[index + 1] < len(adverbs_index):\n                    return index, adverbs_index[index + 1]\n    # if there are no adverbs, then we return the indexes of the first adverb.\n    return adverbs_index[0], 0\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # print(text)\n    pattern = r'(?<=\\D)'\n    result = re.findall(pattern, text)\n    # print(result)\n    # result = [x for x in result if x[1]!= '\\'']\n    result = [x for x in result if x[1]!= '-']\n    # print(result)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # First find all adverbs in the sentence\n    adverb_regex = r'(?<=\\w)\\.{1,2}(?=\\w)'\n    adverb_positions = re.finditer(adverb_regex, text, re.MULTILINE)\n    adverb_positions = [a for a in adverb_positions if len(a.group())==1]\n    if len(adverb_positions)==0:\n        return None\n    adverb_positions = [adverb_pos[0] for adverb_pos in adverb_positions]\n    # Then find all possible bools\n    concatenated_text =''.join([a for a in text.split(' ')])\n    #print(concatenated_text)\n    adverb_positions = [len(concatenated_text)-adverb_pos[0] for adverb_pos in adverb_positions]\n    #print(adverb_positions)\n    # return all adverbs and their positions in a dictionary\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression that will identify the first and last words in a sentence.\n    first_word = re.compile(r'(\\w+) ([0-9]+)')\n    last_word = re.compile(r'(\\w+) ([0-9]+)')\n    # loop over each word in the sentence\n    for word in text.split():\n        # find the words in the sentence that are words and not numbers\n        first_words = re.findall(first_word, word)\n        last_words = re.findall(last_word, word)\n        # if any of the words in the sentence are in the sentence\n        if len(first_words) == 1 and len(last_words) == 1:\n            # if the words are the same\n            if first_words[0][0].isupper():\n                # get the position in the sentence where the first word is.\n                first_position = first_words[0][1]\n                # if the first word starts with a number, it will be a adverb\n                if first_position.isdigit():\n                    # get the position in the sentence where the last word is.\n                    last_position = last_words[0][1]\n                    # if the last word starts with a number, it will be a adverb\n                    if last_position.isdigit():\n                        # if the last word starts with a number, it will be a adverb\n                        if last_position.isdigit():\n                            # return the position of the first word\n                            return int(first_position), int(last_position)\n                        else:\n                            # if the last word doesn't start with a number, it will be a adverb\n                            return int(first_position), int(last_position)\n                    else:\n                        # if the last word doesn't start with a number, it will be a adverb\n                        return int(first_position), int(last_position)\n                else:\n                    # return the position of the first word\n                    return int(first_position)\n            else:\n                # if the first word is not in numbers, it will be a noun, but it doesn't start with a number\n                # return the position of the first word\n                return int(first_words[0][1])\n        else:\n            # if the first word is not in numbers, it will be a noun, but it doesn't start with a number\n            # return the position of the first word\n            return int(first_words[0][1])\n    else:\n        return -1\ndef find_adverb_position_with_count(text):\n    '''\n    Write a function to find the first adverb and their counts in a given sentence.\n    '''\n    # Define a regular expression that will identify the first and last words in a sentence.\n    first_word = re.compile(r'(\\w+) ([0-9]+)')\n    last_word = re.compile(r'(\\w+) ([0-9]+)')\n    # loop over each word in the sentence\n    for word in text.split():\n        # find the words in the sentence that are words and not numbers\n        first_words = re.findall(first_word, word)\n        last_words = re.findall(last_word, word)\n        # if any of the words in the sentence are in the sentence\n        if len(first_words) == 1 and len(last_words) == 1:\n            # if the words are the same\n            if first_words[0][0].isupper():\n                # get the count of the first word\n                count = first_words[0][1]\n                # if the first word starts with a number, it will be a adverb\n                if count.isdigit():\n                    # get the position in the sentence where the first word is.\n                    first_position = first_words[0][1]\n                    # if the first word starts with a number, it will be a adverb\n                    if first_position.isdigit():\n                        # get the count of the first word\n                        count = first_words[0][1]\n                        # if the last word doesn't start with a number, it will be a adverb\n                        if count.isdigit():\n                            # get the count of the last word\n                            last_position = last_words[0][1]\n                            # if the last word doesn't start with a number, it will be a adverb\n                            if last_position.isdigit():\n                                # return the position of the first word\n                                return int(first_position), int(last_position)\n                            else:\n                                # if the last word doesn't start with a number, it will be a adverb\n                                return int(first_position), int(last_position)\n                        else:\n                            # if the last word doesn't start with a number, it will be a adverb\n                            return int(first_position), int(last_position)\n                    else:\n                        # if the first word is not in numbers, it will be a noun, but it doesn't start with a number\n                        # return the position of the first word\n                        return int(first_position)\n                else:\n                    # if the first word is not in numbers, it will be a noun, but it doesn't start with a number\n                    # return the position of the first word\n                    return int(first_words[0][1])\n            else:\n                # if the first word is not in numbers, it will be a noun, but it doesn't start with a number\n                # return the position of the first word\n                return int(first_words[0][1])\n        else:\n            # if the first word is not in numbers, it will be a noun, but it doesn't start with a number\n            # return the position of the first word\n            return int(first_words[0][1])\n    else:\n        return -1\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    list = re.findall(r\"\\b[A-Z]*[0-9]*[a-z]+[0-9]*[a-z]*[0-9]*\\b\", text)\n    list_size = len(list)\n    if list_size == 1:\n        first_adverb = list[0]\n        list = re.findall(r\"\\b[A-Z]*[0-9]*[a-z]+[0-9]*[a-z]*[0-9]*\\b\", text)\n        last_adverb = list[len(list)-1]\n        return f\"the {first_adverb} {last_adverb}\"\n    elif list_size == 2:\n        first_adverb = list[0]\n        second_adverb = list[1]\n        if first_adverb in [\"n\",\"v\"]:\n            return f\"the {first_adverb} {second_adverb}\"\n        else:\n            return f\"the {first_adverb} {second_adverb}\"\n    else:\n        raise ValueError\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    num = []\n    for i in range(len(text)):\n        if text[i] in 'aA':\n            if text[i+1] in 'aeiou':\n                if text[i+2] in 'aeiou':\n                    if text[i+3] in 'aeiou':\n                        if text[i+4] in 'aeiou':\n                            if text[i+5] in 'aeiou':\n                                if text[i+6] in 'aeiou':\n                                    if text[i+7] in 'aeiou':\n                                        if text[i+8] in 'aeiou':\n                                            if text[i+9] in 'aeiou':\n                                                if text[i+10] in 'aeiou':\n                                                    if text[i+11] in 'aeiou':\n                                                        if text[i+12] in 'aeiou':\n                                                            return(text[i])\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            return(i)\n                                                            retur"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    m = re.finditer(r'^\\s*(.*)Adverb', text)\n    first_adverb_positions = []\n    for i in m:\n        first_adverb_positions.append(i.span())\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    adverb_positions = []\n    adverb_pattern = '\\([^)]*?\\)'\n    adverb_pattern_sep = ','\n    \n    #Parsing the text\n    for i in range(len(text)):\n        if text[i] in '+-':\n            adverb_positions.append(i)\n            \n    #The first adverb\n    adverb_start = adverb_positions[0]\n    adverb_end = adverb_positions[-1]\n    \n    #Parsing the first adverb\n    adverb_span = text[adverb_start:adverb_end]\n    \n    #Stripping the adverb\n    adverb_span = adverb_span.strip('()')\n    \n    #Finding the start position\n    start_position = re.search(adverb_pattern, adverb_span).start()\n    \n    #Finding the end position\n    end_position = re.search(adverb_pattern_sep, adverb_span).end()\n    \n    #Printing the result\n    print(start_position, end_position)\n    \n    #Setting up the adverb\n    adverb = text[start_position:end_position]\n    \n    #Setting up the position of the adverb\n    adverb_pos = {}\n    adverb_pos['start_position'] = start_position\n    adverb_pos['end_position'] = end_position\n    adverb_pos['adverb'] = adverb\n    adverb_pos['position'] = adverb_pos['start_position']\n    \n    #Parsing the position\n    position_pattern = '\\([^)]*?\\)'\n    position_pattern_sep = ','\n    \n    #Finding the first adverb position\n    first_adverb_start = re.search(position_pattern, adverb_span).start()\n    first_adverb_end = re.search(position_pattern_sep, adverb_span).end()\n    \n    #Parsing the first adverb position\n    first_adverb_span = adverb_span[first_adverb_start:first_adverb_end]\n    \n    #Stripping the adverb position\n    first_adverb_span = first_adverb_span.strip('()')\n    \n    #Finding the start position of the first adverb\n    start_position = re.search(position_pattern, first_adverb_span).start()\n    \n    #Finding the end position of the first adverb\n    end_position = re.search(position_pattern_sep, first_adverb_span).end()\n    \n    #Printing the result\n    print(start_position, end_position)\n    \n    #Setting up the adverb\n    adverb = text[start_position:end_position]\n    \n    #Setting up the position of the adverb\n    adverb_pos = {}\n    adverb_pos['start_position'] = start_position\n    adverb_pos['end_position'] = end_position\n    adverb_pos['adverb'] = adverb\n    adverb_pos['position'] = adverb_pos['start_position']\n    \n    #Finalizing the result\n    return adverb_pos\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if \"the\" in text:\n        return -1\n    elif \"a\" in text:\n        return -1\n    elif \"is\" in text:\n        return -1\n    elif \"isn\" in text:\n        return -1\n    elif \"aren\" in text:\n        return -1\n    elif \"to\" in text:\n        return -1\n    elif \"their\" in text:\n        return -1\n    elif \"those\" in text:\n        return -1\n    elif \"hers\" in text:\n        return -1\n    elif \"theirs\" in text:\n        return -1\n    elif \"it\" in text:\n        return -1\n    elif \"their\" in text:\n        return -1\n    elif \"isn\" in text:\n        return -1\n    elif \"are\" in text:\n        return -1\n    elif \"at\" in text:\n        return -1\n    elif \"isn\" in text:\n        return -1\n    elif \"is\" in text:\n        return -1\n    elif \"the\" in text:\n        return -1\n    elif \"the\" in text:\n        return -1\n    elif \"a\" in text:\n        return -1\n    elif \"is\" in text:\n        return -1\n    elif \"isn\" in text:\n        return -1\n    elif \"aren\" in text:\n        return -1\n    elif \"to\" in text:\n        return -1\n    elif \"hers\" in text:\n        return -1\n    elif \"theirs\" in text:\n        return -1\n    elif \"it\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"the\" in text:\n        return -1\n    elif \"the\" in text:\n        return -1\n    elif \"a\" in text:\n        return -1\n    elif \"is\" in text:\n        return -1\n    elif \"isn\" in text:\n        return -1\n    elif \"aren\" in text:\n        return -1\n    elif \"to\" in text:\n        return -1\n    elif \"hers\" in text:\n        return -1\n    elif \"theirs\" in text:\n        return -1\n    elif \"it\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"it\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"they\" in text:\n        return -1\n    elif \"the"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split()\n    adverbs = [\"ing\", \"ed\", \"ing\", \"ed\", \"ing\", \"ed\", \"ing\", \"ed\", \"ing\", \"ing\", \"ing\", \"ed\"]\n    adverb_positions = [0] * len(adverbs)\n    for i in range(len(sentence)):\n        if sentence[i] in adverbs:\n            adverb_positions[adverbs.index(sentence[i])] = i\n    return adverb_positions\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 0\n    for i in range(0,l):\n        for j in range(0,l):\n            for k in range(0,l):\n                if i+j+k!= l:\n                    if i==0 and j==0 and k==0:\n                        surfacearea+=1\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l = l/2\n    area = l * l * 0.25 * 3.14\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # if cube is square, calculate area\n    if isinstance(l, list) and len(l) == 3:\n        return 0.5*l[0]*l[1]*l[2]\n    # if cube is a cuboid, calculate area\n    if isinstance(l, list) and len(l) == 4:\n        a = 0.5*(l[0]*l[1]*l[2])\n        for i in range(3):\n            a += l[i]*l[i]\n        return a\n    # if no cube is defined, returns a square of given size\n    return l*l"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(l):\n        area += 0.5*(1 + i/l)**3\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    m = l\n    l = l*l\n    l = l*l\n    return l * (l+l+l+l+l+l+l+l)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Complete the function\n    return 0\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**3)*(4/3)*(3.14)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(1,int(l)):\n        area += ((l/2)**3)*i\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area=0\n    l=l.split(')')\n    for i in range(len(l)):\n        if l[i]==' ':\n            l[i]=l[i].replace('(','')\n            l[i]=l[i].replace(')','')\n            l[i]=l[i].replace(',','')\n            if l[i]=='.':\n                l[i]=l[i].replace('.','')\n                area=area+float(l[i])*int(l[i])\n    print(area)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array for the ratios\n    ratios = []\n    # Loop through the numbers\n    for i in range(len(nums)):\n        # Check if the numbers is positive\n        if nums[i] >= 0:\n            # Add the number to the ratio\n            ratios.append(nums[i] / 100)\n    # Return the ratios\n    return ratios\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize the array for positive numbers\n    positive_array = array('i', [0 for i in range(nums[0])])\n    # Initialize the total positive numbers\n    total_positive = 0\n    # Initialize the total negative numbers\n    total_negative = 0\n    # Add positive numbers to the positive_array\n    for i in range(0, len(nums)):\n        # Add positive numbers to the positive_array\n        total_positive = total_positive + nums[i]\n        # Check if nums[i] is positive\n        if nums[i] > 0:\n            # Add positive numbers to the positive_array\n            positive_array[nums[i]] += 1\n    # Check if the total_positive is equal to the total numbers\n    if total_positive == len(nums):\n        # Return the ration of positive numbers\n        return positive_array\n    # Check if the total_negative is equal to the total numbers\n    elif total_negative == len(nums):\n        # Return the ration of negative numbers\n        return positive_array\n    # Check if the total_positive is not equal to the total numbers\n    else:\n        # Return the ration of negative numbers\n        return positive_array\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n=len(nums)\n    positive=0\n    for i in range(n):\n        if nums[i]>0:\n            positive+=1\n    return positive//n\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = []\n    for num in nums:\n        if num >= 0:\n            pos_nums.append(num)\n    \n    return (len(pos_nums) - len(nums)) / len(nums)\n        \n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for i in nums:\n        if i>0:\n            total += i\n    return total/sum(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    \n    return positives / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    N = len(nums)\n    max_count = max(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # get the positive numbers\n    positive = []\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            positive.append(nums[i])\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    positive = 0\n    for item in list1:\n        if item > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i < largest:\n            largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l = list(list1) \n    l.sort()\n    print (l)\n    print (largest(l))\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[j] < list1[i]:\n                list1[i], list1[j] = list1[j], list1[i]\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -int(list1[0])\n    for i in range(1,len(list1)): \n        if -int(list1[i]) > max: \n            max = -int(list1[i])\n    return max\n    \ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    max = int(list1[0])\n    for i in range(1,len(list1)): \n        if -int(list1[i]) < max: \n            max = -int(list1[i])\n    return max\n    \ndef remove_at(list1,idx): \n    '''\n    Write a python function to remove a specific index from the given list.\n    '''\n    list1.pop(idx)\n    return list1\n    \ndef in_list(list1,x): \n    '''\n    Write a python function to check if a given index is in the given list.\n    '''\n    return x in list1\n    \ndef check_for_list_items(list1,x): \n    '''\n    Write a python function to check if all the elements of a list are same as given x. \n    '''\n    for i in list1: \n        if i!= x: \n            return False\n    return True\n    \ndef reverse_list(list1): \n    '''\n    Write a python function to reverse a given list.\n    '''\n    l = list1[0]\n    for i in range(len(list1)-1): \n        list1[i] = list1[i+1]\n    list1[len(list1)-1] = l\n    return list1\n    \ndef check_all_same(list1,x): \n    '''\n    Write a python function to check if all the elements of a list are the same. \n    '''\n    for i in list1: \n        if i!= x: \n            return False\n    return True\n    \ndef check_for_list_items2(list1,x): \n    '''\n    Write a python function to check if all the elements of a list are the same as given x. \n    '''\n    for i in list1: \n        if i!= x: \n            return False\n    return True\n    \ndef check_all_same2(list1,x): \n    '''\n    Write a python function to check if all the elements of a list are the same. \n    '''\n    for i in list1: \n        if i!= x: \n            return False\n    return True\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    # '''\n    # Input: list of numbers\n    # Output: largest number from the given list\n    # '''\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        if -list1[i] > max:\n            max = list1[i]\n    return max\n    \ndef largest_pos(list1):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        if list1[i] > max:\n            max = list1[i]\n    return max\n    \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    min = 9999999\n    for i in range(len(list1)):\n        if -list1[i] < min:\n            min = list1[i]\n    return min\n    \ndef smallest_pos(list1):\n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    min = 9999999\n    for i in range(len(list1)):\n        if list1[i] < min:\n            min = list1[i]\n    return min\n    \ndef area_of_triangle(a, b, c):\n    '''\n    Write a python function to compute the area of a triangle given the lengths of the sides.\n    '''\n    s = ((a + b + c) / 2)\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n    \ndef area_of_triangle_calc(a, b, c):\n    '''\n    Write a python function to compute the area of a triangle given the lengths of the sides.\n    '''\n    s = ((a + b + c) / 2)\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n    \ndef area_of_rectangle(a, b):\n    '''\n    Write a python function to compute the area of a rectangle given its base and height.\n    '''\n    area = a*b\n    return area\n    \ndef area_of_rectangle_calc(a, b):\n    '''\n    Write a python function to compute the area of a rectangle given its base and height.\n    '''\n    area = a*b\n    return area\n    \ndef perimeter(a, b, c):\n    '''\n    Write a python function to compute the perimeter of a rectangle given its base and height.\n    '''\n    per = (a + b + c)\n    return per\n    \ndef perimeter_calc(a, b, c):\n    '''\n    Write a python function to compute the perimeter of a rectangle given its base and height.\n    '''\n    per = (a + b + c)\n    return per\n    \ndef perimeter_area(a, b):\n    '''\n    Write a python function to compute the perimeter of a rectangle given its base and height.\n    '''\n    area = (a + b)\n    return area\n    \ndef perimeter_area_calc(a, b):\n    '''\n    Write a python function to compute the perimeter of a rectangle given its base and height.\n    '''\n    area = (a + b)\n    return area\n    \ndef perimeter_area_cubic(a, b, c, d):\n    '''\n    Write a python function to compute the perimeter of a rectangle given its base and height.\n    '''\n    area = a*(b*c*d)**0.5\n    return area\n    \ndef perimeter_area_cubic_calc(a, b, c, d):\n    '''\n    Write a python function to compute the perimeter of a rectangle given its base and height.\n    '''\n    area = a*(b*c*d)**0.5\n    return area\n    \ndef volume_of_rectangle(a, b, c):\n    '''\n    Write a python function to compute the volume of a rectangle given its base and height.\n    '''\n    volume = a*b*c\n    return volume\n    \ndef volume_of_rectangle_calc(a, b, c):\n    '''\n    Write a python function to compute the volume of a rectangle given its base and height.\n    '''\n    volume = a*b*c\n    return volume\n    \ndef volume_of_rectangle_cubic(a, b, c, d, e, f):\n    '''\n    Write a python function to compute the volume of a rectangle given its base and height.\n    '''\n    volume = a*(b*c*d)*(e*f)\n    return volume\n    \ndef volume_of_rectangle_cubic_calc(a, b, c, d, e, f):\n    '''\n    Write a python function to compute the volume of a rectangle given its base and height.\n    '''\n    volume = a*(b*c*d)*(e*f)\n    return volume\n    \ndef volume_of_square(a, b, c):\n    '''\n    Write a python function to compute the volume of a square given its base and height.\n    '''\n    volume = a*b*c\n    return volume\n    \ndef volume_of_square_calc(a, b, c):\n    '''\n    Write a python function to compute the volume of a square given its base and height.\n    '''\n    volume = a*b*c\n    return volume\n    \ndef volume_of_square_cubic(a, b, c, d, e, f):\n    '''\n    Write a python function to compute the volume of a square given its base and height.\n    '''\n    volume = a*(b*c*d)*(e*f)\n    return volume\n    \ndef volume_of_square_cubic_calc(a, b, c, d, e, f):\n    '''\n    Write a python function to compute the volume of a square given its base and height.\n    '''\n    volume = a*(b*c*d)*(e*f)\n    return volume\n    \ndef volume_of_circle(a, b, c):\n    '''\n    Write a python function to compute the volume of a circle given its base and height.\n    '''\n    volume = a*b\n    return volume\n    \ndef volume_of_circle_calc(a, b, c):\n    '''\n    Write a python function to compute the volume of a circle given its base and height.\n    '''\n    volume = a*b*c\n    return volume\n    \ndef volume_of_circle_cubic(a, b, c, d, e, f):\n    '''\n    Write a python function to compute the volume of a circle given its base and height.\n    '''\n    volume = a*(b*c*d)*(e*f)\n    return volume\n    \ndef volume_of_circle_cubic_calc(a, b, c, d, e, f):\n    '''\n    Write a python function to compute the volume of a circle given its base and height.\n    '''\n    volume = a*(b*c*d)*(e*f)\n    return volume\n    \ndef volume_of_polygon(a, b, c):\n    '''\n    Write a python function to compute the volume of a polygon given its base and height.\n    '''\n    volume = a*b*c\n    return volume\n    \ndef volume_of_polygon_calc(a, b, c):\n    '''\n    Write a python function to compute the volume of a polygon given its base and height.\n    '''\n    volume = a*b*c\n    return volume\n    \ndef volume_of_polygon_cubic(a, b, c, d, e, f):\n    '''\n    Write a python function to compute the volume of a polygon given its base and height.\n    '''\n    volume = a*(b*c*d)*(e*f)\n    return volume\n    \ndef volume_of_polygon_cubic_calc(a, b, c, d, e, f):\n    '''\n    Write a python function to compute the volume of a polygon given its base and height.\n    '''\n    volume = a*(b*c*d)*(e*f)\n    return volum"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0] \n    for i in range(len(list1)): \n        if list1[i] < 0: \n            if list1[i] > max_neg: \n                max_neg = list1[i] \n    return max_neg \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = 0\n    for num in list1:\n        if num < 0:\n            largest_negative = num\n            break\n    return largest_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for num in list1: \n        if num > largest: \n            largest = num \n    return largest\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        i = i[0:K]\n        del i[-1]\n        yield i\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # your code here\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    final_list = []\n    for x in test_list:\n        if len(x) > K:\n            final_list.append(x[:K])\n        else:\n            final_list.append(x)\n    return final_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        for j in range(K):\n            return_list.append(test_list[i][j])\n    return return_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    output_list = []\n    for item in test_list:\n        if len(item) <= K:\n            output_list.append(item)\n        else:\n            output_list.append(item[:K])\n            \n    return output_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    t = test_list\n    for i in range(len(t)):\n        if(i % K == 0):\n            t[i] = t[i][:-1]\n    return t\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        for j in range(K):\n            i = (i[:j]) + (i[j+1:])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    while len(test_list) > 1:\n        t = test_list[-1]\n        test_list = test_list[:-1]\n        test_list.append(t)\n    return test_list\n    \n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(item[:K]) for item in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    tuple_list = test_list\n    for i in range(len(tuple_list)):\n        if len(tuple_list[i]) > K:\n            tuple_list[i] = tuple_list[i][:K]\n    return tuple_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple()\n    #Loop through all the elements of both tuples and store them as list elements.\n    for i in range(len(test_tup1)):\n        #For each element in the first tuple, add the result of the element multiplied by the corresponding element in the second tuple.\n        result += [test_tup1[i] * test_tup2[i]]\n    #Return the resulting tuple\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    if len(test_list1) == len(test_list2):\n        for i in range(len(test_list1)):\n            test_list1[i] *= test_list2[i]\n        test_list1 = tuple(test_list1)\n        return test_list1\n    else:\n        return print(\"Error. Index Mismatch Occurred\")\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (1, 2, 3, 4, 5)\nprint(index_multiplication(test_tup1, test_tup2))"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplied_tuple1 = test_tup1[0] * test_tup1[1]\n    multiplied_tuple2 = test_tup2[0] * test_tup2[1]\n    return (multiplied_tuple1, multiplied_tuple2)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize the index values of the first tuple\n    index_tuple1 = []\n    for i in test_tup1:\n        index_tuple1.append(i)\n    # initialize the index values of the second tuple\n    index_tuple2 = []\n    for i in test_tup2:\n        index_tuple2.append(i)\n    # initialize the index values of the output tuple\n    output_tuple = []\n    for i in range(len(test_tup1)):\n        output_tuple.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        output_tuple.append(test_tup2[i])\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result += test_tup1[i] * test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0]\n    \n    \ndef index_conversion(test_tup):\n    '''\n    Write a function to convert tuple to string.\n    '''\n    return str(test_tup[0]) + \",\" + str(test_tup[1])\n    \n    \ndef main():\n    '''\n    Test Cases\n    Test case 1: tuple = (1,2), tuple = (2,1), tuple = (1,2,1,1,3,4)\n    Expected Output: '1,2,1,1,3,4'\n    Test case 2: tuple = (1,2), tuple = (2,1), tuple = (1,2,1,1,3,4)\n    Expected Output: '1,2,1,1,3,4'\n    Test case 3: tuple = (1,2), tuple = (2,1), tuple = (1,2,1,1,3,4)\n    Expected Output: '1,2,1,1,3,4'\n    Test case 4: tuple = (1,2), tuple = (2,1), tuple = (1,2,1,1,3,4)\n    Expected Output: '1,2,1,1,3,4'\n    '''\n    #Test case 1\n    tup = (1,2)\n    #tup = (2,1)\n    #tup = (1,2,1,1,3,4)\n    print(\"Test case 1: tuple = {}\".format(tup))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 2: tuple = {}\".format(tup))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 3: tuple = {}\".format(tup))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 4: tuple = {}\".format(tup))\n    \n    \n    #Test case 2\n    tup2 = (2,1)\n    #tup2 = (2,1,1,1,3,4)\n    print(\"Test case 2: tuple = {}\".format(tup2))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 3: tuple = {}\".format(tup2))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 4: tuple = {}\".format(tup2))\n    \n    \n    #Test case 3\n    tup3 = (1,2,1,1,3,4)\n    print(\"Test case 3: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 4: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 5: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 6: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 7: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 8: tuple = {}\".format(tup3))\n    \n    \n    #Test case 4\n    print(\"Test case 4: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 5: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 6: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 7: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 8: tuple = {}\".format(tup3))\n    \n    \n    #Test case 5\n    print(\"Test case 5: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 6: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 7: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 8: tuple = {}\".format(tup3))\n    \n    \n    #Test case 6\n    print(\"Test case 6: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 7: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 8: tuple = {}\".format(tup3))\n    \n    \n    #Test case 7\n    print(\"Test case 7: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 8: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 9: tuple = {}\".format(tup3))\n    \n    \n    #Test case 8\n    print(\"Test case 8: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 9: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 10: tuple = {}\".format(tup3))\n    \n    \n    #Test case 9\n    print(\"Test case 9: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 10: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 11: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 12: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 13: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 14: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 15: tuple = {}\".format(tup3))\n    \n    \n    #Test case 10\n    print(\"Test case 10: tuple = {}\".format(tup3))\n    print(\"Expected Output: '1,2,1,1,3,4'\")\n    print(\"Test case 11: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 12: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 13: tuple = {}\".format(tup3))\n    print(\"Expected Output: '2,1,1,1,3,4'\")\n    print(\"Test case 14: tuple = {}\".format(tup3))\n    print("
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index = 0\n    for i in range(len(test_tup1)):\n        index *= test_tup2[i]\n    print(index)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            print(tup1 + tup2)\n    print(\"\\n\")\n    \ntest_tup1 = (1,2,3,4,5)\ntest_tup2 = (6,7,8,9,10)\nprint(index_multiplication(test_tup1, test_tup2))\n    "
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    l = len(test_tup1)\n    index = 0\n    for i in range(l):\n        index = index + test_tup1[i] * test_tup2[i]\n    return index\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for x in tup:\n        if x in lst:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence = 0\n    for i in tup:\n        occurrence += lst.count(i)\n    return occurrence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(lst) \n    occur_list = [0] * (len(lst)) \n    for i in tup:\n        occur_list[i] += 1\n    return occur_list \n \ndef union_find(lst, key): \n    '''\n    Write a python function to find the root node of a tree and the parent node of a root node. \n    '''\n    root = -1\n    parent = -1\n    for i in range(len(lst)): \n        if lst[i] == key: \n            root = i \n            parent = i \n    return root, parent \n \ndef make_set(lst, x): \n    '''\n    Write a python function to return the node with value x from the given list. \n    '''\n    if x not in lst: \n        lst.append(x) \n        return lst \n    else: \n        return make_set(lst, lst.index(x)) \n \ndef print_set(lst): \n    '''\n    Write a python function to print all the nodes in the given list. \n    '''\n    for i in range(len(lst)): \n        print(lst[i], end ='') \n    print() \n \ndef predecessor_find(lst, x): \n    '''\n    Write a python function to find the predecessor of a node in the given list. \n    '''\n    for i in range(len(lst)): \n        if lst[i] == x: \n            return i \n    return -1\n \ndef count_consecutive_nodes(tup, lst): \n    '''\n    Write a python function to count the consecutive nodes of the given list. \n    '''\n    lst = list(lst) \n    occur_list = count_Occurrence(tup, lst) \n    con_list = [0] * (len(lst) + 1) \n    con_list[0] = 1\n    for i in range(1, len(lst) + 1): \n        con_list[i] = con_list[i - 1] + occur_list[i - 1] \n    return con_list \n \ndef count_lowest_common_ancestor(parent, child): \n    '''\n    Write a python function to find the lowest common ancestor of two nodes in a given tree. \n    '''\n    if parent == child: \n        return parent \n    if parent[1]!= child[1]: \n        return count_lowest_common_ancestor(parent, child[1]) \n    return parent[1] \n \ndef count_lowest_common_ancestor_indegree(lst): \n    '''\n    Write a python function to find the lowest common ancestor of two nodes in a given tree. \n    '''\n    lst = list(lst) \n    indegree = [0] * (len(lst) + 1) \n    for i in range(1, len(lst) + 1): \n        indegree[i] = indegree[i - 1] + 1 \n    return indegree \n \ndef inorder_traversal(root): \n    '''\n    Write a python function to print the inorder traversal of a given tree. \n    '''\n    if root == None: \n        return \n    inorder_traversal(root[0]) \n    print(root[1], end ='') \n    inorder_traversal(root[1]) \n \ndef level_order_traversal(root): \n    '''\n    Write a python function to print the level order traversal of a given tree. \n    '''\n    if root == None: \n        return \n    if root == []: \n        return \n    queue = [root] \n    while(len(queue)!= 0): \n        curr = queue.pop(0) \n        print(curr[1], end ='') \n        for i in range(1, len(curr)): \n            if (i == 1): \n                print(curr[i], end ='') \n            else: \n                print(curr[i], end ='') \n                queue.append(curr[i]) \n \ndef level_order_traversal_indegree(root): \n    '''\n    Write a python function to print the level order traversal of a given tree. \n    '''\n    if root == None: \n        return \n    queue = [root] \n    if root == []: \n        return \n    while(len(queue)!= 0): \n        curr = queue.pop(0) \n        if (curr[1].count(0) >= 2): \n            print(curr[1], end ='') \n            queue.append(curr[1]) \n        else: \n            print(curr[1], end ='') \n            queue.append(curr[1][:curr[1].index(0)]) \n \ndef level_order_traversal_inconsistent(root): \n    '''\n    Write a python function to print the level order traversal of a given tree. \n    '''\n    if root == None: \n        return \n    queue = [root] \n    while(len(queue)!= 0): \n        curr = queue.pop(0) \n        if (curr[1].count(0) == 0): \n            print(curr[1], end ='') \n            queue.append(curr[1]) \n        else: \n            queue.append(curr[1][:curr[1].index(0)]) \n \n \ndef level_order_traversal_with_indegree(root): \n    '''\n    Write a python function to print the level order traversal of a given tree. \n    '''\n    if root == None: \n        return \n    queue = [root] \n    if root == []: \n        return \n    while(len(queue)!= 0): \n        curr = queue.pop(0) \n        if (curr[1].count(0) == 0): \n            print(curr[1], end ='') \n            queue.append(curr[1]) \n        else: \n            for i in range(len(curr[1])): \n                if curr[1][i] == 0: \n                    queue.append(curr[1][:i]) \n                    queue.append(curr[1][i + 1:]) \n                else: \n                    queue.append(curr[1][i]) \n                    queue.append(curr[1][i + 1:]) \n \ndef level_order_traversal_with_inconsistent(root): \n    '''\n    Write a python function to print the level order traversal of a given tree. \n    '''\n    if root == None: \n        return \n    queue = [root] \n    while(len(queue)!= 0): \n        curr = queue.pop(0) \n        if (curr[1].count(0) == 0): \n            print(curr[1], end ='') \n            queue.append(curr[1]) \n        else: \n            for i in range(len(curr[1])): \n                if curr[1][i] == 0: \n                    queue.append(curr[1][:i]) \n                    queue.append(curr[1][i + 1:]) \n                else: \n                    queue.append(curr[1][i]) \n                    queue.append(curr[1][i + 1:]) \n \n \ndef level_order_traversal_with_bfs_result(root): \n    '''\n    Write a python function to print the level order traversal of a given tree. \n    '''\n    if root == None: \n        return \n    queue = [root] \n    while(len(queue)!= 0): \n        curr = queue.pop"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst2 = []\n    for i in tup: \n        if i in lst: \n            lst2.append(lst.count(i))\n    return lst2\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    mydict = dict()\n    for i in range(len(tup)):\n        mydict[tup[i]] = lst[i]\n    return mydict\n    \ndef distinct_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of distinct elements of a tuple.\n    '''\n    mydict = dict()\n    for i in range(len(tup)):\n        mydict[tup[i]] = lst[i]\n    return mydict\n    \ndef count_Occurrence_dict(tup, lst):\n    '''\n    Write a python function to count the occurence of distinct elements of a tuple.\n    '''\n    mydict = dict()\n    for i in range(len(tup)):\n        mydict[tup[i]] = lst[i]\n    return mydict\n    \ndef count_Occurrence_dict_1(tup, lst):\n    '''\n    Write a python function to count the occurence of distinct elements of a tuple.\n    '''\n    mydict = dict()\n    for i in range(len(tup)):\n        mydict[tup[i]] = lst[i]\n    return mydict\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst: \n        if i in tup: \n            count += 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    return cnt.most_common(lst)\ndef count_Occurrence_1(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    return cnt.items()\ndef count_Occurrence_2(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    return cnt.values()\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d={}\n    for i in lst:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence_count = {}\n    for item in lst:\n        occurence_count[item] = occurence_count.get(item, 0) + 1\n    return occurence_count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for e in lst:\n        if e in tup:\n            count += 1\n    return count\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    output = []\n    for i in range(len(nums)):\n        output.append(nums[i]*(3**i))\n    return output\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num*num*num)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if not nums:\n        return 0\n    return nums[0] * nums[0] * nums[0]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [1,3,9,27,125,729]\n    result = []\n    for num in nums:\n        result.append(num * cube[num])\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(nums[i]*nums[i]*nums[i])\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    nums_map = {}\n    \n    for n in nums:\n        nums_map[n] = n*n*n\n    \n    cubes = 0\n    for key in nums_map:\n        cubes += nums_map[key]**3\n    \n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cube = i**3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        num **= 3\n    return num\n    \ndef cubed_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        num **= 2\n    return num\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    num_list = []\n    for i in range(0, len(nums), 3):\n        num_list.append(nums[i] ** 3)\n    return num_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    from itertools import product\n    return list(map(lambda x: x**3, product(*nums))"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # sum = 0\n    # for i in range(1, n + 1):\n    #     sum += i\n    # return sum\n    sum = n * (n - 1)\n    # sum = n * (n - 1) + n\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n+sum(range(n))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    return sum\ndef run():\n    num=int(input(\"Enter the number of elements you want to enter: \"))\n    l=[]\n    for i in range(0,num):\n        l.append(int(input()))\n    print(cal_sum(l))\nif __name__ == '__main__':\n    run("
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #create an empty list\n    result = []\n    #calculate each number \n    for i in range(1, n+1):\n        #add the number to the empty list\n        result.append(i)\n    #print the list\n    print(result)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(0, len(str), l):\n        res.append(str[i:i+l])\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) >= l:\n        return str[:l]\n    else:\n        return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) <= l:\n        return ''\n    else:\n        return str[l:l+l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # code here\n    if str[0] == \"0\":\n        return -1\n    else:\n        return l.index(str[0])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return str\n    if len(str) == 1:\n        return str[0]\n    if len(str) == 2:\n        return str[0] + str[1]\n    # If the string has more than 2 elements, we have to join together them\n    return str[0] + extract_string(str[1:], l)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    index = l[0]\n    if len(str) <= index:\n        return ''\n    else:\n        return extract_string(str, l[1:index])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l].strip()\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    maxLen = max(len(i) for i in l)\n    result = []\n    for i in l:\n        result.append(i[:maxLen])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str == l:\n        return l\n    else:\n        try:\n            result = str[l[0]:l[1]]\n        except:\n            result = str[l[0]:len(str)]\n        return result\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str == None or l == None:\n        return None\n    result = ''\n    \n    for i in l:\n        result += i\n    \n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace('\\n','').replace('\\t','').replace(' ','').replace('\\xa0','').replace('\\t','').replace('\\n','').replace('\\r','')\ndef remove_non_alphabet(text1):\n    '''\n    Write a function to remove all non alphabet characters from the given string.\n    '''\n    return text1.replace('-','').replace('.','').replace('_','').replace(' ','').replace('|','').replace('!','').replace('(','').replace(')','').replace('{','').replace('}','').replace('[','').replace(']','').replace('#','')\ndef remove_num(text1):\n    '''\n    Write a function to remove all non numeric characters from the given string.\n    '''\n    return re.sub('[^0-9]', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    regex = re.compile(\"(?P<space>\\s+)\")\n    return regex.sub(\" \", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    text1 = re.sub(r'^\\s+', '', text1)\n    text1 = re.sub(r'\\s+$', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\ndef remove_trailing_spaces(text1):\n    '''\n    Write a function that removes all trailing spaces from the given string.\n    '''\n    return text1.rstrip()\ndef replace_with_blank(text1, new_text):\n    '''\n    Write a function that replaces all the occurrences of the new text\n    with the empty string.\n    '''\n    return text1.replace(new_text, \"\")\ndef remove_number(text1):\n    '''\n    Write a function that removes all the number in the given string.\n    '''\n    return text1.replace(\" \", \"\")\ndef remove_urls(text1):\n    '''\n    Write a function that removes all the urls in the given string.\n    '''\n    return re.sub(r\"\\w+:\\/{2}[^\\s]*\", \"\", text1)\ndef remove_punctuation(text1):\n    '''\n    Write a function that removes all the punctuation in the given string.\n    '''\n    return re.sub(\"[^a-zA-Z]\", \" \", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace('\\n', '')\n    text1 = text1.replace('\\t', '')\n    text1 = text1.replace('\\r', '')\n    text1 = text1.replace(' ', '')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    list1 = text1.split()\n    return''.join(list1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('[\\r\\n\\t\\r\\t\\u00A0]','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace('\\n', '')\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = str(text1).replace('\\n','')\n    text1 = text1.replace('\\t','')\n    text1 = text1.replace('  ','')\n    text1 = text1.replace(' ','')\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount==0:\n        return actual_cost\n    else:\n        return sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n        \ndef price_to_sale(price):\n    '''\n    Write a function that converts prices to sale.\n    '''\n    if price < 1000:\n        return price * 0.95\n    else:\n        return price * 0.99\n        \ndef sale_to_price(sale):\n    '''\n    Write a function that converts sale to price.\n    '''\n    if sale > 100000:\n        return sale / 0.95\n    else:\n        return sale * 0.99\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount==actual_cost:\n        return 0.0\n    else:\n        return sale_amount-actual_cost\ndef calculate_monthly_salary(gross_cost,penalty_amount):\n    '''\n    Write a function that calculates monthly salary.\n    '''\n    \n    monthly_cost = (gross_cost*12)+penalty_amount\n    return monthly_cost\ndef print_monthly_salary(monthly_cost):\n    '''\n    Write a function that prints monthly salary.\n    '''\n    print(f\"Your monthly salary is {monthly_cost}\")\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n    \ndef total_cost_amount(sale_amount,actual_cost):\n    '''\n    Write a function that gives total cost of the sale and actual cost if sale amount and actual cost are both greater than 0 then return total cost.\n    '''\n    if sale_amount and actual_cost and sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n        \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount: \n        return 0\n    else: \n        return sale_amount - actual_cost \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return n/math.factorial(n)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n <= 0): \n        return 0 \n    else: \n        factors = [] \n        for i in range(1, int(math.sqrt(n) + 1)): \n            if (n % i == 0): \n                factors.append(i) \n                factors.append(n // i) \n                if (i!= math.sqrt(n)): \n                    factors.append(n / i) \n    print (sum(factors)) \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1,int(math.sqrt(n)+1)) :\n        if n % i == 0:\n            s += i\n            if i * i == n :\n                return s\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 0\n    else:\n        return n * sumofFactors(n - 2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0 : \n        return False \n    elif n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        for i in range(1,int(math.sqrt(n))+1) : \n            if n%i == 0 : \n                return i \n    return False \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # set variables\n    sum = 0\n    while n % 2 == 0: \n        sum += 1\n        n = int(n / 2)\n    if n > 1: \n        sum += 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #Calculate the sum of even factors \n    #of a number n.\n    f = math.factorial(n)\n    \n    #If a number is even return 1.\n    if (f == 0):\n        return 1\n    \n    #If a number is odd return the number itself.\n    if (f%2 == 0):\n        return f\n    \n    #Using the math.factorial function calculate \n    #the sum of all factors of a number.\n    else:\n        return f*sumofFactors(f//2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    def factors(n) : \n        factors = []\n        i = 1\n        while i < n : \n            if n % i == 0 : \n                factors.append(i)\n            i += 1\n        return factors \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n<2:\n        return n\n    sum = 0\n    i = 2\n    while (i<math.sqrt(n)):\n        if n%i == 0:\n            sum += i\n            if (n%i) == 0:\n                sum += n//i\n        i += 1\n    return sum\ndef isPerfectSquare(n) :\n    '''\n    Write a python function to check if a number is perfect square or not.\n    '''\n    if n<=1 :\n        return True\n    sqroot = math.sqrt(n)\n    return (n-sqroot)%2 == 0\ndef square(n) :\n    '''\n    Write a python function to square a number.\n    '''\n    return n*n\ndef perfectSquare(n) :\n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    return (square(n)+n)%2==0\ndef isPower(n) :\n    '''\n    Write a python function to check if a number is a power of a given number.\n    '''\n    return (n**2)%1==0\ndef isPalindrome(n):\n    '''\n    Write a python function to check if a number is a palindrome or not.\n    '''\n    return str(n)[::-1]==str(n)\ndef countDigits(n):\n    '''\n    Write a python function to count the digits of a number.\n    '''\n    count = 0\n    while n>0:\n        n = n//10\n        count+=1\n    return count\ndef countSubsets(n):\n    '''\n    Write a python function to count the number of subsets of a given number.\n    '''\n    if n<=1:\n        return n\n    if n==2 or n==3:\n        return 3\n    else:\n        return countSubsets(n-1) + countSubsets(n-2)\ndef permutation(n):\n    '''\n    Write a python function to find the permutation of a given number.\n    '''\n    if n==1:\n        return []\n    if n==2:\n        return [[1,2]]\n    a = list(permutation(n-1))\n    a[-1].append(a[-1][-1])\n    return a\ndef checkPermutation(n,permutation):\n    '''\n    Write a python function to check if a given permutation of a given number is a palindrome or not.\n    '''\n    for i in permutation:\n        if sum(i)!= n:\n            return False\n    return True\ndef fib(n):\n    '''\n    Write a python function to find the fibonacci number, n.\n    '''\n    if n<2 :\n        return n\n    return fib(n-1)+fib(n-2)\ndef fact(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n<2 :\n        return n\n    return n*fact(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to find the fibonacci sequence, n.\n    '''\n    if n<2:\n        return n\n    return fibonacci(n-1)+fibonacci(n-2)\ndef isArmstrong(n):\n    '''\n    Write a python function to check if a number is an armstrong number or not.\n    '''\n    sum = 0\n    temp = n\n    while temp:\n        sum = sum + temp%10\n        temp = temp//10\n    if n==sum:\n        return True\n    else:\n        return False\ndef isFib(n):\n    '''\n    Write a python function to check if a number is a fibonacci number or not.\n    '''\n    return (n-1)%2==0\ndef isPalindrome(n):\n    '''\n    Write a python function to check if a number is a palindrome or not.\n    '''\n    n=str(n)\n    n1=n[::-1]\n    if n==n1:\n        return True\n    else:\n        return False\ndef isFibonacci(n):\n    '''\n    Write a python function to check if a number is a fibonacci number or not.\n    '''\n    n=int(n)\n    if n<2 or n>100:\n        return False\n    temp=0\n    temp=1\n    for i in range(2,n+1):\n        temp=temp*i\n        if temp==n:\n            return True\n    return False\ndef isFibonacci2(n):\n    '''\n    Write a python function to check if a number is a fibonacci number or not.\n    '''\n    if n==0 or n==1:\n        return True\n    if n==2:\n        return False\n    temp=n-1\n    temp1=1\n    for i in range(2,temp+1):\n        temp1=temp1*i\n        if temp1==n:\n            return True\n    return False\ndef isFibonacci3(n):\n    '''\n    Write a python function to check if a number is a fibonacci number or not.\n    '''\n    temp=n\n    if n<3:\n        return False\n    if n==3:\n        return True\n    temp=n%2\n    if temp==0:\n        return True\n    temp=n%3\n    if temp==0:\n        return True\n    if temp==1:\n        return False\n    temp=n%2\n    if temp==1:\n        return True\n    temp=n%3\n    if temp==1:\n        return True\n    temp=n%4\n    if temp==1:\n        return True\n    temp=n%3\n    if temp==1:\n        return True\n    return False\ndef isFibonacci4(n):\n    '''\n    Write a python function to check if a number is a fibonacci number or not.\n    '''\n    if n==0 or n==1:\n        return True\n    if n==2:\n        return False\n    temp=n\n    if n<2:\n        return False\n    while n!=2:\n        temp=temp*10\n        if temp==n:\n            return True\n        n=n//10\n        if n==0:\n            return False\n    return False\ndef primeFactorization(n):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    if n<2:\n        return []\n    temp=n\n    i=2\n    while temp%i==0:\n        temp/=i\n        i+=1\n    factor=[]\n    while temp!=1:\n        if temp%i==0:\n            factor.append(i)\n            temp/=i\n        else:\n            temp+=i\n    return factor\ndef primeFactors(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n<2:\n        return []\n    temp=n\n    i=2\n    while temp%i==0:\n        temp/=i\n        i+=1\n    factor=[]\n    while temp!=1:\n        if temp%i==0:\n            factor.append(i)\n            temp/=i\n        else:\n            temp+=i\n    return factor\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    if n<=1:\n        return False\n    temp = math.sqrt(n)\n    return (n-temp)%2==0\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    if n<=1:\n        return True\n    temp = math.sqrt(n)\n    return (n-temp)%2==0\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    if n<=1:\n        return True\n    temp = math.sqrt(n)\n    return (n-temp)%2==0\ndef isPerfectSquare"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0 \n    for i in range(1, n+1) : \n        if (n%i == 0) : \n            s+= i \n    return s \n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z$', text) is not None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = '^(?:[a-z]|[A-Z]|[0-9])(?:[a-zA-Z0-9]|[0-9]|[._]|-)*$'\n    match = re.search(pattern, text)\n    print(match.group())\n    return match.group()\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = text.split(' ')\n    matching_words = [word for word in words if re.search(r'z', word)]\n    return''.join(matching_words)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = ''\n    for x in text:\n        if x!= 'z':\n            word += x\n        else:\n            break\n    return word\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    if 'z' in text.lower():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Create regex object\n    pattern = re.compile(r'[z]+')\n    match = pattern.findall(text)\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = r'(?:[a-z]*z)'\n    text = re.sub(match, '', text)\n    print(text)\n    print(match)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    pattern = r'z'\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = 'z'\n    match = False\n    for i in text.split():\n        if i.upper() == word:\n            match = True\n            break\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if text == \"z\":\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb=0\n    if monthnum2>=0 and monthnum2<=12:\n        monthnumb=monthnum2\n    else:\n        print(\"Enter a valid number between 1 and 12\")\n        return\n    if monthnum2==12:\n        monthnumb=31\n    elif monthnum2==1:\n        monthnumb=28\n    elif monthnum2==2:\n        monthnumb=31\n    elif monthnum2==3:\n        monthnumb=30\n    elif monthnum2==4:\n        monthnumb=31\n    elif monthnum2==5:\n        monthnumb=30\n    elif monthnum2==6:\n        monthnumb=31\n    elif monthnum2==7:\n        monthnumb=31\n    elif monthnum2==8:\n        monthnumb=30\n    elif monthnum2==9:\n        monthnumb=31\n    elif monthnum2==10:\n        monthnumb=31\n    elif monthnum2==11:\n        monthnumb=30\n    elif monthnum2==12:\n        monthnumb=31\n    print(\"The month number is\",monthnumb)\n    \n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    check_monthnumb = ['jan', 'feb','mar', 'apr','may', 'jun', 'jul', 'aug','sep', 'oct', 'nov', 'dec']\n    if monthnum2 in check_monthnumb:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        if day(monthnum2) == 31:\n            return True\n        else:\n            return False\n    elif monthnum2 == 3:\n        if day(monthnum2) == 30:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4:\n        if day(monthnum2) == 29:\n            return True\n        else:\n            return False\n    elif monthnum2 == 5:\n        if day(monthnum2) == 28:\n            return True\n        else:\n            return False\n    elif monthnum2 == 6:\n        if day(monthnum2) == 27:\n            return True\n        else:\n            return False\n    elif monthnum2 == 7:\n        if day(monthnum2) == 26:\n            return True\n        else:\n            return False\n    elif monthnum2 == 8:\n        if day(monthnum2) == 25:\n            return True\n        else:\n            return False\n    elif monthnum2 == 9:\n        if day(monthnum2) == 24:\n            return True\n        else:\n            return False\n    elif monthnum2 == 10:\n        if day(monthnum2) == 23:\n            return True\n        else:\n            return False\n    elif monthnum2 == 11:\n        if day(monthnum2) == 22:\n            return True\n        else:\n            return False\n    elif monthnum2 == 12:\n        if day(monthnum2) == 21:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1, 13):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2<=12):\n        if (monthnum2==1):\n            return True\n        elif (monthnum2==2):\n            return True\n        elif (monthnum2==3):\n            return True\n        elif (monthnum2==4):\n            return True\n        elif (monthnum2==5):\n            return True\n        elif (monthnum2==6):\n            return True\n        elif (monthnum2==7):\n            return True\n        elif (monthnum2==8):\n            return True\n        elif (monthnum2==9):\n            return True\n        elif (monthnum2==10):\n            return True\n        elif (monthnum2==11):\n            return True\n        elif (monthnum2==12):\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 0 <= monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return (monthnum2 > 31)\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        int(monthnum2)\n    except:\n        return False\n    if monthnum2 == \"February\" and int(monthnum2) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        return False\n    elif monthnum2 == 12:\n        return True\n    else:\n        return any(monthnum2 == i for i in range(1,monthnum2+1))\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 31:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # your code goes here\n    s=''\n    for i in stringlist:\n        s+=i\n    i=0\n    while(i<len(stringlist)):\n        stringlist[i]=stringlist[len(stringlist)-1-i]\n        i+=1\n    stringlist[i]=stringlist[-1]\n    stringlist.pop()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for element in stringlist:\n        new_element = element[::-1]\n        print(new_element)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist == []:\n        return stringlist\n    if len(stringlist) == 1:\n        return stringlist[::-1]\n    return reverse_string_list(stringlist[1:]) + [stringlist[0]] + reverse_string_list(stringlist[1:])\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        for j in range(len(stringlist)):\n            stringlist[i], stringlist[j] = stringlist[j], stringlist[i]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list=[]\n    for x in range(len(stringlist)):\n        new_list.append(stringlist[x][::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        for j in range(len(stringlist)-i-1):\n            stringlist[j] = stringlist[j+1]\n        stringlist[j] = stringlist[len(stringlist)-i-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #Start with an empty list\n    reversedlist = []\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    temp = \"\"\n    for i in stringlist:\n        temp += i\n    return temp\n    \n    \n    "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for i in range(len(stringlist)):\n        result.append(stringlist[i][::-1])\n    return result\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i].lstrip()\n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = []\n    for i in lst:\n        if(len(i) > len(l)):\n            l = i\n    return l\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    temp=lst[0]\n    for i in range(len(lst)):\n        if lst[i]!=temp:\n            return False\n    return True\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < minimum:\n            minimum = len(lst[i])\n    return minimum\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    c = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                c = j\n                break\n    return lst[c]\n    \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0] \n    min_idx = 0\n    for i in range(1, len(lst)): \n        if lst[i] < min: \n            min = lst[i] \n            min_idx = i \n    return min_idx \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0]\n    for i in range(len(lst)): \n        if lst[i] < min_len: \n            min_len = lst[i] \n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    ans=0\n    min=lst[0]\n    for i in range(1,len(lst)):\n        if min>lst[i]:\n            ans=ans\n            min=lst[i]\n        elif min==lst[i]:\n            ans=ans+1\n    return ans\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = lst[:]\n    l.sort()\n    a,b = 0,0\n    for i in range(len(l)):\n        if l[i] < l[a]:\n            a = i\n    for j in range(len(l)):\n        if l[j] >= l[b]:\n            b = j\n    return l[a],l[b]\n    \ndef Print_Min(lst):\n    '''\n    Write a python function to print the sublist having minimum length.\n    '''\n    l = lst[:]\n    print(*l, sep ='')\n    \nif __name__ == '__main__':\n    lst = []\n    lst_input = input().split()\n    lst_len = len(lst_input)\n    for i in lst_input:\n        lst.append(int(i))\n    lst_list = sorted(lst, reverse = True)\n    print(*lst_list, sep ='')\n    Print_Min(lst_list)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst==[]:\n        return []\n    min = lst[0]\n    for item in lst[1:]:\n        if item < min:\n            min = item\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i = 0\n    j = len(lst) - 1\n    while i < j:\n        if lst[i] < lst[j]:\n            temp = lst[i]\n            lst[i] = lst[j]\n            lst[j] = temp\n        i += 1\n        j -= 1\n    return lst\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(f'The area of the rectangle is {l * b}')\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            result += str1[i]\n    return result\ndef remove_letters(str1):\n    '''\n    Write a function to remove all uppercase characters from a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        result += chr(ord(str1[i])-32)\n    return result\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        result += chr(ord(str1[i])-64)\n    return result\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation characters from a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalnum():\n            result += str1[i]\n    return result\ndef remove_space(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isspace():\n            result += str1[i]\n    return result\ndef remove_all(str1):\n    '''\n    Write a function to remove all characters from a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        result += chr(ord(str1[i])-97)\n    return result\ndef remove_all_with_brackets(str1):\n    '''\n    Write a function to remove all characters from a given string with brackets.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].isupper():\n                result += str1[i]\n            if not str1[i].islower():\n                result += str1[i]\n    return result\ndef remove_all_with_custom_char(str1):\n    '''\n    Write a function to remove all characters from a given string with custom characters.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].islower():\n                result += str1[i]\n            if not str1[i].isupper():\n                result += str1[i]\n    return result\ndef remove_multiple_letters(str1):\n    '''\n    Write a function to remove all characters from a given string with multiple letters.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].islower():\n                result += str1[i]\n            if not str1[i].isupper():\n                result += str1[i]\n    return result\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all characters from a given string with special characters.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].isupper():\n                result += str1[i]\n            if not str1[i].islower():\n                result += str1[i]\n    return result\ndef remove_all_words(str1):\n    '''\n    Write a function to remove all words from a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].islower():\n                result += str1[i]\n            if not str1[i].isupper():\n                result += str1[i]\n    return result\ndef remove_punctuation_with_space(str1):\n    '''\n    Write a function to remove all characters from a given string with punctuation and space.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalnum():\n            result += str1[i]\n        else:\n            if not str1[i].isspace():\n                result += str1[i]\n    return result\ndef remove_all_with_double_quotes(str1):\n    '''\n    Write a function to remove all characters from a given string with double quotes.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].isspace():\n                result += str1[i]\n    return result\ndef remove_all_with_single_quotes(str1):\n    '''\n    Write a function to remove all characters from a given string with single quotes.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].isspace():\n                result += str1[i]\n    return result\ndef remove_all_with_double_double_quotes(str1):\n    '''\n    Write a function to remove all characters from a given string with double and double quotes.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].isspace():\n                result += str1[i]\n    return result\ndef remove_all_with_single_double_quotes(str1):\n    '''\n    Write a function to remove all characters from a given string with single quotes and double quotes.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].isspace():\n                result += str1[i]\n    return result\ndef remove_all_with_double_single_quotes(str1):\n    '''\n    Write a function to remove all characters from a given string with double quotes and single quotes.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].isspace():\n                result += str1[i]\n    return result\ndef remove_all_with_triple_double_quotes(str1):\n    '''\n    Write a function to remove all characters from a given string with triple quotes and double quotes.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].isspace():\n                result += str1[i]\n    return result\ndef remove_all_with_single_triple_quotes(str1):\n    '''\n    Write a function to remove all characters from a given string with single quotes and triple quotes.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].isalpha():\n            result += str1[i]\n        else:\n            if not str1[i].isspace():\n                result += str1[i]\n    return result\ndef remove_all_with_triple_single_quotes(str1):\n    '''\n    Write a function to remove all characters from a given string with triple quotes and single quotes.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if not str1[i].i"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # complete this function\n    # Replace all uppercase characters in str1 with their uppercase representation\n    # Remove the uppercase characters from the beginning and end of the string\n    str1 = str1.upper()\n    str1 = str1[2:len(str1)-2]\n    str1 = str1[::-1]\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    str2 = str2.replace(' ','')\n    str2 = str2.replace('-', '')\n    str2 = str2.replace('.', '')\n    str2 = str2.replace('!', '')\n    str2 = str2.replace(':', '')\n    str2 = str2.replace('?', '')\n    str2 = str2.replace(',', '')\n    str2 = str2.replace(';', '')\n    str2 = str2.replace('!', '')\n    str2 = str2.replace('.', '')\n    str2 = str2.replace('?', '')\n    str2 = str2.replace(':', '')\n    str2 = str2.replace(';', '')\n    str2 = str2.replace('!', '')\n    str2 = str2.replace('.', '')\n    str2 = str2.replace('?', '')\n    str2 = str2.replace(',', '')\n    str2 = str2.replace(';', '')\n    str2 = str2.replace('!', '')\n    str2 = str2.replace('.', '')\n    str2 = str2.replace('?', '')\n    str2 = str2.replace(':', '')\n    str2 = str2.replace(';', '')\n    str2 = str2.replace('!', '')\n    str2 = str2.replace('.', '')\n    str2 = str2.replace('?', '')\n    return str2\n    \n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use a regular expression to extract the unicode characters\n    # and then remove them from the string\n    chars = re.compile(r\"[^A-Za-z0-9 \\n]\")\n    return chars.sub(\"\", str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern1 = r'[A-Z]'\n    substr1 = re.sub(pattern1, '', str1)\n    pattern2 = r'[A-Z]\\1+'\n    substr2 = re.sub(pattern2, '', substr1)\n    pattern3 = r'[A-Z]\\1+'\n    substr3 = re.sub(pattern3, '', str1)\n    return substr1, substr2, substr3\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def remove_upper(str1, l):\n        '''\n        Function to do removing uppercase substrings from a given string.\n        '''\n        for i in l:\n            if str1[i].isupper():\n                str1 = str1.replace(str1[i],'')\n            if str1[i].islower():\n                str1 = str1.replace(str1[i],'')\n        return str1\n    return remove_upper(str1, list(range(len(str1))))\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char.isupper():\n            string += char.lower()\n    return string\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation in a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_diacritics(str1):\n    '''\n    Write a function to remove diacritics in a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char in string:\n            string += char\n    return string\ndef remove_stop_words(str1):\n    '''\n    Write a function to remove stop words from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char in string:\n            string += char\n    return string\ndef remove_words(str1):\n    '''\n    Write a function to remove words from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_parentheses(str1):\n    '''\n    Write a function to remove parentheses from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char in string:\n            string += char\n    return string\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_dashes(str1):\n    '''\n    Write a function to remove dashes from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_tokens(str1):\n    '''\n    Write a function to remove tokens from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_char(str1, char):\n    '''\n    Write a function to remove characters from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char!= char:\n            string += char\n    return string\ndef remove_all_char(str1):\n    '''\n    Write a function to remove all characters from a given string.\n    '''\n    string = ''\n    for char in str1:\n        string += char\n    return string\ndef remove_all_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char.isdigit():\n            string += char\n    return string\ndef remove_letters(str1):\n    '''\n    Write a function to remove all letters from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char.isalpha():\n            string += char\n    return string\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char.isdigit():\n            string += char\n    return string\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char!='':\n            string += char\n    return string\ndef remove_numbers_spaces(str1):\n    '''\n    Write a function to remove numbers and spaces from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char!='' and char!='':\n            string += char\n    return string\ndef remove_all_spaces(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char!='':\n            string += char\n    return string\ndef remove_all_words(str1):\n    '''\n    Write a function to remove all words from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_all_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_all_diacritics(str1):\n    '''\n    Write a function to remove all diacritics from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char in string:\n            string += char\n    return string\ndef remove_stop_words(str1):\n    '''\n    Write a function to remove all stop words from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char in string:\n            string += char\n    return string\ndef remove_words(str1):\n    '''\n    Write a function to remove all words from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_dashes(str1):\n    '''\n    Write a function to remove dashes from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_tokens(str1):\n    '''\n    Write a function to remove tokens from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_char(str1, char):\n    '''\n    Write a function to remove characters from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char!= char:\n            string += char\n    return string\ndef remove_all_char(str1):\n    '''\n    Write a function to remove all characters from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char not in string:\n            string += char\n    return string\ndef remove_all_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char.isdigit():\n            string += char\n    return string\ndef remove_letters(str1):\n    '''\n    Write a function to remove all letters from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char in string:\n            string += char\n    return string\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char.isdigit():\n            string += char\n    return string\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char!='':\n            string += char\n    return string\ndef remove_numbers_spaces(str1):\n    '''\n    Write a function to remove numbers and spaces from a given string.\n    '''\n    string = ''\n    for char in str1:\n        if char!='':\n            string += char\n    return string\ndef remove_all_spaces(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub('[A-Z]', '', str1)\n    str3 = re.sub('[a-z]', '', str2)\n    return str3\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i.isupper() == True:\n            new_str += i.lower()\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(\"Remove uppercase substrings from the given string:\")\n    print(str1)\n    print()\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print()\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', str1)\n    print(\"String to remove uppercase substrings from:\")\n    print(str1)\n    print(\"----------------------------\")\n    print()\n    print(\"Remove uppercase substrings from string 'hello world! i love you! how are you' and replace the first letter with '!'\")\n    str1 = re.sub(r'(?<![A-Z])[A-Z](?=[a-z])', '!', st"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n    \ndef Sublists(lst,sublist):\n    '''\n    Write a python function to find a sublist in a list of lists.\n    '''\n    sublst = []\n    for i in lst:\n        if i[sublist[0]] == i[sublist[1]]:\n            sublst.append(i)\n    return sublst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if lst == []:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # get the first element of each sublist\n    lst.sort()\n    for i in lst: \n        i.sort()\n        lst.sort()\n        if i[0] == lst[0]: \n            return i[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if not lst:\n        return None\n    for i in range(0,len(lst)):\n        if i == 0:\n            lst[i] = lst[i][0]\n        else:\n            lst[i] = lst[i][0]\n        if lst[i]!= None:\n            return lst[i]\n        else:\n            return None\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def ExtractOne(lst): \n        '''\n        Write a python function to get the first element of each sublist.\n        '''\n        if lst == []:\n            return None\n        elif len(lst) == 1:\n            return lst[0]\n        elif len(lst) > 1:\n            return lst[0]\n    \n    return [ExtractOne(lst[i:i+3]) for i in range(len(lst) - 2)]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) < 1:\n        return None\n    else:\n        return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0][0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 1: \n        return lst[0]\n    else: \n        return Extract(lst[1:])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    print('# of elements in list:',len(lst))\n    l = len(lst)\n    for i in range(0, l):\n        print(lst[i][0])\n    print('\\n')\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Create an empty list \n    my_list = [] \n    # Iterate through each sublist \n    for i in lst: \n        # If list is not empty \n        if len(i) > 0: \n            # Append each value \n            my_list.append(i[0]) \n    # Return the first element \n    return my_list[0] \n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case = 0\n    for char in str:\n        if char.isupper():\n            upper_case+=1\n    return upper_case\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lower_case = str.lower()\n    upper_case = 0\n    for i in lower_case:\n        if i.isupper():\n            upper_case += 1\n    return upper_case\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_chars = 0\n    for letter in str:\n        if letter.isupper():\n            upper_chars += 1\n    return upper_chars\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str_len = len(str)\n    upper_case = 0\n    for i in range(0,str_len):\n        if ord(str[i]) > ord('A') and ord(str[i]) <= ord('Z'):\n            upper_case += 1\n    return upper_case\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    if len(str) == 0:\n        return 0\n    for i in range(len(str)-1):\n        if str[i].isupper() and str[i+1].isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            ctr += 1\n    return ctr"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    if len(list1) == 1:\n        output.append(list1[0])\n    else:\n        output = combinations_list(list1[1:])\n    return output\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    from typing import List\n    \n    return list(combinations(list1,len(list1)))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1==None:\n        return []\n    elif len(list1)==0:\n        return []\n    elif len(list1)==1:\n        return [list1]\n    \n    else:\n        return [list1[0]+list1[i] for i in range(len(list1)) for x in combinations_list(list1[i+1:]) for y in x for z in y]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1,len(list1)+1):\n        for j in itertools.combinations(list1,i):\n            yield j\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [''.join(i) for i in itertools.permutations(list1,len(list1))]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return []\n    \n    elif list1[0] not in list1:\n        return combinations_list(list1[1:])\n    else:\n        return combinations_list([list1[0]] + combinations_list(list1[1:]))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_of_combinations = []\n    for element in list1:\n        list_of_combinations.extend([element, element, element])\n    return list_of_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # this is a combination list with len(list1) number of combinations\n    combinations_list = []\n    # num_list is a list of the number of elements of a given list\n    # len(list1) is the length of the list\n    # len(list1) == len(list1)\n    # we can use len(list1) as a power of len(list1)\n    # len(list1) == len(list1)\n    # len(list1) == len(list1)\n    for i in range(0,len(list1)):\n        combo = list1[0:i] + list1[i+1:]\n        # now we add all the combinations of the given list to the combo list\n        # and then append it to the list of combinations\n        combos.append(combo)\n        # and append the string of the list to the list of all combinations\n    return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combinations(l, n):\n        if n == 0:\n            yield list1\n        for i in range(l):\n            for k in combinations(l, n-1):\n                yield list1 + [l[i]] + k\n    return list(combinations(list1, len(list1)))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return([item for item in combinations(list1,2)])\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None or len(arr) == 0:\n        return 0\n    result = 0\n    max_product = 1\n    for i in range(len(arr)):\n        current_product = arr[i]\n        if max_product < current_product:\n            max_product = current_product\n        for j in range(i,len(arr)):\n            current_product = arr[j]\n            if current_product > max_product:\n                max_product = current_product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return arr\n    else:\n        dp = [[0 for _ in range(len(arr[0]))] for _ in range(len(arr))]\n        for i in range(len(arr)):\n            for j in range(len(arr[0])):\n                dp[i][j] = arr[i][j]\n        for k in range(1,len(arr)):\n            for i in range(len(arr)):\n                for j in range(len(arr[0])):\n                    if i+1 < len(arr):\n                        dp[i][j] = dp[i+1][j]\n                    else:\n                        dp[i][j] = dp[i][j-1]\n        max_product = max(dp[0])\n        for i in range(1,len(dp)):\n            if max_product < dp[i][0]:\n                max_product = dp[i][0]\n        return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_product_index = 0\n    current_product = arr[0]\n    current_product_index = 0\n    max_prod = -1\n    \n    for index in range(1, len(arr)):\n        max_prod = max(arr[index]*current_product, arr[index]*current_product_index)\n        max_prod_index = index\n        current_product = max_prod\n        current_product_index = index\n        if max_prod > max_product:\n            max_product = max_prod\n            max_product_index = current_product_index\n            \n    return max_product_index\n        "
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarray = []\n    max_product = arr[0]\n    min_product = arr[0]\n    product_array = 1\n    \n    for i in range(1,len(arr)):\n        subarray.append(arr[i])\n        \n        if subarray[-1] >= max_product:\n            max_product = subarray[-1]\n        \n        if arr[i] >= min_product:\n            min_product = arr[i]\n    \n        product_array *= (arr[i] - min_product)\n        product_array += 1\n        \n        subarray.pop(0)\n        \n    return max_product, product_array\n    \n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # code:\n    max_product = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # end_index = len(arr)\n    # max_value = float('-inf')\n    \n    # for end in range(1, len(arr)):\n    #     max_value = max(max_value, arr[end])\n    #     for i in range(end, len(arr)):\n    #         if arr[i] == max_value:\n    #             if arr[i] == max_value:\n    #                 if end - i + 1 < max_value:\n    #                     max_value = end - i + 1\n    #                     end_index = i\n    # return max_value, end_index\n    \n    # # max_value = max(arr)\n    # # for i in range(1, len(arr)):\n    # #     if arr[i] == max_value:\n    # #         if arr[i] == max_value:\n    # #             if i-1 < len(arr) and arr[i-1] == max_value:\n    # #                 max_value = arr[i]\n    # #                 i -= 1\n    \n    # # return max_value, i\n    \n    # # or\n    \n    # max_product = float('-inf')\n    # end_index = -1\n    # max_value = arr[0]\n    # for i in range(1, len(arr)):\n    #     if arr[i] == max_value:\n    #         if arr[i] == max_value:\n    #             if i-1 < len(arr) and arr[i-1] == max_value:\n    #                 max_value = arr[i]\n    #                 i -= 1\n    #         elif i-1 < len(arr) and arr[i-1]!= arr[i]:\n    #             max_value = arr[i]\n    #             i -= 1\n    \n    #     if max_value == arr[i]:\n    #         max_product = max(max_product, arr[i])\n    #         if i-1 < len(arr) and arr[i-1] == arr[i]:\n    #             max_value = arr[i]\n    #             i -= 1\n    \n    #     if max_value == arr[i]:\n    #         max_product = max(max_product, arr[i])\n    #         if i-1 < len(arr) and arr[i-1]!= arr[i]:\n    #             max_value = arr[i]\n    #             i -= 1\n    \n    # return max_value, end_index\n    \n    \n    # for end in range(1, len(arr)):\n    #     max_value = max(arr[end], arr[end-1])\n    #     for i in range(end, len(arr)):\n    #         if arr[i] == max_value:\n    #             if arr[i] == max_value:\n    #                 if end - i + 1 < max_value:\n    #                     max_value = arr[i]\n    #                     end_index = i\n    # return max_value, end_index\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    prod = 1\n    max_sub_prod = float('-inf')\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray_index = -1\n    max_product = -1\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        start = max(start, 0)\n        end = max(end, arr[i])\n        product = arr[i] * end\n        if product > max_product:\n            max_product = product\n            max_subarray_index = i\n    return max_subarray_index\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray_product = arr[0]\n    max_subarray_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[max_subarray_index]:\n            max_subarray_product = arr[i]\n            max_subarray_index = i\n    return max_subarray_product, max_subarray_index\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if dict[key]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if not value == n:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if dict[i]!= dict[i + 1] and dict[i]!= dict[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # TODO:  pass variable as dictionary\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = {}\n    for key, value in dict.items():\n        if len(key)!= n:\n            return False\n        for index, value_here in enumerate(value):\n            if key!= value_here:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k in dict:\n        if k!= 'key' and n not in dict[k].keys():\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    print(dict)\n    \n    for i in range(0, len(dict)):\n        if not dict[i]:\n            print('here')\n        if i < n:\n            print('here2')\n    \n    \n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    else:\n        return all([dict.get(i) == dict.get(n) for i in dict])\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for item in dict:\n        if type(dict[item]) == dict and len(dict[item]) > n:\n            if type(dict[item][0]) == dict and len(dict[item][0]) > n:\n                return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if(not dict1):\n        return \n    for key in dict1:\n        if(dict1[key] == ''):\n            del dict1[key]\n    print(dict1)\n    \ndef write_to_file(filename,dict1):\n    '''\n    Write a function to write a dictionary to a file.\n    '''\n    if(not dict1):\n        return \n    with open(filename,'w') as outfile:\n        outfile.write(json.dumps(dict1, indent = 2))\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1.popitem()\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == \"\":\n            dict1[i] = \"\"\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            dict1.pop(key)\n            #print(f\"{key} is now empty.\")\n        else:\n            #print(f\"{key} is not empty.\")\n            pass\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v==[] or v==None:\n            del dict1[k]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if type(dict1[item]) == dict:\n            drop_empty(dict1[item])\n        else:\n            pass\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for i in dict1:\n        if dict1[i] == None:\n            dict1.pop(i)\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v == 0:\n            dict1.pop(k)\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m = [[0 for _ in range(len(arr[i]))] for i in range(len(arr))]\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] < arr[i][j+1]:\n                m[i][j] = arr[i][j]\n            else:\n                m[i][j] = arr[i][j+1]\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            m[i][j] = m[j][i]\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            m[i][j] = m[i][j]*arr[i][j]\n    return max(m[len(arr)-1][len(arr[0])-1],m[0][len(arr[0])-1])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # if array length is zero\n    if len(arr) == 0:\n        return 0\n    \n    # if the array is empty\n    if len(arr) == 1:\n        return arr[0]\n    \n    # if we have an odd length array\n    if len(arr) % 2 == 1:\n        return max(arr[0] * max_product(arr[1:len(arr)]), arr[len(arr) // 2])\n    \n    # if we have an even length array\n    if len(arr) % 2 == 0:\n        return max(arr[0] * max_product(arr[1:len(arr)]), max_product(arr[len(arr) // 2 + 1:]))\n    \n    return arr[0] * max_product(arr[1:len(arr)]) * max_product(arr[len(arr) // 2 + 1:])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = product * arr[i]\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Write your code here\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n    \nprint(max_product([3, 1, 4, 1]))"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # first define a function that takes in a list\n    def factorial(n):\n        if n < 0:\n            return 0\n        elif n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    # create a list of numbers\n    nums = []\n    for i in range(0, len(arr)):\n        nums.append(arr[i])\n    # find a product of the numbers in the list\n    prod = 1\n    for i in range(1, len(nums)):\n        prod = prod * nums[i]\n    return prod\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def find_subsequence(arr, n, k):\n        # if there are only n numbers, return the maximum number of product to multiply\n        if k == n:\n            return arr[k]\n        # if there are multiple numbers, take the max of their products and return the product\n        elif k == n-1:\n            return max(arr[k], arr[k+1])\n        # if the number is 0, we cannot multiply the product\n        elif arr[k] == 0:\n            return 0\n        # check the products of the subsequence\n        else:\n            # calculate the product of the subsequence using the product of all the products of the subsequence, that is, the product of the subsequence with all the products of the subsequence, that is, the product of the subsequence with the all the products of the subsequence\n            product = 1\n            for i in range(k, n):\n                product *= arr[i]\n            return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] >= arr[1]:\n        return arr[0]\n    if arr[1] >= arr[0]:\n        return arr[1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]:\n            arr[i] *= arr[i - 1]\n            arr[i + 1] *= arr[i + 1]\n            return max(arr[:i + 1])\n    return arr[-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    lst = []\n    for i in range(len(arr)):\n        lst.append(arr[i])\n    product = lst[0]\n    for i in range(1,len(lst)):\n        product *= lst[i]\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            max_product = arr[i]\n    return max_product\n    \ndef check_prod_in_list(num):\n    '''\n    Use a two pointer approach to check if a number is a product in the list\n    '''\n    if num == 0:\n        return False\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        if arr[start] * arr[end] == num:\n            return True\n        elif arr[start] * arr[end] < num:\n            start += 1\n        elif arr[start] * arr[end] > num:\n            end -= 1\n        else:\n            return False\n    return False\n    \n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = []\n    b = []\n    if test_tup[0] == test_tup[-1]:\n        return test_tup\n    else:\n        for i in range(len(test_tup)):\n            a.append(test_tup[i])\n            b.append(test_tup[i+1])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    for i in range(len(test_tup)-1):\n        for j in range(len(test_tup)-1):\n            sum += test_tup[j] * test_tup[i]\n    return sum\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(\"Addition of a tuple:\", end=\"\")\n    add = 0\n    for i in range(len(test_tup) - 1):\n        add += test_tup[i]\n    print(add)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n_input = len(test_tup)\n    n_output = n_input - 1\n    total = 0\n    for i in range(0, n_input - 1):\n        for j in range(i + 1, n_input):\n            total += test_tup[i] * test_tup[j]\n    total = total % (10 ** 9 + 7)\n    return total\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # TODO: Write your code here\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if type(test_tup[0])!= tuple:\n        return (False, \"Invalid list type\")\n    n, m = len(test_tup), len(test_tup[1])\n    if n!= m:\n        return (False, \"Invalid list lengths\")\n    for x in range(n-1):\n        for y in range(n-1-x):\n            if test_tup[x][y]!= test_tup[x+1][y+1]:\n                return (False, \"Invalid list elements\")\n    for x in range(n):\n        if test_tup[x][x]!= test_tup[x][m-1]:\n            return (False, \"Invalid list elements\")\n    for x in range(n-1):\n        for y in range(n-1-x):\n            if test_tup[x][y]!= test_tup[x+1][y+1]:\n                return (False, \"Invalid list elements\")\n    return (True, test_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #INPUT: TUPLE: list\n    #OUTPUT: list: [ ( (a,b), c), ( (a,b), d), ( (a,b), c), ( (a,b), d), ( (a,b), c),...]\n    \n    #your code here\n    \n    add_list = []\n    temp_tup = []\n    for i in range(0,len(test_tup),1):\n        for j in range(i+1,len(test_tup),1):\n            temp_tup.append((test_tup[i],test_tup[j]))\n            \n    for i in temp_tup:\n        add_list.append(i)\n    \n    return add_list\n    \n    \ndef add_pairwise2(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #INPUT: TUPLE: list\n    #OUTPUT: list: [ ( (a,b), c), ( (a,b), d), ( (a,b), c), ( (a,b), d), ( (a,b), c),...]\n    \n    #your code here\n    \n    add_list = []\n    temp_tup = []\n    for i in range(0,len(test_tup),1):\n        for j in range(i+1,len(test_tup),1):\n            temp_tup.append((test_tup[i],test_tup[j]))\n    \n    for i in temp_tup:\n        add_list.append(i)\n    \n    return add_list\n    \n    \ndef add_pairwise3(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #INPUT: TUPLE: list\n    #OUTPUT: list: [ ( (a,b), c), ( (a,b), d), ( (a,b), c), ( (a,b), d), ( (a,b), c),...]\n    \n    #your code here\n    \n    add_list = []\n    temp_tup = []\n    for i in range(0,len(test_tup),1):\n        for j in range(i+1,len(test_tup),1):\n            temp_tup.append((test_tup[i],test_tup[j]))\n    \n    for i in temp_tup:\n        add_list.append(i)\n    \n    return add_list\n    \n    \ndef add_pairwise4(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #INPUT: TUPLE: list\n    #OUTPUT: list: [ ( (a,b), c), ( (a,b), d), ( (a,b), c), ( (a,b), d), ( (a,b), c),...]\n    \n    #your code here\n    \n    add_list = []\n    temp_tup = []\n    for i in range(0,len(test_tup),1):\n        for j in range(i+1,len(test_tup),1):\n            temp_tup.append((test_tup[i],test_tup[j]))\n    \n    for i in temp_tup:\n        add_list.append(i)\n    \n    return add_list\n    \n    \ndef add_pairwise5(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #INPUT: TUPLE: list\n    #OUTPUT: list: [ ( (a,b), c), ( (a,b), d), ( (a,b), c), ( (a,b), d), ( (a,b), c),...]\n    \n    #your code here\n    \n    add_list = []\n    temp_tup = []\n    for i in range(0,len(test_tup),1):\n        for j in range(i+1,len(test_tup),1):\n            temp_tup.append((test_tup[i],test_tup[j]))\n    \n    for i in temp_tup:\n        add_list.append(i)\n    \n    return add_list\n    \n    \ndef add_pairwise6(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #INPUT: TUPLE: list\n    #OUTPUT: list: [ ( (a,b), c), ( (a,b), d), ( (a,b), c), ( (a,b), d), ( (a,b), c),...]\n    \n    #your code here\n    \n    add_list = []\n    temp_tup = []\n    for i in range(0,len(test_tup),1):\n        for j in range(i+1,len(test_tup),1):\n            temp_tup.append((test_tup[i],test_tup[j]))\n    \n    for i in temp_tup:\n        add_list.append(i)\n    \n    return add_list\n    \n    \ndef add_pairwise7(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #INPUT: TUPLE: list\n    #OUTPUT: list: [ ( (a,b), c), ( (a,b), d), ( (a,b), c), ( (a,b), d), ( (a,b), c),...]\n    \n    #your code here\n    \n    add_list = []\n    temp_tup = []\n    for i in range(0,len(test_tup),1):\n        for j in range(i+1,len(test_tup),1):\n            temp_tup.append((test_tup[i],test_tup[j]))\n    \n    for i in temp_tup:\n        add_list.append(i)\n    \n    return add_list\n    \n    \ndef add_pairwise8(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #INPUT: TUPLE: list\n    #OUTPUT: list: [ ( (a,b), c), ( (a,b), d), ( (a,b), c), ( (a,b), d), ( (a,b), c),...]\n    \n    #your code here\n    \n    add_list = []\n    temp_tup = []\n    for i in range(0,len(test_tup),1):\n        for j in range(i+1,len(test_tup),1):\n            temp_tup.append((test_tup[i],test_tup[j]))\n    \n    for i in temp_tup:\n        add_list.append(i)\n    \n    return add_list\n    \n    \ndef add_pairwise9(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #INPUT: TUPLE: list\n    #OUTPUT: list: [ ( (a,b), c), ( (a,b), d), ( (a,b), c), ( (a,b), d), ( (a,b), c),...]\n    \n    #your code here\n    \n    add_list = []\n    temp_tup = []\n    for i in range(0,len(test_tup),1):\n        for j in range(i+1,len(test_tup),1):\n            temp_tup.append((test_tup[i],test_tup[j]))\n    \n    for i in temp_tup:\n        add_list.append(i)\n    \n    return add_list\n    \n    \ndef add_pairwise10(test_tup):\n    '''\n    Write a function to find th"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighbor_count = test_tup[1] - test_tup[0]\n    result = test_tup[0] + neighbor_count\n    \n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x1, y1 = test_tup\n    x2, y2 = test_tup[0], test_tup[1]\n    temp_x = x1\n    temp_y = y2\n    x1 = x2\n    y2 = y1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product=1\n    for i in range(n):\n        product*=arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return (n*arr[0])%n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod_num = 1\n    product = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    i = 0\n    while i < n:\n        arr[i] = arr[i]*i\n        i+=1\n    return arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    s = 1\n    for i in range(n):\n        s = s * arr[i]\n    return s\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    \n    result=find_remainder(arr,n//2)\n    if n%2:\n        result*=arr[n//2]\n        return result\n    result*=arr[n//2]\n    return result\n    \ndef multiply_array(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n==0:\n        return arr\n    \n    return multiply_array(arr[1:],n//2)+arr[0]*multiply_array(arr,n//2)\n    \ndef test_multiply_array():\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    test_arr= [1,2,3,4,5]\n    result=multiply_array(test_arr,1)\n    print(result)\n    result=multiply_array(test_arr,2)\n    print(result)\n    result=multiply_array(test_arr,4)\n    print(result)\n    result=multiply_array(test_arr,1)\n    print(result)\n    result=multiply_array(test_arr,0)\n    print(result)\n    result=multiply_array(test_arr,5)\n    print(result)\n    \ntest_multiply_array()\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    assert n > 1\n    arr = list(arr)\n    result = 1\n    for i in range(len(arr)):\n        result *= arr[i]\n    return result % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 0\n    for i in arr:\n        remainder = (remainder * i) % n\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return arr[0] \n    else: \n        # The modulo operator may be used as in the equation of the first n terms \n        # of the multiplication, so for n == 2 there are two terms. \n        # For the n = 1 case, we have (arr[0]*arr[1])/n = 1/2 and we only need \n        # 1 term. \n        if n % 2 == 0: \n            return (arr[0] * find_remainder(arr, n - 1)) % n\n        else: \n            return (arr[0] * find_remainder(arr, n - 1) * arr[1]) % n \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    m = n\n    product = 1\n    for i in arr:\n        product *= i\n        if product > m:\n            break\n    return product % m\n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(set(l))\n    l.sort()\n    if len(l) > 0:\n        if l[0] + 1 == l[-1]:\n            return True\n        elif l[0]!= l[-1]:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l:\n        if i % 2 == 0: \n            print (i, \"is an even number\") \n        else: \n            print (i, \"is an odd number\")\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l: \n        if i>10: \n            print(\"It is a string\")\n            return\n        elif i>5:\n            print(\"It is not a string\")\n            return\n        elif i>0:\n            print(\"It is a string\")\n            return\n    print(\"It is not a string\")\n    return\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return len(set(l)) == len(l)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    s = 0\n    if len(l)>=1:\n        for i in l:\n            if i==l[s]:\n                s = s+1\n                continue\n            else:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    counter = 0\n    for i in l:\n        if i % 5 == 0:\n            counter += 1\n        else:\n            pass\n    if counter == len(l) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return any(i<l[0] and l[1:len(l)]==l[0:len(l)-1] for i in l)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    if l[0]==l[1]:\n        return True\n    else:\n        for i in range(len(l)-1):\n            if l[i]==l[i+1]:\n                count += 1\n            else:\n                if count > 1:\n                    return True\n                count = 0\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return len(set(l)) <= 1\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    i = 0\n    tuple = ()\n    while i < len(test_list1):\n        if test_list1[i] in test_list2 and test_list1[i] not in tuple:\n            tuple = (test_list1[i], test_list2[i])\n            print(tuple)\n            return tuple\n        i = i + 1\n    return tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #first make a tuple of all the elements\n    x = ()\n    for i in test_list1:\n        x += (i,)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tup = tuple()\n    for elem in test_list1:\n        if elem in test_list2:\n            tup.append(elem)\n    return tup\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        if i in test_list2:\n            new_list.append(i)\n    return tuple(new_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Get all elements in first tuple\n    first_tuple = test_list1\n    \n    # Get all elements in second tuple\n    second_tuple = test_list2\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = ()\n    for x in range(len(test_list1)):\n        if (test_list1[x] in test_list2):\n            result = result + test_list1[x]\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # your code here\n    test_list_new = []\n    for i in range(len(test_list1)):\n        if test_list1[i] not in test_list2:\n            test_list_new.append(test_list1[i])\n    return tuple(test_list_new)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1 == None:\n        test_list1 = []\n    if test_list2 == None:\n        test_list2 = []\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if (len(test_list1) > 0 and len(test_list2) > 0):\n        my_tuple = ()\n        for i in range(0, len(test_list1)):\n            for j in range(0, len(test_list2)):\n                if (test_list1[i] == test_list2[j]):\n                    if (i not in my_tuple):\n                        my_tuple = my_tuple + (i, )\n                else:\n                    if (i not in my_tuple):\n                        my_tuple = my_tuple + (i, )\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,'_' + newch)\n    \n    \n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # read in string, split on spaces, and create a new string\n    new_str = str1.split(' ')\n    new_str =''.join(new_str)\n    # create a new string with the characters in the string\n    new_str = new_str.replace(ch,newch)\n    # return the new string\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if not str1:\n        return ''\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \ndef main():\n    str1=input('Enter a string: ')\n    ch=input('Enter a character to be replaced: ')\n    newch=input('Enter a new character to be replaced: ')\n    print(replace_char(str1,ch,newch))\n    \nmain()"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    print('*** replace_char ***')\n    print('Input string: ',str1)\n    print('New character: ',newch)\n    print('Output string: ',str1.replace(ch,newch))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if(ch==' '):\n        return str1\n    for x in range(len(str1)):\n        if(str1[x]==ch):\n            str1=str1.replace(str1[x],newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for c in range(len(str1)):\n        str1 = str1.replace(str1[c],\"\")\n    return str1+newch\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1\n    for i in range(0,len(str1)):\n        if(str1[i] == ch):\n            str2 = str2.replace(str1[i],newch)\n    return str2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Creating new dictionary to store sorted values\n    # and count how many times each key is seen\n    new_dict = {}\n    for (k, v) in dict1.items():\n        new_dict[k] = v\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = dict()\n    for i in dict1:\n        new_dict[i] = dict1[i]\n    new_dict = dict(sorted(new_dict.items(), key=lambda item: item[1], reverse=True))\n    for i in new_dict:\n        dict1[i] = new_dict[i]\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    dict1 = dict1.items()\n    dict1 = sorted(dict1, key=lambda t: t[1], reverse=True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(), key=lambda item:item[1])\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    print(dict1.values())\n    return sorted(dict1.values(),reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys_list = list(dict1.keys())\n    count = 1\n    while count <= len(keys_list):\n        while keys_list[count] in dict1:\n            if count == len(keys_list) - 1:\n                dict1.pop(keys_list[count])\n            else:\n                dict1[keys_list[count]] = count\n            count += 1\n        keys_list.pop(count)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in dict1.keys():\n        if key in dict1.keys():\n            dict1[key].sort()\n            del dict1[key]\n    return dict1\ndef dict_slicing(dict1,lower_bound=0,upper_bound=None):\n    '''\n    Write a function to return the middle value of a dictionary\n    with the given key as the lower bound and upper bound.\n    '''\n    if upper_bound is None:\n        upper_bound = len(dict1)\n    if lower_bound > upper_bound:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_keys_slicing(dict1):\n    '''\n    Write a function to return the keys of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v2(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v3(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_keys_slicing_v2(dict1):\n    '''\n    Write a function to return the keys of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_keys_slicing_v3(dict1):\n    '''\n    Write a function to return the keys of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v2(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v3(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v2(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v3(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v2(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v3(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v2(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v3(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_keys_slicing_v2(dict1):\n    '''\n    Write a function to return the keys of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_keys_slicing_v3(dict1):\n    '''\n    Write a function to return the keys of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v2(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v3(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v2(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len(dict1) // 2\n    return dict1[mid][lower_bound:upper_bound]\ndef dict_values_slicing_v3(dict1):\n    '''\n    Write a function to return the values of a dictionary that start with the given\n    key as the lower bound and upper bound.\n    '''\n    if len(dict1) < 1:\n        return None\n    mid = len"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for k, v in dict1.items():\n        dict1[k] = v\n        dict1.pop(k)\n        dict1.popitem()\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return(sorted_counter)\n    pass\n    # pass\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2=dict1.copy()\n    sorted_dict=sorted(dict2.items(),key=lambda item:item[1])\n    return sorted_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # write your code here\n    if len(nums) < 2:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums)\n    return max(nums[0], nums[1]) + big_sum(nums[2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n        if nums[i] > largest:\n            largest = nums[i]\n    return smallest+largest\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # declaring list\n    # return list\n    max_number = nums[0]\n    min_number = nums[0]\n    # iterating through array\n    for number in nums:\n        # calculating minimum number\n        if number < min_number:\n            min_number = number\n        # calculating maximum number\n        if number > max_number:\n            max_number = number\n    return max_number + min_number\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # O(n) time complexity, O(1) space complexity\n    if nums == []:\n        return 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # define variables\n    maximum = float('-inf')\n    minimum = float('inf')\n    sum = 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = min(nums)\n    small = max(nums)\n    \n    return big + small\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_sum = nums[0]\n    small_sum = nums[0]\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    return string.upper()\n    \ndef is_capitalized(string):\n    '''\n    Write a python function to check if the given string starts with a capital letter.\n    '''\n    return string.capitalize()\n    \ndef is_numeric(string):\n    '''\n    Write a python function to check if the given string is a numeric string.\n    '''\n    return string.isnumeric()\n    \ndef is_url(string):\n    '''\n    Write a python function to check if the given string is a url.\n    '''\n    return string.startswith('http')\n    \ndef remove_url(string):\n    '''\n    Write a python function to remove the special characters from the url.\n    '''\n    return string.replace('http','')\n    \ndef remove_email(string):\n    '''\n    Write a python function to remove the special characters from the email.\n    '''\n    return string.replace('@','')\n    \ndef remove_period(string):\n    '''\n    Write a python function to remove the special characters from the period.\n    '''\n    return string.replace('.','')\n    \ndef remove_hyphen(string):\n    '''\n    Write a python function to remove the special characters from the hyphen.\n    '''\n    return string.replace('-','')\n    \ndef remove_special(string):\n    '''\n    Write a python function to remove the special characters from the special characters.\n    '''\n    return string.replace(';','')\n    \ndef remove_quotation(string):\n    '''\n    Write a python function to remove the special characters from the quotation marks.\n    '''\n    return string.replace('\"','')\n    \ndef remove_at(string):\n    '''\n    Write a python function to remove the special characters from the at sign.\n    '''\n    return string.replace('@','')\n    \ndef remove_hashtag(string):\n    '''\n    Write a python function to remove the special characters from the hashtag.\n    '''\n    return string.replace('#','')\n    \ndef remove_dot(string):\n    '''\n    Write a python function to remove the special characters from the dot.\n    '''\n    return string.replace('.','')\n    \ndef is_digit(string):\n    '''\n    Write a python function to check if the given string is a number.\n    '''\n    return string.isdigit()\n    \ndef remove_numbers(string):\n    '''\n    Write a python function to remove the numbers in the given string.\n    '''\n    return string.replace('0','')\n    \ndef get_base(string):\n    '''\n    Write a python function to get the base of a given string.\n    '''\n    return string.replace('0','')\n    \ndef remove_special_characters(string):\n    '''\n    Write a python function to remove the special characters from the string.\n    '''\n    return string.replace('!',' ')\n    \ndef remove_spaces(string):\n    '''\n    Write a python function to remove the spaces in the given string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_hyphen(string):\n    '''\n    Write a python function to remove the special characters from the hyphen.\n    '''\n    return string.replace('-',' ')\n    \ndef remove_whitespaces(string):\n    '''\n    Write a python function to remove the whitespaces in the given string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_url(string):\n    '''\n    Write a python function to remove the special characters from the url.\n    '''\n    return string.replace('http','')\n    \ndef is_file_name(string):\n    '''\n    Write a python function to check if the given string is a file name.\n    '''\n    return string.endswith('.pdf')\n    \ndef is_file_extension(string):\n    '''\n    Write a python function to check if the given string is a file extension.\n    '''\n    return string.endswith('.pdf')\n    \ndef is_lower_case(string):\n    '''\n    Write a python function to check if the given string is lower case.\n    '''\n    return string.lower()\n    \ndef is_upper_case(string):\n    '''\n    Write a python function to check if the given string is upper case.\n    '''\n    return string.upper()\n    \ndef is_capitalized(string):\n    '''\n    Write a python function to check if the given string is capitalized.\n    '''\n    return string.capitalize()\n    \ndef is_numeric(string):\n    '''\n    Write a python function to check if the given string is a numeric string.\n    '''\n    return string.isnumeric()\n    \ndef is_url(string):\n    '''\n    Write a python function to check if the given string is a url.\n    '''\n    return string.startswith('http')\n    \ndef remove_url(string):\n    '''\n    Write a python function to remove the special characters from the url.\n    '''\n    return string.replace('http','')\n    \ndef remove_email(string):\n    '''\n    Write a python function to remove the special characters from the email.\n    '''\n    return string.replace('@','')\n    \ndef remove_period(string):\n    '''\n    Write a python function to remove the special characters from the period.\n    '''\n    return string.replace('.','')\n    \ndef remove_hyphen(string):\n    '''\n    Write a python function to remove the special characters from the hyphen.\n    '''\n    return string.replace('-','')\n    \ndef remove_special(string):\n    '''\n    Write a python function to remove the special characters from the special characters.\n    '''\n    return string.replace(';','')\n    \ndef remove_quotation(string):\n    '''\n    Write a python function to remove the special characters from the quotation marks.\n    '''\n    return string.replace('\"','')\n    \ndef remove_at(string):\n    '''\n    Write a python function to remove the special characters from the at sign.\n    '''\n    return string.replace('@','')\n    \ndef remove_hashtag(string):\n    '''\n    Write a python function to remove the special characters from the hashtag.\n    '''\n    return string.replace('#','')\n    \ndef remove_dot(string):\n    '''\n    Write a python function to remove the special characters from the dot.\n    '''\n    return string.replace('.','')\n    \ndef is_digit(string):\n    '''\n    Write a python function to check if the given string is a number.\n    '''\n    return string.isdigit()\n    \ndef remove_numbers(string):\n    '''\n    Write a python function to remove the numbers in the given string.\n    '''\n    return string.replace('0','')\n    \ndef get_base(string):\n    '''\n    Write a python function to get the base of a given string.\n    '''\n    return string.replace('0','')\n    \ndef remove_special_characters(string):\n    '''\n    Write a python function to remove the special characters from the string.\n    '''\n    return string.replace('!',' ')\n    \ndef remove_spaces(string):\n    '''\n    Write a python function to remove the spaces in the given string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_hyphen(string):\n    '''\n    Write a python function to remove the special characters from the hyphen.\n    '''\n    return string.replace('-',' ')\n    \ndef remove_whitespaces(string):\n    '''\n    Write a python function to remove the whitespaces in the given string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_url(string):\n    '''\n    Write a python function to remove the special characters from the url.\n    '''\n    return string.replace('http',''"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_string = new_string + char.lower()\n    return new_string\n    #pass"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef capitalize(string):\n    '''\n    Write a python function to capitalize a given string.\n    '''\n    return string.capitalize()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = string.lower()\n    return lower\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    string = string.replace(\" \", \"\")\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # remove the substrings in the given string\n    pattern = re.compile('[^a-z]')\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    regex = r\"[a-zA-Z]'s?|a-zA-Z's?|'s?|'s?|\\s?|\\d+|\\D+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S+|\\S"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1.lower()!= str1:\n        return str1.lower()\n    else:\n        return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # # find all lowercase substrings\n    # to_remove = []\n    # for s in str1:\n    #     to_remove.append(s.lower())\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if type(str1) == list:\n        return [remove_lowercase(x) for x in str1]\n    else:\n        return str1.lower()\ndef remove_numeric_from_string(str1):\n    '''\n    Write a function to remove numeric values from a given string.\n    '''\n    if type(str1) == list:\n        return [remove_numeric_from_string(x) for x in str1]\n    else:\n        return str1.replace(\"%\", \"\").replace(\"$\", \"\").replace(\"\u00a5\", \"\").replace(\"+\", \"\").replace(\"-\", \"\").replace(\"/\", \"\").replace(\".\",\"\").replace(\"*\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\" \",\"\").replace(\",\", \"\")\ndef remove_digit_from_string(str1):\n    '''\n    Write a function to remove digit values from a given string.\n    '''\n    if type(str1) == list:\n        return [remove_digit_from_string(x) for x in str1]\n    else:\n        return str1.replace(\"%\", \"\").replace(\"$\", \"\").replace(\"\u00a5\", \"\").replace(\"+\", \"\").replace(\"-\", \"\").replace(\"/\", \"\").replace(\".\",\"\").replace(\"*\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\" \",\"\").replace(\",\", \"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    def count_lowercase(str1):\n        '''\n        Given a string, find the frequency of each character in the string.\n        '''\n        count = dict()\n        for char in str1:\n            if char in count.keys():\n                count[char] += 1\n            else:\n                count[char] = 1\n        return count\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace('.', '').replace('-', '').replace(',', '').replace('!', '').replace('?', '').replace('$', '').replace('&', '').replace('*', '').replace('(', '').replace(')', '').replace('\"', '').replace('%', '').replace('=', '').replace('<', '').replace('>', '').replace('|', '').replace('&', '').replace('*', '').replace('~', '')\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    def remove_substring(str1, sub_str):\n        '''\n        Write a function that will remove lowercase substrings from a given string.\n        '''\n        \n        return re.sub(sub_str, '', str1)\n    \n    return remove_substring(str1, 'abc')\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function that will remove punctuation from a given string.\n    '''\n    \n    def remove_punctuation_from(str1):\n        '''\n        Write a function that will remove punctuation from a given string.\n        '''\n        \n        return re.sub(r'[^\\w\\s]', '', str1)\n    \n    return remove_punctuation_from('I_Am_Racing_at_the_RACING_Program_at_Youtube_Online_Twint_2.0')\n    \ndef remove_url(str1):\n    '''\n    Write a function that will remove urls from a given string.\n    '''\n    \n    def remove_url_from(str1):\n        '''\n        Write a function that will remove urls from a given string.\n        '''\n        \n        return re.sub(r'[^http://]*', '', str1)\n    \n    return remove_url_from('https://youtube.com/watch?v=e5CZCsAtw')\n    \ndef remove_emoji(str1):\n    '''\n    Write a function that will remove emoji from a given string.\n    '''\n    \n    def remove_emoji_from(str1):\n        '''\n        Write a function that will remove emoji from a given string.\n        '''\n        \n        return re.sub(r'[\\U0001F600-\\U0001F64F]', '', str1)\n    \n    return remove_emoji_from('\\U0001F601,\\U0001F602,\\U0001F603')\n    \ndef remove_hashtag(str1):\n    '''\n    Write a function that will remove hashtags from a given string.\n    '''\n    \n    def remove_hashtag_from(str1):\n        '''\n        Write a function that will remove hashtags from a given string.\n        '''\n        \n        return re.sub(r'#[A-Za-z0-9]*', '', str1)\n    \n    return remove_hashtag_from('Twitter: #PENNY_LANGUAGE:')\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function that will remove punctuation from a given string.\n    '''\n    \n    def remove_punctuation_from(str1):\n        '''\n        Write a function that will remove punctuation from a given string.\n        '''\n        \n        return re.sub(r'[^\\w\\s]', '', str1)\n    \n    return remove_punctuation_from('This_is_a_sentence_of_text_1.0')\n    \ndef remove_special_characters(str1):\n    '''\n    Write a function that will remove special characters from a given string.\n    '''\n    \n    def remove_special_characters_from(str1):\n        '''\n        Write a function that will remove special characters from a given string.\n        '''\n        \n        return re.sub(r'[^a-zA-Z0-9]', '', str1)\n    \n    return remove_special_characters_from('This_is_a_sentence_of_text_1.0')\n    \ndef remove_urls(str1):\n    '''\n    Write a function that will remove urls from a given string.\n    '''\n    \n    def remove_urls_from(str1):\n        '''\n        Write a function that will remove urls from a given string.\n        '''\n        \n        return re.sub(r'[^http://]*', '', str1)\n    \n    return remove_urls_from('https://youtube.com/watch?v=5j-TKMtLCA')\n    \ndef remove_exclamation_marks(str1):\n    '''\n    Write a function that will remove exclamation marks from a given string.\n    '''\n    \n    def remove_exclamation_marks_from(str1):\n        '''\n        Write a function that will remove exclamation marks from a given string.\n        '''\n        \n        return re.sub(r'[^!.? ]', '', str1)\n    \n    return remove_exclamation_marks_from('I_am_Racing_at_the_RACING_Program_at_Youtube_Online_Twint_2.0')\n    \ndef remove_special_characters(str1):\n    '''\n    Write a function that will remove special characters from a given string.\n    '''\n    \n    def remove_special_characters_from(str1):\n        '''\n        Write a function that will remove special characters from a given string.\n        '''\n        \n        return re.sub(r'[^a-zA-Z0-9]', '', str1)\n    \n    return remove_special_characters_from('This_is_a_sentence_of_text_1.0')\n    \ndef remove_punctuation_at_start(str1):\n    '''\n    Write a function that will remove punctuation at the start of a given string.\n    '''\n    \n    def remove_punctuation_at_start_from(str1):\n        '''\n        Write a function that will remove punctuation at the start of a given string.\n        '''\n        \n        return re.sub(r'[^a-zA-Z0-9]', '', str1)\n    \n    return remove_punctuation_at_start_from('I_Am_Racing_at_the_RACING_Program_at_Youtube_Online_Twint_2.0')\n    \ndef remove_punctuation_at_end(str1):\n    '''\n    Write a function that will remove punctuation at the end of a given string.\n    '''\n    \n    def remove_punctuation_at_end_from(str1):\n        '''\n        Write a function that will remove punctuation at the end of a given string.\n        '''\n        \n        return re.sub(r'[^a-zA-Z0-9]', '', str1)\n    \n    return remove_punctuation_at_end_from('This_is_a_sentence_of_text_1.0')\n    \ndef remove_dash_at_beginning(str1):\n    '''\n    Write a function that will remove dash at the beginning of a given string.\n    '''\n    \n    def remove_dash_at_beginning_from(str1):\n        '''\n        Write a function that will remove dash at the beginning of a given string.\n        '''\n        \n        return re.sub(r'^[a-zA-Z0-9]*', '', str1)\n    \n    return remove_dash_at_beginning_from('This_is_a_sentence_of_text_1.0')\n    \ndef remove_dash_at_end(str1):\n    '''\n    Write a function that will remove dash at the end of a given string.\n    '''\n    \n    def remove_dash_at_end_from(str1):\n        '''\n        Write a function that will remove dash at the end of a given string.\n        '''\n        \n        return re.sub(r'[^a-zA-Z0-9]*', '', str1)\n    \n    return remove_dash_at_end_from('This_is_a_sentence_of_text_1.0')\n    \ndef remove_emoji_at_start(str1):\n    '''\n    Write a function that will remove emoji at the start of a given string.\n    '''\n    \n    def remove_emoji_at_start_from(str1):\n        '''\n        Write a function that will remove emoji at the start of a given string.\n        '''\n        \n        return re.sub(r'[^a-zA-Z0-9]*', '', str1)\n    \n    return remove"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=[]\n    for word in str1.split():\n        str2.append(word.lower())\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    return str1.replace('.com','com')\ndef remove_digits(str1):\n    '''\n    Write a function to remove consecutive digits from a given string.\n    '''\n    str1=str1.replace('0',' ')\n    str1=str1.replace('1',' ')\n    str1=str1.replace('2',' ')\n    str1=str1.replace('3',' ')\n    str1=str1.replace('4',' ')\n    str1=str1.replace('5',' ')\n    str1=str1.replace('6',' ')\n    str1=str1.replace('7',' ')\n    str1=str1.replace('8',' ')\n    str1=str1.replace('9',' ')\n    str1=str1.replace('0',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(' ',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('$',' ')\n    str1=str1.replace('%',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace(';',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('$',' ')\n    str1=str1.replace('%',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace(';',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('$',' ')\n    str1=str1.replace('%',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace(':',' ')\n    str1=str1.replace(';',' ')\n    str1=str1.replace(',',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('$',' ')\n    str1=str1.replace('%',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('$',' ')\n    str1=str1.replace('%',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('$',' ')\n    str1=str1.replace('%',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('$',' ')\n    str1=str1.replace('%',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('$',' ')\n    str1=str1.replace('%',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('-',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('.',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('$',' ')\n    str1=str1.replace('%',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #raise NotImplementedError(\"Function not implemented\")\n    return n%10"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n <= 1 :\n        return n\n    elif n == 0 :\n        return n\n    else :\n        return n - 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10\ndef second_Digit(n) : \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+1\ndef third_Digit(n) : \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+2\ndef fourth_Digit(n) : \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+3\ndef fifth_Digit(n) : \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+4\ndef sixth_Digit(n) : \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+5\ndef seventh_Digit(n) : \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+6\ndef eighth_Digit(n) : \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+7\ndef nineteen_Digit(n) : \n    '''\n    Write a python function to find the nineteen digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+8\ndef ten_Digit(n) : \n    '''\n    Write a python function to find the ten digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+9\ndef hundred_Digit(n) : \n    '''\n    Write a python function to find the hundred digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+10\ndef million_Digit(n) : \n    '''\n    Write a python function to find the million digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+11\ndef billion_Digit(n) : \n    '''\n    Write a python function to find the billion digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+12\ndef thousand_Digit(n) : \n    '''\n    Write a python function to find the thousand digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+13\ndef million_and_billion_Digit(n) : \n    '''\n    Write a python function to find the million and billion digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+14\ndef thousand_and_million_Digit(n) : \n    '''\n    Write a python function to find the thousand and million digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+15\ndef hundred_and_thousand_Digit(n) : \n    '''\n    Write a python function to find the hundred and thousand digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+16\ndef ten_and_thousand_Digit(n) : \n    '''\n    Write a python function to find the ten and thousand digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+17\ndef hundred_and_million_Digit(n) : \n    '''\n    Write a python function to find the hundred and million digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+18\ndef thousand_and_billion_Digit(n) : \n    '''\n    Write a python function to find the thousand and billion digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+19\ndef thousand_and_million_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the thousand and million and billion digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+20\ndef thousand_and_billion_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the thousand and billion and million digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+21\ndef thousand_and_million_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the thousand and million and billion digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+22\ndef hundred_and_thousand_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the hundred and thousand digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+23\ndef ten_and_thousand_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the ten and thousand digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+24\ndef hundred_and_million_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the hundred and million digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+25\ndef billion_and_thousand_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the billion and thousand digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+26\ndef billion_and_million_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the billion and million digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+27\ndef million_and_thousand_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the million and thousand digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+28\ndef million_and_billion_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the million and billion digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+29\ndef million_and_million_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the million and million digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        return n%10+30\ndef million_and_billion_Digit_and_ten_Digit(n) : \n    '''\n    Write a python function to find the million and billion digit of a given number.\n    '''\n    if n<10:\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<0 :\n        print(\"Invalid Input\")\n    elif n==0 :\n        print(\"Zero\")\n    elif n>0 :\n        n=n%10\n        print(n)\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #your code here\n    digits=[]\n    while n>0:\n        digits.append(n%10)\n        n=n//10\n    return digits[0]\n        \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    ans = 0\n    while n!= 0:\n        ans = ans + 1\n        n = n // 10\n    return ans\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # YOUR CODE HERE\n    num = n\n    # first, check if the number is a digit or not\n    if(type(num)==int or type(num)==float) :\n        # if it is, then check whether the number is a digit or not\n        # then return the digit\n        if(num.isdigit()):\n            return num\n        else:\n            return 'Not a digit'\n    else :\n        return 'Not a number'\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n <= 0 :\n        return \"The number must be positive\"\n    if n == 1 :\n        return 0\n    else :\n        return 1\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    lst = list(str(n))\n    lst.sort()\n    return lst[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10 \ndef second_Digit(n) : \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return n // 10\ndef third_Digit(n) : \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return n // 100\ndef fourth_Digit(n) : \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    return n // 1000\ndef fifth_Digit(n) : \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    return n // 10000\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(list)\n    return [i for i in list if i % 2 == 1]\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for n in list:\n        if n % 2 == 1:\n            odd_list.append(n)\n    print(odd_list)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n    #dictionary to store the odd numbers\n    # odd_numbers = {}\n    # for item in list: \n    #     if item % 2 == 1: \n    #         if item not in odd_numbers.keys(): \n    #             odd_numbers[item] = 1\n    #         else: \n    #             odd_numbers[item] += 1\n    #     else: \n    #         pass\n    # return odd_numbers\n    # print(odd_numbers)\n    # return list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    even = []\n    for i in list: \n        if i%2 == 1: \n            odd.append(i) \n        else: \n            even.append(i) \n    return odd, even\ndef OddEven(list): \n    '''\n    Write a python function which takes a list of integers and returns the list of odd numbers and even numbers.\n    '''\n    odd = []\n    even = []\n    for i in list: \n        if i%2 == 0: \n            odd.append(i) \n        else: \n            even.append(i) \n    return odd, even\ndef OddEven2(list): \n    '''\n    Write a python function which takes a list of integers and returns the list of odd numbers and even numbers.\n    '''\n    odd = []\n    even = []\n    for i in list: \n        if i%2 == 0: \n            odd.append(i) \n        else: \n            even.append(i) \n    return odd, even\ndef Sum(list): \n    '''\n    Write a python function which takes a list of integers and returns the sum of all the numbers.\n    '''\n    sum = 0\n    for i in list: \n        sum += i\n    return sum\ndef MinMax(list): \n    '''\n    Write a python function which takes a list of integers and returns the min, max of the numbers.\n    '''\n    min = list[0]\n    max = list[0]\n    for i in list: \n        if i > max: \n            max = i\n        if i < min: \n            min = i\n    return min, max\ndef MinMax2(list): \n    '''\n    Write a python function which takes a list of integers and returns the min, max of the numbers.\n    '''\n    min = list[0]\n    max = list[0]\n    for i in range(len(list)): \n        if list[i] > max: \n            max = list[i]\n        if list[i] < min: \n            min = list[i]\n    return min, max\ndef In_Range(list, min, max): \n    '''\n    Write a python function which takes a list of integers and a minimum and maximum.\n    Returns true if the list is within the range and false otherwise.\n    '''\n    return min <= list[0] <= max\ndef In_Range2(list, min, max): \n    '''\n    Write a python function which takes a list of integers and a minimum and maximum.\n    Returns true if the list is within the range and false otherwise.\n    '''\n    return list[0] <= min <= list[0] <= max\ndef EvenOdd(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd2(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd3(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd4(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd5(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef In_Range3(list, min, max): \n    '''\n    Write a python function which takes a list of integers and a minimum and maximum.\n    Returns true if the list is within the range and false otherwise.\n    '''\n    return list[0] <= min <= max\ndef In_Range3(list, min, max): \n    '''\n    Write a python function which takes a list of integers and a minimum and maximum.\n    Returns true if the list is within the range and false otherwise.\n    '''\n    return list[0] <= min <= max\ndef EvenOdd6(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd6(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd7(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd7(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd8(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd8(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd9(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\ndef EvenOdd9(list): \n    '''\n    Write a python function which takes a list of integers and returns the even and odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i%2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    x = []\n    for i in list:\n        if i % 2!= 0:\n            x.append(i)\n    return x\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #Your code here\n    even_num = []\n    odd_num = []\n    for i in list:\n        if i%2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    return odd_num\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    Evens = []\n    for i in list: \n        if (i % 2)!= 0: \n            Evens.append(i) \n    return Evens \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    evens = []\n    odds = []\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for n in list:\n        if n % 2!= 0:\n            odd.append(n)\n    return odd\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_1 = 0\n    sum_2 = 0\n    for i in range(1,n+1) :\n        sum_1 = sum_1 + i**3\n        sum_2 = sum_2 + i**2\n    return sum_1 - sum_2\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import math\n    def cubes_sum(n) :\n        '''\n        Write a python function to compute the sum of cubes of the first n natural numbers.\n        '''\n        cubes_sum = 0\n        for i in range(1,n+1) :\n            cubes_sum += i**3\n        return cubes_sum\n    def diff(n) :\n        '''\n        Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n        '''\n        diff_sum = cubes_sum(n) - cubes_sum(n - 1)\n        return diff_sum\n    if n >= 0 :\n        print(\"The difference between sum of cubes of natural numbers and sum of natural numbers is : \",diff(n))\n    else :\n        print(\"n does not satisfy the condition\")\n    if n < 0 :\n        print(\"n does not satisfy the condition\")\n    else :\n        print(\"The difference between sum of cubes of natural numbers and sum of natural numbers is : \",diff(n))\n        \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    sum1 = 0\n    sum2 = 0\n    \n    for i in range(1,n+1):\n        sum1 = sum1 + i**3\n        sum2 = sum2 + i**2\n    \n    difference = sum2 - sum1\n    return difference\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    if (n == 0) :\n        return 0\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sumOfCubes = 0\n    sumOfNatural = 0\n    for i in range(1, n + 1):\n        sumOfCubes += i**3\n        sumOfNatural += i**2\n    return sumOfCubes-sumOfNatural\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import math\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.pow(i, 3)\n    print(sum)\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(0,n+1):\n        sum+=i**3\n    print(sum)\n    \ndifference(5)"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        sum += i ** 3\n    return sum\n    \nprint(difference(10))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print('''\n    Write a python function that takes in a number n and returns the difference of the cube of cubes of the first n natural numbers.\n    ''')\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    s = sum(list(map(lambda i:i**3,range(1,n))))\n    return s-sum(list(map(lambda i:i**3,range(1,n))))\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    o_pairs = 0\n    for i in range(N) :\n        for j in range(i, N) :\n            if (A[i]^A[j])%2 == 1 :\n                o_pairs += 1\n    return o_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #Initialize the counter with 0\n    odd_count = 0\n    #Go through the list of elements\n    for i in range(0,N):\n        #If the xor of element i and N-1 are odd, then increment the counter by 1\n        if A[i] ^ A[i+1] % 2 == 1 :\n            odd_count = odd_count + 1\n    #Return the count\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    x=0\n    for i in range(N) :\n        if (A[i]&1)!= (A[i]&1) :\n            x+=1\n    return x\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Multiples(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Multiples_Small(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Small(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Small_Multiples(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Small_Multiples_Small(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Small_Multiples_Small_Multiples(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Small_Multiples_Small_Multiples(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Small_Multiples_Small_Multiples(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Small_Multiples_Small_Multiples(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Small_Multiples_Small_Multiples(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    A_list = A\n    Pairs = 0\n    while(A_list[0]!= A_list[1]) :\n        Pairs += 1\n        A_list = (A_list[1] ^ A_list[0])\n    A_list = A_list[1:]\n    for i in range(N-1) :\n        if A_list[i]!= A_list[i+1] :\n            return 0\n    else :\n        return Pairs\n    \ndef find_Pairs_with_Xor_Small_Multiples_Small_Multiples_Small(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # write your code here\n    result = 0\n    for i in range(N-1):\n        if A[i] ^ A[i+1]!= A[i+1] and A[i] ^ A[i+1]!= A[i]:\n            result += 1\n    return result\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if(A == 0) : \n        return 1\n    else : \n        return ((N - 1) // 2) + (find_Odd_Pair(A - 1, N - 1) + find_Odd_Pair(A - 1, N))\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0\n    for i in range(len(A)) :\n        if(A[i]&1!= A[i] ) :\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 0 :\n                odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    a = 0\n    b = 0\n    for i in range(N) : \n        a = a + N \n        b = b + N \n        if (A[i] ^ (i+1)) % 2 == 1 : \n            a = a + N\n        if (A[i] ^ (i-1)) % 2 == 1 : \n            b = b + N\n    print(N, a, b)\n    return a,b\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_value = 0\n    for i in range(N) :\n        xor_value = A[i]^N\n        if xor_value % 2 == 0 :\n            count += 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggle_cases = {\n        'upper': 'T',\n        'lower': 'F',\n        'capitalize': 'f',\n        'wrap': 'W',\n        'replace': 'R',\n        'fancy_capwords': 'F',\n        'fancy_split': 'F',\n        'fancy_count_chars': 'F',\n        'fancy_count_words': 'F'\n    }\n    for key, value in toggle_cases.items():\n        string = string.replace(key, value)\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    result = ''\n    \n    for char in string:\n        if char.lower() == char:\n            result += char.upper()\n        else:\n            result += char\n    \n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) == 0:\n        return string\n    elif string[0] =='':\n        string = string[1:]\n        string = string[:1] + string[1:]\n    elif string[0] == '~':\n        string = string[1:]\n        string = string[:1] + string[1:]\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.replace('_','').title()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse the entire string.\n    '''\n    return string[::-1]\n    \ndef remove_letter(string, letter):\n    '''\n    Write a function to remove a letter from a string.\n    '''\n    return string.replace(letter, '')\n    \ndef remove_space(string):\n    '''\n    Write a function to remove all whitespace from a string.\n    '''\n    return string.replace(' ', '')\n    \ndef check_repeated_string(string, n):\n    '''\n    Write a function to check whether a string has at least n repetitions.\n    '''\n    return string.count(string) >= n\n    \ndef check_sum(string, n):\n    '''\n    Write a function to check whether a string has a sum of at most n.\n    '''\n    return sum(string.split()) >= n\n    \ndef reverse_string_by_count(string, count):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[count:] + string[:count]\n    \ndef reverse_string_by_char_count(string, char):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[char::-1] + string[:char::-1]\n    \ndef find_index(string, character):\n    '''\n    Write a function to find the index of a character in a string.\n    '''\n    return string.find(character)\n    \ndef reverse_string_by_index(string, index):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[index::-1] + string[:index::-1]\n    \ndef double_string(string):\n    '''\n    Write a function to double the characters in a string.\n    '''\n    return string.replace('!', '?')\n    \ndef get_num_sentences(string):\n    '''\n    Write a function to get the number of sentences in a string.\n    '''\n    return len(string.split('.'))\n    \ndef get_num_words(string):\n    '''\n    Write a function to get the number of words in a string.\n    '''\n    return len(string.split())\n    \ndef get_word_count(string):\n    '''\n    Write a function to get the number of words in a string.\n    '''\n    return len(string.split())\n    \ndef count_capital_letters(string):\n    '''\n    Write a function to count the number of capital letters in a string.\n    '''\n    return sum(1 for s in string if s.isupper())\n    \ndef is_capital(string):\n    '''\n    Write a function to determine whether a string is a capitalized word.\n    '''\n    return string.isupper() and string.islower() and string.istitle()\n    \ndef lower_and_strip(string):\n    '''\n    Write a function to lowercase the entire string and strip the whitespace characters.\n    '''\n    return string.strip()\n    \ndef remove_characters(string, character):\n    '''\n    Write a function to remove the characters in a string.\n    '''\n    return string.replace(character, '')\n    \ndef is_word_start(string):\n    '''\n    Write a function to check whether a string starts with a word.\n    '''\n    return string.split()[0] == string\n    \ndef is_word_end(string):\n    '''\n    Write a function to check whether a string ends with a word.\n    '''\n    return string.split()[-1] == string\n    \ndef is_digit_start(string):\n    '''\n    Write a function to check whether a string starts with a digit.\n    '''\n    return string.split()[0].isdigit()\n    \ndef is_digit_end(string):\n    '''\n    Write a function to check whether a string ends with a digit.\n    '''\n    return string.split()[-1].isdigit()\n    \ndef is_word_case(string):\n    '''\n    Write a function to check whether a string starts with a word.\n    '''\n    return string.split()[0].isupper()\n    \ndef is_word_case_end(string):\n    '''\n    Write a function to check whether a string ends with a word.\n    '''\n    return string.split()[-1].isupper()\n    \ndef is_word_start_and_end(string):\n    '''\n    Write a function to check whether a string starts with a word and ends with a word.\n    '''\n    return string.split()[0].isupper() and string.split()[-1].isupper()\n    \ndef is_word_end_and_start(string):\n    '''\n    Write a function to check whether a string ends with a word and starts with a word.\n    '''\n    return string.split()[-1].isupper() and string.split()[0].isupper()\n    \ndef split_string(string):\n    '''\n    Write a function to split a string into a list.\n    '''\n    return string.split(',')\n    \ndef get_number_of_words(string):\n    '''\n    Write a function to get the number of words in a string.\n    '''\n    return len(string.split())\n    \ndef split_words(string):\n    '''\n    Write a function to split a string into a list.\n    '''\n    return string.split()\n    \ndef is_string_start_and_end(string):\n    '''\n    Write a function to check whether a string starts with a word and ends with a word.\n    '''\n    return string.split()[0].isupper() and string.split()[-1].isupper()\n    \ndef count_all_words(string):\n    '''\n    Write a function to count all words in a string.\n    '''\n    return string.split().count()\n    \ndef is_all_words(string):\n    '''\n    Write a function to check whether a string contains all words.\n    '''\n    return string.split().count() >= 1\n    \ndef count_words(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return string.split().count()\n    \ndef reverse_string_from_start(string):\n    '''\n    Write a function to reverse a string starting at the beginning of a string.\n    '''\n    return string[::-1] + string[:0:-1]\n    \ndef reverse_string_from_end(string):\n    '''\n    Write a function to reverse a string starting at the end of a string.\n    '''\n    return string[::-1] + string[-1::-1]\n    \ndef reverse_string_from_both_ends(string):\n    '''\n    Write a function to reverse a string starting at both ends of a string.\n    '''\n    return string[::-1] + string[-2::-1] + string[::-1]\n    \ndef replace_string(string, old_string, new_string):\n    '''\n    Write a function to replace a string with a new one.\n    '''\n    return string.replace(old_string, new_string)\n    \ndef reverse_string_and_get_number_of_words(string):\n    '''\n    Write a function to reverse a string and get the number of words.\n    '''\n    return reverse_string_and_get_number_of_words(string[::-1])\n    \ndef rotate_string(string, number_of_rotations):\n    '''\n    Write a function to rotate a string by a given number of rotations.\n    '''\n    return string[::-1].translate(len(string) - number_of_rotations)\n    \ndef get_list_from_string(string):\n    '''\n    Write a function to get a list from a string.\n    '''\n    return string.split()\n    \ndef get_list_from_string_with_index(string, index):\n    '''\n    Write a function to get a list from a string with a given index.\n    '''\n    retur"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.title()"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # for char in string:\n    #     if char.islower():\n    #         string.lower()\n    #     elif char.isupper():\n    #         string.upper()\n    #     else:\n    #         string.capitalize()\n    #     # else:\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.swapcase()\n    #     #     string.s"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggle = ''\n    for letter in string:\n        if letter.isupper():\n            toggle += '_'\n        elif letter.islower():\n            toggle += '_'\n        elif letter.isdigit():\n            toggle += '_'\n        else:\n            toggle += letter\n    return toggle\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    if n1 == n2:\n        return n1\n    elif n1 < n2:\n        return digit_distance_nums(n1, n2 - 1)\n    else:\n        return digit_distance_nums(n2, n1 - 1)\n        \n        \nn1 = int(input(\"Enter n1: \"))\nn2 = int(input(\"Enter n2: \"))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > 9 or n2 > 9:\n        return 0\n    elif n1 > n2:\n        n1, n2 = n2, n1\n    return n2 - n1\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    #Set a negative number to 0\n    n1 = abs(n1)\n    n2 = abs(n2)\n    \n    #Set a zero to carry for our sum\n    carry = 0\n    #Set a zero to carry for our sum\n    sum = 0\n    \n    #Loop through all the digits\n    for n in range(n1):\n        digit1 = n2 // 10**(n)\n        digit2 = n2 % 10**(n)\n        #If there is a carry, add it\n        if(digit1 == 0 or digit2 == 0):\n            carry = 0\n        #If there is a zero, subtract from the current digit\n        if(digit1 == 0 and digit2 == 0):\n            digit1 = -1\n            digit2 = -1\n            carry = 1\n        #If there is a one, subtract from the current digit\n        if(digit1 == 1 and digit2 == 1):\n            digit1 = -1\n            digit2 = -1\n            carry = -1\n        #If there is a zero and a one, add to the current digit\n        if(digit1 == 0 and digit2 == 1):\n            digit1 = 1\n            digit2 = 1\n            carry = -1\n        #If there is a zero and a zero, add to the current digit\n        if(digit1 == 0 and digit2 == 0):\n            digit1 = -1\n            digit2 = -1\n            carry = -1\n        #If there is a one and a zero, add to the current digit\n        if(digit1 == 1 and digit2 == 0):\n            digit1 = 1\n            digit2 = 0\n            carry = -1\n        #If there is a zero and a one, add to the current digit\n        if(digit1 == 0 and digit2 == 1):\n            digit1 = 1\n            digit2 = 1\n            carry = -1\n        #If there is a zero and a one, add to the current digit\n        if(digit1 == 1 and digit2 == 1):\n            digit1 = 1\n            digit2 = 1\n            carry = -1\n        #If there is a zero, add to the current digit\n        if(digit1 == 0):\n            digit1 = -1\n            carry = -1\n        #If there is a one, add to the current digit\n        if(digit1 == 1):\n            digit1 = 1\n            carry = -1\n            \n        #If there is a carry, add it\n        if(carry):\n            digit2 += carry\n            carry = 0\n            \n        #Add to the current digit\n        sum += digit1 * 10**(n) + digit2 * 10**(n)\n        \n        #Increment the carry\n        carry = 1 if (sum % 10**n) > 0 else 0\n    \n    #If there is a carry, return the result\n    if(carry):\n        return sum + carry\n    #Else return the sum\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    result = 0\n    #Get the absolute difference of the integers.\n    abs_diff = abs(n1 - n2)\n    #Loop through the range of absolute differences.\n    for i in range(0, abs_diff+1):\n        result += abs(n1 - int(str(n1)[i]))\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    for i in range(n1 - 1, -1, -1):\n        s = s + (n2 - n1 * (i + 1))\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diffs = []\n    diffs.append(abs(n1 - n2))\n    for i in range(1, 10):\n        diffs.append((n1 - n2) % (10 ** i))\n    return sum(diffs)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(n1)-int(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # read in the input data\n    inp = n1 + n2\n    # convert input data to decimal numbers\n    d1 = bin(inp).replace(\"0b\", \"\")\n    d2 = bin(inp + 10).replace(\"0b\", \"\")\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for n1, n2 in zip(n1, n2):\n        diff += abs(int(n1)-int(n2))\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # find the sum of digits\n    sum = 0\n    for d in range(0, 10):\n        if n1 % d == 0:\n            digit1 = d\n            break\n    for d in range(0, 10):\n        if n2 % d == 0:\n            digit2 = d\n            break\n    for d in range(0, 10):\n        if digit1 == digit2:\n            sum += d\n        else:\n            break\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    def helper(a, size, sub_sum):\n        if size == 0:\n            return sub_sum\n        if size == 1:\n            return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    size_rec = [0 for i in range(size + 1)]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_list = [0] * size\n    res = 0\n    for i in range(size):\n        res += a[i]\n        sub_list[i] = res\n    max_sub_list = sub_list[::-1]\n    # Loop through the array and update the sub_list[i]\n    for i in range(size):\n        max_sub_list[i] += a[i]\n        # The current element is a sublist, need to check if it is greater than or equal to the sum of its elements\n        if (i+1) < size and sub_list[i] < sub_list[i+1] and sub_list[i] > res:\n            res = sub_list[i]\n    return res\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #  Initialize an array to store the current index\n    #  for the largest contiguous sublist\n    current_index = 0\n    #  Initialize the max_sum to be the sum of all the numbers in the list.\n    max_sum = 0\n    #  Loop through the list until the current index is greater than the length of the list.\n    while current_index < size:\n        #  Calculate the sum of the numbers in the current index\n        #  from the largest sublist\n        max_sum = max_sum + a[current_index]\n        #  Increment the current index for the next iteration\n        current_index += 1\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #create a blank array\n    result = []\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = size\n    sub = []\n    max_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # find the highest element\n    highest_elem = max(a)\n    # store the highest element in an array\n    highest_element = []\n    for i in a:\n        if i == highest_elem:\n            highest_element.append(i)\n    # find the largest sublist of the highest element\n    i = highest_element.index(highest_elem)\n    return highest_elem - a[i]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    max_sub_sum = -1\n    idx = 0\n    for i in range(size):\n        sub_sum = a[i]\n        if sub_sum > 0:\n            while sub_sum > 0:\n                sub_sum -= a[idx]\n                idx += 1\n            if sub_sum > max_sub_sum:\n                max_sub_sum = sub_sum\n    if max_sub_sum < 0:\n        return 0\n    else:\n        return max_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    left, right = 0, size - 1\n    # note that the right most index is the last index and the leftmost index is the first index\n    max_sum = 0\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a dictionary to store the count of each element\n    ele_dict = {}\n    for ele in test_tup1:\n        ele_dict[ele] = ele_dict.get(ele, 0) + 1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Write your code here.\n    res = []\n    temp = test_tup1[0]\n    i = 1\n    while i < len(test_tup1):\n        if test_tup1[i] not in temp:\n            res.append(test_tup1[i])\n        else:\n            temp.remove(test_tup1[i])\n            res.append(test_tup1[i])\n        i += 1\n    temp = test_tup2[0]\n    i = 1\n    while i < len(test_tup2):\n        if test_tup2[i] not in temp:\n            res.append(test_tup2[i])\n        else:\n            temp.remove(test_tup2[i])\n            res.append(test_tup2[i])\n        i += 1\n    res = sorted(res)\n    return res\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    # [(1, 'abc'), (2, 'def'), (3, 'ghi'), (4, 'jkl'), (5,'mno'), (6, 'pqrs'), (7, 'tuv')]\n    test_tup1, test_tup2 = sorted(test_tup1), sorted(test_tup2)\n    # 'ghi' is the first element in the resulting list.\n    # 'jkl' is the second element in the resulting list.\n    #'mno' is the third element in the resulting list.\n    # 'pqrs' is the fourth element in the resulting list.\n    # 'tuv' is the fifth element in the resulting list.\n    return [test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1], test_tup1[2] + test_tup2[2], test_tup1[3] + test_tup2[3], test_tup1[4] + test_tup2[4], test_tup1[5] + test_tup2[5], test_tup1[6] + test_tup2[6], test_tup1[7] + test_tup2[7]]\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Declare two empty lists\n    list1 = []\n    list2 = []\n    # Append the tuples to the lists in the proper order\n    list1.append(test_tup1[0])\n    list1.append(test_tup1[1])\n    list2.append(test_tup2[0])\n    list2.append(test_tup2[1])\n    # Populate the lists to the list1 and list2\n    while len(list1) > 0:\n        list1.pop()\n        list2.pop()\n    # Sort the lists\n    list1.sort()\n    list2.sort()\n    return list1, list2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1)==0:\n        return test_tup2\n    elif len(test_tup2)==0:\n        return test_tup1\n    else:\n        p = min(test_tup1, test_tup2)\n        q = max(test_tup1, test_tup2)\n        return tuple([p[0], q[0]])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return test_tup1 if len(test_tup1) > len(test_tup2) else test_tup2\n    \nprint(union_elements([1, 2, 3], [4, 5, 6]))\nprint(union_elements([1, 4, 7], [2, 5, 8]))\nprint(union_elements([3, 6], [7, 8, 9])"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = set(test_tup1)\n    union_tup.update(test_tup2)\n    return sorted(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set()\n    union_elems = set()\n    for elem in test_tup1:\n        union.add(elem)\n    for elem in test_tup2:\n        union_elems.add(elem)\n    for elem in union_elems:\n        if elem not in union:\n            union.add(elem)\n    return sorted(union)\n    \n    \n    #-------- SOLUTION\n    #return sorted(set(test_tup1) | set(test_tup2)"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Check for empty tuples\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    # Check if they are of same type\n    if type(test_tup1[0])!= type(test_tup2[0]):\n        return None\n    # Check if the tuples are of same size\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    # Get the size of the array\n    size1 = len(test_tup1)\n    size2 = len(test_tup2)\n    # Loop through the two arrays and find the intersection\n    # Return the sorted elements as a list\n    intersection = []\n    for i in range(size1):\n        for j in range(size2):\n            if test_tup1[i][j] == test_tup2[i][j]:\n                intersection.append(test_tup1[i])\n    return intersection\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    return tup1.union(tup2)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return len(max(lst,key=len))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n=len(lst)\n    max=0\n    for i in range(0,n):\n        for j in range(0,n-i-1):\n            if lst[j:j+i]==lst[j:j+i][::-1]:\n                max=i\n                break\n    return max\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n    \n    "
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    \n    max_len = 0\n    max_len_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_len_list = lst[i]\n    \n    return max_len_list\n    \ndef Find_Max_Index(lst):\n    '''\n    Write a python function to find the index of the longest sublist.\n    '''\n    \n    \n    max_index = 0\n    max_index_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) > max_index:\n            max_index = len(lst[i])\n            max_index_list = lst[i]\n    \n    return max_index_list\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    longest = 0\n    # convert lst to a list\n    lst = list(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                longest = longest if longest < lst[i]\n                break\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    counter = 0\n    max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            counter = i\n    return counter, max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dict={} #dictionary of list\n    count=0\n    for i in range(len(lst)):\n        count=count+1 #counts the size of each sublist\n        if(lst[i] not in dict): #if value is not present in the dictionary, it will add it with its size to the dictionary\n            dict[lst[i]]=count #adds the key and its size to the dictionary\n        else:\n            if(dict[lst[i]]>count): #if the value is larger, it will update its size\n                dict[lst[i]]=count #update\n    return dict\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    c = 0\n    n = len(lst)\n    while c < n:\n        if len(lst[c]) > c:\n            c += 1\n        else:\n            return c\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength=0\n    for x in lst:\n        length=len(x)\n        if length>maxLength:\n            maxLength=length\n    return maxLength\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = str(text)\n    return text.replace(\"'\", '\"').replace('\"', '\"').replace('(', '\\(').replace(')', '\\)').replace('{', '{').replace('}', '}').replace(',', '\\,').replace('.', '\\.')\n    \n    \ndef extract_keyword(text):\n    '''\n    Write a function to extract keywords from a string.\n    '''\n    text = str(text)\n    return re.findall(r'\\b\\w+\\b', text)\n    \n    \ndef extract_emotion(text):\n    '''\n    Write a function to extract emotion values from a string.\n    '''\n    emotion_pattern = r'(\\b[^\\w]*?\\w+\\b)'\n    return re.findall(emotion_pattern, text)\n    \n    \ndef extract_emotion_category(text):\n    '''\n    Write a function to extract emotion categories from a string.\n    '''\n    emotion_category_pattern = r'(\\b[^\\w]*?\\w+\\b)'\n    return re.findall(emotion_category_pattern, text)\n    \n    \ndef extract_keyword_emotion(text):\n    '''\n    Write a function to extract keyword emotions from a string.\n    '''\n    emotion_pattern = r'\\b\\w+\\b'\n    return re.findall(emotion_pattern, text)\n    \n    \ndef extract_emotion_category_keyword(text):\n    '''\n    Write a function to extract emotion categories from a string.\n    '''\n    keyword_emotion_pattern = r'(\\b\\w+\\b)'\n    return re.findall(keyword_emotion_pattern, text)\n    \n    \ndef get_emotion_category(text):\n    '''\n    Write a function to extract emotion categories from a string.\n    '''\n    return extract_emotion_category(text)[0]\n    \n    \ndef get_keyword_emotion(text):\n    '''\n    Write a function to extract keyword emotions from a string.\n    '''\n    return extract_keyword(text)[0]\n    \n    \ndef get_keyword_emotion_category(text):\n    '''\n    Write a function to extract keyword emotions from a string.\n    '''\n    return extract_emotion_category(text)[0]\n    \n    \ndef get_keyword_emotion_category_keyword(text):\n    '''\n    Write a function to extract keyword categories from a string.\n    '''\n    return extract_emotion_category_keyword(text)[0]\n    \n    \ndef remove_keyword(text):\n    '''\n    Write a function to remove keyword from a string.\n    '''\n    text = str(text)\n    return text.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace('\"', \"\").replace('(', \"\").replace(')', \"\").replace(\".\", \"\").replace(\".\", \"\")\n    \n    \ndef remove_emotion(text):\n    '''\n    Write a function to remove emotion from a string.\n    '''\n    text = str(text)\n    return text.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace('\"', \"\").replace('(', \"\").replace(')', \"\").replace(\".\", \"\").replace(\".\", \"\")\n    \n    \ndef remove_emotion_category(text):\n    '''\n    Write a function to remove emotion category from a string.\n    '''\n    text = str(text)\n    return text.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace('\"', \"\").replace('(', \"\").replace(')', \"\").replace(\".\", \"\").replace(\".\", \"\")\n    \n    \ndef remove_keyword_emotion_category(text):\n    '''\n    Write a function to remove keyword emotion category from a string.\n    '''\n    text = str(text)\n    return text.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace('\"', \"\").replace('(', \"\").replace(')', \"\").replace(\".\", \"\").replace(\".\", \"\")\n    \n    \ndef remove_emotion_category_keyword(text):\n    '''\n    Write a function to remove keyword emotion category from a string.\n    '''\n    text = str(text)\n    return text.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace('\"', \"\").replace('(', \"\").replace(')', \"\").replace(\".\", \"\").replace(\".\", \"\")\n    \n    \ndef remove_keyword_emotion_category_keyword(text):\n    '''\n    Write a function to remove keyword emotion category from a string.\n    '''\n    text = str(text)\n    return text.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace('\"', \"\").replace('(', \"\").replace(')', \"\").replace(\".\", \"\").replace(\".\", \"\")\n    \n    \ndef normalize(text):\n    '''\n    Write a function to normalize the string by replacing spaces with hyphens.\n    '''\n    text = str(text)\n    return text.replace(\" \", \"-\").replace(\"-\", \" \").replace(\".\", \"\").replace(\"(\", \"\").replace(\")\", \"\")\n    \n    \ndef normalize_keyword(text):\n    '''\n    Write a function to normalize the string by replacing spaces with hyphens.\n    '''\n    text = str(text)\n    return text.replace(\" \", \"-\").replace(\"-\", \" \").replace(\".\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\".\", \"\").replace(\"/\", \"\").replace(\"/\", \"\")\n    \n    \ndef normalize_emotion(text):\n    '''\n    Write a function to normalize the string by replacing spaces with hyphens.\n    '''\n    text = str(text)\n    return text.replace(\" \", \"-\").replace(\"-\", \" \").replace(\".\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\".\", \"\").replace(\"/\", \"\").replace(\"/\", \"\")\n    \n    \ndef normalize_emotion_category(text):\n    '''\n    Write a function to normalize the string by replacing spaces with hyphens.\n    '''\n    text = str(text)\n    return text.replace(\" \", \"-\").replace(\"-\", \" \").replace(\".\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\".\", \"\").replace(\"/\", \"\").replace(\"/\", \"\")\n    \n    \ndef normalize_emotion_category_keyword(text):\n    '''\n    Write a function to normalize the string by replacing spaces with hyphens.\n    '''\n    text = str(text)\n    return text.replace(\" \", \"-\").replace(\"-\", \" \").replace(\".\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\".\", \"\").replace(\"/\", \"\").replace(\"/\", \"\")\n    \n    \ndef normalize_emotion_category_keyword_emotion(text):\n    '''\n    Write a function to normalize the string by replacing spaces with hyphens.\n    '''\n    text = str(text)\n    return text.replace(\" \", \"-\").replace(\"-\", \" \").replace(\".\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\".\", \"\").replace(\"/\", \"\").replace(\"/\", \"\")\n    \n    \ndef normalize_emotion_category_keyword_emotion_category(text):\n    '''\n    Write a function to normalize the string by replacing spaces with hyphens.\n    '''\n    text = str(text)\n    return text.replace(\" \", \"-\").replace(\"-\", \" \").replace(\".\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\".\", \"\").replace(\"/\", \"\").replace(\"/\", \"\")\n    \n    \ndef normalize_emotion_category_keyword_emotion_category_keyword(text):\n    '''\n    Write a function to normalize the string by replacing spaces with hyphens.\n    '''\n    text = str(text)\n    return text.replace("
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', '\"')\n    text = text.replace(')', '(')\n    text = text.replace('(', '(')\n    text = text.replace('\\'', '\\'')\n    text = text.replace('\"', '\"')\n    text = text.replace(')', ')')\n    text = text.replace('(', '(')\n    text = text.replace('\\'', '\\'')\n    text = text.replace('\\\"', '\\\"')\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\t','')\n    text = text.replace('\\u0000','')\n    text = text.replace('\\u0085','')\n    text = text.replace('\\u2028','')\n    text = text.replace('\\u2029','')\n    text = text.replace('\\uFEFF','')\n    text = text.replace('\\u200B','')\n    text = text.replace('\\u00A0','')\n    text = text.replace('\\u200D','')\n    text = text.replace('\\u200C','')\n    text = text.replace('\\u200B','')\n    text = text.replace('\\u250C','')\n    text = text.replace('\\u4E00','')\n    text = text.replace('\\u4E01','')\n    text = text.replace('\\u4E02','')\n    text = text.replace('\\u4E03','')\n    text = text.replace('\\u4E04','')\n    text = text.replace('\\u4E05','')\n    text = text.replace('\\u4E0A','')\n    text = text.replace('\\u4E0B','')\n    text = text.replace('\\u4E0C','')\n    text = text.replace('\\u4E0D','')\n    text = text.replace('\\u4E0E','')\n    text = text.replace('\\u4E0F','')\n    text = text.replace('\\u4E10','')\n    text = text.replace('\\u4E11','')\n    text = text.replace('\\u4E12','')\n    text = text.replace('\\u4E13','')\n    text = text.replace('\\u4E14','')\n    text = text.replace('\\u4E15','')\n    text = text.replace('\\u4E16','')\n    text = text.replace('\\u4E17','')\n    text = text.replace('\\u4E18','')\n    text = text.replace('\\u4E19','')\n    text = text.replace('\\u4E1A','')\n    text = text.replace('\\u4E1B','')\n    text = text.replace('\\u4E1C','')\n    text = text.replace('\\u4E1D','')\n    text = text.replace('\\u4E1E','')\n    text = text.replace('\\u4E1F','')\n    text = text.replace('\\u4E20','')\n    text = text.replace('\\u4E21','')\n    text = text.replace('\\u4E22','')\n    text = text.replace('\\u4E23','')\n    text = text.replace('\\u4E24','')\n    text = text.replace('\\u4E25','')\n    text = text.replace('\\u4E26','')\n    text = text.replace('\\u4E27','')\n    text = text.replace('\\u4E28','')\n    text = text.replace('\\u4E29','')\n    text = text.replace('\\u4E2A','')\n    text = text.replace('\\u4E2B','')\n    text = text.replace('\\u4E2C','')\n    text = text.replace('\\u4E2D','')\n    text = text.replace('\\u4E2E','')\n    text = text.replace('\\u4E2F','')\n    text = text.replace('\\u4E30','')\n    text = text.replace('\\u4E31','')\n    text = text.replace('\\u4E32','')\n    text = text.replace('\\u4E33','')\n    text = text.replace('\\u4E34','')\n    text = text.replace('\\u4E35','')\n    text = text.replace('\\u4E36','')\n    text = text.replace('\\u4E37','')\n    text = text.replace('\\u4E38','')\n    text = text.replace('\\u4E39','')\n    text = text.replace('\\u4E3A','')\n    text = text.replace('\\u4E3B','')\n    text = text.replace('\\u4E3C','')\n    text = text.replace('\\u4E3D','')\n    text = text.replace('\\u4E3E','')\n    text = text.replace('\\u4E3F','')\n    text = text.replace('\\u4E40','')\n    text = text.replace('\\u4E41','')\n    text = text.replace('\\u4E42','')\n    text = text.replace('\\u4E43','')\n    text = text.replace('\\u4E44','')\n    text = text.replace('\\u4E45','')\n    text = text.replace('\\u4E46','')\n    text = text.replace('\\u4E47','')\n    text = text.replace('\\u4E48','')\n    text = text.replace('\\u4E49','')\n    text = text.replace('\\u4E4A','')\n    text = text.replace('\\u4E4B','')\n    text = text.replace('\\u4E4C','')\n    text = text.replace('\\u4E4D','')\n    text = text.replace('\\u4E4E','')\n    text = text.replace('\\u4E4F','')\n    text = text.replace('\\u4E50','')\n    text = text.replace('\\u4E51','')\n    text = text.replace('\\u4E52','')\n    text = text.replace('\\u4E53','')\n    text = text.replace('\\u4E54','')\n    text = text.replace('\\u4E55','')\n    text = text.replace('\\u4E56','')\n    text = text.replace('\\u4E57','')\n    text = text.replace('\\u4E58','')\n    text = text.replace('\\u4E59','')\n    text = text.replace('\\u4E5A','')\n    text = text.replace('\\u4E5B','')\n    text = text.replace('\\u4E5C','')\n    text = text.replace('\\u4E5D','')\n    text = text.replace('\\u4E5E','')\n    text = text.replace('\\u4E5F','')\n    text = text.replace('\\u4E60','')\n    text = text.replace('\\u4E61','')\n    text = text.replace('\\u4E62','')\n    text = text.replace('\\u4E63','')\n    text = text.replace('\\u4E64','')\n    text = text.replace('\\u4E65','')\n    text = text.replace('\\u4E66','')\n    text = text.replace('\\u4E67','')\n    text = text.replace('\\u4E68','')\n    text = text.replace('\\u4E69','')\n    tex"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values_list = []\n    for line in text.splitlines():\n        if line:\n            line = line.strip()\n            if line[0] == '\"':\n                line = line.replace('\"', '')\n                if line[-1] == '\"':\n                    line = line.replace('\"', '')\n                    line = line[:-1]\n            if line:\n                values_list.append(line.strip())\n    return values_list\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    extracted_values = []\n    for i, c in enumerate(text):\n        if c == '\"' or c == \"'\":\n            if text[i+1] == c:\n                extracted_values.append(text[i:i+2])\n                i = i + 2\n                break\n            else:\n                extracted_values.append(text[i])\n                i = i + 1\n    extracted_values.append(text[i:])\n    return extracted_values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    search_val = r'\\s+'\n    result = re.findall(search_val, text)\n    print(result)\n    "
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    d = {}\n    # the function replaces any character which starts with '\"' with an empty string\n    # this is used to remove the quotation marks\n    text = text.replace('\"', \"\")\n    # the function replaces the quotation mark with a space\n    text = text.replace('\\'', \" \")\n    # the function replaces all the special characters with the''\n    text = text.replace('[^\\w_]','')\n    # the function replaces the special characters with spaces\n    text = text.replace('[^\\w_]','')\n    text = text.lower()\n    text = text.replace('\\n','')\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\r', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\t', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\t', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\r', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\r', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\r', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\r', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\r', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\r', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\r', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\n', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\u00a0', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text = text.replace('\\r', \" \")\n    text = re.sub(r\"\\b(and)\\b\", \"and\", text)\n    text "
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    text = text.replace('\"','')\n    text = text.replace('(','')\n    text = text.replace(')','')\n    text = text.replace('{','')\n    text = text.replace('}','')\n    text = text.replace('[','')\n    text = text.replace(']','')\n    text = text.replace(\"'\",'')\n    for i in text:\n        if i == '\"' or i == '{' or i == '(' or i == ',':\n            values.append(i)\n    return values\ndef remove_duplicates(lst):\n    '''\n    Write a function to remove duplicate values from a list.\n    '''\n    res = []\n    for i in lst:\n        if i not in res:\n            res.append(i)\n    return res\ndef remove_symbols(lst):\n    '''\n    Write a function to remove special characters in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[^a-zA-Z0-9_\\-\\.]',i):\n            res.append(i)\n    return res\ndef remove_punctuation(lst):\n    '''\n    Write a function to remove punctuation in a list.\n    '''\n    res = []\n    for i in lst:\n        res.append(i.lower())\n    return res\ndef remove_numbers(lst):\n    '''\n    Write a function to remove numbers in a list.\n    '''\n    res = []\n    for i in lst:\n        if i!= '0':\n            res.append(i)\n    return res\ndef remove_digits(lst):\n    '''\n    Write a function to remove digits in a list.\n    '''\n    res = []\n    for i in lst:\n        if i!= '0':\n            res.append(i)\n    return res\ndef remove_case_sensitive(lst):\n    '''\n    Write a function to remove capital letters in a list.\n    '''\n    res = []\n    for i in lst:\n        if i!= '_':\n            res.append(i)\n    return res\ndef remove_special_characters(lst):\n    '''\n    Write a function to remove special characters in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[^a-zA-Z0-9_\\-\\.]',i):\n            res.append(i)\n    return res\ndef remove_special_characters(lst):\n    '''\n    Write a function to remove special characters in a list.\n    '''\n    res = []\n    for i in lst:\n        if i!= '_':\n            res.append(i)\n    return res\ndef remove_special_characters(lst):\n    '''\n    Write a function to remove special characters in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[^a-zA-Z0-9_\\-\\.]',i):\n            res.append(i)\n    return res\ndef remove_symbols(lst):\n    '''\n    Write a function to remove symbols in a list.\n    '''\n    res = []\n    for i in lst:\n        if i!='':\n            res.append(i)\n    return res\ndef remove_words(lst):\n    '''\n    Write a function to remove words in a list.\n    '''\n    res = []\n    for i in lst:\n        if i!='' and i!= '!' and i!= ',' and i!= '?' and i!= ';' and i!= ':' and i!= '.' and i!= '\"' and i!= '(' and i!= ')' and i!= '\"' and i!= '\\'':\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list.\n    '''\n    res = []\n    for i in lst:\n        if re.search('[0-9]',i):\n            res.append(i)\n    return res\ndef remove_number(lst):\n    '''\n    Write a function to remove number in a list"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\u201c', '')\n    text = text.replace('\u201d', '')\n    text = text.replace('\u2014', '')\n    text = text.replace('\u2018', '')\n    text = text.replace('\u2019', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.findall(r'\\'\\'\\w+\\'\\'\\w+',text)\n    values = list(set(match))\n    values = list(map(lambda x: x.replace('\"',''),values))\n    return values\ndef print_vals(values):\n    '''\n    Write a function to print the values.\n    '''\n    print(values)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Split the string by '\"'\n    sub_str = re.split('\"', text)\n    # Remove the whitespace\n    sub_str = [s.strip() for s in sub_str]\n    # Remove the quote\n    sub_str = [s.replace('\"', '') for s in sub_str]\n    # Remove the trailing \"\n    sub_str = [s.rstrip('\"') for s in sub_str]\n    # Remove the leading \"\n    sub_str = [s.lstrip('\"') for s in sub_str]\n    # Remove'or \"' from the end\n    sub_str = [s.strip('\"') for s in sub_str]\n    # Separate multiple values\n    sub_str = [s.split(',') for s in sub_str]\n    # Remove the empty strings\n    sub_str = [[s for s in sub_str if s] for sub_str in sub_str if sub_str]\n    # Remove empty strings\n    sub_str = [[s for s in sub_str if s] for sub_str in sub_str if sub_str]\n    # Remove empty values\n    sub_str = [[s for s in sub_str if s] for sub_str in sub_str if sub_str]\n    # Return the values\n    return [x for sublist in sub_str for x in sublist]\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs=0\n    if len(arr)<=2:\n        return 1\n    if n<3:\n        return len(arr)*(len(arr)-1)//2\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j] and i<j:\n                pairs+=1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                count+=1\n    print(\"Number of pairs is\",count)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    for i in range(1,n):\n        for j in range(1,n-i+1):\n            if arr[j] > arr[j+i]:\n                pairs+=1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    numbers = []\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                if arr[i] not in numbers and arr[j] not in numbers:\n                    count = count + 1\n                    numbers.append(arr[i])\n                    numbers.append(arr[j])\n                    \n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    num_of_unordered_pairs=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                num_of_unordered_pairs+=1\n    return num_of_unordered_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    n=len(arr)\n    unordered_pairs=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                unordered_pairs+=1\n    return unordered_pairs\n    \n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs_count = 0\n    pairs = set(arr)\n    for a in range(0,n):\n        for b in range(a+1,n):\n            if(arr[a] == arr[b]):\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import Counter\n    \n    # write your code here\n    count = 0\n    nums = list(map(int,str(n)))\n    n = Counter(nums)\n    for k,v in n.items():\n        if v%2==1:\n            count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Write your code here\n    arr.sort()\n    return n - len(set(arr))\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if (not arr):\n        return 0\n    count_all = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                count_all += 1\n    return count_all\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s=''\n    for i in range(len(word)):\n        if word[i].isdigit():\n            s+='-'\n        else:\n            s+=word[i]\n    return s\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return''.join(word.split())\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    for i in range(len(word)-1):\n        if word[i] == word[i+1]:\n            continue\n        else:\n            return word[i]+word[i+1]\n    return word+'$'\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    return [char for char in word]\n    \ndef join(word):\n    '''\n    Write a python function to join a list of strings into a single string.\n    '''\n    \n    return ''.join(word)\n    \ndef get_words_from_file(filename):\n    '''\n    Read a file and return a list of the words in that file.\n    '''\n    \n    with open(filename, 'r') as file:\n        return [line.strip() for line in file]\n    \ndef encrypt(plaintext, shift_amount):\n    '''\n    Encrypts a message using a Caesar Cipher.\n    \n    The Caesar Cipher is a simple substitution cipher.\n    The shift amount is the number of letters by which the message\n    should be shifted.\n    '''\n    \n    ciphertext = []\n    for letter in plaintext:\n        if letter!='':\n            ciphertext.append(ord(letter) + shift_amount)\n        else:\n            ciphertext.append(ord(letter) - shift_amount)\n    return ''.join(chr(x) for x in ciphertext)\n    \ndef decrypt(ciphertext, shift_amount):\n    '''\n    Decrypts a message using a Caesar Cipher.\n    \n    The shift amount is the number of letters by which the message\n    should be shifted.\n    '''\n    \n    plaintext = []\n    for letter in ciphertext:\n        if letter!='':\n            plaintext.append(chr(letter) - shift_amount)\n        else:\n            plaintext.append(ord(letter) + shift_amount)\n    return ''.join(chr(x) for x in plaintext)\n    \ndef file_to_str(filename):\n    '''\n    Read a file and convert it to a string.\n    '''\n    \n    with open(filename, 'r') as file:\n        return ''.join(file.readlines())\n    \ndef main():\n    '''\n    Main function for the Encryption and Decryption program.\n    '''\n    \n    filename = 'test.txt'\n    plaintext = 'Ola the quick brown fox jumps over the lazy dog.'\n    \n    # 1. Encrypt a string with a Caesar Cipher.\n    print('The Caesar Cipher:')\n    print(encrypt(plaintext, shift_amount=12))\n    \n    # 2. Decrypt a string with a Caesar Cipher.\n    print('The Caesar Cipher:')\n    print(decrypt(encrypt(plaintext, shift_amount=12), shift_amount=12))\n    \n    # 3. Read a file and convert it to a string.\n    print('The original text file:')\n    print(file_to_str(filename))\n    \n    # 4. Encrypt a file using a Caesar Cipher.\n    print('The Caesar Cipher:')\n    print(encrypt(file_to_str(filename), shift_amount=12))\n    \n    # 5. Decrypt a file using a Caesar Cipher.\n    print('The Caesar Cipher:')\n    print(decrypt(encrypt(file_to_str(filename), shift_amount=12), shift_amount=12))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    words = word.split()\n    return ''.join(words)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    characters = ''\n    for char in word:\n        characters = characters + char\n    return characters\n    \nprint(split(\"Nice try\"))\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    split = \"\"\n    for i in range(len(word)):\n        if word[i] == \" \":\n            split += \" \"\n        else:\n            split += word[i]\n    return split.lower().split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Handle negative numbers\n    if n < 0:\n        return sum_digits(n * -1)\n    # Handle single digits\n    return n\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum = sum + digit\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return sum_digits(n//10) + n%10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return sum_digits(-n)\n    sum = 0\n    while n:\n        digit = n % 10\n        sum = sum + digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"n must be an integer\")\n    elif not isinstance(n,int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    \n    answer = 0\n    while n:\n        answer += n % 10\n        n = n // 10\n    return answer\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    sum_dig = 0\n    while n > 0:\n        sum_dig += n % 10\n        n = n // 10\n    return sum_dig\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        print(\"Invalid number, must be non-negative\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_digits(n - 1)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == sorted(list1, key=lambda x: x[0])\n    \ndef main():\n    a = [1,4,5,7,9,10]\n    b = [1,3,5,9,15,20]\n    print(issort_list(a))\n    print(issort_list(b))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # write your logic here\n    sorted = True\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            sorted = False\n            break\n    return sorted\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Your code here\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check = True\n    i = 0\n    while i < len(list1) - 1:\n        if list1[i] > list1[i + 1]:\n            check = False\n        i += 1\n    return check\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif list1[0] == '.':\n        return False\n    elif list1[0] < list1[1]:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # your code goes here\n    if list1 == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    if length < 1:\n        return empty_list\n    elif length > 0:\n        for i in range(0, length):\n            empty_list.append({})\n        return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_empty_list = []\n    return my_empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dict_list = []\n    for i in range(length):\n        dict_list.append({})\n    return dict_list\n    \n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return list()\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_dictionaries = []\n    for i in range(length):\n        list_dictionaries.append({})\n    return list_dictionaries"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_empty = []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if(list1==[]):\n        return\n    \n    list1.sort(key=len)\n    i=0\n    for lista in list1:\n        for j in range(len(lista)):\n            if(j==0):\n                lista[j]=lista[j].lower()\n            if(lista[j]!=lista[j].lower()):\n                lista[j]=lista[j].capitalize()\n        i+=1\n        if(i==1):\n            list1.remove(lista)\n    \n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) == 0:\n        return []\n    temp = []\n    for sublist in list1:\n        if sublist!= []:\n            temp.append(sublist)\n    temp.sort(key=lambda x: x[0])\n    list2 = []\n    for sublist in temp:\n        list2.append(sublist[1])\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        new_list.append(sorted(sublist))\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_1=[]\n    list_2=[]\n    list_3=[]\n    for sublist in list1:\n        if sublist[0] not in list_1:\n            list_1.append(sublist[0])\n    for sublist in list1:\n        if sublist[0] not in list_2:\n            list_2.append(sublist[0])\n    for sublist in list1:\n        if sublist[0] not in list_3:\n            list_3.append(sublist[0])\n    list_1.sort()\n    list_2.sort()\n    list_3.sort()\n    return (list_1,list_2,list_3)\n        \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) <= 1:\n        return list1\n    \n    temp = []\n    for i in list1:\n        for j in i:\n            temp.append(j)\n    for i in range(len(temp)):\n        temp[i] = temp[i].lower()\n        temp[i] = temp[i].replace('.', '')\n        temp[i] = temp[i].replace(',', '')\n        temp[i] = temp[i].replace('-', '')\n        temp[i] = temp[i].replace('/', '')\n        temp[i] = temp[i].replace(' ', '')\n        temp[i] = temp[i].split()\n        temp[i] = sorted(temp[i])\n        temp[i] = ''.join(temp[i])\n    list1 = temp\n    return list1\n        \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # write your code here\n    new_list = []\n    for i in list1:\n        i.sort()\n        new_list.append(i)\n    return new_list\n    \ndef test_sort():\n    print(\"sort_sublists test:\")\n    l1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\n    l2 = ['a', 'c', 'e', 'd']\n    l3 = sort_sublists(l1)\n    print(\"l1:\", l1)\n    print(\"l2:\", l2)\n    print(\"l3:\", l3)\n    assert l1 == sorted(l1)\n    assert l2 == sorted(l2)\n    assert l3 == sorted(l3)\n    \ntest_sort("
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Create a helper function that sorts the sublists by their character\n    def sort(sublist):\n        #Check if there is a remainder of the sublist\n        if (sublist[0]==None):\n            return sublist\n        else:\n            #Find the index of the first element in the sublist\n            index = 0\n            for i in range(len(sublist)):\n                if sublist[i]==None:\n                    continue\n                else:\n                    index = i\n                    break\n            #Create a new sublist of the second element\n            sublist_2 = sublist[:index]\n            #Run the sort on the new sublist\n            sublist_2 = sorted(sublist_2)\n            #Return the new sublist\n            return sublist_2\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            temp = list1[i][j]\n            list1[i][j] = list1[i][j].rstrip('\\n')\n            list1[i][j] = list1[i][j].rstrip(' ')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('\\t', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replace('  ', '')\n            list1[i][j] = list1[i][j].rstrip(' ').replac"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] =='':\n                list1[i][j] =''\n            elif list1[i][j] == '*':\n                list1[i][j] = '*'\n            elif list1[i][j] == '%':\n                list1[i][j] = '%'\n            elif list1[i][j] == '+':\n                list1[i][j] = '+'\n            elif list1[i][j] == '-':\n                list1[i][j] = '-'\n            elif list1[i][j] == '*':\n                list1[i][j] = '*'\n            elif list1[i][j] == '%':\n                list1[i][j] = '%'\n            elif list1[i][j] == '+':\n                list1[i][j] = '+'\n            elif list1[i][j] == '-':\n                list1[i][j] = '-'\n            elif list1[i][j] == '-':\n                list1[i][j] = '-'\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    removed_nums = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            removed_nums.append(num)\n    return removed_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return [i for i, x in enumerate(nums) if x not in nums[i+1:]]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    uniq = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            uniq.append(num)\n    return uniq\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    #Create empty set to store unique numbers\n    unique_numbers = set(nums)\n    \n    #Loop through all numbers in nums and check if they are in unique_numbers\n    for num in nums:\n        if num in unique_numbers:\n            #If they are in the set, remove them\n            unique_numbers.remove(num)\n            \n    return unique_numbers"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for item in nums:\n        if item not in result:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # How to get unique items and see if there are duplicates\n    # One way to use a set is to use a dictionary\n    # Next we check for the list has any duplicate\n    # We do a set to convert the list to a set, and remove the duplicate numbers\n    # But we have to sort the list again\n    # After we get the list back, we sort it to remove any duplicates\n    # So we compare the number and list to see if it has any duplicates\n    # It will return true if there are duplicates and return false if not\n    # Set to keep track of the index of the unique item in the original list\n    # This means we sort the list twice to keep track of the first unique item\n    # Remember to do an if else statement to see if we have any duplicate items\n    # By setting the same element to the first index of the list, we avoid\n    # the same element, which would lead to infinite loop\n    # Set to zero, and start at 0\n    seen_nums = set()\n    # Start at 1 because we want to remove the first element of the list\n    # If the number is not in the seen set, add it to the seen set\n    index = 1\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    tup = []\n    for i in nums:\n        if i not in tup:\n            tup.append(i)\n    return tup\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #Remove duplicate numbers\n    nums = list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    # create a new list to store unique numbers\n    unique_nums = []\n    # iterate through each element in the nums list\n    for i in range(len(nums)):\n        # create a new list to store the duplicates\n        numbers_list = []\n        # iterate through each element in the list\n        for j in range(len(nums)):\n            if nums[i]!= nums[j]:\n                # add the element to the new list\n                numbers_list.append(nums[j])\n        # append the new list to the unique_nums list\n        unique_nums.append(numbers_list)\n    # return the unique_nums list\n    return unique_nums\n    \nprint(two_unique_nums([2, 2, 2, 1, 1, 1, 1, 2, 3, 3])"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = []\n    for i in list_data:\n        if i not in unique:\n            unique.append(i)\n    return len(unique)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = []\n    for i in range(len(list_data)):\n        for j in range(len(list_data)):\n            if i!= j:\n                if list_data[i] == list_data[j]:\n                    product = list_data[i]*list_data[j]\n                    unique_product.append(product)\n    return(unique_product)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    data_set = set(list_data)\n    return len(data_set)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict = {}\n    for i in list_data:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    list_keys = dict.keys()\n    print(f'The list of unique numbers is: {list_keys}')\n    print(f'The numbers in the list are: {dict}')\n    return sum(dict.values())\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    final_data = {}\n    for data in list_data:\n        value = data[1]\n        value = value * data[0]\n        final_data.update({value:data})\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_list = []\n    for element in list_data:\n        product_list.append(element)\n    product_list.sort()\n    for element in product_list:\n        if product_list.count(element) == 1:\n            return element*int(product_list.count(element))\n    return None"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_number=[]\n    for i in list_data:\n        if i not in unique_number:\n            unique_number.append(i)\n    return len(unique_number)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    lst = []\n    for i in range(len(list_data)):\n        lst.append(list_data[i])\n    return lst\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    count = 1\n    for number in list_data:\n        count = count * number\n    return count\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # STEP 1: Calculate product\n    product = 1\n    for item in list_data:\n        product *= item\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Define a function that calculates the surface area\n    def surfacearea(r,h):\n        return (4/3)*np.pi*r*h\n    # Get the parameter values\n    r = r\n    h = h\n    # Call the function\n    area = surfacearea(r,h)\n    # Return the calculated surface area\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*(pi*r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return (4*math.pi*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3) * np.pi * (r**3) * h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface = 2 * (r ** 2) * h\n    return surface\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 3.14 * r * h\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*h*np.pi*r\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=0\n    for i in range(r):\n        s+=2*h*i**2\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    A = (2*r*h)/3\n    return A\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return len(A) > len(B) and all(A[i] == B[i] for i in range(len(A)))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(elem in A for elem in B)\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(A)!= list or type(B)!= list:\n        return False\n    for i in range(len(A)):\n        if not A[i] in B:\n            return False\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    list1 = A \n    list2 = B \n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Write your code here\n    count = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            count = count + 1\n    return count == 0\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) == len(A):\n        return False\n    for i in range(0,len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(A)==0):\n        return False\n    for i in range(len(A)):\n        if(B[i] not in A):\n            return False\n    return True\n    \ndef solution(A, B):\n    answer = []\n    if(len(A)==0):\n        return []\n    for i in range(len(A)):\n        if(is_Sub_Array(A[0:i],B[0:i])):\n            answer.append(A[i])\n            answer.append(B[i])\n    answer = sorted(answer)\n    answer.reverse()\n    return answer\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Your code here\n    return B in A\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0: return 0\n    else: return int(n % 10 ** 9)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Your code here\n    i=1\n    while (n>0):\n        n=n//10\n        i+=1\n    return(i)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n==0): return 0\n    if (n==1): return 1\n    if (n==2): return 2\n    if (n==3): return 3\n    if (n%10==0): return last_Digit_Factorial(n//10)\n    else: return last_Digit_Factorial(n//10) * 10**(n%10)\n    \ndef last_Digit_Factorial_Recursive(n,dp=[]):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    The recursive function in this case is what it looks like.\n    '''\n    if (n==0): return 0\n    if (n==1): return 1\n    if (n==2): return 2\n    if (n==3): return 3\n    if (n%10==0): return last_Digit_Factorial_Recursive(n//10,dp)\n    else: return last_Digit_Factorial_Recursive(n//10,dp+[n%10])\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    digits = []\n    digits.append(0)\n    for i in range(n,0,-1):\n        num = 1\n        for j in range(i-1,-1,-1):\n            num *= i\n            digits.append(num)\n    return digits[-1]\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    assert n >= 0, \"Number must be positive\"\n    f = 0\n    while n > 1:\n        f = f + 1\n        n = n / f\n    return f\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n % 10 + last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial_list = [1] * n\n    for i in range(1, n):\n        factorial_list[i] = factorial_list[i - 1] * i\n    return factorial_list[n - 1]\n    \ndef last_Digit_Triangle(n): \n    '''\n    Write a python function to find the last digit in triangle number n.\n    '''\n    triangle_list = [1] * n\n    for i in range(1, n):\n        triangle_list[i] = triangle_list[i - 1] + triangle_list[i - 2]\n    return triangle_list[n - 1]\n    \ndef last_Digit_Euclidean(n):\n    '''\n    Write a python function to find the last digit in Euclidean distance between two numbers.\n    '''\n    if n == 0:\n        return 0\n    return n ** 0.5\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result = i*result\n    return result\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return n % 10 + last_Digit_Factorial(n / 10)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return -1\n    else:\n        return list1 + list3 + list2\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == 1 and len(list2) == 1 and len(list3) == 1:\n        return list1[0] + list2[0] + list3[0]\n    elif len(list1) == 1 and len(list2)!= 1 and len(list3) == 1:\n        return list1[0] + list3[0]\n    elif len(list1) == 1 and len(list2)!= 1 and len(list3)!= 1:\n        return list1[0] + list2[0] + list3[0]\n    elif len(list1)!= 1 and len(list2)!= 1 and len(list3)!= 1:\n        return list1[0] + list2[0] + list3[0]\n    else:\n        return list1[0] + list2[0] + list3[0]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # your code goes here\n    l1=[]\n    l2=[]\n    l3=[]\n    for i in range(len(list1)):\n        l1.append(list1[i])\n    for j in range(len(list2)):\n        l2.append(list2[j])\n    for k in range(len(list3)):\n        l3.append(list3[k])\n    return l1+l2+l3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_1 = list1\n    list_2 = list2\n    list_3 = list3\n    while (len(list_1)>0 and len(list_2)>0 and len(list_3)>0):\n        list_1 = list_1[1:] + list_1[0]\n        list_2 = list_2[1:] + list_2[0]\n        list_3 = list_3[1:] + list_3[0]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # List creation\n    list_of_interleaved = []\n    \n    # Loop through the three lists\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            \n            # Append the elements to the list\n            list_of_interleaved.append(list1[i] + list2[j] + list3[i+j])\n    \n    # Return the list\n    return list_of_interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n    \nif __name__ == \"__main__\":\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TEST-------\")\n    l1 = [\"a\",\"b\",\"c\"]\n    l2 = [\"d\",\"e\",\"f\"]\n    l3 = [\"g\",\"h\",\"i\"]\n    print(l1,l2,l3)\n    print(interleave_lists(l1,l2,l3))\n    print()\n    print(\"-------TES"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    n=len(list1)\n    list=[]\n    i=0\n    j=0\n    while(i<n and j<n):\n        list.append(list1[i]+list2[j]+list3[j])\n        i+=1\n        j+=1\n    return list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        print(\"These lists have different lengths. Please check your inputs.\")\n    else:\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i])\n            result.append(list3[i])\n        return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # write your code here\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    result = list1 + list2 + list3\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return test_tup1, test_tup2\n    else:\n        return None, None\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup3 = tuple()\n    for element in test_tup1:\n        if element not in test_tup2:\n            test_tup3 = test_tup3 + (element,)\n    return test_tup3\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # First, find the dissimilar elements\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            dissimilar.append(test_tup1[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(test_tup1) and j < len(test_tup2):\n        \n        if test_tup1[i] < test_tup2[j]:\n            \n            i += 1\n        \n        elif test_tup1[i] > test_tup2[j]:\n            \n            j += 1\n        \n        else:\n            \n            i += 1\n            j += 1\n            k += 1\n    \n    return test_tup1[i:k] + test_tup2[j:k]\n    \ntest_tup1 = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\ntest_tup2 = ('a', 'b', 'd', 'e', 'f', 'g', 'h', 'i')\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # [0,1,2,3]\n    test_set1 = {0,1,2,3}\n    # [4,5,6]\n    test_set2 = {4,5,6}\n    # [7,8,9]\n    test_set3 = {7,8,9}\n    # [0,2,3]\n    test_set4 = {0,2,3}\n    # [2,4,5]\n    test_set5 = {2,4,5}\n    # [6]\n    test_set6 = {6}\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    d = {}\n    for x in test_tup1:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    for x in test_tup2:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    \n    return d\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = set(test_tup1)\n    b = set(test_tup2)\n    return a - b\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize result\n    result = set()\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list_of_dissimilar = []\n    # List the tuples \n    list_of_tuples = list(zip(test_tup1, test_tup2))\n    # Iterate through the list of tuples\n    for element in list_of_tuples:\n        # If the element is not in the list of tuples\n        if element not in list_of_tuples:\n            # Add the element to the list\n            list_of_dissimilar.append(element)\n    # Return the list of dissimilar elements\n    return list_of_dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup3 = (test_tup1[1], test_tup2[1])\n    test_tup4 = (test_tup2[1], test_tup3[1])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_nested = test_tuple[0]\n    test_tuple = test_tuple[1:]\n    even_nested = even_nested[even_fnc(even_nested, test_tuple)]\n    test_tuple.append(even_nested)\n    return test_tuple\n    \ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to remove odd elements in the nested mixed tuple.\n    '''\n    odd_nested = test_tuple[0]\n    test_tuple = test_tuple[1:]\n    odd_nested = odd_nested[odd_fnc(odd_nested, test_tuple)]\n    test_tuple.append(odd_nested)\n    return test_tuple\n    \ndef mixed(test_tuple):\n    '''\n    Write a function to combine the nested mixed tuple.\n    '''\n    if len(test_tuple[0]) == 0:\n        return test_tuple[1:]\n    else:\n        return test_tuple[0] + mixed(test_tuple[1:])\n    \ndef tuples(test_tuple):\n    '''\n    Write a function to concatenate the nested mixed tuple.\n    '''\n    result = []\n    result.append(test_tuple[0])\n    result = result + tuples(test_tuple[1:])\n    return result\n    \ndef sequence(test_tuple):\n    '''\n    Write a function to create a sequence from the nested mixed tuple.\n    '''\n    result = []\n    result.append(test_tuple[0])\n    result = result + sequence(test_tuple[1:])\n    return result\n    \ndef dict_tuple(test_dict, even_fnc):\n    '''\n    Write a function to create a tuple of dictionaries.\n    '''\n    result = []\n    result.append(test_dict)\n    result = result + dict_tuple(test_dict, even_fnc)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_count = 0\n    even_list = []\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple, odd_tuple = test_tuple\n    even_fnc(even_tuple, odd_tuple)\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple, odd_tuple = test_tuple\n    odd_fnc(odd_tuple, even_tuple)\n    \ndef test_even_ele(test_tuple): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple, odd_tuple = test_tuple\n    return even_ele(even_tuple, odd_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    even_list = []\n    odd_tuple = test_tuple[1]\n    odd_list = []\n    for item in even_tuple:\n        if item % 2!= 0:\n            even_list.append(item)\n    for item in odd_tuple:\n        if item % 2!= 0:\n            odd_list.append(item)\n    even_tuple = even_list[::2] + odd_list[1::2]\n    odd_tuple = odd_list[::2] + even_list[1::2]\n    return even_tuple, odd_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_index = 0\n    for index, (key, val) in enumerate(test_tuple):\n        if even_fnc(val):\n            even_index = index\n            break\n    \n    for index, (key, val) in enumerate(test_tuple):\n        if not even_fnc(val):\n            del test_tuple[index:index+1]\n            break\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even = list(test_tuple) \n    even.sort() \n    odd = even[1:]\n    even.pop(0) \n    odd = even[::-1]\n    return odd + even \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = list(test_tuple) \n    \n    if even_fnc == 'odd':\n        if len(even_list) % 2 == 0: \n            for i in range(len(even_list)//2): \n                even_list.remove(even_list[i])\n        else:\n            for i in range(len(even_list)//2, len(even_list)): \n                even_list.remove(even_list[i])\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple[0], test_tuple[1])\n    return test_tuple[0], test_tuple[1]\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_dict = {}\n    nested_list = []\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def odd_ele(tuple): \n        '''\n        Write a function that takes a tuple and returns the tuple with all even elements removed.\n        '''\n        odd_even_tuple = ()\n        for i in range(len(tuple)): \n            if i % 2 == 0: \n                odd_even_tuple += tuple[i] \n        return odd_even_tuple \n    even_tuple = even_fnc(test_tuple) \n    odd_tuple = odd_ele(even_tuple) \n    return odd_tuple\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # find area of base edge\n    area = (b *(s/4)) - (b * (s/4))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s.append(s.pop())\n    return (3/2)*((b*s[-1])+(s[-1]*s[-1]))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # your code goes here\n    if b==0 and s==0:\n        return 0\n    elif b==0 and s!=0:\n        return b*s\n    elif s==0:\n        return b**2\n    else:\n        return (b*s*s)+(b*s**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Your code here\n    #Base edge\n    #Height\n    print(\"Base edge = \", b)\n    #Height\n    print(\"Height = \", h)\n    #Height\n    print(\"Surface area = \", s*(h**2))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Write your code here\n    print(b)\n    print(s)\n    #Height of the pyramid\n    Height = int(((b**2)/(s**2)) + 1)\n    #Height of the pyramid\n    print(Height)\n    #Area of each sides\n    Area = (Height*(s**2))\n    print(Area)\n    #Area of pyramid \n    print(Area)\n    return Area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 1/4 * b * s * (1 + (1-s)**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    \ndef surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return base*height\n    \ndef surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*height)**2\n    \ndef surface_Area(b, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print (\"The area of the square pyramid is: \",end=\"\")\n    print (b*s)\n    print (\"\\n\")\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sum = 0\n    for i in range(b):\n        for j in range(s):\n            sum = sum + (s-j)*(s-i)*b\n    return sum\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) > 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)!= 0:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) > 0:\n        print('dict is not empty')\n    else:\n        print('dict is empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # Check if empty\n    if len(dict1) == 0:\n        return True\n    # If not empty, check keys\n    else:\n        # Checking all keys in dict\n        for key in dict1:\n            # Checking if key is in dict\n            if key in dict1:\n                # If key is in dict, check if empty\n                if not dict1[key]:\n                    return False\n            # If key is not in dict, return false\n            else:\n                return False\n    # If dictionary is empty, return True\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return all(x for x in dict1.values())\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \nprint(my_dict({}))\nprint(my_dict({'a':'b','c':'d','a':'c'}))\nprint(my_dict({}))\nprint(my_dict([3,2,1]))\nprint(my_dict({}))\nprint(my_dict({'a':'b','c':'d'}))\nprint(my_dict({}))\nprint(my_dict({'a':'b','c':'d','c':'c'}))"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # create a list of the keys\n    keys = list(dict1.keys())\n    # loop through the keys\n    for i in keys:\n        # check if the key is a special word\n        if i =='special_words':\n            # check if the value is empty\n            if dict1[i] == '':\n                # return True\n                return True\n    # if it is not empty\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    num += 1\n    return catalan(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = []\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    total = 0\n    for i in range(0, num + 1):\n        total = total + (i + 1)\n    return total\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # handle negative\n    if num < 0:\n        raise ValueError('n must be >= 0')\n    # handle special cases\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 0\n    elif num == 2:\n        return 1\n    elif num == 3:\n        return 6\n    elif num == 4:\n        return 24\n    elif num == 5:\n        return 60\n    elif num == 6:\n        return 720\n    elif num == 7:\n        return 3200\n    elif num == 8:\n        return 3600\n    elif num == 9:\n        return 3600 * 2\n    elif num == 10:\n        return 3600 * 3\n    elif num == 11:\n        return 3600 * 4\n    elif num == 12:\n        return 3600 * 5\n    elif num == 13:\n        return 3600 * 6\n    elif num == 14:\n        return 3600 * 7\n    elif num == 15:\n        return 3600 * 8\n    elif num == 16:\n        return 3600 * 9\n    elif num == 17:\n        return 3600 * 10\n    elif num == 18:\n        return 3600 * 11\n    elif num == 19:\n        return 3600 * 12\n    elif num == 20:\n        return 3600 * 13\n    elif num == 21:\n        return 3600 * 14\n    elif num == 22:\n        return 3600 * 15\n    elif num == 23:\n        return 3600 * 16\n    elif num == 24:\n        return 3600 * 17\n    elif num == 25:\n        return 3600 * 18\n    elif num == 26:\n        return 3600 * 19\n    elif num == 27:\n        return 3600 * 20\n    elif num == 28:\n        return 3600 * 21\n    elif num == 29:\n        return 3600 * 22\n    elif num == 30:\n        return 3600 * 23\n    elif num == 31:\n        return 3600 * 24\n    elif num == 32:\n        return 3600 * 25\n    elif num == 33:\n        return 3600 * 26\n    elif num == 34:\n        return 3600 * 27\n    elif num == 35:\n        return 3600 * 28\n    elif num == 36:\n        return 3600 * 29\n    elif num == 37:\n        return 3600 * 30\n    elif num == 38:\n        return 3600 * 31\n    elif num == 39:\n        return 3600 * 32\n    elif num == 40:\n        return 3600 * 33\n    elif num == 41:\n        return 3600 * 34\n    elif num == 42:\n        return 3600 * 35\n    elif num == 43:\n        return 3600 * 36\n    elif num == 44:\n        return 3600 * 37\n    elif num == 45:\n        return 3600 * 38\n    elif num == 46:\n        return 3600 * 39\n    elif num == 47:\n        return 3600 * 40\n    elif num == 48:\n        return 3600 * 41\n    elif num == 49:\n        return 3600 * 42\n    elif num == 50:\n        return 3600 * 43\n    elif num == 51:\n        return 3600 * 44\n    elif num == 52:\n        return 3600 * 45\n    elif num == 53:\n        return 3600 * 46\n    elif num == 54:\n        return 3600 * 47\n    elif num == 55:\n        return 3600 * 48\n    elif num == 56:\n        return 3600 * 49\n    elif num == 57:\n        return 3600 * 50\n    elif num == 58:\n        return 3600 * 51\n    elif num == 59:\n        return 3600 * 52\n    elif num == 60:\n        return 3600 * 53\n    elif num == 61:\n        return 3600 * 54\n    elif num == 62:\n        return 3600 * 55\n    elif num == 63:\n        return 3600 * 56\n    elif num == 64:\n        return 3600 * 57\n    elif num == 65:\n        return 3600 * 58\n    elif num == 66:\n        return 3600 * 59\n    elif num == 67:\n        return 3600 * 60\n    elif num == 68:\n        return 3600 * 61\n    elif num == 69:\n        return 3600 * 62\n    elif num == 70:\n        return 3600 * 63\n    elif num == 71:\n        return 3600 * 64\n    elif num == 72:\n        return 3600 * 65\n    elif num == 73:\n        return 3600 * 66\n    elif num == 74:\n        return 3600 * 67\n    elif num == 75:\n        return 3600 * 68\n    elif num == 76:\n        return 3600 * 69\n    elif num == 77:\n        return 3600 * 70\n    elif num == 78:\n        return 3600 * 71\n    elif num == 79:\n        return 3600 * 72\n    elif num == 80:\n        return 3600 * 73\n    elif num == 81:\n        return 3600 * 74\n    elif num == 82:\n        return 3600 * 75\n    elif num == 83:\n        return 3600 * 76\n    elif num == 84:\n        return 3600 * 77\n    elif num == 85:\n        return 3600 * 78\n    elif num == 86:\n        return 3600 * 79\n    elif num == 87:\n        return 3600 * 80\n    elif num == 88:\n        return 3600 * 81\n    elif num == 89:\n        return 3600 * 82\n    elif num == 90:\n        return 3600 * 83\n    elif num == 91:\n        return 3600 * 84\n    elif num == 92:\n        return 3600 * 85\n    elif num == 93:\n        return 3600 * 86\n    elif num == 94:\n        return 3600 * 87\n    elif num == 95:\n        return 3600 * 88\n    elif num == 96:\n        return 3600 * 89\n    elif num == 97:\n        return 3600 * 90\n    elif num == 98:\n        return 3600 * 91\n    elif num == 99:\n        return 3600 * 92\n    elif num == 100:\n        return 3600 * 93\n    elif num == 101:\n        return 3600 * 94\n    elif num == 102:\n        return 3600 * 95\n    elif num == 103:\n        return 3600 * 96\n    elif num == 104:\n        return 3600 * 97\n    elif num == 105:\n        return 3600 * 98\n    elif num == 106:\n        return 3600 * 99\n    elif num == 107:\n        return 3600 * 100\n    elif num == 108:\n        return 3600 * 101\n    elif num == 109:\n        return 3600 * 102\n    elif num == 110:\n        return 3600 * 103\n    elif num == 111:\n        return 3600 * 104\n    elif num == 112:\n        return 3600 * 105\n    elif num == 113:\n        return 3600 * 106\n    elif num == 114:\n        return 3600 * 107\n    elif num == 115:\n        return 3600 * 108\n    elif num == 116:\n        return 3600 * 109\n    elif num == 117:\n        return 3600 * 110\n    elif num == 118:\n        return 3600 * 111\n    elif num == 119:\n        return 3600 * 112\n    elif num == 120:\n        return 3600 * 113\n    elif num == 121:\n        return 3600 * 114\n    elif num == 122:\n        return 3600 * 115\n    elif num == 123:\n        return 3600 * 116\n    elif num == 124:\n        return 3600 * 117\n    elif num == 125:\n        return 3600 * 118\n    elif num == 126:\n        return 3600 * 119\n    elif num == 127:\n        return 3600 * 120\n    elif num == 128:\n        return 3600 * 121\n    elif num == 129:\n        return 3600 * 122\n    elif num == 130:\n        return 3600 * 123\n    elif num == 131:\n        return 3600 * 124\n    elif num == 132:\n        return 3600 * 125\n    elif num == 133:\n        return 3600 * 126\n    elif nu"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    a = 0\n    b = 1\n    c = 2\n    for i in range(num):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 2\n    else:\n        return catalan_number(num-1)+catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    if num <= 5:\n        return 2\n    if num == 6:\n        return 3\n    else:\n        return num*catalan_number(num-2)\n    \ndef is_prime(num):\n    '''\n    Returns boolean value which is True if number is prime\n    and False if not prime.\n    '''\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, num, 6):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_prime_alt(num):\n    '''\n    Returns boolean value which is True if number is prime\n    and False if not prime.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num == 4:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef find_prime_list(n, prime_list):\n    '''\n    Given list of integers and a number, returns \n    list of prime numbers which have the given number as value.\n    '''\n    if n == 2:\n        prime_list.append(2)\n        return prime_list\n    elif n == 3:\n        prime_list.append(3)\n        return prime_list\n    elif is_prime_alt(n):\n        prime_list.append(n)\n        return find_prime_list(n-1, prime_list)\n    else:\n        return find_prime_list(n-1, prime_list) + find_prime_list(n-2, prime_list)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile('(ly|ly|ly(?!(ly|ly|ly))|ly)')\n    matched = pattern.search(text)\n    if matched is None:\n        return None\n    adverbs = matched.group(1)\n    adverbs = re.findall(r'(ly|ly|ly(?!(ly|ly|ly))|ly)', text)\n    adverbs = [x for x in adverbs if x!= '']\n    adverbs = [adverb for adverb in adverbs if 'ly' not in adverb]\n    if len(adverbs) > 0:\n        adverb_position = [text.index(x) for x in adverbs if x!= '']\n        adverb_position = adverb_position[0]\n        if len(adverb_position) >= 2:\n            adverb_position = adverb_position + 1\n            adverb = adverbs[adverb_position]\n            adverb = adverb.replace('ly', '').strip()\n            adverb = adverb.strip()\n            return adverb\n    else:\n        adverb = None\n        return adverb\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    adverb_position = 0\n    is_adverb = False\n    match = re.search('ly(.*)$', text)\n    if match:\n        is_adverb = True\n        adverb_position = match.start()\n    if is_adverb:\n        adverbs.append(text[adverb_position:])\n    for i in range(len(adverbs)):\n        adverbs[i] = re.sub('ly\\\\b','',adverbs[i])\n    return adverbs\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adverb ending with mn and its positions in a given string.\n    '''\n    adjectives = []\n    adverb_position = 0\n    is_adverb = False\n    match = re.search('mn(.*)$', text)\n    if match:\n        is_adverb = True\n        adverb_position = match.start()\n    if is_adverb:\n        adjectives.append(text[adverb_position:])\n    for i in range(len(adjectives)):\n        adjectives[i] = re.sub('mn\\\\b','',adjectives[i])\n    return adjectives\ndef find_determiners(text):\n    '''\n    Write a function to find the first adverb ending with a noun and its positions in a given string.\n    '''\n    determiners = []\n    determiner_position = 0\n    is_determiner = False\n    match = re.search('noun(.*)$', text)\n    if match:\n        is_determiner = True\n        determiner_position = match.start()\n    if is_determiner:\n        determiners.append(text[determiner_position:])\n    for i in range(len(determiners)):\n        determiners[i] = re.sub('noun\\\\b','',determiners[i])\n    return determiners\ndef find_pronouns(text):\n    '''\n    Write a function to find the first adverb ending with a pronoun and its positions in a given string.\n    '''\n    pronouns = []\n    pronoun_position = 0\n    is_pronoun = False\n    match = re.search('pronoun(.*)$', text)\n    if match:\n        is_pronoun = True\n        pronoun_position = match.start()\n    if is_pronoun:\n        pronouns.append(text[pronoun_position:])\n    for i in range(len(pronouns)):\n        pronouns[i] = re.sub('pronoun\\\\b','',pronouns[i])\n    return pronouns\ndef find_constituents(text):\n    '''\n    Write a function to find the first adverb ending with a noun and its positions in a given string.\n    '''\n    constituents = []\n    constituent_position = 0\n    is_constituent = False\n    match = re.search('noun(.*)$', text)\n    if match:\n        is_constituent = True\n        constituent_position = match.start()\n    if is_constituent:\n        constituents.append(text[constituent_position:])\n    for i in range(len(constituents)):\n        constituents[i] = re.sub('noun\\\\b','',constituents[i])\n    return constituents\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    adverb_position = 0\n    is_adverb = False\n    match = re.search('ly(.*)$', text)\n    if match:\n        is_adverb = True\n        adverb_position = match.start()\n    if is_adverb:\n        adverbs.append(text[adverb_position:])\n    for i in range(len(adverbs)):\n        adverbs[i] = re.sub('ly\\\\b','',adverbs[i])\n    return adverbs\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adverb ending with mn and its positions in a given string.\n    '''\n    adjectives = []\n    adverb_position = 0\n    is_adverb = False\n    match = re.search('mn(.*)$', text)\n    if match:\n        is_adverb = True\n        adverb_position = match.start()\n    if is_adverb:\n        adjectives.append(text[adverb_position:])\n    for i in range(len(adjectives)):\n        adjectives[i] = re.sub('mn\\\\b','',adjectives[i])\n    return adjectives\ndef find_determiners(text):\n    '''\n    Write a function to find the first adverb ending with a noun and its positions in a given string.\n    '''\n    determiners = []\n    determiner_position = 0\n    is_determiner = False\n    match = re.search('noun(.*)$', text)\n    if match:\n        is_determiner = True\n        determiner_position = match.start()\n    if is_determiner:\n        determiners.append(text[determiner_position:])\n    for i in range(len(determiners)):\n        determiners[i] = re.sub('noun\\\\b','',determiners[i])\n    return determiners\ndef find_pronouns(text):\n    '''\n    Write a function to find the first adverb ending with a pronoun and its positions in a given string.\n    '''\n    pronouns = []\n    pronoun_position = 0\n    is_pronoun = False\n    match = re.search('pronoun(.*)$', text)\n    if match:\n        is_pronoun = True\n        pronoun_position = match.start()\n    if is_pronoun:\n        pronouns.append(text[pronoun_position:])\n    for i in range(len(pronouns)):\n        pronouns[i] = re.sub('pronoun\\\\b','',pronouns[i])\n    return pronouns\ndef find_constituents(text):\n    '''\n    Write a function to find the first adverb ending with a noun and its positions in a given string.\n    '''\n    constituents = []\n    constituent_position = 0\n    is_constituent = False\n    match = re.search('noun(.*)$', text)\n    if match:\n        is_constituent = True\n        constituent_position = match.start()\n    if is_constituent:\n        constituents.append(text[constituent_position:])\n    for i in range(len(constituents)):\n        constituents[i] = re.sub('noun\\\\b','',constituents[i])\n    return constituents\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    adverb_position = 0\n    is_adverb = False\n    match = re.search('ly(.*)$', text)\n    if match:\n        is_adverb = True\n        adverb_position = match.start()\n    if is_adverb:\n        adverbs.append(text[adverb_position:])\n    for i in range(len(adverbs)):\n        adverbs[i] = re.sub('ly\\\\b','',adverbs[i])\n    return adverbs\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adverb ending with mn and its positions in a given string.\n    '''\n    adjectives = []\n    adverb_position = 0\n    is_adverb = False\n    match = re.search('mn(.*)$', text)\n    if match:\n        is_adverb = True\n        adverb_position = match.start()\n    if is_adverb:\n        adjectives.append(text[adverb_position:])\n    for i in range(len(adjectives)):\n        adjectives[i] = re.su"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    def get_adverb(text):\n        adverbs = ['favor','satisfy', 'enjoy','suffer', 'quote', 'prefer', 'agree','recover', 'convert', 'friend', 'transit', 'day','maintain','school', 'perform', 'feed', 'decide', 'enjoy','suffer', 'quot','remember','meet', 'jump', 'always', 'decide','submit','read','subscribe','receive', 'look','receive', 'look', 'look','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','receive','r"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    _adverbs = ['ly', 'ly','s','m', 't', 'g', 'd', 'x', 'k', 'b', 'c', 'v', 'r', 'x']\n    adverbs = []\n    pattern = r'(ly|ly|d|lyd|lye|ly\\d|s|m|m\\d|t|g|g\\d|d|x|k|b|c|v|r|x)'\n    index = 0\n    while index < len(text):\n        if text[index:index+len(pattern)] in _adverbs:\n            adverbs.append(text[index:index+len(pattern)])\n            index += len(pattern)\n        else:\n            index += 1\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \"y\" and i!=0 and i!=len(text)-1:\n            if text[i+1] == \"y\" and i+1!=len(text)-1:\n                if text[i-1] == \"l\" and i-1!=0:\n                    new_text += text[i-1]+text[i]+text[i+1]+text[i-1]\n                elif text[i-1] == \"c\" and i-1!=0:\n                    new_text += text[i-1]+text[i]+text[i+1]\n                elif text[i-1] == \"t\" and i-1!=0:\n                    new_text += text[i-1]+text[i]+text[i+1]\n    return new_text\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Implement the function here\n    regex = r'(ly)'\n    regex_obj = re.search(regex, text)\n    #if regex_obj is not None:\n    #    start = regex_obj.start()\n    #    end = regex_obj.end()\n    #    print(start, end)\n    #    print(regex_obj.group())\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs=['ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly','ly']\n    str_upper=text.upper()\n    counter=0\n    for i in adverbs:\n        if i in str_upper:\n            counter+=1\n    if counter==0:\n        for i in adverbs:\n            if i=='ly':\n                position=str_upper.index(i)\n                return position\n        return None\n    return None\ndef find_verbs(text):\n    '''\n    Write a function to find the first verb ending with d and its positions in a given string.\n    '''\n    verbs=['d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d','d']\n    str_upper=text.upper()\n    counter=0\n    for i in verbs:\n        if i in str_upper:\n            counter+=1\n    if counter==0:\n        for i in verbs:\n            if i=='ly':\n                position=str_upper.index(i)\n                return position\n        return None\n    return None\ndef find_punctuation(text):\n    '''\n    Write a function to find the first punctuation in a given string.\n    '''\n    punctuation=['.','?','!','-','_','=','$','&','{','}','[',']','\\\\','!','[',']',',','_','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}','[',']','\\\\','!','[',']',',','{','}',"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    text = text.replace(\",\",\" \")\n    text = text.replace(\".\",\" \")\n    adverb = ''\n    found = False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] == 'l':\n            if found:\n                found = False\n                adverb = adverb + text[i]\n            else:\n                found = True\n                adverb = adverb + text[i]\n                \n        elif text[i] == 'y':\n            if not found:\n                found = True\n                adverb = adverb + text[i]\n            else:\n                found = False\n                adverb = adverb + text[i]\n                \n    adverb = re.findall(r'ly', adverb)\n    return adverb[0]\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Get the letters that are part of the word\n    adverbs = []\n    for i in range(len(text)):\n        if text[i]!= \" \":\n            adverbs.append(text[i])\n            \n    # Create a list of the positions where the word ends with ly\n    ly_pos = []\n    for i in range(len(adverbs)):\n        ly_pos.append(adverbs[i].find(\"ly\"))\n        \n    # Find the first ly position\n    ly_pos_start = ly_pos[0]\n    ly_pos_end = ly_pos[-1]\n    ly_start = -1\n    ly_end = -1\n    \n    for i in range(len(text)):\n        if text[i]!= \" \" and ly_pos[i]!= -1:\n            ly_start = i\n            ly_end = i\n            \n    # Create a dictionary of ly_pos: indices of the positions where the word ends with ly\n    ly_pos_indices = dict()\n    for i in range(len(adverbs)):\n        ly_pos_indices[adverbs[i]] = ly_pos[i] - ly_pos_start\n        \n    # Get rid of the ending ly\n    ly_pos_indices_noly = dict()\n    for i in range(len(ly_pos)):\n        ly_pos_indices_noly[ly_pos[i]] = ly_pos[i] - ly_pos_start\n        \n    # Create the dictionary of ly_pos: indices of the positions where the word ends with ly\n    ly_pos_indices_noly_noly = dict()\n    for i in range(len(ly_pos)):\n        ly_pos_indices_noly_noly[ly_pos[i]] = ly_pos[i] - ly_pos_end\n        \n    # Find the positions where ly ends without ly\n    ly_pos_indices_noly_noly_noly = dict()\n    for i in range(len(ly_pos)):\n        if ly_pos_indices_noly[ly_pos[i]] > ly_pos_end:\n            ly_pos_indices_noly_noly[ly_pos[i]] = ly_pos[i]\n        else:\n            ly_pos_indices_noly_noly[ly_pos[i]] = -1\n    \n    # Create the dictionary of adverb: indices where adverbs are\n    adverb = dict()\n    for i in range(len(adverbs)):\n        adverb[adverbs[i]] = i\n        \n    # Find the positions where the adverb starts\n    adverb_start_indices = dict()\n    for i in range(len(adverbs)):\n        adverb_start_indices[adverbs[i]] = adverb[adverbs[i]] + i\n        \n    # Get rid of the adverbs\n    adverb_no_ly = []\n    for i in range(len(adverbs)):\n        adverb_no_ly.append(adverbs[i])\n        \n    # Create the dictionary of adverb: indices where adverbs are\n    adverb_no_ly_indices = dict()\n    for i in range(len(adverbs)):\n        adverb_no_ly_indices[adverbs[i]] = adverb_no_ly[i] + len(adverbs)\n        \n    # Find the positions where the adverb starts without ly\n    adverb_no_ly_indices_noly = dict()\n    for i in range(len(adverbs)):\n        if adverb_no_ly[i] > adverb_start_indices[adverbs[i]]:\n            adverb_no_ly_indices_noly[adverbs[i]] = adverb_no_ly[i]\n        else:\n            adverb_no_ly_indices_noly[adverbs[i]] = -1\n    \n    # Find the positions where the adverb ends without ly\n    adverb_no_ly_indices_noly_noly = dict()\n    for i in range(len(adverbs)):\n        if adverb_no_ly[i] < adverb_end_indices[adverbs[i]]:\n            adverb_no_ly_indices_noly[adverbs[i]] = adverb_no_ly[i]\n        else:\n            adverb_no_ly_indices_noly[adverbs[i]] = -1\n    \n    # Find the positions where the adverb ends with ly\n    adverb_no_ly_indices_noly_noly_noly = dict()\n    for i in range(len(adverbs)):\n        if adverb_no_ly[i] > ly_end_indices[adverbs[i]]:\n            adverb_no_ly_indices_noly_noly[adverbs[i]] = adverb_no_ly[i]\n        else:\n            adverb_no_ly_indices_noly_noly[adverbs[i]] = -1\n            \n    # Find the positions where the adverb ends with ly\n    adverb_no_ly_indices_noly_noly_noly_noly = dict()\n    for i in range(len(adverbs)):\n        if ly_pos_indices[adverbs[i]] > adverb_no_ly_indices[adverbs[i]]:\n            adverb_no_ly_indices_noly_noly[adverbs[i]] = adverb_no_ly[i]\n        else:\n            adverb_no_ly_indices_noly_noly[adverbs[i]] = -1\n        \n    # Find the positions where the adverb ends with ly\n    adverb_no_ly_indices_noly_noly_noly_noly = dict()\n    for i in range(len(adverbs)):\n        if ly_pos_indices[adverbs[i]] < adverb_no_ly_indices[adverbs[i]]:\n            adverb_no_ly_indices_noly_noly[adverbs[i]] = adverb_no_ly[i]\n        else:\n            adverb_no_ly_indices_noly_noly[adverbs[i]] = -1\n        \n    # Find the positions where the adverb ends with ly\n    adverb_no_ly_indices_noly_noly_noly_noly_noly = dict()\n    for i in range(len(adverbs)):\n        if ly_pos_indices[adverbs[i]] < ly_end_indices[adverbs[i]]:\n            adverb_no_ly_indices_noly_noly[adverbs[i]] = adverb_no_ly[i]\n        else:\n            adverb_no_ly_indices_noly_noly[adverbs[i]] = -1\n        \n    # Create a list of the positions where the adverb ends with ly\n    adverb_end_positions = []\n    for i in range(len(adverbs)):\n        adverb_end_positions.append(adverb_end_indices[adverbs[i]])\n        \n    # Create a list of the positions where the adverb ends without ly\n    adverb_end_positions_noly = []\n    for i in range(len(adverbs)):\n        adverb_end_positions_noly.append(adverb_end_indices[adverbs[i]])\n        \n    # Find the positions where the adverb ends without ly\n    adverb_end_positions_noly_noly = []\n    for i in range(len(adverbs)):\n        if adverb_end_positions[i] < adverb_end_indices[adverbs[i]]:\n            adverb_end_positions_noly.append(adverb_end_positions[i])\n        else:\n            adverb_end_positions_noly.append(-1)\n            \n    # Create a dictionary of adverb: indices where adverbs are\n    adverb = dict()\n    for i in range(len(adverbs)):\n        adverb[adverbs[i]] = i\n        \n    # Create a dictionary of adverb: indices where adverbs are\n    adverb_indices = dict()\n    for i in range(len(adverb"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = '^ly'\n    for i in range(len(text)-1):\n        if text[i:i+2].endswith('ly'):\n            if pattern not in text:\n                return (i, i+2)\n    return (-1, -1)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    res=[]\n    heapq.heapify(res)\n    for i in range(n):\n        heapq.heappush(res,items[i][0])\n    return heapq.nlargest(n,res)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x: x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    import math\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[2])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        if heapq.heappushpop(heap,item)<n:\n            print(heapq.heappop(heap))\n            heapq.heappushpop(heap,-heapq.heappop(heap))\n            heapq.heappush(heap,-item)\n    print(heap)\n    heapq.heapify(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heappush(heap,(0,n))\n    while len(heap)>1:\n        a,b = heapq.heappop(heap)\n        print(b)\n        for i in range(len(items)):\n            if a<items[i][1]:\n                heapq.heappush(heap,(items[i][1],b+1))\n    return heap[0][0]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # YOUR CODE HERE\n    heap=[]\n    # store the nth most expensive items in a sorted array\n    for i in range(n):\n        heapq.heappush(heap,items[i][1])\n    # return the top n items\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,[items[i][1],items[i][0]])\n    result=[]\n    while len(heap)!=0:\n        result.append(heapq.heappop(heap)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[2])\n        \n    for i in range(n-1):\n        heapq.heappush(heap,heapq.heappop(heap) + heapq.heappop(heap))\n    \n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,[-i[1],i[0]])\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # TODO: write a function to find the n most expensive items in a given dataset.\n    items=sorted(items,key=lambda x:x[1],reverse=True)\n    return items[:n]\n    \ndef app(n,items):\n    '''\n    Write a function that takes a list of items (as sorted by their \n    frequent items frequency) and an integer \"n\" as an argument, \n    and returns the number of items in a dataset that are more frequent than \n    n.\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # remove the last element from the list\n    arr = l[:len(l) - n]\n    # return the elements of the list to the outside\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.append(l[0:n])\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = list(l)\n    l.insert(0,l.pop())\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # your code here\n    def split(l, n):\n        for i in range(0, len(l)):\n            l[i] = l[i][1:len(l[i])-1]\n    split(l, n)\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.append(l[0:n])\n    return l\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = ()\n    for element in listx:\n        tuple_list = tuple_list + (element,)\n    return tuple_list\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    "
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert list to tuple\n    tuple = tuple(listx)\n    return tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in range(len(listx)):\n        tup += (listx[i],)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex=tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)==1:\n        return nums[0]\n    elif len(nums)==2:\n        return max(nums) - min(nums)\n    else:\n        return max(nums) - min(nums) - max(nums[0],nums[-1])\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a=max(nums)\n    b=min(nums)\n    diff=b-a\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)==1:\n        return nums[0]\n    else:\n        if nums[0]>nums[-1]:\n            return nums[0]\n        else:\n            return nums[-1]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    n = len(d)\n    if n == 0:\n        return 0\n    else:\n        return max(d.values()) - min(d.values())\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest, largest = min(nums), max(nums)\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    minimum = min(nums)\n    maximum = max(nums)\n    diff = maximum - minimum\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    for i in range(0,len(nums)-1):\n        if nums[i] < nums[i+1]:\n            small = nums[i]\n            small_index = i\n            for j in range(i+1,len(nums)):\n                if nums[j] < small:\n                    small = nums[j]\n                    small_index = j\n            nums[small_index] = nums[i]\n            nums[i] = small\n    return nums"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest_num = max(nums)\n    smallest_num = min(nums)\n    nums.remove(largest_num)\n    nums.remove(smallest_num)\n    result = largest_num - smallest_num\n    return result\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # get the smallest and largest values\n    smallest = smallest_value = nums[0]\n    for element in nums:\n        if element < smallest:\n            smallest = element\n        if element > smallest_value:\n            smallest_value = element\n    # print smallest, smallest_value, smallest_diff\n    print smallest\n    print smallest_value\n    return smallest_value - smallest\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    '''\n    -a,b are intergers\n    '''\n    '''\n    Perfect squares are squares which can only be obtained by repeatedly squaring and adding the squares of the two numbers.\n    '''\n    '''\n    -a<b are not perfect squares\n    '''\n    '''\n    For example, if a=2 and b=3, it means that there is only one perfect square in both numbers.\n    '''\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    if (a == b):\n        return\n    else:\n        if a == b:\n            return [a]\n        else:\n            if a == 0 or b == 0:\n                return []\n            elif b > a and a % b == 0:\n                return [a] + perfect_squares(a // b, b // b)\n            elif b > a and a % b == 1:\n                return [a] + perfect_squares(a // b, b)\n            else:\n                return [a] + perfect_squares(b, a) + perfect_squares(b, a // b)\n    \n    \nprint(perfect_squares(123, 456)"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if abs(a) == b:\n        return [a]\n    \n    if a % 2 == 0:\n        middle = int(a/2)\n        m = perfect_squares(middle, b)\n        for i in m:\n            if i + 2*a == b:\n                return [middle] + m\n    else:\n        middle = int(a/2) + 1\n        m = perfect_squares(middle, b)\n        for i in m:\n            if i + 2*a == b:\n                return m + [middle] + m\n    \ndef factorial(n):\n    '''\n    Write a function factorial(n) that returns n!.\n    '''\n    if n < 0:\n        return \"Invalid input.\"\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef sum_of_squares(x):\n    '''\n    Write a function sum_of_squares(x) that returns the sum of the squares of every\n    number in x.\n    '''\n    return sum([(i*i) for i in x])\n    \ndef sum_of_squares_of_squares(x):\n    '''\n    Write a function sum_of_squares_of_squares(x) that returns the sum of the squares\n    of every number squared in x.\n    '''\n    return sum([i*i for i in x])\n    \ndef is_prime(x):\n    '''\n    Write a function is_prime(x) that returns True if x is a prime number and False\n    otherwise.\n    '''\n    if x <= 2:\n        return True\n    elif x%2 == 0:\n        return False\n    elif x < 100:\n        return True\n    else:\n        for i in range(2, int(x**0.5)+1):\n            if x%i == 0:\n                return False\n        return True\n    \ndef prime_factors(x):\n    '''\n    Write a function prime_factors(x) that returns a list of the prime factors of\n    x.\n    '''\n    if x <= 2:\n        return [1]\n    elif x%2 == 0:\n        return []\n    elif x < 100:\n        return prime_factors(x)\n    else:\n        factors = []\n        for i in range(2, int(x**0.5)+1):\n            if x%i == 0:\n                factors.append(i)\n        return factors\n    \ndef is_prime_factor(x):\n    '''\n    Write a function is_prime_factor(x) that returns True if x is a prime\n    factor and False otherwise.\n    '''\n    if x <= 2:\n        return True\n    elif x%2 == 0:\n        return False\n    elif x < 100:\n        return is_prime_factor(x)\n    else:\n        for i in range(2, int(x**0.5)+1):\n            if x%i == 0:\n                return False\n        return True\n    \ndef is_perfect(x):\n    '''\n    Write a function is_perfect(x) that returns True if x is a perfect number and\n    False otherwise.\n    '''\n    if x <= 2:\n        return True\n    elif x%2 == 0:\n        return False\n    elif x < 100:\n        return is_perfect(x)\n    else:\n        for i in range(2, int(x**0.5)+1):\n            if x%i == 0:\n                return False\n        return True\n    \ndef perfect(n):\n    '''\n    Write a function perfect(n) that returns the number of perfect numbers below n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return perfect(n - 1) + perfect(n - 2) + perfect(n - 3)\n    \ndef are_nums_perfect(nums):\n    '''\n    Write a function are_nums_perfect(nums) that returns True if all the numbers in\n    nums are perfect numbers. It should return False otherwise.\n    '''\n    if nums == []:\n        return False\n    elif len(nums) == 1:\n        return True\n    elif len(nums) == 2:\n        if nums[0] == nums[1]:\n            return True\n        else:\n            return False\n    elif nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] and nums[4] == nums[5]:\n        return True\n    else:\n        return False\n    \ndef is_circular(l):\n    '''\n    Write a function is_circular(l) that returns True if the list l is circular and\n    False otherwise.\n    '''\n    if l == []:\n        return False\n    else:\n        if len(l) == 1:\n            return True\n        if l[0] == l[1]:\n            return True\n        else:\n            return False\n        \ndef main():\n    '''\n    Read user input and store it as a variable.\n    '''\n    x = int(input(\"Enter number of elements: \"))\n    l = []\n    for i in range(x):\n        l.append(int(input(\"Enter element\")))\n        \n    # Exercise 1\n    print(l)\n    # Exercises 2-3\n    # print(perfect([i for i in range(1, x+1)]))\n    print(perfect(6))\n    # Exercises 4-7\n    # print(is_perfect([1, 3, 5, 7, 9]))\n    print(is_perfect(6))\n    # Exercises 8\n    print(is_circular([1, 2, 3, 4, 5, 6]))\n    # Exercises 9\n    print(are_nums_perfect([1, 2, 3, 4, 5, 6]))\n    # Exercises 10\n    print(are_nums_perfect([]))\n    # Exercises 11\n    print(are_nums_perfect([1, 2, 3, 4, 5, 6, 7]))\n    # Exercises 12\n    print(are_nums_perfect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    # Exercises 13\n    print(are_nums_perfect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    # Exercises 14\n    print(are_nums_perfect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    # Exercises 15\n    print(are_nums_perfect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return a\n    return perfect_squares(a, b+1)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(0, b):\n        for j in range(0, a):\n            if ((i+j)**2) == ((i+a)**2):\n                print(i+j)\n                return\n    print('This is not a perfect square.')\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return False\n    elif a == b:\n        return True\n    elif a < b:\n        return perfect_squares(a + 1, b) or perfect_squares(a - 1, b)\n    else:\n        return perfect_squares(a - 1, b + 1) or perfect_squares(a + 1, b - 1)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a**2 + b**2 == 1:\n        return a, b\n    if a**2 + b**2 > 1:\n        print(\"Square root is not perfect\")\n        return\n    else:\n        n = a**2 + b**2\n        i = 0\n        while n > i:\n            j = i\n            while j > 0:\n                if n%j == 0:\n                    break\n                j -= 1\n            if j > 0:\n                i = n//j\n            else:\n                i += 1\n        if i > 1:\n            print(\"Perfect square is\", i)\n        else:\n            print(\"Perfect square is not\", i)\n        return a, b\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square = []\n    if a == 0:\n        square.append(0)\n    elif b == 0:\n        square.append(0)\n    elif a % b == 0:\n        square.append(a//b)\n    else:\n        square.append(a//b + (a%b))\n    for i in range(2, len(square)):\n        if square[i] * square[i] == a * a:\n            square[i] = (a * a) // square[i]\n    return square\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Determine all the perfect squares between 1 and b\n    sum = a * b\n    perfect = []\n    while sum > 0:\n        square = a * a + b * b\n        perfect.append(square)\n        sum = square - sum\n    # Return the list\n    return perfect\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a,b+1):\n        if (i**i)==i:\n            print(i)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    s = 0\n    if x >= 0:\n        s = x\n    if y >= 0:\n        s = -x\n    if y <= 0:\n        s = -y\n    return (s*cmath.pi)/2, (y*cmath.pi)/2\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = (x**2+y**2)**0.5\n    r = y*y*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = (x**2+y**2)**0.5\n    r = y*y*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = (x**2+y**2)**0.5\n    r = y*y*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = 2*y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = 2*y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re5(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im5(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re6(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im6(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re7(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im7(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re9(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im9(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re10(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im10(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re11(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_im11(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = map(float, (x,y))\n    phi = y\n    r = x*x*1.25\n    theta = 2*cmath.pi*y\n    return phi,r,theta\ndef polar_re12(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_p = cmath.polar(x)\n    y_p = cmath.polar(y)\n    return x_p[0] * y_p[0] * 180/pi, x_p[1] * y_p[1] * 180/pi\ndef polar_triangle(x1,y1,x2,y2):\n    '''\n    Write a function to return True if x1,y1,x2,y2 are inside of a triangle and False otherwise.\n    '''\n    if polar_rect(x1,y1)==polar_rect(x2,y2):\n        return False\n    x1 = abs(x1)\n    x2 = abs(x2)\n    y1 = abs(y1)\n    y2 = abs(y2)\n    p = complex(x1,y1)\n    q = complex(x2,y2)\n    t = (p.real**2 + p.imag**2 + q.real**2 + q.imag**2)**0.5\n    return t < 1\ndef polar_circle(r,theta):\n    '''\n    Write a function to return True if r,theta is inside a circle and False otherwise.\n    '''\n    theta = abs(theta)\n    x1 = r*cmath.cos(theta)\n    y1 = r*cmath.sin(theta)\n    return abs(polar_rect(x1,y1)[0]) < r and abs(polar_triangle(x1,y1,x1+r,y1-r)[0]) < r\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rad = cmath.polar(x)\n    y_rad = cmath.polar(y)\n    return (x_rad,y_rad)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    c,s = cmath.polar(x)\n    s = s*cmath.pi/180.0\n    return c,s\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y=x/2,-y/2\n    return (x,y)\ndef polar_rect_x(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_2(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_2_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_2_2(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_2_3(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_2_3(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_2_3_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_2_3_2(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_2_3_3(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_2_3_3(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_3(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_3(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_3_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_3_2(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_3_2_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_3_2_2(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_3_2_3(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_3_2_3(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_4(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_4(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_4_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_4_2(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_4_3(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_4_3(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_5(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_5(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_5_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_5_2(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_5_3(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_5_3(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_6(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_6(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_6_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_6_2(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_6_3(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_6_3(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_7(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_7(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_7_2(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_7_2(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    y=y/2\n    return y\ndef polar_rect_x_7_3(x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=x/2\n    return x\ndef polar_rect_y_7_3(y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rad = cmath.rect(x)\n    y_rad = cmath.rect(y)\n    return x_rad,y_rad\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x/2\n    y = y/2\n    x_sq = x*x\n    y_sq = y*y\n    rad_x = cmath.phase(x_sq)\n    rad_y = cmath.phase(y_sq)\n    return rad_x, rad_y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (cmath.polar(x*x+y*y))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    try:\n        return [x*cmath.pi/180,y*cmath.pi/180]\n    except ZeroDivisionError:\n        print (\"Can not convert to polar coordinates!\")\n    except TypeError:\n        print (\"The x and y parameter must be numbers!\")\n        \ndef polar_rect_coords(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    try:\n        return [x,y]\n    except ZeroDivisionError:\n        print (\"Can not convert to polar coordinates!\")\n    except TypeError:\n        print (\"The x and y parameter must be numbers!\")\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    second = newList[-1]\n    newList[0] = second\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList + newList\n    print(newList)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your code here\n    newList.insert(0, newList.pop())\n    newList.append(newList.pop())\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # your code goes here\n    print (\"the list before\", newList)\n    temp = newList.pop(0)\n    newList.append(temp)\n    newList.pop()\n    print (\"the list after\", newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList)\n    print(newList[-1]) \n    print(newList[-2]) \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.insert(0, newList.pop())\n    newList.append(newList.pop())\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[1:]\n    newList[0] = temp[0]\n    newList[len(temp)-1] = temp[len(temp)-1]\n    return newList\ndef print_array(newList):\n    '''\n    Write a python function to print a given list.\n    '''\n    for i in range(len(newList)):\n        print(newList[i], end = \" \")\n    print()\ndef main():\n    '''\n    Write a python function to find the list of factors of a given number.\n    '''\n    print(\"Enter a number: \")\n    num = int(input())\n    factors = [1, num]\n    newList = []\n    print(\"The factors are: \")\n    while len(factors)!= 0:\n        if factors[0] % factors[1] == 0:\n            print(\"Factors of {} are: \".format(factors[0]), end = \" \")\n            print_array(factors)\n            factors = swap_List(factors)\n            print(\"Factors of {} are: \".format(factors[0]), end = \" \")\n            print_array(factors)\n        else:\n            factors = swap_List(factors)\n    print(\"Factors of {} are: \".format(num), end = \" \")\n    print_array(factors)\n    print(\"The factors are: \")\n    print(\"Factors of {} are: \".format(factors[0]), end = \" \")\n    print_array(factors)\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 0:\n        first = newList[0]\n        last = newList[len(newList) - 1]\n        newList[0] = last\n        newList[len(newList) - 1] = first\n        return newList\n    else:\n        return newList\n    \n    \n    \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    prod = 1\n    for i in range(1,k+1):\n        prod *= n-i\n    return prod\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return 1\n    elif k==0:\n        return 0\n    elif n==1 or k==1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n-k+1):\n        for j in range(k):\n            sum = sum + (binomial_coeff(i,j)*(2**j))\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k < 0: \n        raise ValueError(\"k must be non-negative\")\n    if n < 1: \n        raise ValueError(\"n must be greater than 1\")\n    if n == 1: \n        return 1\n    if k == 0: \n        return n\n    return n*binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_coeff(n,k,1)*binomial_coeff(n-k,k,1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return binomial_Coeff_int(n, k, 0, 1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result=0\n    for i in range(1,n+1):\n        result=result+(k*(i**n))\n    return result\ndef binomial_Coeff_2(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result=0\n    for i in range(1,n+1):\n        result=result+(k*(i**(n-i)))\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0: \n        return 1\n    if n==1: \n        return 1\n    if n==2: \n        return 1\n    if n==3: \n        return 3*n**3\n    if n>3: \n        #TODO: your code here\n        print(\"Enter a number between 3 and \", n-1)\n        return 0\n    else:\n        #TODO: your code here\n        return 0\ndef get_all_combinations(n):\n    '''\n    This is the main function for get_combinations.\n    '''\n    #Your code here\n    #TODO: your code here\n    result = []\n    for k in range(1,n+1):\n        result = result + list(itertools.combinations(range(1,k+1),k))\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # your code goes here\n    coeff_sum=0\n    while k>0:\n        coeff_sum=coeff_sum+k\n        k=k//2\n    return coeff_sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    for i in range(1,k+1): \n        s += math.factorial(i) * math.factorial(n - i) * binomial_Coeff(n, i) / math.factorial(i)\n    return s "
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes\n    ip = re.sub('^0+', '', ip)\n    # remove trailing zeroes\n    ip = re.sub('\\s$', '', ip)\n    return ip\ndef removezero_addr(addr):\n    '''\n    Write a function to remove leading zeroes from an address.\n    '''\n    # remove leading zeroes\n    addr = re.sub('^0+', '', addr)\n    # remove trailing zeroes\n    addr = re.sub('\\s$', '', addr)\n    return addr\ndef removezero_str(str):\n    '''\n    Write a function to remove leading zeroes from a string.\n    '''\n    # remove leading zeroes\n    str = re.sub('^0+', '', str)\n    # remove trailing zeroes\n    str = re.sub('\\s$', '', str)\n    return str\ndef remove_space(str):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    str = str.replace(\" \", \"\")\n    return str\ndef add_space(str):\n    '''\n    Write a function to add spaces to a string.\n    '''\n    str = str.replace(\" \", \"\")\n    return str\ndef add_prefix(str, prefix):\n    '''\n    Write a function to add a prefix to a string.\n    '''\n    str = prefix + str\n    return str\ndef remove_prefix(str, prefix):\n    '''\n    Write a function to remove a prefix from a string.\n    '''\n    str = prefix + str\n    return str\ndef is_digit(s):\n    '''\n    Return True if string is a number.\n    '''\n    return re.search('^[0-9]+$', s) is not None\ndef is_int(s):\n    '''\n    Return True if string is an integer.\n    '''\n    return re.search('^[0-9]+$', s) is not None\ndef is_float(s):\n    '''\n    Return True if string is a float.\n    '''\n    return re.search('^[0-9]+.[0-9]+$', s) is not None\ndef is_float_or_int(s):\n    '''\n    Return True if string is an int or float.\n    '''\n    return is_int(s) or is_float(s)\ndef is_float_or_int_or_float(s):\n    '''\n    Return True if string is an int or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_int_or_float(s):\n    '''\n    Return True if string is an int or float or float or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_str(s):\n    '''\n    Return True if string is a string.\n    '''\n    return isinstance(s, str)\ndef is_list(s):\n    '''\n    Return True if string is a list.\n    '''\n    return isinstance(s, list)\ndef is_dict(s):\n    '''\n    Return True if string is a dictionary.\n    '''\n    return isinstance(s, dict)\ndef is_bool(s):\n    '''\n    Return True if string is a boolean.\n    '''\n    return isinstance(s, bool)\ndef is_date(s):\n    '''\n    Return True if string is a date.\n    '''\n    try:\n        if isinstance(s, str) and re.match('^[0-9]{4}-[0-9]{2}-[0-9]{2}$', s):\n            return True\n        else:\n            return False\n    except:\n        return False\ndef is_datetime(s):\n    '''\n    Return True if string is a datetime.\n    '''\n    try:\n        if isinstance(s, str) and re.match('^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}$', s):\n            return True\n        else:\n            return False\n    except:\n        return False\ndef is_ip(s):\n    '''\n    Return True if string is an ip.\n    '''\n    return is_digit(s) and is_int(s) and is_ip_address(removezero_ip(s))\ndef is_addr(s):\n    '''\n    Return True if string is an ip.\n    '''\n    return is_int(s) and is_ip_address(removezero_addr(s))\ndef is_str_or_int_or_float(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_str_or_int(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_list_or_int(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_dict_or_int(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_bool_or_int(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_date_or_int(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_datetime_or_int(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_ip_address(s):\n    '''\n    Return True if string is an ip.\n    '''\n    return is_digit(s) and is_int(s) and is_ip_address(removezero_ip(s))\ndef is_addr_or_int(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_str_or_int_or_float(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_list_or_int_or_float(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef is_dict_or_int_or_float(s):\n    '''\n    Return True if string is an int or float or float or float or int or float.\n    '''\n    if is_int(s) or is_float(s):\n        return True\n    else:\n        return False\ndef i"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '':\n        return ip\n    return ip.replace(ip[0], '')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = []\n    for i in range(len(ip)):\n        if ip[i]!= \"0\":\n            ip_list.append(ip[i])\n    return ip_list\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Open the file and read in the file\n    textfile = open(\"/home/pi/Documents/python_scripts/Ip_data.txt\", \"r\")\n    content = textfile.read()\n    textfile.close()\n    # Split by, then find the index of ip in the string\n    i = content.index(ip)\n    # Check if the index is the end of the string\n    if i == len(content):\n        # If the index is the end of the string, then the string is empty\n        return \"\"\n    else:\n        # Remove the leading zeros from the string\n        return content[:i].strip()\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        return ''.join(x for x in ip if x.isdigit())\n    except:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.strip()\n    ip_add=ip.split(\".\")\n    ip=str(ip_add[0])\n    if ip_add[0]==\"0\":\n        ip=ip_add[1]\n    return ip\ndef removezero_ipv4(ip):\n    '''\n    Write a function to remove leading zeroes from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip_add=ip.split(\".\")\n    ip=str(ip_add[0])\n    if ip_add[0]==\"0\":\n        ip=ip_add[1]\n    return ip\ndef split_ipv4_v4(ip):\n    '''\n    Write a function to split an ipv4 address into an ipv4 and an ipv4.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_h(ip):\n    '''\n    Write a function to remove '-h' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_d(ip):\n    '''\n    Write a function to remove '-d' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_l(ip):\n    '''\n    Write a function to remove '-l' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_p(ip):\n    '''\n    Write a function to remove '-p' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_q(ip):\n    '''\n    Write a function to remove '-q' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_u(ip):\n    '''\n    Write a function to remove '-u' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_v(ip):\n    '''\n    Write a function to remove '-v' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_w(ip):\n    '''\n    Write a function to remove '-w' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_x(ip):\n    '''\n    Write a function to remove '-x' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_y(ip):\n    '''\n    Write a function to remove '-y' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_z(ip):\n    '''\n    Write a function to remove '-z' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_1(ip):\n    '''\n    Write a function to remove '1' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_2(ip):\n    '''\n    Write a function to remove '2' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_3(ip):\n    '''\n    Write a function to remove '3' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_4(ip):\n    '''\n    Write a function to remove '4' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_5(ip):\n    '''\n    Write a function to remove '5' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_6(ip):\n    '''\n    Write a function to remove '6' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_7(ip):\n    '''\n    Write a function to remove '7' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_8(ip):\n    '''\n    Write a function to remove '8' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_9(ip):\n    '''\n    Write a function to remove '9' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_0(ip):\n    '''\n    Write a function to remove '0' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_1a(ip):\n    '''\n    Write a function to remove '1a' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_1b(ip):\n    '''\n    Write a function to remove '1b' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_1c(ip):\n    '''\n    Write a function to remove '1c' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_1d(ip):\n    '''\n    Write a function to remove '1d' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_1e(ip):\n    '''\n    Write a function to remove '1e' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_1f(ip):\n    '''\n    Write a function to remove '1f' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_1g(ip):\n    '''\n    Write a function to remove '1g' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    return ip[0],ip[1]\ndef remove_1h(ip):\n    '''\n    Write a function to remove '1h' from an ipv4 address.\n    '''\n    ip=ip.strip()\n    ip=ip.split(\".\")\n    retur"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if isinstance(ip, str):\n        return re.sub('[0-9]', '', ip)\n    else:\n        return ip\n    return re.sub(r'[^0-9.]', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes\n    ip = re.sub('^0+', '', ip)\n    # find the last 0\n    last_zero = ip.rfind('0')\n    # if there is a 0, then we need to remove it\n    if last_zero!= -1:\n        ip = ip[:last_zero]\n    # return the result\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #Remove leading zeroes\n    if len(ip)<=2:\n        return ip\n    else:\n        ip_with_zeroes=ip[:2]+str(ip[2:])\n        return ip_with_zeroes\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) < 1:\n        return ip\n    if ip[0] == '0':\n        return ip\n    else:\n        return '0'+ip\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Your code here\n    even = list1[::2]\n    odd = list1[1::2]\n    return even + odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    sum = 0\n    i = 0\n    while i < len(even):\n        sum += even[i]\n        i += 1\n    i = 0\n    while i < len(odd):\n        sum += odd[i]\n        i += 1\n    if sum % 2 == 0:\n        return sum\n    else:\n        return sum - sum\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    #print(even)\n    #print(odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return odd - even\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff=[]\n    count=0\n    for i in list1:\n        if i%2==0:\n            diff.append(i)\n            count+=1\n        else:\n            continue\n    if count==0:\n        return []\n    else:\n        return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_numbers=[]\n    even_numbers=[]\n    for i in list1:\n        if i%2==0:\n            even_numbers.append(i)\n        else:\n            odd_numbers.append(i)\n    print(\"Even numbers:\",even_numbers)\n    print(\"Odd numbers:\",odd_numbers)\n    return odd_numbers+even_numbers\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(0,len(list1)):\n        if list1[i]%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return(odd - even)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = 0\n    even = 0\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    for num in list1:\n        if num % 2 == 0:\n            diff += 1\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in list1:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return odd_list, even_list\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    a=0\n    b=0\n    if (str1[0]==str2[0]):\n        return 0\n    elif (str1[0]==\"1\" and str2[0]==\"0\") :\n        if str1[1:]==str2[1:]:\n            a=1\n            return a\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def swap(a,b,c,d):\n        \"\"\"\n        Swaps two bits in the input binary string.\n        \"\"\"\n        return b[c] + b[d] + b[a]\n    \n    def min_swaps(str1,str2) :\n        \"\"\"\n        Uses the minimum number of swaps required to convert the string from binary to binary.\n        \"\"\"\n        count = 0\n        for i in range(0,len(str1)-1):\n            if str1[i] == str2[i]:\n                count += 1\n        return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    temp=0\n    for i in range(0,len(str1)):\n        if str1[i]==str2[i]:\n            temp+=1\n        else:\n            if temp>0:\n                count+=1\n                temp=0\n            else:\n                count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #create string array\n    s = []\n    #convert to list\n    for i in str1:\n        s.append(i)\n    #create counter\n    c = 0\n    #find length of string\n    l = len(s)\n    #loop through all the strings\n    for i in range(l-1):\n        #find current char\n        c = s[i]\n        #check current char is the same as the next char\n        if s[i+1]!= c:\n            #increment counter\n            c = s[i]\n            #if char at next index is the same as next char, remove from array\n            if s[i+1] == c:\n                #remove from string array\n                s.remove(c)\n                #remove from array\n                s.remove(s[i])\n            #else if char at next index is not the same as next char, add char to array\n            else:\n                s.append(c)\n            #increment length\n            c = l-1\n            #loop through remaining strings\n            for j in range(l-1):\n                #check current char is the same as the next char\n                c = s[j]\n                #check current char is the same as the next char\n                if s[j+1]!= c:\n                    #increment counter\n                    c = s[j]\n                    #if char at next index is the same as next char, remove from array\n                    if s[j+1] == c:\n                        #remove from string array\n                        s.remove(c)\n                        #remove from array\n                        s.remove(s[j])\n                    #else if char at next index is not the same as next char, add char to array\n                    else:\n                        s.append(c)\n                        c = l-1\n    #print the solution\n    print(len(s))\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def min_swaps(bin_str,bin_str_1):\n        count = 0\n        for i in range(len(bin_str)):\n            if bin_str[i] == bin_str_1[i]:\n                continue\n            elif bin_str[i]!= bin_str_1[i]:\n                count += 1\n            else:\n                return count\n        return 0\n    bin_str = str1.replace(\"0\",\"1\").replace(\"1\",\"0\").replace(\"1\",\"1\").replace(\"0\",\"0\").replace(\"1\",\"1\").replace(\"0\",\"0\")\n    bin_str_1 = str2.replace(\"0\",\"1\").replace(\"1\",\"0\").replace(\"1\",\"1\").replace(\"0\",\"0\").replace(\"1\",\"1\").replace(\"0\",\"0\")\n    print(min_swaps(bin_str,bin_str_1))\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    p = 0\n    q = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            p += 1\n        else:\n            q += 1\n    return p,q\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return 0\n    min_swaps = 0\n    while True:\n        if str1[-1]!= str2[-1]:\n            break\n        min_swaps += 1\n        str1 = str1[:-1] + str2\n    return min_swaps\n    \ndef main():\n    '''\n    Test the solution provided below.\n    '''\n    str1 = '10111111010'\n    str2 = '00010101010'\n    print(min_Swaps(str1,str2))\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # [i,j] means the minimum number of swaps required. \n    m = len(str1)\n    n = len(str2)\n    # max = max(m,n) as the string will contain only unique digits. \n    # i is at index i and j is at jth position. \n    # j-1 because we want to find the minimum and minimum at every position of j. \n    # j is at index j. \n    # j-1 because we want to find the minimum and minimum at every position of j. \n    # i is at index i. \n    # max = max(m,n) because the string will contain only unique digits. \n    \n    # current_index will hold the position of the current index of str1. \n    # j will hold the position of the position of str2. \n    # current_index is at index i, j is at index j. \n    # current_index will hold the position of the current index of str1. \n    # j will hold the position of the position of str2. \n    # current_index will hold the position of the current index of str1. \n    # current_index will hold the position of the position of str2. \n    # current_index will hold the position of the current index of str1. \n    # current_index will hold the position of the position of str2. \n    \n    current_index = 0\n    j = 0\n    max = 0\n    # m will be the length of str1. \n    # n will be the length of str2. \n    # we will create an empty array that is equal to str1 and str2. \n    # the element will be the number of j. \n    # the array will store the current index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current_index will be the index of str1 and str2. \n    # the current"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # init \n    count = 0\n    lst = []\n    # init init \n    for i in range(len(str1)-1):\n        lst.append(str1[i]+str1[i+1])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for element in tuple_list:\n        total_size += len(str(element))\n    return total_size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Your code here\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = 0\n    for t in tuple_list:\n        s += len(t)\n    return s\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # if the size of tuple is less than 64 bytes return 0\n    # if the size of tuple is greater than 64 bytes return the size - 1\n    # this is to avoid problems with large numbers\n    return len(str(tuple_list)) if len(str(tuple_list)) < 64 else len(str(tuple_list)) - 1\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += len(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum(len(item) for item in tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return(len(tuple_list) * 8)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # set a flag for the flag of last index\n    flag = False\n    # generate a pointer for the arr1\n    ptr1 = 0\n    # generate a pointer for the arr2\n    ptr2 = 0\n    while(ptr1!= len(arr1) and ptr2!= len(arr2)):\n        if arr1[ptr1] < arr2[ptr2]:\n            ptr1 += 1\n        elif arr1[ptr1] > arr2[ptr2]:\n            ptr2 += 1\n        else:\n            if flag:\n                return arr1[ptr1]\n            flag = True\n            ptr1 += 1\n    # return the last element of arr1 or arr2\n    if flag:\n        return arr1[ptr1]\n    else:\n        return arr2[ptr2]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pas"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    l = 0\n    r = n - 1\n    \n    while l < r:\n        mid = (l + r) // 2\n        if arr1[mid] < arr2[mid]:\n            l = mid + 1\n        else:\n            r = mid\n    \n    return arr1[l]\n    \ndef insertion_sort(arr):\n    '''\n    Write a function to do insertion sort.\n    '''\n    for i in range(1, len(arr)):\n        # Last element of the unsorted array is at right position\n        # But first element of the unsorted array is at 0,1\n        # so we can move it to left position\n        if arr[i] < arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n        else:\n            print(\"impossible\")\n    \ndef selectionsort(arr):\n    '''\n    Write a function to do selection sort.\n    '''\n    for i in range(len(arr)):\n        # Last element of the unsorted array is at right position\n        # but first element of the unsorted array is at 0,1\n        # so we can move it to left position\n        if arr[i] < arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n        else:\n            print(\"impossible\")\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # if k is less than 1 or greater than the length of both the arrays.\n    if k <= 0 or len(arr1) < len(arr2):\n        raise Exception(\"Invalid Input\")\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 < n2:\n        return -1\n    \n    if k > n1 or k > n2:\n        return -1\n    \n    return arr2[n1 + k - 1] if k == 0 else (arr1[n1 + k - 1] if k < n1 else arr1[n1])\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the first element of given array\n    start, end = 0, len(arr1) - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    assert arr1!= None and arr2!= None\n    assert len(arr1) == len(arr2)\n    assert len(arr1) >= k\n    assert k > 0\n    # @return the first kth element\n    def kth_element(arr1, arr2, k):\n        left = 0\n        right = len(arr2)-1\n        # return the kth element from the first array\n        while left <= right:\n            mid = (left + right) // 2\n            if arr1[mid] == arr2[mid]:\n                return arr1[mid]\n            elif arr1[mid] < arr2[mid]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return None\n    return kth_element(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def divide(arr, start, end):\n        left = start\n        right = end\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[k - 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k==1:\n        return arr1[k-1]\n    else:\n        return find_kth(arr1[:k-1], arr2[:k-1], k-1)\n    \ndef count_trees(n, r, d):\n    '''\n    Count the number of trees in the given array where each tree is at most d units long.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(r):\n            if i+j+1 < n and d > (i+j+1)*d:\n                count+=1\n    return count\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_index = arr1.index(max(arr1))\n    arr2_index = arr2.index(min(arr2))\n    arr1_index_end = arr1_index + arr2.size\n    arr2_index_end = arr2_index + arr1.size\n    k_index = arr1_index if arr1_index_end - arr1_index > k else arr2_index_end - arr2_index\n    return arr1[k_index]\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_count = 0\n    \n    for num in range(number):\n        # Step 1: Extract number as string\n        num = str(number)\n        \n        # Step 2: Count the number of digits\n        for digit in num:\n            digit_count += 1\n        \n        # Step 3: Determine the sum of digits in the number\n        sum = 0\n        \n        for digit in num:\n            sum += int(digit) ** digit_count\n            \n        # Step 4: Compare the sum of digits with the given number\n        if sum == number:\n            return True\n            \n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    power = 1\n    power = number\n    while power > 0:\n        digit = power % 10\n        sum += digit ** 3\n        power //= 10\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # If number is divisible by 3, it should be armstrong\n    if number % 3 == 0:\n        return True\n    # If number is divisible by 5, it should be armstrong\n    if number % 5 == 0:\n        return True\n    # If number is divisible by 3 and 5, it should be armstrong\n    if number % 3 == 0 and number % 5 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    total = 0\n    for i in str(number):\n        total += int(i)\n    if total == number:\n        print('{} is an armstrong number'.format(number))\n    else:\n        print('{} is not an armstrong number'.format(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Your code here\n    return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += int(str(i) + str(i))\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    temp_num = 0\n    for i in str(number):\n        temp_num += int(i)\n        if temp_num == number:\n            count += 1\n    if count == len(str(number)):\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    converted = ''\n    def armstrong(num):\n        sum = 0\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            sum += digit ** 3\n            num = num // 10\n        if sum == number:\n            return True\n        else:\n            return False\n    while number > 0:\n        converted = str(number % 10) + converted\n        number = number // 10\n    return converted == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    return sum(int(i) ** 3 for i in number) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return True\n    else:\n        for i in range(1, number):\n            if number % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Your code here\n    number_of_values = int(input(\"Enter number of values you wish to count: \"))\n    numbers = []\n    total = 0\n    \n    for i in range(0, number_of_values):\n        number = int(input(f\"Enter {i + 1}th value: \"))\n        numbers.append(number)\n        total += number\n    \n    average = total / number_of_values\n    print(f\"The average of your numbers is {average}\")\n    print(\"The total is\", total)\n    \nsum_average(10"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    i = 1\n    while i <= number:\n        total += i\n        i += 1\n    avg = total / number\n    return total, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += i\n    average = total / number\n    print(f'{total} : {average}')\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if i%2==0:\n            sum+=i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    try:\n        sum = 0\n        sum = sum + number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum / number\n        sum = sum + number\n        sum = sum "
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    return sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    number = sorted(number)\n    for i in range(0,len(number),1):\n        result += number[i]\n    average = result/len(number)\n    print(f\"sum: {result}\")\n    print(f\"average: {average}\")\n    \n    return result, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    average = 0\n    count = 0\n    for i in range(0, n):\n        n = int(input(\"Enter a natural number: \"))\n        sum += n\n        count += 1\n        average = sum/count\n        print(n)\n    print(sum, average)\n    print(average)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    count=0\n    for x in range(1,number+1):\n        sum+=x\n        count+=1\n    average=sum/count\n    return sum,average\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n    \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # num = int(input(\"Enter a number : \"))\n    return (n%2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"the given number is even\")\n    else:\n        print(\"the given number is odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n % 2 == 1 : \n        return True\n    else : \n        return False\n        "
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return \"Even Number\"\n    else : \n        return \"Odd Number\"\n    \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1)<1:\n        return \"No character found\"\n    else:\n        count=0\n        for i in range(len(str1)):\n            if str1[i]==str1[i+1]:\n                count+=1\n            else:\n                return str1[i]\n        if count>1:\n            return \"No character found\"\n        else:\n            return str1[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == str1[0]:\n        return str1[0]\n    else:\n        for i in range(len(str1)):\n            if str1[i] == str1[i + 1]:\n                return str1[i]\n    return \"NULL\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code goes here\n    def rv(s):\n        '''\n        #------------------------------------\n        s:\n            string of characters\n            return the first repeated character\n        '''\n        l = []\n        for char in s:\n            if char not in l:\n                l.append(char)\n        return l[0]\n        #------------------------------------\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i]==str1[i+1]:\n            print(str1[i],\"=\"+str1[i+1])\n            break\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == '':\n        return ''\n    elif str1 =='':\n        return ''\n    else:\n        for i in str1:\n            if i == str1[-1]:\n                return str1[0:str1.index(i)]\n        return str1[0:1]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # TODO: Fill in this function\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    chars = list(str1)\n    temp = chars[0]\n    for i in range(len(chars)-1):\n        if chars[i] == temp:\n            chars[i] = chars[i+1]\n            temp = chars[i]\n    return temp\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    l = []\n    l.append(str1[0])\n    for i in range(1, len(str1)):\n        if str1[i] == l[0]:\n            l.append(str1[i])\n        else:\n            if str1[i] in l:\n                continue\n            else:\n                return(str1[i])\n    return(str1[0])\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # define a hashmap\n    d = {}\n    # iterate through the input string\n    for c in str1:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] = d[c] + 1\n    # iterate through the dictionary to return the first repeated key\n    for k, v in d.items():\n        if v == 1:\n            return k\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        return []\n    if n % 3!= 0:\n        return []\n    for i in range(1, n//3 + 1):\n        if i % 3 == 0:\n            if n % i == 0:\n                return []\n        elif i % 3 == 1:\n            if n % i == 0:\n                return []\n        elif i % 3 == 2:\n            if n % i == 0:\n                return []\n    return [n]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if (i%2 == 0):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # get all numbers greater than or equal to input number\n    # for each number in the list, if the number is greater than the input number, change it to the new number. \n    # If the number is less than the input number, change it to the new number.\n    # O(n) for huge list, so a recursion is not needed\n    if n >= 0:\n        print(luc(n))\n    else:\n        print(0)\n        \ndef luc(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return luc(n-1) + luc(n-2)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i % 5 == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(0,n):\n        if(i<10):\n            ludic.append(i)\n        else:\n            ludic.append(i%10)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lud = []\n    for i in range(2, n + 1):\n        if (n % i) == 0:\n            lud.append(i)\n    return lud\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if type(n) is not int:\n        raise TypeError(\"Only integers allowed for n\")\n    if n < 0:\n        raise ValueError(\"The number must be greater than 0\")\n    if n == 0:\n        return [0]\n    return [i for i in range(1, n+1) if n%i == 0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(1, n + 1):\n        if num < 10:\n            ludic.append(str(num))\n        elif num % 10 == 0:\n            ludic.append(str(num) + '000')\n        elif num % 10 == 1:\n            ludic.append(str(num) + '00')\n        elif num % 10 == 2:\n            ludic.append(str(num) + '00')\n        elif num % 10 == 3:\n            ludic.append(str(num) + '00')\n        elif num % 10 == 4:\n            ludic.append(str(num) + '00')\n        elif num % 10 == 5:\n            ludic.append(str(num) + '00')\n        elif num % 10 == 6:\n            ludic.append(str(num) + '00')\n        elif num % 10 == 7:\n            ludic.append(str(num) + '00')\n        elif num % 10 == 8:\n            ludic.append(str(num) + '00')\n        elif num % 10 == 9:\n            ludic.append(str(num) + '00')\n        \n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucky = []\n    for i in range(0,n):\n        if n % i == 0:\n            lucky.append(i)\n    return lucky\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    #Get the list of all numbers lower than or equal to n\n    num_l = list(range(n, n - 1, -1))\n    #Set number of times to be looped\n    lud_count = 0\n    #Loop through the numbers\n    for i in num_l:\n        #Check if i is less than 0\n        if i <= 0:\n            #Get the number of times looped and add it to the counter\n            lud_count += 1\n            #If the number is smaller than the original number, increment the counter\n            if i < n:\n                lud_count += 1\n    #Return the counter\n    return lud_count\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split()\n    l = [i[::-1] for i in l]\n    return \" \".join(l)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.strip().split()\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    list_words = s.split(\" \")\n    final_word = \"\"\n    for word in list_words:\n        final_word = word + \" \" + final_word\n    return final_word\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    s = words[::-1]\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    res = []\n    word = \"\"\n    temp = \"\"\n    for w in s.split():\n        if w[0]!='':\n            word += w +''\n        else:\n            res.append(word[:-1])\n            word = word[-1] + w[1:]\n    return''.join(res)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    start_index = 0\n    end_index = len(s) - 1\n    while start_index < end_index:\n        s[start_index], s[end_index] = s[end_index], s[start_index]\n        start_index += 1\n        end_index -= 1\n    return ''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.replace(' ', '').split(' ')\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = [w.lower() for w in words]\n    words = [w.replace(' ', '') for w in words]\n    words = [w.replace('  ','') for w in words]\n    words = [w.replace('  ','') for w in words]\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s == \"\":\n        return s\n    else:\n        return reverse_words(s[1:]) + reverse_words(s[0])\n    \n    "
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # TODO: Write the function here\n    #\n    #\n    #\n    return s.replace(\" \",\"\").split(\" \")\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def prime_check(num):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return False\n            return True\n        else:\n            return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if prime_check(i):\n            return i\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    num = int(num)\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num == 5 or num == 7:\n        return False\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5,int(num**0.5)+5,6):\n        if num % i == 0:\n            return False\n    return True\n    \ndef isPrime(num):\n    '''\n    Check if a number is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num == 5 or num == 7:\n        return False\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5,int(num**0.5)+5,6):\n        if num % i == 0:\n            return False\n    return True\n    \ndef GCD(x,y):\n    '''\n    Find the GCD of two numbers.\n    '''\n    while(y):\n        x,y = y,x%y\n    return x\n    \ndef LCM(x,y):\n    '''\n    Find the Lcm of two numbers.\n    '''\n    return x*y\n    \ndef Divisors(n):\n    '''\n    Find all divisors of a given number.\n    '''\n    l = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if (n%i==0):\n            if (n//i==i):\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(n//i)\n    return l\n    \ndef is_perfect_number(n):\n    '''\n    Check if a number is a perfect number.\n    '''\n    i = 2\n    while(i*i <= n):\n        if (n%i == 0):\n            return False\n        i += 1\n    return True\n    \ndef is_prime(num):\n    '''\n    Check if a given number is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5,int(math.sqrt(num)+1),6):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    divisors = [2, 3, 5, 7]\n    for divisor in divisors:\n        if num % divisor == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return False\n    if num % 2 == 0:\n        return False\n    for i in range(3,int(num**0.5)+1,2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    return True if is_prime(num) else False\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0:\n        return 0\n    return degree * 3.1415926\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree > 180:\n        print('Error: degree must be in range from 0 to 180.')\n        return\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (3.14159 / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # converting degree to radian\n    rad = degree * (3.1415926535897932384626433832795)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radians_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return radian_degree(degree)\ndef degree_to_radian_2(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_to_degree(degree):\n    '''\n    Convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_2(degree):\n    '''\n    Convert radians to degrees.\n    '''\n    return degree*180/math.pi\ndef degree_to_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_3(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_3(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_4(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_5(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_6(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_7(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_8(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_9(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_10(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_11(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_12(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_13(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_14(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_15(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_16(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_17(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_18(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_19(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_20(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_21(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_22(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_23(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_24(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_25(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_26(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_27(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_28(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_29(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_30(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_31(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_32(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_33(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_34(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_35(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_36(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_37(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_38(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_39(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_40(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_41(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_42(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_43(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_44(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_45(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef degree_to_radian_46(degree):\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0:\n        return 0\n    \n    degree = degree*0.01\n    radian = degree*math.pi/180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (180/math.pi)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degrees = degree * (math.pi / 180)\n    return radian_degrees\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degrees = degree * math.pi / 180\n    return degrees\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    found_sub = re.findall(pattern, text, flags=re.IGNORECASE | re.MULTILINE | re.DOTALL)\n    if len(found_sub) == 0:\n        return None, None, None\n    return found_sub[0], found_sub[1], found_sub[2]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Using regex string find method\n    r = re.findall(pattern, text, re.IGNORECASE)\n    # print(r)\n    # print(r[1][1][0])\n    # print(r[1][1][1])\n    # print(r[1][1][2])\n    return r\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern == \"\":\n        return -1, -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    search_str = re.search(pattern, text)\n    if search_str:\n        start, end = search_str.span()\n        return text[start:end]\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substr = ''\n    idx = 0\n    end = 0\n    while idx < len(text):\n        char = text[idx]\n        if char == '#':\n            if substr == '':\n                substr = '#'\n            else:\n                substr = substr + '#'\n        elif char == '$':\n            end = idx\n        elif char == '^':\n            if substr!= '':\n                substr = substr + '^'\n            else:\n                substr = '^'\n        elif char == '$' or char == '^':\n            end = idx\n        elif char == '+' or char == '-' or char == '*' or char == '/':\n            if substr == '':\n                substr = '+'\n            else:\n                substr = substr + '+'\n        elif char == '^':\n            if substr == '':\n                substr = '^'\n            else:\n                substr = substr + '^'\n        elif char == '$':\n            if substr == '':\n                substr = '$'\n            else:\n                substr = substr + '$'\n        elif char == '*':\n            if substr == '':\n                substr = '*'\n            else:\n                substr = substr + '*'\n        elif char == '&':\n            if substr == '':\n                substr = '&'\n            else:\n                substr = substr + '&'\n        elif char == '&':\n            if substr == '':\n                substr = '&'\n            else:\n                substr = substr + '&'\n        elif char == '{':\n            if substr == '':\n                substr = '{'\n            else:\n                substr = substr + '{'\n        elif char == '}':\n            if substr == '':\n                substr = '}'\n            else:\n                substr = substr + '}'\n        elif char == ';':\n            if substr == '':\n                substr = ';'\n            else:\n                substr = substr + ';'\n        elif char == '$':\n            end = idx\n        elif char == '+':\n            if substr == '':\n                substr = '+'\n            else:\n                substr = substr + '+'\n        elif char == '-':\n            if substr == '':\n                substr = '-'\n            else:\n                substr = substr + '-'\n        elif char == '*':\n            if substr == '':\n                substr = '*'\n            else:\n                substr = substr + '*'\n        elif char == '/':\n            if substr == '':\n                substr = '/'\n            else:\n                substr = substr + '/'\n        elif char == '!':\n            if substr == '':\n                substr = '!'\n            else:\n                substr = substr + '!'\n        elif char == '{':\n            if substr == '':\n                substr = '{'\n            else:\n                substr = substr + '{'\n        elif char == '}':\n            if substr == '':\n                substr = '}'\n            else:\n                substr = substr + '}'\n        elif char == '?':\n            if substr == '':\n                substr = '?'\n            else:\n                substr = substr + '?'\n        else:\n            substr = ''\n        idx = end\n    return substr, idx, idx+len(substr)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    start_index = -1\n    end_index = -1\n    match_index = -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # loop through each character in the string and match it with a regular expression\n    for i in range(len(text)):\n        if text[i] == pattern[0]:\n            start = i\n            end = i+len(pattern)\n            return text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # The regex pattern must contain the string '^[\\u0300-\\u036F]+$'\n    if re.search(pattern, text) is None:\n        raise ValueError('{} does not contain the substring \"{}\".'.format(text, pattern))\n    \n    # find the first match\n    match = re.search(pattern, text)\n    start_index = match.start()\n    end_index = match.end()\n    \n    # extract the match\n    match = text[start_index:end_index]\n    \n    # return the match\n    return match, start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #examples:\n    '''\n    $^_[]@+$\n    $[]_[][][][][][]$\n    '''\n    pattern_start = -1\n    pattern_end = -1\n    match = re.search(pattern,text)\n    if match:\n        #print(match.group())\n        pattern_start = match.start()\n        pattern_end = match.end()\n        print(pattern_start,pattern_end)\n        return pattern_start,pattern_end,match.group()\n    else:\n        print(pattern,' not found')\n        return -1, -1, ''\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    i = 0\n    if n == 0:\n        return 0\n    while True:\n        if n % 2 == 0:\n            n = n/2\n            i += 1\n        else:\n            n = (3*n) + 1\n            i += 1\n        a += 1\n        if n == a:\n            return i\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n1 = n + 1\n    nth_bell_number = 0\n    while n1 <= n:\n        nth_bell_number = nth_bell_number + n1\n        n1 = n1 + 1\n    return nth_bell_number\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = n - 1\n    return n * n + 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0: return 0\n    elif n==1: return 1\n    else: return bell_Number(n-1) + bell_Number(n-2)\nprint(bell_Number(5))"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_Num = 1\n    for _ in range(n):\n        bell_Num *= 3\n    return bell_Num\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return 1 + bell_Number(n-1)\n    return 1 + bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    while i <= n: \n        num = 5 * i + 3\n        if num < n: \n            i += 1\n        else: \n            break\n    print(num)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    elif n==4:\n        return 7\n    elif n==5:\n        return 11\n    elif n==6:\n        return 13\n    elif n==7:\n        return 17\n    elif n==8:\n        return 19\n    elif n==9:\n        return 23\n    elif n==10:\n        return 29\n    elif n==11:\n        return 31\n    elif n==12:\n        return 37\n    elif n==13:\n        return 41\n    elif n==14:\n        return 43\n    elif n==15:\n        return 47\n    elif n==16:\n        return 53\n    elif n==17:\n        return 59\n    elif n==18:\n        return 61\n    elif n==19:\n        return 67\n    elif n==20:\n        return 71\n    elif n==21:\n        return 73\n    elif n==22:\n        return 79\n    elif n==23:\n        return 83\n    elif n==24:\n        return 89\n    elif n==25:\n        return 97\n    elif n==26:\n        return 101\n    elif n==27:\n        return 103\n    elif n==28:\n        return 105\n    elif n==29:\n        return 107\n    elif n==30:\n        return 111\n    elif n==31:\n        return 113\n    elif n==32:\n        return 119\n    elif n==33:\n        return 123\n    elif n==34:\n        return 131\n    elif n==35:\n        return 137\n    elif n==36:\n        return 141\n    elif n==37:\n        return 145\n    elif n==38:\n        return 147\n    elif n==39:\n        return 151\n    elif n==40:\n        return 157\n    elif n==41:\n        return 161\n    elif n==42:\n        return 165\n    elif n==43:\n        return 167\n    elif n==44:\n        return 171\n    elif n==45:\n        return 173\n    elif n==46:\n        return 179\n    elif n==47:\n        return 181\n    elif n==48:\n        return 183\n    elif n==49:\n        return 191\n    elif n==50:\n        return 193\n    elif n==51:\n        return 197\n    elif n==52:\n        return 201\n    elif n==53:\n        return 203\n    elif n==54:\n        return 209\n    elif n==55:\n        return 211\n    elif n==56:\n        return 223\n    elif n==57:\n        return 227\n    elif n==58:\n        return 229\n    elif n==59:\n        return 233\n    elif n==60:\n        return 239\n    elif n==61:\n        return 241\n    elif n==62:\n        return 243\n    elif n==63:\n        return 247\n    elif n==64:\n        return 251\n    elif n==65:\n        return 253\n    elif n==66:\n        return 257\n    elif n==67:\n        return 259\n    elif n==68:\n        return 263\n    elif n==69:\n        return 269\n    elif n==70:\n        return 271\n    elif n==71:\n        return 273\n    elif n==72:\n        return 277\n    elif n==73:\n        return 281\n    elif n==74:\n        return 283\n    elif n==75:\n        return 287\n    elif n==76:\n        return 301\n    elif n==77:\n        return 313\n    elif n==78:\n        return 317\n    elif n==79:\n        return 331\n    elif n==80:\n        return 363\n    elif n==81:\n        return 377\n    elif n==82:\n        return 399\n    elif n==83:\n        return 421\n    elif n==84:\n        return 439\n    elif n==85:\n        return 441\n    elif n==86:\n        return 447\n    elif n==87:\n        return 451\n    elif n==88:\n        return 459\n    elif n==89:\n        return 471\n    elif n==90:\n        return 473\n    elif n==91:\n        return 479\n    elif n==92:\n        return 481\n    elif n==93:\n        return 483\n    elif n==94:\n        return 487\n    elif n==95:\n        return 491\n    elif n==96:\n        return 493\n    elif n==97:\n        return 499\n    elif n==98:\n        return 503\n    elif n==99:\n        return 521\n    elif n==100:\n        return 533\n    elif n==101:\n        return 547\n    elif n==102:\n        return 555\n    elif n==103:\n        return 557\n    elif n==104:\n        return 571\n    elif n==105:\n        return 583\n    elif n==106:\n        return 591\n    elif n==107:\n        return 603\n    elif n==108:\n        return 607\n    elif n==109:\n        return 611\n    elif n==110:\n        return 613\n    elif n==111:\n        return 617\n    elif n==112:\n        return 619\n    elif n==113:\n        return 621\n    elif n==114:\n        return 623\n    elif n==115:\n        return 627\n    elif n==116:\n        return 631\n    elif n==117:\n        return 633\n    elif n==118:\n        return 637\n    elif n==119:\n        return 641\n    elif n==120:\n        return 643\n    elif n==121:\n        return 647\n    elif n==122:\n        return 655\n    elif n==123:\n        return 659\n    elif n==124:\n        return 671\n    elif n==125:\n        return 683\n    elif n==126:\n        return 697\n    elif n==127:\n        return 711\n    elif n==128:\n        return 713\n    elif n==129:\n        return 717\n    elif n==130:\n        return 719\n    elif n==131:\n        return 721\n    elif n==132:\n        return 723\n    elif n==133:\n        return 727\n    elif n==134:\n        return 731\n    elif n==135:\n        return 733\n    elif n==136:\n        return 737\n    elif n==137:\n        return 741\n    elif n==138:\n        return 743\n    elif n==139:\n        return 747\n    elif n==140:\n        return 751\n    elif n==141:\n        return 753\n    elif n==142:\n        return 757\n    elif n==143:\n        return 761\n    elif n==144:\n        return 763\n    elif n==145:\n        return 769\n    elif n==146:\n        return 771\n    elif n==147:\n        return 783\n    elif n==148:\n        return 791\n    elif n==149:\n        return 801\n    elif n==150:\n        return 803\n    elif n==151:\n        return 807\n    elif n==152:\n        return 811\n    elif n==153:\n        return 813\n    elif n==154:\n        return 817\n    elif n==155:\n        return 819\n    elif n==156:\n        return 821\n    elif n==157:\n        return 823\n    elif n==158:\n        return 827\n    elif n==159:\n        return 831\n    elif n==160:\n        return 833\n    elif n==161:\n        return 837\n    elif n==162:\n        return 841"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return None\n    L = sorted(L)\n    return L[:L.index(L[len(L)-1])+1]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    if len(L) > 0:\n        return [list1.pop(0)] + remove_kth_element(list1, L[1:])\n    else:\n        return []\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(list1)\n    if k == 1:\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #CODE GOES HERE\n    #MULTIPLE LOOPS\n    #before we start, check if the index of the list is less than the k'th element\n    #if not, go on\n    #else, change the first element of the list to the next element of the list\n    #if the element is at the end of the list, remove the last element\n    #else, go on\n    #if the index is at the end of the list\n    #then remove the element at index k\n    #else, change the k'th element of the list to the first element of the list\n    \n    k = L[0]\n    n = L[-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.pop(L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L.index(L[L"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # define lst \n    # define kth \n    # loop \n    # update lst \n    # return lst \n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # remove kth element and return new list\n    new_list = list1[:L]\n    new_list.extend(list1[L:])\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(\"removing the element kth to the right of element \", L, \" from the list is \", list1)\n    \n    # remove the k'th element from the list\n    list1.remove(L)\n    print(\"removing the element kth to the right of element \", L, \" from the list is \", list1)\n    \n    # return the list after removing the k'th element from the list\n    return list1\n    "
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # get a reference to the first element in the list\n    first_item = list1[0]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    if n == 0:\n        return 0\n    m = len(test_list[0])\n    if m == 0:\n        return 0\n    else:\n        return max([i[N] for i in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    return test_list[-1][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    maximum = 0\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # your code goes here\n    if N==0:\n        return 0\n    if N==1:\n        return test_list[0][0]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][N-1]\n    if N == 1:\n        return test_list[0][0]\n    result = test_list[0][N-1]\n    for i in range(N):\n        result = max(result, test_list[0][i])\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # print(test_list)\n    # print(len(test_list))\n    return max([i[N] for i in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda x: x[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #initially return the max\n    max = test_list[0][N-1]\n    for row in range(1,N):\n        if test_list[row][N-1] > max:\n            max = test_list[row][N-1]\n    return max\n    #write your code here\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) <= 1:\n        return test_list[0][0]\n    for i in range(len(test_list)):\n        if N < len(test_list[i]):\n            return max_of_nth(test_list[i], N)\n    return test_list[N-1][N-1]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append([i[0][0], i[0][1]])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        return lst[0] + merge(lst[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst: return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = lst[:]\n    len(lst) == 2\n    for i in range(len(lst)):\n        lst[i] = lst[i][0] + lst[i][1]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    out = []\n    for i in lst:\n        for j in i:\n            out.append(j)\n    return out\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) <= 1:\n        return lst\n    else:\n        return merge(lst[1:]) + [lst[0]] + merge(lst[1:]"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    temp_list = []\n    for i in lst:\n        temp_list.append(i[0])\n        temp_list.append(i[1])\n    return temp_list\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(0, len(lst)):\n        result.append(lst[i][0])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge2(lst1, lst2):\n        if len(lst1) == 0 and len(lst2) == 0:\n            return lst1\n        if len(lst1) == 0:\n            return lst2\n        if len(lst2) == 0:\n            return lst1\n        if lst1[0] > lst2[0]:\n            lst2.append(lst1[0])\n            lst1.pop(0)\n            return merge2(lst1, lst2)\n        else:\n            lst1.append(lst2[0])\n            lst2.pop(0)\n            return merge2(lst1, lst2)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return []\n    out = [None]*len(lst)\n    for i in range(len(lst)):\n        out[i] = lst[i][0] + lst[i][1]\n    return out\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for val in test_list:\n        cummulative_sum += val\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list[0:len(test_list)])\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # get sum from each element in the list\n    test_sum = 0\n    for i in test_list:\n        test_sum += i\n    \n    return test_sum\n    "
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(i for i in test_list if i!=0)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summ = 0\n    for item in test_list:\n        summ += item\n    return summ\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cummulative_sum = 0\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum = 0\n    for i in range(len(test_list)):\n        cum += test_list[i]\n    return cum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #make a new list that is the same length as the list\n    sum_list = []\n    for x in test_list:\n        if x not in sum_list:\n            sum_list.append(x)\n    # return the sum\n    return sum(sum_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) < 2:\n        return []\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    n = len(nums)\n    average = []\n    for i in range(n):\n        for j in range(i, n):\n            average.append(nums[i][j]/n)\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    nums_count = 0\n    for num in nums:\n        sum = sum + num\n        nums_count = nums_count + 1\n    avg = sum / nums_count\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num in nums:\n        sum = 0\n        for i in num:\n            sum = sum + i\n        average_list.append(sum / len(num))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for tup in nums:\n        avg.append(tup[0] + tup[1]/2)\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(n) / len(n), 3) for n in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # your code here\n    sum = []\n    for x in nums:\n        sum.append(sum(x))\n    return sum/len(nums)\n    \nprint(average_tuple(((1,2), (3,4), (5,6))))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO\n    return [sum(n)/len(n) for n in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in range(len(nums)):\n        sum = 0\n        for j in nums[i]:\n            sum += j\n        average.append(sum/len(nums[i]))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(num)/len(num))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = test_tup1 % test_tup2\n    return tuple(mod)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    mod = 0\n    for i in range(len(tup1)):\n        mod += tup1[i]*tup2[i]\n    return mod\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # tuple_modulo = ()\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                test_tup1[i] = test_tup1[i]%test_tup2[j]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # loop through the test tuple and check the modulo of the tuples \n    for element in test_tup1:\n        if element in test_tup2:\n            test_tup2[test_tup2.index(element)] = test_tup2[test_tup2.index(element)] % 1\n        else:\n            test_tup2[test_tup2.index(element)] = 0\n    return tuple(test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += test_tup1[i] * test_tup2[i]\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = test_tup1[0] % test_tup2[0]\n    return (mod,)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # remove the brackets from the test tuples\n    test_tup1 = test_tup1[1:]\n    test_tup2 = test_tup2[1:]\n    \n    # we are calculating the result of the modulo by the tuple length\n    result = tuple_modulo(test_tup1, test_tup2)\n    #return the result of the modulo\n    return result\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = [0] * steps # start from bottom left corner, to bottom right corner.\n    if (d == 0):\n        return steps\n    else:\n        jumps[0] = 1 # the first jump is 1, since it's the top of the plane.\n        # step from the top to the bottom:\n        jumps[1] = jumps[steps-1] + jumps[steps-2] # jump from top to bottom, to top\n        # step from bottom to the top:\n        jumps[steps-2] = jumps[steps-1] + jumps[steps-2] # jump from bottom to the top, to bottom\n        jumps[steps-1] = jumps[steps-1] + jumps[steps-2] # jump from bottom to the top, to bottom\n        jumps[steps-2] = jumps[steps-2] + jumps[steps-3] # jump from top to the top, to the top\n        jumps[steps-3] = jumps[steps-3] + jumps[steps-4] # jump from the top to the bottom, to the bottom\n        jumps[steps-4] = jumps[steps-4] + jumps[steps-5] # jump from the top to the top, to the top\n        jumps[steps-5] = jumps[steps-5] + jumps[steps-6] # jump from the top to the bottom, to the bottom\n        jumps[steps-6] = jumps[steps-6] + jumps[steps-7] # jump from the bottom to the bottom, to the bottom\n        jumps[steps-7] = jumps[steps-7] + jumps[steps-8] # jump from the bottom to the bottom, to the bottom\n        jumps[steps-8] = jumps[steps-8] + jumps[steps-9] # jump from the bottom to the bottom, to the bottom\n        jumps[steps-9] = jumps[steps-9] + jumps[steps-10] # jump from the bottom to the top, to the top\n        jumps[steps-10] = jumps[steps-10] + jumps[steps-11] # jump from the top to the top, to the top\n        jumps[steps-11] = jumps[steps-11] + jumps[steps-12] # jump from the top to the top, to the top\n        jumps[steps-12] = jumps[steps-12] + jumps[steps-13] # jump from the top to the top, to the top\n        jumps[steps-13] = jumps[steps-13] + jumps[steps-14] # jump from the top to the top, to the top\n        jumps[steps-14] = jumps[steps-14] + jumps[steps-15] # jump from the top to the top, to the top\n        jumps[steps-15] = jumps[steps-15] + jumps[steps-16] # jump from the top to the top, to the top\n        jumps[steps-16] = jumps[steps-16] + jumps[steps-17] # jump from the top to the top, to the top\n        jumps[steps-17] = jumps[steps-17] + jumps[steps-18] # jump from the top to the top, to the top\n        jumps[steps-18] = jumps[steps-18] + jumps[steps-19] # jump from the top to the top, to the top\n        jumps[steps-19] = jumps[steps-19] + jumps[steps-20] # jump from the top to the top, to the top\n        jumps[steps-20] = jumps[steps-20] + jumps[steps-21] # jump from the top to the top, to the top\n        jumps[steps-21] = jumps[steps-21] + jumps[steps-22] # jump from the top to the top, to the top\n        jumps[steps-22] = jumps[steps-22] + jumps[steps-23] # jump from the top to the top, to the top\n        jumps[steps-23] = jumps[steps-23] + jumps[steps-24] # jump from the top to the top, to the top\n        jumps[steps-24] = jumps[steps-24] + jumps[steps-25] # jump from the top to the top, to the top\n        jumps[steps-25] = jumps[steps-25] + jumps[steps-26] # jump from the top to the top, to the top\n        jumps[steps-26] = jumps[steps-26] + jumps[steps-27] # jump from the top to the top, to the top\n        jumps[steps-27] = jumps[steps-27] + jumps[steps-28] # jump from the top to the top, to the top\n        jumps[steps-28] = jumps[steps-28] + jumps[steps-29] # jump from the top to the top, to the top\n        jumps[steps-29] = jumps[steps-29] + jumps[steps-30] # jump from the top to the top, to the top\n        jumps[steps-30] = jumps[steps-30] + jumps[steps-31] # jump from the top to the top, to the top\n        jumps[steps-31] = jumps[steps-31] + jumps[steps-32] # jump from the top to the top, to the top\n        jumps[steps-32] = jumps[steps-32] + jumps[steps-33] # jump from the top to the top, to the top\n        jumps[steps-33] = jumps[steps-33] + jumps[steps-34] # jump from the top to the top, to the top\n        jumps[steps-34] = jumps[steps-34] + jumps[steps-35] # jump from the top to the top, to the top\n        jumps[steps-35] = jumps[steps-35] + jumps[steps-36] # jump from the top to the top, to the top\n        jumps[steps-36] = jumps[steps-36] + jumps[steps-37] # jump from the top to the top, to the top\n        jumps[steps-37] = jumps[steps-37] + jumps[steps-38] # jump from the top to the top, to the top\n        jumps[steps-38] = jumps[steps-38] + jumps[steps-39] # jump from the top to the top, to the top\n        jumps[steps-39] = jumps[steps-39] + jumps[steps-40] # jump from the top to the top, to the top\n        jumps[steps-40] = jumps[steps-40] + jumps[steps-41] # jump from the top to the top, to the top\n        jumps[steps-41] = jumps[steps-41] + jumps[steps-42] # jump from the top to the top, to the top\n        jumps[steps-42] = jumps[steps-42] + jumps[steps-43] # jump from the top to the top, to the top\n        jumps[steps-43] = jumps[steps-43] + jumps[steps-44] # jump from the top to the top, to the top\n        jumps[steps-44] = jumps[steps-44] + jumps[steps-45] # jump from the top to the top, to the top\n        jumps[steps-45] = jumps[steps-45] + jumps[steps-46] # jump from the top to the top, to the top\n        jumps[steps-46] = jumps[steps-46] + jumps[steps-47] # jump from the top to the top, to the top\n        jumps[steps-47] = jumps[steps-47] + jumps[steps-48] # jump from the top to the top, to the top\n        jumps[steps-48] = jumps[steps-48] + jumps[steps-49] # jump from the top to the top, to the top\n        jumps[steps-49] = jumps[steps-49] + jumps[steps-50] # jump from the top to the top, to the top\n        jumps[steps-50] = jumps[steps-50] + jumps[steps-51] # jump from the top to the top, to the top\n        jumps[steps-51] = jumps[steps-51] + jumps[steps-52] # jump from the top to the top, to the top\n        jumps[steps-52] = jumps[steps-52] + jumps[steps-53] # jump from the top to the top, to the top\n        jumps[steps-53] = jumps[steps-53] + jumps[steps-54] # jump from the top to th"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # def check_Jumps(steps, d):\n    #     # if(steps == 0):\n    #     #     return 0\n    #     # if(steps == 1):\n    #     #     return d\n    #     # else:\n    #     #     return check_Jumps(steps-1, d)\n    #     if(steps < 0):\n    #         return 0\n    #     if(steps == 0):\n    #         return d\n    #     if(steps == 1):\n    #         return 0\n    #     if(steps % 2 == 0):\n    #         return check_Jumps(steps - 1, d)\n    #     else:\n    #         return (d - 1)\n    # return check_Jumps(steps, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    d_step = d\n    print('steps = ', steps)\n    print('d_step = ', d_step)\n    if steps > d_step:\n        print('error')\n        return 0\n    elif steps == d_step:\n        print('found')\n        print('Jumps required: ', steps)\n        print('Jumps required: ', d_step)\n        return d_step\n    else:\n        print('error')\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    while d < steps:\n        jumps += 1\n        d += 1\n        d = d%steps\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Traverse the matrix to find the number of jumps required \n    # Note: the point of origin is (0, 0)\n    #\n    # Complexity:\n    #\n    #    steps = count of steps\n    #\n    # Parameters:\n    #\n    #   steps: int, number of steps to look for \n    #   d: int, distance to the origin from the point of origin\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min_jumps = 0\n    i = 0\n    while i < len(steps):\n        if steps[i] == d:\n            min_jumps += 1\n        i += 1\n    return min_jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    if d < 0: \n        return -1\n    # initialize memory with the given parameters \n    memory = [[0 for x in range(steps+1)] for y in range(steps+1)] \n    # traverse the given d position\n    for i in range(steps): \n        memory[i][0] = 1 # the point with the minimum jumps is at (0, 0) \n    # initialize the jumps variable \n    jumps = 0\n    # traverse the matrix \n    for i in range(steps): \n        for j in range(steps): \n            # check if the current position has a jump \n            if memory[i+1][j] == 1 and memory[i][j+1]!= 1: \n                # check if the jump can be made \n                if memory[i+1][j+1]!= 1: \n                    # if the jump is not made, make a jump \n                    jumps += 1 \n                memory[i][j] = jumps \n    return jumps \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d == 0):\n        return 1\n    elif (d < 0):\n        return 0\n    elif (steps == 0):\n        return 1\n    elif (steps > 0):\n        return min_Jumps(steps - 1, d) + min_Jumps(steps - 1, d - 1)\n    "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x_coord = []\n    y_coord = []\n    x_coord.append(0)\n    y_coord.append(0)\n    min_jumps = 1\n    if d < 0:\n        steps = -steps\n    for i in range(steps):\n        x_coord.append(x_coord[i] + d)\n        y_coord.append(y_coord[i] + d)\n        \n    for i in range(steps):\n        if (x_coord[i] == d and y_coord[i] == d):\n            continue\n        else:\n            if (abs(x_coord[i]) + abs(y_coord[i])) < abs(x_coord[i]) + abs(y_coord[i]):\n                min_jumps = -min_jumps\n            else:\n                min_jumps = -min_jumps\n            \n    return min_jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #create a temp list to store the smaller numbers\n    temp_list = []\n    #create a temp_list to store the larger numbers\n    temp_list = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] < nums2[j]:\n                temp_list.append(nums1[i])\n            else:\n                temp_list.append(nums2[j])\n        \n    return temp_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2), \"length of the two lists should be same\"\n    i = 0\n    j = 0\n    ans = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] > nums2[j]:\n            ans.append(nums1[i])\n            i += 1\n        else:\n            ans.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        ans.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        ans.append(nums2[j])\n        j += 1\n    return ans\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)==0 or len(nums2)==0:\n        return([])\n    else:\n        temp=nums1+nums2\n        return(temp)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [[i/j for i,j in zip(nums1,nums2)]]\n    \n    \ndef main():\n    nums1 = [2,4,6,8]\n    nums2 = [1,3,5]\n    print(div_list(nums1,nums2))\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num for num in nums1 if num in nums2]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # you can write a loop or for loop using for loop\n    div_list=[]\n    for i in range(len(nums1)):\n        if nums1[i] % 2 == 0:\n            div_list.append(nums1[i])\n        else:\n            div_list.append(nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def recur(nums1,nums2,i,j):\n        if j==len(nums1):\n            print(nums1[i:j+1])\n        else:\n            print(nums1[i:j+1], end=' ')\n            recur(nums1,nums2,i+1,j)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div = []\n    for i in range(len(nums2)):\n        if nums2[i] not in div:\n            div.append(nums2[i])\n    for j in range(len(nums1)):\n        if nums1[j] not in div:\n            div.append(nums1[j])\n    print(div)\n    return div\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # nums1 = [1,2,3,4]\n    # nums2 = [1,3,4,5]\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    # print(nums1,nums2)\n    i = 0\n    j = 0\n    # while i<len(nums1) and j<len(nums2):\n    while i<len(nums1) and j<len(nums2):\n        if nums1[i] > nums2[j]:\n            nums1[i],nums2[j] = nums2[j],nums1[i]\n        else:\n            i = i+1\n            j = j+1\n    print(nums1)\n    print(nums2)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = test_str\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            new_str = new_str.replace(test_str[i],'')\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # First: If the string is empty, return nothing\n    # Loop through the string and check if it's the last character\n    # If it's not, then add it to the list.\n    # If it's the last character, then remove it.\n    # If it's not, then return nothing\n    if len(test_str) == 0:\n        return\n    if test_str[-1] =='':\n        test_str = test_str[0:-1]\n    if test_str[-1] == '.':\n        test_str = test_str[0:-1]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in range(0, len(test_str)):\n        if test_str[i]!='':\n            new_str += test_str[i]\n        else:\n            new_str += str(i + 1)\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    #convert to string\n    string = test_str\n    for i in string:\n        new_str += str(i) +''\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in test_str:\n        i=i.replace(',','.')\n        i=i.replace('.','')\n        test_str=test_str.replace(i,'.')\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_1 = list(test_str)\n    test_str_2 = []\n    for i in test_str:\n        test_str_2.append(i)\n    test_str_2.sort()\n    test_str_2.reverse()\n    test_str_2 = \"\".join(test_str_2)\n    return test_str_1, test_str_2\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            lst.append(test_str[i])\n    return ''.join(lst)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # your code goes here\n    # declare variables\n    string = test_str\n    if string == \"\":\n        return \n    new_string = \"\"\n    for i in string:\n        if i == '0' or i == '1' or i == '2' or i == '3' or i == '4' or i == '5' or i == '6' or i == '7' or i == '8' or i == '9':\n            new_string += i\n        else:\n            new_string += i + '0'\n    # your code goes here\n    # write a loop that will print the number\n    # depending on what the user wants to move\n    # e.g. '1' will print the next number\n    # e.g. '0' will print the previous number\n    while new_string[-1] == '0':\n        print(new_string[0], end = '')\n        new_string = new_string[1:]\n    print(new_string[0:len(new_string) - 1])\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = [s for s in test_str.split()]\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i][::-1]\n    return''.join(str_list)\n    \ndef count_tokens(test_str):\n    '''\n    Write a function that takes a string as input and counts the number of\n    tokens in it. For example: \"This is a sentence\" returns 4 (exclamation\n    and single).\n    '''\n    str_list = [s for s in test_str.split()]\n    return len(str_list)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    max_size = 0\n    l = 0\n    r = 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    current_size = 0\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    nums = sorted(a)\n    s = set(a)\n    count = 0\n    for i in range(len(nums)-1):\n        if nums[i] % nums[i+1] in s:\n            count += 1\n        if count > 1:\n            break\n    return len(nums) - count\n    \ndef main():\n    print(\"Maximum subset size of a list of numbers is : \" + str(largest_subset([3, 7, 5, 24, 8])))\n    print(\"Maximum subset size of a list of numbers is : \" + str(largest_subset([1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, "
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return find_largest_subset(a, 0, 0, a[0], a[1:])\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def subset(a,s,i,j,arr):\n        #if not a[i] in arr and not a[j] in arr:\n        #    return True\n        if i==j:\n            return False\n        if not a[i] in arr and not a[j] in arr:\n            arr.append(a[i])\n            return subset(a,s,i+1,j,arr)\n        if a[i]%a[j]==0:\n            arr.append(a[i])\n            return subset(a,s,i+1,j,arr)\n        else:\n            arr.append(a[j])\n            return subset(a,s,i,j+1,arr)\n    n=len(a)\n    s=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if not subset(a,s,i,j,[]):\n                return s\n            s+=1\n    return s\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from math import gcd\n    i = 0\n    n = len(a)\n    while i < n:\n        if gcd(a[i], a[i + 1]) <= 1:\n            if a[i] % a[i + 1] == 0:\n                return a[i]\n            else:\n                i += 2\n        else:\n            i += 1\n    return a[-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return []\n    def check(n, a):\n        for i in range(1, n+1):\n            if a[n-i] % i == 0:\n                return False\n        return True\n    if check(len(a), a):\n        return [a[-1]]\n    def next_prime(x):\n        for i in range(x, 1000000):\n            y = i + i\n            if y > 1000000:\n                continue\n            if y < x * 2 + 1:\n                return y\n    def prime_generator(start):\n        for n in range(start, 1000000):\n            if prime(n) and prime_generator(n):\n                yield n\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    subset = [None] * len(a)\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i] % a[j] == 0:\n                if subset[j] == None or subset[j] > a[i] / a[j]:\n                    subset[j] = a[i]\n                    size += a[i] // a[j]\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = []\n    \n    # declaring a helper function to find the largest subset\n    def largest_subset_helper(nums, subset, curr_sum):\n        if len(subset) == len(nums):\n            # we have found a complete set of a subset\n            if curr_sum == nums[subset[-1]]:\n                max_subset.append(subset[:])\n            return\n        for i in range(len(nums)):\n            if subset[i] < i:\n                continue\n            \n            if curr_sum + nums[i] <= nums[subset[i]]:\n                continue\n            \n            subset.append(i)\n            largest_subset_helper(nums, subset, curr_sum + nums[i])\n            subset.pop()\n            \n    \n    \n    largest_subset_helper(a, [], 0)\n    \n    return max(max_subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\ndef max_subset_size(a):\n    '''\n    Write a function to return the maximum size of a subarray of a given length N, with a given value.\n    '''\n    pass\ndef factorial(n):\n    '''\n    Write a function to find the factorial of a given integer.\n    '''\n    pass\ndef fibonacci(n):\n    '''\n    Write a function that returns the n-th fibonacci number.\n    '''\n    pass\ndef is_prime(n):\n    '''\n    Write a function that returns true if n is a prime number.\n    '''\n    pass\ndef count_prime_factors(n):\n    '''\n    Write a function that returns the number of prime factors of the input number n.\n    '''\n    pass\ndef is_prime_number(n):\n    '''\n    Write a function that returns true if a number is prime or not.\n    '''\n    pass\ndef prime_factors(n):\n    '''\n    Write a function that returns a list of all prime factors of an integer.\n    '''\n    pass\ndef binary_search(x):\n    '''\n    Write a function that finds the index of the largest element in a list x.\n    '''\n    pass\ndef is_prime_factor(n, i):\n    '''\n    Write a function that returns true if a number is prime factor of the input number.\n    '''\n    pass\ndef factor(n):\n    '''\n    Write a function that returns the factorial of an input number.\n    '''\n    pass\ndef palindrome(n):\n    '''\n    Write a function that returns true if a number is a palindrome.\n    '''\n    pass\ndef reverse(n):\n    '''\n    Write a function that reverses a string.\n    '''\n    pass\ndef kth_smallest(n, k):\n    '''\n    Write a function that returns the k-th smallest number in a list.\n    '''\n    pass\ndef add_to_list(l, x):\n    '''\n    Write a function that adds an element to a list.\n    '''\n    pass\ndef find_l_m_index(a, x, l):\n    '''\n    Write a function that finds the index of the first element in a list that is greater than x.\n    '''\n    pass\ndef find_l_m_index(a, x, l):\n    '''\n    Write a function that finds the index of the first element in a list that is less than x.\n    '''\n    pass\ndef find_l_m_index(a, x, l):\n    '''\n    Write a function that finds the index of the first element in a list that is greater than x and less than or equal to x.\n    '''\n    pass\ndef index_of_first_element(l):\n    '''\n    Write a function that returns the index of the first element in a list that is greater than 0.\n    '''\n    pass\ndef index_of_last_element(l):\n    '''\n    Write a function that returns the index of the last element in a list that is greater than 0.\n    '''\n    pass\ndef is_prime_range(n, start, end):\n    '''\n    Write a function that returns true if a number is a prime range between start and end inclusive.\n    '''\n    pass\ndef is_prime_range_2(n, start, end):\n    '''\n    Write a function that returns true if a number is a prime range between start and end inclusive.\n    '''\n    pass\ndef is_prime_range_3(n, start, end):\n    '''\n    Write a function that returns true if a number is a prime range between start and end inclusive.\n    '''\n    pass\ndef sum_of_prime_factors(n):\n    '''\n    Write a function that returns the sum of all prime factors of an integer.\n    '''\n    pass\ndef sum_of_prime_factors_2(n):\n    '''\n    Write a function that returns the sum of all prime factors of an integer.\n    '''\n    pass\ndef sum_of_prime_factors_3(n):\n    '''\n    Write a function that returns the sum of all prime factors of an integer.\n    '''\n    pass\ndef sum_of_prime_factors_4(n):\n    '''\n    Write a function that returns the sum of all prime factors of an integer.\n    '''\n    pass\ndef sum_of_prime_factors_5(n):\n    '''\n    Write a function that returns the sum of all prime factors of an integer.\n    '''\n    pass\ndef sum_of_prime_factors_6(n):\n    '''\n    Write a function that returns the sum of all prime factors of an integer.\n    '''\n    pass\ndef sum_of_prime_factors_7(n):\n    '''\n    Write a function that returns the sum of all prime factors of an integer.\n    '''\n    pass\ndef sum_of_prime_factors_8(n):\n    '''\n    Write a function that returns the sum of all prime factors of an integer.\n    '''\n    pass\ndef factorial_range(n):\n    '''\n    Write a function that returns the factorial of a range from 0 to n inclusive.\n    '''\n    pass\ndef count_prime_factors_2(n):\n    '''\n    Write a function that returns the number of prime factors of a number that are less than or equal to n.\n    '''\n    pass\ndef prime_factors_range(n):\n    '''\n    Write a function that returns a list of all prime factors of a number that are less than or equal to n.\n    '''\n    pass\ndef prime_factors_range_2(n):\n    '''\n    Write a function that returns a list of all prime factors of a number that are less than or equal to n.\n    '''\n    pass\ndef prime_factors_range_3(n):\n    '''\n    Write a function that returns a list of all prime factors of a number that are less than or equal to n.\n    '''\n    pass\ndef prime_factors_range_4(n):\n    '''\n    Write a function that returns a list of all prime factors of a number that are less than or equal to n.\n    '''\n    pass\ndef prime_factors_range_5(n):\n    '''\n    Write a function that returns a list of all prime factors of a number that are less than or equal to n.\n    '''\n    pass\ndef prime_factors_range_6(n):\n    '''\n    Write a function that returns a list of all prime factors of a number that are less than or equal to n.\n    '''\n    pass\ndef is_prime_factor_range(n, i):\n    '''\n    Write a function that returns true if a number is a prime factor of the input number.\n    '''\n    pass\ndef is_prime_factor_range_2(n, i):\n    '''\n    Write a function that returns true if a number is a prime factor of the input number.\n    '''\n    pass\ndef is_prime_factor_range_3(n, i):\n    '''\n    Write a function that returns true if a number is a prime factor of the input number.\n    '''\n    pass\ndef is_prime_factor_range_4(n, i):\n    '''\n    Write a function that returns true if a number is a prime factor of the input number.\n    '''\n    pass\ndef is_prime_factor_range_5(n, i):\n    '''\n    Write a function that returns true if a number is a prime factor of the input number.\n    '''\n    pass\ndef is_prime_factor_range_6(n, i):\n    '''\n    Write a function that returns true if a number is a prime factor of the input number.\n    '''\n    pass\ndef is_prime_factor_range_7(n, i):\n    '''\n    Write a function that returns true if a number is a prime factor of the input number.\n    '''\n    pass\ndef is_prime_factor_range_8(n, i):\n    '''\n    Write a function that returns true if a number is a prime factor of the input number.\n    '''\n    pass\ndef is_prime_factor"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        if arr1 == arr2:\n            return arr1[0]\n        return (arr1[0] + arr2[0])/2\n    if n%2 == 0:\n        mid = (n//2) + (n//2 - 1)\n        median = (arr1[mid] + arr2[mid])/2\n    else:\n        median = (arr1[n//2] + arr2[n//2])/2\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1_sorted = sorted(arr1)\n    arr2_sorted = sorted(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 1:\n        return 0\n    if n == 2:\n        return arr1[0] + arr2[0]\n    \n    \n    # find the first element in the array\n    first = arr1[0]\n    # find the second element in the array\n    second = arr2[0]\n    # find the two index of the median element\n    index1 = 0\n    index2 = 0\n    # iterate over the array\n    while index1 < len(arr1) and index2 < len(arr2):\n        if arr1[index1] <= arr2[index2]:\n            # move the index of the first element to the index of the second element\n            index1 += 1\n        else:\n            index2 += 1\n            \n    # if the array is sorted, return the median element\n    if index1 == len(arr1) and index2 == len(arr2):\n        return (first + second) / 2\n    \n    # if the array is not sorted, find the median element\n    else:\n        return (first + second) / 2\n    \n    \ndef get_median_2(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 1:\n        return 0\n    if n == 2:\n        return arr1[0] + arr2[0]\n    \n    # find the first element in the array\n    first = arr1[0]\n    # find the second element in the array\n    second = arr2[0]\n    # find the two index of the median element\n    index1 = 0\n    index2 = 0\n    # iterate over the array\n    while index1 < len(arr1) and index2 < len(arr2):\n        if arr1[index1] <= arr2[index2]:\n            # move the index of the first element to the index of the second element\n            index1 += 1\n        else:\n            index2 += 1\n            \n    # if the array is sorted, return the median element\n    if index1 == len(arr1) and index2 == len(arr2):\n        return (first + second) / 2\n    \n    # if the array is not sorted, find the median element\n    else:\n        return (first + second) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr1[1])/2\n    \n    if n % 2 == 0:\n        m1 = get_median(arr1[0:int(n/2)], arr2[0:int(n/2)], n/2)\n        m2 = get_median(arr1[int(n/2):n], arr2[int(n/2):n], n/2)\n        if m1 > m2:\n            return m1\n        return m2\n    else:\n        m1 = get_median(arr1[0:int(n/2)], arr2[int(n/2):], n/2)\n        m2 = get_median(arr1[int(n/2):n], arr2[0:int(n/2)], n/2)\n        if m1 > m2:\n            return m1\n        return m2"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    else:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return 0\n    if n <= 1:\n        return get_median(arr1, arr2, n - 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return arr1[0]\n    if n == 1:\n        return arr2[0]\n    if n == 2:\n        return (arr1[0] + arr2[0]) / 2.0\n    return get_median(arr1[:n//2], arr2[:n//2], n//2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # The median is given by the middle value of the two sorted lists.\n    # We cannot take the middle value of the two lists as it is the index\n    # of the smallest element, which means the median is the leftmost one.\n    # Thus, we need to find the index of the median element by taking the\n    # index of the smallest element.\n    #\n    # This means, on the right side, median = (sorted[0] + sorted[len(sorted) // 2]\n    # and median = (sorted[(len(sorted) + 1) // 2] if len(sorted) % 2 == 0\n    #\n    # or\n    # median = sorted[len(sorted) // 2] if len(sorted) % 2 == 0\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    mid = len(arr1) // 2\n    if n % 2 == 0:\n        return (arr1[mid] + arr2[mid]) / 2\n    else:\n        return (arr1[mid] + arr2[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    sorted_arr1_index = 0\n    sorted_arr2_index = 0\n    \n    if len(arr1) > len(arr2):\n        for i in range(len(arr1)):\n            if sorted_arr1_index >= len(sorted_arr1):\n                sorted_arr1_index = 0\n                break\n            if arr1[sorted_arr1_index] > arr2[sorted_arr2_index]:\n                sorted_arr1_index += 1\n            else:\n                sorted_arr2_index += 1\n                \n        return (sorted_arr1[len(arr1)//2])\n    else:\n        for i in range(len(arr2)):\n            if sorted_arr2_index >= len(sorted_arr2):\n                sorted_arr2_index = 0\n                break\n            if arr2[sorted_arr2_index] > arr1[sorted_arr1_index]:\n                sorted_arr2_index += 1\n            else:\n                sorted_arr1_index += 1\n        return (sorted_arr2[len(arr2)//2])\n    \n    \ndef median_string(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted strings of the same length.\n    '''\n    return(get_median(arr1, arr2, n))\n    \n    \ndef count_elem(arr,n):\n    '''\n    Write a function to find the count of elements in an array.\n    '''\n    counter = 0\n    for i in range(len(arr)):\n        if arr[i] == n:\n            counter += 1\n    return(counter)\n    \n    \ndef count_duplicates(arr, n):\n    '''\n    Write a function that returns the number of unique elements of the array.\n    '''\n    unique_elements = []\n    counter = 0\n    for i in range(len(arr)):\n        if arr[i] not in unique_elements:\n            unique_elements.append(arr[i])\n        else:\n            counter += 1\n    return(counter)\n    \n    \ndef find_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    sorted_arr1_index = 0\n    sorted_arr2_index = 0\n    \n    if len(arr1) > len(arr2):\n        for i in range(len(arr1)):\n            if sorted_arr1_index >= len(sorted_arr1):\n                sorted_arr1_index = 0\n                break\n            if arr1[sorted_arr1_index] > arr2[sorted_arr2_index]:\n                sorted_arr1_index += 1\n            else:\n                sorted_arr2_index += 1\n                \n        return (sorted_arr1[len(arr1)//2])\n    else:\n        for i in range(len(arr2)):\n            if sorted_arr2_index >= len(sorted_arr2):\n                sorted_arr2_index = 0\n                break\n            if arr2[sorted_arr2_index] > arr1[sorted_arr1_index]:\n                sorted_arr2_index += 1\n            else:\n                sorted_arr1_index += 1\n        return (sorted_arr2[len(arr2)//2])\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==1:\n        return nums\n    return [nth_nums(x,n-1) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Write your code here\n    if n==1 or len(nums)==0:\n        return []\n    elif n==2:\n        return [nums[0]**2]\n    elif n==3:\n        return [nums[0]**3]\n    else:\n        for i in range(n-1):\n            nums[i]*nums[i+1]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [1]*len(nums)\n    for i in range(len(nums)):\n        result[i] = nums[i]**n\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    i=0\n    temp=[]\n    while (i<len(nums)):\n        temp.append(nums[i]**i)\n        i=i+1\n    return temp\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    nth_nums=[]\n    for num in nums:\n        nth_nums.append(num**n)\n    return nth_nums\n    \ndef hailstone(n):\n    '''\n    Return the numbers that divide n and return True.\n    '''\n    if n==1:\n        return [1]\n    if n==0:\n        return [1]\n    else:\n        if n%2==0:\n            return hailstone(n//2)+[n//2]\n        else:\n            return hailstone(n//2)+[n//2]\n            \nn=int(input())\nprint(hailstone(n))"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def compute(nums,power):\n        if power == 0:\n            return 1\n        power += 1\n        for index in range(len(nums)):\n            power *= nums[index]\n        return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for n in nums:\n        res.append(n**n)\n    return re"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nth_nums(nums[1:],n)**nums[0]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**i for i in range(len(nums)) if n**i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # write your code here\n    if n==1:\n        return [n]\n    if n==0:\n        return []\n    else:\n        return nth_nums(n-1,n) + [n**2]\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.lower()\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not string:\n        return None\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == \"\":\n        return True\n    return string.upper() == string\n    \nprint(is_upper(\"TestString\"))\nprint(is_upper(\"\"))\nprint(is_upper(\"Great!Hello World!\"))\nprint(is_upper(\"Hello World!\"))\nprint(is_upper(\"1234567890\"))\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for i in string:\n        if i.isupper():\n            return i.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    try:\n        string.upper()\n    except:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string) is not str:\n        raise TypeError(\"string is not str\")\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            new_string += string[i].lower()\n        else:\n            new_string += string[i].upper()\n    return new_string\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    swappedList = []\n    \n    for i in range(len(newList)):\n        swappedList.append(newList[i])\n        swappedList.append(newList[len(newList)-1-i])\n    return swappedList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)>1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)!= 0:\n        swap = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = swap\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList.append(newList.pop(0))\n    newList.append(newList.pop(len(newList)-1))\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = [newList[1], newList[0]]\n    newList = [newList[0], newList[1]]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = []\n    for i in range(0,len(newList)):\n        new_list.append(newList[i])\n    new_list[0], new_list[-1] = new_list[-1], new_list[0]\n    return new_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # TODO: Create a new list of the same length as the old list\n    new_List = []\n    \n    # TODO: Create an empty list, but remove the first element of the list\n    first = newList[0]\n    new_List.append(first)\n    new_List.pop(0)\n    \n    # TODO: Add the elements of the new list to the old list\n    for i in range(len(newList)):\n        new_List.append(newList[i])\n        \n    # TODO: Return the new list\n    return new_List\n    "
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = [newList[1], newList[0]]\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i = 0\n    j = len(newList)-1\n    newList[i], newList[j] = newList[j], newList[i]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def find_area(r) :\n        \n        if r < 0 :\n            print(\"Radius less than or equal to 0. Please enter a positive number.\")\n            return\n        \n        return (pi*r**2)/2\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3*r*(r-1))/2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi, sqrt\n    from math import floor\n    import random\n    def area(r) :\n        return pi*(r**2)\n    def diam(r) :\n        return 2*r\n    def rand(n) :\n        return random.randint(0,n-1)\n    def sec(n) :\n        return 2*pi*n\n    def main() :\n        a = int(input(\"Enter a: \"))\n        b = int(input(\"Enter b: \"))\n        c = int(input(\"Enter c: \"))\n        d = int(input(\"Enter d: \"))\n        area = area(a)*area(b)*area(c)*area(d)\n        print(\"Area of the triangle is : \", area)\n        print(\"The diameter of the triangle is : \", diam(a), diam(b), diam(c), diam(d))\n        print(\"Random number: \", rand(a), rand(b), rand(c), rand(d))\n        print(\"The three sides are\", \"a\", \"b\", \"c\", \"d\")\n        while True :\n            try :\n                s = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if s >= 0 :\n                    if s == a or s == b or s == c or s == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                    if t == a or t == b or t == c or t == d :\n                        break\n                    else :\n                        print(\"Invalid input!\")\n                else :\n                    print(\"Invalid input!\")\n        print(\"Checking...\")\n        while True :\n            try :\n                t = int(input(\"What number do you want to check? \"))\n            except ValueError :\n                print(\"Invalid input!\")\n            else :\n                if t >= 0 :\n                "
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Calculate the sides of the triangle:\n    s = 2 * (r+1)\n    #Find the base of the triangle:\n    b = math.sqrt(s)\n    #Find the angle of the circle:\n    angle = math.acos((b**2-s**2)**(1/2))\n    #Check if the triangle is inscribed in the circle:\n    if (math.fabs(angle) < math.pi) :\n        #Return the area of the triangle\n        return r * math.pi * s\n    else :\n        #Return a default value if the triangle is not inscribed in the circle:\n        return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    # write your code here\n    for i in range(1,r+1):\n        for j in range(1,r+1):\n            area += (j**2)*(1/3)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math \n    a = math.pi * (r **2)\n    return(a)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1,r + 1) :\n        for j in range(1,r + 1) :\n            area += (i * j)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return int(r * r * 0.5)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2) * math.sin(math.pi / 3)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>=end:\n        return end\n    pivot=start\n    for i in range(start,end):\n        if array[i]<array[pivot]:\n            pivot+=1\n    if array[pivot]==array[end]:\n        return find_First_Missing(array,end,pivot)\n    else:\n        return find_First_Missing(array,start,pivot-1)\n    \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>=end:\n        return end\n    pivot=start\n    for i in range(start,end):\n        if array[i]>array[pivot]:\n            pivot+=1\n    if array[pivot]==array[end]:\n        return find_Second_Missing(array,end,pivot)\n    else:\n        return find_Second_Missing(array,start,pivot-1)\n    \ndef find_Second_Missing_v2(array,start=0,end=None):\n    '''\n    Write a python function to find the second missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>=end:\n        return end\n    pivot=start\n    for i in range(start,end):\n        if array[i]>array[pivot]:\n            pivot+=1\n    if array[pivot]==array[end]:\n        return find_Second_Missing_v2(array,end,pivot)\n    else:\n        return find_Second_Missing_v2(array,start,pivot-1)\n    \ndef find_Third_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the third missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>=end:\n        return end\n    pivot=start\n    for i in range(start,end):\n        if array[i]>array[pivot]:\n            pivot+=1\n    if array[pivot]==array[end]:\n        return find_Third_Missing(array,end,pivot)\n    else:\n        return find_Third_Missing(array,start,pivot-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end:\n        return 0\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start >= end:\n        return 0\n    if array[start] > array[end]:\n        return end\n    mid = int((start + end) / 2)\n    if array[mid] == mid:\n        return mid\n    if array[mid] < array[mid + 1]:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start == end:\n        return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if end-start <= 1:\n        return start\n    \n    mid = start + (end-start)//2\n    if array[mid] == mid:\n        if array[mid+1] == mid:\n            return find_First_Missing(array,mid+2,end)\n        if array[mid-1] == mid:\n            return find_First_Missing(array,start,mid-1)\n    else:\n        if array[mid+1] < array[mid]:\n            return find_First_Missing(array,mid+2,end)\n        else:\n            return find_First_Missing(array,start,mid-1)\n    \n    \n    \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start == end:\n        return start\n    \n    mid = (start+end)//2\n    \n    if array[mid] == mid:\n        return mid\n    \n    if array[mid] <= mid:\n        return find_First_Missing(array,mid+1,end)\n    \n    return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end == 0:\n        return start\n    for i in range(start,end):\n        if array[i] == None:\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start < 0:\n        start = 0\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start == end:\n        return -1\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    print(\"\\nFunction: replace_spaces\")\n    print(\"\\nInput:\", string)\n    print(\"\\nOutput:\", string.replace(\" \",\"%20\"))\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in range(len(string)):\n        if string[i] == \" \":\n            string = string.replace(\" \",\"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char == \" \":\n            new_string += \"%20\"\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Determine the length of the string to be modified\n    length = len(string)\n    # Iterate through the characters in the string\n    for char in string:\n        # If the current character is a space, replace it with %20\n        if char =='':\n            string = string.replace(' ', '%20')\n        # If it is not a space, add it to the string\n        else:\n            string = string.replace(char, '%20')\n    # Return the modified string\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join([i.replace(' ', '%20') for i in string.split()])\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20'"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list)):\n        if (list[i] % 2) == 0:\n            even_list.append(list[i])\n        else:\n            odd_list.append(list[i])\n    print(\"Even numbers in the list are: \", even_list)\n    print(\"Odd numbers in the list are: \", odd_list)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num_list = []\n    odd_num_list = []\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    for i in list:\n        if i % 2 == 0:\n            list1.append(i)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = [] \n    for i in range(0,len(list)): \n        if list[i] % 2 == 0: \n            result.append(list[i]) \n    return result\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [num for num in list if num % 2 == 0]\n    \n    #list = list(range(100))\n    #print(list)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print('list =',list)\n    # your code here \n    even_numbers = []\n    for x in list:\n        if x % 2 == 0:\n            even_numbers.append(x)\n    print('even_numbers =',even_numbers)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if i % 2 == 0:\n            even_num.append(i)\n    print(even_num)\n    "
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    if ele[0] < 10 and ele[1] < 10:\n        print(x, y)\n    if x + 1 < 10 and ele[0] < 10 and x + 1 not in sub:\n        sub.append(x + 1)\n        adjac(x + 1, sub)\n    if y + 1 < 10 and ele[1] < 10 and y + 1 not in sub:\n        sub.append(y + 1)\n        adjac(y + 1, sub)\n    if x - 1 >= 0 and ele[0] < 10 and x - 1 not in sub:\n        sub.append(x - 1)\n        adjac(x - 1, sub)\n    if y - 1 >= 0 and ele[1] < 10 and y - 1 not in sub:\n        sub.append(y - 1)\n        adjac(y - 1, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    result = []\n    if ele[0] == ele[1]:\n        result.append(ele)\n    if ele[0] == ele[2]:\n        result.append(ele)\n    if ele[1] == ele[2]:\n        result.append(ele)\n    if ele[0] == ele[3]:\n        result.append(ele)\n    if ele[1] == ele[3]:\n        result.append(ele)\n    if ele[2] == ele[3]:\n        result.append(ele)\n    if ele[0] == ele[4]:\n        result.append(ele)\n    if ele[1] == ele[4]:\n        result.append(ele)\n    if ele[2] == ele[4]:\n        result.append(ele)\n    if ele[3] == ele[4]:\n        result.append(ele)\n    if ele[0] == ele[5]:\n        result.append(ele)\n    if ele[1] == ele[5]:\n        result.append(ele)\n    if ele[2] == ele[5]:\n        result.append(ele)\n    if ele[3] == ele[5]:\n        result.append(ele)\n    if ele[4] == ele[5]:\n        result.append(ele)\n    if ele[0] == ele[6]:\n        result.append(ele)\n    if ele[1] == ele[6]:\n        result.append(ele)\n    if ele[2] == ele[6]:\n        result.append(ele)\n    if ele[3] == ele[6]:\n        result.append(ele)\n    if ele[4] == ele[6]:\n        result.append(ele)\n    if ele[5] == ele[6]:\n        result.append(ele)\n    if ele[0] == ele[7]:\n        result.append(ele)\n    if ele[1] == ele[7]:\n        result.append(ele)\n    if ele[2] == ele[7]:\n        result.append(ele)\n    if ele[3] == ele[7]:\n        result.append(ele)\n    if ele[4] == ele[7]:\n        result.append(ele)\n    if ele[5] == ele[7]:\n        result.append(ele)\n    if ele[6] == ele[7]:\n        result.append(ele)\n    if ele[0] == ele[8]:\n        result.append(ele)\n    if ele[1] == ele[8]:\n        result.append(ele)\n    if ele[2] == ele[8]:\n        result.append(ele)\n    if ele[3] == ele[8]:\n        result.append(ele)\n    if ele[4] == ele[8]:\n        result.append(ele)\n    if ele[5] == ele[8]:\n        result.append(ele)\n    if ele[6] == ele[8]:\n        result.append(ele)\n    if ele[7] == ele[8]:\n        result.append(ele)\n    if ele[0] == ele[9]:\n        result.append(ele)\n    if ele[1] == ele[9]:\n        result.append(ele)\n    if ele[2] == ele[9]:\n        result.append(ele)\n    if ele[3] == ele[9]:\n        result.append(ele)\n    if ele[4] == ele[9]:\n        result.append(ele)\n    if ele[5] == ele[9]:\n        result.append(ele)\n    if ele[6] == ele[9]:\n        result.append(ele)\n    if ele[7] == ele[9]:\n        result.append(ele)\n    if ele[0] == ele[10]:\n        result.append(ele)\n    if ele[1] == ele[10]:\n        result.append(ele)\n    if ele[2] == ele[10]:\n        result.append(ele)\n    if ele[3] == ele[10]:\n        result.append(ele)\n    if ele[4] == ele[10]:\n        result.append(ele)\n    if ele[5] == ele[10]:\n        result.append(ele)\n    if ele[6] == ele[10]:\n        result.append(ele)\n    if ele[7] == ele[10]:\n        result.append(ele)\n    if ele[0] == ele[11]:\n        result.append(ele)\n    if ele[1] == ele[11]:\n        result.append(ele)\n    if ele[2] == ele[11]:\n        result.append(ele)\n    if ele[3] == ele[11]:\n        result.append(ele)\n    if ele[4] == ele[11]:\n        result.append(ele)\n    if ele[5] == ele[11]:\n        result.append(ele)\n    if ele[6] == ele[11]:\n        result.append(ele)\n    if ele[7] == ele[11]:\n        result.append(ele)\n    if ele[0] == ele[12]:\n        result.append(ele)\n    if ele[1] == ele[12]:\n        result.append(ele)\n    if ele[2] == ele[12]:\n        result.append(ele)\n    if ele[3] == ele[12]:\n        result.append(ele)\n    if ele[4] == ele[12]:\n        result.append(ele)\n    if ele[5] == ele[12]:\n        result.append(ele)\n    if ele[6] == ele[12]:\n        result.append(ele)\n    if ele[7] == ele[12]:\n        result.append(ele)\n    if ele[0] == ele[13]:\n        result.append(ele)\n    if ele[1] == ele[13]:\n        result.append(ele)\n    if ele[2] == ele[13]:\n        result.append(ele)\n    if ele[3] == ele[13]:\n        result.append(ele)\n    if ele[4] == ele[13]:\n        result.append(ele)\n    if ele[5] == ele[13]:\n        result.append(ele)\n    if ele[6] == ele[13]:\n        result.append(ele)\n    if ele[7] == ele[13]:\n        result.append(ele)\n    if ele[0] == ele[14]:\n        result.append(ele)\n    if ele[1] == ele[14]:\n        result.append(ele)\n    if ele[2] == ele[14]:\n        result.append(ele)\n    if ele[3] == ele[14]:\n        result.append(ele)\n    if ele[4] == ele[14]:\n        result.append(ele)\n    if ele[5] == ele[14]:\n        result.append(ele)\n    if ele[6] == ele[14]:\n        result.append(ele)\n    if ele[7] == ele[14]:\n        result.append(ele)\n    if ele[0] == ele[15]:\n        result.append(ele)\n    if ele[1] == ele[15]:\n        result.append(ele)\n    if ele[2] == ele[15]:\n        result.append(ele)\n    if ele[3] == ele[15]:\n        result.append(ele)\n    if ele[4] == ele[15]:\n        result.append(ele)\n    if ele[5] == ele[15]:\n        result.append(ele)\n    if ele[6] == ele[15]:\n        result.append(ele)\n    if ele[7] == ele[15]:\n        result.append(ele)\n    if ele[0] == ele[16]:\n        result.append(ele)\n    if ele[1] == ele[16]:\n        result.append(ele)\n    if ele[2] == ele[16]:\n        result.append(ele)\n    if ele[3] == ele[16]:\n        result.append(ele)\n    if ele[4] == ele[16]:\n        result.append(ele)\n    if ele[5] == ele[16]:\n        result.append(ele)\n    if ele[6] == ele[16]:\n        result.append(ele)\n    if ele[7] == ele[16]:\n        result.append(ele)\n    if ele[0"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return None\n    if ele[0] == -1 or ele[1] == -1: return None\n    elif ele[0] == ele[1]: return None\n    if ele[0] == 0: return (ele[0] + 1, ele[1] + 1)\n    elif ele[1] == 0: return (ele[0] + 1, ele[1] + 1)\n    elif ele[0] == ele[1]:\n        return (ele[0] + 1, ele[1] + 1)\n    elif ele[1] == ele[0]:\n        return (ele[0] + 1, ele[1] + 1)\n    else: return (ele[0] + 1, ele[1] + 1)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele) \n    if ele[0]!= ele[1]: \n        sub.append( (ele[0] + 1, ele[1] + 1) ) \n    if ele[0]!= ele[2]: \n        sub.append( (ele[0] + 1, ele[2] + 1) ) \n    if ele[1]!= ele[3]: \n        sub.append( (ele[0] + 1, ele[3] + 1) ) \n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    return (ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ([(i, j) for i in ele[1] for j in ele[0] if i!= j and i < j])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        sub.append(ele)\n        return sub\n    else:\n        return adjac(ele, sub + [ele])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        sub = ele\n    else:\n        sub = sub + [ele]\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub: \n        sub.append(ele) \n        adjac(ele[0], sub) \n        adjac(ele[1], sub)\n    return sub \n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"    \", \"_\")\n    text = text.replace(\"   \", \"_\")\n    text = text.replace(\"     \", \"_\")\n    text = text.replace(\"    \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('-', '_').lower().replace('.', '_').replace('!', '_').replace('?', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('.','_')\n    text = text.replace(':','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\").replace(\"-\",\"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"\\t\",\"_\").replace(\"\\r\",\"_\").replace(\"\\n\",\"_\").replace(\"  \",\"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    text = re.sub(\" +\", \"_\", text)\n    text = re.sub(\" +\", \"_\", text)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    replaced_text = text.replace(' ', '_').replace('.', '_')\n    return replaced_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\t', '_')\n    text = text.replace('\\r', '_')\n    text = text.replace('\\x0b', '_')\n    text = text.replace('\\x1b', '_')\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            zero_list.append(num_list[i])\n    return zero_list\n    #pass\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # your code goes here\n    for x in range(len(num_list)):\n        if num_list[x] == 0:\n            num_list.pop(x)\n            num_list.append(0)\n    return num_list\n    "
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(0)\n            num_list.append(0)\n        else:\n            continue\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.remove(num)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_num_list = []\n    # for i in num_list:\n    #     if i == 0:\n    #         zero_num_list.append(i)\n    zero_num_list = [i for i in num_list if i!= 0]\n    return zero_num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros_index = []\n    for index, value in enumerate(num_list):\n        if value == 0:\n            zeros_index.append(index)\n    if len(zeros_index) > 0:\n        for index in zeros_index:\n            num_list.remove(0)\n            num_list.insert(index, 0)\n        return num_list\n    else:\n        return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            new_list.append(num_list[i])\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, num in enumerate(num_list):\n        if num!= 0:\n            num_list[index] = num\n            num_list.remove(num)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            num_list.pop(i)\n            break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result = []\n    for num in num_list:\n        if num!= 0:\n            result.append(num)\n        else:\n            pass\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    import math\n    x = 1\n    for i in range(n-1) : \n        x = (x << 1) + x + arr[i]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n==0 : \n        return 0\n    if n==1 : \n        return 1\n    if n<=1 : \n        return 0\n    arr.sort()\n    i=0\n    j=0\n    k=0\n    arr_cnt=0\n    while i < len(arr)-1 :\n        while j < len(arr)-1 :\n            if arr[i]^arr[j]==arr[k] :\n                arr_cnt+=1\n                arr.pop(k)\n                j+=1\n                i-=1\n                k+=1\n                continue\n            j+=1\n        i+=1\n    return arr_cnt\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n) : \n        for j in range(i) : \n            if arr[i] == arr[j] : \n                result += 1\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            if arr[i]^arr[j]==1 :\n                sum = sum + arr[i]^arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    X = 0\n    Y = 0\n    for i in range(0,n-1):\n        X = X ^ arr[i]\n    for j in range(n-2, -1, -1):\n        Y = Y ^ arr[j]\n    return X ^ Y\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x=0\n    for i in range(n-2) : \n        for j in range(i+1,n) : \n            x=x^arr[i]^arr[j]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Method 1\n    # max_xor = 0\n    # for i in range(0, len(arr)):\n    #     for j in range(0, len(arr)):\n    #         if i!= j and arr[i]!= arr[j]:\n    #             if arr[i] + arr[j] > max_xor:\n    #                 max_xor = arr[i] + arr[j]\n    # return max_xor\n    # Method 2\n    arr_xor = [0] * n\n    for i in range(0, len(arr)):\n        arr_xor[i] = arr[i]\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            arr_xor[i] ^= arr[j]\n    return sum(arr_xor)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n        \n    # do the rest of the sort\n    while len(heap) > 1:\n        # get the smallest value at the root\n        root = hq.heappop(heap)\n        # get the second smallest value at the root\n        second_root = hq.heappop(heap)\n        # insert the values in the heap\n        hq.heappush(heap, root + second_root)\n        # now put them in the end, as well as the smallest\n        # value (i.e. the root value)\n        hq.heappush(heap, root)\n    return hq.heappop(heap)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = list()\n    for val in iterable:\n        heq.heappush(l, val)\n    # Reverse the list, so the smallest is at the back\n    for i in range(len(l)-1, -1, -1):\n        heq.heappop(l)\n        heq.heappush(l, heq.heappop(l))\n    return l\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def compare_values(a, b):\n        if a[0] < b[0]:\n            return -1\n        elif a[0] > b[0]:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for element in iterable:\n        heapq.heappush(h, element)\n    return hq.merge(h, iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq_max = []\n    hq_min = []\n    lst = list(iterable)\n    lst.sort()\n    for i in range(len(lst)):\n        hq_max.append(lst[i])\n        hq_min.append(lst[i])\n    return hq_min + hq_max\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a maxheap\n    heap = []\n    # Put all elements in maxheap in one go\n    for i in iterable:\n        heapq.heappush(heap, i)\n    # Reverse the list so the largest is at the top\n    for i in range(len(heap) - 1, 0, -1):\n        heapq.heapify(heap)\n        heapq.heappush(heap, heapq.heappop(heap) + i)\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable.sort()\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    if n <= 1:\n        return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def sort_helper(elements,sorted_elements):\n        if len(elements) == 1:\n            sorted_elements.append(elements[0])\n            return\n        \n        left = sort_helper(elements[:len(elements)//2],sorted_elements)\n        right = sort_helper(elements[len(elements)//2:],sorted_elements)\n        sorted_elements = heapq.merge(left,right,key=lambda x:x[1])\n        return sorted_elements\n    \n    return sort_helper(iterable, [])\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    for i in range(len(h) - 1, 0, -1):\n        hq.heappop(h)\n    return h\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    no_profit = False\n    no_loss = False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in range(len(actual_cost)):\n        if actual_cost[i] - sale_amount > 0:\n            return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    try: \n        total_price = actual_cost*sale_amount\n        net_profit = total_price - actual_cost\n        if net_profit <= 0.0:\n            return False\n        return True\n    except:\n        print(\"you gave a wrong number\")\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < 0:\n        print(\"Your actual cost is negative, this can be caused by negative sale_amount\")\n    else:\n        print(\"Your actual cost is:\", actual_cost)\n        print(\"Your profit is:\", (actual_cost-sale_amount)/sale_amount, \"flip\")\n        if sale_amount < sale_amount:\n            print(\"The profit is negative.\")\n        else:\n            print(\"The profit is positive\")\n        \ndef main():\n    #Sale Amount\n    sale_amount = float(input(\"Enter sale amount: \"))\n    #User's profit\n    actual_cost = float(input(\"Enter your profit: \"))\n    #noprofit noloss\n    noprofit_noloss(actual_cost,sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return False\n    \n    if actual_cost < 0:\n        return False\n    \n    for i in range(len(sale_amount)):\n        if sale_amount[i] <= 0:\n            return False\n        if sale_amount[i] > actual_cost:\n            return False\n    \n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost - sale_amount >= 0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0.0:\n        return False\n    if actual_cost < 0.0:\n        return False\n    if actual_cost > sale_amount:\n        return False\n    if sale_amount == actual_cost:\n        return True\n    else:\n        return True\n    \ndef calculate_loss_noprofit(actual_cost,sale_amount):\n    '''\n    Write a function that calculates the loss if the given amount does not have any profit\n    '''\n    if actual_cost < 0.0:\n        return actual_cost\n    if actual_cost > sale_amount:\n        return 0.0\n    else:\n        return 0.0\n        \ndef calculate_profit_noprofit(actual_cost,sale_amount):\n    '''\n    Write a function that calculates the profit if the given amount does not have any profit\n    '''\n    if actual_cost < 0.0:\n        return actual_cost\n    if actual_cost > sale_amount:\n        return actual_cost\n    else:\n        return 0.0\n        \ndef profit_noprofit(actual_cost,sale_amount):\n    '''\n    Write a function that calculates the profit and loss if the given amount does not have any profit\n    '''\n    if noprofit_noprofit(actual_cost,sale_amount):\n        return actual_cost\n    if noprofit_noprofit(calculate_loss_noprofit(actual_cost,sale_amount),sale_amount):\n        return actual_cost\n    if noprofit_noprofit(calculate_profit_noprofit(actual_cost,sale_amount),sale_amount):\n        return actual_cost\n    else:\n        return 0.0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost>sale_amount\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v*(9/5) + 32,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #define wind chill variable\n    wc = (math.log(v/3.6)+5)/9\n    #define wind chill value\n    wc = (t*wc) + 32\n    #convert to integer and return\n    return int(round(wc))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    V = v\n    T = t\n    U = 2.5\n    sigma = 0.75\n    delta = (math.log(V/U) + (sigma**2/sigma**2)**0.5)\n    return round((V-U)/delta*(9.0+sigma*(delta**0.5)),2)\n    \ndef wind_chill_var(v,t):\n    '''\n    Write a function that returns the wind chill index as a variable\n    '''\n    V = v\n    T = t\n    U = 2.5\n    sigma = 0.75\n    delta = (math.log(V/U) + (sigma**2/sigma**2)**0.5)\n    #print(delta)\n    return round((V-U)/delta*(9.0+sigma*(delta**0.5)),2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    B0 = 9.76\n    B1 = 1.38\n    C = (7.07 * t) + 32.0\n    w = v * math.exp(B1 * t) * (B0 + C) / (B1 * math.exp(B1 * t) + 1.0)\n    return round(w,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    temp = ( (100*(10**((v-32)*0.1)/10))) + 32\n    if temp >= 75:\n        temp = 75\n    elif temp < 75:\n        temp = temp + 5\n    return (temp*(9.0/5.0)) + 32\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #required inputs\n    #v: wind velocity in km/h\n    #t: temperature in celsius\n    #output: wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #defining the variables\n    e = 0.6215\n    r = 287.05\n    m = 1.065\n    c = 20.0\n    \n    #checking the values\n    if t<=0:\n        chill = -1\n    else:\n        v = v/3.6\n        e = e*math.exp((v/r) * ((m + (c*v))/(r+m)))\n        chill = math.log(e,10)\n    return round(chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t > 30:\n        t = t - 10\n    x = (v-5)*math.exp(-(v+13)/4)-32\n    if x <= 0:\n        return 0\n    else:\n        return round((math.exp(x/10) + 6) / (1 + x * math.exp(x/10)), 2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    temp = v * 9/5 + 32\n    chill = ((temp - 32) / 9) * (100 - 0.01*t) + 32\n    return chill\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = v*(9.0/5.0 + 35.0/((t - 32.0)*(t - 32.0)))\n    return round(wind_chill,1)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sam = [n.split()[0] for n in sample_names]\n    c = Counter(sam)\n    # create a dictionary to make sure a letter is not counted as a word\n    digits = {}\n    for k, v in c.items():\n        for k2, v2 in c.items():\n            if k == k2:\n                digits[k] = v\n                digits[k2] = v2\n    num = 0\n    for i in digits:\n        if len(i) > 1:\n            num += int(digits[i][1])\n    return num\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_nums = []\n    sample_string = ''\n    for i in sample_names:\n        sample_nums.append(len(i))\n        sample_string += i\n    new_list = list(set(sample_nums))\n    if 'a' in new_list:\n        new_list.remove('a')\n    if 'A' in new_list:\n        new_list.remove('A')\n    for i in range(len(sample_nums)):\n        if sample_string[i] in new_list:\n            sample_string = sample_string.replace(sample_string[i], 'A')\n    return sample_string\n    \nsample_names = ['Jane','Joe','Mike','Hanna','Beth','Ann']\nprint(sample_nam(sample_names)"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_list = []\n    for sample_name in sample_names:\n        if sample_name[0].lower() == 'a':\n            nam_list.append(sample_name)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for x in sample_names:\n        if x[0] == 'a':\n            sum = sum + len(x)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = [len(name.split(' ')) for name in sample_names]\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # print(sample_names)\n    # print(len(sample_names))\n    # return(len(sample_names))\n    names_dict = {}\n    for name in sample_names:\n        if not name.startswith(\"a\"):\n            names_dict[name] = 1\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names.sort()\n    summ = 0\n    for name in sample_names:\n        if name.startswith('a'):\n            summ += len(name)\n    return summ\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_of_sample = [name.lower().split() for name in sample_names]\n    sample_names_length = []\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    sample_names_copy = sample_names.copy()\n    \n    s = 0\n    \n    for name in sample_names:\n        if name[0].islower():\n            s += len(name)\n    \n    sample_names.clear()\n    \n    sample_names.append(sample_names_copy[s:])\n    \n    return sample_names\n    \ndef sample_by_name(sample_names, sample_index):\n    '''\n    Write a function to sample a given index of a given list of names.\n    '''\n    \n    sample_index_copy = sample_index.copy()\n    \n    sample_names_copy = sample_names.copy()\n    \n    sample_index_copy.insert(0, sample_names_copy[sample_index])\n    \n    sample_index_copy = sample_index_copy[1:]\n    \n    sample_index_copy.sort()\n    \n    sample_index_copy.reverse()\n    \n    sample_names.clear()\n    \n    sample_index.clear()\n    \n    sample_index.append(sample_index_copy[0])\n    \n    return sample_index\n    \ndef average_name(sample_names):\n    '''\n    Write a function to calculate the average length of a list of names.\n    '''\n    \n    sample_names_copy = sample_names.copy()\n    \n    sum = 0\n    \n    for name in sample_names:\n        sum += len(name)\n    \n    sample_names.clear()\n    \n    sample_names.append(sample_names_copy[sum//len(sample_names):])\n    \n    return sample_names\n    \ndef sample_by_index(sample_names, sample_index):\n    '''\n    Write a function to sample a given index of a given list of names.\n    '''\n    \n    sample_index_copy = sample_index.copy()\n    \n    sample_index_copy.insert(0, sample_names[sample_index])\n    \n    sample_index_copy = sample_index_copy[1:]\n    \n    sample_index_copy.sort()\n    \n    sample_index_copy.reverse()\n    \n    sample_index_copy.append(sample_names[sample_index])\n    \n    return sample_index\n    \ndef name_to_index(sample_names):\n    '''\n    Write a function to convert a list of names into a list of indexes.\n    '''\n    \n    sample_index = []\n    \n    for name in sample_names:\n        sample_index.append(sample_names.index(name))\n    \n    sample_index.append(sample_names[sample_index[len(sample_index)-1]])\n    \n    return sample_index\n    \ndef sample_by_name_and_index(sample_names, sample_index):\n    '''\n    Write a function to sample a given index of a given list of names.\n    '''\n    \n    sample_index_copy = sample_index.copy()\n    \n    sample_index_copy.insert(0, sample_names[sample_index])\n    \n    sample_index_copy = sample_index_copy[1:]\n    \n    sample_index_copy.sort()\n    \n    sample_index_copy.reverse()\n    \n    sample_index_copy.append(sample_names[sample_index])\n    \n    return sample_index\n    \ndef index_to_name(sample_index):\n    '''\n    Write a function to convert a list of indexes into a list of names.\n    '''\n    \n    sample_names_copy = sample_names.copy()\n    \n    sample_index_copy = sample_index.copy()\n    \n    sample_index_copy.insert(0, sample_names_copy[sample_index])\n    \n    sample_index_copy = sample_index_copy[1:]\n    \n    sample_index_copy.sort()\n    \n    sample_index_copy.reverse()\n    \n    sample_names.clear()\n    \n    sample_names.append(sample_names_copy[sample_index_copy[0]])\n    \n    return sample_names\n    \ndef name_to_index_and_name(sample_names):\n    '''\n    Write a function to convert a list of names into a list of indexes.\n    '''\n    \n    sample_index = []\n    \n    for name in sample_names:\n        sample_index.append(sample_names.index(name))\n    \n    sample_index.append(sample_names[sample_index[len(sample_index)-1]])\n    \n    return sample_index\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for i in sample_names:\n        if i[0].lower() == \"a\":\n            new_list.append(len(i))\n    return new_list\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for index, item in enumerate(items):\n        if item == '(':\n            items.pop(index)\n        elif item == ')':\n            items.pop(index+1)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_removed = []\n    for i in range(len(items) - 1):\n        if items[i].isalpha() or items[i].isspace():\n            if items[i] in [\"(\", \")\"]:\n                parenthesis_removed.append(items[i])\n        else:\n            if items[i] == \"(\":\n                parenthesis_removed.append(items[i])\n            elif items[i] == \")\":\n                parenthesis_removed.append(items[i])\n    return parenthesis_removed\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # if the string is empty\n    if len(items) == 0:\n        return ''\n    # iterate over the list\n    res = []\n    for item in items:\n        # if the item is a parenthesis\n        if item == '(':\n            # check if the item is inbetween a, b, c, d\n            if len(res) >= 1 and res[-1][-1]!= '(':\n                # if not, append the item to res\n                res.append(item)\n            else:\n                # if it is, leave the item alone\n                res.append(item)\n        # if the item is a closing parenthesis\n        elif item == ')':\n            # if it has been removed, leave it\n            if len(res) == 0:\n                res.append(item)\n            # if it is not, append the item to res\n            else:\n                # if the item is inbetween a, b, c, d\n                if len(res) >= 1 and res[-1][-1]!= '(' and res[-1][-1]!= item:\n                    res.append(item)\n                # if it is a closing parenthesis, then leave it alone\n                else:\n                    res.append(item)\n    return ''.join(res)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return \" \".join([item[1:-1] for item in items])\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('((?<=\\(\\))[^()]*\\((?=\\())(.*?)\\)',r'\\1',''.join(items))\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i].count('(')!= items[i].count(')'):\n            items[i] = items[i].replace('()','')\n            items[i] = items[i].replace('(', '')\n            items[i] = items[i].replace(')', '')\n            items[i] = items[i].replace(')', '')\n    return items\ndef remove_spaces(string):\n    '''\n    Replace all spaces in the string with a single space, then convert the result to lower case.\n    '''\n    string = re.sub(' +',' ',string)\n    string = string.replace(' ', '')\n    string = string.lower()\n    string = string.replace('\\n','')\n    string = string.replace('\\t','')\n    string = string.replace('\\r','')\n    string = string.replace('\\v','')\n    string = string.replace('  ', '')\n    return string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item=='(':\n            new+=')'\n        else:\n            new+='('\n    return new\ndef remove_parenthesis_without_parentheses(items):\n    '''\n    Write a function to remove the parenthesis without the parentheses from a string.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item=='(' or item==')' or item=='{' or item=='}' or item=='[':\n            new+=')'\n        else:\n            new+='('\n    return new\ndef is_valid_parentheses(items):\n    '''\n    Write a function to check if the parentheses are valid.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item==')' or item=='}' or item=='}' or item==']' or item==']' or item=='(':\n            new+=')'\n        else:\n            new+='('\n    return new=='()'\ndef is_valid_parentheses_without_parentheses(items):\n    '''\n    Write a function to check if the parentheses are valid.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item=='{' or item=='}' or item=='[' or item==']' or item=='(' or item==')':\n            new+=')'\n        else:\n            new+='('\n    return new=='()'\ndef is_valid_parentheses_without_parentheses_with_with_or_without_and(items):\n    '''\n    Write a function to check if the parentheses are valid.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item=='{' or item=='}' or item=='[' or item==']' or item=='(' or item==')':\n            new+=')'\n        else:\n            new+='('\n    return new=='()'\ndef is_valid_parentheses_without_parentheses_with_or_without_and_without_and(items):\n    '''\n    Write a function to check if the parentheses are valid.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item=='{' or item=='}' or item=='[' or item==']' or item=='(' or item==')' or item=='(' or item==')':\n            new+=')'\n        else:\n            new+='('\n    return new=='()'\ndef is_valid_parentheses_without_parentheses_without_and_without_or_and_without_and(items):\n    '''\n    Write a function to check if the parentheses are valid.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item=='{' or item=='}' or item=='[' or item==']' or item=='(' or item==')' or item=='(' or item==')':\n            new+=')'\n        else:\n            new+='('\n    return new=='()'\ndef is_valid_parentheses_without_parentheses_without_and_without_or_and_without_and_without_and(items):\n    '''\n    Write a function to check if the parentheses are valid.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item=='{' or item=='}' or item=='[' or item==']' or item=='(' or item==')' or item=='(' or item==')':\n            new+=')'\n        else:\n            new+='('\n    return new=='()'\ndef is_valid_parentheses_without_parentheses_without_and_without_or_and_without_and_without_and_without_and(items):\n    '''\n    Write a function to check if the parentheses are valid.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item=='{' or item=='}' or item=='[' or item==']' or item=='(' or item==')' or item=='(' or item==')':\n            new+=')'\n        else:\n            new+='('\n    return new=='()'\ndef is_valid_parentheses_without_parentheses_without_and_without_or_and_without_and_without_and_without_and_without_and_without_and(items):\n    '''\n    Write a function to check if the parentheses are valid.\n    '''\n    # Write your code here\n    new=''\n    for item in items:\n        if item=='{' or item=='}' or item=='[' or item==']' or item=='(' or item==')' or item=='(' or item==')' or item=='(' or item==')' or item=='(' or item==')' or item=='(' or item==')':\n            new+=')'\n        else:\n            new+='('\n    return new=='()'\ndef is_valid_parentheses_without_parentheses_without_and_without_or_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_without_and_withou"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if item[0] == '(':\n            result.append(item)\n        else:\n            result.pop()\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def remove_parenthesis_and_what(string):\n        '''\n        This function just removes the parenthesis and what is between it and the brackets and the next bracket.\n        '''\n        for i in range(len(string)):\n            if string[i] == '(':\n                print('After parenthesis', string[i], 'was', string[i+1])\n                string = string[:i] + string[i+1:]\n            elif string[i] == ')':\n                print('After parenthesis', string[i], 'was', string[i+1])\n                string = string[:i] + string[i+1:]\n        return string\n    if items == None:\n        return []\n    else:\n        new = []\n        for i in items:\n            if i[1] == '(':\n                new.append(i)\n            else:\n                new.append(i)\n        for i in range(len(new)):\n            print(new[i][1])\n            if new[i][1]!= ')':\n                new[i] = [new[i][0], ')']\n            else:\n                new[i][1] = ')':\n        return new\ndef remove_parenthesis_simple(string):\n    '''\n    Here we remove the parenthesis and what is between it and the brackets and the next bracket\n    '''\n    new = []\n    for i in string:\n        if i[1] == '(':\n            new.append(i)\n        else:\n            new.append(i)\n    for i in range(len(new)):\n        print(new[i][1])\n        if new[i][1]!= ')':\n            new[i] = [new[i][0], ')']\n        else:\n            new[i][1] = ')':\n    return new\ndef is_valid(string):\n    '''\n    This function checks if the string is a valid string.\n    '''\n    if string == None:\n        return True\n    count = 0\n    for i in string:\n        if i == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return True\ndef remove_parenthesis_simple(string):\n    '''\n    Here we remove the parenthesis and what is between it and the brackets and the next bracket\n    '''\n    new = []\n    for i in string:\n        if i[1] == '(':\n            new.append(i)\n        else:\n            new.append(i)\n    for i in range(len(new)):\n        print(new[i][1])\n        if new[i][1]!= ')':\n            new[i] = [new[i][0], ')']\n        else:\n            new[i][1] = ')':\n    return new\ndef remove_parenthesis(string):\n    '''\n    Here we remove the parenthesis and what is between it and the brackets and the next bracket\n    '''\n    new = []\n    for i in string:\n        if i[1] == '(':\n            new.append(i)\n        else:\n            new.append(i)\n    for i in range(len(new)):\n        print(new[i][1])\n        if new[i][1]!= ')':\n            new[i] = [new[i][0], ')']\n        else:\n            new[i][1] = ')':\n    return new\ndef is_valid(string):\n    '''\n    This function checks if the string is a valid string.\n    '''\n    if string == None:\n        return True\n    count = 0\n    for i in string:\n        if i == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return True\ndef remove_parenthesis_string(string):\n    '''\n    Here we remove the parenthesis and what is between it and the brackets and the next bracket\n    '''\n    new = []\n    for i in string:\n        if i == '(':\n            new.append(i)\n        else:\n            new.append(i)\n    for i in range(len(new)):\n        print(new[i][1])\n        if new[i][1]!= ')':\n            new[i] = [new[i][0], ')']\n        else:\n            new[i][1] = ')':\n    return new\ndef remove_parenthesis_string_simple(string):\n    '''\n    Here we remove the parenthesis and what is between it and the brackets and the next bracket\n    '''\n    new = []\n    for i in string:\n        if i == '(':\n            new.append(i)\n        else:\n            new.append(i)\n    for i in range(len(new)):\n        print(new[i][1])\n        if new[i][1]!= ')':\n            new[i] = [new[i][0], ')']\n        else:\n            new[i][1] = ')':\n    return new\ndef is_valid_string(string):\n    '''\n    This function checks if the string is a valid string.\n    '''\n    if string == None:\n        return True\n    count = 0\n    for i in string:\n        if i == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return True\ndef is_valid_simple(string):\n    '''\n    This function checks if the string is a valid string.\n    '''\n    if string == None:\n        return True\n    count = 0\n    for i in string:\n        if i == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return True\ndef remove_parenthesis_string_simple(string):\n    '''\n    Here we remove the parenthesis and what is between it and the brackets and the next bracket\n    '''\n    new = []\n    for i in string:\n        if i == '(':\n            new.append(i)\n        else:\n            new.append(i)\n    for i in range(len(new)):\n        print(new[i][1])\n        if new[i][1]!= ')':\n            new[i] = [new[i][0], ')']\n        else:\n            new[i][1] = ')':\n    return new\ndef remove_parenthesis_string(string):\n    '''\n    Here we remove the parenthesis and what is between it and the brackets and the next bracket\n    '''\n    new = []\n    for i in string:\n        if i == '(':\n            new.append(i)\n        else:\n            new.append(i)\n    for i in range(len(new)):\n        print(new[i][1])\n        if new[i][1]!= ')':\n            new[i] = [new[i][0], ')']\n        else:\n            new[i][1] = ')':\n    return new\ndef remove_parenthesis_string_simple(string):\n    '''\n    Here we remove the parenthesis and what is between it and the brackets and the next bracket\n    '''\n    new = []\n    for i in string:\n        if i == '(':\n            new.append(i)\n        else:\n            new.append(i)\n    for i in range(len(new)):\n        print(new[i][1])\n        if new[i][1]!= ')':\n            new[i] = [new[i][0], ')']\n        else:\n            new[i][1] = ')':\n    return new\ndef is_valid_string_simple(string):\n    '''\n    This function checks if the string is a valid string.\n    '''\n    if string == None:\n        return True\n    count = 0\n    for i in string:\n        if i == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return True\ndef is_valid_string_string(string):\n    '''\n    This function checks if the string is a valid string.\n    '''\n    if string == None:\n        return True\n    count = 0\n    for i in string:\n        if i == '('"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        if i[0] == '(':\n            i = i[1:len(i)-1]\n        else:\n            i = i[1:len(i)-1]\n        if ')' in i:\n            i = i[0:i.index(')')]\n        else:\n            i = i[0:len(i)-1]\n    return i\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 0): return n \n    elif (n == 1): return n - 1\n    else: \n        for i in range(1, n): \n            if (n - i) % 2 == 0: return i \n        else: return i \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    from math import sqrt\n    \n    # If the current square root of n is a square root of 2 then the\n    # current square root of n is also a non diagonal number. So\n    # the square root of 2 is not the nth non-diagonal number.\n    if (n % 2 == 0) and (int(sqrt(n)) % 2 == 0):\n        return False\n    return True\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_diagonal(n):\n        if (n == n + 1):\n            return True\n        if (n % 4 == 0):\n            return True\n        return False\n    return is_diagonal(n + 1) if (n < 4) else is_nonagonal(n % 4)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n):\n        if i!= n-i-1:\n            if (n-1-i) == n:\n                return n-i-1\n            else:\n                return n-i-1\n    return -1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 4 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n-1\n    if n%2 == 0:\n        return n\n    else:\n        return n-1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    lst = []\n    for i in range(n):\n        lst.append(i)\n    \n    summ = 0\n    for i in range(n):\n        summ += lst[i]\n    \n    return summ\n    \n    \n    \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return n\n    else:\n        if n%2==0:\n            return is_nonagonal(n-1)\n        else:\n            return is_nonagonal(n-1)\n        \nn=int(input(\"Enter n:\"))\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    for i in range(n):\n        if (i!= n - 1):\n            if (n - 1 - i == i):\n                count += 1\n        else:\n            if (n - 1 - i == i):\n                count += 1\n    return count\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return n \n    elif n%2 == 0: \n        return is_nonagonal(n//2)\n    else: \n        return is_nonagonal(n//2 + 1) \n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    s = re.search('[A-Z][^A-Z]*[zZ]', text)\n    return s\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # check if the word has the word 'z' in the beginning\n    if text.startswith('z'):\n        text = text[1:]\n        if text.endswith('z'):\n            text = text[:-1]\n        return text\n    # if it has the word 'z' in the end\n    if text.endswith('z'):\n        text = text[:-1]\n        if text.startswith('z'):\n            text = text[1:]\n        return text\n    # if the word does not end with z\n    if text.endswith('z'):\n        text = text[:-1]\n        if text.startswith('z'):\n            text = text[1:]\n        return text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the beginning of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the beginning of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the beginning of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the beginning of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the beginning of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.strip().lower()\n    return re.search(r'(z)(z)(z)', text)!= None\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the beginning of the word.\n    '''\n    tex"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.split(' ')\n    for i in range(len(text)):\n        if text[i][0]!= 'z':\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Replace the z at the start\n    text = text.replace('z', 'a').replace('z', 'e').replace('z', 'i').replace('z', 'o')\n    # Replace the z at the end\n    text = text.replace('z', 'y').replace('z', 'u').replace('z', 'i').replace('z', 'e')\n    #print(text)\n    text_begin_word = 'z'\n    text_end_word = 'a'\n    word_begin_word = 'z'\n    word_end_word = 'a'\n    #check if there is a 'z' after the begin word\n    if text.count(text_begin_word)!= 0:\n        return False\n    #check if there is a 'z' before the end word\n    if text.count(text_end_word)!= 0:\n        return False\n    #check if there is a 'z' after the end word\n    if text.count(word_end_word)!= 0:\n        return False\n    #check if there is a 'z' before the begin word\n    if text.count(word_begin_word)!= 0:\n        return False\n    #check if there is a 'z' after the end word\n    if text.count(text_end_word)!= 0:\n        return False\n    #print(text)\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) <= 2:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if(text[0]=='z'):\n        if(text[1]!='z'):\n            return False\n    \n    return True\ndef word_contains_chinese_word(text):\n    '''\n    Write a function that checks if a string contains 'k', except at the start and end of the word.\n    '''\n    if(text[0]=='k'):\n        if(text[1]!='k'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the start and end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_suffix(text):\n    '''\n    Write a function that checks if a string contains 'ch', except at the start of the word.\n    '''\n    if(text[0]=='ch'):\n        if(text[1]!='ch'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_suffix(text):\n    '''\n    Write a function that checks if a string contains 'ch', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='ch'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_suffix_middle(text):\n    '''\n    Write a function that checks if a string contains 'ch', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='ch'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_suffix_middle(text):\n    '''\n    Write a function that checks if a string contains 'ch', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='ch'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_suffix_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_suffix_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_suffix_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    \n    return True\ndef word_contains_chinese_word_middle_middle_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'zh', except at the end of the word.\n    '''\n    if(text[0]=='zh'):\n        if(text[-1]!='zh'):\n            return False\n    "
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.startswith('z'):\n        return True\n    elif text.endswith('z'):\n        return False\n    elif len(text) == 2:\n        return text[1] == 'z'\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    search = re.compile(r'z')\n    match = search.search(text)\n    if match == None:\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text.split(' '))!= 2:\n        return False\n    start_text = text.split(' ')[0]\n    end_text = text.split(' ')[-1]\n    if len(start_text) == 1 and len(end_text) == 1:\n        return True\n    if len(start_text) == 2 and len(end_text) == 2:\n        if start_text[0] == end_text[0]:\n            return True\n        else:\n            return False\n    if len(start_text) == 2 and len(end_text) == 3:\n        if start_text[0] == end_text[0] and start_text[1] == end_text[1]:\n            return True\n        else:\n            return False\n    if len(start_text) == 3 and len(end_text) == 3:\n        if start_text[0] == end_text[0] and start_text[1] == end_text[1] and start_text[2] == end_text[2]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    j = len(input)\n    for i in range(k-1, -1, -1):\n        print(f\"i={i} j={j}\")\n        j = j - 1\n        for k in range(j):\n            print(f\"k={k}\")\n            input[i] = input[i][::-1]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = []\n    for i in range(len(input)-k):\n        temp.append(input[i])\n    return temp\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) < k:\n        return None\n    else:\n        return input[len(input)-k:]+input[0:len(input)-k]\n        \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # your code here\n    return \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        input.pop()\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return input\n    elif k == 1:\n        return ''.join(reversed(input))\n    else:\n        return reverse_Array_Upto_K(input, k-1) + reverse_Array_Upto_K(input, k-1)\n    \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #print(\"In reverseArray\")\n    #print(input)\n    k = k%len(input)\n    #print(k)\n    #print(\"Len of the input array = \",len(input))\n    #print(input)\n    output = []\n    for i in range(len(input)-k):\n        output.append(input[i])\n    #print(output)\n    #print(\"Len of output array = \",len(output))\n    #print(output)\n    #print(\"Len of input = \",len(input))\n    for i in range(len(input)):\n        #print(i)\n        #print(input[i])\n        output[i] = input[i]\n    #print(output)\n    return output\n    \n    \n    \ndef reverse_Array_To_String(input):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #print(\"In reverseArray\")\n    #print(input)\n    output = []\n    for i in range(len(input)):\n        #print(i)\n        #print(input[i])\n        output.append(input[i])\n    #print(output)\n    #print(\"Len of output array = \",len(output))\n    #print(output)\n    return \"\".join(output)\n    \n    \n    \ndef reverse_Array_To_String_2(input):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #print(\"In reverseArray\")\n    #print(input)\n    output = []\n    #print(len(input))\n    k = len(input)//2\n    for i in range(k):\n        output.append(input[k+i])\n    #print(output)\n    #print(\"Len of output array = \",len(output))\n    for i in range(len(input)):\n        #print(i)\n        #print(input[i])\n        output[i] = input[i]\n    #print(output)\n    return \"\".join(output)\n    \n    \n    \ndef is_prime(n):\n    '''\n    Check whether a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if (n % i) == 0:\n            return False\n    return True\n    \n    \n    \ndef get_prime_number(n):\n    '''\n    Get a prime number between 2 and n.\n    '''\n    for i in range(2, n):\n        if is_prime(i):\n            return i\n    return False\n    \n    \n    \ndef get_sum_digit_of_n(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_2(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \ndef get_sum_digit_of_n_3(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_4(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_5(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_6(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_7(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_8(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_9(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_10(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_11(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_12(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_13(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_14(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_15(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_16(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_17(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_18(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_19(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \ndef get_sum_digit_of_n_20(n):\n    '''\n    Get the sum of the digits of a number.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n    \n    \n    \nde"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input.copy() \n    return arr[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse = []\n    for i in range(len(input)):\n        reverse.append(input[len(input)-k-i])\n    return reverse\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    output_tup = ()\n    if len(test_dict) > 0:\n        for key in test_dict:\n            output_tup = output_tup + (key,)\n    return output_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_string = ''\n    for key, value in test_dict.items():\n        tuple_string = tuple_string + '(' + str(key) + ',' + str(value) + ')'\n    return (test_tup, tuple_string)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    for key in test_dict.keys():\n        if key in test_tup:\n            test_tup[key].extend(test_dict[key])\n        else:\n            test_tup[key] = list(test_dict[key])\n            test_tup[key].extend(test_dict[key])\n    \n    return test_tup\n    \n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return test_tup + test_dict\n    else:\n        raise Exception('Can not add a dictionary to a tuple')\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_tup)!= tuple:\n        test_tup = (test_tup, )\n    for key in test_dict:\n        test_tup[test_dict[key]] = test_dict[key]\n    return test_tup\n    \n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple = test_tup\n    for key, value in test_dict.items():\n        tuple = tuple + (key, value)\n    return tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_dict) == dict:\n        test_tup = test_tup + (test_dict,)\n    else:\n        test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    # To Do: Check for Type Errors.\n    if type(test_tup)!= tuple:\n        raise TypeError('Expected tuple.')\n    \n    if type(test_dict)!= dict:\n        raise TypeError('Expected dictionary.')\n    \n    # 1. Add the values to the dictionary.\n    for key in test_dict:\n        if key not in test_tup:\n            raise KeyError('Key {} not found in the dictionary.'.format(key))\n        test_tup[key] = test_dict[key]\n    \n    # 2. Add the key-value pairs to the tuple.\n    for key, value in test_dict.items():\n        if key not in test_tup:\n            raise KeyError('Key {} not found in the dictionary.'.format(key))\n        if type(value)!= dict:\n            raise TypeError('Value of {} must be a dictionary.'.format(value))\n        # 3. Check if the key and value are tuples.\n        if type(test_tup[key])!= tuple:\n            raise TypeError('Value of {} must be a tuple.'.format(value))\n        # 4. If the key is already present in the tuple, increment the count of the value in the key-value pair.\n        elif type(test_tup[key]) == tuple:\n            test_tup[key] += (value,)\n        else:\n            raise TypeError('Key {} already present with different value {}.'.format(key, value))\n    \n    # 5. Return the tuple.\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #create a new tuple\n    new_tuple = (test_tup[0], test_dict)\n    return new_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    try:\n        test_tup = tuple(test_dict.values())\n    except AttributeError:\n        print('There is no dictionary in this tuple')\n    else:\n        test_tup = tuple(test_tup)\n        print('The tuple has been added!')\n        return test_tup\n    \ndef test_add_dict_to_tuple():\n    '''\n    Test function to add a dictionary to the tuple.\n    '''\n    test_dict = {'one': 'Hello', 'two': 'World'}\n    test_tup = add_dict_to_tuple(test_dict, test_dict)\n    print('The tuple has been added!')\n    print(test_tup)\n    \ndef test_add_dict_to_tuple_with_none():\n    '''\n    Test function to add a dictionary to the tuple with a null value.\n    '''\n    test_dict = {'one': 'Hello', 'two': 'World'}\n    test_tup = add_dict_to_tuple(test_dict, None)\n    print('The tuple has been added!')\n    print(test_tup)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    result = [[0 for _ in range(len(cost))] for _ in range(len(cost))]\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if cost[i][j]!= 0:\n                result[i][j] = cost[i][j]/cost[i][j]\n            else:\n                result[i][j] = 0\n    return result\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    totalCells = len(cost)\n    cellList = []\n    for i in range(0,totalCells):\n        cellList.append(i)\n    result = []\n    for i in range(totalCells):\n        result.append(0)\n    for i in range(totalCells):\n        for j in range(i,totalCells):\n            result[i] += cost[j][i]\n            result[j] += cost[i][j]\n    for i in range(totalCells):\n        result[i] = result[i]/totalCells\n    return result\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize the answer variable to zero\n    answer = 0\n    \n    # Check if the matrix is not empty\n    if cost == []:\n        return 0\n    \n    # Get the size of the matrix\n    n = len(cost)\n    \n    # Iterate through the matrix and calculate the sum of the cells\n    for i in range(0, n):\n        for j in range(0, i):\n            answer += cost[i][j]\n    \n    # Return the answer\n    return answer/n\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    s = []\n    cost.sort()\n    average = 0\n    for i in range(n):\n        average += cost[i]\n        s.append(i)\n    average /= n\n    if n == 0:\n        return 0\n    else:\n        return average\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Create a dictionary to store cell visited in each path.\n    # If the cell is not visited,\n    # the value is not updated,\n    # otherwise, the cell is visited again.\n    visited = {}\n    total_cost = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Write your code here\n    l = len(cost)\n    total = 0\n    for i in range(l):\n        total += sum(cost[i])\n    average = total/l\n    return average\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost == []:\n        return 0\n    dp = [[0 for x in range(cost[0][0]+1)] for y in range(cost[0][0]+1)]\n    for x in range(cost[0][0]+1):\n        for y in range(cost[0][0]+1):\n            if x == 0 or y == 0:\n                dp[x][y] = 0\n            else:\n                dp[x][y] = dp[x-1][y] + dp[x][y-1]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def flatten(l):\n        return [item for sublist in l for item in sublist]\n    def solve(costs):\n        def to_dict(l):\n            return dict(zip(l, range(len(l))))\n        def to_list(l):\n            return [item for sublist in l for item in sublist]\n        def can_move_to(i,j,visited_cells):\n            return i>=0 and i<len(visited_cells) and j>=0 and j<len(visited_cells[i])\n        def min_max(visited_cells):\n            min_cost = float('inf')\n            max_cost = -float('inf')\n            for i in range(len(visited_cells)):\n                for j in range(len(visited_cells[i])):\n                    if visited_cells[i][j] == 0:\n                        continue\n                    if visited_cells[i][j] < min_cost:\n                        min_cost = visited_cells[i][j]\n                    if visited_cells[i][j] > max_cost:\n                        max_cost = visited_cells[i][j]\n            return min_cost, max_cost\n        def get_vertical_sequence(row,col,visited_cells):\n            vertical_sequence = []\n            for i in range(row):\n                row_sequence = []\n                for j in range(col):\n                    row_sequence.append(visited_cells[i][j])\n                vertical_sequence.append(row_sequence)\n            return vertical_sequence\n        def get_horizontal_sequence(row,col,visited_cells):\n            horizontal_sequence = []\n            for i in range(row):\n                row_sequence = []\n                for j in range(col):\n                    row_sequence.append(visited_cells[i][j])\n                horizontal_sequence.append(row_sequence)\n            return horizontal_sequence\n        vertical_sequence = get_vertical_sequence(len(costs)-1,len(costs[0])-1,costs)\n        horizontal_sequence = get_horizontal_sequence(len(costs[0])-1,len(costs[0])-1,costs)\n        left_corner = 0\n        right_corner = len(costs)\n        for row in range(len(vertical_sequence)):\n            for col in range(len(vertical_sequence[row])):\n                cell = vertical_sequence[row][col]\n                if can_move_to(row,col,visited_cells):\n                    visited_cells[row][col] = cell\n                    visited_cells[row+1][col] = 0\n                    visited_cells[row][col+1] = 0\n                    visited_cells[row+1][col+1] = 0\n                    left_corner += 1\n                    if row-1>=0:\n                        left_corner += get_vertical_sequence(row-1,col,visited_cells)\n                    right_corner += get_horizontal_sequence(row,col,visited_cells)\n        return left_corner, right_corner, to_dict(vertical_sequence)\n    def find_path(row,col,visited_cells,path):\n        if row == len(visited_cells):\n            return visited_cells\n        if row >= len(visited_cells):\n            return None\n        if visited_cells[row][col] == 0:\n            return None\n        if visited_cells[row][col] == visited_cells[row+1][col]:\n            visited_cells[row][col] = 0\n            visited_cells[row+1][col] = 0\n            path.append([row,col])\n            path.extend(find_path(row+1,col,visited_cells,path))\n            path.extend(find_path(row,col+1,visited_cells,path))\n        else:\n            return None\n    path = []\n    path = find_path(0,0,visited_cells,path)\n    if len(path) == 0:\n        return None\n    left_corners, right_corners, matrix = solve(costs)\n    total_cost = 0\n    for path in matrix:\n        total_cost += path[-1]\n    return total_cost/left_corners\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # First, find all the possible paths\n    allPossiblePaths = []\n    for row in range(len(cost)):\n        for col in range(len(cost[0])):\n            allPossiblePaths.append([row, col, cost[row][col]])\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    import math\n    import itertools\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students=dict(students)\n    filtered_dict={}\n    for student in students:\n        for height, weight in students[student]:\n            if weight>h and height>w:\n                if student not in filtered_dict:\n                    filtered_dict[student]=students[student]\n                else:\n                    if students[student][0]<height and students[student][1]<weight:\n                        filtered_dict[student]=(students[student][0],students[student][1])\n    return filtered_dict\n    \ndef main():\n    '''\n    The program accepts as command line arguments the number of students and height and weight of students, and writes the output in the same file\n    '''\n    students=read_data()\n    print(filter_data(students,150,300))\n    write_data(filter_data(students,150,300),'output.txt')\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # return all the students whose height and weight are above the minimal height and weight\n    filtered_students = []\n    for student in students:\n        if (student[1][1]>h and student[1][0]>h and student[1][0]>w):\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return list(filter(lambda student: student[1][1]>h and student[1][0]>w,students))\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if student[h] > w[w.index(min(w))]:\n            filtered_students.append(student)\n    return filtered_students\n    \ndef calculate_average(students):\n    '''\n    The input is given as a list of dictionaries. Write a function to calculate the average of a list of dictionaries.\n    '''\n    sum_of_weight = 0\n    for student in students:\n        sum_of_weight += student[w.index(min(w))]\n    return sum_of_weight/len(students)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for s in students:\n        if s['height'] > h and s['weight'] > w:\n            students.remove(s)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create empty dictionary.\n    filtered_data = {}\n    # Iterate through dictionary, get the students.\n    for student in students:\n        student_height = student[0]\n        student_weight = student[1]\n        # Check the weight is above the minimum.\n        if student_weight > w[h[student_height]] and student_height > h[w[student_weight]]:\n            # Filter the student.\n            filtered_data[student] = student_height\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    list_of_students = []\n    for student in students.values():\n        for height, weight in student:\n            if h >= height and w >= weight:\n                list_of_students.append(student)\n                break\n    return list_of_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = []\n    for student in students:\n        if (student[1][0] >= h) and (student[1][1] >= w):\n            filtered.append(student)\n    return filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = []\n    for stu in students:\n        if (stu[1][0] >= w[h.index(h[stu[1][0]])]) or (stu[1][1] >= w[h.index(h[stu[1][1]])]) or (stu[1][0] >= w[h.index(h[stu[1][0]])]) or (stu[1][1] >= w[h.index(h[stu[1][1]])]):\n            result.append(stu)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filt_dict = {}\n    for stud in students:\n        if stud.height > h and stud.weight > w:\n            filt_dict[stud.name] = (stud.height, stud.weight)\n    return filt_dict\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count=0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return list(map(lambda x: (x[0] == x[1]) and (x[0] in nums2) and (x[1] in nums1), enumerate(nums1+nums2)))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # your code here\n    count = 0\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 == num2:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len(set(nums1) & set(nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter1 = 0\n    counter2 = 0\n    for num in nums1:\n        if num in nums2:\n            counter1 += 1\n    for num in nums2:\n        if num in nums1:\n            counter2 += 1\n    return counter1, counter2\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # # check if two list are same\n    # if len(nums1)!= len(nums2):\n    #     return 0\n    #\n    # # check if the values are equal, else return 0\n    # if set(nums1)!= set(nums2):\n    #     return 0\n    #\n    # # return the index\n    # return len(list(set(nums1) & set(nums2)))\n    \n    return len(list(set(nums1).intersection(nums2)))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(map(eq, nums1, nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    # initialize counters for each of the numbers\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 == num2:\n                count += 1\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = str(power)\n    base = str(base)\n    if power == '0':\n        return base\n    else:\n        return base + power_base_sum(base, int(power))\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        result += power % base\n        power = int(power / base)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    return base ** power\n    \nprint(power_base_sum(2, 3))\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = int(base)\n    power = int(power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Base case\n    if base == 10:\n        return power\n    \n    # Base case\n    if power == 0:\n        return base\n    \n    # Recursive case\n    return base + power_base_sum(base, power - 1)\n    \nprint(power_base_sum(9, 7))"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while base:\n        result += base % 10\n        base = base // 10\n    \n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power % 10\n    sum = 0\n    while base:\n        base, n = base % 10, base\n        sum += n\n    return sum**power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 1:\n        return 1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.findall('([a-zA-Z]+?)([^a-zA-Z ]*)', text1, re.IGNORECASE)\n    text = [re.sub('\\s+','', s) for s in text]\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if \"\\\"\" in text1:\n        text2 = text1.split(\"\\\"\")\n        text2 = \" \".join(text2[1:-1])\n        return text2\n    else:\n        return text1\ndef delete_brackets(text):\n    '''\n    Write a function to delete brackets \"()\".\n    '''\n    pattern = r'\\((.*?)\\)'\n    text = re.sub(pattern, '', text)\n    pattern = r'(\\(\\(\\d+\\))'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_number(text):\n    '''\n    Write a function to remove numbers from the string, such as the number \"16\".\n    '''\n    pattern = r'\\d+'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_dob(text):\n    '''\n    Write a function to remove the date of birth of the person, such as \"July 17, 2015\"\n    '''\n    pattern = r'[0-9]{2}/[0-9]{2}/[0-9]{4}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_dob_time(text):\n    '''\n    Write a function to remove the date of birth of the person, such as \"July 17, 2015 18:34\"\n    '''\n    pattern = r'(\\d{1,2})([0-9]{2})([0-9]{2})'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_name(text):\n    '''\n    Write a function to remove the name from the person, such as \"Melissa James\"\n    '''\n    pattern = r'[a-zA-Z]{2,30}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_phone_number(text):\n    '''\n    Write a function to remove the phone number from the person, such as \"09834-1234567\"\n    '''\n    pattern = r'\\d{3}-\\d{2}-\\d{2}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_email(text):\n    '''\n    Write a function to remove the email address from the person, such as \"james@example.com\"\n    '''\n    pattern = r'[a-zA-Z0-9_\\-\\.]+@[a-zA-Z0-9_\\-\\.]+\\.[a-zA-Z]{2,3}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_special_char(text):\n    '''\n    Write a function to remove any special characters from the string.\n    '''\n    pattern = r'[!@#$%^&*()_+-=|<>,.?]'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_all_special_char(text):\n    '''\n    Write a function to remove any special characters from the string.\n    '''\n    pattern = r'[!@#$%^&*()_+-=|<>,.?]'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_special_char_long(text):\n    '''\n    Write a function to remove any special characters from the string.\n    '''\n    pattern = r'[!@#$%^&*()_+-=|<>,.?]'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_all_special_char_long(text):\n    '''\n    Write a function to remove any special characters from the string.\n    '''\n    pattern = r'[!@#$%^&*()_+-=|<>,.?]'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_name_long(text):\n    '''\n    Write a function to remove the name of the person, such as \"Melissa James\"\n    '''\n    pattern = r'[a-zA-Z]{2,30}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_phone_number_long(text):\n    '''\n    Write a function to remove the phone number of the person, such as \"09834-1234567\"\n    '''\n    pattern = r'\\d{3}-\\d{2}-\\d{2}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_email_long(text):\n    '''\n    Write a function to remove the email address of the person, such as \"james@example.com\"\n    '''\n    pattern = r'[a-zA-Z0-9_\\-\\.]+@[a-zA-Z0-9_\\-\\.]+\\.[a-zA-Z]{2,3}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_special_char_long_long(text):\n    '''\n    Write a function to remove any special characters from the string.\n    '''\n    pattern = r'[!@#$%^&*()_+-=|<>,.?]'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_all_special_char_long_long(text):\n    '''\n    Write a function to remove any special characters from the string.\n    '''\n    pattern = r'[!@#$%^&*()_+-=|<>,.?]'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_name_long_long(text):\n    '''\n    Write a function to remove the name of the person, such as \"Melissa James\"\n    '''\n    pattern = r'[a-zA-Z]{2,30}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_phone_number_long_long(text):\n    '''\n    Write a function to remove the phone number of the person, such as \"09834-1234567\"\n    '''\n    pattern = r'\\d{3}-\\d{2}-\\d{2}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_email_long_long(text):\n    '''\n    Write a function to remove the email address of the person, such as \"james@example.com\"\n    '''\n    pattern = r'[a-zA-Z0-9_\\-\\.]+@[a-zA-Z0-9_\\-\\.]+\\.[a-zA-Z]{2,3}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_special_char_long_long_long(text):\n    '''\n    Write a function to remove any special characters from the string.\n    '''\n    pattern = r'[!@#$%^&*()_+-=|<>,.?]'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_all_special_char_long_long_long(text):\n    '''\n    Write a function to remove any special characters from the string.\n    '''\n    pattern = r'[!@#$%^&*()_+-=|<>,.?]'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_name_long_long_long(text):\n    '''\n    Write a function to remove the name of the person, such as \"Melissa James\"\n    '''\n    pattern = r'[a-zA-Z]{2,30}'\n    text = re.sub(pattern, '', text)\n    return text\ndef remove_phone_number_long_long_long(text):\n    '''\n    Write a function to remove the phone number of the person, such as \"09834-1234567\"\n    '''\n    pattern = r'\\d{3}-\\d{2}-\\d{2}'\n    text = re.sub(pattern, '', tex"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #parsing text\n    list1=text1.split()\n    #extracting values\n    quotation_values=[]\n    for item in list1:\n        if item[0]==\"(\" or item[-1]==\")\":\n            quotation_values.append(item)\n    #printing extracted values\n    if len(quotation_values)!=0:\n        print(f\"Extracted values are: {quotation_values}\")\n    else:\n        print(\"No quotation marks found\")\n    \ndef extract_quotation1(text1):\n    '''\n    Write a function to extract values between quotations of the given string.\n    '''\n    #parsing text\n    list1=text1.split()\n    #extracting values\n    quotation_values=[]\n    for item in list1:\n        if item[0]==\"'\" or item[-1]=='\"':\n            quotation_values.append(item)\n    #printing extracted values\n    if len(quotation_values)!=0:\n        print(f\"Extracted values are: {quotation_values}\")\n    else:\n        print(\"No quotation marks found\")\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<=[^A-Z])[\\'\\\"]{0,}(?=[A-Z])')\n    quotations = pattern.findall(text1)\n    return quotations\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    #Replace all the quotations in the string \" \" with the corresponding character.\n    text1=text1.replace('\"', '\\'')\n    \n    #Remove the characters that are not alphabets, numbers, alphabets,\n    #numbers, or special characters.\n    \n    #This step is necessary for parsing the quotations in a string.\n    #Thus, if the quotation mark is in the middle of the string, the quotation\n    #mark will be in the middle of the string.\n    #For example: \"I like F-strings\" and \"I like My favorite fruits\"\n    #will be split by the quotation mark.\n    #So, \"F-strings\" will be split into \"f\"-strings and \"-\" will be split\n    #into \"f-\".\n    text1=text1.replace('F-strings', 'f-strings')\n    text1=text1.replace('F-string', 'f-string')\n    text1=text1.replace('-strings', '-strings')\n    \n    #The \"end\" of the quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('.', '.')\n    text1=text1.replace('\u2013', '-')\n    \n    #The quotation mark will be removed.\n    #So, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('!', '!')\n    text1=text1.replace('!', '!')\n    \n    #The \"end\" of the quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('?', '?')\n    text1=text1.replace('?', '?')\n    \n    #The \"end\" of the quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string,\n    #the \"end\" will be removed.\n    text1=text1.replace('\"', '')\n    \n    #The quotation mark will be removed.\n    #For example, if the quotation mark is located at the end of the string"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    quot1 = re.search(r'(\\n[^\\n\\t ]+)', text1)\n    quot2 = re.search(r'([^\\n\\t]+)', text1)\n    quot3 = re.search(r'([^\\n\\t]+)', text1)\n    quot4 = re.search(r'([^\\n\\t]+)', text1)\n    quot5 = re.search(r'([^\\n\\t]+)', text1)\n    quot6 = re.search(r'([^\\n\\t]+)', text1)\n    quot7 = re.search(r'([^\\n\\t]+)', text1)\n    quot8 = re.search(r'([^\\n\\t]+)', text1)\n    quot9 = re.search(r'([^\\n\\t]+)', text1)\n    quot10 = re.search(r'([^\\n\\t]+)', text1)\n    quot11 = re.search(r'([^\\n\\t]+)', text1)\n    quot12 = re.search(r'([^\\n\\t]+)', text1)\n    quot13 = re.search(r'([^\\n\\t]+)', text1)\n    quot14 = re.search(r'([^\\n\\t]+)', text1)\n    quot15 = re.search(r'([^\\n\\t]+)', text1)\n    quot16 = re.search(r'([^\\n\\t]+)', text1)\n    quot17 = re.search(r'([^\\n\\t]+)', text1)\n    quot18 = re.search(r'([^\\n\\t]+)', text1)\n    quot19 = re.search(r'([^\\n\\t]+)', text1)\n    quot20 = re.search(r'([^\\n\\t]+)', text1)\n    quot21 = re.search(r'([^\\n\\t]+)', text1)\n    quot22 = re.search(r'([^\\n\\t]+)', text1)\n    quot23 = re.search(r'([^\\n\\t]+)', text1)\n    quot24 = re.search(r'([^\\n\\t]+)', text1)\n    quot25 = re.search(r'([^\\n\\t]+)', text1)\n    quot26 = re.search(r'([^\\n\\t]+)', text1)\n    quot27 = re.search(r'([^\\n\\t]+)', text1)\n    quot28 = re.search(r'([^\\n\\t]+)', text1)\n    quot29 = re.search(r'([^\\n\\t]+)', text1)\n    quot30 = re.search(r'([^\\n\\t]+)', text1)\n    quot31 = re.search(r'([^\\n\\t]+)', text1)\n    quot32 = re.search(r'([^\\n\\t]+)', text1)\n    quot33 = re.search(r'([^\\n\\t]+)', text1)\n    quot34 = re.search(r'([^\\n\\t]+)', text1)\n    quot35 = re.search(r'([^\\n\\t]+)', text1)\n    quot36 = re.search(r'([^\\n\\t]+)', text1)\n    quot37 = re.search(r'([^\\n\\t]+)', text1)\n    quot38 = re.search(r'([^\\n\\t]+)', text1)\n    quot39 = re.search(r'([^\\n\\t]+)', text1)\n    quot40 = re.search(r'([^\\n\\t]+)', text1)\n    quot41 = re.search(r'([^\\n\\t]+)', text1)\n    quot42 = re.search(r'([^\\n\\t]+)', text1)\n    quot43 = re.search(r'([^\\n\\t]+)', text1)\n    quot44 = re.search(r'([^\\n\\t]+)', text1)\n    quot45 = re.search(r'([^\\n\\t]+)', text1)\n    quot46 = re.search(r'([^\\n\\t]+)', text1)\n    quot47 = re.search(r'([^\\n\\t]+)', text1)\n    quot48 = re.search(r'([^\\n\\t]+)', text1)\n    quot49 = re.search(r'([^\\n\\t]+)', text1)\n    quot50 = re.search(r'([^\\n\\t]+)', text1)\n    quot51 = re.search(r'([^\\n\\t]+)', text1)\n    quot52 = re.search(r'([^\\n\\t]+)', text1)\n    quot53 = re.search(r'([^\\n\\t]+)', text1)\n    quot54 = re.search(r'([^\\n\\t]+)', text1)\n    quot55 = re.search(r'([^\\n\\t]+)', text1)\n    quot56 = re.search(r'([^\\n\\t]+)', text1)\n    quot57 = re.search(r'([^\\n\\t]+)', text1)\n    quot58 = re.search(r'([^\\n\\t]+)', text1)\n    quot59 = re.search(r'([^\\n\\t]+)', text1)\n    quot60 = re.search(r'([^\\n\\t]+)', text1)\n    quot61 = re.search(r'([^\\n\\t]+)', text1)\n    quot62 = re.search(r'([^\\n\\t]+)', text1)\n    quot63 = re.search(r'([^\\n\\t]+)', text1)\n    quot64 = re.search(r'([^\\n\\t]+)', text1)\n    quot65 = re.search(r'([^\\n\\t]+)', text1)\n    quot66 = re.search(r'([^\\n\\t]+)', text1)\n    quot67 = re.search(r'([^\\n\\t]+)', text1)\n    quot68 = re.search(r'([^\\n\\t]+)', text1)\n    quot69 = re.search(r'([^\\n\\t]+)', text1)\n    quot70 = re.search(r'([^\\n\\t]+)', text1)\n    quot71 = re.search(r'([^\\n\\t]+)', text1)\n    quot72 = re.search(r'([^\\n\\t]+)', text1)\n    quot73 = re.search(r'([^\\n\\t]+)', text1)\n    quot74 = re.search(r'([^\\n\\t]+)', text1)\n    quot75 = re.search(r'([^\\n\\t]+)', text1)\n    quot76 = re.search(r'([^\\n\\t]+)', text1)\n    quot77 = re.search(r'([^\\n\\t]+)', text1)\n    quot78 = re.search(r'([^\\n\\t]+)', text1)\n    quot79 = re.search(r'([^\\n\\t]+)', text1)\n    quot80 = re.search(r'([^\\n\\t]+)', text1)\n    quot81 = re.search(r'([^\\n\\t]+)', text1)\n    quot82 = re.search(r'([^\\n\\t]+)', text1)\n    quot83 = re.search(r'([^\\n\\t]+)', text1)\n    quot84 = re.search(r'(["
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=text1.replace('\"','')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"'\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2018\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201d\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u2019\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text2)\n    text2=text2.replace(\"\u201c\",'')\n    text2=re.sub(\"[.,?!]\",\"\",text"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    q_reg = re.compile('(?:\\\\s\\\\s*|\\\\s\\\\s+)(\\\\d+(?:\\.?\\\\d+)?|\\\\d+)(?:\\\\.?\\\\d+|[^\\s]+)')\n    quotation_list = q_reg.findall(text1)\n    return quotation_list\n    \n    \ndef extract_marks(text1):\n    '''\n    Write a function to extract marks of the given text.\n    '''\n    marks_reg = re.compile('(?:\\\\s\\\\s*|\\\\s\\\\s+)([A-Z]{3,}[A-Z]{3,})(?:\\\\.?\\\\d+|[^\\\\s]+)')\n    marks_list = marks_reg.findall(text1)\n    return marks_list\n    \n    \ndef find_punctuation(text1):\n    '''\n    Write a function to find punctuation marks in the given text.\n    '''\n    punctuation_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    punctuation_list = punctuation_reg.findall(text1)\n    return punctuation_list\n    \n    \ndef format_marks(text1):\n    '''\n    Write a function to format marks to correct style of the given text.\n    '''\n    formatted_marks = re.sub('[^a-zA-Z0-9_~()]+', '', text1)\n    return formatted_marks    \n    \n    \ndef format_quotation(text1):\n    '''\n    Write a function to format quotation marks to correct style of the given text.\n    '''\n    quotation_reg = re.compile('(?:\\\\s\\\\s*|\\\\s\\\\s+)([A-Z]{3,}[A-Z]{3,})(?:\\\\.?\\\\d+|[^\\\\s]+)')\n    quotation_list = quotation_reg.findall(text1)\n    return quotation_list    \n    \n    \ndef extract_stop_words(text1):\n    '''\n    Write a function to extract stop words from the given text.\n    '''\n    stop_words_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    stop_words_list = stop_words_reg.findall(text1)\n    return stop_words_list    \n    \n    \ndef extract_combined_words(text1):\n    '''\n    Write a function to extract words from the given text.\n    '''\n    words_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    combined_words_list = words_reg.findall(text1)\n    return combined_words_list    \n    \n    \ndef remove_stop_words(text1):\n    '''\n    Write a function to remove stop words from the given text.\n    '''\n    stop_words_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    stop_words_list = stop_words_reg.findall(text1)\n    for stop_word in stop_words_list:\n        text1 = text1.replace(stop_word, '')\n    return text1\n    \n    \ndef replace_special_characters(text1):\n    '''\n    Write a function to replace special characters with their values.\n    '''\n    special_characters_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    special_characters_list = special_characters_reg.findall(text1)\n    for special_character in special_characters_list:\n        text1 = text1.replace(special_character, '')\n    return text1    \n    \n    \ndef split_text(text1, split_char):\n    '''\n    Write a function to split text to list of words.\n    '''\n    split_reg = re.compile('([^\\s]+)' + split_char + '[^\\s]+')\n    splitted_list = split_reg.findall(text1)\n    return splitted_list\n    \n    \ndef convert_to_text(text1):\n    '''\n    Write a function to convert text into list of words.\n    '''\n    words_list = split_text(text1,'')\n    return words_list\n    \n    \ndef sort_words(text1):\n    '''\n    Write a function to sort the list of words in alphabetical order.\n    '''\n    words_list = convert_to_text(text1)\n    words_list.sort()\n    return words_list\n    \n    \ndef remove_punctuation(text1):\n    '''\n    Write a function to remove punctuation marks from the given text.\n    '''\n    punctuation_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    punctuation_list = punctuation_reg.findall(text1)\n    for punctuation in punctuation_list:\n        text1 = text1.replace(punctuation, '')\n    return text1    \n    \n    \ndef add_punctuation(text1):\n    '''\n    Write a function to add punctuation marks to the given text.\n    '''\n    punctuation_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    punctuation_list = punctuation_reg.findall(text1)\n    for punctuation in punctuation_list:\n        text1 = text1.replace(punctuation, '.')\n    return text1    \n    \n    \ndef remove_stop_words(text1):\n    '''\n    Write a function to remove stop words from the given text.\n    '''\n    stop_words_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    stop_words_list = stop_words_reg.findall(text1)\n    for stop_word in stop_words_list:\n        text1 = text1.replace(stop_word, '')\n    return text1    \n    \n    \ndef join_words(text1, join_char):\n    '''\n    Write a function to join words in a list of words.\n    '''\n    words_list = convert_to_text(text1)\n    words_list = sort_words(words_list)\n    words_joined_list = [join_char.join(x) for x in words_list]\n    return words_joined_list    \n    \n    \ndef remove_combined_words(text1):\n    '''\n    Write a function to remove combined words from the given text.\n    '''\n    combined_words_list = convert_to_text(text1)\n    combined_words_list = sort_words(combined_words_list)\n    combined_words_joined_list = [join_char.join(x) for x in combined_words_list]\n    return combined_words_joined_list    \n    \n    \ndef is_valid_letter(text1):\n    '''\n    Write a function to check if the given text is valid letter.\n    '''\n    letters_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    letters_list = letters_reg.findall(text1)\n    for letter in letters_list:\n        if letter in '''!()-[]{};:'\"\\,<>./?@#$%^&*_~''':\n            return False\n    return True\n    \n    \ndef is_valid_quotation(text1):\n    '''\n    Write a function to check if the given text is valid quotation mark.\n    '''\n    quotation_reg = re.compile('[^a-zA-Z0-9_.~()]+')\n    quotation_list = quotation_reg.findall(text1)\n    for quotation in quotation_list:\n        if quotation in '''!()-[]{};:'\"\\,<>./?@#$%^&*_~''':\n            return False\n    return True\n    \n    \ndef is_valid_marks(text1):\n    '''\n    Write a function to check if the given text is valid format marks.\n    '''\n    mark"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile('[\\\"][\\w\\-]+[\\\"][\\w\\-]+[\\\"][\\w\\-]')\n    text_list = []\n    quotation_list = []\n    quotation_index = -1\n    for index, i in enumerate(text1):\n        if i == '\\\"':\n            quotation_index = index\n            break\n    if quotation_index!= -1:\n        text_list.append(text1[quotation_index+1:])\n        text_list[quotation_index] = text_list[quotation_index][: -1] + text1[:quotation_index]\n    return text_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    return value\ndef extract_destination(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_time(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_date(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_type(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_quantity(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_composition(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_preparation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_delivery(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_billing_date(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_billing_time(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_billing_date_time(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_billing_time_date(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_destination_time(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_destination_date(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_phone(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_email(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_url(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_company(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_specialty(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    quotation_mark = text1.find('\"')\n    value = text1[quotation_mark:]\n    value_1 = value.replace('\"','')\n    return value_1\ndef extract_address(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given strin"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] = test_tup[i] * test_tup[i+1]\n    return test_tup\n    #return test_tup[i] * test_tup[i+1]\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1:]\n    t_3 = []\n    for i in t_1:\n        t_3.append(i * t_2[0])\n    return tuple(t_3)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)):\n        res = res + test_tup[i] * test_tup[i+1]\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for index in range(len(test_tup)):\n        result.append(test_tup[index] * test_tup[index+1])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)-1):\n        res = res + (test_tup[i] * test_tup[i+1])\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (tuple(x * y for x, y in zip(test_tup[0], test_tup[1])))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # TODO: Write the function in the editor below\n    # TODO:\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    result = ()\n    for i in test_tup:\n        result = result + (i*i)\n    return result\n    pass\ndef multiply_elements_recursive(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    result = ()\n    for i in range(len(test_tup)):\n        result = result + (test_tup[i] * test_tup[(i+1) % len(test_tup)])\n    return result\n    pass\ndef get_element(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns the first element of the tuple.\n    '''\n    # YOUR CODE HERE\n    return test_tup[0]\n    pass\ndef get_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i.\n    '''\n    # YOUR CODE HERE\n    return test_tup\n    pass\ndef add_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    return (test_tup[0] + test_tup[1])\n    pass\ndef add_elements_recursive(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    return (test_tup[0] + test_tup[1])\n    pass\ndef divide_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i / t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    return (test_tup[0] / test_tup[1])\n    pass\ndef divide_elements_recursive(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i / t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    return (test_tup[0] / test_tup[1])\n    pass\ndef multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    return (test_tup[0] * test_tup[1])\n    pass\ndef multiply_elements_recursive(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    return (test_tup[0] * test_tup[1])\n    pass\ndef is_prime(test_number):\n    '''\n    Write a function that takes as input a number (number) and returns True if the number is a prime number, and False otherwise.\n    '''\n    # YOUR CODE HERE\n    return True\n    pass\ndef is_prime_recursive(test_number):\n    '''\n    Write a function that takes as input a number (number) and returns True if the number is a prime number, and False otherwise.\n    '''\n    # YOUR CODE HERE\n    return True\n    pass\ndef main():\n    # DO NOT MODIFY anything below this line\n    print(\"Example 1:\")\n    print(\"Input : \", end=\"\")\n    print(test_tuple)\n    print(\"Output :\")\n    print(multiply_elements_recursive((2, 3)))\n    print()\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2, t_3,..., t_N = test_tup\n    return (t_i * t_2 for t_i in range(t_1,t_N+1))\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1=sorted(lst1)\n    lst2=sorted(lst2)\n    lst3=list(lst1+lst2)\n    lst4=list(map(sum,zip(lst1,lst2)))\n    return lst3,lst4\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    sum=0\n    for i in lst1:\n        sum=sum+i\n    for i in lst2:\n        sum=sum+i\n    return sum\n    \n    \n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    total=0\n    for i in range(len(lst1)):\n        total+=lst1[i]\n    for j in range(len(lst2)):\n        total+=lst2[j]\n    return total\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s=0\n    for i in range(len(lst1)):\n        s+=lst1[i]\n    for i in range(len(lst2)):\n        s+=lst2[i]\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    total = 0\n    for i in range(len(lst1)):\n        total+=lst1[i]\n        lst2[i]=total\n    return lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s=0\n    for i in range(len(lst1)):\n        s=s+lst1[i]+lst2[i]\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [element + element for element in lst1]\n    \n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in lst1:\n        sum += i\n    for i in lst2:\n        sum += i\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    lst = []\n    current = nums[0]\n    prev = nums[0]\n    for x in range(1, len(nums)):\n        if current == nums[x]:\n            continue\n        if current!= prev:\n            lst.append(prev)\n        current = nums[x]\n        prev = nums[x]\n    lst.append(current)\n    return lst\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    seen = set()\n    for i, num in enumerate(nums):\n        if num in seen:\n            continue\n        seen.add(num)\n        j = i - 1\n        while j >= 0 and nums[j] == nums[j - 1]:\n            j -= 1\n        \n        if j == i:\n            continue\n        else:\n            nums[i] = nums[j]\n            nums[j] = num\n    \n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    for i, val in enumerate(nums):\n        if val not in seen:\n            seen.add(val)\n            nums[i] = val\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # If there are only one element, return it\n    if len(nums) == 1:\n        return nums\n    # If there are several elements, take all unique elements of the first and last elements\n    first_unique = set(nums[0:2])\n    for n in range(1, len(nums)):\n        if first_unique == set(nums[n-1:n+1]):\n            first_unique.remove(nums[n-1])\n    return first_unique\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = groupby(sorted(nums),key=len)\n    return list(filter(lambda x: x[1] == x[0],list(grouped)))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    assert type(nums) == list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = [n for n,g in groupby(nums) if len(list(g)) > 1]\n    return lst\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return [nums]\n    seen = set()\n    seen_add = seen.add\n    for num in nums:\n        if num not in seen:\n            seen_add(num)\n            yield num\n    return\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    prev = nums[0]\n    for curr in range(1, len(nums)):\n        if prev == nums[curr - 1]:\n            continue\n        if prev!= nums[curr]:\n            prev = nums[curr]\n            continue\n        return prev + consecutive_duplicates(nums[curr + 1:])\n    return prev + consecutive_duplicates(nums[curr + 1:])\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    c = 2 * r * (math.log(h/2))\n    a = (c*c)/((math.pi*r*r))\n    return a\ndef shearing_matrix(r,h):\n    '''\n    Write a function to find the shearing matrix, given the radius and height.\n    '''\n    s = (r**2*h)/(2*r)\n    return s\ndef tangent_vector(r,h):\n    '''\n    Write a function to find the tangent vector, given the radius and height.\n    '''\n    t = r - h/2\n    return t\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*(2*r*math.tan(math.radians(h))-1)\ndef widernersurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*(r*math.tan(math.radians(h))+1)\ndef midline(r,h):\n    '''\n    Write a function to find the midline given radius r and the height h.\n    '''\n    return r*(1+h/2)\ndef midline_cone(r,h):\n    '''\n    Write a function to find the midline given radius r and the height h.\n    '''\n    return r*(1+2*h/3)\ndef narrowsidecone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*(r*math.tan(math.radians(h))-1)\ndef narrowsidecone_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*(r*math.tan(math.radians(h))+1)\ndef tiltedcone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*(r*math.tan(math.radians(h))-r)\ndef tiltedcone_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*(r*math.tan(math.radians(h))+r)\ndef surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*r*(1+h/2)\ndef surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+h/3)\ndef total_surface(r,h):\n    '''\n    Write a function to find the total surface area of a cone given radius r and the height h.\n    '''\n    return 0.5*r*(1+h/2)\ndef total_surface_cone(r,h):\n    '''\n    Write a function to find the total surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+2*h/3)\ndef ratio(r,h):\n    '''\n    Write a function to find the ratio of the area of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+h/2)\ndef ratio_cone(r,h):\n    '''\n    Write a function to find the ratio of the area of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+2*h/3)\ndef volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+h/2)**2\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+h/3)**2\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+2*h/3)**2\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+h/3)**3\ndef cylinder_volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+2*h/3)**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+h/3)**4\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+2*h/3)**4\ndef volume_cone_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+h/3)**5\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+h/3)**2\ndef surface_cylinder_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*(1+2*h/3)**2\ndef volume_cone_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+h/3)**3\ndef volume_cone_cylinder_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+2*h/3)**3\ndef surface_cone_cylinder_cone_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    return r*(1+h/3)**4\ndef surface_cone_cylinder_cone_cone_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    return r*(1+2*h/3)**4\ndef surface_cylinder_cone_cylinder_cone_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    return r*(1+h/3)**5\ndef volume_cone_cylinder_cone_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+h/3)**6\ndef volume_cone_cylinder_cone_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+2*h/3)**6\ndef volume_cone_cylinder_cone_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+h/3)**7\ndef volume_cone_cylinder_cone_cone_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+2*h/3)**7\ndef volume_cylinder_cone_cone_cone_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return r*(1+h/3)**8\ndef volume_cylinder_cone_cone_cone_cone_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    ''"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return (2*pi*r*h) + (2*pi*r*h*(h*h-r*h))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # A = 6.82817 * 10**(-12)\n    A = 0.282077\n    # print(A)\n    # return(math.sin(A*math.pi/180)*A*math.pi*r)\n    # return math.sin(A*math.pi/180)*A*math.pi*r\n    # print(math.sin(A*math.pi/180))\n    # return math.sin(A*math.pi/180)*A*math.pi*r\n    \n    def surface_area(s,r,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*r)*(r**2)\n    \n    def surface_area_cone(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)\n    \n    def surface_area_cone_half(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_half_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        if h == 0:\n            return (A*math.pi*s)\n        else:\n            return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)\n    \n    def surface_area_cone_recursive_half(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        if h == 0:\n            return (A*math.pi*s)\n        else:\n            return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_recursive_half_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        if h == 0:\n            return (A*math.pi*s)\n        else:\n            return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_recursive_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        if h == 0:\n            return (A*math.pi*s)\n        else:\n            return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_half_recursive_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    # print(surface_area_cone_recursive_recursive(s,h))\n    # print(surface_area_cone_recursive_half_recursive(s,h))\n    # print(surface_area_cone_half_recursive(s,h))\n    # print(surface_area_cone_recursive(s,h))\n    # print(surface_area_cone_half_recursive(s,h))\n    \n    def surface_area_cone_half_recursive_recursive_half(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_recursive_recursive_half(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_recursive_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)\n    \n    def surface_area_cone_recursive_half(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)\n    \n    def surface_area_cone_recursive_half_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)\n    \n    def surface_area_cone_half_recursive_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)\n    \n    def surface_area_cone_half_recursive_recursive_half(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)\n    \n    # print(surface_area_cone_recursive_recursive(s,h))\n    # print(surface_area_cone_recursive_half_recursive(s,h))\n    # print(surface_area_cone_half_recursive(s,h))\n    # print(surface_area_cone_recursive_half_recursive(s,h))\n    \n    def surface_area_cone_half_recursive_recursive_half_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_recursive_recursive_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_recursive_recursive_half_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_recursive_half_recursive_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_half_recursive_recursive_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_half_recursive_recursive_half(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_half_recursive_recursive_half_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter of the cone.\n        '''\n        return (A*math.pi*s*h)/2\n    \n    def surface_area_cone_half_recursive_half_recursive_recursive(s,h):\n        '''\n        Calculate the surface area of the cone given the surface area and the diameter o"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi*r**2)/2\n    return (math.pi*r*h/s)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #return math.pi * (r**2) * (1/3) * h\n    return 4 * math.pi * (r**2) * (1/3) * h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    L = r*h\n    return L\ndef erf_f(x,y,z,y_m1,z_m1,p):\n    '''\n    Function to compute the Erf function as defined in [1].\n    '''\n    #%%\n    #Applying the formula to calculate the Erf function\n    #Note: z_m1 must be -1, 1, and z_m1=1\n    #E_r = 0.5*(erf(x/y)+erf(x/z)+erf(z/y))\n    E_r = 0.5*(erf(x/y_m1)+erf(x/z_m1)+erf(z/y_m1))\n    E_s = 0.5*(erf(y/y_m1)+erf(z/y_m1)+erf(z/z_m1))\n    E_t = 0.5*(erf(y/z_m1)+erf(x/z_m1)+erf(x/y_m1))\n    E_s = 0.5*(erf(y/z_m1)+erf(z/z_m1)+erf(z/y_m1))\n    #E_r = 0.5*(erf(x/z_m1)+erf(y/y_m1)+erf(z/z_m1))\n    #E_s = 0.5*(erf(y/y_m1)+erf(z/z_m1)+erf(z/z_m1))\n    #E_t = 0.5*(erf(y/y_m1)+erf(z/z_m1)+erf(z/z_m1))\n    #E_s = 0.5*(erf(y/y_m1)+erf(z/z_m1)+erf(z/z_m1))\n    #%%\n    #Getting the values of the parameters\n    k = p*y_m1\n    r = r/y_m1\n    #%%\n    #E_r = 0.5*(erf(x/y)+erf(x/z)+erf(z/y))\n    E_r = (math.exp(E_r))/(math.sqrt(2*r*k))\n    #E_s = 0.5*(erf(y/y_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_t = 0.5*(erf(y/z_m1)+erf(x/z_m1)+erf(x/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/z_m1)+erf(z/y_m1))\n    #E_r = 0.5*(erf(x/z_m1)+erf(y/y_m1)+erf(z/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/z_m1)+erf(z/y_m1))\n    #%%\n    #E_r = 0.5*(erf(x/y)+erf(x/z)+erf(z/y))\n    E_r = (math.exp(E_r))/(math.sqrt(2*r*k))\n    #E_s = 0.5*(erf(y/y_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_t = 0.5*(erf(y/z_m1)+erf(x/z_m1)+erf(x/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_r = 0.5*(erf(x/z_m1)+erf(y/y_m1)+erf(z/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #%%\n    #E_r = 0.5*(erf(x/y)+erf(x/z)+erf(z/y))\n    E_r = (math.exp(E_r))/(math.sqrt(2*r*k))\n    #E_s = 0.5*(erf(y/y_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_t = 0.5*(erf(y/z_m1)+erf(x/z_m1)+erf(x/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_r = 0.5*(erf(x/z_m1)+erf(y/y_m1)+erf(z/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #%%\n    #E_r = 0.5*(erf(x/y)+erf(x/z)+erf(z/y))\n    E_r = (math.exp(E_r))/(math.sqrt(2*r*k))\n    #E_s = 0.5*(erf(y/y_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_t = 0.5*(erf(y/z_m1)+erf(x/z_m1)+erf(x/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_r = 0.5*(erf(x/z_m1)+erf(y/y_m1)+erf(z/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #%%\n    #E_r = 0.5*(erf(x/y)+erf(x/z)+erf(z/y))\n    E_r = (math.exp(E_r))/(math.sqrt(2*r*k))\n    #E_s = 0.5*(erf(y/y_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_t = 0.5*(erf(y/z_m1)+erf(x/z_m1)+erf(x/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_r = 0.5*(erf(x/z_m1)+erf(y/y_m1)+erf(z/y_m1))\n    #E_s = 0.5*(erf(y/z_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #%%\n    #E_r = 0.5*(erf(x/y)+erf(x/z)+erf(z/y))\n    E_r = (math.exp(E_r))/(math.sqrt(2*r*k))\n    #E_s = 0.5*(erf(y/y_m1)+erf(z/y_m1)+erf(z/z_m1))\n    #E_t = 0.5*(erf(y/z_m1)+erf(x/z_"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2) * h\ndef main():\n    #Initalize some variables for ease of use\n    surface_area_inches = 0\n    surface_area_meter = 0\n    #Use the lower-right quadrant to compute the surface area\n    surface_area_inches = lateralsurface_cone(r=50,h=150)\n    surface_area_meters = lateralsurface_cone(r=50,h=150*100)\n    #Calculate the surface area\n    surface_area_meter = surface_area_meters/math.pi\n    surface_area_inches = surface_area_meter * math.sqrt(3)\n    print(surface_area_inches)\n    print(surface_area_meter)\n    print(surface_area_inches * 3.2808)\n    print(surface_area_inches * 2.54)\n    print(surface_area_inches * 25.4)\n    print(surface_area_inches * 0.0016)\n    print(surface_area_inches * 100000)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * (math.pi * r * r * h / 3)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return h*math.pi*(r**2)*(1+math.cos(math.radians(90-h)))\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    import string\n    special_char_regex = re.compile(r'[ ]{1,}')\n    text = special_char_regex.sub(':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\"\\t\", \":\")\n    text = text.replace(\"\\r\", \":\")\n    text = text.replace(\"\\n\", \":\")\n    text = text.replace(\"\\r\", \":\")\n    text = text.replace(\"\\n\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    # Create a regex.\n    regex = r\"[\\s]+|[,:.]\"\n    \n    # Replace spaces with a colon.\n    text = re.sub(regex, r\"\\1: \", text)\n    \n    # Replace commas with a colon.\n    text = re.sub(regex, r\"\\1: \", text)\n    \n    # Replace dots with a colon.\n    text = re.sub(regex, r\"\\1: \", text)\n    \n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'^\\s+|\\s+\\n+|\\s+|\\n+|\\s+$', ':', text)\n    text = re.sub(r'(?:\\s+|\\n+|\\s+|\\n+|\\s+)', ':', text)\n    text = re.sub(r'(?:\\n+|\\n+|\\s+|\\s+)', ':', text)\n    text = re.sub(r'(?:\\s+|\\n+|\\s+)', ':', text)\n    text = re.sub(r'(?:\\s+)', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    text = re.sub(r'\\s+', ':', text) # for spaces and commas\n    text = re.sub(r'\\.', ':', text) # for dots\n    text = re.sub(r'\\,', ':', text) # for commas\n    text = re.sub(r'\\?', ':', text) # for dots\n    text = re.sub(r'\\;', ':', text) # for commas\n    text = re.sub(r'\\!', ':', text) # for commas\n    text = re.sub(r'\\?', ':', text) # for commas\n    text = re.sub(r'\\s+', ':', text) # for spaces and commas\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_splitted = re.split('\\s+', text)\n    for i in range(len(text_splitted)):\n        text_splitted[i] = re.sub(r'\\s+', ':', text_splitted[i])\n    text_list = []\n    for line in text_splitted:\n        newline = re.sub(r'\\s+', ':', line)\n        if newline == line:\n            newline = ''\n        if newline!= line:\n            text_list.append(newline)\n    final_text =''.join(text_list)\n    return final_text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\;', ':', text)\n    text = re.sub(r'\\?', ':', text)\n    text = re.sub(r'\\!', ':', text)\n    text = re.sub(r'\\?', ':', text)\n    text = re.sub(r'\\*', ':', text)\n    text = re.sub(r'\\|', ':', text)\n    text = re.sub(r'\\s', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\n', ':', text)\n    text = re.sub(r'\\t', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'( )\\s*',' : ',text)\n    text = re.sub(r'( )\\s+',' : ',text)\n    text = re.sub(r'(,\\s* )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s+ )',': ',text)\n    text = re.sub(r'(,\\s"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for letter in text:\n        if letter==' ':\n            text=text.replace(letter,':')\n        elif letter==',':\n            text=text.replace(letter,':')\n        elif letter=='.':\n            text=text.replace(letter,':')\n        elif letter==' ':\n            text=text.replace(letter,':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(\"\\n\",\" \")\n    text=text.replace(\"\\t\",\" \")\n    text=text.replace(\"\\r\",\" \")\n    text=text.replace(\"\\f\",\" \")\n    text=text.replace(\"\\v\",\" \")\n    text=text.replace(\" \",\":\")\n    text=text.replace(\",\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\"/\",\":\");\n    text=text.replace(\"$\",\":\")\n    text=text.replace(\"&\",\":\")\n    text=text.replace(\"<\",\"<:\")\n    text=text.replace(\">\",\">:\")\n    text=text.replace(\"@\",\"@:\")\n    text=text.replace(\"?\",\"?\")\n    return text\ndef get_regex(file,pattern):\n    '''\n    Get the regex pattern from the file.\n    '''\n    with open(file,\"r\") as f:\n        lines=f.readlines()\n        regex=lines[0]\n        for i in range(1,len(lines)):\n            if (pattern in regex) and (re.search(pattern,lines[i])):\n                regex=lines[i]\n    return regex\ndef remove_specialchar(text):\n    '''\n    Remove all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(\"\\n\",\" \")\n    text=text.replace(\"\\t\",\" \")\n    text=text.replace(\"\\r\",\" \")\n    text=text.replace(\"\\f\",\" \")\n    text=text.replace(\"\\v\",\" \")\n    text=text.replace(\" \",\":\")\n    text=text.replace(\",\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\".\",\":\")\n    tex"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A)-1\n    while i < j:\n        m = (i+j)//2\n        if A[m] == x:\n            return m\n        if A[m] < x:\n            i = m+1\n        else:\n            j = m\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            high = mid\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Your code here\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Edge Case: array is empty\n    if len(A) == 0:\n        return -1\n    \n    # Edge Case: only one number\n    if len(A) == 1:\n        if A[0] == x:\n            return 0\n        \n        return -1\n    \n    # Find the first occurence of x in A\n    lower = 0\n    upper = len(A) - 1\n    while lower <= upper:\n        mid = int((lower + upper) / 2)\n        if A[mid] == x:\n            return mid\n        \n        if A[mid] < x:\n            lower = mid + 1\n        else:\n            upper = mid - 1\n    \n    # If there is no match, return -1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    #print(A,x)\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end)//2\n        #print(mid)\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            end = mid-1\n        if A[mid] < x:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A)-1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = A.index(x)\n    return index\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    mid = 0\n    #print(A)\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    if x < A[0]:\n        return 0\n    \n    if x == A[0]:\n        return 0\n    \n    if x < A[-1]:\n        return len(A)\n    \n    if x > A[-1]:\n        return len(A) - 1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            total += arr[i] * arr[j]\n    return total\ndef sum_Of_Subarrays(arr):\n    '''\n    Write a python function to find sum of products of all possible subarrays. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            total += arr[i] * arr[j]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # function to find sum of all possible subarrays of a given array\n    # The idea is to use stack to store all possible subarrays\n    # If we have remaining arr then we can store subarrays of arr[i...i+k] \n    # for j=0 to i\n    # If we have remaining arr then we can store subarrays of arr[j...j+k] \n    # for j=j+1 to len-1\n    # Finally we have sum of all subarrays of arr[j...j+k]\n    # We have to return answer to subarray \n    # This function takes in arr, k(recursion) \n    # and returns an integer\n    # It checks if given array can be divided into subarrays of arr[i...i+k] and then \n    # if it can then return the sum of all possible subarrays of arr[i...i+k]\n    # if not, return 0\n    \n    # if k = 1, then it must be as the sum\n    # if k > 1, then it must be as the sum of all possible subarrays of arr[i...i+k]\n    def sum_of_subarrays_of_arr(arr, k):\n        \n        # if arr[i] is not included then we need to check if it can be divided into subarrays of arr[i...i+k]\n        if k == 1:\n            # if arr[i] is included then return the sum of all possible subarrays of arr[i...i+k]\n            # Otherwise, return 0\n            return sum([sum(subarr) for subarr in itertools.product(*arr)])\n            # return 0\n        \n        # if k is > 1 then we can't divide it into subarrays of arr[i...i+k]\n        if k > 1:\n            # if arr[i] is included then return the sum of all possible subarrays of arr[i...i+k]\n            # otherwise, return 0\n            return sum([sum(subarr) for subarr in itertools.product(*arr)])\n            # return 0\n        \n        # if arr[i] is included then return the sum of all possible subarrays of arr[i...i+k]\n        # otherwise, return 0\n        return sum([sum(subarr) for subarr in itertools.product(*arr)])\n    \n    # size of arr\n    size = len(arr)\n    \n    # if given size is 1 then return the sum\n    # else, return 0\n    if size == 1:\n        return sum(arr)\n    \n    # if size is greater than 1, then we have to calculate the sum of all possible subarrays of arr[0...n-1]\n    # if arr[i] = arr[j] then, we need to store subarray of arr[i] of arr[i+1...j]\n    # if arr[i] = arr[j+1...i] then, we need to store subarray of arr[i] of arr[i+1...j+1]\n    # and so on.\n    # We have to check if given array can be divided into subarrays of arr[0...n-1]\n    if size > 1:\n        return sum_of_subarrays_of_arr(arr, size - 1)\n    \n    # if given array is empty then return 0\n    # if given array is not empty then return 0\n    return 0\n    \n    "
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    p = 0\n    q = 0\n    n = len(arr)\n    for i in range(n):\n        p = p*arr[i]\n        total += p\n        q = q + p\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr = sorted(arr, reverse=True)\n    x = 0\n    y = 0\n    sum = 0\n    for i in range(len(arr)):\n        x = x + arr[i][0]\n        y = y + arr[i][1]\n        sum = sum + x * y\n        print(sum)\n    print(sum)\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = []\n    for i in range(len(arr)):\n        result.append(arr[i])\n        result.append(arr[:i] + arr[i+1:])\n    result.sort()\n    for i in result:\n        print(i)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #print(\"input array\",arr)\n    #print(\"output array\",arr)\n    max_prod=1\n    sum=0\n    for i in range(len(arr)):\n        #print(\"i\",i)\n        #print(\"max_prod\",max_prod)\n        for j in range(i,len(arr)):\n            #print(\"j\",j)\n            prod=arr[i]*arr[j]\n            #print(\"prod\",prod)\n            if prod>max_prod:\n                max_prod=prod\n            sum+=prod\n            #print(\"sum\",sum)\n        #print(\"max_prod\",max_prod)\n        #print(\"sum\",sum)\n        #print(\"max_prod\",max_prod)\n    return max_prod*sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    print(sum)\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==0: return 0\n    elif len(arr)==1: return arr[0]\n    else:\n        return arr[0] + sum(map(lambda x: x*x, arr[1:]))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    toggled = bin(n)\n    print(toggled)\n    first = toggled[:1]\n    last = toggled[-1:]\n    print(first, last)\n    if (len(first) == 1):\n        if (len(last) == 1):\n            toggled = str(int(toggled[1:], 2))\n            print(toggled)\n        if (len(last) == 2):\n            toggled = toggled[:2]\n            print(toggled)\n    else:\n        if (len(last) == 1):\n            toggled = toggled[:2] + \"0\"\n            print(toggled)\n        if (len(last) == 2):\n            toggled = toggled[:2] + \"1\"\n            print(toggled)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = list(str(n))\n    for i in range(len(n)):\n        if n[i] == '0':\n            n[i] = '1'\n        elif n[i] == '1':\n            n[i] = '0'\n    return int(''.join(n),2)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)\n    n = n[2:]\n    n = n[::-1]\n    n = int(n, 2)\n    n = n[:n.bit_length()-1]\n    if n[0] == '1':\n        n = '0' + n\n    else:\n        n = '1' + n\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return bin(n)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    result = bin(n)[2:]\n    result = result.zfill(n)\n    first = int(result[0])\n    last = int(result[-1])\n    result = result[1:]\n    result = result[:-1]\n    return int(result, 2) if first else int(result, 2) + int(result, 2) * 10\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & (n - 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return [int(bit) for bit in bin(n)[2:]]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(\"\\n set_middle_bits\")\n    return bin(n).replace('0b', '')\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # base case\n    if n == 0:\n        return n\n    \n    # case\n    n = n & (n-1)\n    n = (n ^ (n&1))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    for i in range(len(n)):\n        if n[i] == 0:\n            n[i] = 1\n        elif n[i] == 1:\n            n[i] = 0\n    return n\n    \n    \n    \n    "
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    x_index = bisect.bisect_left(a, x)\n    return x_index - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # if the element to be inserted is less than the last element\n    if a[len(a)-1] < x:\n        # set the index to be the length of the list\n        i = len(a)\n        # calculate the index of the element to be inserted\n        index = i\n        # check if the value of the element to be inserted is greater than the element to be deleted\n        if a[index-1] > x:\n            # if so, keep the index\n            while index > 0 and a[index-1] > x:\n                index = index - 1\n            # if the element to be inserted is greater than the last element\n            if a[index-1] < x:\n                # set the index to be the value of the element to be inserted\n                while index > 0 and a[index-1] < x:\n                    index = index - 1\n        # if the element to be inserted is greater than the first element\n        else:\n            # set the index to be the value of the element to be inserted\n            while index > 0 and a[index-1] < x:\n                index = index - 1\n        # insert the value of the element to the right\n        a.insert(index, x)\n    # if the element to be inserted is greater than the first element\n    elif a[len(a)-1] < x:\n        # set the index to be the length of the list\n        i = len(a)\n        # calculate the index of the element to be inserted\n        index = i\n        # check if the value of the element to be inserted is greater than the element to be deleted\n        if a[index-1] > x:\n            # if so, keep the index\n            while index > 0 and a[index-1] > x:\n                index = index - 1\n            # if the element to be inserted is greater than the last element\n            if a[index-1] < x:\n                # set the index to be the value of the element to be inserted\n                while index > 0 and a[index-1] < x:\n                    index = index - 1\n        # if the element to be inserted is greater than the first element\n        else:\n            # set the index to be the value of the element to be inserted\n            while index > 0 and a[index-1] < x:\n                index = index - 1\n        # insert the value of the element to the right\n        a.insert(index, x)\n    # if the element to be inserted is greater than the last element\n    elif a[len(a)-1] > x:\n        # set the index to be the length of the list\n        i = len(a)\n        # calculate the index of the element to be inserted\n        index = i\n        # check if the value of the element to be inserted is greater than the element to be deleted\n        if a[index-1] > x:\n            # if so, keep the index\n            while index > 0 and a[index-1] > x:\n                index = index - 1\n            # if the element to be inserted is greater than the last element\n            if a[index-1] < x:\n                # set the index to be the value of the element to be inserted\n                while index > 0 and a[index-1] < x:\n                    index = index - 1\n        # if the element to be inserted is greater than the first element\n        else:\n            # set the index to be the value of the element to be inserted\n            while index > 0 and a[index-1] < x:\n                index = index - 1\n        # insert the value of the element to the right\n        a.insert(index, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n == 0:\n        return n\n    else:\n        i = bisect.bisect_left(a, x)\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo, hi = 0, len(a) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        a = 0\n    if a == 0:\n        return 1\n    if a == len(a):\n        return a\n    left = a + 1\n    if x <= a:\n        return left\n    while left > 0 and a < x:\n        if a == left:\n            return left\n        if a < x:\n            a = left\n            left = left - 1\n        else:\n            a = left + 1\n            left = left + 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while True:\n        m = (l + r) // 2\n        if a[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n        if l > r:\n            break\n    return m\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while a[i] <= x:\n        i += 1\n    if i == len(a):\n        return -1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #print(x)\n    #print(len(a))\n    i = bisect.bisect(a, x)\n    #print(i)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the right most positive element with a left insertion\n    i = bisect.bisect_left(a, x)\n    # If the element is larger than the left most element, insert it in the right place\n    if i == len(a):\n        return i\n    # If the element is smaller than the left most element, insert it in the left place\n    elif a[i] < x:\n        return i\n    # If the element is the same as the left most element, insert it in the right place\n    else:\n        return i + 1\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string)!= None:\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'A':\n        return True\n    else:\n        return False\ndef check_str_b(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].lower() == 'a':\n        return True\n    else:\n        return False\ndef check_str_c(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'c':\n        return True\n    else:\n        return False\ndef check_str_d(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].lower() == 'd':\n        return True\n    else:\n        return False\ndef check_str_e(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'e':\n        return True\n    else:\n        return False\ndef check_str_f(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'f':\n        return True\n    else:\n        return False\ndef check_str_g(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'g':\n        return True\n    else:\n        return False\ndef check_str_h(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'h':\n        return True\n    else:\n        return False\ndef check_str_i(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'i':\n        return True\n    else:\n        return False\ndef check_str_j(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'j':\n        return True\n    else:\n        return False\ndef check_str_k(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'k':\n        return True\n    else:\n        return False\ndef check_str_l(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'l':\n        return True\n    else:\n        return False\ndef check_str_m(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() =='m':\n        return True\n    else:\n        return False\ndef check_str_n(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'n':\n        return True\n    else:\n        return False\ndef check_str_o(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'o':\n        return True\n    else:\n        return False\ndef check_str_p(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'p':\n        return True\n    else:\n        return False\ndef check_str_q(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'q':\n        return True\n    else:\n        return False\ndef check_str_r(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'r':\n        return True\n    else:\n        return False\ndef check_str_s(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() =='s':\n        return True\n    else:\n        return False\ndef check_str_t(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 't':\n        return True\n    else:\n        return False\ndef check_str_u(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'u':\n        return True\n    else:\n        return False\ndef check_str_v(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'v':\n        return True\n    else:\n        return False\ndef check_str_w(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'w':\n        return True\n    else:\n        return False\ndef check_str_x(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'x':\n        return True\n    else:\n        return False\ndef check_str_y(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'y':\n        return True\n    else:\n        return False\ndef check_str_z(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == 'z':\n        return True\n    else:\n        return False\ndef check_str_1(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == '1':\n        return True\n    else:\n        return False\ndef check_str_2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == '2':\n        return True\n    else:\n        return False\ndef check_str_3(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == '3':\n        return True\n    else:\n        return False\ndef check_str_4(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == '4':\n        return True\n    else:\n        return False\ndef check_str_5(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].upper() == '5':\n        return True\n    else:\n        return False\ndef check_st"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    m = re.search(regex, string)\n    if not m: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # if string is starting with a vowel\n    if (string[0] == 'a' or string[0] == 'e' or string[0] == 'i' or string[0] == 'o' or string[0] == 'u'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] == 'a' or string[0] == 'A' or string[0] == 'e' or string[0] == 'E' or string[0] == 'i' or string[0] == 'I':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try:\n        vowels = 'aeiouAEIOU'\n        string = string.lower()\n        if re.search(vowels,string):\n            return True\n        else:\n            return False\n    except:\n        print(\"Invalid input!\")\n        quit()\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1 or n==0:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    result = 0\n    if n == 0:\n        return result\n    else:\n        result += n -1 *geometric_sum(n - 1)\n    return result\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (n-1) * n \n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:\n        return 38\n    elif n == 40:\n        return 39\n    elif n == 41:\n        return 40\n    elif n == 42:\n        return 41\n    elif n == 43:\n        return 42\n    elif n == 44:\n        return 43\n    elif n == 45:\n        return 44\n    elif n == 46:\n        return 45\n    elif n == 47:\n        return 46\n    elif n == 48:\n        return 47\n    elif n == 49:\n        return 48\n    elif n == 50:\n        return 49\n    elif n == 51:\n        return 50\n    elif n == 52:\n        return 51\n    elif n == 53:\n        return 52\n    elif n == 54:\n        return 53\n    elif n == 55:\n        return 54\n    elif n == 56:\n        return 55\n    elif n == 57:\n        return 56\n    elif n == 58:\n        return 57\n    elif n == 59:\n        return 58\n    elif n == 60:\n        return 59\n    elif n == 61:\n        return 60\n    elif n == 62:\n        return 61\n    elif n == 63:\n        return 62\n    elif n == 64:\n        return 63\n    elif n == 65:\n        return 64\n    elif n == 66:\n        return 65\n    elif n == 67:\n        return 66\n    elif n == 68:\n        return 67\n    elif n == 69:\n        return 68\n    elif n == 70:\n        return 69\n    elif n == 71:\n        return 70\n    elif n == 72:\n        return 71\n    elif n == 73:\n        return 72\n    elif n == 74:\n        return 73\n    elif n == 75:\n        return 74\n    elif n == 76:\n        return 75\n    elif n == 77:\n        return 76\n    elif n == 78:\n        return 77\n    elif n == 79:\n        return 78\n    elif n == 80:\n        return 79\n    elif n == 81:\n        return 80\n    elif n == 82:\n        return 81\n    elif n == 83:\n        return 82\n    elif n == 84:\n        return 83\n    elif n == 85:\n        return 84\n    elif n == 86:\n        return 85\n    elif n == 87:\n        return 86\n    elif n == 88:\n        return 87\n    elif n == 89:\n        return 88\n    elif n == 90:\n        return 89\n    elif n == 91:\n        return 90\n    elif n == 92:\n        return 91\n    elif n == 93:\n        return 92\n    elif n == 94:\n        return 93\n    elif n == 95:\n        return 94\n    elif n == 96:\n        return 95\n    elif n == 97:\n        return 96\n    elif n == 98:\n        return 97\n    elif n == 99:\n        return 98\n    elif n == 100:\n        return 99\n    elif n == 101:\n        return 100\n    elif n == 102:\n        return 101\n    elif n == 103:\n        return 102\n    elif n == 104:\n        return 103\n    elif n == 105:\n        return 104\n    elif n == 106:\n        return 105\n    elif n == 107:\n        return 106\n    elif n == 108:\n        return 107\n    elif n == 109:\n        return 108\n    elif n == 110:\n        return 109\n    elif n == 111:\n        return 110\n    elif n == 112:\n        return 111\n    elif n == 113:\n        return 112\n    elif n == 114:\n        return 113\n    elif n == 115:\n        return 114\n    elif n == 116:\n        return 115\n    elif n == 117:\n        return 116\n    elif n == 118:\n        return 117\n    elif n == 119:\n        return 118\n    elif n == 120:\n        return 119\n    elif n == 121:\n        return 120\n    elif n == 122:\n        return 121\n    elif n == 123:\n        return 122\n    elif n == 124:\n        return 123\n    elif n == 125:\n        return 124\n    elif n == 126:\n        return 125\n    elif n == 127:\n        return 126\n    elif n == 128:\n        return 127\n    elif n == 129:\n        return 128\n    elif n == 130:\n        return 129\n    elif n == 131:\n        return 130\n    elif n == 132:\n        return 131\n    elif n == 133:\n        return 132\n    elif n == 134:\n        return 133\n    elif n == 135:\n        return 134\n    elif n == 136:\n        return 135\n    elif n == 137:\n        return 136\n    elif n == 138:\n        return 137\n    elif n == 139:\n        return 138\n    elif n == 140:\n        return 139\n    elif n == 141:\n        return 140\n    elif n == 142:\n        return 141\n    elif n == 143:\n        return 142\n    elif n == 144:\n        return 143\n    elif n == 145:\n        return 144\n    elif n == 146:\n        return 145\n    elif n == 147:\n        return 146\n    elif n == 148:\n        return 147\n    elif n == 149:\n        return 148\n    elif n == 150:\n        return 149\n    elif n == 151:\n        return 150\n    elif n == 152:\n        return 151\n    elif n == 153:\n        return 152\n    elif n == 154:\n        return 153\n    elif n == 155:\n        return 154\n    elif n == 156:\n        return 155\n    elif n == 157:\n        return 156\n    elif n == 158:\n        return 157\n    elif n == 159:\n        return 158\n    elif n == 160:\n        return 159\n    elif n == 161:\n        return 160\n    elif n == 162:\n        return 161\n    elif n == 163:\n        return 162\n    elif n == 164:\n        return 163"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n+1):\n        if math.sqrt(i) == math.sqrt(n):\n            print(i)\n            return i\n        elif n % i == 0:\n            print(i)\n            return i\n            break\n    else:\n        print(\"Failed\")\n    return \"Failed\"\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = math.trunc(n/10)\n    b = n - a*10\n    #print(a,b)\n    if (a < b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # A triangular number is a number with two distinct numbers less than or equal to the next larger.\n    # For example, the 12th triangular number is 12, 12 + 1, 12 + 2, 12 + 3, 12 + 4, 12 + 5, 12 + 6.\n    # The index of the smallest triangular number is 10.\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import random\n    i = 1\n    while(i <= n and (i%2!= 0)):\n        i += 1\n    return i-1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n + 1):\n        if (n - i) in range(1,i + 1):\n            return i\n    return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def sum_n(num):\n        x=0\n        for i in range(len(num)):\n            x += int(num[i])\n        return x\n    def sum_digits(num):\n        s = sum_n(num)\n        nums = []\n        while s > 0:\n            nums.append(s % 10)\n            s //= 10\n        return nums\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    arr = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            arr.append(i)\n            arr.append(n//i)\n    if len(arr) == 0:\n        return -1\n    else:\n        return arr.index(min(arr))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math\n    def mod_div(x,y):\n        return math.gcd(x,y)\n    \n    if n == 0:\n        print(\"No, there is no index of triangular number\", n)\n        return\n    if n < 0:\n        print(\"Not a triangular number\", n)\n        return\n    \n    k = 1\n    while k < n:\n        k += 1\n        if n%k == 0:\n            return k\n    return None\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for elem in test_tup:\n        dict_tup[elem] = test_tup[elem]\n    return dict_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict((i,test_tup[i]) for i in range(len(test_tup)) if test_tup[i]!=0)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {item: item for item in test_tup}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup) - 1):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Find the first element, and convert it to a dictionary\n    first_element = test_tup[0]\n    first_dic = first_element.split(\"-\")\n    first_element = first_dic[0]\n    first_dict = first_element.split(\" \")\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {value:key for key,value in enumerate(test_tup)}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(len(test_tup)-1):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    list_of_tuples = test_tup\n    result = {}\n    \n    for i in range(0, len(list_of_tuples)):\n        tup = list_of_tuples[i]\n        if len(tup) == 1:\n            tup_element = tup[0]\n        else:\n            tup_element = tup[0]\n            for j in range(1, len(tup)):\n                tup_element = tup_element + tup[j]\n            tup_element = tup_element[0]\n        result[i] = tup_element\n        \n    return resul"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2],test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    result = {}\n    for key, value in test_tup:\n        result[key] = value\n    return result\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # iterate through each character in the string\n    for i in s :\n        if i!= i :\n            return False\n    return True\n    \ndef all_Differents(s) :\n    '''\n    Write a python function to check whether all the characters are not same or not.\n    '''\n    # iterate through each character in the string\n    for i in s :\n        if i == i :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # 1. Declare variables and initialize\n    count_0 = 0\n    count_1 = 0\n    # 2. Loop through the characters in s\n    for i in s :\n        # 3. If i is equal to '0'\n        if i == '0' :\n            count_0 += 1\n        # 4. If i is equal to '1'\n        if i == '1' :\n            count_1 += 1\n    # 5. Print the values\n    print(count_0, count_1)\n    # 6. Return the values\n    return count_0, count_1\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    dic = {}\n    for i in range(ord('A'), ord('Z')+1) :\n        dic[chr(i)] = 1\n    for i in range(ord('A'), ord('Z')+1) :\n        for j in range(ord('A'), ord('Z')+1) :\n            dic[chr(i)] = dic[chr(j)] + dic[chr(j+1)]\n    return dic == {}\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check the string for each character\n    for char in s :\n        if char in same_characters :\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s:\n        if char in s.lower():\n            pass\n        else:\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    cnt = 0\n    for i in s :\n        if i not in char_map.keys() :\n            cnt = cnt + 1\n            \n    if cnt == len(s) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a empty array of all the letters.\n    s_char = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    # Loop through each character in the string.\n    for i in range(0,len(s)) :\n        # Check if the current character is equal to the previous character.\n        if s[i] == s_char[i] :\n            # Assign the previous character to the current character.\n            s_char[i] = s[i]\n        else :\n            # Check if the current character is also the previous character.\n            if i > 0 and s[i] == s_char[i-1] :\n                # If the previous character is same as the current character,\n                # check if the next character is also the same.\n                if i+1 < len(s) :\n                    if s[i+1] == s_char[i] :\n                        s_char[i] = s[i]\n                    else :\n                        s_char[i] = s[i+1]\n                else :\n                    # Check if the next character is also the previous character.\n                    if s[i] == s_char[i-1] :\n                        s_char[i] = s[i]\n    # Check if all characters are the same.\n    for i in range(0,len(s_char)) :\n        if s_char[i]!= s[i] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if type(s)!= str :\n        return False\n    \n    for i in s :\n        if i not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side * math.sqrt(3) * side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2) * 3 / 2\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side **2\ndef area_quadrilateral(side):\n    '''\n    Write a function to caluclate the area of a quadrilateral.\n    '''\n    return (side * 4) / 3\ndef area_rhombus(side):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    return (side * 4) / 3\ndef area_hexahedron(side):\n    '''\n    Write a function to caluclate the area of a hyperedron.\n    '''\n    return (side ** 2) * 3 / 2\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (side ** 2) * 3 / 2\ndef area_tetrahedron_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side1 + side2) * 5 / 6\ndef area_tetrahedron_octahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side1 + side2) * 5 / 6\ndef area_tetrahedron_rhombus(side1, side2):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    return (side1 * 4) / 3 + (side2 * 4) / 3\ndef area_tetrahedron_hexahedron_rhombus(side1, side2):\n    '''\n    Write a function to caluclate the area of a hyperedron.\n    '''\n    return (side1 * 4) / 3 + (side2 * 4) / 3 + (side1 * 4) / 3\ndef area_tetrahedron_hexahedron_octahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (side1 * 4) / 3 + (side2 * 4) / 3 + (side1 * 4) / 3 + (side2 * 4) / 3\ndef area_octahedron_hexahedron_octahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (side1 * 4) / 3 + (side2 * 4) / 3 + (side1 * 4) / 3 + (side2 * 4) / 3\ndef area_quadrilateral_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a quadrilateral.\n    '''\n    return (side1 + side2) * 4 / 3\ndef area_tetrahedron_octahedron_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (side1 + side2) * 4 / 3\ndef area_tetrahedron_rhombus_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    return (side1 * 4) / 3 + (side2 * 4) / 3\ndef area_tetrahedron_rhombus_hexahedron_octahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (side1 * 4) / 3 + (side2 * 4) / 3 + (side1 * 4) / 3 + (side2 * 4) / 3\ndef area_tetrahedron_hexahedron_octahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (side1 * 4) / 3 + (side2 * 4) / 3 + (side1 * 4) / 3 + (side2 * 4) / 3\ndef area_tetrahedron_hexahedron_octahedron_rhombus(side1, side2):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (side1 * 4) / 3 + (side2 * 4) / 3 + (side1 * 4) / 3 + (side2 * 4) / 3\ndef area_cube_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2\ndef area_cube_rhombus(side1, side2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2\ndef area_cube_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2\ndef area_rhombus_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2\ndef area_rhombus_octahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2\ndef area_hexahedron_octahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2\ndef area_hexahedron_rhombus(side1, side2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2\ndef area_hexahedron_rhombus_octahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2\ndef area_octahedron_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2 + side1 ** 2 * 3 / 2 + side2 ** 2 * 3 / 2\ndef area_octahedron_hexahedron_octahedron(side1, side2):\n    '''\n    Write a function to ca"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round(4 * math.pi * side * side, 3)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return round(math.pi * side**2, 3)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return round(4 * math.pi * side * side, 3)\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return round(math.pi * side**3, 3)\ndef surface_volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the surface volume of a tetrahedron.\n    '''\n    return round(math.pi * math.pow(side, 3) * side**3, 3)\ndef surface_volume_cube(side):\n    '''\n    Write a function to caluclate the surface volume of a cube.\n    '''\n    return round(math.pi * side**4, 3)\ndef area_triangle(base, height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return round(base*height, 3)\ndef area_squiggle(side1, side2):\n    '''\n    Write a function to caluclate the area of a squiggle.\n    '''\n    return round(side1*side2*math.sqrt(side1+side2), 3)\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return round(4 * math.pi * math.pow(radius, 2), 3)\ndef area_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return round(math.pi * radius * height, 3)\ndef volume_triangle(base, height):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return round(base * height * math.pow(base, 2) * math.pow(height, 3), 3)\ndef volume_squiggle(side1, side2):\n    '''\n    Write a function to caluclate the volume of a squiggle.\n    '''\n    return round(side1 * side2 * math.sqrt(side1 + side2), 3)\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return round(4 * math.pi * math.pow(radius, 2) * math.pow(radius, 3), 3)\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return round(math.pi * radius * height * math.pow(radius, 2) * math.pow(height, 3), 3)\ndef surface_volume_triangle(base, height):\n    '''\n    Write a function to caluclate the surface volume of a triangle.\n    '''\n    return round(math.pi * math.pow(base, 3) * math.pow(height, 2) * math.pow(base, 2) * math.pow(height, 3), 3)\ndef surface_volume_squiggle(side1, side2):\n    '''\n    Write a function to caluclate the surface volume of a squiggle.\n    '''\n    return round(math.pi * math.pow(side1, 2) * math.pow(side2, 2) * math.pow(side1, 3) * math.pow(side2, 3), 3)\ndef surface_volume_sphere(radius):\n    '''\n    Write a function to caluclate the surface volume of a sphere.\n    '''\n    return round(4 * math.pi * math.pow(radius, 2) * math.pow(radius, 3), 3)\ndef surface_volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the surface volume of a cylinder.\n    '''\n    return round(math.pi * math.pow(radius, 2) * math.pow(radius, 3) * math.pow(height, 2) * math.pow(height, 3), 3)\ndef __main__():\n    print(\"\\n\\t\\tTETRAHEDRON\")\n    print(\"\\n\\t\\t\\tSurface Volume of a Tetrahedron\")\n    print(\"\\n\\t\\t\\tVolume of a Tetrahedron is a square root of the volume of the surface of a tetrahedron.\\n\")\n    print(\"\\t\\t\\tArea of a Tetrahedron\")\n    print(\"\\n\\t\\t\\tArea of a Tetrahedron is the area of a triangle whose base and height are equal to the base and height of the triangle.\\n\")\n    print(\"\\t\\t\\tVolume of a Tetrahedron\")\n    print(\"\\n\\t\\t\\tVolume of a Tetrahedron is the area of a squiggle whose side length is equal to the side length of the squiggle.\\n\")\n    print(\"\\t\\t\\tArea of a Tetrahedron\")\n    print(\"\\n\\t\\t\\tArea of a Tetrahedron is the area of a parallelogram whose base and height are equal to the base and height of the parallelogram.\\n\")\n    print(\"\\t\\t\\tSurface Volume of a Tetrahedron\")\n    print(\"\\n\\t\\t\\tVolume of a Tetrahedron is the area of a parallelogram whose base and height are equal to the base and height of the parallelogram.\\n\")\n    print(\"\\t\\t\\tArea of a Tetrahedron\")\n    print(\"\\n\\t\\t\\tArea of a Tetrahedron is the surface volume of a parallelogram.\\n\")\n    print(\"\\n\\t\\t\\tArea of a cube\")\n    print(\"\\n\\t\\t\\tArea of a cube is the area of a cube whose base is equal to the base and height of the cube.\\n\")\n    print(\"\\n\\t\\t\\tSurface Volume of a cube\")\n    print(\"\\n\\t\\t\\tVolume of a cube is the area of a parallelogram whose base is equal to the base and height of the parallelogram.\\n\")\n    print(\"\\n\\t\\t\\tArea of a Cube\")\n    print(\"\\n\\t\\t\\tArea of a Cube is the surface volume of a parallelogram whose base is equal to the base and height of the parallelogram.\\n\")\n    print(\"\\n\\t\\t\\tArea of a Sphere\")\n    print(\"\\n\\t\\t\\tArea of a Sphere is the volume of a sphere whose radius is equal to the radius of the sphere.\\n\")\n    print(\"\\n\\t\\t\\tSurface Volume of a Sphere\")\n    print(\"\\n\\t\\t\\tVolume of a Sphere is the volume of a parallelogram whose base is equal to the base and height of the parallelogram.\\n\")\n    print(\"\\n\\t\\t\\tArea of a Sphere\")\n    print(\"\\n\\t\\t\\tArea of a Sphere is the volume of a parallelogram whose base is equal to the base and height of the parallelogram.\\n\")\n    print(\"\\n\\t\\t\\tVolume of a Sphere\")\n    print(\"\\n\\t\\t\\tVolume of a Sphere is the volume of a parallelogram whose base is equal to the base and height of the parallelogram.\\n\")\n    print(\"\\n\\t\\t\\tArea of a Sphere\")\n    print(\"\\n\\t\\t\\tArea of a Sphere is the area of a parallelogram whose base is equal to the base and height of the parallelogram.\\n\")\n    print(\"\\n\\t\\t\\tVolume of a Sphere\")\n    print(\"\\n\\t\\t\\tVolume of a Sphere is the area of a parallelogram whose base is equal to the base and height of the parallelogram.\\n\")\n    print(\"\\n\\t\\t\\tVolume o"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side[0]*side[1]*side[2])\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side / 3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_len = side[0] + side[1] + side[2]\n    side_len2 = side_len * (side_len - 1) / 2\n    return side_len * side_len2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    A = side * (side - 1) / 2\n    return A\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    import math\n    if side == 1:\n        return math.sqrt(3)*6\n    elif side == 2:\n        return math.sqrt(3)*9\n    elif side == 3:\n        return math.sqrt(3)*15\n    elif side == 4:\n        return math.sqrt(3)*30\n    elif side == 5:\n        return math.sqrt(3)*45\n    elif side == 6:\n        return math.sqrt(3)*60\n    elif side == 7:\n        return math.sqrt(3)*75\n    elif side == 8:\n        return math.sqrt(3)*90\n    elif side == 9:\n        return math.sqrt(3)*120\n    elif side == 10:\n        return math.sqrt(3)*150\n    elif side == 11:\n        return math.sqrt(3)*200\n    elif side == 12:\n        return math.sqrt(3)*250\n    elif side == 13:\n        return math.sqrt(3)*300\n    elif side == 14:\n        return math.sqrt(3)*350\n    elif side == 15:\n        return math.sqrt(3)*400\n    elif side == 16:\n        return math.sqrt(3)*450\n    elif side == 17:\n        return math.sqrt(3)*500\n    elif side == 18:\n        return math.sqrt(3)*550\n    elif side == 19:\n        return math.sqrt(3)*600\n    elif side == 20:\n        return math.sqrt(3)*650\n    elif side == 21:\n        return math.sqrt(3)*700\n    elif side == 22:\n        return math.sqrt(3)*750\n    elif side == 23:\n        return math.sqrt(3)*800\n    elif side == 24:\n        return math.sqrt(3)*850\n    elif side == 25:\n        return math.sqrt(3)*900\n    elif side == 26:\n        return math.sqrt(3)*1000\n    elif side == 27:\n        return math.sqrt(3)*1510\n    elif side == 28:\n        return math.sqrt(3)*2000\n    elif side == 29:\n        return math.sqrt(3)*2500\n    elif side == 30:\n        return math.sqrt(3)*3000\n    elif side == 31:\n        return math.sqrt(3)*3500\n    elif side == 32:\n        return math.sqrt(3)*4000\n    elif side == 33:\n        return math.sqrt(3)*4500\n    elif side == 34:\n        return math.sqrt(3)*5000\n    elif side == 35:\n        return math.sqrt(3)*5500\n    elif side == 36:\n        return math.sqrt(3)*6000\n    elif side == 37:\n        return math.sqrt(3)*6500\n    elif side == 38:\n        return math.sqrt(3)*7000\n    elif side == 39:\n        return math.sqrt(3)*7500\n    elif side == 40:\n        return math.sqrt(3)*8000\n    elif side == 41:\n        return math.sqrt(3)*8500\n    elif side == 42:\n        return math.sqrt(3)*9000\n    elif side == 43:\n        return math.sqrt(3)*9500\n    elif side == 44:\n        return math.sqrt(3)*100000\n    elif side == 45:\n        return math.sqrt(3)*150000\n    elif side == 46:\n        return math.sqrt(3)*2000000\n    elif side == 47:\n        return math.sqrt(3)*25000000\n    elif side == 48:\n        return math.sqrt(3)*3000000\n    elif side == 49:\n        return math.sqrt(3)*35000000\n    elif side == 50:\n        return math.sqrt(3)*30000000\n    elif side == 51:\n        return math.sqrt(3)*45000000\n    elif side == 52:\n        return math.sqrt(3)*5000000\n    elif side == 53:\n        return math.sqrt(3)*55000000\n    elif side == 54:\n        return math.sqrt(3)*6000000\n    elif side == 55:\n        return math.sqrt(3)*65000000\n    elif side == 56:\n        return math.sqrt(3)*7000000\n    elif side == 57:\n        return math.sqrt(3)*75000000\n    elif side == 58:\n        return math.sqrt(3)*8000000\n    elif side == 59:\n        return math.sqrt(3)*85000000\n    elif side == 60:\n        return math.sqrt(3)*9000000\n    elif side == 61:\n        return math.sqrt(3)*95000000\n    elif side == 62:\n        return math.sqrt(3)*100000\n    elif side == 63:\n        return math.sqrt(3)*150000000\n    elif side == 64:\n        return math.sqrt(3)*2000000000\n    elif side == 65:\n        return math.sqrt(3)*250000000\n    elif side == 66:\n        return math.sqrt(3)*30000000\n    elif side == 67:\n        return math.sqrt(3)*350000000\n    elif side == 68:\n        return math.sqrt(3)*30000000\n    elif side == 69:\n        return math.sqrt(3)*450000000\n    elif side == 70:\n        return math.sqrt(3)*50000000\n    elif side == 71:\n        return math.sqrt(3)*550000000\n    elif side == 72:\n        return math.sqrt(3)*60000000\n    elif side == 73:\n        return math.sqrt(3)*650000000\n    elif side == 74:\n        return math.sqrt(3)*70000000\n    elif side == 75:\n        return math.sqrt(3)*750000000\n    elif side == 76:\n        return math.sqrt(3)*80000000\n    elif side == 77:\n        return math.sqrt(3)*850000000\n    elif side == 78:\n        return math.sqrt(3)*90000000\n    elif side == 79:\n        return math.sqrt(3)*950000000\n    elif side == 80:\n        return math.sqrt(3)*1000000000\n    elif side == 81:\n        return math.sqrt(3)*15000000\n    elif side == 82:\n        return math.sqrt(3)*200000000\n    elif side == 83:\n        return math.sqrt(3)*25000000\n    elif side == 84:\n        return math.sqrt(3)*3000000\n    elif side == 85:\n        return math.sqrt(3)*35000000\n    elif side == 86:\n        return math.sqrt(3)*3000000\n    elif side == 87:\n        return math.sqrt(3)*45000000\n    elif side == 88:\n        return math.sqrt(3)*5000000\n    elif side == 89:\n        return math.sqrt(3)*55000000\n    elif side == 90:\n        return math.sqrt(3)*6000000\n    elif side == 91:\n        return math.sqrt(3)*65000000\n    elif side == 92:\n        return math.sqrt(3)*7000000\n    elif side == 93:\n        return math.sqrt(3)*75000000\n    elif side == 94:\n        return math.sqrt(3)*8000000\n    elif side == 95:\n        return math.sqrt(3)*85000000\n    elif side == 96:\n        return math.sqrt(3)*9000000\n    elif side == 97:\n        return math.sqrt(3)*95000000\n    elif side == 98:\n        return math.sqrt(3)*100000\n    elif side == 99:\n        return math.sqrt(3)*15000000\n    elif side == 100:\n        return math.sqrt(3)*200000000\n    elif side == 101:\n        return math.sqrt(3)*25000000\n    elif side == 102:\n        return math.sqrt(3)"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side**2\n    c = side**3\n    return math.sqrt(a+b+c)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #define for left and right pointer\n    left_pointer = 0\n    right_pointer = len(list) - 1\n    #define index of left and right pointers\n    index_of_left = len(list) - 1 - m\n    index_of_right = 0\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # initialize list\n    temp = []\n    for i in range(len(list)):\n        temp.append(list[i])\n    # swap the position of current position and the position of next element\n    temp.reverse()\n    for i in range(m):\n        list[i] = temp[i]\n    # return new list\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    index=m-1\n    for i in range(len(list)-1,-1,-1):\n        list[index], list[i] = list[i], list[index]\n        index=index-1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return rotate_list(list, len(list), m, 0)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = list[:]\n    if not list:\n        return []\n    # find last element in list\n    last_index = len(list) - 1\n    # find position of last element in new_list\n    # (need to do this because the array itself may be shorter than new_list)\n    for i in range(0, len(new_list)):\n        if new_list[i] > last_index:\n            last_index = i\n    # now use the new_list value as the reference, instead of last_index\n    new_list[last_index], new_list[len(new_list) - 1 - i] = new_list[len(new_list) - 1 - i], new_list[last_index]\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n == 0:\n        return list\n    else:\n        for i in range(m):\n            # print(n - i)\n            list.pop(n - i)\n            n -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    rotated_list = []\n    length = len(list)\n    for i in range(length):\n        rotated_list.append(list[(i + m) % length])\n    return rotated_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = list[:]\n    new_list.reverse()\n    for i in range(m):\n        new_list.insert(0, new_list.pop())\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 1:\n        return list\n    left = []\n    right = []\n    for i in list:\n        left.append(i)\n    for i in range(m-1):\n        right.append(left[-1])\n        left.pop()\n    return right + list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list)<m:\n        return None\n    else:\n        n=len(list)\n        list.reverse()\n        m=len(list)\n        k=m-n\n        for i in range(0,k):\n            temp=list[i]\n            list[i]=list[n-i-1]\n            list[n-i-1]=temp\n        return list\n        \n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for x in test_tup:\n        if x is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for x in test_tup:\n        if x == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    else:\n        for item in test_tup:\n            if item is None:\n                return False\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is not None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for v in test_tup:\n        if v is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # write your code here\n    # write your solution here\n    startnum = int(startnum)\n    endnum = int(endnum)\n    divnum = 1\n    count = 0\n    for i in range(startnum, endnum+1):\n        divnum = divnum*10\n        if divnum >= 10:\n            divnum = divnum%10\n            count = count + 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = abs(startnum)\n    endnum = abs(endnum)\n    div = lambda x: x%x\n    lst = []\n    for num in range(startnum, endnum + 1):\n        if div(num) == 0:\n            lst.append(num)\n    return lst\n    \n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    startnum = startnum % 10\n    endnum = endnum % 10\n    \n    return (startnum*10 + endnum)//10\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(10):\n        if startnum % (i + 1) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    answer = []\n    for i in range(startnum, endnum):\n        if i%10==0:\n            answer.append(i)\n    return answer"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Solution 1\n    start, end = 0, 10**9+1\n    def divisible_by_digits(n, d):\n        return (n%10)**d\n    # solution 2\n    def divisible_by_digits(num, d):\n        return (num % 10)**d\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def check_digit(num):\n        if num < 10:\n            return num\n        else:\n            return int(str(num)[0])\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if num%startnum==0 and num//startnum==0]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(startnum, endnum):\n        '''\n        Write a function that returns the numbers within a given range from startnum to endnum that are divisible by every digit in the range it contains.\n        '''\n        all_divisibles = 0\n        for i in range(1, endnum):\n            if startnum % i == 0:\n                all_divisibles += 1\n        if all_divisibles == 0:\n            return True\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n        return [num for num in range(startnum, endnum) if not any(c.isdigit() for c in str(num))]\n    return list(map(divisible_by_digits, range(startnum, endnum)))\n    \n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = 0.5 * r * math.cos(math.radians(a))\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a%360 == 0:\n        return r*math.sin(math.radians(a/360))\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    import math\n    import itertools\n    import numpy\n    pi=math.pi\n    from math import cos,sin,tan\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    print(\"sector area: \", round(math.pi*(r*r)/(a*a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = a*math.sin(math.radians(a))*math.sin(math.radians(a))\n    return sector_area\ndef vessel_area(r,a):\n    '''\n    Write a function to find area of vessel. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    vessel_area = r*math.sin(math.radians(a))*math.sin(math.radians(a))\n    return vessel_area\ndef compute_sv(r,a):\n    '''\n    Write a function to compute the volume of a sphere given the radius and angle.\n    '''\n    sv = (math.pi*r**2)*math.sin(math.radians(a))\n    return sv\ndef compute_phi(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_E_vol(r,a):\n    '''\n    Write a function to compute the volume of the volumetric ring.\n    '''\n    E_vol = r*math.sin(math.radians(a))\n    return E_vol\ndef compute_E_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_E_area(r,a):\n    '''\n    Write a function to compute the area of the volumetric ring.\n    '''\n    E_area = r*math.sin(math.radians(a))\n    return E_area\ndef compute_E_vol_angle(r,a):\n    '''\n    Write a function to compute the volume of the volumetric ring.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_E_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_E_area_angle(r,a):\n    '''\n    Write a function to compute the area of the volumetric ring.\n    '''\n    E_area = r*math.sin(math.radians(a))\n    return E_area\ndef compute_phi_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_E_volume_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the volume of the volume of the volumetric ring.\n    '''\n    E_volume = r*math.sin(math.radians(a))\n    return E_volume\ndef compute_E_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_E_area_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the area of the volume of the volume of the volumetric ring.\n    '''\n    E_area = r*math.sin(math.radians(a))\n    return E_area\ndef compute_E_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_E_area_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the area of the volume of the volume of the volumetric ring.\n    '''\n    E_area = r*math.sin(math.radians(a))\n    return E_area\ndef compute_E_angle_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_E_angle_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math.radians(a))+1)\n    return phi\ndef compute_phi_angle_angle_angle_angle(r,a):\n    '''\n    Write a function to compute the angle between two vectors.\n    '''\n    phi = math.acos(r*math.cos(math"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    x = (r * math.cos(a))\n    y = (r * math.sin(a))\n    return math.sqrt((x*x) + (y*y))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = math.radians(a)\n    if angle < 0:\n        angle = 360 - angle\n    if angle < 0:\n        angle = 360 + angle\n    r = math.sqrt(r**2 - 2*math.cos(angle)*r)\n    return r\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>0:\n        return round(r * math.sin(a * math.pi / 180.0) * math.cos(math.radians(a)),2)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = 360*r*math.sin(a)\n    print(angle)\n    if angle>360:\n        print('Error')\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if not isinstance(r,int) or not isinstance(a,int) or a < 0:\n        return None\n    if a >= 360:\n        return None\n    area = r*math.cos(math.radians(a))\n    return area\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    dp = [[0] * (len(Y) + 1) for i in range(len(X) + 1)]\n    \n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                \n                if i == 0 or j == 0 or k == 0:\n                    \n                    if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                        dp[i][j] = dp[i][j - 1] + 1\n                    elif X[i - 1] == Y[j - 1] and X[i - 1]!= Z[k - 1]:\n                        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j])\n                    else:\n                        dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1], dp[i - 1][j])\n                \n                if dp[i][j] > dp[i][k] + 1:\n                    dp[i][k] = dp[i][j]\n    \n    return dp[-1][-1]\n    \n    \ndef mod_exp(x, n):\n    '''\n    Modular Exponentiation\n    '''\n    res = 1\n    \n    while n > 0:\n        if n & 1:\n            res = res * x % n\n        x = x * x % n\n        n >>= 1\n        \n    return res\n    \ndef mcr(X, Y, Z):\n    '''\n    Write a function to calculate modular exponentiation of a number.\n    '''\n    \n    if len(X) > len(Y) and len(Y) > len(Z):\n        X, Y, Z = Y, X, Z\n    \n    if len(X) == 1:\n        return X[0]\n    \n    ans = []\n    ans.append(mod_exp(mcr(X[1:], Z[:-1], X[0]), X[0]))\n    ans.append(mod_exp(mcr(X[1:], Y[:-1], Y[0]), Y[0]))\n    ans.append(mod_exp(mcr(X[1:], Z[:-1], Z[0]), Z[0]))\n    \n    return ans\n    \n    \ndef modinv(x, m):\n    '''\n    Modular Inverse\n    '''\n    res = 1\n    while x:\n        x, q = x % m, m\n    \n    return q\n    \n    \ndef modexp(X, n):\n    '''\n    Modular Exponentiation\n    '''\n    res = 1\n    \n    while n:\n        if n & 1:\n            res *= X\n        X *= X\n        n >>= 1\n    \n    return res\n    \ndef inverses(x, y):\n    '''\n    Inverse of modexp\n    '''\n    return modexp(modinv(x, y), y)\n    \ndef cofactor(X, Y):\n    '''\n    Multiplicative Cofactor\n    '''\n    return mcr(X, Y, [])\n    \ndef modinvcofactor(x, Y):\n    '''\n    Multiplicative Inverse Cofactor\n    '''\n    return modinv(cofactor(X, Y), Y[0])\n    \n    \ndef gcd(X, Y):\n    '''\n    Greatest Common Divisor\n    '''\n    if len(X) > len(Y):\n        X, Y = Y, X\n    if len(Y) == 1:\n        return X[0]\n    else:\n        return gcd(Y[0], X[1:])\n    \ndef modexp(x, n):\n    '''\n    Modular Exponentiation\n    '''\n    if n < 0:\n        n = -n\n    res = 1\n    while n:\n        if n & 1:\n            res = res * x % n\n        x = x * x % n\n        n >>= 1\n    \n    return res\n    \ndef inverse(X, Y):\n    '''\n    Inverse of modexp\n    '''\n    return modexp(modinv(X, Y), Y[0])\n    \ndef modular(X, Y, Z):\n    '''\n    Composite Extended Euclidean Algorithm\n    '''\n    X1, X2 = X[0], X[1]\n    Y1, Y2 = Y[0], Y[1]\n    Z1, Z2 = Z[0], Z[1]\n    \n    # Compute step 1\n    X = modexp(X1, Y1)\n    Y = modexp(Y1, Y2)\n    Z = modexp(Z1, Z2)\n    \n    # Compute step 2\n    X, Y, Z = X % Z1, Y % Z2, X % Z2\n    \n    # Return X, Y, Z\n    return X, Y, Z\n    \ndef modular_inverse(X, Y, Z):\n    '''\n    Composite Extended Euclidean Algorithm\n    '''\n    X1, X2 = X[0], X[1]\n    Y1, Y2 = Y[0], Y[1]\n    Z1, Z2 = Z[0], Z[1]\n    \n    # Compute step 1\n    X = modexp(X1, Y1)\n    Y = modexp(Y1, Y2)\n    Z = modexp(Z1, Z2)\n    \n    # Compute step 2\n    X, Y, Z = X % Z1, Y % Z2, X % Z2\n    \n    # Return X, Y, Z\n    return X, Y, Z\n    \ndef modular_expansion(X, Y, Z):\n    '''\n    Modular Expansion\n    '''\n    # Step 1\n    X, Y = modular(X, Y, Z)\n    \n    # Step 2\n    X = modular_inverse(X, Y, Z)\n    \n    # Step 3\n    Z = modular_expansion(X, Y, Z)\n    \n    # Step 4\n    return X, Y, Z\n    \ndef modular_expansion_mod(X, Y, Z, n):\n    '''\n    Modular Expansion with modular exponentiation\n    '''\n    # Step 1\n    X, Y = modular(X, Y, Z)\n    \n    # Step 2\n    Z = modular_expansion(X, Y, Z)\n    \n    # Step 3\n    Z = modular_expansion_mod(Z, Y, X, n)\n    \n    # Step 4\n    return Z\n    \ndef modular_expansion_mod_mod(X, Y, Z, n):\n    '''\n    Modular Expansion with modular exponentiation\n    '''\n    # Step 1\n    X, Y = modular(X, Y, Z)\n    \n    # Step 2\n    Z = modular_expansion(X, Y, Z)\n    \n    # Step 3\n    Z = modular_expansion_mod(Z, Y, X, n)\n    \n    # Step 4\n    return Z\n    \ndef add(X, Y):\n    '''\n    Addition\n    '''\n    X, Y = modular_expansion(X, Y, [])\n    \n    return modular_expansion(X, Y, X + Y)\n    \ndef sub(X, Y):\n    '''\n    Subtraction\n    '''\n    X, Y = modular_expansion(X, Y, [])\n    \n    return modular_expansion(X, Y, -X)\n    \ndef mul(X, Y):\n    '''\n    Multiplication\n    '''\n    X, Y = modular_expansion(X, Y, [])\n    \n    return modular_expansion(X, Y, X * Y)\n    \ndef neg(X):\n    '''\n    Negation\n    '''\n    return modular_expansion(X, [], -X)\n    \ndef sub_mod(X, Y):\n    '''\n    Subtraction\n    '''\n    X, Y = modular"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, m_length = len(X), len(Y), len(Z)\n    m, n, m_length = m + 1, n + 1, m_length + 1\n    L = [[0] * n for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1] and X[i] == Z[j]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    max_length = L[m - 1][n - 1]\n    ans = []\n    for i in range(m):\n        for j in range(n):\n            if L[i][j] == max_length:\n                ans.append(X[i] + Y[j] + Z[j])\n    return ans[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if X == Y == Z: \n        return 1 \n    elif X[0] == Y[0] and X[0] == Z[0]: \n        return lcs_of_three(X[1:], Y[1:], Z[1:]) + 1 \n    else: \n        return max(lcs_of_three(X, Y, Z[1:]), lcs_of_three(X[1:], Y, Z[1:]), lcs_of_three(X, Y[1:], Z[1:])) \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    L = len(X)\n    R = len(Y)\n    \n    LCS = [[0]*(L+1) for i in range(L+1)] \n    \n    # Following steps are done for LCS \n    for i in range(1, L+1): \n        for j in range(1, R+1): \n            if (X[i-1] == Y[j-1]): \n                LCS[i][j] = LCS[i-1][j-1] + 1 \n            else: \n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) \n    \n    # Traverse all the rows \n    for i in range(1, L+1): \n        for j in range(1, R+1): \n            if (LCS[i][j] == LCS[i][j-1] + 1): \n                print(X[i-1], Y[j-1], Z[j-1], sep=\" \", end=\"\") \n            else: \n                print(\" \", end=\"\") \n    \n    # Traverse all the columns \n    for i in range(1, R+1): \n        for j in range(1, L+1): \n            if (LCS[j][i] == LCS[j][i-1] + 1): \n                print(Z[i-1], end=\" \") \n            else: \n                print(\" \", end=\"\") \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #Code here\n    # define dic to store the solution in \n    # make a dictionary to store the answer \n    dic = {}\n    # function to get lcs\n    def lcs(x, y, z): \n        if x == '': \n            return y \n        if y == '': \n            return z \n        if z == '': \n            return x \n        # check if any of the possible sequences are same, return empty one if not\n        if x[0] == y[0] and y[0] == z[0]: \n            return lcs(x[1:], y[1:], z[1:]) \n        # if all the letters are same and the current position is the first letter of the longest sequence, then make the new sequence with that letter\n        if x[0] == y[0] and x[0] in dic: \n            return dic[x[0]] \n        # if all the letters are same and the current position is the second letter of the longest sequence, then make the new sequence with that letter\n        if y[0] == z[0] and y[0] in dic: \n            return dic[y[0]] \n        # if both the letters are same, return the shorter sequence and the corresponding letter \n        if x[0] == y[0] and x[0] in dic: \n            return lcs(x[1:], y[1:], z[1:]) \n        # if both the letters are same, return the shorter sequence and the corresponding letter \n        if y[0] == z[0] and y[0] in dic: \n            return lcs(x[1:], y[1:], z[1:]) \n        # if all the letters are not same, return empty one \n        if x[0] in dic and y[0] in dic: \n            return max(lcs(x[1:], y[1:], z[1:]), lcs(x[1:], y[1:], z[1:])) \n        # if the length of the shortest sequence is greater than the length of the longest sequence, return empty one\n        if x[0] in dic: \n            return max(dic[x[0]], lcs(x[1:], y[1:], z[1:])) \n        # if the length of the shortest sequence is greater than the length of the longest sequence, return empty one \n        if y[0] in dic: \n            return max(dic[y[0]], lcs(x[1:], y[1:], z[1:])) \n        # if the length of the shortest sequence is greater than the length of the longest sequence, return empty one \n        return dic[''] \n    # return the answer \n    return lcs(X, Y, Z) "
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    n = len(X)\n    m = len(Y)\n    m = len(Z)\n    \n    # create the matrix of zeros to be used\n    C = [[0] * (m + 1) for x in range(n + 1)]\n    \n    # Traverse the entire matrix\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # if the first character of the sequence X is not found\n            if X[i - 1]!= '$':\n                C[i][j] = max(C[i - 1][j], C[i - 1][j - 1] + 1)\n            # if the last character of the sequence Y is not found\n            else:\n                C[i][j] = max(C[i - 1][j], C[i - 1][j - 1], C[i - 1][j - 2] + 2)\n    \n    # Find the longest common subsequence\n    return C[n][m]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_of_three = [None] * (len(X)+1)\n    \n    for i in range(len(X)):\n        for j in range(i, len(X)):\n            if X[i] == X[j] and lcs_of_three[i+1] is None:\n                lcs_of_three[i+1] = lcs_of_three[i] + 1\n                \n            if Y[i] == Y[j] and lcs_of_three[i+1] is None:\n                lcs_of_three[i+1] = lcs_of_three[i] + 1\n                \n            if Z[i] == Z[j] and lcs_of_three[i+1] is None:\n                lcs_of_three[i+1] = lcs_of_three[i] + 1\n                \n    return lcs_of_three[len(X)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n    \n    def lcs(m, n, x, y, z):\n        if m == 0 or n == 0: return 0\n        if x[m - 1] == y[n - 1]:\n            return lcs(m - 1, n, x, y, z) + 1\n        else:\n            return max(lcs(m - 1, n, x, y, z), lcs(m, n - 1, x, y, z))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < 3:\n        raise ValueError(\"The string sequence is too short.\")\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.split('[A-Z]', str1)\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].title()\n    return''.join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isupper():\n            new_str = new_str + char.upper() + \" \"\n        else:\n            new_str = new_str + char.lower() + \" \"\n    return new_str.strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if not str1:\n        return str1\n    else:\n        m = re.search(r'^(\\w)([A-Z])(\\s)', str1)\n        if m:\n            return m.group(0) +'' + m.group(3)\n        else:\n            return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def is_capital_word(word):\n        '''\n        Checks if a word is a capital word or not\n        '''\n        return word.isupper()\n    \n    def check_capital(word):\n        '''\n        Checks if a word is a capital word or not\n        '''\n        return word.isupper()\n    \n    def check_space(word):\n        '''\n        Checks if a word is a capital word or not\n        '''\n        return word.isupper()\n    \n    def is_upper(word):\n        '''\n        Checks if a word is an upper case word or not\n        '''\n        return len(word) > 1 and word.isupper()\n        \n    def upper_capital_word(word):\n        '''\n        Updates the sentence with a capital word\n        '''\n        if is_capital_word(word):\n            return f' {word.capitalize()}'\n        else:\n            return word\n        \n    def upper_space(word):\n        '''\n        Updates the sentence with a space\n        '''\n        if check_space(word):\n            return f' {word.capitalize()}'\n        else:\n            return word\n    \n    def lower_capital_word(word):\n        '''\n        Updates the sentence with a lower capital word\n        '''\n        if is_capital_word(word):\n            return f' {word.lower()}'\n        else:\n            return word\n        \n    def lower_space(word):\n        '''\n        Updates the sentence with a lower space\n        '''\n        if check_space(word):\n            return f' {word.lower()}'\n        else:\n            return word\n        \n    def lower_capital_word(word):\n        '''\n        Updates the sentence with a lower capital word\n        '''\n        if is_capital_word(word):\n            return f' {word.lower()}'\n        else:\n            return word\n        \n    def lower_space(word):\n        '''\n        Updates the sentence with a lower space\n        '''\n        if check_space(word):\n            return f' {word.lower()}'\n        else:\n            return word\n    \n    def upper_capital_word(word):\n        '''\n        Updates the sentence with an upper capital word\n        '''\n        if is_capital_word(word):\n            return f' {word.upper()}'\n        else:\n            return word\n        \n    def upper_space(word):\n        '''\n        Updates the sentence with an upper space\n        '''\n        if check_space(word):\n            return f' {word.upper()}'\n        else:\n            return word\n        \n    def not_capital_word(word):\n        '''\n        Updates the sentence with a non capital word or not\n        '''\n        if not(is_capital_word(word) or check_capital(word)):\n            return word\n        else:\n            return word\n        \n    def not_space(word):\n        '''\n        Updates the sentence with a non space or not\n        '''\n        if not(check_space(word)):\n            return word\n        else:\n            return word\n        \n    def not_capital_word(word):\n        '''\n        Updates the sentence with a non capital word or not\n        '''\n        if not(is_capital_word(word) or check_capital(word)):\n            return word\n        else:\n            return word\n        \n    def not_space(word):\n        '''\n        Updates the sentence with a non space or not\n        '''\n        if not(check_space(word)):\n            return word\n        else:\n            return word\n        \n    def not_capital_word(word):\n        '''\n        Updates the sentence with a non capital word or not\n        '''\n        if not(is_capital_word(word) or check_capital(word)):\n            return word\n        else:\n            return word\n        \n    def not_space(word):\n        '''\n        Updates the sentence with a non space or not\n        '''\n        if not(check_space(word)):\n            return word\n        else:\n            return word\n        \n    def is_not_capital_word(word):\n        '''\n        Checks if a word is a not capital word or not\n        '''\n        return not(is_capital_word(word) or check_capital(word))\n        \n    def is_not_space(word):\n        '''\n        Checks if a word is a not space or not\n        '''\n        return not(check_space(word))\n        \n    def is_not_capital_word(word):\n        '''\n        Checks if a word is a not capital word or not\n        '''\n        return not(is_capital_word(word))\n        \n    def is_not_space(word):\n        '''\n        Checks if a word is a not space or not\n        '''\n        return not(check_space(word))\n    \n    def not_capital_word(word):\n        '''\n        Updates the sentence with a not capital word\n        '''\n        return not(is_capital_word(word))\n        \n    def not_space(word):\n        '''\n        Updates the sentence with a not space\n        '''\n        return not(check_space(word))\n        \n    def not_capital_word(word):\n        '''\n        Updates the sentence with a not capital word\n        '''\n        return not(is_capital_word(word))\n        \n    def not_space(word):\n        '''\n        Updates the sentence with a not space\n        '''\n        return not(check_space(word))\n    \n    def not_capital_word(word):\n        '''\n        Updates the sentence with a not capital word\n        '''\n        return not(is_capital_word(word))\n        \n    def not_space(word):\n        '''\n        Updates the sentence with a not space\n        '''\n        return not(check_space(word))\n        \n    def not_capital_word(word):\n        '''\n        Updates the sentence with a not capital word\n        '''\n        return not(is_capital_word(word))\n        \n    def not_space(word):\n        '''\n        Updates the sentence with a not space\n        '''\n        return not(check_space(word))\n    \n    def not_upper_capital_word(word):\n        '''\n        Updates the sentence with a not capital word\n        '''\n        return not(is_capital_word(word))\n        \n    def not_upper_space(word):\n        '''\n        Updates the sentence with a not space\n        '''\n        return not(check_space(word))\n        \n    def not_lower_capital_word(word):\n        '''\n        Updates the sentence with a not capital word\n        '''\n        return not(is_capital_word(word))\n        \n    def not_lower_space(word):\n        '''\n        Updates the sentence with a not space\n        '''\n        return not(check_space(word))\n        \n    def not_lower_capital_word(word):\n        '''\n        Updates the sentence with a not capital word\n        '''\n        return not(is_capital_word(word))\n        \n    def not_lower_space(word):\n        '''\n        Updates the sentence with a not space\n        '''\n        return not(check_space(word))\n        \n    def not_upper_capital_word(word):\n        '''\n        Updates the sentence with a not capital word\n        '''\n        return not(is_capital_word(word))\n        \n    def not_upper_space(word):\n        '''\n        Updates the sentence with a not space\n        '''\n        return not(check_space(word))\n        \n    def not_lower_capital_word(word):\n        '''\n        Updates the sentence with a not capital word\n        '''\n        return not(is_capital_word(word))\n        \n    def not_lower_space(word):\n        '''\n        Updates the sentence with a not space\n        '''\n        return not(check_space(word))\n        \n    def not"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1.replace(\" \",\"_\")\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    n = len(str1)\n    output = \"\"\n    for i in range(n):\n        if str1[i] == \" \":\n            output += \" \"\n        else:\n            if str1[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                output += str1[i].upper()\n            else:\n                output += str1[i]\n    return output\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if not str1: return ''\n    str1 = str1.lower()\n    str2 = str1.replace(' ', '_')\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    l1 = re.sub(r'\\b[A-Z]\\w*\\s*\\w*\\b','', str1).lower().split()\n    return''.join(l1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # regex pattern to get the words\n    word_regex = re.compile(r'\\w+')\n    # regex pattern to get the words with spaces\n    space_regex = re.compile(r'\\s+')\n    # regex pattern to get the words starting with capital letters\n    capital_word_regex = re.compile(r'^\\w+$')\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str1=''\n    for i in str1:\n        if i.isupper() and i.islower():\n            new_str1+=i.upper()+' '\n        elif i.isupper() and not i.islower():\n            new_str1+=i.upper()\n        elif i.islower() and not i.isupper():\n            new_str1+=i.lower()\n        else:\n            new_str1+=i\n    return new_str1\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = nums_str.split(\" \")\n    nums.sort(key = lambda x: int(x))\n    return \" \".join(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = list(map(int, nums_str))\n    nums.sort()\n    return [n for n in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    arr = []\n    for i in nums_str:\n        if i.isnumeric():\n            arr.append(int(i))\n        else:\n            arr.append(float(i))\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [int(x) for x in nums_str]\n    print(nums_str)\n    num_string_list = []\n    for i in range(0,len(nums_str)):\n        num = nums_str[i]\n        # convert num to int and remove spaces\n        num = str(num)\n        # remove extra spaces\n        num = num.strip()\n        # make sure there are no spaces in the beginning\n        if num[0] =='':\n            print(\"That isn't a number.\")\n            break\n        # if num is numeric add to list\n        elif num.isnumeric():\n            num_string_list.append(num)\n            # if num is not numeric then append to list\n            continue\n        # if num is not numeric then append to list\n        else:\n            print(num)\n            num_string_list.append(num)\n    \n    # sort list\n    num_string_list.sort()\n    # convert list to string\n    # the reason for this is that'str' in python is an object not string\n    # but it's a built-in function in python\n    string_list =''.join(num_string_list)\n    # print(string_list)\n    return string_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = [int(el) for el in nums_str]\n    nums_list.sort()\n    sorted_list = [str(el) for el in nums_list]\n    return \" \".join(sorted_list)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(0, len(nums_str)):\n        for j in range(0, len(nums_str)-i-1):\n            if nums_str[j] > nums_str[j+1]:\n                temp = nums_str[j]\n                nums_str[j] = nums_str[j+1]\n                nums_str[j+1] = temp\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_list = []\n    for item in nums_str:\n        num_list.append(int(item))\n    num_list.sort()\n    sorted_nums = []\n    for item in num_list:\n        sorted_nums.append(item)\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    lst = []\n    for i in range(len(nums_str)):\n        lst.append(float(nums_str[i]))\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    res = sorted(nums_str)\n    return res\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Your code here\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # YOUR CODE HERE\n    print(\"ADDING TUPLE TO LISTS\")\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for index, element in enumerate(test_list):\n        if type(element) == tuple:\n            element = element + (test_tup[index], )\n            test_list[index] = element\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    temp_tuple = test_tup\n    for item in test_list:\n        temp_tuple = temp_tuple + (item, )\n    return temp_tuple\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if type(test_tup)!= tuple:\n        raise Exception(\"tuple expected\")\n    test_list.append(test_tup)\n    test_list.sort()\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Assert the given array is in ascending order\n    assert is_ascending_array(arr)\n    \n    # Initialize the min heap\n    min_heap = Heap()\n    \n    # Pop the root of the given array, and push it in min heap\n    for i, value in enumerate(arr):\n        if value > 0:\n            insert_value(min_heap, i, value)\n        \n    return min_heap.is_heap()\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return True\n    elif arr[i] > arr[i//2]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    return arr[i] < arr[i//2]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] > arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i*2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    return check_min_heap_helper(arr, i - 1) or (arr[i] < arr[i // 2])\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[i//2] and arr[i] < arr[(i+1)//2]:\n        return False\n    return check_min_heap_helper(arr, 2*i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (len(arr) > i):\n        heapq.heappush(arr, arr[i])\n        return arr\n    return arr\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    return False\n    \n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    return arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 4\n    if n == 6:\n        return 6\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return 45\n    if n == 45:\n        return 46\n    if n == 46:\n        return 47\n    if n == 47:\n        return 48\n    if n == 48:\n        return 49\n    if n == 49:\n        return 50\n    if n == 50:\n        return 51\n    if n == 51:\n        return 52\n    if n == 52:\n        return 53\n    if n == 53:\n        return 54\n    if n == 54:\n        return 55\n    if n == 55:\n        return 56\n    if n == 56:\n        return 57\n    if n == 57:\n        return 58\n    if n == 58:\n        return 59\n    if n == 59:\n        return 60\n    if n == 60:\n        return 61\n    if n == 61:\n        return 62\n    if n == 62:\n        return 63\n    if n == 63:\n        return 64\n    if n == 64:\n        return 65\n    if n == 65:\n        return 66\n    if n == 66:\n        return 67\n    if n == 67:\n        return 68\n    if n == 68:\n        return 69\n    if n == 69:\n        return 70\n    if n == 70:\n        return 71\n    if n == 71:\n        return 72\n    if n == 72:\n        return 73\n    if n == 73:\n        return 74\n    if n == 74:\n        return 75\n    if n == 75:\n        return 76\n    if n == 76:\n        return 77\n    if n == 77:\n        return 78\n    if n == 78:\n        return 79\n    if n == 79:\n        return 80\n    if n == 80:\n        return 81\n    if n == 81:\n        return 82\n    if n == 82:\n        return 83\n    if n == 83:\n        return 84\n    if n == 84:\n        return 85\n    if n == 85:\n        return 86\n    if n == 86:\n        return 87\n    if n == 87:\n        return 88\n    if n == 88:\n        return 89\n    if n == 89:\n        return 90\n    if n == 90:\n        return 91\n    if n == 91:\n        return 92\n    if n == 92:\n        return 93\n    if n == 93:\n        return 94\n    if n == 94:\n        return 95\n    if n == 95:\n        return 96\n    if n == 96:\n        return 97\n    if n == 97:\n        return 98\n    if n == 98:\n        return 99\n    if n == 99:\n        return 100\n    if n == 100:\n        return 101\n    if n == 101:\n        return 102\n    if n == 102:\n        return 103\n    if n == 103:\n        return 104\n    if n == 104:\n        return 105\n    if n == 105:\n        return 106\n    if n == 106:\n        return 107\n    if n == 107:\n        return 108\n    if n == 108:\n        return 109\n    if n == 109:\n        return 110\n    if n == 110:\n        return 111\n    if n == 111:\n        return 112\n    if n == 112:\n        return 113\n    if n == 113:\n        return 114\n    if n == 114:\n        return 115\n    if n == 115:\n        return 116\n    if n == 116:\n        return 117\n    if n == 117:\n        return 118\n    if n == 118:\n        return 119\n    if n == 119:\n        return 120\n    if n == 120:\n        return 121\n    if n == 121:\n        return 122\n    if n == 122:\n        return 123\n    if n == 123:\n        return 124\n    if n == 124:\n        return 125\n    if n == 125:\n        return 126\n    if n == 126:\n        return 127\n    if n == 127:\n        return 128\n    if n == 128:\n        return 129\n    if n == 129:\n        return 130\n    if n == 130:\n        return 131\n    if n == 131:\n        return 132\n    if n == 132:\n        return 133\n    if n == 133:\n        return 134\n    if n == 134:\n        return 135\n    if n == 135:\n        return 136\n    if n == 136:\n        return 137\n    if n == 137:\n        return 138\n    if n == 138:\n        return 139\n    if n == 139:\n        return 140\n    if n == 140:\n        return 141\n    if n == 141:\n        return 142\n    if n == 142:\n        return 143\n    if n == 143:\n        return 144\n    if n == 144:\n        return 145\n    if n == 145:\n        return 146\n    if n == 146:\n        return 147\n    if n == 147:\n        return 148\n    if n == 148:\n        return 149\n    if n == 149:\n        return 150\n    if n == 150:\n        return 151\n    if n == 151:\n        return 152\n    if n == 152:\n        return 153\n    if n == 153:\n        return 154\n    if n == 154:\n        return 155\n    if n == 155:\n        return 156\n    if n == 156:\n        return 157\n    if n == 157:\n        return 158\n    if n == 158:\n        return 159\n    if n == 159:\n        return 160\n    if n == 160:\n        return 161\n    if n == 161:\n        return 162\n    if n == 162:\n        return 163\n    if n == 163:\n        return 164\n    if n == 164:\n        return 165\n    if n == 165:\n        return 166\n    if n == 166:\n        return 167\n    if n == 167:\n        return 168\n    if n == 168:\n        return 169\n    if n == 169:\n        return 170\n    if n == 170:\n        return 171\n    if n == 171:\n        return 172\n    if n == 172:\n        return 173\n    if n == 173:\n        return 174\n    if n == 174:\n        return 175\n    if n == 175:\n        return 176\n    if n == 176:\n        return 177\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        print(\"Sorry. Try again, try again\")\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n        return numbers[n-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # create a list of all possible jacobsthal values\n    # create a new list that does not include duplicates\n    possible = [i for i in range(2,n+1) if i not in list(set(list(i)))]\n    # create a set of all jacobsthal values\n    all_jacobsthal = set(possible)\n    # return the number of jacobsthal values\n    return len(all_jacobsthal)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 11\n    elif n == 5: \n        return 21\n    elif n == 6: \n        return 43\n    elif n == 7: \n        return 85\n    elif n == 8: \n        return 171\n    elif n == 9: \n        return 341\n    elif n == 10: \n        return 683\n    elif n == 11: \n        return 1365\n    elif n == 12: \n        return 2731\n    elif n == 13: \n        return 3\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # nth jacobsthal number. https://www.geeksforgeeks.org/python-program-to-calculate-nth-jacobsthal-number-1/\n    if n > 1:\n        n = n - 1\n        return jacobsthal_num(n) + jacobsthal_num(n - 1)\n    return n\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # find the number of zeros and ones\n    zones = 0\n    ones = 1\n    while zones < n:\n        zeros += ones\n        ones += zeros\n        zones += 1\n    return zones\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    while n > 0:\n        n //= 10\n    return n\n    \ndef jacobsthal_den(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    return n*n\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = []\n    while n >= 1:\n        if n == 1:\n            l.append(1)\n            break\n        elif n == 2:\n            l.append(2)\n            break\n        elif n == 3:\n            l.append(3)\n            break\n        elif n == 4:\n            l.append(4)\n            break\n        elif n == 5:\n            l.append(5)\n            break\n        elif n == 6:\n            l.append(6)\n            break\n        elif n == 7:\n            l.append(7)\n            break\n        elif n == 8:\n            l.append(8)\n            break\n        elif n == 9:\n            l.append(9)\n            break\n        elif n == 10:\n            l.append(10)\n            break\n        elif n == 11:\n            l.append(11)\n            break\n        elif n == 12:\n            l.append(12)\n            break\n        elif n == 13:\n            l.append(13)\n            break\n        elif n == 14:\n            l.append(14)\n            break\n        elif n == 15:\n            l.append(15)\n            break\n        elif n == 16:\n            l.append(16)\n            break\n        elif n == 17:\n            l.append(17)\n            break\n        elif n == 18:\n            l.append(18)\n            break\n        elif n == 19:\n            l.append(19)\n            break\n        elif n == 20:\n            l.append(20)\n            break\n        elif n == 21:\n            l.append(21)\n            break\n        elif n == 22:\n            l.append(22)\n            break\n        elif n == 23:\n            l.append(23)\n            break\n        elif n == 24:\n            l.append(24)\n            break\n        elif n == 25:\n            l.append(25)\n            break\n        elif n == 26:\n            l.append(26)\n            break\n        elif n == 27:\n            l.append(27)\n            break\n        elif n == 28:\n            l.append(28)\n            break\n        elif n == 29:\n            l.append(29)\n            break\n        elif n == 30:\n            l.append(30)\n            break\n        elif n == 31:\n            l.append(31)\n            break\n        elif n == 32:\n            l.append(32)\n            break\n        elif n == 33:\n            l.append(33)\n            break\n        elif n == 34:\n            l.append(34)\n            break\n        elif n == 35:\n            l.append(35)\n            break\n        elif n == 36:\n            l.append(36)\n            break\n        elif n == 37:\n            l.append(37)\n            break\n        elif n == 38:\n            l.append(38)\n            break\n        elif n == 39:\n            l.append(39)\n            break\n        elif n == 40:\n            l.append(40)\n            break\n        elif n == 41:\n            l.append(41)\n            break\n        elif n == 42:\n            l.append(42)\n            break\n        elif n == 43:\n            l.append(43)\n            break\n        elif n == 44:\n            l.append(44)\n            break\n        elif n == 45:\n            l.append(45)\n            break\n        elif n == 46:\n            l.append(46)\n            break\n        elif n == 47:\n            l.append(47)\n            break\n        elif n == 48:\n            l.append(48)\n            break\n        elif n == 49:\n            l.append(49)\n            break\n        elif n == 50:\n            l.append(50)\n            break\n        elif n == 51:\n            l.append(51)\n            break\n        elif n == 52:\n            l.append(52)\n            break\n        elif n == 53:\n            l.append(53)\n            break\n        elif n == 54:\n            l.append(54)\n            break\n        elif n == 55:\n            l.append(55)\n            break\n        elif n == 56:\n            l.append(56)\n            break\n        elif n == 57:\n            l.append(57)\n            break\n        elif n == 58:\n            l.append(58)\n            break\n        elif n == 59:\n            l.append(59)\n            break\n        elif n == 60:\n            l.append(60)\n            break\n        elif n == 61:\n            l.append(61)\n            break\n        elif n == 62:\n            l.append(62)\n            break\n        elif n == 63:\n            l.append(63)\n            break\n        elif n == 64:\n            l.append(64)\n            break\n        elif n == 65:\n            l.append(65)\n            break\n        elif n == 66:\n            l.append(66)\n            break\n        elif n == 67:\n            l.append(67)\n            break\n        elif n == 68:\n            l.append(68)\n            break\n        elif n == 69:\n            l.append(69)\n            break\n        elif n == 70:\n            l.append(70)\n            break\n        elif n == 71:\n            l.append(71)\n            break\n        elif n == 72:\n            l.append(72)\n            break\n        elif n == 73:\n            l.append(73)\n            break\n        elif n == 74:\n            l.append(74)\n            break\n        elif n == 75:\n            l.append(75)\n            break\n        elif n == 76:\n            l.append(76)\n            break\n        elif n == 77:\n            l.append(77)\n            break\n        elif n == 78:\n            l.append(78)\n            break\n        elif n == 79:\n            l.append(79)\n            break\n        elif n == 80:\n            l.append(80)\n            break\n        elif n == 81:\n            l.append(81)\n            break\n        elif n == 82:\n            l.append(82)\n            break\n        elif n == 83:\n            l.append(83)\n            break\n        elif n == 84:\n            l.append(84)\n            break\n        elif n == 85:\n            l.append(85)\n            break\n        elif n == 86:\n            l.append(86)\n            break\n        elif n == 87:\n            l.append(87)\n            break\n        elif n == 88:\n            l.append(88)\n            break\n        elif n == 89:\n            l.append(89)\n            break\n        elif n == 90:\n            l.append(90)\n            break\n        elif n == 91:\n            l.append(91)\n            break\n        elif n == 92:\n            l.append(92)\n            break\n        elif n == 93:\n            l.append(93)\n            break\n        elif n == 94:\n            l.append(94)\n            break\n        elif n == 95:\n            l.append(95)\n            break\n        elif n == 96:\n            l.append(96)\n            break\n        elif n == 97:\n            l.append(97)\n            break\n        elif n == 98:\n            l.append(98)\n            break\n        elif n == 99:\n            l.append(99)\n            break\n        elif n == 100:\n            l.append(100)\n            break\n        elif n == 101:\n            l.append(101)\n            break\n        elif n == 102:\n            l.append(102)\n            brea"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # define n, a, b\n    n = int(n)\n    a = 2**n\n    b = 2**(n + 1)\n    # compute i\n    i = (b-a)//a\n    # if n is odd\n    if n % 2 == 1:\n        # return a\n        return a\n    # else\n    else:\n        # return i+1\n        return i+1\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return min(test_list, key=lambda x: x[K])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #temp_l = []\n    #for i in range(len(test_list)):\n    #    temp_l.append((test_list[i][0], test_list[i][1]))\n    #return temp_l\n    return sorted(test_list, key = lambda x: (x[0],x[1]), reverse = True)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Check if list is empty\n    if len(test_list) == 0:\n        return 0\n    \n    # Find K closest elements\n    N = len(test_list)\n    k_closest = [test_list[i] for i in range(N)]\n    for i in range(N):\n        for j in range(i, N):\n            if i < j:\n                k_closest[j] = test_list[i]\n    \n    # Sort the array and find minimum k\n    k_closest.sort()\n    minimum = len(k_closest)\n    for i in range(N):\n        if k_closest[i] == test_list[i]:\n            minimum = min(minimum, i + 1)\n    \n    # Return minimum\n    return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) <= 1:\n        return 1\n    result = {}\n    for x in test_list:\n        if x not in result:\n            result[x] = 1\n        else:\n            result[x] += 1\n    for key in result:\n        result[key] = min(result[key], K-result[key])\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    list_of_records = []\n    for i in range(0, len(test_list)):\n        list_of_records.append(test_list[i][0])\n    list_of_records.sort()\n    k = len(list_of_records)\n    if k == K:\n        return list_of_records\n    elif k < K:\n        for i in range(k, len(test_list)):\n            list_of_records.append(test_list[i][0])\n        list_of_records.sort()\n        k = len(list_of_records)\n    return list_of_records\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    for i in range(len(test_list)):\n        min_k.append(i)\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                min_k.append(j)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def find_min_k(k, test_list):\n        if len(test_list) == 1:\n            return k\n        return find_min_k(k+1, test_list[1:])\n    return find_min_k(0, test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    lst = test_list[:]\n    min_k_s = []\n    max_k_s = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            min_k_s.append(lst[i])\n            max_k_s.append(lst[j])\n    return min_k_s, max_k_s\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    assert isinstance(test_list, list), \"test_list is not a list\"\n    assert isinstance(K, int), \"K is not an integer\"\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # k_test_list = test_list[0:K]\n    # k_test_list.sort(key=lambda x: x[0])\n    # print(f\"k_test_list: {k_test_list}\")\n    # return (min(k_test_list, key=lambda x: x[1]))\n    return min([(k, v) for k, v in test_list[:K]])\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] not in l2[i] and l2[i] not in l3[i] and l3[i] not in l1[i]:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indices = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    indices.append(i)\n    return indices\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if (l1 == None and l2 == None and l3 == None):\n        return []\n    if (l1 == None or l2 == None or l3 == None):\n        return []\n    if (l1 == l2):\n        return l1\n    elif (l2 == l3):\n        return l2\n    elif (l1 == l3):\n        return l1\n    else:\n        common_list = []\n        for i in range(len(l1)):\n            if l1[i] in l2 and l2[i] in l3:\n                common_list.append(l1[i])\n                break\n        return common_list\n        \n        \n    \ndef remove_index_from_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to remove the elements from the list l1, l2, l3. The function should return the list l3 without any element in the list.\n    '''\n    if (l1 == None and l2 == None and l3 == None):\n        return []\n    if (l1 == None or l2 == None or l3 == None):\n        return []\n    if (l1 == l2):\n        return l1\n    elif (l2 == l3):\n        return l2\n    elif (l1 == l3):\n        return l1\n    else:\n        common_list = []\n        for i in range(len(l1)):\n            if l1[i] in l2 and l2[i] in l3:\n                common_list.append(l1[i])\n                break\n        return common_list\n        \n        \ndef create_union(l1, l2):\n    '''\n    We say that an element is common for lists l1, l2. Write a function to create a new list that contains only the elements of both lists. The function should return the list without any element in the list.\n    '''\n    if (l1 == None and l2 == None):\n        return []\n    if (l1 == None or l2 == None):\n        return []\n    if (l1 == l2):\n        return l1\n    elif (l1 == None):\n        return l2\n    elif (l2 == None):\n        return l1\n    else:\n        common_list = []\n        for i in range(len(l1)):\n            if l1[i] in l2:\n                common_list.append(l1[i])\n                break\n        return common_list\n        \n        \ndef create_intersection(l1, l2):\n    '''\n    We say that an element is common for lists l1, l2. Write a function to create a new list that contains only the elements of both lists. The function should return the list without any element in the list.\n    '''\n    if (l1 == None and l2 == None):\n        return []\n    if (l1 == None or l2 == None):\n        return []\n    if (l1 == l2):\n        return l1\n    elif (l1 == None):\n        return l2\n    elif (l2 == None):\n        return l1\n    else:\n        common_list = []\n        for i in range(len(l1)):\n            if l1[i] in l2:\n                common_list.append(l1[i])\n                break\n        return common_list\n        \n        \ndef is_unique(l1):\n    '''\n    We say that an element is unique in a list. Write a function to check whether the list contains any element. The function should return true if the list contains any element. Otherwise, it should return false.\n    '''\n    if (l1 == None):\n        return False\n    elif (len(l1) == 1):\n        return True\n    else:\n        unique_list = []\n        for i in range(len(l1)):\n            if l1[i] not in unique_list:\n                unique_list.append(l1[i])\n        if len(unique_list) == len(l1):\n            return False\n        else:\n            return True\n        \n        \ndef is_intersection(l1, l2):\n    '''\n    We say that an element is intersection in two lists. Write a function to check whether two lists have the same element.\n    '''\n    if (l1 == None and l2 == None):\n        return False\n    if (l1 == None or l2 == None):\n        return False\n    if (l1 == l2):\n        return True\n    else:\n        intersection_list = []\n        for i in range(len(l1)):\n            if l1[i] in l2:\n                intersection_list.append(l1[i])\n        if len(intersection_list) == len(l1):\n            return True\n        else:\n            return False\n        \n        \ndef remove_intersection_elements(l1, l2):\n    '''\n    We say that an element is intersection in two lists. Write a function to remove the intersection of two lists.\n    '''\n    if (l1 == None and l2 == None):\n        return []\n    if (l1 == None or l2 == None):\n        return []\n    if (l1 == l2):\n        return l1\n    elif (l1 == None):\n        return l2\n    elif (l2 == None):\n        return l1\n    else:\n        new_l1 = []\n        new_l2 = []\n        for i in range(len(l1)):\n            if l1[i] in l2:\n                new_l1.append(l1[i])\n                break\n        for i in range(len(l2)):\n            if l2[i] in l1:\n                new_l2.append(l2[i])\n                break\n        return new_l1 + new_l2\n        \n        \ndef union_elements(l1, l2):\n    '''\n    We say that an element is common in two lists. Write a function to create a new list that contains only the elements of both lists. The function should return the list without any element in the list.\n    '''\n    if (l1 == None and l2 == None):\n        return []\n    if (l1 == None or l2 == None):\n        return []\n    if (l1 == l2):\n        return l1\n    elif (l1 == None):\n        return l2\n    elif (l2 == None):\n        return l1\n    else:\n        common_list = []\n        for i in range(len(l1)):\n            if l1[i] in l2:\n                common_list.append(l1[i])\n                break\n        return common_list\n        \n        \ndef count_elements(l1, l2):\n    '''\n    We say that an element is common in two lists. Write a function to count the number of elements in the two lists.\n    '''\n    if (l1 == None and l2 == None):\n        return 0\n    if (l1 == None or l2 == None):\n        return 0\n    if (l1 == l2):\n        return 1\n    elif (l1 == None):\n        return l2\n    elif (l2 == None):\n        return l1\n    else:\n        common_list = []\n        for i in range(len(l1)):\n            if l1[i] in l2:\n                common_list.append(l1[i])\n                break\n        if len(common_list) == len(l1):\n            return l2 + 1\n        else:\n            return l1 + 1\n        \n    \ndef intersection(l1, l2):\n    '''\n    We say that an element is common in two lists. Write a function to create a new list that contains only the elements of both lists. The function should return the list without any element in the list.\n    '''\n    if (l1 == None and l2 == None):\n        return []\n    if (l1 == None or l2 == None):\n        return []\n    if (l1 == l"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = 0\n    index_list = []\n    while index < len(l1):\n        if l1[index] == l2[index] == l3[index]:\n            index_list.append(index)\n        index += 1\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    # TODO: Write your solution here\n    if len(l1) < 2:\n        if len(l2) > 0:\n            return l2\n    elif len(l1) < 2:\n        if len(l3) > 0:\n            return l3\n    elif len(l1) < 2:\n        if len(l3) > 0:\n            return l3\n    else:\n        common_ele = l1[0]\n        common_ele_list = []\n        for i in range(0,len(l1)):\n            if l1[i] == common_ele:\n                common_ele_list.append(l1[i])\n        for i in range(0,len(l2)):\n            if l2[i] == common_ele:\n                common_ele_list.append(l2[i])\n        for i in range(0,len(l3)):\n            if l3[i] == common_ele:\n                common_ele_list.append(l3[i])\n        return common_ele_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    l1_index = l1.index(l3[0])\n    l2_index = l2.index(l3[1])\n    l3_index = l3.index(l3[2])\n    common_elements.append(l1_index)\n    common_elements.append(l2_index)\n    common_elements.append(l3_index)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1) & set(l2) & set(l3))\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    index_list2 = []\n    index_list3 = []\n    i = 0\n    for element in l1:\n        if element in l2 and element in l3:\n            index_list.append(i)\n        if element in l3 and element in l2:\n            index_list2.append(i)\n        if element in l3 and element in l1:\n            index_list3.append(i)\n        i = i + 1\n    return index_list, index_list2, index_list3\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for l1_index, l2_index, l3_index in zip(l1, l2, l3):\n        if l1_index == l2_index and l2_index == l3_index:\n            common_elements.append(l1_index)\n    return common_elements\n    \ndef check_element_index_in_lists(l1, l2, l3, element):\n    '''\n    This function will check for an element in a list of lists and returns the index of the element.\n    '''\n    for index, l in enumerate(l1):\n        if l == element:\n            return index\n    return None\n    \ndef swap_elements_in_lists(l1, l2, l3, element):\n    '''\n    This function will swap the elements of l1 and l2. It is assumed that l1, l2, l3 are all lists, and element is a element in the corresponding lists.\n    '''\n    i1 = check_element_index_in_lists(l1, l2, l3, element)\n    i2 = check_element_index_in_lists(l1, l3, l2, element)\n    if i1 is None or i2 is None:\n        return None\n    if i1!= i2:\n        l1[i1], l1[i2] = l1[i2], l1[i1]\n        l2[i1], l2[i2] = l2[i2], l2[i1]\n    return l1, l2, l3\n    \ndef merge_lists(l1, l2):\n    '''\n    This function will merge lists l1 and l2 into a single list. It is assumed that l1, l2 are all lists, and all elements of l1 and l2 are all the same.\n    '''\n    return l1 + l2\n    \ndef count_elements_in_lists(l1, l2):\n    '''\n    This function will count the number of elements in a list of lists. It is assumed that l1, l2 are all lists, and all elements of l1 and l2 are all the same.\n    '''\n    return len(l1) + len(l2)\n    \ndef list_difference(l1, l2):\n    '''\n    This function will return the list containing the elements of l1 that are not in l2.\n    '''\n    result = []\n    for element in l1:\n        if element not in l2:\n            result.append(element)\n    return result\n    \ndef is_sub_list(l1, l2, l3):\n    '''\n    This function will check if the list is a sub-list of the other list.\n    '''\n    for l1_index, l2_index, l3_index in zip(l1, l2, l3):\n        if l1_index!= l2_index and l2_index!= l3_index:\n            return False\n    return True\n    \ndef list_intersection(l1, l2):\n    '''\n    This function will return the list containing the elements of l1 that are common between the other lists.\n    '''\n    result = []\n    for element in l1:\n        if element in l2:\n            result.append(element)\n    return result\n    \ndef list_list_difference(l1, l2):\n    '''\n    This function will return the list containing the elements of l1 that are not in l2.\n    '''\n    return list_difference(l1, l2)\n    \ndef list_list_intersection(l1, l2):\n    '''\n    This function will return the list containing the elements of l1 that are common between the other lists.\n    '''\n    return list_intersection(l1, l2)\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return numbers[0]\n    else:\n        if numbers[0] > numbers[1]:\n            return numbers[1]\n        else:\n            return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for i in range(1, len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest_number = min(numbers)\n    for num in numbers:\n        if num < second_smallest_number:\n            second_smallest_number = num\n    return second_smallest_number\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    for num in numbers:\n        if smallest == None or num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    smallest_index = None\n    for i in range(len(numbers) - 1):\n        if smallest == None or numbers[i] < smallest:\n            smallest = numbers[i]\n            smallest_index = i\n    if smallest_index == None:\n        return smallest\n    else:\n        return numbers[smallest_index]\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    return numbers[-2]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float(\"inf\")\n    for i in range(len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Use min function to return the second smallest\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        return min(numbers[:2])\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # text = 'aaaabbaabaabb'\n    # print(text_match_zero_one(text))\n    #\n    # # \ucc38\uace0: https://www.w3resource.com/python-exercises/python-re-exercises-for-strings/python-re-exercise-5.php\n    # # \ubb38\uc790 \uac80\uc0ac\n    # if re.match(r'(a\\s*)(b\\s*)(a)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(b)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(d)', text):\n    #     print('match!')\n    #     return'match!'\n    #\n    # # \uc2dd\ud654\n    # if re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(d)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(e)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(f)', text):\n    #     print('match!')\n    #     return'match!'\n    #\n    # # \ud328\ud0b9\n    # if re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(d)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(e)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(f)', text):\n    #     print('match!')\n    #     return'match!'\n    #\n    # # \ucc38\uace0: https://www.w3resource.com/python-exercises/python-re-exercise-3.php\n    # # \uc810\ud654\uc2dd\n    # if re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(d)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(e)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(f)', text):\n    #     print('match!')\n    #     return'match!'\n    #\n    # # \ubd80\uc871\ud55c \uacbd\uc6b0\n    # elif re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(d)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(e)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(f)', text):\n    #     print('match!')\n    #     return'match!'\n    #\n    # # \ucc38\uace0: https://www.w3resource.com/python-exercises/python-re-exercise-3.php\n    # # \uc810\ud654\uc2dd\n    # if re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(d)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(e)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(f)', text):\n    #     print('match!')\n    #     return'match!'\n    #\n    # # \uc7ac\uadc0\n    # if re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(d)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(e)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(f)', text):\n    #     print('match!')\n    #     return'match!'\n    #\n    # # \ubd80\uc871\ud55c \uacbd\uc6b0\n    # elif re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(d)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(e)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(f)', text):\n    #     print('match!')\n    #     return'match!'\n    #\n    # # \ucc38\uace0: https://www.w3resource.com/python-exercises/python-re-exercise-3.php\n    # # \uc810\ud654\uc2dd\n    # if re.match(r'(a\\s*)(b\\s*)(c)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(d)', text):\n    #     print('match!')\n    #     return'match!'\n    # elif re.match(r'(a\\s*)(b\\s*)(e)', text):\n    #     prin"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.findall('a[bc]+', text)\n    result = \"\"\n    for match in matches:\n        if match == '':\n            result += \" \"\n        else:\n            result += match\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_to_match = 'a'\n    p = re.compile('(?:a){1}')\n    match = p.search(text)\n    if match:\n        text = text[:match.start()] + text[match.end():]\n    p = re.compile('(?:b){1}')\n    match = p.search(text)\n    if match:\n        text = text[:match.start()] + text[match.end():]\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    flag = False\n    total = 0\n    for i in text:\n        if i == 'a':\n            flag = True\n            total += 1\n        elif i == 'b':\n            flag = False\n            total -= 1\n    return total == 0 and flag\n    \ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has one 'c' followed by three 'd' or four 'e'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    flag = False\n    total = 0\n    for i in text:\n        if i == 'c':\n            flag = True\n            total += 1\n        elif i == 'd':\n            flag = False\n            total -= 1\n        elif i == 'e':\n            flag = False\n            total -= 1\n    return total == 0 and flag\n    \ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has one 'f' followed by 'g' or 'h' followed by 'i' followed by 'j' or 'k' followed by 'l'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    flag = False\n    total = 0\n    for i in text:\n        if i == 'f':\n            flag = True\n            total += 1\n        elif i == 'g':\n            flag = False\n            total -= 1\n        elif i == 'h':\n            flag = False\n            total -= 1\n        elif i == 'i':\n            flag = False\n            total -= 1\n        elif i == 'j':\n            flag = False\n            total -= 1\n        elif i == 'k':\n            flag = False\n            total -= 1\n        elif i == 'l':\n            flag = False\n            total -= 1\n    return total == 0 and flag\n    \ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has two 'k' followed by three 'l' followed by two 'o' or three 'p' followed by two 'r' or three's'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    flag = False\n    total = 0\n    for i in text:\n        if i == 'k':\n            flag = True\n            total += 1\n        elif i == 'l':\n            flag = False\n            total -= 1\n        elif i == 'o':\n            flag = False\n            total -= 1\n        elif i == 'p':\n            flag = False\n            total -= 1\n        elif i == 'r':\n            flag = False\n            total -= 1\n        elif i =='s':\n            flag = False\n            total -= 1\n    return total == 0 and flag\n    \ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has two 'd' followed by one or more 'e' followed by one or more 'a' followed by one or more 'b' followed by two 'c' or three 'd' followed by one or more 'e'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    flag = False\n    total = 0\n    for i in text:\n        if i == 'd':\n            flag = True\n            total += 1\n        elif i == 'e':\n            flag = False\n            total -= 1\n        elif i == 'a':\n            flag = False\n            total -= 1\n        elif i == 'b':\n            flag = False\n            total -= 1\n        elif i == 'c':\n            flag = False\n            total -= 1\n        elif i == 'd':\n            flag = False\n            total -= 1\n    return total == 0 and flag\n    \ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has one 'j' followed by one or more 'k' followed by one or more 'l' followed by two'm' followed by one or more 'n' followed by three 'o' or four 'p' followed by two 'q' or four 'r' followed by two's' or four 't' or three 'u' followed by two 'w' followed by one or more 'x' followed by one or more 'y' followed by two 'z' or four 'a' followed by one or more 'b' followed by three 'c' followed by three 'd' or four 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q' followed by one or more 'r' followed by one or more's' followed by one or more 't' followed by one or more 'u' followed by one or more 'v' followed by one or more 'w' followed by one or more 'x' followed by one or more 'y' followed by one or more 'z' followed by one or more 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q' followed by one or more 'r' followed by one or more's' followed by one or more 't' followed by one or more 'u' followed by one or more 'v' followed by one or more 'w' followed by one or more 'x' followed by one or more 'y' followed by one or more 'z' followed by one or more 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q' followed by one or more 'r' followed by one or more's' followed by one or more 't' followed by one or more 'u' followed by one or more 'v' followed by one or more 'w' followed by one or more 'x' followed by one or more 'y' followed by one or more 'z' followed by one or more 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q' followed by one or more 'r' followed by one or more's' followed by one or more 't' followed by one or more 'u' followed by one or more 'v' followed by one or more 'w' followed by one or more 'x' followed by one or more 'y' followed by one or more 'z' followed by one or more 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or mor"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    text = text.replace(\" \",\"\")\n    pattern = r\"[a-zA-Z]+[a-zA-Z0-9_]*\\d*\\s?[a-zA-Z]+[a-zA-Z0-9_]*\\s?[a-zA-Z]+[a-zA-Z0-9_]+\"\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # find the pattern\n    p = re.compile(r'(a){2,}b')\n    if p.search(text) == None:\n        return 'NOPE'\n    else:\n        return 'GOOD'\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub(\"[a-zA-z]+\",\"a\",text) # Remove non-alphanumeric characters\n    text = re.sub(\"[0-9]+\",\"0\",text) # Remove numbers\n    text = re.sub(\"\\s+\",\" \",text) # Remove spaces\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'a{3}', text):\n        return re.search(r'a{3}', text).start()\n    if re.search(r'a{4}', text):\n        return re.search(r'a{4}', text).start()\n    if re.search(r'a{5}', text):\n        return re.search(r'a{5}', text).start()\n    if re.search(r'a{6}', text):\n        return re.search(r'a{6}', text).start()\n    if re.search(r'a{7}', text):\n        return re.search(r'a{7}', text).start()\n    if re.search(r'a{8}', text):\n        return re.search(r'a{8}', text).start()\n    if re.search(r'a{9}', text):\n        return re.search(r'a{9}', text).start()\n    if re.search(r'a{10}', text):\n        return re.search(r'a{10}', text).start()\n    if re.search(r'a{11}', text):\n        return re.search(r'a{11}', text).start()\n    if re.search(r'a{12}', text):\n        return re.search(r'a{12}', text).start()\n    if re.search(r'a{13}', text):\n        return re.search(r'a{13}', text).start()\n    if re.search(r'a{14}', text):\n        return re.search(r'a{14}', text).start()\n    if re.search(r'a{15}', text):\n        return re.search(r'a{15}', text).start()\n    if re.search(r'a{16}', text):\n        return re.search(r'a{16}', text).start()\n    if re.search(r'a{17}', text):\n        return re.search(r'a{17}', text).start()\n    if re.search(r'a{18}', text):\n        return re.search(r'a{18}', text).start()\n    if re.search(r'a{19}', text):\n        return re.search(r'a{19}', text).start()\n    if re.search(r'a{20}', text):\n        return re.search(r'a{20}', text).start()\n    if re.search(r'a{21}', text):\n        return re.search(r'a{21}', text).start()\n    if re.search(r'a{22}', text):\n        return re.search(r'a{22}', text).start()\n    if re.search(r'a{23}', text):\n        return re.search(r'a{23}', text).start()\n    if re.search(r'a{24}', text):\n        return re.search(r'a{24}', text).start()\n    if re.search(r'a{25}', text):\n        return re.search(r'a{25}', text).start()\n    if re.search(r'a{26}', text):\n        return re.search(r'a{26}', text).start()\n    if re.search(r'a{27}', text):\n        return re.search(r'a{27}', text).start()\n    if re.search(r'a{28}', text):\n        return re.search(r'a{28}', text).start()\n    if re.search(r'a{29}', text):\n        return re.search(r'a{29}', text).start()\n    if re.search(r'a{30}', text):\n        return re.search(r'a{30}', text).start()\n    if re.search(r'a{31}', text):\n        return re.search(r'a{31}', text).start()\n    if re.search(r'a{32}', text):\n        return re.search(r'a{32}', text).start()\n    if re.search(r'a{33}', text):\n        return re.search(r'a{33}', text).start()\n    if re.search(r'a{34}', text):\n        return re.search(r'a{34}', text).start()\n    if re.search(r'a{35}', text):\n        return re.search(r'a{35}', text).start()\n    if re.search(r'a{36}', text):\n        return re.search(r'a{36}', text).start()\n    if re.search(r'a{37}', text):\n        return re.search(r'a{37}', text).start()\n    if re.search(r'a{38}', text):\n        return re.search(r'a{38}', text).start()\n    if re.search(r'a{39}', text):\n        return re.search(r'a{39}', text).start()\n    if re.search(r'a{40}', text):\n        return re.search(r'a{40}', text).start()\n    if re.search(r'a{41}', text):\n        return re.search(r'a{41}', text).start()\n    if re.search(r'a{42}', text):\n        return re.search(r'a{42}', text).start()\n    if re.search(r'a{43}', text):\n        return re.search(r'a{43}', text).start()\n    if re.search(r'a{44}', text):\n        return re.search(r'a{44}', text).start()\n    if re.search(r'a{45}', text):\n        return re.search(r'a{45}', text).start()\n    if re.search(r'a{46}', text):\n        return re.search(r'a{46}', text).start()\n    if re.search(r'a{47}', text):\n        return re.search(r'a{47}', text).start()\n    if re.search(r'a{48}', text):\n        return re.search(r'a{48}', text).start()\n    if re.search(r'a{49}', text):\n        return re.search(r'a{49}', text).start()\n    if re.search(r'a{50}', text):\n        return re.search(r'a{50}', text).start()\n    if re.search(r'a{51}', text):\n        return re.search(r'a{51}', text).start()\n    if re.search(r'a{52}', text):\n        return re.search(r'a{52}', text).start()\n    if re.search(r'a{53}', text):\n        return re.search(r'a{53}', text).start()\n    if re.search(r'a{54}', text):\n        return re.search(r'a{54}', text).start()\n    if re.search(r'a{55}', text):\n        return re.search(r'a{55}', text).start()\n    if re.search(r'a{56}', text):\n        return re.search(r'a{56}', text).start()\n    if re.search(r'a{57}', text):\n        return re.search(r'a{57}', text).start()\n    if re.search(r'a{58}', text):\n        return re.search(r'a{58}', text).start()\n    if re.search(r'a{59}', text):\n        return re.search(r'a{59}', text).start()\n    if re.search(r'a{60}', text):\n        return re.search(r'a{60}', text).start()\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(b)',text)\ndef text_match_zero_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(b)',text)\ndef text_match_zero_many_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(b)',text)\ndef text_match_zero_many_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_17(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_18(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'(a)(\\b)(\\s)(\\s)(\\s)(\\s)(\\s)(b)',text)\ndef text_match_zero_many_19(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'a(\\w)*b', text)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count_reverse_pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j]:\n                count_reverse_pairs += 1\n    return count_reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = {}\n    for i in test_list:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i]!= \"\":\n                return test_list[i], test_list[j]\n    return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def count_pairs(s1, s2):\n        if s1 == s2:\n            return 1\n        if s1[::-1] == s2[::-1]:\n            return 2\n        return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.sort()\n    return count_reverse_pairs_helper(test_list, 0, len(test_list) - 1)\n    \ndef count_reverse_pairs_helper(test_list, start, end):\n    '''\n    Helper function to count the pairs of reverse strings in the given string list.\n    '''\n    if start > end:\n        return 0\n    elif start == end:\n        return 1\n    else:\n        mid = (start + end) // 2\n        count_pairs_helper(test_list, start, mid)\n        count_pairs_helper(test_list, mid + 1, end)\n        count_pairs_helper(test_list, start, mid - 1)\n        count_pairs_helper(test_list, mid + 1, end)\n        return count_pairs_helper(test_list, start, end)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    #l = len(test_list)\n    #for i in range(0, l-1):\n    #    for j in range(i+1, l):\n    #        if test_list[i] == test_list[j]:\n    #            count += 1\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    str1 = ''.join(test_list)\n    \n    lst = []\n    lst.append(str1[::-1])\n    i = 0\n    j = 0\n    count = 0\n    while i < len(str1):\n        if str1[i] == str1[i+1]:\n            count += 1\n        i += 1\n    while j < len(str1) - 1:\n        if str1[j] == str1[j+1]:\n            count += 1\n        j += 1\n    lst.append(str1)\n    lst.append(count)\n    return lst\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #initialize count_reverse_pairs to 0\n    count_reverse_pairs = 0\n    #iterate through string list\n    for i in range(len(test_list)):\n        #compare the given string and the right string\n        if test_list[i]!= test_list[len(test_list)-1]:\n            #add count_reverse_pairs to count_reverse_pairs if the two strings are not equal\n            if count_reverse_pairs!= 0:\n                count_reverse_pairs = count_reverse_pairs + 1\n            #add count_reverse_pairs to count_reverse_pairs if the two strings are equal\n            if count_reverse_pairs == 0:\n                count_reverse_pairs = 1\n            #add count_reverse_pairs to count_reverse_pairs if the two strings are equal\n            if count_reverse_pairs == 1:\n                count_reverse_pairs = 2\n            #add count_reverse_pairs to count_reverse_pairs if the two strings are identical\n            if count_reverse_pairs == 2:\n                count_reverse_pairs = 3\n    return count_reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    i = 0\n    j = len(test_list)-1\n    while i < j:\n        if test_list[i] == test_list[j]:\n            count += 1\n            i+=1\n            j-=1\n        elif test_list[i] > test_list[j]:\n            i+=1\n        else:\n            j-=1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    list1 = tuple(list1)\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d=dict()\n    count=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]==list1[j]:\n                d[(list1[i],list1[j])]=0\n            else:\n                d[(list1[i],list1[j])]+=1\n                count+=1\n    return d"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # TODO: use a dictionary and count each unique element\n    # return {e: list1.count(e) for e in list1}\n    # return dict(Counter(list1))\n    unique_list = []\n    for list in list1:\n        unique_list += list\n    unique_list = list(set(unique_list))\n    unique_list = tuple(unique_list)\n    return dict(Counter(list1))\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d={}\n    for i in list1:\n        tuple1=tuple(i)\n        d[tuple1]=d.get(tuple1,0)+1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    l1 = []\n    l2 = []\n    counts = {}\n    for i in list1:\n        l1.append(tuple(i))\n    for i in l1:\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    for i in counts:\n        l2.append((i, counts[i]))\n    return l2\n    \n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if list1 == []:\n        return {}\n    else:\n        # dictionary to hold unique tuples.\n        unq_list = {}\n        # loop through list, adding each element in tuple to unq_list\n        for i in list1:\n            if i in unq_list:\n                unq_list[i] += 1\n            else:\n                unq_list[i] = 1\n        \n        return unq_list\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list1[j]:\n                if i in dic.keys():\n                    dic[i] += 1\n                else:\n                    dic[i] = 1\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tup = {}\n    for i in list1:\n        if i in tup:\n            tup[i] += 1\n        else:\n            tup[i] = 1\n    return tup\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    lst = []\n    count = {}\n    for i in list1:\n        if i not in lst:\n            lst.append(i)\n            count.update({i: 1})\n        else:\n            count[i] += 1\n    return count\n    \n    # Write your code here.\n    \n    \n    "
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    my_dictionary = {}\n    for item in list1:\n        my_dictionary[tuple(item)] = my_dictionary.get(tuple(item), 0) + 1\n    return my_dictionary\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        n = float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import math\n    return str(int(num))==num\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except:\n        return False\n    else:\n        if float(num).is_integer():\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_group(num):\n    '''\n    Write a function that takes a number and converts it to a group.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_int(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_positive(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_prime(num):\n    '''\n    Write a function that takes a number and converts it to a prime number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_negative(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_str(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_group(num):\n    '''\n    Write a function that takes a number and converts it to a group.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_int(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_positive(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_prime(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_negative(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_group(num):\n    '''\n    Write a function that takes a number and converts it to a group.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_int(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_positive(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_prime(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_negative(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_group(num):\n    '''\n    Write a function that takes a number and converts it to a group.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_int(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_positive(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_prime(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_negative(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_group(num):\n    '''\n    Write a function that takes a number and converts it to a group.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_int(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_positive(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_prime(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_negative(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_group(num):\n    '''\n    Write a function that takes a number and converts it to a group.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_int(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_positive(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_prime(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_negative(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_group(num):\n    '''\n    Write a function that takes a number and converts it to a group.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_int(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_positive(num):\n    '''\n    Write a function that takes a number and converts it to an int.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_prime(num):\n    ''"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(str(num)) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import math\n    num = float(num)\n    result = math.isclose(num, math.pow(10, 2))\n    return result\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    number = 0\n    for i in range(len(num)):\n        number += int(num[i])\n    return number == num\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str) and isinstance(num, str):\n        try:\n            num = int(num)\n        except ValueError:\n            return False\n        try:\n            if str(num) in ['0', '.', '0.00']:\n                return False\n            else:\n                return True\n        except ValueError:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    else:\n        if num[0] == '-' and num[-1] == '.':\n            return False\n        elif num[0] == '.' and num[1:].isdigit():\n            return True\n        elif num[0] == '-':\n            return False\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).isdecimal()\n    #pass\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==0:\n        return False\n    if len(arr)==1:\n        return arr[0]==arr[0]\n    else:\n        arr.sort()\n        for i in range(1,len(arr)):\n            if arr[i]==arr[i-1]:\n                return False\n        return True\narr=[1,1,1,1,2,3,3,3,4,5]\nprint(unique_Element(arr))"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Write your code here\n    arr = sorted(arr)\n    i=0\n    j=0\n    while i < len(arr)-1:\n        if arr[i] == arr[i+1]:\n            i+=1\n            j+=1\n        elif arr[i]!= arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i])!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Initialize two lists:\n    # - one for the first number\n    # - second for the second number\n    # for each number in the array, we will look at the number in both lists\n    # if the number is in both lists, we compare them with the one in the other\n    # If the result is True, we have a distinct element, otherwise we will compare the numbers in the other list with the first one\n    # Return True if it contains one distinct element, otherwise return False\n    # To change the return value, we can change the index of the first number in each list, then in each list,\n    # we change the value of the second number in each element, so we get the first number with two different numbers in it\n    # and that number is in the other list with the second one\n    # So, if we first make the second number a variable, we can change the value of that variable and it is a unique element\n    # so we can compare the number in the first and the second list\n    # and not if the first element is a unique element, then it is a duplicate\n    # so if the first element is a duplicate, we compare the two numbers in each list. If the two numbers are equal, then we have a distinct element\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #pass\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    result = len(set(arr)) == 1\n    return result\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # EXPLANATION OF SOLUTION:\n    # IMPLEMENT THIS FUNCTION.\n    # EXAMPLE:\n    # \"A\" and \"D\" are distinct. So they can appear in the list.\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Initialize counter for unique elements\n    unique = 0\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2:\n        if 0 < monthnum3 < 12:\n            return True\n    else:\n        if monthnum3 > 12 or monthnum3 < 1:\n            return False\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 12:\n            return True\n        elif monthnum3 > 12:\n            return False\n        else:\n            return True\n    elif monthnum3 == 2:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 3:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 4:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 5:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 6:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 7:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 8:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 9:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 10:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 11:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    elif monthnum3 == 12:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 > 2:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 == 12):\n        return True\n    elif(monthnum3 > 12):\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 <= 0 or monthnum3 > 12):\n        print(\"Error. The month number must be between 1 and 12.\")\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    elif monthnum3 < 10:\n        return True\n    elif monthnum3 < 30:\n        return False\n    else:\n        return True\n    \n    \ndef check_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not. Leap year is a year that evenly divides four years.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \n    \ndef is_leap_year(year):\n    '''\n    Write a function to return True if the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \n    \ndef days_in_month(year, month):\n    '''\n    Write a function that returns the number of days in the month for the given year and month.\n    '''\n    if not (is_leap_year(year)):\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        elif check_monthnumber_number(month):\n            days = monthrange(year, month)[1]\n            return days\n        else:\n            return 'Invalid month!'\n    else:\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        else:\n            days = monthrange(year, month)[1]\n            return days\n    \n    \ndef days_in_year(year):\n    '''\n    Write a function that returns the number of days in the given year.\n    '''\n    if not (is_leap_year(year)):\n        return 'Invalid year!'\n    else:\n        return 366 if year % 4 == 0 else 365\n    \n    \ndef days_in_month_ago(year, month):\n    '''\n    Write a function that returns the number of days in the given year and month that are in the past.\n    '''\n    if not (is_leap_year(year)):\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        elif check_monthnumber_number(month):\n            days = monthrange(year, month)[1]\n            return days\n        else:\n            return 'Invalid month!'\n    else:\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        else:\n            days = monthrange(year, month)[1]\n            return days\n    \n    \ndef days_in_year_ago(year):\n    '''\n    Write a function that returns the number of days in the given year that are in the past.\n    '''\n    if not (is_leap_year(year)):\n        return 366 if year % 4 == 0 else 365\n    else:\n        return 365\n    \n    \ndef days_in_month_number(monthnum):\n    '''\n    Write a function that returns the number of days in the given month.\n    '''\n    if not (is_leap_year(2020)):\n        if monthnum < 1 or monthnum > 12:\n            return 'Invalid month!'\n        elif check_monthnumber_number(monthnum):\n            days = monthrange(2020, monthnum)[1]\n            return days\n        else:\n            return 'Invalid month!'\n    else:\n        if monthnum < 1 or monthnum > 12:\n            return 'Invalid month!'\n        else:\n            days = monthrange(2020, monthnum)[1]\n            return days\n    \n    \ndef days_in_year_number(year):\n    '''\n    Write a function that returns the number of days in the given year.\n    '''\n    if not (is_leap_year(2020)):\n        return 366 if year % 4 == 0 else 365\n    else:\n        return 365\n    \n    \ndef days_in_month_number_ago(year, month):\n    '''\n    Write a function that returns the number of days in the given month that are in the past.\n    '''\n    if not (is_leap_year(year)):\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        elif check_monthnumber_number(month):\n            days = monthrange(year, month)[1]\n            return days\n        else:\n            return 'Invalid month!'\n    else:\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        else:\n            days = monthrange(year, month)[1]\n            return days\n    \n    \ndef days_in_year_number_ago(year):\n    '''\n    Write a function that returns the number of days in the given year that are in the past.\n    '''\n    if not (is_leap_year(2020)):\n        return 366 if year % 4 == 0 else 365\n    else:\n        return 365\n    \n    \ndef days_in_month_ago(year, month):\n    '''\n    Write a function that returns the number of days in the given month that are in the past.\n    '''\n    if not (is_leap_year(year)):\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        elif check_monthnumber_number(month):\n            days = monthrange(year, month)[1]\n            return days\n        else:\n            return 'Invalid month!'\n    else:\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        else:\n            days = monthrange(year, month)[1]\n            return days\n    \n    \ndef days_in_year_ago(year):\n    '''\n    Write a function that returns the number of days in the given year that are in the past.\n    '''\n    if not (is_leap_year(2020)):\n        return 366 if year % 4 == 0 else 365\n    else:\n        return 365\n    \n    \ndef days_in_month_ago(year, month):\n    '''\n    Write a function that returns the number of days in the given month that are in the past.\n    '''\n    if not (is_leap_year(year)):\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        elif check_monthnumber_number(month):\n            days = monthrange(year, month)[1]\n            return days\n        else:\n            return 'Invalid month!'\n    else:\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        else:\n            days = monthrange(year, month)[1]\n            return days\n    \n    \ndef days_in_year_ago(year):\n    '''\n    Write a function that returns the number of days in the given year that are in the past.\n    '''\n    if not (is_leap_year(2020)):\n        return 366 if year % 4 == 0 else 365\n    else:\n        return 365\n    \n    \ndef days_in_month_ago(year, month):\n    '''\n    Write a function that returns the number of days in the given month that are in the past.\n    '''\n    if not (is_leap_year(year)):\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        elif check_monthnumber_number(month):\n            days = monthrange(year, month)[1]\n            return days\n        else:\n            return 'Invalid month!'\n    else:\n        if month < 1 or month > 12:\n            return 'Invalid month!'\n        else:\n            days = monthrange(year, month)[1]\n            return days\n    \n    \ndef days_in_year_ago(year):\n    '''\n    Write a function that returns the number of days in the given year that are in the past.\n    '''\n    if not (is_leap_year(2020)):\n        return 366 if year % 4 == 0 else 365\n    else:\n        return 365\n    \n    \ndef days_in_month_ago_ago(year, month):\n    '''\n    Write a function that returns the number of days in the given month tha"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if not type(monthnum3) is int or not monthnum3:\n        return False\n    if not isinstance(monthnum3, int) and not isinstance(monthnum3, float):\n        return False\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if not isinstance(monthnum3, int):\n        raise TypeError(\"Input must be an integer.\")\n    if monthnum3 < 1 or monthnum3 > 12:\n        raise ValueError(\"Input must be between 1 and 12.\")\n    return monthnum3 == 30 or monthnum3 == 29 or monthnum3 == 28\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3>12 or monthnum3<1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # code here\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\n    if int(monthnum3) > 12:\n        print('month number is out of range')\n        return False\n    elif len(months) > 0:\n        month = months[int(monthnum3) - 1]\n        if month!= 'january' and month!= 'february' and month!='march' and month!= 'april' and month!='may' and month!= 'june' and month!= 'july' and month!= 'august' and month!='september' and month!= 'october' and month!= 'november' and month!= 'december':\n            print('This is not a valid month')\n            return False\n    else:\n        print('This is not a valid month')\n        return False\n    \ndef check_daysnumber_number(daysnum3):\n    '''\n    Write a function to check whether the given days number contains 30 days or not. Days are given as number from 1 to 31.\n    '''\n    days = ['sunday','monday', 'tuesday', 'wednesday', 'thursday', 'friday','saturday']\n    if int(daysnum3) > 31:\n        print('days number is out of range')\n        return False\n    elif len(days) > 0:\n        day = days[int(daysnum3) - 1]\n        if day!='saturday' and day!='sunday':\n            print('This is not a valid day')\n            return False\n    else:\n        print('This is not a valid day')\n        return False\n    \ndef check_year(year):\n    '''\n    Write a function that takes a year and returns the corresponding string\n    '''\n    year2 = 2021 - year\n    years = ['i am', 'the', 'that']\n    if year2 >= 0:\n        year3 = year2\n    else:\n        year3 = abs(year2)\n        \n    if len(years) > 0:\n        year3 += 1\n    else:\n        year3 += 1\n    if year3 > 12:\n        year3 ='st'\n    if year3 > 60:\n        year3 = 'nd'\n    if year3 > 90:\n        year3 = 'rd'\n    return str(year3) +'' + str(year2) +'' + str(year) +'' + str(year3)\n    \ndef check_month(month):\n    '''\n    Write a function that takes a month and returns the corresponding string\n    '''\n    months = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\n    if month > 12:\n        month = month - 13\n    else:\n        month = month\n    if month < 1 or month > 12:\n        month = 'Januar'\n    elif month < 2 or month > 12:\n        month = 'Februar'\n    elif month < 3 or month > 12:\n        month = 'Maart'\n    elif month < 4 or month > 12:\n        month = 'April'\n    elif month < 5 or month > 12:\n        month = 'Maijul'\n    elif month < 6 or month > 12:\n        month = 'Juni'\n    elif month < 7 or month > 12:\n        month = 'Juli'\n    elif month < 8 or month > 12:\n        month = 'August'\n    elif month < 9 or month > 12:\n        month = 'September'\n    elif month < 10 or month > 12:\n        month = 'Oktobem'\n    elif month < 11 or month > 12:\n        month = 'November'\n    elif month < 12 or month > 12:\n        month = 'Dezember'\n    return months[month - 1]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = n\n    first_diff = arr[0] - arr[1]\n    # for i in arr:\n    #     print(i)\n    #     if i - first_diff < min_diff:\n    #         min_diff = i - first_diff\n    # return min_diff\n    for i in range(n):\n        if first_diff == arr[i] - arr[i-1]:\n            min_diff = arr[i] - arr[i-1]\n            first_diff = arr[i]\n        else:\n            first_diff = arr[i] - arr[i-1]\n    return min_diff\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    #Initialize  array \n    arr = sorted(arr) \n    i = 0\n    j = 1\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    small_arr = []\n    for i in range(n): \n        small_arr.append(arr[i])\n    small_arr.sort()\n    small_arr = [0] + small_arr\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0]\n    j = 1\n    for i in range(1,n):\n        if arr[i] - min_diff > 0:\n            min_diff = arr[i] - min_diff\n        else:\n            min_diff = arr[i]\n            j += 1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if (n<=1): \n        return arr[0] \n    low = 0 \n    high = n-1 \n    while (low<high): \n        mid = (low + high)//2 \n        diff = arr[mid] - arr[mid-1] \n        if diff > 0: \n            high = mid - 1 \n        else: \n            low = mid + 1 \n    return arr[low] \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Write your code here.\n    if n==1:\n        return arr[0]\n    else:\n        return arr[0]+find_min_diff(arr[1:n],n-1)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    x=arr[0]\n    y=arr[0]\n    for i in range(1,n):\n        if arr[i]>x:\n            x=arr[i]\n        if arr[i]>y:\n            y=arr[i]\n    return x-y\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    low = 0\n    high = 0\n    count = 0\n    for i in range(0,n):\n        low = i\n        count = 0\n        for j in range(i+1,n):\n            if arr[low]!= arr[j]:\n                count +=1\n        if count == 0:\n            return arr[low]\n        else:\n            high = j\n    return arr[low] - arr[high]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0]\n    min_diff_index = 0\n    for i in range(1,n):\n        if arr[i] - arr[min_diff_index] > min_diff:\n            min_diff = arr[i] - arr[min_diff_index]\n            min_diff_index = i\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min = sys.maxsize\n    arr.sort()\n    for i in range(0, n-1):\n        min = min if arr[i] < arr[i+1] else min\n    return min\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        return len(str) - str.count('0')\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    #declare variable\n    lst = []\n    for i in range(len(str)):\n        lst.append(str[i])\n    lst_ctr = 0\n    #iterate through list\n    for i in range(len(str)):\n        lst_ctr = lst_ctr + 1\n        if(str[i] == '0'):\n            lst_ctr = 0\n            break\n    #return result\n    return lst_ctr\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] in '0123456789':\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\ndef number_digits(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #Write your code here\n    if n <= 0: \n        return False\n    if n == 1: \n        return True\n    else: \n        # You can use any other method which you like\n        #return n % 10 > 5 and n % 10 < 9 or n % 10 == 9\n        return n % 10 > 5 or n % 10 < 9\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 1:\n        return False\n    if n % 2!= 0:\n        return False\n    pivot = int((n + 1)/2)\n    while n > 0:\n        if (n % 2 == 0):\n            if pivot == 1:\n                return False\n            if pivot == (n-1):\n                return True\n            if pivot == n-1:\n                return True\n            if pivot == n-1:\n                return False\n            n = n - 2\n        if n % 2 == 1:\n            if pivot == 1:\n                return False\n            if pivot == (n-1):\n                return True\n            if pivot == n-1:\n                return True\n            if pivot == n-1:\n                return False\n            n = n - 2\n        pivot = pivot//2\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: return 1\n    elif n == 2: return 3\n    elif n == 3: return 5\n    elif n == 4: return 7\n    elif n == 5: return 11\n    elif n == 6: return 13\n    elif n == 7: return 17\n    elif n == 8: return 19\n    elif n == 9: return 23\n    elif n == 10: return 29\n    elif n == 11: return 31\n    elif n == 12: return 37\n    elif n == 13: return 41\n    elif n == 14: return 47\n    elif n == 15: return 51\n    elif n == 16: return 53\n    elif n == 17: return 59\n    elif n == 18: return 61\n    elif n == 19: return 67\n    elif n == 20: return 71\n    elif n == 21: return 73\n    elif n == 22: return 79\n    elif n == 23: return 81\n    elif n == 24: return 87\n    elif n == 25: return 91\n    elif n == 26: return 93\n    elif n == 27: return 99\n    elif n == 28: return 101\n    elif n == 29: return 103\n    elif n == 30: return 107\n    elif n == 31: return 109\n    else: return -1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    elif n % 2 == 0: \n        return False\n    elif n == 2: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = math.sqrt(n)\n    \n    if num == 1: return 1\n    elif num == 2: return 3\n    elif num == 3: return 5\n    elif num == 4: return 8\n    elif num == 5: return 10\n    elif num == 6: return 15\n    elif num == 7: return 20\n    elif num == 8: return 35\n    elif num == 9: return 45\n    elif num == 10: return 75\n    elif num == 11: return 100\n    elif num == 12: return 1500\n    elif num == 13: return 2500\n    elif num == 14: return 3500\n    elif num == 15: return 10000\n    elif num == 16: return 100000\n    elif num == 17: return 1000000\n    elif num == 18: return 2000000\n    elif num == 19: return 4000000\n    elif num == 20: return 5000000\n    elif num == 21: return 8000000\n    elif num == 22: return 15000000\n    elif num == 23: return 3000000\n    elif num == 24: return 5000000\n    elif num == 25: return 100000000\n    elif num == 26: return 15000000\n    elif num == 27: return 3000000\n    elif num == 28: return 5000000\n    elif num == 29: return 100000000\n    elif num == 30: return 15000000\n    elif num == 31: return 3000000\n    elif num == 32: return 5000000\n    elif num == 33: return 100000000\n    elif num == 34: return 15000000\n    elif num == 35: return 3000000\n    elif num == 36: return 5000000\n    elif num == 37: return 100000000\n    elif num == 38: return 15000000\n    elif num == 39: return 3000000\n    elif num == 40: return 5000000\n    elif num == 41: return 100000000\n    elif num == 42: return 15000000\n    elif num == 43: return 3000000\n    elif num == 44: return 5000000\n    elif num == 45: return 100000000\n    elif num == 46: return 15000000\n    elif num == 47: return 3000000\n    elif num == 48: return 5000000\n    elif num == 49: return 100000000\n    elif num == 50: return 15000000\n    elif num == 51: return 3000000\n    elif num == 52: return 5000000\n    elif num == 53: return 100000000\n    elif num == 54: return 15000000\n    elif num == 55: return 3000000\n    elif num == 56: return 5000000\n    elif num == 57: return 100000000\n    elif num == 58: return 15000000\n    elif num == 59: return 3000000\n    elif num == 60: return 5000000\n    elif num == 61: return 100000000\n    elif num == 62: return 15000000\n    elif num == 63: return 3000000\n    elif num == 64: return 5000000\n    elif num == 65: return 100000000\n    elif num == 66: return 15000000\n    elif num == 67: return 3000000\n    elif num == 68: return 5000000\n    elif num == 69: return 100000000\n    elif num == 70: return 15000000\n    elif num == 71: return 3000000\n    elif num == 72: return 5000000\n    elif num == 73: return 100000000\n    elif num == 74: return 15000000\n    elif num == 75: return 3000000\n    elif num == 76: return 5000000\n    elif num == 77: return 100000000\n    elif num == 78: return 15000000\n    elif num == 79: return 3000000\n    elif num == 80: return 5000000\n    elif num == 81: return 100000000\n    elif num == 82: return 15000000\n    elif num == 83: return 3000000\n    elif num == 84: return 5000000\n    elif num == 85: return 100000000\n    elif num == 86: return 15000000\n    elif num == 87: return 3000000\n    elif num == 88: return 5000000\n    elif num == 89: return 100000000\n    elif num == 90: return 15000000\n    elif num == 91: return 3000000\n    elif num == 92: return 5000000\n    elif num == 93: return 100000000\n    elif num == 94: return 15000000\n    elif num == 95: return 3000000\n    elif num == 96: return 5000000\n    elif num == 97: return 100000000\n    elif num == 98: return 15000000\n    elif num == 99: return 3000000\n    elif num == 100: return 5000000\n    elif num == 101: return 100000000\n    elif num == 102: return 15000000\n    elif num == 103: return 3000000\n    elif num == 104: return 5000000\n    elif num == 105: return 100000000\n    elif num == 106: return 15000000\n    elif num == 107: return 3000000\n    elif num == 108: return 5000000\n    elif num == 109: return 100000000\n    elif num == 110: return 15000000\n    elif num == 111: return 3000000\n    elif num == 112: return 5000000\n    elif num == 113: return 100000000\n    elif num == 114: return 15000000\n    elif num == 115: return 3000000\n    elif num == 116: return 5000000\n    elif num == 117: return 100000000\n    elif num == 118: return 15000000\n    elif num == 119: return 3000000\n    elif num == 120: return 5000000\n    elif num == 121: return 100000000\n    elif num == 122: return 15000000\n    elif num == 123: return 3000000\n    elif num == 124: return 5000000\n    elif num == 125: return 100000000\n    elif num == 126: return 15000000\n    elif num == 127: return 3000000\n    elif num == 128: return 5000000\n    elif num == 129: return 100000000\n    elif num == 130: return 15000000\n    elif num == 131: return 3000000\n    elif num == 132: return 5000000\n    elif num == 133: return 100000000\n    elif num == 134: return 15000000\n    elif num == 135: return 3000000\n    elif num == 136: return 5000000\n    elif num == 137: return 100000000\n    elif num == 138: return 15000000\n    elif num == 139: return 3000000\n    elif num == 140: return 5000000\n    elif num == 141: return 100000000\n    elif num == 142: return 15000000\n    elif num == 143: return 3000000\n    elif num == 144: return 5000000\n    elif num == 145: return 100000000\n    elif num == 146: return 15000000\n    elif num == 147: return 3000000\n    elif num == 148: return 5000000\n    elif num == 149: return 100000000\n    elif num == 150: return 15000000\n    elif num == 151: return 3000000\n    elif num == 152: return 5000000\n    elif num == 153: return 100000000\n    elif num == 154: return 15000000\n    elif num == 155: return 3000000\n    elif num == 156: return 5000000\n    elif num == 157: return 100000000\n    elif num == 158: return 15000000\n    elif num == 159: return 3000000\n    elif num == 160: return 5000000\n    elif num == 161: return 100000000\n    elif num == 162: return 15000000\n    elif num == 163: return 3000000\n    elif num == 164: return 5000000\n    elif num == 165: return 100000000\n    elif num == 166: return 15000000\n    elif num == 167: return 3000000\n    elif num == 168: return 5000000\n    elif num == 169: return 100000000\n    elif num == 170: return 15000000\n    elif num == 171: return 3000000\n    elif num == 172: return 5000000\n    elif num == 173: return 100000000\n    elif num == 174: return 15000000\n    elif num == 175: return 3000000\n    elif num == 176: return 5000000\n    elif num == 177: return 100000000\n    elif num == 178: return 15000000\n    elif num == 179: return 3000000\n    elif num == 180: return 5000000\n    elif num == 181: return 100000000\n    elif num == 182: return 1"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0: \n        return 'Error: negative number'\n    elif n == 0: \n        return 1\n    elif n == 1: \n        return 0\n    else: \n        return is_polite(n - 1) + is_polite(n - 2) \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_count = 0\n    for i in range(1,n+1):\n        if(n%i==0):\n            polite_count = polite_count+1\n    if polite_count==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 2: \n        print(\"Invalid input\") \n        return \n    else: \n        print(\"n is:\", n) \n        return math.floor(n) \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    nth_polite_number = 0\n    for i in range(1,n+1): \n        if i==1: \n            nth_polite_number += 1\n        else: \n            if (nth_polite_number % i) == 0: \n                return False\n            nth_polite_number += 1\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    list = [2, 3, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, \n            61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    p = list[n-1]\n    for i in range(n-2, -1, -1):\n        p = p*p\n        p = int(math.sqrt(p))\n    return p\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(0, len(l1)):\n        if i == 0 or i == len(l1) - 1:\n            l.append((l1[i], l1[i] + 1))\n        else:\n            l.append((l1[i], l1[i + 1] - 1))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in l1:\n        for j in l1:\n            if i!= j:\n                l2.append((i,j))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1) - 1):\n        if l1[i] == l1[i + 1]:\n            continue\n        if l1[i + 1] == l1[i + 2]:\n            continue\n        l2.append((l1[i], l1[i + 1], l1[i + 2]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1, l1[1:]))\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #l1 = [1,2,3,4,5,6,7,8,9,10]\n    return [(x,y) for x in range(len(l1)) for y in range(len(l1)-x-1) if (l1[x:x+y]==l1[x:x+y+1])]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        j = i + 1\n        while j < len(l1):\n            if l1[i] < l1[j] and l1[i] == l1[j]:\n                l2.append((l1[i], l1[j]))\n            j += 1\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #a = []\n    #b = []\n    #c = []\n    #for i in range(len(l1)):\n        #a.append((l1[i],l1[i+1]))\n        #b.append(l1[i])\n        #c.append(l1[i+1])\n    #return a, b, c\n    \n    \n    a = []\n    b = []\n    for i in range(len(l1)-1):\n        if l1[i]==l1[i+1]:\n            continue\n        else:\n            a.append((l1[i],l1[i+1]))\n            b.append(l1[i])\n    return a, b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    a = []\n    for x in l1:\n        if l1.index(x) + 1 == l1.index(x) - 1:\n            a.append((l1.index(x),l1.index(x)+1))\n        else:\n            a.append((l1.index(x),l1.index(x)+1))\n    return a\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(0,len(l1)):\n        result.append(l1[i:i+2])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    else:\n        for i in range(1, len(l1)):\n            if l1[i-1]!= l1[i]:\n                yield l1[i-1],l1[i]\n                "
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    def search(arr, sum):\n        counter = 0\n        for i in range(len(arr)):\n            if arr[i] == sum:\n                counter += 1\n        return counter\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if sum == arr[i]+arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return count_pairs(arr, sum)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if sum > len(arr) or sum < 0:\n        return 0\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i]+arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in arr:\n        if sum == i:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for index1, item1 in enumerate(arr):\n        for index2, item2 in enumerate(arr):\n            if item1+item2 == sum:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=0\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff += 1\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if (len(li1)!= len(li2)):\n        return None\n    \n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            return li1[i]\n    return li1[-1]\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(len(list(set(li1)-set(li2))))"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = li1-li2\n    print(result)\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1-li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff.append(li1[i])\n    return diff\n    \n    \ndef DiffIter(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)!=len(li2):\n        print(\"lists must have same length\")\n        return\n    \n    diff = []\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff.append(li1[i])\n    return diff\n    \n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1=[]\n    l2=[]\n    for i in li1:\n        if(type(i)==float):\n            l1.append(float(i))\n        else:\n            l1.append(i)\n    for j in li2:\n        if(type(j)==float):\n            l2.append(float(j))\n        else:\n            l2.append(j)\n    return l1-l2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dif=[]\n    for i in li1:\n        dif.append(li2[i]-li1[i])\n    return(dif)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff.append(li1[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_li = []\n    for i in range(len(li1)):\n        diff_li.append(li1[i]-li2[i])\n    return diff_li\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(1,n) :\n        odd_sum += (i**4)\n    print(odd_sum)\n    return odd_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2 == 0 :\n            sum += i\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 1 : \n        return n\n    else : \n        return odd_num_sum(n-1) + 4 * odd_num_sum(n-2) + 3 * odd_num_sum(n-3) + 4 * odd_num_sum(n-4)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 2 : \n        return n \n    else :\n        return n % 4 * n * (3 ** (n - 1)) + odd_num_sum(n - 1) \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # formula: n = n + 1/4\n    # n = 1.0\n    # n = n + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1/4\n    # n = 1 + 1"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        return 0 \n    else : \n        if n % 2 == 0 : \n            return (n ** 2) \n        else : \n            return n ** 4\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(n * n for n in range(1, n//2) if n%2)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        print (\"Incorrect input\")\n    else :\n        sum = 0 \n        for x in range(0, n+1): \n            sum = sum + x**4 \n        return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 6\n    elif n == 4: \n        return 24\n    elif n == 5: \n        return 60\n    elif n == 6: \n        return 720\n    elif n == 7: \n        return 840\n    elif n == 8: \n        return 9600\n    elif n == 9: \n        return 12600\n    elif n == 10: \n        return 15000\n    elif n == 11: \n        return 20000\n    elif n == 12: \n        return 25000\n    elif n == 13: \n        return 30000\n    elif n == 14: \n        return 35000\n    elif n == 15: \n        return 40000\n    elif n == 16: \n        return 45000\n    elif n == 17: \n        return 50000\n    elif n == 18: \n        return 55000\n    elif n == 19: \n        return 60000\n    elif n == 20: \n        return 65000\n    elif n == 21: \n        return 70000\n    elif n == 22: \n        return 75000\n    elif n == 23: \n        return 80000\n    elif n == 24: \n        return 85000\n    elif n == 25: \n        return 90000\n    elif n == 26: \n        return 100000\n    elif n == 27: \n        return 105000\n    elif n == 28: \n        return 115000\n    elif n == 29: \n        return 120000\n    elif n == 30: \n        return 130000\n    elif n == 31: \n        return 150000\n    elif n == 32: \n        return 170000\n    elif n == 33: \n        return 190000\n    elif n == 34: \n        return 210000\n    elif n == 35: \n        return 230000\n    elif n == 36: \n        return 250000\n    elif n == 37: \n        return 270000\n    elif n == 38: \n        return 290000\n    elif n == 39: \n        return 310000\n    elif n == 40: \n        return 330000\n    elif n == 41: \n        return 350000\n    elif n == 42: \n        return 370000\n    elif n == 43: \n        return 390000\n    elif n == 44: \n        return 410000\n    elif n == 45: \n        return 430000\n    elif n == 46: \n        return 450000\n    elif n == 47: \n        return 470000\n    elif n == 48: \n        return 480000\n    elif n == 49: \n        return 490000\n    elif n == 50: \n        return 505000\n    elif n == 51: \n        return 515000\n    elif n == 52: \n        return 520000\n    elif n == 53: \n        return 525000\n    elif n == 54: \n        return 535000\n    elif n == 55: \n        return 545000\n    elif n == 56: \n        return 550000\n    elif n == 57: \n        return 555000\n    elif n == 58: \n        return 565000\n    elif n == 59: \n        return 575000\n    elif n == 60: \n        return 585000\n    elif n == 61: \n        return 595000\n    elif n == 62: \n        return 6100000\n    elif n == 63: \n        return 615000\n    elif n == 64: \n        return 620000\n    elif n == 65: \n        return 630000\n    elif n == 66: \n        return 635000\n    elif n == 67: \n        return 645000\n    elif n == 68: \n        return 655000\n    elif n == 69: \n        return 665000\n    elif n == 70: \n        return 675000\n    elif n == 71: \n        return 685000\n    elif n == 72: \n        return 700000\n    elif n == 73: \n        return 715000\n    elif n == 74: \n        return 720000\n    elif n == 75: \n        return 735000\n    elif n == 76: \n        return 745000\n    elif n == 77: \n        return 755000\n    elif n == 78: \n        return 765000\n    elif n == 79: \n        return 775000\n    elif n == 80: \n        return 8100000\n    elif n == 81: \n        return 815000\n    elif n == 82: \n        return 820000\n    elif n == 83: \n        return 830000\n    elif n == 84: \n        return 835000\n    elif n == 85: \n        return 845000\n    elif n == 86: \n        return 855000\n    elif n == 87: \n        return 865000\n    elif n == 88: \n        return 875000\n    elif n == 89: \n        return 885000\n    elif n == 90: \n        return 900000\n    elif n == 91: \n        return 915000\n    elif n == 92: \n        return 920000\n    elif n == 93: \n        return 935000\n    elif n == 94: \n        return 945000\n    elif n == 95: \n        return 955000\n    elif n == 96: \n        return 965000\n    elif n == 97: \n        return 975000\n    elif n == 98: \n        return 985000\n    elif n == 99: \n        return 10010000\n    elif n == 100000: \n        return 1000000\n    elif n == 101000: \n        return 100000\n    elif n == 102500: \n        return 975000\n    elif n == 103500: \n        return 965000\n    elif n == 104500: \n        return 955000\n    elif n == 105500: \n        return 945000\n    elif n == 106500: \n        return 945000\n    elif n == 107500: \n        return 945000\n    elif n == 108500: \n        return 945000\n    elif n == 109500: \n        return 945000\n    elif n == 1105000: \n        return 945000\n    elif n == 113500: \n        return 945000\n    elif n == 114500: \n        return 945000\n    elif n == 115500: \n        return 945000\n    elif n == 116500: \n        return 945000\n    elif n == 117500: \n        return 945000\n    elif n == 118500: \n        return 945000\n    elif n == 1195000: \n        return 945000\n    elif n == 122500: \n        return 945000\n    elif n == 123500: \n        return 945000\n    elif n == 124500: \n        return 945000\n    elif n == 125500: \n        return 945000\n    elif n == 126500: \n        return 945000\n    elif n == 127500: \n        return 945000\n    elif n == 128500: \n        return 945000\n    elif n == 129500: \n        return 945000\n    elif n == 135000: \n        return 945000\n    elif n == 133500: \n        return 945000\n    elif n == 134500: \n        return 945000\n    elif n == 135500: \n        return 945000\n    elif n == 136500: \n        return 945000\n    elif n == 137500: \n        return 945000\n    elif n == 138500: \n        return 945000\n    elif n == 142500: \n        return 945000\n    elif n == 143"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == \"\":\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if type(exp) is not str:\n        raise TypeError('exp should be a string')\n    \n    result = False\n    # check for open parenthesis and close parenthesis\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            result = result or check_expression(exp[i+1:])\n        elif exp[i] == ')':\n            if not result:\n                return False\n        else:\n            return False\n    return result\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) <= 1:\n        return True\n    \n    stack = []\n    for i in exp:\n        if i not in ['(', ')']:\n            stack.append(i)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    brackets = ['(','[','{']\n    for char in exp:\n        if char in brackets:\n            if len(stack) == 0:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            elif char == ']' and stack[-1]!= '[':\n                return False\n            elif char == '}' and stack[-1]!= '{':\n                return False\n            else:\n                if char in brackets and stack[-1] == brackets[brackets.index(char)]:\n                    continue\n                else:\n                    return False\n        else:\n            stack.append(char)\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # if the left parenthesis only has the same as the right\n    if len(exp) <= 1:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i=='(':\n            stack.append(i)\n        elif i=='{':\n            stack.append(i)\n        elif i=='}':\n            if stack[-1]!='{':\n                return False\n            stack.pop()\n    return len(stack)==0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # write your code here\n    stack = deque()\n    parentheses = {'(':')', '[':']'}\n    for ch in exp:\n        if ch in parentheses:\n            stack.append(ch)\n        elif ch not in parentheses:\n            return False\n    if len(stack) < 1:\n        return True\n    else:\n        parentheses.pop()\n        return check_expression(stack.pop())\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    op = [\"(\",\"[\",\"{\",\"}\"]\n    stack = []\n    for i in exp:\n        if i in op:\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            elif stack[-1] == op[0]:\n                stack.pop()\n            else:\n                return False\n    return len(stack)==0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    is_balanced = True\n    index = 0\n    \n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                is_balanced = False\n                break\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                is_balanced = False\n                break\n    \n    if len(stack) == 0:\n        is_balanced = True\n    else:\n        is_balanced = False\n    return is_balanced\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    count = 0\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            last = stack.pop()\n            if last == '(':\n                count += 1\n            else:\n                count -= 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # length of a word is the number of characters in it\n    return test_str.replace(test_str[:len(test_str)-K],'')\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    removed_word_list = []\n    for word in test_str.split():\n        if len(word) == K:\n            removed_word_list.append(word)\n    return''.join(removed_word_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = ''\n    for i in test_str:\n        if len(i) == K:\n            result += i\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    length = {}\n    for word in words:\n        length[word] = len(word)\n    return sorted(length, key=length.get, reverse=True)\n    \ndef remove_multiple(test_str, K):\n    '''\n    Write a function that takes in a string and returns the string with all the words in it removed.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) >= K:\n            result.append(word)\n    return''.join(result)\n    \ndef remove_swaps(test_str):\n    '''\n    Write a function that takes in a string and returns the string with all the words swapped in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) < len(word[::-1]):\n            result.append(word)\n    return''.join(result)\n    \ndef remove_punctuation(test_str):\n    '''\n    Write a function that takes in a string and returns the string with all the words having all the punctuation character removed in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if word.isalpha() and word[0].isupper() and word[0] not in set('!#$%&()_+*-/'):\n            result.append(word)\n    return''.join(result)\n    \ndef remove_digits(test_str):\n    '''\n    Write a function that takes in a string and returns the string with all the words having all the digits removed in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if word.isdigit():\n            result.append(word)\n    return''.join(result)\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function that takes in a string and a substring and returns the number of times the substring appears in the string.\n    '''\n    count = 0\n    for i in range(len(string) - len(sub_string) + 1):\n        if string[i:i+len(sub_string)] == sub_string:\n            count += 1\n    return count\n    \ndef remove_common_words(string, words):\n    '''\n    Write a function that takes in a string and a list of words and returns the string without the list of words.\n    '''\n    result = string.split()\n    for word in words:\n        result = [x for x in result if x!= word]\n    return''.join(result)\n    \ndef replace_words(string, old, new, count=1):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string with all the occurrences of the old word replaced with the new word.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] == old:\n            result[i] = new\n            count += 1\n    return''.join(result)\n    \ndef remove_repeating_words(string, count=1):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef remove_duplicate_words(string, count=1):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef remove_duplicate_words(string, count=1):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef remove_special_chars(string):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef normalize(string):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef normalize_vowels(string):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef normalize_consonants(string):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef remove_stopwords(string):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef remove_ngrams(string):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef remove_repeating_numbers(string):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef remove_duplicate_numbers(string):\n    '''\n    Write a function that takes in a string and one of the old and new words and returns a new string without the list of words.\n    '''\n    result = string.split()\n    for i in range(len(result)):\n        if result[i] not in result[i:]:\n            result[i] = result[i] * count\n            count += 1\n    return''.join(result)\n    \ndef remov"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #initialize an empty string\n    removed_str = ''\n    #Iterate through the string\n    for i in test_str:\n        #If the length is not greater than the k\n        if len(i) <= K:\n            #add the remaining space to the string\n            removed_str += i\n        else:\n            #remove the first K letters of the string\n            removed_str = removed_str[K:]\n    #return the remaining string\n    return removed_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = \"\"\n    word_list = [i for i in test_str.lower().split(' ') if len(i) <= K]\n    for word in word_list:\n        result +='' + word\n    return result.strip(' ')\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # your code goes here\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word) == K:\n            new_words.append(word)\n    return''.join(new_words)\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str)<K:\n        return test_str\n    else:\n        i=0\n        for word in test_str:\n            if len(word)==K:\n                test_str=test_str[:i]+test_str[i+1:]\n                i+=1\n                if len(test_str)==K:\n                    return test_str\n            elif len(word)>K:\n                i+=1\n        return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if len(test_str) == 0:\n        return ''\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = r\"\\b%s\\b\" % pattern\n    m = re.findall(regex, text, re.MULTILINE)\n    if m:\n        return m[0]\n    return None\ndef occurance_replace(text,pattern,replace):\n    '''\n    Write a function to replace the substrings in a string with a replacement. Return the new text.\n    '''\n    regex = r\"\\b%s\\b\" % pattern\n    return re.sub(regex, replace, text, 0, re.MULTILINE)\ndef find_substring(text,pattern,replace):\n    '''\n    Write a function to find a substring within a string. Return None if there is no match.\n    '''\n    m = re.findall(pattern, text, re.MULTILINE)\n    if m:\n        return m[0]\n    return None\ndef count_occurence(text, pattern):\n    '''\n    Write a function to count the number of occurrences of a substring within a string. Return the number of occurrences.\n    '''\n    m = re.findall(pattern, text, re.MULTILINE)\n    if m:\n        return len(m)\n    return 0\ndef count_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of the substrings within a string. Return the number of occurrences.\n    '''\n    m = re.findall(pattern, text, re.MULTILINE)\n    if m:\n        return len(m)\n    return 0\ndef find_length(text, pattern):\n    '''\n    Write a function to find the length of a substring. Return the length.\n    '''\n    m = re.findall(pattern, text, re.MULTILINE)\n    if m:\n        return len(m)\n    return 0\ndef index_substring(text,pattern):\n    '''\n    Write a function to find the index of the substring within a string. Return the index of the substring.\n    '''\n    m = re.findall(pattern, text, re.MULTILINE)\n    if m:\n        return m[0].index(pattern)\n    return 0\ndef is_repeated(text):\n    '''\n    Write a function to check whether a string is repeated. Return True if it is repeated and False otherwise.\n    '''\n    m = re.findall(r'(\\w+)', text)\n    if m:\n        return True\n    return False\ndef is_substring(text, pattern):\n    '''\n    Write a function to check whether a string is a substring. Return True if it is a substring and False otherwise.\n    '''\n    m = re.findall(pattern, text, re.MULTILINE)\n    if m:\n        return True\n    return False\ndef remove_space(text):\n    '''\n    Write a function to remove spaces from a string. Return the string with no spaces removed.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string. Return the string with no punctuation removed.\n    '''\n    text = re.sub(r'[!@#$%^&*?\\(\\)\\-\\_\\+\\=\\<\\>\\?\\|\\{\\}]+', '', text)\n    text = re.sub(r'[^a-zA-Z]+', '', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function to remove stopwords from a string. Return the string with no stopwords removed.\n    '''\n    text = remove_space(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    return text\ndef lower_case(text):\n    '''\n    Write a function to lower case a string. Return the string with no spaces removed.\n    '''\n    text = re.sub(r'\\S+', '', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function to remove stopwords from a string. Return the string with no stopwords removed.\n    '''\n    text = remove_space(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    return text\ndef lemmatize_word(text):\n    '''\n    Write a function to lemmatize a word. Return the word with no spaces removed.\n    '''\n    text = remove_space(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    text = remove_punctuation(text)\n    tex"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return find_substring(text,pattern,0,len(text)-1)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index = 0\n    pattern = pattern.lower()\n    while index < len(text):\n        if re.search(pattern,text[index:index+len(pattern)]):\n            return index\n        index += 1\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    result = regex.findall(text)\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    start,end,match = 0,0,0\n    while end<len(text):\n        if pattern[end]=='#':\n            start,end = 0,0\n            match+=1\n        elif pattern[end] in text[start:end]:\n            match+=1\n            if match==len(pattern):\n                return end-start+1\n            start = end\n            end += 1\n        else:\n            end+=1\n    return 0\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # regex pattern\n    pattern = pattern.replace(' ', '')\n    pattern = re.compile(pattern,re.IGNORECASE)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_list = pattern.split(\" \")\n    for i in range(0,len(text)):\n        if pattern_list[0] in text[i:]:\n            #print(i)\n            if pattern_list[0] in text[i:] and text[i] == text[i+len(pattern_list[0])]:\n                return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #print(\"text: {}\".format(text))\n    #print(\"pattern: {}\".format(pattern))\n    result = re.findall(pattern,text)\n    if not result:\n        return None\n    else:\n        return result\n        #print(\"result: {}\".format(result))\n        #return \"There is no match\"\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    l = len(pattern)\n    pos = 0\n    for i in range(len(text)):\n        if pattern[0] in text[i:i+l]:\n            pos = text.find(pattern[0],i) + len(pattern[0]) + pos\n        else:\n            pos = None\n            break\n    return pos\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub_strs = re.findall(pattern,text)\n    for sub_str in sub_strs:\n        if sub_str in text:\n            return sub_str\n    return None\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return True\n    if len(nums) == 2:\n        if nums[0] % 2 == 1:\n            return False\n        if nums[1] % 2 == 1:\n            return False\n        return True\n    odd_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] % 2!= 0:\n            if odd_index == len(nums) - 1:\n                return False\n            odd_index = odd_index + 1\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return any([n%2==1 for n in nums])\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    index = 0\n    # check if all elements are odd\n    while index < len(nums):\n        if nums[index] % 2!= 0:\n            return False\n        index += 1\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #TODO: Write a python function to check whether every odd index contains odd numbers of a given list.\n    #TODO: Write a python function to check whether every even index contains even numbers of a given list.\n    #TODO: Write a python function to check whether every odd index contains odd numbers of a given list.\n    #TODO: Write a python function to check whether every even index contains even numbers of a given list.\n    #TODO: Write a python function to check whether every odd index contains odd numbers of a given list.\n    #TODO: Write a python function to check whether every even index contains even numbers of a given list.\n    #TODO: Write a python function to check whether every odd index contains odd numbers of a given list.\n    #TODO: Write a python function to check whether every even index contains even numbers of a given list.\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num%2==1 for num in nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # complexity: O(n)\n    odd_list = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_list.append(i)\n    print(odd_list)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = False\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            result = True\n        else:\n            return result\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char in \"aeiou\":\n            if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\":\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_dic = {'a', 'e', 'i', 'o', 'u'}\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for letter in test_str:\n        if letter.lower() in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    def count_vowels_helper(str):\n        # n=0\n        # for i in str:\n        #     if i in 'aeiouAEIOU':\n        #         n+=1\n        # return n\n        l=[]\n        if type(str)!= str:\n            raise TypeError('str needs to be a string')\n        for i in str:\n            if i in 'aeiouAEIOU':\n                l.append(i)\n        return l.count(i)\n    def count_vowels_better(str):\n        #n=0\n        #for i in str:\n        #    if i in 'aeiouAEIOU':\n        #        n+=1\n        #return n\n        l=[]\n        if type(str)!= str:\n            raise TypeError('str needs to be a string')\n        for i in str:\n            if i in 'aeiouAEIOU':\n                l.append(i)\n        return len(l)\n    if type(test_str) == str:\n        return count_vowels_helper(test_str)\n    else:\n        return count_vowels_better(test_str)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Define a variable, count, that accepts the string, and checks if it is a string.\n    # If it is not, it returns the error message.\n    if type(test_str)!= str:\n        return \"Invalid string.\"\n    else:\n        vowels = ['a','e','i','o','u']\n        vowels_count = 0\n        for i in range(len(test_str)):\n            if test_str[i] in vowels:\n                vowels_count += 1\n        return \"Number of vowels: \" + str(vowels_count)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    counter = 0\n    vowel_str = 'aeiou'\n    for char in test_str:\n        if char in vowel_str:\n            counter += 1\n    return counter\n    \n    \nprint(count_vowels(\"Jeeves\")"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    char_count = {}\n    vowels = 'aeiouAEIOU'\n    for letter in test_str:\n        if letter in vowels:\n            char_count[letter] = char_count.get(letter, 0) + 1\n    return char_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n    for i in test_str:\n        if i in \"aeiou\":\n            if \"a\" <= i <= \"z\":\n                count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in test_str:\n        if i.lower() in 'aeiou':\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count=0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiouAEIOU':\n            if test_str[i-1] in 'aeiouAEIOU':\n                if test_str[i+1] in 'aeiouAEIOU':\n                    if test_str[i+2] in 'aeiouAEIOU':\n                        if test_str[i-2] in 'aeiouAEIOU':\n                            count+=1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if(arr[i]!=arr[i]):\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in arr:\n        if i not in res:\n            res = res + i\n    return res\n    \nprint(find_sum([1,1,1,2,3,3,4,4,5])"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr)==0:\n        return 0\n    else:\n        return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total=0\n    for i in range(len(arr)):\n        if arr[i]!=arr[i]:\n            total+=arr[i]\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for x in arr:\n        if x!= total:\n            total = x\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + find_sum(arr[1:])\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    def non_repeated(arr):\n        '''\n        An auxiliary function that returns the sum of elements with i = 0 to len(arr) - 1 \n        where i is the index of the element\n        '''\n        sum = 0\n        for i in range(len(arr)):\n            if arr[i]!= arr[i-1]:\n                sum += arr[i]\n        return sum\n    def sum_non_repeated(arr):\n        '''\n        An auxiliary function that returns the sum of elements in arr \n        where the index i is the index of the element.\n        '''\n        if len(arr) == 1:\n            return arr[0]\n        return arr[0] + sum_non_repeated(arr[1:])\n    return non_repeated(arr) + sum_non_repeated(arr)"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s=sum(set(arr))\n    return s\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(map(list, groupby(list1, lambda x: (x, x+1))))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    for index, element in enumerate(list1):\n        if index > 0:\n            if list1[index-1] == element:\n                output.append([element, element])\n            else:\n                output.append([element, element])\n                output.append([element, element])\n        else:\n            output.append([element])\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # code here\n    # create sub lists from input\n    list_of_list = []\n    sub_list = []\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return ''.join([list(x) for x in groupby(list1)])\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    numbers = [str(i) for i in list1]\n    group_by = groupby(numbers, key=lambda x:x[0])\n    for group in group_by:\n        if len(group) < 2:\n            continue\n        for number in group:\n            if len(result) == 0:\n                result.append([number])\n            else:\n                current = []\n                current.append(number)\n                for item in result:\n                    if item!= [number]:\n                        item.append(number)\n                result.append(current)\n        return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l = len(list1)\n    l2 = l - 1\n    l3 = l - 2\n    e = list1.count('a')\n    t1 = list1.count('b')\n    t2 = list1.count('c')\n    t3 = list1.count('d')\n    for i in range(l2,l):\n        if list1[i] == 'a':\n            list1[i-l3+1] = list1[i-l3] + 'b'\n            list1[i-l2+1] = list1[i-l2] + 'c'\n            list1[i-l3+1] = list1[i-l3] + 'd'\n            list1[i-l2+1] = list1[i-l2] + 'e'\n            list1[i-l3+1] = list1[i-l3] + 'f'\n            continue\n        if list1[i] == 'b':\n            list1[i-l2+1] = list1[i-l2] + 'a'\n            list1[i-l3+1] = list1[i-l3] + 'b'\n            list1[i-l2+1] = list1[i-l2] + 'c'\n            list1[i-l3+1] = list1[i-l3] + 'd'\n            list1[i-l2+1] = list1[i-l2] + 'e'\n            list1[i-l3+1] = list1[i-l3] + 'f'\n            continue\n        if list1[i] == 'c':\n            list1[i-l2+1] = list1[i-l2] + 'a'\n            list1[i-l3+1] = list1[i-l3] + 'b'\n            list1[i-l2+1] = list1[i-l2] + 'd'\n            list1[i-l3+1] = list1[i-l3] + 'e'\n            list1[i-l2+1] = list1[i-l2] + 'f'\n            continue\n        if list1[i] == 'd':\n            list1[i-l3+1] = list1[i-l3] + 'a'\n            list1[i-l2+1] = list1[i-l2] + 'b'\n            list1[i-l3+1] = list1[i-l3] + 'e'\n            list1[i-l2+1] = list1[i-l2] + 'f'\n            continue\n        if list1[i] == 'e':\n            list1[i-l3+1] = list1[i-l3] + 'a'\n            list1[i-l2+1] = list1[i-l2] + 'b'\n            list1[i-l3+1] = list1[i-l3] + 'c'\n            list1[i-l2+1] = list1[i-l2] + 'd'\n            list1[i-l3+1] = list1[i-l3] + 'f'\n            continue\n        if list1[i] == 'f':\n            list1[i-l3+1] = list1[i-l3] + 'a'\n            list1[i-l2+1] = list1[i-l2] + 'b'\n            list1[i-l3+1] = list1[i-l3] + 'c'\n            list1[i-l2+1] = list1[i-l2] + 'd'\n            list1[i-l3+1] = list1[i-l3] + 'e'\n            continue\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    items_num = len(list1)\n    pack_sublist_1 = []\n    for item in list1:\n        if item in pack_sublist_1:\n            continue\n        else:\n            pack_sublist_1.append(item)\n    \n    for i in range(1, items_num):\n        while len(pack_sublist_1) > 0 and (pack_sublist_1[-1] == pack_sublist_1[-2]):\n            pack_sublist_1.pop(-1)\n        pack_sublist_1.append(pack_sublist_1[-1])\n        \n    return pack_sublist_1\n    \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    i = 0\n    sublists = []\n    while i < len(list1):\n        sublists.append([])\n        for j in range(i,len(list1)):\n            if list1[i] == list1[j]:\n                i = j\n                sublists[-1].append(list1[j])\n        i += 1\n    return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_sublist = list(list1)\n    for item in list1:\n        if item in list1_sublist:\n            list1_sublist.remove(item)\n    return list(set(list1_sublist))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    \n    for _ in range(0,len(list1)):\n        if list1[_]!= list1[_][0]:\n            for _,group in groupby(list1,lambda x: x[_]):\n                for k,group in group:\n                    list1[k].append(x[1])\n                    if len(list1) > 1:\n                        break\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #write your code here\n    if len(list1) == 0:\n        return {}\n    return {tuple(list1):list1.count(tuple(list1))}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    l = 0\n    for i in list1:\n        t = tuple(i)\n        d[t] = d.get(t, 0) + 1\n        l = max(l, len(t))\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new_dict = {}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counter = {}\n    for element in list1:\n        if element in counter:\n            counter[element] += 1\n        else:\n            counter[element] = 1\n    return counter\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    import collections\n    count = collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique = {}\n    if list1 is None:\n        return {}\n    \n    list_tuple = list(tuple(list1))\n    \n    for i in list_tuple:\n        if i not in unique:\n            unique[i] = 1\n        else:\n            unique[i] += 1\n    \n    return unique\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    tuple_list = []\n    \n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n            tuple_list.append((i, 1))\n        else:\n            tuple_list.append((i, 0))\n    \n    return dict(tuple_list)\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Convert each list to a tuple\n    list1 = tuple(list1)\n    #Convert each list to a dictionary\n    list1 = dict(list1)\n    #Convert each list to a set\n    list1 = set(list1)\n    #Count the number of lists\n    list1 = len(list1)\n    #Return the number of lists as a dictionary\n    return list1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # TODO: Replace this with your code\n    ans = {}\n    for i in range(len(list1)):\n        if list1[i] in ans.keys():\n            ans[list1[i]] += 1\n        else:\n            ans[list1[i]] = 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            if list1[x][y] not in d:\n                d[list1[x][y]] = 1\n            else:\n                d[list1[x][y]] += 1\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    i = 0\n    #Loop through each list\n    while i < len(test_list):\n        #Create a list of possible sums to be returned\n        possible_sums = []\n        #Create a list of tuples that are the combination of the given list\n        comb_tuples = combinations(test_list, i)\n        for comb in comb_tuples:\n            #Remove tuples from the list \n            for n in comb:\n                test_list.remove(n)\n        #Add the resulting tuples to the list\n        possible_sums.append(tuple(test_list))\n        #Loop through the list and add the combinations to the list\n        for n in possible_sums:\n            i = i+1\n        #Return the list\n        return possible_sums\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    result = []\n    \n    for i in test_list:\n        for j in test_list:\n            comb = tuple(sorted(i + j))\n            result.append(comb)\n    \n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,len(test_list)))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [combination for combination in combinations(test_list,2) if sum(list(combination))==sum(test_list)]\n    \ndef test():\n    test_list=[2, 4, 6, 8, 10]\n    assert find_combinations(test_list)==[(2,2), (4,4), (6,6), (8,8), (10,10)]\n    \ndef find_remainder(test_list):\n    '''\n    Write a function to find the remainder of a set of numbers. https://www.geeksforgeeks.org/find-the-remainder-of-a-set-of-numbers/\n    '''\n    return sum([i for i in test_list if i%2==0])\n    \ndef test_remainder():\n    test_list=[4, 5, 2, 7, 8, 12, 5, 3, 6]\n    assert find_remainder(test_list)==0\n    \ndef find_sum_of_tuples(test_list):\n    '''\n    Write a function to find the sum of all the combinations of tuples in the given list.\n    https://www.geeksforgeeks.org/find-the-sum-of-all-the-combinations-of-tuples-in-the-list/\n    '''\n    return sum([sum(i) for i in combinations(test_list,2)])\n    \ndef test_sum_of_tuples():\n    test_list=[2, 4, 6, 8, 10]\n    assert find_sum_of_tuples(test_list)==10\n    \ndef find_sum_of_tuples_with_tuples(test_list):\n    '''\n    Write a function to find the sum of all the combinations of tuples with the given tuples.\n    https://www.geeksforgeeks.org/find-the-sum-of-all-the-combinations-of-tuples-with-tuples-in-the-list/\n    '''\n    return sum([sum(i) for i in combinations(test_list,2)])\n    \ndef test_sum_of_tuples_with_tuples():\n    test_list=[2, 4, 6, 8, 10]\n    assert find_sum_of_tuples_with_tuples(test_list)==10\n    \ndef find_max_and_min_of_tuples(test_list):\n    '''\n    Write a function to find the maximum and minimum of all the combinations of tuples in the given list.\n    https://www.geeksforgeeks.org/find-the-maximum-and-minimum-of-all-the-combinations-of-tuples-in-the-list/\n    '''\n    return max(sum(i) for i in combinations(test_list,2))+min(sum(i) for i in combinations(test_list,2))\n    \ndef test_max_and_min_of_tuples():\n    test_list=[2, 4, 6, 8, 10]\n    assert find_max_and_min_of_tuples(test_list)==5\n    \ndef find_sum_of_numbers(test_list):\n    '''\n    Write a function to find the sum of all the numbers in the given list.\n    https://www.geeksforgeeks.org/find-the-sum-of-all-the-numbers-in-the-list/\n    '''\n    return sum([i for i in test_list])\n    \ndef test_sum_of_numbers():\n    test_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 20, 22, 24, 25, 26]\n    assert find_sum_of_numbers(test_list)==25\n    \ndef find_sum_of_numbers_with_tuples(test_list):\n    '''\n    Write a function to find the sum of all the numbers in the given list.\n    https://www.geeksforgeeks.org/find-the-sum-of-all-the-numbers-in-the-list-with-tuples/\n    '''\n    return sum([sum(i) for i in combinations(test_list,2)])\n    \ndef test_sum_of_numbers_with_tuples():\n    test_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 20, 22, 24, 25, 26]\n    assert find_sum_of_numbers_with_tuples(test_list)==25\n    \ndef find_sum_of_numbers_with_tuples_with_tuples(test_list):\n    '''\n    Write a function to find the sum of all the numbers in the given list.\n    https://www.geeksforgeeks.org/find-the-sum-of-all-the-numbers-in-the-list-with-tuples-with-tuples-in-the-list-and-tuples/\n    '''\n    return sum([sum(i) for i in combinations(test_list,2)])\n    \ndef test_sum_of_numbers_with_tuples_with_tuples():\n    test_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 20, 22, 24, 25, 26]\n    assert find_sum_of_numbers_with_tuples_with_tuples(test_list)==25\n    \ndef find_max_and_min_of_numbers(test_list):\n    '''\n    Write a function to find the maximum and minimum of all the numbers in the given list.\n    https://www.geeksforgeeks.org/find-the-maximum-and-minimum-of-all-the-numbers-in-the-list/\n    '''\n    return max(sum(i) for i in combinations(test_list,2))+min(sum(i) for i in combinations(test_list,2))\n    \ndef test_max_and_min_of_numbers():\n    test_list=[2, 4, 6, 8, 10]\n    assert find_max_and_min_of_numbers(test_list)==5\n    \ndef find_sum_of_numbers_numbers(test_list):\n    '''\n    Write a function to find the sum of all the numbers in the given list.\n    https://www.geeksforgeeks.org/find-the-sum-of-all-the-numbers-in-the-list-numbers-in-the-list/\n    '''\n    return sum([i for i in test_list])\n    \ndef test_sum_of_numbers_numbers():\n    test_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 20, 22, 24, 25, 26]\n    assert find_sum_of_numbers_numbers(test_list)==25\n    \ndef find_sum_of_numbers_numbers_with_tuples(test_list):\n    '''\n    Write a function to find the sum of all the numbers in the given list.\n    https://www.geeksforgeeks.org/find-the-sum-of-all-the-numbers-in-the-list-numbers-in-the-list-with-tuples/\n    '''\n    return sum([i[0] for i in combinations(test_list,2)])\n    \ndef test_sum_of_numbers_numbers_with_tuples():\n    test_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 20, 22, 24, 25, 26]\n    assert find_sum_of_numbers_numbers_with_tuples(test_list)==25\n    \ndef find_sum_of_numbers_numbers_with_tuples_with_tuples(test_list):\n    '''\n    Write a function to find the sum of all the numbers in the given list.\n    https://www.geeksforgeeks.org/find-the-sum-of-all-the-numbers-i"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for n in range(1,len(test_list)+1):\n        for comb in combinations(test_list,n):\n            if sum(comb)==sum(test_list):\n                yield comb\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    combo_list = []\n    for i in range(len(test_list) + 1):\n        for j in range(i + 1):\n            combo_list.append((i, j, test_list[j]))\n            \n    print('the combinations of', len(combo_list),'sums are:', combo_list)\n    return combo_list\n    \ndef find_permutations(test_list):\n    '''\n    Write a function to find the permutations of the given list.\n    \n    '''\n    # Your code here\n    permutations_list = []\n    for i in range(len(test_list) + 1):\n        permutations_list.append(test_list[:i]+test_list[i+1:])\n        \n    print('the permutations of', len(permutations_list), 'are:', permutations_list)\n    return permutations_list\n    \ndef first_permutation(test_list):\n    '''\n    This function takes a list as an argument and returns the list that makes the first permutation of the given list.\n    \n    '''\n    # Your code here\n    first_permutation = []\n    i = 0\n    while i < len(test_list) - 1:\n        #print('i = ', i)\n        #print('test_list = ', test_list)\n        first_permutation.append(test_list[i])\n        first_permutation.append(test_list[i])\n        \n        i += 1\n    \n    print('the first permutation is:', first_permutation)\n    return first_permutation\n    \ndef second_permutation(test_list):\n    '''\n    This function takes a list as an argument and returns the list that makes the second permutation of the given list.\n    \n    '''\n    # Your code here\n    second_permutation = []\n    i = 0\n    while i < len(test_list) - 1:\n        #print('i = ', i)\n        #print('test_list = ', test_list)\n        second_permutation.append(test_list[i])\n        second_permutation.append(test_list[i])\n        i += 2\n        \n    print('the second permutation is:', second_permutation)\n    return second_permutation\n    \ndef third_permutation(test_list):\n    '''\n    This function takes a list as an argument and returns the list that makes the third permutation of the given list.\n    \n    '''\n    # Your code here\n    third_permutation = []\n    i = 0\n    while i < len(test_list) - 1:\n        #print('i = ', i)\n        #print('test_list = ', test_list)\n        third_permutation.append(test_list[i])\n        third_permutation.append(test_list[i])\n        third_permutation.append(test_list[i])\n        i += 3\n        \n    print('the third permutation is:', third_permutation)\n    return third_permutation\n    \ndef generate_combinations(test_list):\n    '''\n    This function takes a list as an argument and returns the combinations of sums with tuples in the given tuple list.\n    \n    '''\n    # Your code here\n    combination_list = []\n    combo_list = combinations(test_list, 2)\n    for i in range(len(combo_list)):\n        print(i)\n        print(combo_list[i])\n        combination_list.append(combo_list[i][0])\n        combination_list.append(combo_list[i][1])\n    \n    print('the combinations of', len(combination_list),'sums are:', combination_list)\n    return combination_list\n    \ndef is_valid(test_list):\n    '''\n    This function checks whether the given list is valid or not.\n    \n    '''\n    # Your code here\n    combo_list = combinations(test_list, 2)\n    valid_list = []\n    for i in range(len(combo_list)):\n        if test_list[i] in combo_list[i]:\n            valid_list.append(combo_list[i])\n    \n    print('the valid list is:', valid_list)\n    return valid_list\n    \ndef main():\n    '''\n    This program is to find the permutations of the numbers in the list.\n    \n    '''\n    #print('starting program')\n    test_list = [1,2,3,4,5]\n    print('the length of the list is:', len(test_list))\n    print('the first permutation is:', first_permutation(test_list))\n    print('the second permutation is:', second_permutation(test_list))\n    print('the third permutation is:', third_permutation(test_list))\n    print('the permutations of the numbers in the list are:', generate_combinations(test_list))\n    \n    test_list = [1,2,3,4,5,6,7,8,9]\n    print('the length of the list is:', len(test_list))\n    print('the first permutation is:', first_permutation(test_list))\n    print('the second permutation is:', second_permutation(test_list))\n    print('the third permutation is:', third_permutation(test_list))\n    print('the permutations of the numbers in the list are:', generate_combinations(test_list))\n    \n    print('The first permutation is:', first_permutation(test_list))\n    print('The second permutation is:', second_permutation(test_list))\n    print('The third permutation is:', third_permutation(test_list))\n    print('The permutations of the numbers in the list are:', generate_combinations(test_list))\n    \n    print('starting program')\n    test_list = [1,2,3,4,5,6,7,8,9,10,11]\n    print('the length of the list is:', len(test_list))\n    print('the first permutation is:', first_permutation(test_list))\n    print('the second permutation is:', second_permutation(test_list))\n    print('the third permutation is:', third_permutation(test_list))\n    print('the permutations of the numbers in the list are:', generate_combinations(test_list))\n    \n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,20"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if type(test_list) is not tuple:\n        raise TypeError('tuple expected')\n    else:\n        return_list = []\n        for i in range(0, len(test_list)):\n            for j in range(i+1, len(test_list)):\n                return_list.append(tuple(test_list[i]+test_list[j]))\n        return return_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    temp_list = []\n    for i in range(len(test_list)):\n        temp_list.append(test_list[i][0] + test_list[i][1])\n    temp_list = tuple(temp_list)\n    result = []\n    for i in range(1, len(test_list) + 1):\n        result.append(temp_list)\n        for j in range(i):\n            temp_list = result[j][0] + temp_list[1] + result[j][1]\n        temp_list = tuple(temp_list)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 0 \n    for i in range(1,n+1) : \n        if (n % i == 0) : \n            c += 1\n    if (c % 2 == 0) : \n        return True \n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n % 2 == 0 : \n        return 2\n    else : \n        return count_divisors(n - 1) + 1\n    \ndef check_divisors(n) : \n    '''\n    Write a python function to check whether an integer is divisible by other numbers in a given range.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            return False\n    return True\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether an integer is prime or not. \n    '''\n    if n == 1 : \n        return False\n    elif n == 2 or n == 3 : \n        return True\n    elif n % 2 == 0 or n % 3 == 0 : \n        return False\n    \n    for i in range(5, int(math.sqrt(n)) + 1, 2) : \n        if n % i == 0 : \n            return False\n    return True\n    \ndef is_prime_digit(digit) : \n    '''\n    Write a python function to check whether an integer is a prime number. \n    '''\n    if digit == 0 : \n        return False\n    elif digit == 1 : \n        return True\n    elif digit == 2 : \n        return True\n    elif digit == 3 : \n        return False\n    else : \n        for i in range(5, int(math.sqrt(digit)) + 1, 2) : \n            if digit % i == 0 : \n                return False\n        return True\n    \ndef divisible_by_two(n) : \n    '''\n    Write a python function to check whether an integer is divisible by 2. \n    '''\n    if n == 2 : \n        return True\n    elif n == 3 : \n        return False\n    elif n % 2 == 0 : \n        return True\n    elif n % 3 == 0 : \n        return False\n    \ndef is_triangular_number(n) : \n    '''\n    Write a python function to check whether a number is triangular or not. \n    '''\n    if n == 1 : \n        return False\n    elif n == 2 : \n        return True\n    elif n % 2 == 0 : \n        return True\n    \ndef is_odd(n) : \n    '''\n    Write a python function to check whether an integer is odd or not. \n    '''\n    if n == 0 or n == 1 : \n        return False\n    elif n == 2 or n == 3 : \n        return True\n    elif n % 2 == 0 : \n        return True\n    \ndef is_positive(n) : \n    '''\n    Write a python function to check whether an integer is positive or not. \n    '''\n    if n == 0 or n == 1 : \n        return False\n    elif n >= 0 : \n        return True\n    elif n == 2 or n == 3 : \n        return False\n    elif n % 2 == 0 : \n        return True\n    \ndef is_prime_factor(n) : \n    '''\n    Write a python function to check whether the number is prime or not. \n    '''\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            return False\n    return True\n    \ndef is_n_prime_factor(n) : \n    '''\n    Write a python function to check whether the number is prime or not. \n    '''\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            return False\n    return True\n    \ndef is_prime_factor_digit(n) : \n    '''\n    Write a python function to check whether the number is prime or not. \n    '''\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            return False\n    return True\n    \ndef is_prime_factor_digits(n) : \n    '''\n    Write a python function to check whether the number is prime or not. \n    '''\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            return False\n    return True\n    \ndef is_divisible_by_three(n) : \n    '''\n    Write a python function to check whether an integer is divisible by 3. \n    '''\n    if n == 3 : \n        return True\n    elif n == 4 : \n        return False\n    elif n % 3 == 0 : \n        return True\n    else : \n        for i in range(4, n, 2) : \n            if n % i == 0 : \n                return False\n        return True\n    \ndef is_divisible_by_two(n) : \n    '''\n    Write a python function to check whether an integer is divisible by 2. \n    '''\n    if n == 2 : \n        return True\n    elif n == 3 : \n        return False\n    elif n % 2 == 0 : \n        return True\n    else : \n        for i in range(3, n, 2) : \n            if n % i == 0 : \n                return False\n        return True\n    \ndef is_square(n) : \n    '''\n    Write a python function to check whether an integer is square or not. \n    '''\n    if n == 0 : \n        return False\n    elif n == 1 : \n        return True\n    elif n % 2 == 0 : \n        return True\n    else : \n        for i in range(3, math.sqrt(n) + 1, 2) : \n            if n % i == 0 : \n                return False\n        return True\n    \ndef is_sum_of_primes(n) : \n    '''\n    Write a python function to check whether an integer is sum of primes or not. \n    '''\n    if is_prime(n) and n < 50000 and n % 5 == 0 : \n        return True\n    elif is_prime(n) and n < 60000 and n % 5 == 0 : \n        return True\n    elif is_prime(n) and n < 70000 and n % 5 == 0 : \n        return True\n    elif is_prime(n) and n < 80000 and n % 5 == 0 : \n        return True\n    elif is_prime(n) and n < 90000 and n % 5 == 0 : \n        return True\n    elif is_prime(n) and n < 100000 and n % 5 == 0 : \n        return True\n    else : \n        for i in range(2, int(math.sqrt(n)) + 1) : \n            if is_prime(n) and n % i == 0 : \n                return False\n        return True\n    \ndef is_product_of_primes(n) : \n    '''\n    Write a python function to check whether an integer is product of primes or not. \n    '''\n    if is_prime_factor(n) and is_divisible_by_two(n) and is_divisible_by_three(n) and is_divisible_by_two_or_three(n) and is_divisible_by_two_or_three_or_digits(n) and is_divisible_by_two_or_three_or_digits_and_prime_factor(n) and is_divisible_by_two_or_three_or_digits_and_prime_factor_digit(n) and is_divisible_by_two_or_three_or_digits_and_prime_factor_digit_digit(n) and is_divisible_by_two_or_three_or_digits_and_prime_factor_digit_digit_digit(n) and is_divisible_by_two_or_three_o"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)+1), 2):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    s = 1\n    for i in range(2, int(math.sqrt(n)+1)) :\n        if n % i == 0 :\n            s += 2\n            if n // i == i :\n                s += 1\n    return s == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) : \n        if n % i == 0 : \n            count += 1\n    if count == 0 : \n        return \"No\"\n    else : \n        return \"Yes\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    i = 2\n    while (i <= math.sqrt(n)) :\n        if n % i == 0 :\n            divisors += 1\n        i += 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))) :\n        if n % i == 0 :\n            divisors.append(i)\n    if len(divisors) == 1 :\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    if n % 2 == 0 : \n        return (n/2) + 1\n    else : \n        return 0 \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,int(math.sqrt(n)+1)) :\n        if (n % i == 0) and (i * i!= n) :\n            divisors += 1\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            divisors.append(i)\n    \n    return len(divisors) \n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) < 2:\n        return 0\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n        if i % 2 == 1:\n            sum -= arr[i]\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(0, len(arr), 2):\n        result += arr[i]\n    return result\n    \ndef even_length_sum(arr):\n    '''\n    Write a python function to find the sum of all even length subarrays. https://www.geeksforgeeks.org/sum-of-all-even-length-subarrays/\n    '''\n    result = 0\n    for i in range(0, len(arr), 2):\n        result += arr[i]\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2!= 0:\n            sum = sum + arr[i]\n        else:\n            continue\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_length = 0\n    odd_length = 0\n    if len(arr) == 0:\n        return 0\n    else:\n        for i in arr:\n            if i % 2!= 0:\n                even_length += i\n            else:\n                odd_length += i\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    odd_length = arr[0]\n    sum_odd = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 1:\n            sum_odd += odd_length\n            odd_length = 0\n        else:\n            odd_length += arr[i]\n    sum_odd += odd_length\n    return sum_odd\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    # Converting all elements in array to sum with index as 0\n    sum_of_all_odd_length_subarrays = sum(range(0, len(arr), 2))\n    # print(sum_of_all_odd_length_subarrays)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_arr = []\n    for i in range(0, len(arr)):\n        if (i % 2)!= 0:\n            odd_length_arr.append(arr[i])\n    return sum(odd_length_arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) % 2 == 0:\n        return odd_length_sum(arr[:-1]) + arr[-1]\n    else:\n        return odd_length_sum(arr[:-1]) + odd_length_sum(arr[1:])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr = sorted(arr)\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    length = len(arr)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def hsv_to_rgb(h, s, v):\n        '''\n        Convert hsv color to rgb color.\n        '''\n        # convert hsv to rgb\n        r = int((h*6.)%6.)\n        g = int((h*6.-r*2.)%6.)\n        b = int((v*6.)%6.)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #assert (r >= 0 and r <= 1) and (g >= 0 and g <= 1) and (b >= 0 and b <= 1)\n    #assert (0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_r = 255.0\n    max_g = 255.0\n    max_b = 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # store input values\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = (r + g + b) / 3\n    s = 0.7 * r - 0.3 * g + 0.5 * b\n    v = 0.3 * r + 0.7 * g - 0.5 * b\n    return h,s,v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    return [(r * 255)/(r + g + b), (r * 255)/(r + g), (r * 255)/(r + b), 1]\n    \ndef get_rgb_hsv_colors(r, g, b):\n    '''\n    Get RGB and H-S and V-S color of given RGB color value.\n    '''\n    if r <= 0.0 or g <= 0.0 or b <= 0.0:\n        return (255, 255, 255)\n    if r >= 255.0:\n        r = 255.0\n    if g >= 255.0:\n        g = 255.0\n    if b >= 255.0:\n        b = 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert to tuple\n    rgb_to_tuple = (r, g, b)\n    \n    # Create HSV colorspace\n    # Create color space to represent color as in the required format\n    # Create an array of 16HSV values in the range of 0.0 to 1.0\n    hsv_values = cv2.split(cv2.cvtColor(img, cv2.COLOR_RGB2HSV))[2]\n    \n    # Get color values as array\n    hsv = np.array(hsv_values)\n    \n    # Get min and max\n    low_color = np.array([np.min(hsv[:,:,0]), np.min(hsv[:,:,1]), np.min(hsv[:,:,2])])\n    high_color = np.array([np.max(hsv[:,:,0]), np.max(hsv[:,:,1]), np.max(hsv[:,:,2])])\n    \n    # Create new color values from given range\n    new_color = np.array([(low_color + high_color)/2.0, np.zeros(3), np.zeros(3)])\n    \n    # Concatenate new color values with given color values\n    new_color[:, 0] = hsv[:,:,0] - new_color[:,0]\n    new_color[:, 1] = hsv[:,:,1] - new_color[:,1]\n    new_color[:, 2] = hsv[:,:,2] - new_color[:,2]\n    \n    # Create new color array\n    new_color = np.concatenate((low_color, high_color, new_color), axis=1)\n    \n    # Create new color values in the range of 0.0 to 1.0\n    new_color = (new_color * 255).astype('uint8')\n    \n    # Return new color values\n    return cv2.cvtColor(new_color, cv2.COLOR_HSV2BGR)\n    \n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Convert hsv color to rgb color.\n    '''\n    # Create an array of 16HSV values in the range of 0.0 to 1.0\n    hsv_values = cv2.split(cv2.cvtColor(img, cv2.COLOR_HSV2RGB))[2]\n    \n    # Get color values as array\n    hsv = np.array(hsv_values)\n    \n    # Get min and max\n    low_color = np.array([np.min(hsv[:,:,0]), np.min(hsv[:,:,1]), np.min(hsv[:,:,2])])\n    high_color = np.array([np.max(hsv[:,:,0]), np.max(hsv[:,:,1]), np.max(hsv[:,:,2])])\n    \n    # Create new color values from given range\n    rgb = np.array([h - low_color[0], s - low_color[1], v - low_color[2]])\n    \n    # Concatenate new color values with given color values\n    rgb = np.concatenate((rgb, np.zeros(3), np.zeros(3)), axis=1)\n    \n    # Create new color array\n    rgb = np.concatenate((rgb, np.zeros(3), np.zeros(3)), axis=1)\n    \n    # Create new color values in the range of 0.0 to 1.0\n    rgb = (rgb * 255).astype('uint8')\n    \n    # Return new color values\n    return cv2.cvtColor(rgb, cv2.COLOR_BGR2RGB)\n    \n    \ndef create_mask(img, mask, color):\n    '''\n    Create a mask from the given image and the given color.\n    '''\n    masked_img = img.copy()\n    masked_img[:, :, color] = mask\n    masked_img = np.clip(masked_img, 0, 255).astype('uint8')\n    \n    return masked_img\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # your code goes here\n    # add your code here\n    def get_data():\n        return [r, g, b]\n    # your code goes here\n    # add your code here\n    def get_color():\n        r_r, g_g, b_b = get_data()\n        # your code goes here\n        if (r_r <= 0 and g_g <= 0 and b_b <= 0):\n            return 0,0,0\n        r_h = 60 * ((r_r / 255) * (180/255))\n        g_h = 60 * ((g_g / 255) * (180/255))\n        b_h = 60 * ((b_b / 255) * (180/255))\n        return r_h, g_h, b_h\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = 0\n    \n    if r > 255:\n        r = 255\n        g = 0\n        b = 0\n        h = 1\n        s = 0\n        v = 0\n    elif r < 0:\n        r = 0\n        g = 255\n        b = 0\n        h = 0\n        s = 1\n        v = 0\n    elif g > 255:\n        g = 255\n        b = 0\n        r = 0\n        s = 1\n        h = 0\n        v = 0\n    elif g < 0:\n        g = 0\n        b = 255\n        r = 0\n        s = 1\n        h = 0\n        v = 1\n    else:\n        r = round(r * 255)\n        g = round(g * 255)\n        b = round(b * 255)\n        h = round(255 - r - g - b)\n        s = round(255 - r + g + b)\n        v = round(255 * (1 - (r + g + b) / 3))\n    \n    return (h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    c = [(r + g + b) / 3.0]\n    delta = [(b * 2.0) / 100.0]\n    denom = 0.00390625\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_num = list1[-1]\n    even_num = list1[0]\n    prod = even_num*odd_num\n    print(prod)\n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1_2=[]\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            list1_2.append(list1[i])\n        else:\n            pass\n    list1_2.sort()\n    print(list1_2[0])\n    print(list1_2[1])\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    x = list1\n    l = []\n    for i in range(len(x)):\n        if i % 2 == 0:\n            l.append(x[i])\n        else:\n            l.append(x[i]*x[i+1])\n    print(l)\n    return l\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for x in list1:\n        if x%2==0:\n            list1[list1.index(x)]*=2\n        else:\n            list1[list1.index(x)]*=3\n    return list1\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Define variables\n    even_count = 0\n    odd_count = 0\n    # Convert list to list of numbers\n    list2 = []\n    # Loop through elements in list1\n    for element in list1:\n        # If even count == 0, set even count to 1, and set odd count to 0\n        if element % 2 == 0:\n            even_count += 1\n            # Add element to list2\n            list2.append(element)\n        else:\n            odd_count += 1\n    # Return product\n    return list2 * even_count * odd_count\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    n=len(list1)\n    if n%2==0:\n        product=list1[0]*list1[n//2]\n        list1[0]*list1[n//2]\n    else:\n        product=list1[0]*list1[n//2]+list1[n//2]\n    return product\ndef mul_even_odd_second(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    n=len(list1)\n    if n%2==0:\n        product=list1[0]*list1[n//2]\n        list1[0]*list1[n//2]\n    else:\n        product=list1[0]*list1[n//2]+list1[n//2]\n    return product\ndef main():\n    print(\"MUL_EVEN_ODD_SEQ:\")\n    print(mul_even_odd([2,3,4]))\n    print(\"MUL_EVEN_Odd_SEQ:\")\n    print(mul_even_odd([2,3,4,5]))\n    print(\"MUL_EVEN_Odd_SEQ:\")\n    print(mul_even_odd([2,3,4,5,6,7,8,9,10]))\n    print(\"MUL_EVEN_Odd_SEQ:\")\n    print(mul_even_odd([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n    print(\"MUL_EVEN_Odd_SEQ:\")\n    print(mul_even_odd([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\n    print(\"MUL_EVEN_Odd_SEQ:\")\n    print(mul_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n    print(\"MUL_EVEN_Odd_SEQ:\")\n    print(mul_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\n    print(\"MUL_EVEN_Odd_SEQ:\")\n    print(mul_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = []\n    even = []\n    odd = []\n    for x in range(len(list1)):\n        if list1[x]%2 == 0:\n            even.append(list1[x])\n        else:\n            odd.append(list1[x])\n    for i in range(len(even)):\n        if even[i] not in even_odd:\n            even_odd.append(even[i])\n    for i in range(len(odd)):\n        if odd[i] not in odd_odd:\n            odd_odd.append(odd[i])\n    return odd_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    lst = list1[:]\n    count = 0\n    if len(lst)%2 == 0:\n        for i in lst:\n            if i%2 == 0:\n                count += 1\n    else:\n        for i in lst:\n            if i%2 == 1:\n                count += 1\n    return count*2\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # First find the even and odd number.\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    # Now find the product of the even and odd numbers.\n    prod = []\n    for i in range(len(even)):\n        if even[i]%2 == 0:\n            prod.append(even[i])\n        else:\n            prod.append(odd[i])\n    # Now return the product.\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    product = 0\n    for num in list1:\n        if num % 2 == 0:\n            product = product * num\n        else:\n            product = product * num + 1\n    print(product)\n    return product\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(x) for x in test_str])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = list(test_str)\n    return tuple(int(i) for i in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import numpy as np\n    test = np.array(test_str)\n    if (type(test[0]) == str):\n        return tuple([int(x) for x in test.tolist()])\n    else:\n        return tuple(test)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    t = tuple(test_str)\n    return int(t)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # write your code here\n    return tuple(map(int, test_str.split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    my_tuple = ()\n    for i in range(len(test_str)):\n        my_tuple += (int(test_str[i]),)\n    return my_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if(len(test_str) == 1):\n        return int(test_str)\n    else:\n        return tuple_str_int(test_str[0]) + tuple_str_int(test_str[1])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    num_tuple = ()\n    i = 0\n    for char in test_str:\n        num_tuple += (i, char)\n        i+=1\n    return num_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = ()\n    for i in range(0,len(test_str)):\n        result += (test_str[i],)\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # get the minimum item in the array\n    i = bisect.bisect_left(a, x, lo=0, hi=len(a))\n    # if the last item in the array is less than x, then insert at right place\n    if i < len(a):\n        return i\n    # if the item is less than x, then insert at right place\n    else:\n        return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if a[mid] < x:\n            low = mid + 1\n        elif a[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return high + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    b = bisect.bisect_right(a, x)\n    if b > 0:\n        if a[b-1] == x:\n            return b-1\n        else:\n            return b\n    else:\n        return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Time O(n)\n    # Space O(n)\n    def binarySearch(a, x):\n        '''\n        Inefficient binary search implementation.\n        '''\n        # Find the first value which is larger than x\n        # x is assumed to be sorted\n        left = 0\n        right = len(a) - 1\n        while left <= right:\n            middle = (left + right) // 2\n            if x < a[middle]:\n                right = middle - 1\n            elif x > a[middle]:\n                left = middle + 1\n            else:\n                return middle\n        return -1\n    return binarySearch(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[0] >= x:\n        return 0\n    if a[-1] < x:\n        return len(a)-1\n    i = bisect.bisect_left(a, x, lo = 0, hi = len(a))\n    if i == len(a):\n        return 0\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)-1\n    # find right insertion point\n    while l <= r:\n        m = (l + r)//2\n        # if a is in sorted order\n        if a[m] <= x:\n            # if found, replace it with the left element\n            if a[m] == x:\n                r = m\n            # if not, move left\n            else:\n                l = m+1\n        else:\n            # if not, compare x with the right element\n            if a[m] == x:\n                l = m+1\n            # if found, replace it with the right element\n            else:\n                r = m\n    # if no insertion point found, insert at the end\n    if l == len(a)-1:\n        a.append(x)\n    else:\n        a[l] = x\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i >= len(a):\n        return len(a)\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    p = bisect.bisect_right(a, x, lo=0, hi=n)\n    if p == 0:\n        return 0\n    if p == n:\n        return n\n    if p == n + 1:\n        return n - 1\n    return p - 1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match('\\w+\\w+b\\w+', text) is not None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = r\"[A-Z]+[a-z]+[A-Z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Replace any periods with a period.\n    text = text.replace(\".\",\"\")\n    # Remove any white spaces and letters.\n    text = re.sub(r'\\W+','', text)\n    # Split the string by a space, then by a comma and then by a period.\n    text = re.split(r'[,;\\s]', text)\n    # Convert the string to an array of words.\n    text = [word.lower() for word in text]\n    # Initialize variables.\n    match = []\n    match_list = []\n    # For each word in the array.\n    for word in text:\n        if word.lower() in word_list:\n            match.append(word.lower())\n        # For each word in the list.\n        else:\n            # Check the list for the first occurrence of this word.\n            for word_list in match_list:\n                if word.lower() in word_list:\n                    match_list.append(word)\n                    match.append(word.lower())\n    # If any words were found, display the matching words.\n    if len(match) > 0:\n        print(\"Match: \", match)\n    # If there are no matches, display a message saying the word was not found.\n    elif len(match_list) == 0:\n        print(\"The word was not found!\")\n    # Else, display the word that was not found.\n    else:\n        print(\"The word was not found!\")\n    # Return the matched words.\n    return match\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    # Replace any periods with a period.\n    text = text.replace(\".\",\"\")\n    # Remove any white spaces and letters.\n    text = re.sub(r'\\W+','', text)\n    # Split the string by a space, then by a comma and then by a period.\n    text = re.split(r'[,;\\s]', text)\n    # Convert the string to an array of words.\n    text = [word.lower() for word in text]\n    # Initialize variables.\n    match = []\n    match_list = []\n    # For each word in the array.\n    for word in text:\n        if word.lower() in word_list:\n            match.append(word.lower())\n        # For each word in the list.\n        else:\n            # Check the list for the first occurrence of this word.\n            for word_list in match_list:\n                if word.lower() in word_list:\n                    match_list.append(word)\n                    match.append(word.lower())\n    # If any words were found, display the matching words.\n    if len(match) > 0:\n        print(\"Match: \", match)\n    # If there are no matches, display a message saying the word was not found.\n    elif len(match_list) == 0:\n        print(\"The word was not found!\")\n    # Else, display the word that was not found.\n    else:\n        print(\"The word was not found!\")\n    # Return the matched words.\n    return match\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    # Replace any periods with a period.\n    text = text.replace(\".\",\"\")\n    # Remove any white spaces and letters.\n    text = re.sub(r'\\W+','', text)\n    # Split the string by a space, then by a comma and then by a period.\n    text = re.split(r'[,;\\s]', text)\n    # Convert the string to an array of words.\n    text = [word.lower() for word in text]\n    # Initialize variables.\n    match = []\n    match_list = []\n    # For each word in the array.\n    for word in text:\n        if word.lower() in word_list:\n            match.append(word.lower())\n        # For each word in the list.\n        else:\n            # Check the list for the first occurrence of this word.\n            for word_list in match_list:\n                if word.lower() in word_list:\n                    match_list.append(word)\n                    match.append(word.lower())\n    # If any words were found, display the matching words.\n    if len(match) > 0:\n        print(\"Match: \", match)\n    # If there are no matches, display a message saying the word was not found.\n    elif len(match_list) == 0:\n        print(\"The word was not found!\")\n    # Else, display the word that was not found.\n    else:\n        print(\"The word was not found!\")\n    # Return the matched words.\n    return match\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    # Replace any periods with a period.\n    text = text.replace(\".\",\"\")\n    # Remove any white spaces and letters.\n    text = re.sub(r'\\W+','', text)\n    # Split the string by a space, then by a comma and then by a period.\n    text = re.split(r'[,;\\s]', text)\n    # Convert the string to an array of words.\n    text = [word.lower() for word in text]\n    # Initialize variables.\n    match = []\n    match_list = []\n    # For each word in the array.\n    for word in text:\n        if word.lower() in word_list:\n            match.append(word.lower())\n        # For each word in the list.\n        else:\n            # Check the list for the first occurrence of this word.\n            for word_list in match_list:\n                if word.lower() in word_list:\n                    match_list.append(word)\n                    match.append(word.lower())\n    # If any words were found, display the matching words.\n    if len(match) > 0:\n        print(\"Match: \", match)\n    # If there are no matches, display a message saying the word was not found.\n    elif len(match_list) == 0:\n        print(\"The word was not found!\")\n    # Else, display the word that was not found.\n    else:\n        print(\"The word was not found!\")\n    # Return the matched words.\n    return match\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    # Replace any periods with a period.\n    text = text.replace(\".\",\"\")\n    # Remove any white spaces and letters.\n    text = re.sub(r'\\W+','', text)\n    # Split the string by a space, then by a comma and then by a period.\n    text = re.split(r'[,;\\s]', text)\n    # Convert the string to an array of words.\n    text = [word.lower() for word in text]\n    # Initialize variables.\n    match = []\n    match_list = []\n    # For each word in the array.\n    for word in text:\n        if word.lower() in word_list:\n            match.append(word.lower())\n        # For each word in the list.\n        else:\n            # Check the list for the first occurrence of this word.\n            for word_list in match_list:\n                if word.lower() in word_list:\n                    match_list.append(word)\n                    match.append(word.lower())\n    # If any words were found, display the matching words.\n    if len(match) > 0:\n        print(\"Match: \", match)\n    # If there are no matches, display a message saying the word was not found.\n    elif len(match_list) == 0:\n        print(\"The word was not found!\")\n    # Else, display the word that was not found.\n    else:\n        print(\"The word was not found!\")\n    # Return the matched words.\n    return match\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    # Replace any periods with a period.\n    text = text.replace(\".\",\"\")\n    # Remove any white spaces and letters.\n    text "
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall(r'\\b[Aa][A][Bb]\\b', text)\n    print(match)\n    return len(match)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_3 = re.search(r'a\\w+b', text)\n    if match_3!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = r\"a[ab]?b\"\n    return re.findall(pat, text, flags=re.I)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.findall('a\\s+b', text, re.MULTILINE)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'a(b|c)?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    #verify_pattern = r'\\b((?:[a-z]\\.)+)\\b'\n    #return re.match(verify_pattern, text)\n    #if(not re.match(r'[a-z]\\.', text)):\n        #return False\n    #if re.search(r'[a-z]\\.', text):\n        #return False\n    #if re.search(r'[a-z]\\s', text):\n        #return False\n    #return True\n    \n    if text.startswith('a'):\n        return True\n    elif text.endswith('b'):\n        return True\n    elif re.search('[a-z]', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    elif re.search('[a-z]\\.', text):\n        return True\n    elif re.search('[a-z]\\s', text):\n        return True\n    e"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = '\\[(\\w+)\\s+[a-z]\\w*\\s+(?:(\\w+)'\n    text_re = re.findall(regex, text)\n    for item in text_re:\n        print(item[0], '\\n')\n    print(text.count('a'))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([int(i) for i in test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = []\n    for element in test_list:\n        new_tuple.append(element)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    for element in test_str:\n        new_tuple = new_tuple + (element,)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = list(test_str.split())\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list) > 0:\n        temp = []\n        for i in range(len(test_list)):\n            if test_list[i]!= None:\n                temp.append(test_list[i])\n        return tuple(temp)\n    else:\n        return ()\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in range(len(test_str)):\n        test_list.append(test_str[i])\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_list) is not list:\n        raise TypeError(\"The type of the list is not of list\")\n    elif type(test_str) is not str:\n        raise TypeError(\"The type of the string is not of string\")\n    else:\n        tuple_str = test_list + test_str\n        return tuple(tuple_str.split())\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list) > 0:\n        if test_str in test_list:\n            return tuple(test_list)\n        else:\n            return tuple(test_list + [test_str])\n    else:\n        raise ValueError(\"Tuple is empty\")\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_numbers = []\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            even_numbers.append(nums[i])\n    return even_numbers\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_position = False\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_position = True\n    return even_position\n    \n    \n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            print(nums[i])\n            \n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if nums[index] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    check = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            check += 1\n    if check == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2==0:\n            return True\n    return False\n    "
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2 == 0 and nums[i+1]%2!= 0:\n            return True\n    return False\n    "
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) % 2 == 0:\n        for i in range(len(nums)):\n            if nums[i] % 2 == 0:\n                return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_indices = []\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0 and nums[i + 1] % 2 == 0:\n            even_indices.append(i)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return len([i for i in nums if i % 2 == 0]) == len([i for i in nums if i % 2 == 0])\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    list_tup = []\n    if len(test_tup) == 0:\n        return ()\n    else:\n        for i in range(0, len(test_tup)):\n            for j in range(0, len(test_tup) - i):\n                if test_tup[j] == test_tup[j + 1]:\n                    test_tup[j], test_tup[j + 1] = test_tup[j + 1], test_tup[j]\n                    continue\n                else:\n                    test_tup = tuple(test_tup[:j] + test_tup[j + 1:])\n        return test_tup\n    "
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        new_tup = new_tup + (i,)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            lst.append(item)\n    return lst\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    print(test_tup)\n    test_tup.pop()\n    print(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return_tuple = ()\n    for element in test_tup:\n        if type(element)!= tuple:\n            return_tuple += (element,)\n        else:\n            return_tuple += element\n    return return_tuple\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup_list = []\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tuple_1 = test_tup[1]\n    tuple_2 = test_tup[2]\n    if isinstance(tuple_2,tuple):\n        test_tup = tuple_1\n        tuple_1 = tuple_2\n    elif isinstance(tuple_1,tuple):\n        tuple_2 = tuple_1[0]\n        tuple_1 = tuple_1[1]\n    test_tup[1] = tuple_2\n    test_tup[2] = tuple_1\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    try:\n        tup=tuple(test_tup)\n        tup=tup[1:]\n    except IndexError:\n        tup=(test_tup)\n        tup=tup[1:]\n    return tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if test_tup == ():\n        return\n    # check that a tuple is not empty\n    elif not test_tup[0] == \"\":\n        # return the last item of the tuple\n        # tuple does not contain any elements\n        # so remove all the elements\n        return tuple([t[-1] for t in test_tup])\n    # if a tuple does contain an element, then remove the\n    # first element\n    else:\n        return tuple([t[1] for t in test_tup])\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_tuple(tuple_to_remove):\n        '''\n        Write a function to remove all the elements in a given tuple.\n        '''\n        i = 0\n        new_tuple = []\n        while i < len(tuple_to_remove):\n            if tuple_to_remove[i] is tuple:\n                while tuple_to_remove[i] is tuple:\n                    new_tuple.append(tuple_to_remove.pop(i))\n                    i += 1\n            else:\n                new_tuple.append(tuple_to_remove[i])\n                i += 1\n        return new_tuple\n    try:\n        test_tuple = tuple(test_tup)\n    except ValueError:\n        return print(\"Invalid Test Tuple\")\n    else:\n        return remove_tuple(test_tuple)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    temp_list = []\n    for i in input_list:\n        if isinstance(i, list):\n            for j in i:\n                if isinstance(j, list):\n                    temp_list.append(len(j))\n                else:\n                    temp_list.append(1)\n        else:\n            temp_list.append(1)\n    return len(temp_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # write your code here\n    list_count = 0\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output = 0\n    for i in range(len(input_list)): \n        output += len(input_list[i]) \n    return output\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list) == list: \n        counter = 0\n        for i in input_list: \n            if type(i) == list: \n                counter += 1\n        return counter\n    else: \n        print(\"Wrong format\")\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += len(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list is not None:\n        if isinstance(input_list,list):\n            return len(input_list)\n        else:\n            return 1\n    else:\n        return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for i in range(0,len(input_list)):\n        for j in range(0,len(input_list[i])):\n            if input_list[i][j] =='':\n                result += 1\n    return result\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number = len(input_list)\n    return(number)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    input_list.sort()\n    lst_count = 1\n    \n    for item in input_list:\n        lst_count += 1\n    \n    return lst_count\n        \n    \n    \n    #print(\"LST COUNT:\",count_list(input_list))"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    h=len(arr)\n    i=0\n    while i<h-1:\n        if arr[i]<x:\n            i+=1\n        else:\n            break\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        mid = n//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            return last(arr[mid+1:],x)\n        else:\n            return last(arr[:mid],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return 1\n    elif arr[n-1] == x:\n        return n-1\n    else:\n        return last(arr[:n-1],x)\n    \n    \n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-arr[::-1].index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #list,but_print,k=0,l,0\n    l=arr[len(arr)-1]\n    i=len(arr)-2\n    while(i>=0):\n        if arr[i]<l:\n            l=arr[i]\n            k=i\n            i=i-1\n        else:\n            break\n    return l\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        if arr[len(arr)-1] == x:\n            return len(arr)-1\n        else:\n            return last(arr,x)\n        \narr = [2, 1, 3, 4, 5, 6, 7]\nx = 4\nprint(last(arr,x)"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x, len(arr)-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    return arr[len(arr)-1]\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==None or len(arr)==0:\n        return None\n    if x<arr[-1]:\n        return len(arr)-1\n    if arr[0]<x:\n        return 0\n    if x<arr[-1]:\n        return len(arr)-1\n    else:\n        for i in range(len(arr)-1):\n            if arr[i]>x:\n                return len(arr)-1\n        return 0\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Do regex\n    pattern_a = r'(a){4}b'\n    pattern_b = r'a({4}b)'\n    # Replace the pattern\n    text = re.sub(pattern_a, pattern_b, text)\n    # Return the result\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #split text by 'a' and remove leading and trailing whitespace\n    text_clean = re.split('\\s', text)\n    #print(text_clean)\n    #print(text_clean[0])\n    #print(text_clean[1])\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    # Empty string.\n    if text == '':\n        return False\n    \n    # Empty string.\n    if text == '':\n        return False\n    \n    # Match 'a' and 'b'.\n    if text[0] == 'a' and text[-1] == 'b':\n        return True\n    \n    # Match 'b' and 'a'.\n    if text[0] == 'b' and text[-1] == 'a':\n        return True\n    \n    # Match 'b' and 'c'.\n    if text[0] == 'b' and text[-1] == 'c':\n        return True\n    \n    # Match 'b' and 'd'.\n    if text[0] == 'b' and text[-1] == 'd':\n        return True\n    \n    # Match 'a' and 'e'.\n    if text[0] == 'a' and text[-1] == 'e':\n        return True\n    \n    # Match 'b' and 'f'.\n    if text[0] == 'b' and text[-1] == 'f':\n        return True\n    \n    # Match 'c' and 'a'.\n    if text[0] == 'c' and text[-1] == 'a':\n        return True\n    \n    # Match 'd' and 'a'.\n    if text[0] == 'd' and text[-1] == 'a':\n        return True\n    \n    # Match 'a' and 'e'.\n    if text[0] == 'a' and text[-1] == 'e':\n        return True\n    \n    # Match 'b' and 'f'.\n    if text[0] == 'b' and text[-1] == 'f':\n        return True\n    \n    # Match 'c' and 'g'.\n    if text[0] == 'c' and text[-1] == 'g':\n        return True\n    \n    # Match 'd' and 'g'.\n    if text[0] == 'd' and text[-1] == 'g':\n        return True\n    \n    # Match 'e' and 'g'.\n    if text[0] == 'e' and text[-1] == 'g':\n        return True\n    \n    # Match 'f' and 'g'.\n    if text[0] == 'f' and text[-1] == 'g':\n        return True\n    \n    # Match 'a' and 'h'.\n    if text[0] == 'a' and text[-1] == 'h':\n        return True\n    \n    # Match 'b' and 'i'.\n    if text[0] == 'b' and text[-1] == 'i':\n        return True\n    \n    # Match 'c' and 'j'.\n    if text[0] == 'c' and text[-1] == 'j':\n        return True\n    \n    # Match 'd' and 'j'.\n    if text[0] == 'd' and text[-1] == 'j':\n        return True\n    \n    # Match 'e' and 'j'.\n    if text[0] == 'e' and text[-1] == 'j':\n        return True\n    \n    # Match 'f' and 'j'.\n    if text[0] == 'f' and text[-1] == 'j':\n        return True\n    \n    # Match 'g' and 'j'.\n    if text[0] == 'g' and text[-1] == 'j':\n        return True\n    \n    # Match 'h' and 'j'.\n    if text[0] == 'h' and text[-1] == 'j':\n        return True\n    \n    # Match 'i' and 'j'.\n    if text[0] == 'i' and text[-1] == 'j':\n        return True\n    \n    # Match 'j' and 'k'.\n    if text[0] == 'j' and text[-1] == 'k':\n        return True\n    \n    # Match 'k' and 'l'.\n    if text[0] == 'k' and text[-1] == 'l':\n        return True\n    \n    # Match 'l' and 'o'.\n    if text[0] == 'l' and text[-1] == 'o':\n        return True\n    \n    # Match 'o' and 'p'.\n    if text[0] == 'o' and text[-1] == 'p':\n        return True\n    \n    # Match 'p' and 'q'.\n    if text[0] == 'p' and text[-1] == 'q':\n        return True\n    \n    # Match 'q' and 'r'.\n    if text[0] == 'q' and text[-1] == 'r':\n        return True\n    \n    # Match 'r' and's'.\n    if text[0] == 'r' and text[-1] =='s':\n        return True\n    \n    # Match's' and 't'.\n    if text[0] =='s' and text[-1] == 't':\n        return True\n    \n    # Match 't' and 'u'.\n    if text[0] == 't' and text[-1] == 'u':\n        return True\n    \n    # Match 'u' and 'v'.\n    if text[0] == 'u' and text[-1] == 'v':\n        return True\n    \n    # Match 'v' and 'w'.\n    if text[0] == 'v' and text[-1] == 'w':\n        return True\n    \n    # Match 'w' and 'x'.\n    if text[0] == 'w' and text[-1] == 'x':\n        return True\n    \n    # Match 'x' and 'y'.\n    if text[0] == 'x' and text[-1] == 'y':\n        return True\n    \n    # Match 'y' and 'z'.\n    if text[0] == 'y' and text[-1] == 'z':\n        return True\n    \n    # Match 'z' and''.\n    if text[0] == 'z' and text[-1] =='':\n        return True\n    \n    # Match'' and '.'.\n    if text[0] =='' and text[-1] == '.':\n        return True\n    \n    # Match '.' and 'e'.\n    if text[0] == '.' and text[-1] == 'e':\n        return True\n    \n    # Match 'e' and 'f'.\n    if text[0] == 'e' and text[-1] == 'f':\n        return True\n    \n    # Match 'f' and 'g'.\n    if text[0] == 'f' and text[-1] == 'g':\n        return True\n    \n    # Match 'g' and 'h'.\n    if text[0] == 'g' and text[-1] == 'h':\n        return True\n    \n    # Match 'h' and 'i'.\n    if text[0] == 'h' and text[-1] == 'i':\n        return True\n    \n    # Match 'i' and 'j'.\n    if text[0] == 'i' and text[-1] == 'j':\n        return True\n    \n    # Match 'j' and 'k'.\n    if text[0] == 'j' and text[-1] == 'k':\n        return True\n    \n    # Match 'k' and 'l'.\n    if text[0] == 'k' and text[-1] == 'l':\n        return True\n    \n    # Match 'l' and'm'.\n    if text[0] == 'l' and text[-1] =='m':\n        return True\n    \n    # Match'm' and 'n'.\n    if text[0] =='m' and text[-1] == 'n':\n        return True\n    \n    # Match 'n' and 'o'.\n    if text[0] == 'n' and text[-1] == 'o':\n        return True\n    \n    # Match 'o' and 'p'.\n    if text[0] == 'o' and text[-1] == 'p':\n        return True\n    \n    # Match 'p' and 'q'.\n    if text[0] == 'p' and text[-1"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start_reg = re.compile(\"^a(?:\\\\w+)\")\n    end_reg = re.compile(\"\\\\b(?:\\\\w+)\")\n    endb_reg = re.compile(\"\\\\b(?:\\\\w+).*(?:\\\\w+)\")\n    start_reg.findall(text)\n    endb_reg.findall(text)\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #patterns\n    p = r'a(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    p1 = r'\\d+'\n    p2 = r'[a-z]+'\n    p3 = r'[0-9]+'\n    p4 = r'[0-9]+\\.(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    #match\n    m = re.findall(p, text)\n    #print(m)\n    #return\n    #\n    #case 1\n    for elem in m:\n        #print(elem)\n        if re.findall(p1, elem):\n            #print('a')\n            return elem\n    #case 2\n    for elem in m:\n        if re.findall(p2, elem):\n            #print('b')\n            return elem\n    #case 3\n    for elem in m:\n        if re.findall(p3, elem):\n            #print('c')\n            return elem\n    #case 4\n    for elem in m:\n        if re.findall(p4, elem):\n            #print('d')\n            return elem\n    #case 5\n    return m[0]\n    #print(text)\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'b'.\n    '''\n    #patterns\n    p = r'a(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    p1 = r'\\d+'\n    p2 = r'[a-z]+'\n    p3 = r'[0-9]*'\n    p4 = r'[0-9]+\\.(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    #match\n    m = re.findall(p, text)\n    #print(m)\n    #return\n    #\n    #case 1\n    for elem in m:\n        #print(elem)\n        if re.findall(p1, elem):\n            #print('a')\n            return elem\n    #case 2\n    for elem in m:\n        if re.findall(p2, elem):\n            #print('b')\n            return elem\n    #case 3\n    for elem in m:\n        if re.findall(p3, elem):\n            #print('c')\n            return elem\n    #case 4\n    for elem in m:\n        if re.findall(p4, elem):\n            #print('d')\n            return elem\n    #case 5\n    return m[0]\n    #print(text)\ndef text_startb_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    #patterns\n    p = r'a(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    p1 = r'\\d+'\n    p2 = r'[a-z]+'\n    p3 = r'[0-9]*'\n    p4 = r'[0-9]+\\.(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    #match\n    m = re.findall(p, text)\n    #print(m)\n    #return\n    #\n    #case 1\n    for elem in m:\n        #print(elem)\n        if re.findall(p1, elem):\n            #print('a')\n            return elem\n    #case 2\n    for elem in m:\n        if re.findall(p2, elem):\n            #print('b')\n            return elem\n    #case 3\n    for elem in m:\n        if re.findall(p3, elem):\n            #print('c')\n            return elem\n    #case 4\n    for elem in m:\n        if re.findall(p4, elem):\n            #print('d')\n            return elem\n    #case 5\n    return m[0]\n    #print(text)\ndef text_startc_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'c'.\n    '''\n    #patterns\n    p = r'a(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    p1 = r'\\d+'\n    p2 = r'[a-z]+'\n    p3 = r'[0-9]*'\n    p4 = r'[0-9]+\\.(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    #match\n    m = re.findall(p, text)\n    #print(m)\n    #return\n    #\n    #case 1\n    for elem in m:\n        #print(elem)\n        if re.findall(p1, elem):\n            #print('a')\n            return elem\n    #case 2\n    for elem in m:\n        if re.findall(p2, elem):\n            #print('b')\n            return elem\n    #case 3\n    for elem in m:\n        if re.findall(p3, elem):\n            #print('c')\n            return elem\n    #case 4\n    for elem in m:\n        if re.findall(p4, elem):\n            #print('d')\n            return elem\n    #case 5\n    return m[0]\n    #print(text)\ndef text_startc_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'c'.\n    '''\n    #patterns\n    p = r'a(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    p1 = r'\\d+'\n    p2 = r'[a-z]+'\n    p3 = r'[0-9]*'\n    p4 = r'[0-9]+\\.(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    #match\n    m = re.findall(p, text)\n    #print(m)\n    #return\n    #\n    #case 1\n    for elem in m:\n        #print(elem)\n        if re.findall(p1, elem):\n            #print('a')\n            return elem\n    #case 2\n    for elem in m:\n        if re.findall(p2, elem):\n            #print('b')\n            return elem\n    #case 3\n    for elem in m:\n        if re.findall(p3, elem):\n            #print('c')\n            return elem\n    #case 4\n    for elem in m:\n        if re.findall(p4, elem):\n            #print('d')\n            return elem\n    #case 5\n    return m[0]\n    #print(text)\ndef text_startc_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'c'.\n    '''\n    #patterns\n    p = r'a(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    p1 = r'\\d+'\n    p2 = r'[a-z]+'\n    p3 = r'[0-9]*'\n    p4 = r'[0-9]+\\.(?:[a-z]\\w*)?\\(?[a-z]+\\)?'\n    #match\n    m = re.findall(p, text)\n    #print(m)\n    #return\n    #\n    #case 1\n    for elem in m:\n        #print(elem)\n        if re.findall(p1, elem):\n            #print('a')\n            return elem\n    #cas"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern_a = re.compile(\"a\")\n    pattern_b = re.compile(\"b\")\n    if pattern_a.search(text):\n        pattern_a_match = pattern_a.search(text)\n        text = pattern_a_match.group()\n    if pattern_b.search(text):\n        pattern_b_match = pattern_b.search(text)\n        text = pattern_b_match.group()\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'a\\b'\n    m = re.findall(regex, text)\n    print(m)\n    for word in m:\n        print(word)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # # 1a\n    # if text.startswith('a'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1b\n    # if text.endswith('b'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1c\n    # if text.startswith('c'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1d\n    # if text.endswith('d'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1e\n    # if text.startswith('e'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1f\n    # if text.endswith('f'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1g\n    # if text.startswith('g'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1h\n    # if text.endswith('h'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1i\n    # if text.startswith('i'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1j\n    # if text.endswith('j'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1k\n    # if text.startswith('k'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1l\n    # if text.endswith('l'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1m\n    # if text.startswith('m'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1n\n    # if text.endswith('n'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1o\n    # if text.startswith('o'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1p\n    # if text.endswith('p'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1q\n    # if text.startswith('q'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1r\n    # if text.endswith('r'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1s\n    # if text.startswith('s'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1t\n    # if text.endswith('t'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1u\n    # if text.startswith('u'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1v\n    # if text.endswith('v'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1w\n    # if text.startswith('w'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1x\n    # if text.endswith('x'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1y\n    # if text.startswith('y'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1z\n    # if text.endswith('z'):\n    #     text = text[:-1]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1a\n    # if text.startswith('a'):\n    #     text = text[1:]\n    #     if len(text) > 0:\n    #         print('ERROR: not a valid starta endb pattern')\n    #         exit(1)\n    #\n    # # 1b\n    # if text.endswith('b"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_endb_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+b\\b', text) is not None\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_endb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    return re.search(r'\\b\\w+a\\b', text) is not None\ndef text_enda_startb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, endin"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # print('text starta endb: ',text)\n    text_after_a = re.search('a',text)\n    if(text_after_a is not None):\n        text_after_b = re.search('\\b',text_after_a.group())\n        if(text_after_b is not None):\n            return text_after_b.group()\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + int(dict[i])\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if dict == {}:\n        return 0\n    else:\n        sum = 0\n        for item in dict:\n            sum += dict[item]\n        return sum\n    \n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    res = 0\n    for item in dict.values():\n        res += item\n    return res\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    if type(dict) is dict:\n        for i in dict:\n            total += dict[i]\n    else:\n        raise TypeError(\"'dict' must be a dictionary\")\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    value_list = []\n    for k,v in dict.items():\n        value_list.append(v)\n        \n    result = sum(value_list)\n    return result\n        \ndef main():\n    '''\n    Main function to run the program.\n    '''\n    \n    # declare a dictionary to store the fruits\n    fruits = {\"banana\":2,\n            \"apple\":4,\n            \"grapes\":2,\n            \"watermelon\":4,\n            \"strawberry\":2,\n            \"coconut\":4,\n            \"lettuce\":2,\n            \"papaya\":4,\n            \"bread\":2,\n            \"cheese\":2,\n            \"tuna\":2,\n            \"orange\":2,\n            \"pear\":2,\n            \"lemon\":2,\n            \"cherry\":2,\n            \"water\":4,\n            \"apple\":4,\n            \"pear\":4,\n            \"orange\":4,\n            \"grapes\":4,\n            \"strawberry\":4,\n            \"banana\":4}\n    \n    # print the dictionary for the user to see what it is\n    print(fruits)\n    \n    # ask user for the name of the fruit they want to remove from the dictionary\n    fruit_name = input(\"What fruit would you like to remove? \").lower()\n    \n    # find the value of the fruit name from the dictionary, print it and remove it\n    if fruit_name in fruits:\n        del fruits[fruit_name]\n        print(fruits)\n    else:\n        print(f\"Sorry, '{fruit_name}' is not in the dictionary.\")\n    \n    # calculate the return of the function\n    return_value = return_sum(fruits)\n    print(f\"The return value of the function is: {return_value}\")\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        print('Please enter a positive integer')\n    else:\n        sum = 0\n        for i in range(1,n+1):\n            if i%2==0:\n                sum += i\n        return sum\n        \nprint(sum_odd(1))\nprint(sum_odd(2))\nprint(sum_odd(3))\nprint(sum_odd(4))\nprint(sum_odd(5))"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(0, n + 1): \n        if i % 2 == 1: \n            s = s + i \n    return s \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_val = 0\n    while n > 0:\n        if n % 2 == 1:\n            sum_val += n\n        n //= 2\n    return sum_val\n    "
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            total += i\n    return total\n    #return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    n_list = []\n    i = 0\n    while i < n:\n        if i % 2!= 0:\n            n_list.append(i)\n        i += 1\n    return n_list\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 0: \n        return 0 \n    else: \n        return n + sum_odd(n-1) \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n    # pass\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1): \n        if i % 2 == 1: \n            sum += i \n    return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0: \n        return -1\n    sum = 0\n    for num in range(n):\n        if num % 2!= 0:\n            sum += num\n    return sum \n \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd=0\n    for i in range(n):\n        if i%2==1:\n            sum_odd+=i\n    return sum_odd\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    summ = 0\n    for x in arr:\n        summ += x\n    return summ\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res=0\n    for i in arr:\n        res += i\n    return res"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for n in arr:\n        sum += n\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(0, len(arr)):\n        sum = sum + arr[i]\n    return sum\n    \ndef add(arr):\n    '''\n    Write a python function to add an array.\n    '''\n    # Your code here\n    return arr\n    \ndef main():\n    '''\n    Tests:\n    example 1\n    test_1 = add([0,1,2,3,4])\n    test_2 = add([5,6,7,8,9])\n    test_3 = add([10,11,12,13,14])\n    '''\n    # Your code here\n    arr = []\n    test = add(arr)\n    print(test)\n    \n    '''\n    example 2\n    test_1 = add([0,1,2,3,4])\n    test_2 = add([5,6,7,8,9])\n    test_3 = add([10,11,12,13,14])\n    '''\n    # Your code here\n    arr = [0,1,2,3,4]\n    test = add(arr)\n    print(test)\n    \n    '''\n    example 3\n    test_1 = add([0,1,2,3,4])\n    test_2 = add([5,6,7,8,9])\n    test_3 = add([10,11,12,13,14])\n    '''\n    # Your code here\n    arr = [0,1,2,3,4]\n    test = add(arr)\n    print(test)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l=n\n    r=l&1\n    l=l>>1\n    l=(l<<d)+l\n    return l,r\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def left_rotate_part(n,d):\n        res=0\n        i=d-1\n        j=0\n        while i>=0:\n            a=n>>i\n            b=n&(a-1)\n            c=a-b\n            #print(c)\n            res=c|b\n            n=c&((1<<i)-1)\n            i-=1\n        return res\n        \n    n=0\n    for i in range(32):\n        n<<=1\n        n=n|n>>i\n    n=n^(n&(n-1))\n    \n    d=d%32\n    if d<0:\n        d+=32\n    if d>32:\n        d-=32\n    \n    for i in range(32):\n        n<<=1\n        n=n|n>>(d+i)\n    n=n&(n-1)\n    return n\n    \ndef left_rotate_part(n,d):\n    n=(n<<d)&((1<<32)-1)\n    n=n|n>>d\n    return n\n    \ndef get_32bit_permutation(n):\n    '''\n    Write a function to do the 32 bit permutation.\n    '''\n    n=(n&(n-1))\n    a=[0]*(32-n)\n    for i in range(32-n):\n        a[i]=a[i+1]\n    for i in range(n-1,-1,-1):\n        a[i]=a[i+1]\n    return a\n        \ndef add_32bit_permutation(n,a):\n    '''\n    Write a function to add 32 bit permutation to a given number.\n    '''\n    if n==32:\n        return a\n    n+=1\n    a=get_32bit_permutation(n)\n    a[32-n]=n\n    return a\n    \ndef bit_wise_xor(a,b):\n    '''\n    Write a function to do a bitwise xor.\n    '''\n    #print(a)\n    #print(b)\n    res=[]\n    for i in range(32):\n        if a[i]&b[i]==0:\n            res.append(1)\n        else:\n            res.append(0)\n    #print(res)\n    return res\n    \ndef shift_left_part(n,d):\n    '''\n    Write a function to shift bits of a number n to d bits. The number will be 32 bit.\n    '''\n    n=n&(n-1)\n    d=d&(d-1)\n    if d==0:\n        return n\n    else:\n        n=n|n>>d\n        n=n&(n-1)\n        return n\n    \ndef get_4bit_permutation(n):\n    '''\n    Write a function to get 4 bit permutation of number n.\n    '''\n    a=[0]*4\n    for i in range(4):\n        a[i]=a[i+1]\n    for i in range(4):\n        a[i]=a[i+4]\n    return a\n    \ndef print_4bit_permutation(a):\n    '''\n    Write a function to print 4 bit permutation of number n.\n    '''\n    for i in range(4):\n        print(a[i],end=\" \")\n    print()\n    \ndef get_64bit_permutation(n):\n    '''\n    Write a function to get 64 bit permutation of number n.\n    '''\n    a=[0]*64\n    for i in range(64):\n        a[i]=a[i+1]\n    for i in range(64):\n        a[i]=a[i+64]\n    return a\n    \ndef get_32bit_permutation(n):\n    '''\n    Write a function to get 32 bit permutation of number n.\n    '''\n    a=[0]*32\n    for i in range(32):\n        a[i]=a[i+1]\n    for i in range(32):\n        a[i]=a[i+32]\n    return a\n    \ndef get_64bit_permutation(n):\n    '''\n    Write a function to get 64 bit permutation of number n.\n    '''\n    a=[0]*64\n    for i in range(64):\n        a[i]=a[i+1]\n    for i in range(64):\n        a[i]=a[i+64]\n    return a\n    \ndef get_32bit_permutation(n):\n    '''\n    Write a function to get 32 bit permutation of number n.\n    '''\n    a=[0]*32\n    for i in range(32):\n        a[i]=a[i+1]\n    for i in range(32):\n        a[i]=a[i+32]\n    return a\n    \ndef get_64bit_permutation(n):\n    '''\n    Write a function to get 64 bit permutation of number n.\n    '''\n    a=[0]*64\n    for i in range(64):\n        a[i]=a[i+1]\n    for i in range(64):\n        a[i]=a[i+64]\n    return a\n    \ndef get_permutation(n,a,b,c,d):\n    '''\n    Write a function to get a permutation of number n.\n    '''\n    a=get_4bit_permutation(a)\n    b=get_4bit_permutation(b)\n    c=get_4bit_permutation(c)\n    d=get_4bit_permutation(d)\n    res=[]\n    for i in range(32):\n        a[i]=get_32bit_permutation(n>>(i&32))[i]\n    for i in range(32):\n        b[i]=get_32bit_permutation(n>>(i&32))[i]\n    for i in range(32):\n        c[i]=get_32bit_permutation(n>>(i&32))[i]\n    for i in range(32):\n        d[i]=get_32bit_permutation(n>>(i&32))[i]\n    return [a,b,c,d]\n    \ndef get_permutation_64bit(n,a,b,c,d):\n    '''\n    Write a function to get a permutation of number n.\n    '''\n    a=get_64bit_permutation(a)\n    b=get_64bit_permutation(b)\n    c=get_64bit_permutation(c)\n    d=get_64bit_permutation(d)\n    res=[]\n    for i in range(64):\n        a[i]=get_64bit_permutation(n>>(i&64))[i]\n    for i in range(64):\n        b[i]=get_64bit_permutation(n>>(i&64))[i]\n    for i in range(64):\n        c[i]=get_64bit_permutation(n>>(i&64))[i]\n    for i in range(64):\n        d[i]=get_64bit_permutation(n>>(i&64))[i]\n    return [a,b,c,d]\n    \ndef get_permutation_32bit(n,a,b,c,d):\n    '''\n    Write a function to get a permutation of number n.\n    '''\n    a=get_32bit_permutation(a)\n    b=get_32bit_permutation(b)\n    c=get_32bit_permutation(c)\n    d=get_32bit_permutation(d)\n    res=[]\n    for i in range(32):\n        a[i]=get_32bit_permutation(n>>(i&32))[i]\n    for i in range(32):\n        b[i]=get_32bit_permutation(n>>(i&32))[i]\n    for i in range(32):\n        c[i]=get_32bit_permutation(n>>(i&32))[i]\n    for i in range(32):\n        d[i]=ge"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l=n&1\n    n=n>>1\n    if l:\n        n|=1\n    else:\n        n&=1\n    return n\n    \n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # n = int(n,2) # convert to int\n    temp=n\n    temp=str(temp)\n    temp=temp[::-1]\n    # temp=int(temp,2)\n    temp=int(temp,2)\n    temp=temp[-d:]\n    temp=int(temp,2)\n    return temp\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if(n == 0):\n        return n\n    \n    if(d == 1):\n        return (n & 1) | (n >> 1)\n    \n    if(d == 2):\n        return (n >> 1) | (n << 1)\n    \n    if(d == 3):\n        return (n << 1) | (n >> 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # write your code here\n    n=n&(0b11111111111111)\n    n=(n<<d)&0b11111111111111\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n<<1\n    n=(n>>1)&0b11111\n    for _ in range(d):\n        n=n>>1\n    return n\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n&0b11111\n    n=(n<<1)&0b11111\n    for _ in range(d):\n        n=n>>1\n    return n\n    \ndef add(n,d):\n    '''\n    Write a function to add n to the right of the left most bit of d bits. We assume that the number is 32 bit.\n    '''\n    n=n&0b11111\n    n=n|(d>>1)\n    n=n|(n&1)\n    n=n|(n>>1)\n    n=n|(n>>1)\n    n=n|(n>>1)\n    return n\n    \ndef sub(n,d):\n    '''\n    Write a function to sub n from the left most bit of d bits. We assume that the number is 32 bit.\n    '''\n    n=n&0b11111\n    n=n|(d>>1)\n    n=n|(n&1)\n    n=n|(n>>1)\n    n=n|(n>>1)\n    n=n|(n>>1)\n    return n\n    \ndef mul(n,d):\n    '''\n    Write a function to multiply n by d. We assume that the number is 32 bit.\n    '''\n    n=n&0b11111\n    n=n|(d>>1)\n    n=n|(n&1)\n    n=n|(n>>1)\n    n=n|(n>>1)\n    return n\n    \ndef div(n,d):\n    '''\n    Write a function to divide n by d. We assume that the number is 32 bit.\n    '''\n    n=n&0b11111\n    n=n|(d>>1)\n    n=n|(n&1)\n    n=n|(n>>1)\n    return n\n    \ndef xor(n,d):\n    '''\n    Write a function to xor n and d. We assume that the number is 32 bit.\n    '''\n    n=n&0b11111\n    n=n|(d>>1)\n    return n\n    \ndef invert(n,d):\n    '''\n    Write a function to invert n and d. We assume that the number is 32 bit.\n    '''\n    n=n&0b11111\n    n=n|(d>>1)\n    return n\n    \ndef flip_bits(n):\n    '''\n    Write a function to flip the bits of n. We assume that the number is 32 bit.\n    '''\n    n=(n>>1)&0b1111\n    return n\n    \ndef add_reverse(n):\n    '''\n    Write a function to add reverse n. We assume that the number is 32 bit.\n    '''\n    n=n&0b
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d) + n) >> d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) | (n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n>>d\n    return n & ((1 << d)-1)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\\\s+\", \" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespace\n    text = re.sub('\\s+','', text)\n    # Remove any single spaces\n    text = re.sub('\\s+','', text)\n    # Remove multiple spaces\n    text = re.sub(' +','', text)\n    # Remove multiple whitespaces\n    text = re.sub('\\s+','', text)\n    # Remove single whitespace\n    text = re.sub('\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('[^\\w]',' ',text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    spaces = re.compile(r'\\s+')\n    cleaned_text = spaces.sub('', text)\n    return cleaned_text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # initialize a variable to hold the text\n    clean_text = ''\n    \n    # loop through the text\n    for char in text:\n        # if the char is a whitespace, remove it\n        if char.isspace():\n            # add the whitespace back to the variable\n            clean_text += char\n        else:\n            # add the char to the variable\n            clean_text += char.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    regex = re.compile('[\\s]+')\n    text = regex.sub(' ', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #print(text)\n    text = re.sub(\"\\s\", \"\", text)\n    #print(text)\n    return text\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"\\nTest count of three number:\")\n    print(\"The number of number of equal numbers from {0} and {1} are: {2}\".format(x,y,z))\n    print(\"\\nOutput:\")\n    print(\"The number of number of equal numbers from {0} and {1} are: {2}\".format(x,y,z))\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    return x == y and y == z and z == x\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # num_list = []\n    # for i in range(0,3):\n    #     num = input(\"enter a three numbers: \")\n    #     if num == x:\n    #         print(\"1 equal number is : \", i+1)\n    #     elif num == y:\n    #         print(\"2 equal number is : \", i+1)\n    #     elif num == z:\n    #         print(\"3 equal number is : \", i+1)\n    #     else:\n    #         print(\"a character is not a number\")\n    #     num_list.append(i+1)\n    # num_list.sort()\n    # print(num_list)\n    print(len(x))\n    print(len(y))\n    print(len(z))\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    try:\n        if x<y and x<z:\n            return x\n        elif y<z:\n            return y\n        else:\n            return z\n    except ValueError:\n        print(\"An error occured\")\n    return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a=int(x)\n    b=int(y)\n    c=int(z)\n    if a==b and a==c:\n        print(a,b,c)\n    elif a==b or a==c:\n        print(a,b,c)\n    elif b==a or b==c:\n        print(b,a,c)\n    else:\n        print(a,b,c)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    sum = 0\n    for i in range(3):\n        sum += x[i] == y[i] == z[i]\n    return sum\n    \ndef test_four_equal(x,y,z,x2,y2,z2,x3,y3,z3,x4,y4,z4):\n    '''\n    Write a python function to count the number of equal numbers from four given integers.\n    '''\n    sum = 0\n    for i in range(4):\n        sum += x[i] == y[i] == z[i] == x2[i] == y2[i] == z2[i] == x3[i] == y3[i] == z3[i] == x4[i] == y4[i] == z4[i]\n    return sum\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"Test Three Equal\")\n    print(x)\n    print(y)\n    print(z)\n    print(x+y+z)\n    print(x*y*z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Your code goes here\n    count = 0\n    for i in range(3):\n        if (x == y == z):\n            count = count + 1\n    return(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    if (x == y == z):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    n=len(arr)\n    for i in range(0,n):\n        for j in range(n-i-1):\n            if arr[j]<arr[j+1]:\n                arr[j],arr[j+1]=arr[j+1],arr[j]\n                count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    count=0\n    def counting(start,end):\n        if start>end:\n            return 0\n        elif start==end:\n            return 1\n        elif arr[start]<arr[end]:\n            return counting(start+1,end)\n        else:\n            return counting(start+1,end-1)+counting(start,end-1)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    lst = arr\n    n = len(arr)\n    rotations = n//2\n    rotate_lst = []\n    # rotate all the elements of lst\n    for i in range(rotations):\n        temp = lst[i*2]\n        lst[i*2] = lst[i]\n        lst[i] = temp\n    print(lst)\n    # iterate through every element of lst\n    for i in range(rotations,n):\n        # get the element at index i\n        temp = lst[i]\n        # get the next element after i\n        lst[i] = lst[i+1]\n        # get the next element after i+1\n        lst[i+1] = temp\n    print(lst)\n    return lst.count(0)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count = 0\n    # count += arr.count(arr[0])\n    # for i in range(1,len(arr)):\n    #     if arr[i] < arr[i-1]:\n    #         count += 1\n    # return count\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # your code goes here\n    \n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count += 1\n    return count\n        \n        \n        \n        \ndef reverse_array(arr):\n    '''\n    Write a python function to reverse a given array.\n    '''\n    # your code goes here\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            arr[i], arr[j] = arr[j], arr[i]\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(len(arr)):\n            if arr[j] > arr[i] and arr[j]!= arr[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 1\n    \n    counter = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # invariant:\n    # 0 <= n <= len(arr) - 1\n    # n <= len(arr)\n    \n    # f(i, j) = f(i-1, j-1) + f(i-1, j)\n    # if j >= i:\n    #     f(i, j) = f(i-1, j-1) + f(i-1, j)\n    #     f(i, j) = f(i, j-1) + f(i, j)\n    #     f(i, j) = f(i-1, j-1) + f(i-1, j)\n    \n    def f(i, j):\n        if i <= 0 or j <= 0:\n            return 0\n        if i == 0 or j == 0:\n            return 0\n        return (f(i-1, j) + f(i, j-1)) % 10\n    \n    n = len(arr)\n    return f(n-1, n-1) % 1"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # initialize the count\n    count = 0\n    # traverse the array\n    for i in range(0, len(arr)):\n        # get the index of the value\n        idx = arr[i]\n        # change the value\n        arr[i] = arr[len(arr) - 1]\n        # decrement the count\n        count = count + 1\n        # move the index of the value to the left\n        arr.remove(idx)\n    # return the count\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotation=0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            rotation+=1\n    return rotation\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == int(n**.5)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if n < 0 :\n        x = 0\n    return x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n > 0:\n        for i in range(1, int(sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 2):\n        return False\n    \n    for i in range(2, int(sqrt(n) + 1)):\n        if (n % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Base case\n    if (n==0):\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Step 1: try to create a new variable and check if given number is perfect square\n    for i in range(1, int(sqrt(n)) + 1) :\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n**0.5 == int(n**0.5)\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        raise Exception(\"Input must be positive\")\n    if n == 0 :\n        return True\n    if n == 1 :\n        return False\n    if n % 2 == 0 :\n        return False\n    for i in range(3, int(n**0.5)+1, 2) :\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    a = n\n    while a!= 0 :\n        if (a % 10 == 0) :\n            return False\n        a = a // 10\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == []:\n        return False\n    if len(arr) == 1:\n        return True\n    for i in arr:\n        if arr.index(i) % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for i in arr:\n        if i % 2 == 0:\n            count += 1\n    if count % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i % 2 == 0:\n            return False\n    return Tru"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for i in arr:\n        if(i%2 == 0):\n            count += 1\n        else:\n            pass\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if (i % 2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even=True\n    for i in arr: \n        if i%2==0: \n            even=False\n    if even==True: \n        return even\n    else: \n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for num in arr: \n        if num % 2 == 0: \n            return False \n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i]%2==0:\n            return False\n    return True\n    "
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            return False\n    return True\n    \ndef is_product_even2(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count=0\n    for i in arr:\n        if i%2==0:\n            count+=1\n    return count\n    \ndef is_product_even3(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result=0\n    for i in arr:\n        result+=i\n    if result%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def max_sum_list_rec(lists,i,j,highest,res):\n        if j>=len(lists[i]):\n            highest=highest+res\n            return highest\n        elif lists[i][j]>highest:\n            highest=lists[i][j]\n            res=list(res)\n            res[i]=lists[i][j]\n            return max_sum_list_rec(lists,i+1,j+1,highest,res)\n        else:\n            return highest\n    if len(lists)==0:\n        return 0\n    res=[]\n    return max_sum_list_rec(lists,0,0,0,res)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    n = len(lists)\n    lst = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # YOUR CODE HERE\n    lst = []\n    # lst = [item[0] for item in lists]\n    for item in lists:\n        lst.append(sum(item))\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for i in lists:\n        for j in i:\n            if j > max_sum_list[-1]:\n                max_sum_list.append(j)\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_num = []\n    for i in lists:\n        max_num.append(max(i))\n    return max_num\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in lists:\n        total = 0\n        for j in lists:\n            total = total + i[j]\n        if total > max_list[0]:\n            max_list = [i, total]\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Set the default values\n    largest_sum = 0\n    largest_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return [(i,sum(lst)) for i,lst in enumerate(lists) if sum(lst) == max(lst)]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    new_list = []\n    for i in lists:\n        sum = 0\n        for num in i:\n            sum += num\n        if sum == max(i):\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    sums = []\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == '':\n        return 'None'\n    max_count = 0\n    for i in range(0, len(test_str)):\n        if test_str[i].isupper():\n            if max_count < i:\n                max_count = i\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if max_run < i:\n                max_run = i\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def max_run_lower(test_str):\n        '''\n        Write a function to find maximum run of lowercase characters in the given string.\n        '''\n        def max_run_lower_case(test_str):\n            # Create a new list to store the character length of each of the characters of the string\n            char_lengths = []\n            for i in range(len(test_str)):\n                char_lengths.append(len(test_str[i]))\n            # Sort the list of the characters\n            char_lengths.sort()\n            # Create a temporary list to store the index of each element of the list\n            temp_list = []\n            for i in range(len(char_lengths)):\n                temp_list.append(i)\n            # Create a temporary list to store the positions of each element of the list\n            temp_list.sort()\n            # Create a dictionary to store the positions of the characters of the list\n            temp_dictionary = {}\n            # Create a dictionary to store the lengths of the characters of the list\n            temp_dictionary.update({i: char_lengths[i] for i in range(len(char_lengths))})\n            # Create a new list to store the maximum length of each character\n            maximum_length = []\n            # Create a temporary list to store the maximum length of each element of the list\n            temp_list.sort()\n            for i in range(len(temp_list)):\n                maximum_length.append(temp_list[i] - 1)\n            # Create a new dictionary to store the maximum length of each character\n            temp_dictionary.update({i: maximum_length[i] for i in range(len(maximum_length))})\n            # Create a new dictionary to store the positions of each element of the list\n            temp_dictionary.update({i: temp_list[i] for i in range(len(temp_list))})\n            # Create a new list to store the position of each element of the list\n            temp_list.sort()\n            # Create a dictionary to store the positions of each element of the list\n            temp_dictionary.update({i: temp_list[i] for i in range(len(temp_list))})\n            # Return the maximum length of the string\n            return max(temp_dictionary.values())\n        # Create a new variable to store the number of maximum characters of the list\n        run_count = 0\n        # Iterate through the string and count the length of each character\n        for i in range(len(test_str)):\n            if test_str[i].isupper():\n                run_count += 1\n            else:\n                run_count = 0\n        # Return the maximum character length of the string\n        return max_run_lower(test_str)\n    # Return the number of maximum run of uppercase characters in the given string\n    return max_run_uppercase(test_str)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_upp = 0\n    test_str_upper = ''\n    for i in range(0, len(test_str)):\n        test_str_upper += test_str[i].upper()\n        if len(test_str_upper) > max_run_upp:\n            max_run_upp = len(test_str_upper)\n            \n    return max_run_upp\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    u = 0\n    for i in test_str:\n        if i.isupper():\n            u = u + 1\n    return u\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    output = 0\n    for char in test_str:\n        if char.isupper():\n            output = output + 1\n    return output\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    arr = []\n    arr_dec = []\n    for i in range(0, len(test_str)):\n        if test_str[i].isupper():\n            arr_dec.append(test_str[i])\n            arr.append(i)\n    return max(arr_dec)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    if test_str == \"\":\n        return count\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        if count == 5:\n            return i\n    \n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upp_char = 0\n    max_upp_char_i = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if max_upp_char < test_str[i]:\n                max_upp_char = test_str[i]\n                max_upp_char_i = i\n    return max_upp_char, max_upp_char_i\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    lower_case = 'abcdefghijklmnopqrstuvwxyz'\n    uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    res = ''\n    for i in range(len(test_str)):\n        if test_str[i].islower():\n            res += lower_case[i]\n        elif test_str[i].isupper():\n            res += uppercase[i]\n        else:\n            res += test_str[i]\n    return int(res)\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[0]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[1]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef third_odd(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[2]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef fourth_odd(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[3]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef fifth_odd(nums):\n    '''\n    Write a python function to find the fifth odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[4]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef sixth_odd(nums):\n    '''\n    Write a python function to find the sixth odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[5]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef seventh_odd(nums):\n    '''\n    Write a python function to find the seventh odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[6]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef eighth_odd(nums):\n    '''\n    Write a python function to find the eighth odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[7]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    even = nums[0]\n    for number in nums:\n        if number % 2 == 0:\n            if number > even:\n                even = number\n    return even\n    \ndef second_even(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    even = nums[1]\n    for number in nums:\n        if number % 2 == 0:\n            if number > even:\n                even = number\n    return even\n    \ndef third_even(nums):\n    '''\n    Write a python function to find the third even number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    even = nums[2]\n    for number in nums:\n        if number % 2 == 0:\n            if number > even:\n                even = number\n    return even\n    \ndef fourth_even(nums):\n    '''\n    Write a python function to find the fourth even number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    even = nums[3]\n    for number in nums:\n        if number % 2 == 0:\n            if number > even:\n                even = number\n    return even\n    \ndef fifth_even(nums):\n    '''\n    Write a python function to find the fifth even number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    even = nums[4]\n    for number in nums:\n        if number % 2 == 0:\n            if number > even:\n                even = number\n    return even\n    \ndef sixth_even(nums):\n    '''\n    Write a python function to find the sixth even number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    even = nums[5]\n    for number in nums:\n        if number % 2 == 0:\n            if number > even:\n                even = number\n    return even\n    \ndef seventh_even(nums):\n    '''\n    Write a python function to find the seventh even number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    even = nums[6]\n    for number in nums:\n        if number % 2 == 0:\n            if number > even:\n                even = number\n    return even\n    \ndef eighth_even(nums):\n    '''\n    Write a python function to find the eighth even number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    even = nums[7]\n    for number in nums:\n        if number % 2 == 0:\n            if number > even:\n                even = number\n    return even\n    \ndef first_odd_hundred(nums):\n    '''\n    Write a python function to find the first odd hundred number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[0]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef second_odd_hundred(nums):\n    '''\n    Write a python function to find the second odd hundred number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[1]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef third_odd_hundred(nums):\n    '''\n    Write a python function to find the third odd hundred number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[2]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef fourth_odd_hundred(nums):\n    '''\n    Write a python function to find the fourth odd hundred number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[3]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef fifth_odd_hundred(nums):\n    '''\n    Write a python function to find the fifth odd hundred number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return\n    odd = nums[4]\n    for number in nums:\n        if number % 2 == 1:\n            if number > odd:\n                odd = number\n    return odd\n    \ndef sixth_odd_hundred(nums):\n    '''\n    Write a python function to find the sixth odd hundred number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    print('first odd number = ',nums[nums.index(nums[0])%len(nums)])\n    nums.sort()\n    if nums[0]%2 == 1:\n        print('Not even')\n    else:\n        print('Even')\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    first = -1\n    for i in range(len(nums)):\n        if (nums[i] % 2) == 1:\n            if first == -1:\n                first = i\n            else:\n                if nums[first] == nums[i]:\n                    first = -1\n    return first\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if len(nums) % 2 == 1 else nums[nums[0]]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = [num for num in nums if num % 2!= 0]\n    print(odd)\n    print(sum(odd))\nfirst_odd([2, 8, 4, 2, 4, 2, 2, 8, 2, 1, 3, 2, 2, 4, 1, 2, 4, 2, 1, 2, 3, 2, 1])\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # remove the first item of the list\n    nums.pop(0)\n    # if the first item is odd\n    if nums[0] % 2 == 0:\n        # add the second item to the list\n        nums.append(nums[1])\n        # if it is odd, return the first item\n        return nums[0]\n    # if it is not odd, return None\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your code here\n    return (nums[0])\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return sorted(nums)[1] if len(nums)%2==1 else sorted(nums)[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[nums % 2]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2) == 1:\n            return (nums[i])\n    return -1\n    \n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #checks if the given tuples are of the same size\n    if len(test_tup)!= K:\n        return False\n    #adds empty tuples to the front of the list for the the given number of elements\n    for i in range(0,K-len(test_tup)):\n        test_tup.append(())\n    #checks if the given tuples are sorted\n    if sorted(test_tup)!= sorted(test_tup[:K]):\n        return False\n    #checks if the elements are of the same size, each element should be in the same order.\n    if len(test_tup[0])!= K:\n        return False\n    #checks if the tuples are of the same type\n    if test_tup[0][0]!= test_tup[-1][-1]:\n        return False\n    #checks if the elements are contained in the same order\n    for i in range(0,K):\n        if test_tup[i][0]!= test_tup[i+1][0] and test_tup[i][-1]!= test_tup[i+1][-1]:\n            return False\n    #checks if the elements are the same type\n    if test_tup[0][-1]!= test_tup[-1][0]:\n        return False\n    #checks if the elements are the same size\n    for i in range(0,K):\n        if test_tup[i][0]!= test_tup[i+1][-1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if type(test_tup) is not tuple:\n        raise TypeError(\"Tuple must contain tuples.\")\n    if type(K) is not int:\n        raise TypeError(\"K must be an integer.\")\n    if len(test_tup) == 1:\n        raise ValueError(\"Must have at least two tuples.\")\n    if K > len(test_tup):\n        raise ValueError(\"K must be less than the number of tuples.\")\n    if len(test_tup)!= len(set(test_tup)):\n        raise ValueError(\"Duplicate entries are not allowed.\")\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for item in test_tup:\n        if item == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(0,len(test_tup)):\n        if test_tup[i][0] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # I can use a list comprehension to do this\n    # because we're iterating over the list of tuples\n    # but not using a list comprehension itself\n    check_k = []\n    # I can use if statements to check if the tuple\n    # is contained in the tuple\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            if tuple(test_tup[i]) == K:\n                check_k.append(1)\n        else:\n            if tuple(test_tup[i]) == K:\n                check_k.append(1)\n    # I can use the \"and\" operator to check if the\n    # condition is satisfied\n    # if the two conditions are satisfied,\n    # then the function returns\n    # True\n    if len(check_k) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    #print('TEST TUP:', test_tup)\n    #print('K:', K)\n    return all([item in test_tup for item in test_tup])\n    #return all([test_tup[i] in test_tup[i+1:] for i in range(len(test_tup)-K+1)])\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return sum(1 for x in test_tup if x[0] == K)!= 0\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    n = len(test_tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if test_tup[j]!= test_tup[j+1]:\n                return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    i, j = 0, 0\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if i == j:\n                continue\n            if test_tup[i] < test_tup[j]:\n                if K <= abs(test_tup[i] - test_tup[j]):\n                    return True\n            elif test_tup[i] > test_tup[j]:\n                if K <= abs(test_tup[j] - test_tup[i]):\n                    return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i == K:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if len(test_tup1) < len(test_tup2):\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Not equal length tuples.')\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if test_tup2[1] > test_tup1[1]:\n        return True\n    elif test_tup2[0] > test_tup1[0]:\n        return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller = True\n    if len(test_tup1) < len(test_tup2):\n        smaller = False\n    return smaller\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # write your code here\n    if len(test_tup1) < len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup2)!= len(test_tup1):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True\n"
    }
]