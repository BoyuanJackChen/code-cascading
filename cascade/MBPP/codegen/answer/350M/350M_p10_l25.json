[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a set to store the elements from the two lists\n    shared_elements = set()\n    \n    # Iterate over the lists and add the elements to the set.\n    for i in range(len(test_tup1)):\n        for j in range(i+1, len(test_tup1)):\n            shared_elements.add(test_tup1[i])\n            shared_elements.add(test_tup1[j])\n            \n    # Return the shared elements from the two lists.\n    return shared_elements\n    "
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # TODO: Modify to add more functionality\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = set(test_tup1)\n    list2 = set(test_tup2)\n    return list1.intersection(list2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # find the elements which appear in both lists\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # TODO: Your code here\n    for i in test_tup1:\n        if i in test_tup2:\n            test_tup2.remove(i)\n    return test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list = test_tup1 + test_tup2\n    if len(test_list) <= 1:\n        return test_list\n    temp_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in temp_list:\n            temp_list.append(test_list[i])\n    return temp_list\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1_sh = []\n    tup2_sh = []\n    \n    #create a list of elements that are not in both list\n    for ele in test_tup1:\n        if ele not in test_tup2:\n            tup1_sh.append(ele)\n    \n    for ele in test_tup2:\n        if ele not in test_tup1:\n            tup2_sh.append(ele)\n    \n    return tup1_sh, tup2_sh\n    \n    "
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    prime_factors = []\n    for i in range(2,n):\n        if n % i == 0:\n            prime_factors.append(i)\n    if len(prime_factors)==0:\n        return False\n    else:\n        return not prime_factors[0]\n    \n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 3:\n        return False\n    for i in range(3, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n is 1, return False.\n    if n == 1:\n        return False\n    # if n is not a multiple of 2, return False.\n    if not n % 2:\n        return False\n    # if n is not a multiple of 3, return False.\n    if not n % 3:\n        return False\n    # otherwise, return True.\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n%2==0:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n    \ndef divisible(n,d):\n    '''\n    Function to return the divisibility of a number n.\n    '''\n    return n%d==0\ndef is_proper(n):\n    '''\n    Function to return the properness of a number n.\n    '''\n    return n%2==0\ndef is_triangle(n):\n    '''\n    Function to return the triangulation of a number n.\n    '''\n    return n>0 and n<100\ndef is_isosceles(n):\n    '''\n    Function to return the isosceles triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0\ndef is_equilateral(n):\n    '''\n    Function to return the equilateral triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n<100\ndef is_scalene(n):\n    '''\n    Function to return the scalene triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100\ndef is_octagon(n):\n    '''\n    Function to return the octagon triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100\ndef is_star(n):\n    '''\n    Function to return the star triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100\ndef is_pentagon(n):\n    '''\n    Function to return the pentagon triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%5==0 and n>=100\ndef is_hexagon(n):\n    '''\n    Function to return the hexagon triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_heptaagon(n):\n    '''\n    Function to return the heptaagon triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_heptaagon_triangle(n):\n    '''\n    Function to return the heptaagon triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_heptaagon_square(n):\n    '''\n    Function to return the heptaagon square of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_heptaagon_pentagon(n):\n    '''\n    Function to return the heptaagon pentagon of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_heptaagon_hexagon(n):\n    '''\n    Function to return the heptaagon hexagon of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_triangle(n):\n    '''\n    Function to return the spherical triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100\ndef is_spherical_square(n):\n    '''\n    Function to return the spherical square of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_pentagon(n):\n    '''\n    Function to return the spherical pentagon of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_hexagon(n):\n    '''\n    Function to return the spherical hexagon of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_heptaagon(n):\n    '''\n    Function to return the spherical heptaagon of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_heptaagon_triangle(n):\n    '''\n    Function to return the spherical heptaagon triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_heptaagon_square(n):\n    '''\n    Function to return the spherical heptaagon square of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_heptaagon_pentagon(n):\n    '''\n    Function to return the spherical heptaagon pentagon of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_heptaagon_hexagon(n):\n    '''\n    Function to return the spherical heptaagon hexagon of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_hexagon_triangle(n):\n    '''\n    Function to return the spherical heptaagon triangle of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_hexagon_square(n):\n    '''\n    Function to return the spherical heptaagon square of a number n.\n    '''\n    return n>0 and n<100 and n%2==0 and n>=100 and n%10==0 and n>=100 and n%6==0 and n>=100\ndef is_spherical_pentagon_triangle(n):\n    '''\n    Function to return the spherical heptaagon triangle of a number n.\n    '''\n    return n>0 and n<10"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 0:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0 or n < 2:\n        return True\n    if n % 3 == 0 or n < 3:\n        return False\n    if n % 5 == 0 or n < 5:\n        return False\n    return is_not_prime(n//3) and is_not_prime(n//5)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    is_prime = True\n    if n <= 1:\n        is_prime = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            is_prime = False\n            break\n        elif n % i == 0:\n            is_prime = True\n    if n > 1 and n <= n_prime:\n        is_prime = True\n    if is_prime == True:\n        print(n, \"is not a prime number\")\n    else:\n        print(n, \"is a prime number\")\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2:\n        return True\n    if n<=1:\n        return False\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return_list=[]\n    for i in range(n-1):\n        if len(nums)==1:\n            break\n        if nums[0]>nums[-1]:\n            heapq.heappush(nums,nums[0])\n            heapq.heappop(nums)\n    return nums\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    return_list=[]\n    for i in range(n-1):\n        if len(nums)==1:\n            break\n        if nums[0]<nums[-1]:\n            heapq.heappush(nums,nums[0])\n            heapq.heappop(nums)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        if nums[i]<nums[0]:\n            return nums[0],nums[i]\n    return nums[0],nums[0]\nn,x = map(int,input().split())\nlst=[]\nfor i in range(n):\n    lst.append(int(input()))\nlst.sort()\nprint(lst[n-1])\nprint(hq.heappop(lst)[1]"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 1:\n        return nums\n    else:\n        res = []\n        nums = sorted(nums)\n        for i in range(n):\n            res.append(nums[n-i-1])\n        res.append(nums[-1])\n        return res\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    hq.append([n,n])\n    res = []\n    # populate the list of all numbers\n    for i in range(n-1):\n        # pop the smallest number and insert it into the heap\n        heapq.heappush(hq,hq.pop(0))\n        hq.append([heapq.heappop(hq)[1],heapq.heappop(hq)[0]])\n    return res\n    \ndef test_heap_queue_largest():\n    print(\"Pass\" if (heap_queue_largest([4,5,6,3,2,1,8,9,10],5) == [4,5,6,3,1,2,8,9,10]) else \"Fail\")\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    maxheap = []\n    for num in nums:\n        heapq.heappush(maxheap,num)\n    heapq.heapify(maxheap)\n    for i in range(n-1,0,-1):\n        print(hq.heappop(maxheap))\n    return [i for i in maxheap]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap_nums = []\n    for num in nums:\n        heapq.heappush(heap_nums,num)\n        \n    final_nums = []\n    while len(heap_nums) > 0:\n        final_nums.append(heapq.heappop(heap_nums))\n    return final_nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) == n:\n        return sorted(nums,reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = []\n    heapq.heapify(largest)\n    i = 1\n    while len(nums) > 1:\n        if i >= len(nums):\n            i = 1\n        if len(nums) % 2 == 0:\n            if nums[i] < nums[i-1]:\n                largest.append(nums[i])\n                i += 1\n            else:\n                i += 1\n        else:\n            if nums[i] > nums[i-1]:\n                largest.append(nums[i])\n                i += 1\n            else:\n                i += 1\n    return largest\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create an empty list to store the largest numbers\n    # Create a heap object using heapify()\n    # Create a heap object using heapify()\n    largest = []\n    # Populate the heap with the given numbers\n    for i in nums:\n        heapq.heappush(largest, -i)\n    # Populate the heap with the remaining numbers\n    for _ in range(n-len(nums)):\n        heapq.heappush(largest,hq.heappop(largest))\n    # Return the n largest numbers from the heap\n    return [heq.heappop(largest) for _ in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    for _ in range(n):\n        hq.heappush(nums,hq.heappop(nums))\n    return nums\n    \nn=int(input(\"Enter a number: \"))\nheap_queue_largest([i for i in range(n)],n)"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x % 2 == 0: \n        if x == 0: \n            return True\n        else: \n            return False\n    else: \n        if x == 0: \n            return False\n        else: \n            return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\ndef is_Palindrome(x):\n    '''\n    Test whether the input is a palindrome or not.\n    '''\n    return str(x) == str(x)[::-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0: \n        if x & 1!= 0:\n            return False\n        x = x >> 1\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = x // 2\n    if x % 2 == 0:\n        return y == 1\n    else:\n        return y == 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x % 2 == 0:\n        return False\n    if x % 2!= 0:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n1 = x // 2\n    n2 = n1 % 2\n    if (n1 == n2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # if x is a multiple of 2\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #raise NotImplementedError\n    #Write your code here\n    if x == 0:\n        return True\n    elif x % 2 == 0:\n        return False\n    elif x % 2!= 0:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    divider = 1\n    while x > 0:\n        if x % divider == 0:\n            return True\n        else:\n            divider = divider + 1\n        x = x // divider\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x_sum = 0\n    for i in str(x):\n        x_sum += int(i)\n    return x_sum == x\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    \n    long_text = ''\n    for char in text:\n        if len(char) >= 4:\n            long_text += char\n            \n    return long_text\n    \ndef find_long_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and has letters in the alphabet.\n    '''\n    long_text = ''\n    for char in text:\n        if len(char) >= 4 and char in chars:\n            long_text += char\n    \n    return long_text\n    \ndef find_digits(text):\n    '''\n    Write a function to find all words which consist of digits in the alphabet.\n    '''\n    digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n    long_text = ''\n    for char in text:\n        if char.isdigit():\n            if char not in digits:\n                long_text += char\n    \n    return long_text\n    \ndef find_all_digits(text):\n    '''\n    Write a function to find all words which consist of digits in the alphabet and has letters in the alphabet.\n    '''\n    long_text = ''\n    for char in text:\n        if char.isdigit():\n            if char in digits:\n                long_text += char\n    \n    return long_text\n    \ndef find_digits_and_letters(text):\n    '''\n    Write a function to find all words which consist of digits and have letters in the alphabet.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    long_text = ''\n    for char in text:\n        if char.isdigit() and char.islower():\n            if char not in letters:\n                long_text += char\n        \n    return long_text\n    \ndef find_digits_and_letters_and_digits(text):\n    '''\n    Write a function to find all words which consist of digits and have letters and has digits in the alphabet and has letters in the alphabet.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    long_text = ''\n    for char in text:\n        if char.isdigit() and char.islower() and char.isdigit():\n            if char not in letters:\n                long_text += char\n        \n    return long_text\n    \ndef find_digits_and_letters_and_digits_and_letters(text):\n    '''\n    Write a function to find all words which consist of digits, has letters and has digits in the alphabet and has letters in the alphabet and has digits in the alphabet and has letters in the alphabet.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    long_text = ''\n    for char in text:\n        if char.isdigit() and char.islower() and char.isdigit() and char.islower():\n            if char not in letters:\n                long_text += char\n        \n    return long_text\n    \ndef find_words_with_digits(text):\n    '''\n    Write a function to find all words which consist of digits and has letters in the alphabet and has digits in the alphabet.\n    '''\n    long_text = ''\n    for char in text:\n        if char.isdigit():\n            if char in digits:\n                long_text += char\n    \n    return long_text\n    \ndef find_words_with_letters(text):\n    '''\n    Write a function to find all words which consist of letters in the alphabet and has digits in the alphabet.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    long_text = ''\n    for char in text:\n        if char.isalpha():\n            if char in letters:\n                long_text += char\n    \n    return long_text\n    \ndef find_words_with_letters_and_digits(text):\n    '''\n    Write a function to find all words which consist of letters, has digits, has letters in the alphabet and has digits in the alphabet.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    long_text = ''\n    for char in text:\n        if char.isalpha() and char.isdigit():\n            if char not in letters:\n                long_text += char\n        \n    return long_text\n    \ndef find_words_with_letters_and_digits_and_letters(text):\n    '''\n    Write a function to find all words which consist of letters, has digits, has letters and has digits in the alphabet and has letters in the alphabet and has digits in the alphabet.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    long_text = ''\n    for char in text:\n        if char.isalpha() and char.isdigit():\n            if char in letters:\n                long_text += char\n    \n    return long_text\n    \ndef find_words_with_digits_and_letters_and_digits(text):\n    '''\n    Write a function to find all words which consist of digits, has letters and has digits in the alphabet and has digits in the alphabet and has letters in the alphabet and has digits in the alphabet.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    long_text = ''\n    for char in text:\n        if char.isdigit() and char.islower() and char.isdigit() and char.islower():\n            if char not in letters:\n                long_text += char\n    \n    return long_text\n    \ndef find_words_with_letters_and_digits_and_letters_and_digits(text):\n    '''\n    Write a function to find all words which consist of letters, has digits and has digits in the alphabet and has digits in the alphabet and has letters and has digits in the alphabet and has letters in the alphabet and has digits in the alphabet.\n    '''\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    c = '''\nn    '''\n    if text!='':\n        return c\n    \n    # create a regular expression\n    text = re.sub('(?<=[^A-Za-z0-9])[^A-Za-z0-9]','', text)\n    regex = re.compile(c)\n    \n    # search for all words\n    return regex.findall(text)\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long = re.compile('[a-zA-Z]+')\n    return long.findall(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Return True if the word is at least 4 characters long\n    pattern = r'[^A-Za-z0-9\\s]'\n    \n    # Find the longest word\n    pattern = r'\\b' + pattern + r'\\b'\n    # Matches everything except non-word characters\n    return re.findall(pattern, text)\n    \ndef is_punctuation(ch):\n    '''\n    This function checks if a character is a punctuation character or not.\n    '''\n    # Return True if the character is a punctuation and not whitespace\n    return ch in '~!@#$%^&*()_+|-={}[]|\\:;<=>?[]'\n    \ndef is_email(ch):\n    '''\n    This function checks if a character is an email or not.\n    '''\n    # Return True if the character is an email and not whitespace\n    return ch in '!@#$%^&*()_+|-={}[]|\\:;<=>?[]'\n    \ndef remove_html(ch):\n    '''\n    This function removes any HTML tags from a given character.\n    '''\n    # Remove the HTML tags\n    if '<' in ch and '>' in ch:\n        return ch.replace('<','').replace('>','')\n    else:\n        return ch\n    \ndef is_special_character(ch):\n    '''\n    This function checks if a character is a special character or not.\n    '''\n    # Return True if the character is a special character or not.\n    # The special characters are: \\t, \\n, \\r, \\f, \\v, &, ~, <, >, '\\r, \\n, \\r, \\t, \\f, and \\v.\n    return ch.isalnum() or (ch.isalpha() and ch in '\"`~!@#$%^&*()_+|-={}[]|\\:;<=>?[]') or is_punctuation(ch) or is_email(ch)\n    \ndef is_ascii(ch):\n    '''\n    This function checks if a character is an ascii or not.\n    '''\n    # Return True if the character is an ascii character or not.\n    return ch in 'abcdefghijklmnopqrstuvwxyz'\n    \ndef is_space(ch):\n    '''\n    This function checks if a character is a space or not.\n    '''\n    # Return True if the character is a space or not.\n    return ch in '.,;:!?'\n    \ndef is_punctuation(ch):\n    '''\n    This function checks if a character is a punctuation or not.\n    '''\n    # Return True if the character is a punctuation or not.\n    return ch in '!@#$%^&*()_+|-={}[]|\\:;<=>?[]'\n    \ndef is_email(ch):\n    '''\n    This function checks if a character is an email or not.\n    '''\n    # Return True if the character is an email or not.\n    return ch in '!@#$%^&*()_+|-={}[]|\\:;<=>?[]'\n    \ndef is_question(ch):\n    '''\n    This function checks if a character is a question or not.\n    '''\n    # Return True if the character is a question or not.\n    return ch in '?'\n    \ndef is_space_left(ch):\n    '''\n    This function checks if a character is a space left or not.\n    '''\n    # Return True if the character is a space left or not.\n    return ch in '`~!@#$%^&*()_+|-={}[]|\\:;<=>?[]'\n    \ndef is_number(ch):\n    '''\n    This function checks if a character is a number or not.\n    '''\n    # Return True if the character is a number or not.\n    return ch in '0123456789'\n    \ndef is_letter(ch):\n    '''\n    This function checks if a character is a letter or not.\n    '''\n    # Return True if the character is a letter or not.\n    return ch in 'abcdefghijklmnopqrstuvwxyz'\n    \ndef is_dot(ch):\n    '''\n    This function checks if a character is a dot or not.\n    '''\n    # Return True if the character is a dot or not.\n    return ch in '.,;:!?'\n    \ndef is_exclamation(ch):\n    '''\n    This function checks if a character is an exclamation or not.\n    '''\n    # Return True if the character is an exclamation or not.\n    return ch in '!\"$%&-_()[]{}|\\:\\;<=>?[]'\n    \ndef is_question_question(ch):\n    '''\n    This function checks if a character is an question-question or not.\n    '''\n    # Return True if the character is an question-question or not.\n    return ch in '!?,;:!?'\n    \ndef is_double_exclamation(ch):\n    '''\n    This function checks if a character is a double exclamation or not.\n    '''\n    # Return True if the character is a double exclamation or not.\n    return ch in '!@#$%^&*()_+|-={}[]|\\:;<=>?[]'\n    \ndef is_space_right(ch):\n    '''\n    This function checks if a character is a space right or not.\n    '''\n    # Return True if the character is a space right or not.\n    return ch in '`~!@#$%^&*()_+|-={}[]|\\:;<=>?[]'\n    \ndef is_space_left_dash(ch):\n    '''\n    This function checks if a character is a space left dash or not.\n    '''\n    # Return True if the character is a space left dash or not.\n    return ch in '`~!@#$%^&*()_+|-={}[]|\\:;<=>?[]'\n    \ndef is_space_left_space(ch):\n    '''\n    This function checks if a character is a space left space or not.\n    '''\n    # Return True if the character is a space left space or not.\n    return ch in '\\s'\n    \ndef is_space_right_dash(ch):\n    '''\n    This function checks if a character is a space right dash or not.\n    '''\n    # Return True if the character is a space right dash or not.\n    return ch in '`~!@#$%^&*()_+|-={}[]|\\:;<=>?[]'\n    \ndef is_space_left_space(ch):\n    '''\n    This function checks if a character is a space left space or not.\n    '''\n    # Return True if the character is a space left space or not.\n    return ch in'\\t\\n\\r\\f\\v'\n    \ndef is_spaces_inside_question(ch):\n    '''\n    This function checks if a character is a space inside a question or not.\n    '''\n    # Return True if the character is a space inside a question or not.\n    return ch in '{[(]'\n    \ndef is_spaces_inside_question_question(ch):\n    '''\n    This function checks if a character is a space inside a question-question or not.\n    '''\n    # Return True if the character is a space inside a question-question or not.\n    return ch in '{[(]\\[(]'\n    \ndef is_spaces_inside_exclamation(ch):\n    '''\n    This function checks if a character is a space inside an exclamation or not.\n    '''\n    # Return True if the character is a space inside an exclamation or not.\n    return ch in '{[(]\\[{'\n    \ndef is_spaces_inside_exclamation_question(ch):\n    '''\n    This function checks if a character is a space inside an exclamation-question or not.\n    '''\n    # Return True if the character is a space inside an exclamation-question or not.\n    return ch in '{[(]\\[{[(]\\[{'\n    \ndef is_s"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    d = {}\n    for i in text:\n        d[i] = d.get(i, 0) + 1\n    return d\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # create a regular expression to search for the word\n    pattern = r'(\\w+)\\s\\1+'\n    # using a regex findall method for each word\n    for word in re.findall(pattern, text):\n        # check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # return the word in lower case\n            print(word.lower())\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in range(len(text)):\n        match = re.search(\"[a-zA-Z]{4}\", text[i])\n        if match:\n            print(i, text[i])\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = re.sub(r'\\W','', text.lower())\n    return re.findall(r'[a-zA-Z\\']+\\w+\\s[a-zA-Z\\']+\\s\\d{4}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    for word in words:\n        if len(word) < 4:\n            return word\n    \ndef get_short_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef find_short_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_common_words(text, text1, text2):\n    '''\n    Write a function to find all words which are common to a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef find_common_words(text1, text2):\n    '''\n    Write a function to find all words which are common to a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text1)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_first_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_last_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[-1]\n    else:\n        return 'N/A'\n        \ndef get_words_with_short_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_words_with_short_word_with_case_insensitive(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_common_words_with_short_word(text1, text2):\n    '''\n    Write a function to find all words which are common to a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text1)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_common_words_with_short_word_with_case_insensitive(text1, text2):\n    '''\n    Write a function to find all words which are common to a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text1)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_first_word_with_short_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_last_word_with_short_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[-1]\n    else:\n        return 'N/A'\n        \ndef get_words_with_short_word_and_case_insensitive(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_words_with_short_word_and_case_insensitive(text1, text2):\n    '''\n    Write a function to find all words which are common to a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text1)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_common_words_with_short_word_and_case_insensitive(text1, text2):\n    '''\n    Write a function to find all words which are common to a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text1)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_common_words_with_short_word_and_case_insensitive(text1, text2):\n    '''\n    Write a function to find all words which are common to a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text1)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_short_words_in_text(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_words_in_text(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_short_word_in_text(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    pattern = '\\w+'\n    words = re.findall(pattern, text)\n    \n    if len(words) > 0:\n        return words[0]\n    else:\n        return 'N/A'\n        \ndef get_short_word_in_text_with_case_insensitive(text):\n    '''\n    Write a function to find all words which are at least 4 character"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_set = set()\n    for word in text.split():\n        word_set.add(word)\n    long_words = set()\n    for word in word_set:\n        #print(word)\n        i = 0\n        while i < len(word):\n            #print(word[i])\n            if len(word[i]) >= 4:\n                if word[i] not in long_words:\n                    long_words.add(word[i])\n            i += 1\n    return long_words\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = []\n    for num in nums:\n        square_nums.append(num*num)\n    return square_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # dfs\n    sq_num = []\n    for num in nums:\n        sq_num.append(num**2)\n    return sq_num\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num**2)\n    return square_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num * num)\n    return square_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares=[]\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #convert the list to a set\n    squares = set(nums)\n    #return the squares\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    prev = ''\n    for char in str:\n        if char == prev:\n            rotations += 1\n        else:\n            rotations = 0\n        prev = char\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    elif n > 4:\n        return n*(n+1)//2\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            rotations += 1\n        else:\n            rotations = 0\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            rotations+=1\n    return rotations \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    rotations = []\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)):\n            str1 = str[i:j+1]\n            if (len(str1)==len(str)):\n                count+=1\n                rotations.append(str1)\n                str1 = str[i+1:j+1]\n                if (len(str1)==len(str)):\n                    count+=1\n                    rotations.append(str1)\n    return count\nprint(find_Rotations(str))\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    d={}\n    for i in range(len(str)-1):\n        for j in range(i+1,len(str)):\n            count=0\n            if str[i]!=str[j]:\n                count+=1\n            if count in d:\n                d[count].append(str[i])\n            else:\n                d[count]=[str[i]]\n    count=0\n    for key in d:\n        if len(d[key])>count:\n            count=len(d[key])\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    rotations = 0\n    for i in range(len(str) - 1):\n        if str[i]!= str[i+1]:\n            count += 1\n            if count > rotations:\n                rotations = count\n        count = 0\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    ans = 0\n    for i in range(len(str)-1):\n        if (str[i] == str[i+1] and i > ans) or (str[i] == str[i+2] and i > ans):\n            ans = i + 1\n    return ans\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)):\n        if str[i] == str[i-1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s: \n        return\n    s.replace(ch,'',1)\n    s.replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Initialize an empty string\n    s = ''\n    # Iterate over the string\n    for i in range(len(s)):\n        # If current character is not the first or last\n        if s[i]!= ch:\n            # Append the character at the end of the string\n            s += ch\n    # Return the new string\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occurences = s.count(ch) #returns the number of occurences of the given character in string\n    if occurences > 1:\n        return s.replace(s[occurences-1],'') # replace the first occurrence\n    else:\n        return s\n    \nprint(remove_Occ('python','t')) # Should be 'pt'\nprint(remove_Occ('flower','r')) # Should be 'fl'\nprint(remove_Occ('flower','e')) # Should be 'fl'\nprint(remove_Occ('pyth', 'p')) # Should be 'pp"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ=0\n    for i in range(len(s)):\n        if ch == s[i] :\n            occ += 1\n            if i==len(s)-1:\n                print(occ)\n        else :\n            if occ > 0:\n                print(s[i])\n                occ -=1\n    return\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        print(\"Removed\")\n        print(s.replace(ch,''))\n    else:\n        print(\"No\")\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # pass # delete this line\n    pass\n    #pass # delete this line\n    pass\n    #pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    #pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this line\n    pass\n    # pass # delete this lin"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ=''\n    s=list(s)\n    i=0\n    if ch not in s:\n        return occ\n    elif ch==s[i]:\n        return s[0:i]+s[i+1:]\n    else:\n        while i<len(s):\n            if ch==s[i]:\n                s[i]=s[i]-1\n                if i==len(s)-1:\n                    i=i-1\n                    occ=occ+s[i]\n                else:\n                    occ=occ+s[i]\n            else:\n                i=i+1\n    return occ\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    i = l-1\n    if(ch == s[i]):\n        i = i-1\n        if(i<0):\n            i = 0\n    else:\n        i = 0\n        while(i<=l-1 and s[i]==s[i+1]):\n            i = i+1\n    return s[:i+1]+s[i+2:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not (ch in s):\n        return s\n    else:\n        return s[:s.index(ch) - 1] + s[s.index(ch)+1:]\n    \ndef make_Occ(s): \n    '''\n    Write a python function to make a new string containing every occurrence of a given character.\n    '''\n    new_str = ''\n    for ch in s:\n        new_str += ch * 2 + ch\n    return new_str\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key = lambda x: x[0])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sort_asc(M,l):\n        for i in range(0,len(l)-1):\n            for j in range(0,len(l[i])-1):\n                if l[i][j]>l[i][j+1]:\n                    l[i][j],l[i][j+1] = l[i][j+1],l[i][j]\n        for i in range(len(l)):\n            for j in range(i+1,len(l)):\n                if l[i][j]<l[j][i]:\n                    l[i],l[j] = l[j],l[i]\n    \n        for i in range(0,len(M)):\n            for j in range(0,len(M[i])-1):\n                if M[i][j]>M[i][j+1]:\n                    M[i][j],M[i][j+1] = M[i][j+1],M[i][j]\n                \n    M = sorted(M, key=lambda x: x[i])\n    M = [x for x in M if x!= []]\n    \n    sort_asc(M,M)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n=len(M)\n    for i in range(n):\n        M[i].sort(reverse=True)\n    for i in range(n):\n        M[i].sort()\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = M.copy()\n    for i in range(len(M)):\n        M[i] = [x.sum() for x in M[i]]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    max_sum = max(M[0])\n    for row in range(n):\n        for col in range(row + 1, n):\n            if M[row][col] > max_sum:\n                M[row], M[col] = M[col], M[row]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sums = {}\n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M[i])):\n            sum += M[i][j]\n            sums[sum] = (i,j)\n        for k in range(i+1, len(M)):\n            for j in range(len(M[k])):\n                if M[k][j] > sum:\n                    sum = M[k][j]\n                    i, j = sums[sum][0], sums[sum][1]\n    return [[M[i][j] for i, j in sorted(sums.keys())]]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    arr = np.array(M)\n    arr.sort(key = lambda x : x[0])\n    return arr\n    \ndef main():\n    '''\n    Run the program\n    '''\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n        [12,13,14],\n        [15,16,17],\n        [18,19,20],\n        [0,0,0],\n        [0,0,0]\n    ]\n    print(sort_matrix(M))\n    print('\\n')\n    \n    M = [\n        [1,5,7],\n        [2,3,4],\n        [6,8,10],\n        [0,9,11],\n    "
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        # checking if the current element is zero\n        if M[i][i] == 0:\n            # if yes, then move on to the next row\n            if M[i][i+1] == 0:\n                pass\n            elif M[i][i+1] > M[i][i]:\n                # then move on to the next row\n                M[i][i+1], M[i][i] = M[i][i], M[i][i+1]\n                M[i][i], M[i][i+1] = 0, 0\n            else:\n                # if the sum of the rows is greater than 0, then move on to the next row\n                for j in range(i, len(M)):\n                    if M[j][i] > 0:\n                        M[j][i] = M[i][i] - M[i][i]\n                        M[j][i+1] = 0\n                        M[j][i] = M[i][i]\n                        M[j][i+1] = 0\n                        M[j][i] = 0\n                        M[j][i+1] = 0\n                    else:\n                        M[j][i] = M[i][i]\n                        M[j][i+1] = 0\n                        M[j][i] = 0\n                        M[j][i+1] = 0\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n - i):\n            if M[j][i]!= 0:\n                M[j][i] += M[j][i]\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if M[j][i] > M[j + 1][i + 1]:\n                M[j][i], M[j + 1][i + 1] = M[j + 1][i], M[j][i]\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    t = ((b*b)/2) + ((h*h)/2)\n    print(f'The volume of the rectangular prism is {t}')\n    return t\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    c = (b*h)/2\n    return abs(1/((c/l)+(c/b)))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l == 0 : return 0\n    else :\n        m = b*h/l\n        if l/2 <= m : \n            return (l*l)*m\n        else :\n            return (2*h/l)*(1-m) + (2*h/l)*m"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # A program that takes an input from the user\n    # calculates the volume of a triangle\n    # if the input is 1 then the volume is the same as the\n    # equivalent of a square\n    # if the input is 3 then the volume is 5^3\n    # if the input is 2 then the volume is 5^2\n    # if the input is 5 then the volume is 5^2\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (b**2+l**2)/2\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #HERE WE DEFINE VARIABLES TO HOLD THE VALUES OF\n    #THE LOWER AND UPPER BOX AND THE RADIUS\n    A = h\n    B = h\n    C = h\n    d = 0\n    #HERE WE USE THE FUNCTION TO CALCULATE THE LATERAL\n    #DIRECTION AND THE VOLUME OF THE TRIANGULAR PRISM\n    for i in range(1,int(l/2)) :\n        #IF DIFFERENT SUBFRAMES ARE REFLEXES\n        #FOR NOW I JUST HANDLE THE PRIMES \n        #SINCE THEY ARE REFLEXES I HAVE TO \n        #CALCULATE THE COORDINATES OF THE SUBFRAME\n        if ((b>i) and (b<(i+1))):\n            A = A+d\n            d = A-b\n        elif ((b>i) and (b<(i+2))) :\n            B = B+d\n            d = B-b\n        elif ((b>i) and (b<(i+3))) :\n            C = C+d\n            d = C-b\n    print(\"Volume of the triangle = \",(A*B*C))\n    #THIS IS THE PRINT OF THE VALUES OF THE FUNCTION\n    #HERE I HAVE TO DO THE SAME FOR THE SUBFRAMES\n    #TO GIVEN THE VALUES OF THE LOWER AND UPPER BOX\n    #AND THE RADIUS\n    print(\"(\",(A), \",\", (B), \",\", (C), \")\")\n    #THIS IS THE PRINT OF THE VALUES OF THE FUNCTION\n    #HERE I HAVE TO DO THE SAME FOR THE SUBFRAMES\n    #TO GIVEN THE VALUES OF THE LOWER AND UPPER BOX\n    #AND THE RADIUS\n    print(\"(\",(d), \",\", (A), \",\", (B), \",\", (C), \")\")\n    "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    n = 0\n    l = l * 3\n    b = b * 3\n    h = h * 3\n    for i in range(1,l) : \n        n = n + h * i\n    for i in range(1,b) : \n        n = n + (h / 2) * i \n    return n\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (4*b*h)/3\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h)/(l*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # base case\n    if l < 0 : return 0\n    # end base case\n    if l == 0 : return b\n    # base case\n    if b < 0 : return 0\n    # end base case\n    if b == 0 : return h\n    # base case\n    if b < h : return b\n    # end base case\n    if h < l : return 0\n    # end base case\n    # base case\n    if h == l : return b + b + b + b + b\n    # end base case\n    else : return 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex_pattern = '([a-zA-Z0-9_]{1,})|([A-Za-z]{1,})'\n    return re.search(regex_pattern, text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Create a new string from the original string to split into lowercase and underscore characters.\n    text_lowercase = re.sub(r\"\\W\", \"\", text)\n    # Create a new string from the original string to split into lowercase and underscore characters.\n    text_underscore = re.sub(r\"[_]\", \" \", text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) < 1:\n        return False\n    if not text.isalpha():\n        return False\n    words = text.split(' ')\n    for i in range(0,len(words)):\n        for j in range(0,len(words[i])):\n            if words[i][j].isalpha() and words[i][j]!= '_' and words[i][j]!= '-' and words[i][j]!= '_':\n                return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in range(len(text)):\n        if text[i] not in '_':\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # E.g.\n    # \"The quick brown fox jumps over the lazy dog\" -> \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    # \"The quick brown fox jumps over the lazy piggybank\" -> \"the_quick_brown_fox_jumps_over_the_lazy_piggybank\"\n    # \"The quick brown fox jumps over the lazy piggybank\" -> \"the_quick_brown_fox_jumps_over_the_lazy_piggybank\"\n    # \"The quick brown fox jumps over the lazy piggybank\" -> \"the_quick_brown_fox_jumps_over_the_lazy_piggybank\"\n    # \"The quick brown fox jumps over the lazy piggybank\" -> \"the_quick_brown_fox_jumps_over_the_lazy_piggybank\"\n    \n    # Stack solution\n    return len(re.findall('[a-zA-Z_]+', text))==0 or len(re.findall('[A-Z]+', text))==0\n    # return len(re.findall('[a-zA-Z_]+', text))==0 or len(re.findall('[A-Z]+', text))==0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lower = text.lower()\n    num_lower = 0\n    for i in range(len(text_lower)):\n        if text_lower[i].isalpha() and text_lower[i].islower() and text_lower[i].lower()!= '_':\n            num_lower += 1\n    if num_lower == 0 and len(text_lower) > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text == None:\n        return False\n    if len(text) == 0:\n        return False\n    pattern = r'[^A-Za-z0-9]*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(r'[a-z0-9]\\w*_[a-z0-9]')\n    return regex.findall(text)!= []\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase = []\n    for word in text:\n        text_lowercase.append(word.lower())\n    \n    lowercase_text = ''.join(text_lowercase)\n    if '_' in lowercase_text:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower() in re.sub(\"[^a-z0-9_]\", \" \", text.lower())\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter=0\n    if len(a)==0:\n        return 0\n    elif len(a)!=0:\n        for i in range(0,len(a)):\n            perimeter+=a[i]*a[i]\n        return perimeter\n        # perimeter=0\n        # for i in range(0,len(a)):\n        #     perimeter+=a[i]*a[i]\n        # return perimeter\n    else:\n        return \"Empty list\"\n    # return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # return (4 * a) + (4 * a + 1) + (4 * a + 1) + (4 * a + 1) + (4 * a + 1)\n    # return sum(range(1, a + 1))\n    return ((4 * a) + (4 * a + 1) + (4 * a + 1) + (4 * a + 1) + (4 * a + 1))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    \n    return (((a**2)*4))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a<=0:\n        raise Exception('Side length of a square should be positive!')\n    return (4*a*a)\n    #return 0\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4*a) + (2*a + 1)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n    \n    \n    \ndef cube_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a cube given its side length as input.\n    '''\n    perimeter = 6 * a\n    return perimeter\n    \n    \n    \ndef cube(a):\n    '''\n    Write a function that returns the perimeter of a cube given its side length as input.\n    '''\n    perimeter = 3 * a\n    return perimeter\n    \n    \n    \ndef cylinder_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a cylinder given its radius as input.\n    '''\n    cylinder_perimeter = 2 * a\n    return cylinder_perimeter\n    \n    \n    \n    \ndef rectangle_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a rectangle given its side length as input.\n    '''\n    rectangle_perimeter = a * 4\n    return rectangle_perimeter\n    \n    \n    \ndef triangle_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a triangle given its base as input.\n    '''\n    triangle_perimeter = 3 * a\n    return triangle_perimeter\n    \n    \n    \ndef triangle(a):\n    '''\n    Write a function that returns the perimeter of a triangle given its base as input.\n    '''\n    triangle_perimeter = a * 3\n    return triangle_perimeter\n    \n    \n    \ndef rectangle(a):\n    '''\n    Write a function that returns the perimeter of a rectangle given its side length as input.\n    '''\n    rectangle_perimeter = a * 4\n    return rectangle_perimeter\n    \n    \n    \n    \ndef triangle(a):\n    '''\n    Write a function that returns the perimeter of a triangle given its base as input.\n    '''\n    triangle_perimeter = a * 3\n    return triangle_perimeter\n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 6\n    return parallelogram_perimeter\n    \n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 3\n    return parallelogram_perimeter\n    \n    \n    \ndef rectangle(a):\n    '''\n    Write a function that returns the perimeter of a rectangle given its side length as input.\n    '''\n    rectangle_perimeter = a * 4\n    return rectangle_perimeter\n    \n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 3\n    return parallelogram_perimeter\n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 4\n    return parallelogram_perimeter\n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 3\n    return parallelogram_perimeter\n    \n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 4\n    return parallelogram_perimeter\n    \n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 3\n    return parallelogram_perimeter\n    \n    \n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 4\n    return parallelogram_perimeter\n    \n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 3\n    return parallelogram_perimeter\n    \n    \n    \n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 4\n    return parallelogram_perimeter\n    \n    \n    \n    \n    \n    \n    \n    \ndef parallelogram(a):\n    '''\n    Write a function that returns the perimeter of a parallelogram given its side length as input.\n    '''\n    parallelogram_perimeter = a * 3\n    return parallelogram_perimeter\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 0\n    for i in range(a):\n        for j in range(i+1):\n            p += 2*i + j**2\n    return p\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a**2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.replace(' ','').split(',')\n    for i in range(len(string)): \n        for j in range(len(string[i])): \n            if string[i][j] == '-': \n                string[i][j] = ''\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string == '': \n        return ''\n    if len(string) == 0: \n        return []\n    if len(string) < 2: \n        return list(string)\n    i = 0\n    p = list(string)\n    while(i < len(string)):\n        if i+1 < len(string) and p[i] == p[i+1]: \n            del p[i]\n            i -= 1\n        else: \n            p[i] = p[i+1]\n            del p[i+1]\n        i += 1\n    return list(p)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for i in string:\n        if i in l:\n            l.remove(i)\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_str = list(string)\n    first_str.pop(0)\n    return \"\".join(first_str)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_no = len(string)\n    result_string = \"\"\n    for i in range(chars_no):\n        if i < chars_no -1 and string[i] == string[i+1]:\n            pass\n        else:\n            result_string += string[i]\n    return result_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    for i in range(len(string)):\n        if string[i] in string:\n            lst.append(string[i])\n    return lst\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return_list = []\n    for i in range(len(string)):\n        if string[i] in string_list:\n            return_list.append(string[i])\n        else:\n            return_list.append(string[i])\n    return ''.join(return_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    string_list = list(string)\n    for i in string_list:\n        if i in string:\n            lst.append(i)\n    return ''.join(lst)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Solution 1.\n    return [char for char in string if char in string[:]] \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if num in arraynums:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # loop through the array and find the duplicates\n    # print duplicate values\n    # if no duplicate, return true\n    # else, return false\n    dup = set(arraynums)\n    if len(dup) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array_dup = arraynums.copy()\n    for n in arraynums:\n        index = array_dup.index(n)\n        array_dup.remove(n)\n        array_dup.insert(index, n)\n    if array_dup == arraynums:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    duplicates = []\n    for number in array:\n        if number in duplicates:\n            return True\n        else:\n            duplicates.append(number)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert dup(arraynums) == False\n    assert dup([1,1,2,3,3]) == True\n    assert dup([5,1,6,7,8,8,9,9,10,10,10,11,11,11,11,11,11,11,11]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if num in arraynums:\n            print(f\"{num} is a duplicate\")\n            print(arraynums)\n        else:\n            print(f\"{num} is not a duplicate\")\n            print(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Solution 1\n    # Time = O(N^2)\n    # Space = O(N)\n    # using a dictionary, set the first element and count the occurrence of duplicate element\n    # key = array[0]\n    # value = count_occurrence(array, key)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # your code goes here\n    result = []\n    for i in arraynums:\n        if i not in result:\n            result.append(i)\n    return result\n    # test case 0: arraynums is [1, 1, 1, 2, 2, 3, 3, 3]\n    # expected output: True\n    #\n    # test case 1: arraynums is [1, 1, 1, 2, 2, 3, 3, 3]\n    # expected output: False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    answer = duplicate(arraynums)\n    assert answer, \"Array contains duplicate numbers\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # arraynums = [3,1,1,2,3,3]\n    duplicates = set()\n    for x in arraynums:\n        if x in duplicates:\n            return True\n        else:\n            duplicates.add(x)\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_bacon(x): \n    '''\n    Write a function to check if the given number is bacon or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_baggage(x): \n    '''\n    Write a function to check if the given number is bagglage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_car(x): \n    '''\n    Write a function to check if the given number is car or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_planted(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_filled(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_percolated(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_removed(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_covered(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_planted_planted(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_planted(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_planted_planted(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_planted_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_planted_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_planted_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_planted_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x): \n    '''\n    Write a function to check if the given number is garbage or not.\n    '''\n    \n    if x%2==0:\n        return True\n    else:\n        return False\n    \ndef is_garbage_plant_plant_plant(x)"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x >= 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 2:\n        return False\n    elif x == 3 or x == 4:\n        return True\n    elif x > 3 and x <= 5:\n        return True\n    elif x == 5:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        return False\ndef is_wood(x): \n    '''\n    Write a function to check if the given number is wood or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        return False\ndef check_money(x): \n    '''\n    Write a function to check if the given number is money or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 200 and x <= 400:\n        return \"Woodball\"\n    elif x >= 600 and x <= 800:\n        return \"Dirtball\"\n    elif x >= 1100 and x <= 1200:\n        return \"Natural\"\n    else:\n        return \"Unknown\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x<2:\n        return False\n    elif x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    for i in range(0, num, 1):\n        rev = rev * 10 + int(str(num)[i])\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < 0 and num * -1 % 2!= 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return -1\n    else:\n        if num % 2 == 0:\n            print(\"{} is a odd number\".format(num))\n        elif num % 2!= 0:\n            print(\"{} is a even number\".format(num))\n        else:\n            print(\"{} is even\".format(num))\n        return num"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    temp = num\n    rev = temp[::-1]\n    if(int(num) == rev):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return False\n    elif num == 1:\n        return True\n    elif num == 2:\n        return False\n    elif num < 2:\n        return False\n    else:\n        i = 3\n        while i < num:\n            if num % i == 0:\n                return False\n            i += 2\n        return True\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num > 10:\n        return rev(num-1)\n    else:\n        return str(num) + str(num)\n    "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return rev(num - 1)\n    \nprint(rev(42))\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <= 0:\n        return \"no\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return(num * 2)\n    "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return True\n    else:\n        if num%2==0:\n            return False\n        else:\n            return True\ndef lcm(num1,num2):\n    '''\n    Write a python function to compute the Least Common Multiple.\n    '''\n    if num1==0 and num2==0:\n        return 0\n    elif num1>0 and num2>0:\n        return num1*num2\n    else:\n        return 1\ndef mdiv(num1,num2):\n    '''\n    Write a python function to compute the remainder of the division.\n    '''\n    return num1%num2\ndef isprime(n):\n    '''\n    Write a python function to check if a given number is a prime number or not.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef add(a,b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b\ndef isodd(n):\n    '''\n    Write a python function to check if a given number is odd or not.\n    '''\n    if n%2==1:\n        return True\n    else:\n        return False\ndef fib(n):\n    '''\n    Write a python function to print the series from 1 to n.\n    '''\n    if n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\ndef perm(n):\n    '''\n    Write a python function to find all permutations of a given sequence of numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return fib(n-1)\ndef factorial(n):\n    '''\n    Write a python function to find a factorial number for any given number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef isprime(n):\n    '''\n    Write a python function to check if a given number is a prime number or not.\n    '''\n    if n==2:\n        return True\n    elif n==3:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        return True\ndef coin(n):\n    '''\n    Write a python function to find the nth coin.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return coin(n-1)+coin(n-2)\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef primes(n):\n    '''\n    Write a python function to find all prime numbers up to a given number.\n    '''\n    if n<=1:\n        return []\n    else:\n        lst=[]\n        for i in range(2,n):\n            if isprime(i):\n                lst.append(i)\n        return lst\ndef prime(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef f(n):\n    '''\n    Write a python function to return the factorial of any number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*f(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to return the fibonacci sequence of any number.\n    '''\n    if n==1:\n        return 0\n    else:\n        a=0\n        b=1\n        c=1\n        for i in range(n-1):\n            a,b,c=b,c,a+b\n        return c\ndef palindrome(n):\n    '''\n    Write a python function to check if a given number is a palindrome or not.\n    '''\n    if n==n[::-1]:\n        return True\n    else:\n        return False\ndef reverse(a):\n    '''\n    Write a python function to reverse a given number.\n    '''\n    if len(a)==1:\n        return a\n    else:\n        lst=[]\n        lst.append(a[1])\n        for i in range(2,len(a)):\n            lst.append(a[i])\n        return lst\ndef ispalindrome(n):\n    '''\n    Write a python function to check if a given number is a palindrome or not.\n    '''\n    if n==reverse(n):\n        return True\n    else:\n        return False\ndef fibonacci_prime(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci_prime(n-1)+fibonacci_prime(n-2)\ndef fibonacci_recursive(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci_recursive(n-1)+fibonacci_recursive(n-2)\ndef fibonacci_recursive_prime(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci_recursive_prime(n-1)+fibonacci_recursive_prime(n-2)\ndef ispalindrome(n):\n    '''\n    Write a python function to check if a given number is a palindrome or not.\n    '''\n    if n==reverse(n):\n        return True\n    else:\n        return False\ndef reverse_string(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    if len(str)==0:\n        return str\n    else:\n        return reverse_string(str[1:])+str[0]\ndef test(n):\n    print(n)\n    print(bin(n)[2:].zfill(8))\n    print(n==bin(n)[2:].zfill(8)[-1])\n    print(n==bin(n)[2:].zfill(8)[-1][::-1])\ndef lcm(a,b):\n    '''\n    Write a python function to compute the least common multiple.\n    '''\n    if b==0:\n        return a\n    elif b>0:\n        return lcm(a,b//a)\n    else:\n        return 1\ndef add_strings(a,b):\n    '''\n    Write a python function to add two strings together.\n    '''\n    if len(a)<len(b):\n        return a+b\n    else:\n        return a+b+b\ndef add_strings_stack(a,b):\n    '''\n    Write a python function to add two strings together.\n    '''\n    stack=[]\n    c=a\n    if len(b)<len(a):\n        c+=b\n    else:\n        c+=b\n    while len(c)>0:\n        x=c.pop(0)\n        if x not in stack:\n            stack.append(x)\n    if len(stack)==0:\n        return a\n    else:\n        return stack[-1]+b\ndef add_strings_stack_stack(a,b):\n    '''\n    Write a python function to add two strings together.\n    '''\n    stack=[]\n    c=a\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 1 : \n        return arr[0]\n    if n == 2 : \n        return max(arr)\n    return find_Max_Num(arr[1:n])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    \n    #Create a set to remove duplicate numbers from array\n    set_num = set(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = 0\n    for i in arr : \n        if i > largest :\n            largest = i\n    return largest\ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = 0\n    num = 0\n    for i in arr :\n        if i > largest :\n            largest = i\n            num = arr.index(i)\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(len(arr)) :\n        if arr[i] > max :\n            max = arr[i]\n    return max \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return arr.find(max(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize a set to store the digits\n    digits = set(arr)\n    # Initialize a count variable to keep track of the number of digits in a group\n    count = 1\n    # Initialize the max_num variable to hold the final maximum number\n    max_num = 0\n    # Iterate through digits to find the smallest number\n    for digit in digits :\n        count += 1\n        # If this digit is in the list, keep adding to the max_num\n        if digit in arr :\n            if count % 2 == 0 :\n                # Increment the max_num by the remainder of the count\n                max_num += (count//2)\n            else :\n                # If this digit is odd, increment the max_num by the count of that digit\n                max_num += count\n            # If this number is greater than the maximum number, set the new max_num as the new max_num\n            if max_num > max_num :\n                max_num = max_num\n    # Return the max_num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = 0\n    for num in arr : \n        if num > Max_Num : \n            Max_Num = num \n    return Max_Num \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : return -1\n    max_num = 0\n    for i in range(len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Check if there are only one digit or not\n    if len(arr)==1 :\n        return int(arr[0])\n    \n    # If there are more than one digit\n    if len(arr)>=2 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in arr[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<min :\n                min = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the smallest number of digits\n        return min*10 + max\n        \n    # Check if there are two digits or not\n    if len(arr)>=3 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in arr[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<min :\n                min = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the smallest number of digits\n        return max*10 + min\n        \n    # Check if there are three digits or not\n    if len(arr)>=4 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in arr[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<min :\n                min = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the smallest number of digits\n        return max*10 + min\n        \ndef find_Min_Num2(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    \n    # Check if there are only one digit or not\n    if len(arr)==1 :\n        return arr[0]\n    \n    # If there are more than one digit\n    if len(arr)>=2 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in arr[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<minimum :\n                minimum = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the minimum number of digits\n        return minimum\n        \n    # Check if there are two digits or not\n    if len(arr)>=3 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in arr[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<minimum :\n                minimum = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the minimum number of digits\n        return max\n        \n    # Check if there are three digits or not\n    if len(arr)>=4 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in arr[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<minimum :\n                minimum = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the minimum number of digits\n        return max\n        \ndef main():\n    \n    # Check if there are only one digit or not\n    if len(sys.argv)<2 :\n        print(\"Please enter a valid number\")\n        return\n    \n    # Check if there are two digits or not\n    if len(sys.argv)>=2 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in sys.argv[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<minimum :\n                minimum = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the minimum number of digits\n        return min(minimum,max)\n    \n    # Check if there are three digits or not\n    if len(sys.argv)>=3 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in sys.argv[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<minimum :\n                minimum = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the minimum number of digits\n        return max\n        \ndef main2():\n    \n    # Check if there are only one digit or not\n    if len(sys.argv)==1 :\n        print(\"Please enter a valid number\")\n        return\n    \n    # Check if there are two digits or not\n    if len(sys.argv)>=2 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in sys.argv[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<minimum :\n                minimum = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the minimum number of digits\n        return max\n        \ndef main3():\n    \n    # Check if there are only two digits or not\n    if len(sys.argv)==1 :\n        print(\"Please enter a valid number\")\n        return\n    \n    # Check if there are two digits or not\n    if len(sys.argv)>=2 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in sys.argv[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<minimum :\n                minimum = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the minimum number of digits\n        return max\n        \n        \n        \n    # Check if there are three digits or not\n    if len(sys.argv)>=3 :\n        \n        # Compute minimum and maximum number of digits\n        minimum = sys.maxsize\n        max = 0\n        for num in sys.argv[1:] :\n            \n            # Check if there are numbers of which one digit is bigger than\n            # the minimum number of digits\n            if num<minimum :\n                minimum = num\n            \n            # Check if there are numbers of which one digit is smaller than\n            # the maximum number of digits\n            if num>max :\n                max = num\n        \n        # Return the minimum number of digits\n        return max\n        \ndef main4():\n    \n    # Check if there are only two digits or not\n    if len(sys.argv)==1 :\n        print(\"Please enter a valid number\")\n        return\n    \n    # Check if there are two digits or not\n    if len(sys.argv"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    signs = 0\n    if x > y:\n        signs = 1\n    elif x < y:\n        signs = -1\n    else:\n        signs = 0\n    return signs\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return not x>y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x > y and x < y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0) and (y<0):\n        return False\n    elif (x<0) and (y>0):\n        return True\n    elif (x>0) and (y<0):\n        return True\n    elif (x>0) and (y>0):\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = str(x)\n    y = str(y)\n    x = x.replace('.', '-')\n    y = y.replace('.', '-')\n    if x[0] == '-':\n        if y[0] == '-':\n            return True\n    if x[0] == '+':\n        if y[0] == '+':\n            return True\n    else:\n        return False\n    \ndef check_all(c, a, b, sign): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if sign == '+':\n        if c[0] > a[0] and c[1] > b[0]:\n            return True\n    if sign == '-':\n        if c[0] < a[0] and c[1] < b[0]:\n            return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>y):\n        return x-y\n    elif(x<y):\n        return y-x\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return x<y\n    else:\n        return y<x\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = float(x)\n    y = float(y)\n    if x > y:\n        print(\"x is bigger than y\")\n    elif x < y:\n        print(\"x is smaller than y\")\n    else:\n        print(\"Both x and y are the same\")\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x==y:\n        return False\n    if (x>y):\n        return True\n    elif (x<y):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return(True)\n    elif y > x:\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #This function returns the first nth square of the number\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 6\n    elif n == 3: \n        return 9\n    elif n == 4: \n        return 12\n    elif n == 5: \n        return 15\n    elif n == 6: \n        return 18\n    elif n == 7: \n        return 21\n    elif n == 8: \n        return 24\n    elif n == 9: \n        return 27\n    elif n == 10: \n        return 30\n    elif n == 11: \n        return 33\n    elif n == 12: \n        return 36\n    elif n == 13: \n        return 39\n    elif n == 14: \n        return 42\n    elif n == 15: \n        return 45\n    elif n == 16: \n        return 48\n    elif n == 17: \n        return 51\n    elif n == 18: \n        return 54\n    elif n == 19: \n        return 57\n    elif n == 20: \n        return 60\n    elif n == 21: \n        return 63\n    elif n == 22: \n        return 66\n    elif n == 23: \n        return 69\n    elif n == 24: \n        return 72\n    elif n == 25: \n        return 75\n    elif n == 26: \n        return 78\n    elif n == 27: \n        return 81\n    elif n == 28: \n        return 84\n    elif n == 29: \n        return 87\n    elif n == 30: \n        return 90\n    elif n == 31: \n        return 93\n    elif n == 32: \n        return 96\n    elif n == 33: \n        return 99\n    elif n == 34: \n        return 102\n    elif n == 35: \n        return 105\n    elif n == 36: \n        return 108\n    elif n == 37: \n        return 111\n    elif n == 38: \n        return 114\n    elif n == 39: \n        return 117\n    elif n == 40: \n        return 120\n    elif n == 41: \n        return 123\n    elif n == 42: \n        return 126\n    elif n == 43: \n        return 129\n    elif n == 44: \n        return 132\n    elif n == 45: \n        return 135\n    elif n == 46: \n        return 138\n    elif n == 47: \n        return 141\n    elif n == 48: \n        return 144\n    elif n == 49: \n        return 147\n    elif n == 50: \n        return 150\n    elif n == 51: \n        return 153\n    elif n == 52: \n        return 156\n    elif n == 53: \n        return 159\n    elif n == 54: \n        return 162\n    elif n == 55: \n        return 165\n    elif n == 56: \n        return 168\n    elif n == 57: \n        return 171\n    elif n == 58: \n        return 174\n    elif n == 59: \n        return 177\n    elif n == 60: \n        return 180\n    elif n == 61: \n        return 183\n    elif n == 62: \n        return 186\n    elif n == 63: \n        return 189\n    elif n == 64: \n        return 192\n    elif n == 65: \n        return 195\n    elif n == 66: \n        return 198\n    elif n == 67: \n        return 201\n    elif n == 68: \n        return 204\n    elif n == 69: \n        return 207\n    elif n == 70: \n        return 210\n    elif n == 71: \n        return 213\n    elif n == 72: \n        return 216\n    elif n == 73: \n        return 219\n    elif n == 74: \n        return 222\n    elif n == 75: \n        return 225\n    elif n == 76: \n        return 228\n    elif n == 77: \n        return 231\n    elif n == 78: \n        return 234\n    elif n == 79: \n        return 237\n    elif n == 80: \n        return 240\n    elif n == 81: \n        return 243\n    elif n == 82: \n        return 246\n    elif n == 83: \n        return 249\n    elif n == 84: \n        return 252\n    elif n == 85: \n        return 255\n    elif n == 86: \n        return 258\n    elif n == 87: \n        return 261\n    elif n == 88: \n        return 264\n    elif n == 89: \n        return 267\n    elif n == 90: \n        return 270\n    elif n == 91: \n        return 273\n    elif n == 92: \n        return 276\n    elif n == 93: \n        return 279\n    elif n == 94: \n        return 282\n    elif n == 95: \n        return 285\n    elif n == 96: \n        return 288\n    elif n == 97: \n        return 291\n    elif n == 98: \n        return 294\n    elif n == 99: \n        return 297\n    elif n == 100: \n        return 300\n    elif n == 101: \n        return 303\n    elif n == 102: \n        return 306\n    elif n == 103: \n        return 309\n    elif n == 104: \n        return 312\n    elif n == 105: \n        return 315\n    elif n == 106: \n        return 318\n    elif n == 107: \n        return 321\n    elif n == 108: \n        return 324\n    elif n == 109: \n        return 327\n    elif n == 110: \n        return 330\n    elif n == 111: \n        return 333\n    elif n == 112: \n        return 336\n    elif n == 113: \n        return 338\n    elif n == 114: \n        return 341\n    elif n == 115: \n        return 344\n    elif n == 116: \n        return 347\n    elif n == 117: \n        return 350\n    elif n == 118: \n        return 353\n    elif n == 119: \n        return 356\n    elif n == 120: \n        return 359\n    elif n == 121: \n        return 372\n    elif n == 122: \n        return 375\n    elif n == 123: \n        return 378\n    elif n == 124: \n        return 381\n    elif n == 125: \n        return 384\n    elif n == 126: \n        return 387\n    elif n == 127: \n        return 390\n    elif n == 128: \n        return 393\n    elif n == 129: \n        return 396\n    elif n == 130: \n        return 399\n    elif n == 131: \n        return 404\n    elif n == 132: \n        return 408\n    elif n == 133: \n        return 411\n    elif n == 134: \n        return 414\n    elif n == 135: \n        return 417\n    elif n == 136: \n        return 420\n    elif n == 137: \n        return 423\n    elif n == 138: \n        return 426\n    elif n == 139: \n        return 428\n    elif n == 140: \n        return 421\n    elif n == 141: \n        return 424\n    elif n == 142: \n        return 427\n    elif n == 143: \n        return 430\n    elif n == 144: \n        return 433\n    elif n == 145: \n        return 446\n    elif n == 146: \n        return 449\n    elif n == 147: \n        return 444\n    elif n == 148: \n        return 447\n    elif n == 149: \n        return 450\n    elif n == 150: \n        return 451\n    elif n == 151: \n        return 452\n    elif n == 152: \n        return 455\n    elif n == 153: "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n + 1):\n        if (n - i) % 2 == 0:\n            if i == 1 or i == 3 or i == 5 or i == 7:\n                return i\n        elif (n - i) % 2!= 0:\n            if i == 1 or i == 3 or i == 5 or i == 7:\n                return i\n        \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 5\n    if n % 2 == 0: \n        return (5*(n//2)+2)\n    else: \n        return (5*(n//2)+2)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = abs(n) \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 7\n    elif n == 5: \n        return 10\n    elif n == 6: \n        return 15\n    elif n == 7: \n        return 20\n    elif n == 8: \n        return 25\n    elif n == 9: \n        return 30\n    elif n == 10: \n        return 35\n    elif n == 11: \n        return 40\n    elif n == 12: \n        return 45\n    elif n == 13: \n        return 50\n    elif n == 14: \n        return 55\n    elif n == 15: \n        return 60\n    elif n == 16: \n        return 65\n    elif n == 17: \n        return 70\n    elif n == 18: \n        return 75\n    elif n == 19: \n        return 80\n    elif n == 20: \n        return 85\n    elif n == 21: \n        return 90\n    elif n == 22: \n        return 95\n    elif n == 23: \n        return 100\n    elif n == 24: \n        return 105\n    elif n == 25: \n        return 110\n    elif n == 26: \n        return 115\n    elif n == 27: \n        return 120\n    elif n == 28: \n        return 125\n    elif n == 29: \n        return 130\n    elif n == 30: \n        return 135\n    elif n == 31: \n        return 140\n    elif n == 32: \n        return 145\n    elif n == 33: \n        return 150\n    elif n == 34: \n        return 155\n    elif n == 35: \n        return 160\n    elif n == 36: \n        return 165\n    elif n == 37: \n        return 170\n    elif n == 38: \n        return 175\n    elif n == 39: \n        return 180\n    elif n == 40: \n        return 185\n    elif n == 41: \n        return 190\n    elif n == 42: \n        return 195\n    elif n == 43: \n        return 200\n    elif n == 44: \n        return 205\n    elif n == 45: \n        return 210\n    elif n == 46: \n        return 215\n    elif n == 47: \n        return 220\n    elif n == 48: \n        return 225\n    elif n == 49: \n        return 230\n    elif n == 50: \n        return 235\n    elif n == 51: \n        return 240\n    elif n == 52: \n        return 245\n    elif n == 53: \n        return 250\n    elif n == 54: \n        return 255\n    elif n == 55: \n        return 260\n    elif n == 56: \n        return 265\n    elif n == 57: \n        return 270\n    elif n == 58: \n        return 275\n    elif n == 59: \n        return 280\n    elif n == 60: \n        return 285\n    elif n == 61: \n        return 290\n    elif n == 62: \n        return 295\n    elif n == 63: \n        return 300\n    elif n == 64: \n        return 305\n    elif n == 65: \n        return 310\n    elif n == 66: \n        return 315\n    elif n == 67: \n        return 320\n    elif n == 68: \n        return 325\n    elif n == 69: \n        return 330\n    elif n == 70: \n        return 335\n    elif n == 71: \n        return 340\n    elif n == 72: \n        return 345\n    elif n == 73: \n        return 350\n    elif n == 74: \n        return 355\n    elif n == 75: \n        return 360\n    elif n == 76: \n        return 365\n    elif n == 77: \n        return 370\n    elif n == 78: \n        return 375\n    elif n == 79: \n        return 380\n    elif n == 80: \n        return 385\n    elif n == 81: \n        return 390\n    elif n == 82: \n        return 395\n    elif n == 83: \n        return 400\n    elif n == 84: \n        return 405\n    elif n == 85: \n        return 410\n    elif n == 86: \n        return 415\n    elif n == 87: \n        return 420\n    elif n == 88: \n        return 425\n    elif n == 89: \n        return 430\n    elif n == 90: \n        return 435\n    elif n == 91: \n        return 440\n    elif n == 92: \n        return 445\n    elif n == 93: \n        return 450\n    elif n == 94: \n        return 455\n    elif n == 95: \n        return 460\n    elif n == 96: \n        return 465\n    elif n == 97: \n        return 470\n    elif n == 98: \n        return 475\n    elif n == 99: \n        return 490\n    elif n == 100: \n        return 495\n    elif n == 101: \n        return 500\n    elif n == 102: \n        return 505\n    elif n == 103: \n        return 510\n    elif n == 104: \n        return 525\n    elif n == 105: \n        return 530\n    elif n == 106: \n        return 535\n    elif n == 107: \n        return 540\n    elif n == 108: \n        return 545\n    elif n == 109: \n        return 550\n    elif n == 110: \n        return 555\n    elif n == 111: \n        return 560\n    elif n == 112: \n        return 565\n    elif n == 113: \n        return 570\n    elif n == 114: \n        return 575\n    elif n == 115: \n        return 580\n    elif n == 116: \n        return 585\n    elif n == 117: \n        return 600\n    elif n == 118: \n        return 610\n    elif n == 119: \n        return 655\n    elif n == 120: \n        return 660\n    elif n == 121: \n        return 665\n    elif n == 122: \n        return 670\n    elif n == 123: \n        return 675\n    elif n == 124: \n        return 680\n    elif n == 125: \n        return 685\n    elif n == 126: \n        return 700\n    elif n == 127: \n        return 705\n    elif n == 128: \n        return 710\n    elif n == 129: \n        return 715\n    elif n == 130: \n        return 720\n    elif n == 131: \n        return 725\n    elif n == 132: \n        return 730\n    elif n == 133: \n        return 735\n    elif n == 134: \n        return 740\n    elif n == 135: \n        return 745\n    elif n == 136: \n        return 750\n    elif n == 137: \n        return 755\n    elif n == 138: \n        return 760\n    elif n == 139: \n        return 765\n    elif n == 140: \n        return 770\n    elif n == 141: \n        return 775\n    elif n == 142: \n        return 780\n    elif n == 143: \n        return 785\n    elif n == 144: \n        return 790\n    elif n == 145: \n        return 795\n    elif n == 146: \n        return 800\n    elif n == 147: \n        return 805\n    elif n == 148: \n        return 810\n    elif n == 149: \n        return 815\n    elif n == 150: \n        return 820\n    elif n == 151: \n        return 825\n    elif n == 152: \n        return 830\n    elif "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sum_ = 0\n    while n: \n        sum_ += n%10 \n        n = n//10\n    if n == 0:\n        return False\n    else:\n        return sum_\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    s = 0\n    n = n - 1\n    while n:\n        n, s = s, n * s\n        n -= 1\n    return s\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        print(\"Enter a positive number\")\n        return\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 15\n    elif n == 8:\n        return 17\n    elif n == 9:\n        return 19\n    elif n == 10:\n        return 23\n    elif n == 11:\n        return 29\n    elif n == 12:\n        return 31\n    elif n == 13:\n        return 37\n    elif n == 14:\n        return 41\n    elif n == 15:\n        return 47\n    elif n == 16:\n        return 53\n    elif n == 17:\n        return 59\n    elif n == 18:\n        return 61\n    elif n == 19:\n        return 67\n    elif n == 20:\n        return 71\n    elif n == 21:\n        return 73\n    elif n == 22:\n        return 79\n    elif n == 23:\n        return 83\n    elif n == 24:\n        return 89\n    elif n == 25:\n        return 93\n    elif n == 26:\n        return 99\n    elif n == 27:\n        return 103\n    elif n == 28:\n        return 107\n    elif n == 29:\n        return 111\n    elif n == 30:\n        return 127\n    elif n == 31:\n        return 131\n    elif n == 32:\n        return 137\n    elif n == 33:\n        return 143\n    elif n == 34:\n        return 149\n    elif n == 35:\n        return 153\n    elif n == 36:\n        return 159\n    elif n == 37:\n        return 163\n    elif n == 38:\n        return 169\n    elif n == 39:\n        return 173\n    elif n == 40:\n        return 179\n    elif n == 41:\n        return 181\n    elif n == 42:\n        return 187\n    elif n == 43:\n        return 191\n    elif n == 44:\n        return 199\n    elif n == 45:\n        return 203\n    elif n == 46:\n        return 209\n    elif n == 47:\n        return 217\n    elif n == 48:\n        return 223\n    elif n == 49:\n        return 239\n    elif n == 50:\n        return 241\n    elif n == 51:\n        return 247\n    elif n == 52:\n        return 251\n    elif n == 53:\n        return 257\n    elif n == 54:\n        return 263\n    elif n == 55:\n        return 269\n    elif n == 56:\n        return 271\n    elif n == 57:\n        return 277\n    elif n == 58:\n        return 281\n    elif n == 59:\n        return 283\n    elif n == 60:\n        return 289\n    elif n == 61:\n        return 293\n    elif n == 62:\n        return 299\n    elif n == 63:\n        return 303\n    elif n == 64:\n        return 309\n    elif n == 65:\n        return 311\n    elif n == 66:\n        return 313\n    elif n == 67:\n        return 319\n    elif n == 68:\n        return 327\n    elif n == 69:\n        return 331\n    elif n == 70:\n        return 337\n    elif n == 71:\n        return 343\n    elif n == 72:\n        return 349\n    elif n == 73:\n        return 353\n    elif n == 74:\n        return 359\n    elif n == 75:\n        return 367\n    elif n == 76:\n        return371\n    elif n == 77:\n        return 377\n    elif n == 78:\n        return381\n    elif n == 79:\n        return 389\n    elif n == 80:\n        return 397\n    elif n == 81:\n        return 401\n    elif n == 82:\n        return 409\n    elif n == 83:\n        return 411\n    elif n == 84:\n        return 417\n    elif n == 85:\n        return 421\n    elif n == 86:\n        return 431\n    elif n == 87:\n        return 433\n    elif n == 88:\n        return 439\n    elif n == 89:\n        return 451\n    elif n == 90:\n        return 461\n    elif n == 91:\n        return 479\n    elif n == 92:\n        return 481\n    elif n == 93:\n        return 487\n    elif n == 94:\n        return 491\n    elif n == 95:\n        return 499\n    elif n == 96:\n        return 503\n    elif n == 97:\n        return 521\n    elif n == 98:\n        return 537\n    elif n == 99:\n        return 551\n    elif n == 100:\n        return 563\n    elif n == 101:\n        return 581\n    elif n == 102:\n        return 599\n    elif n == 103:\n        return 611\n    elif n == 104:\n        return 623\n    elif n == 105:\n        return 641\n    elif n == 106:\n        return 647\n    elif n == 107:\n        return 651\n    elif n == 108:\n        return 661\n    elif n == 109:\n        return 679\n    elif n == 110:\n        return 693\n    elif n == 111:\n        return 709\n    elif n == 112:\n        return 723\n    elif n == 113:\n        return 741\n    elif n == 114:\n        return 751\n    elif n == 115:\n        return 763\n    elif n == 116:\n        return 781\n    elif n == 117:\n        return 799\n    elif n == 118:\n        return 811\n    elif n == 119:\n        return 823\n    elif n == 120:\n        return 841\n    elif n == 121:\n        return 851\n    elif n == 122:\n        return 863\n    elif n == 123:\n        return 881\n    elif n == 124:\n        return 900\n    elif n == 125:\n        return 931\n    elif n == 126:\n        return 941\n    elif n == 127:\n        return 951\n    elif n == 128:\n        return 961\n    elif n == 129:\n        return 979\n    elif n == 130:\n        return 1001\n    elif n == 131:\n        return 1013\n    elif n == 132:\n        return 1021\n    elif n == 133:\n        return 1037\n    elif n == 134:\n        return 1051\n    elif n == 135:\n        return 1063\n    elif n == 136:\n        return 1081\n    elif n == 137:\n        return 1099\n    elif n == 138:\n        return 1113\n    elif n == 139:\n        return 1131\n    elif n == 140:\n        return 1141\n    elif n == 141:\n        return 1151\n    elif n == 142:\n        return 1163\n    elif n == 143:\n        return 1181\n    elif n == 144:\n        return 1191\n    elif n == 145:\n        return 1211\n    elif n == 146:\n        return 1223\n    elif n == 147:\n        return 1241\n    elif n == 148:\n        return 1251\n    elif n == 149:\n        return 1263\n    elif n == 150:\n        return 1281\n    elif n == 151:\n        return 1300\n    elif n == 152:\n        return 1331\n    elif n == 153:\n        return 1341\n    elif n == 154:\n        return 1351\n    elif n == 155:\n        return 1363\n    elif n == 156:\n        return 1381\n    elif n == 157:\n        return 1411\n    elif n == 158:\n        return 1423\n    elif n == 159:\n        return 1441\n    elif n == 160:\n        return 1451\n    elif n == 16"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 5\n    elif n % 2 == 0: \n        return n // 2\n    else: \n        return 5 * is_octagonal(n - 1) \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 28\n    elif n == 9:\n        return 36\n    elif n == 10:\n        return 46\n    elif n == 11:\n        return 56\n    elif n == 12:\n        return 78\n    elif n == 13:\n        return 92\n    elif n == 14:\n        return 112\n    elif n == 15:\n        return 144\n    elif n == 16:\n        return 168\n    else:\n        return None\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<=0:\n        raise ValueError(\"n must be greater than 0\")\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    elif n==4:\n        return 3\n    elif n==5:\n        return 4\n    else:\n        return n**2+n+1\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i]<s[j]:\n                n+=1\n    return n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def countSubstring(s,l):\n        count = 0\n        for i in range(l):\n            count+= sum(s[i:i+l])\n        return count\n    count = 0\n    for l in range(len(s)-1):\n        count+= countSubstring(s,l+1)\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    dig_count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j]==s[i:j][::-1]:\n                count += 1\n                dig_count += int(s[i:j])\n    return count,dig_count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    for i in range(1,len(s)):\n        dic[s[i]] += 1\n    result = 0\n    for i in dic.values():\n        if i > 1:\n            result += i\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = sorted(s)\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            count += 1\n            count += 1\n            s[i] = 0\n            s[i+1] = 0\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_Substrings(s):\n        count = 0\n        l = len(s)\n        # find the longest substring\n        if l <= 1:\n            return 1\n        for i in range(l):\n            count += sum(1 if x==s[i] else 0 for x in str(s[i]))\n        return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    if n == 0:\n        return 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if s[j] == s[i]:\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = 0\n    cnt = 0\n    if len(s) == 1:\n        return 1\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            cnt += 1\n        else:\n            substrings += 1\n    if cnt == 0:\n        return 0\n    else:\n        return cnt+count_Substrings(s[1:])\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    def is_valid(s):\n        for i in range(1, n):\n            if s[i]!= s[i - 1]:\n                return False\n        return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s=list(s)\n    def count_digits(s):\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                count += 1\n        return count\n    def count_digits_2(s):\n        count = 0\n        for i in range(len(s)):\n            if int(s[i]) == 0:\n                count += 1\n        return count\n    if len(s) < 2:\n        return 0\n    s_l = len(s)\n    s_s = 0\n    for i in range(s_l - 1):\n        for j in range(s_l - i - 1):\n            if s[i + j] == s[i + j + 1]:\n                s_s += 1\n    s_s += count_digits_2(s)\n    return s_s\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = sorted(xs)[0]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # O(n) time complexity, O(1) space complexity\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    mins = min(xs)\n    return mins\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in xs:\n        if i<min:\n            min = i\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    lst = list(xs)\n    lst.sort()\n    return lst[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for item in xs:\n        if item < smallest:\n            smallest = item\n    return smallest\n    \n    \ndef greatest_num(xs):\n    '''\n    Write a python function to find greatest number in a list.\n    '''\n    greatest = xs[0]\n    for item in xs:\n        if item > greatest:\n            greatest = item\n    return greatest\n    \ndef count_by_range(xs, smallest, greatest):\n    '''\n    Write a python function that counts numbers by the smallest number\n    in a list and greatest number in a list.\n    '''\n    smallest_count = 0\n    greatest_count = 0\n    for item in xs:\n        if item < smallest:\n            smallest_count += 1\n        if item > greatest:\n            greatest_count += 1\n    print('The smallest number is %d' % smallest)\n    print('The greatest number is %d' % greatest)\n    print('There are %d numbers in the list' % smallest_count)\n    print('There are %d numbers in the list' % greatest_count)\n    \n    \ndef to_string(xs):\n    '''\n    Write a python function that takes a list and returns a string of\n    each number separated with a comma and spaces.\n    '''\n    string = ''\n    for item in xs:\n        string += str(item) + ', '\n    return string[:-2]\n    \ndef main():\n    '''\n    Write a python function that takes a list of numbers and returns\n    the smallest and greatest numbers in the list.\n    '''\n    print(smallest_num([4,7,3,7,5]))\n    print(greatest_num([4,7,3,7,5]))\n    print(smallest_num([4,7,3,7,5,8,5]))\n    print(greatest_num([4,7,3,7,5,8,5]))\n    print(smallest_num([4,7,3,7,5,6,5]))\n    print(greatest_num([4,7,3,7,5,6,5]))\n    print(to_string([4,7,3,7,5,6,5]))\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    if len(test_list) == 2:\n        max_difference = abs(test_list[0] - test_list[1])\n    else:\n        for i in range(len(test_list)):\n            for j in range(len(test_list)):\n                if i == j:\n                    continue\n                if (test_list[i] - test_list[j]) > max_difference:\n                    max_difference = (test_list[i] - test_list[j])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    res = [0] * len(test_list)\n    max_difference = max_value = test_list[0][0] - test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][0] - test_list[i][1] > max_difference:\n            max_difference = test_list[i][0] - test_list[i][1]\n            max_value = test_list[i][0] - test_list[i][1]\n    for i in range(len(test_list)):\n        res[i] = max_value - test_list[i][0]\n    return res\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        # print(test_list)\n        sum_of_numbers = 0\n        for i in range(len(test_list)):\n            for j in range(i + 1, len(test_list)):\n                # print(i,j)\n                sum_of_numbers += test_list[i] - test_list[j]\n        return abs(sum_of_numbers)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = test_list[0][1] - test_list[1][1]\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)-1):\n        if test_list[i+1] > test_list[i]:\n            result = result + abs(test_list[i] - test_list[i+1])\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    current_diff = 0\n    for i in range(len(test_list)-1):\n        if test_list[i+1] - test_list[i] > current_diff:\n            current_diff = test_list[i+1] - test_list[i]\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(a[0] - a[1]) for a in test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # lst = test_list\n    # lst = [1, 2, 3, 4, 5]\n    # lst = [6, 7, 8, 9]\n    lst = []\n    for i in range(len(test_list) - 1):\n        lst.append((test_list[i], test_list[i + 1]))\n    print(lst)\n    min_diff = abs(lst[0][0] - lst[1][0])\n    max_diff = 0\n    for j in range(len(lst)):\n        max_diff = max(abs(lst[j][0] - lst[j + 1][0]), max_diff)\n    print(\"max_diff: \", max_diff)\n    print(\"min_diff: \", min_diff)\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Empty tuples and current list\n    data = ()\n    for i in test_list:\n        if i is None:\n            continue\n        else:\n            data = data + (i, )\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return -1\n    max_diff = 0\n    idx = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][0] > test_list[idx][0]:\n            max_diff += 1\n        elif test_list[i][0] < test_list[idx][0]:\n            idx = i\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subj_marks = list()\n    for item in subjectmarks:\n        subj_marks.append(item[1])\n    subj_marks.sort()\n    return subj_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    first_value = subjectmarks[0]\n    second_value = subjectmarks[1]\n    third_value = subjectmarks[2]\n    fourth_value = subjectmarks[3]\n    fifth_value = subjectmarks[4]\n    sixth_value = subjectmarks[5]\n    seventh_value = subjectmarks[6]\n    eighth_value = subjectmarks[7]\n    ninth_value = subjectmarks[8]\n    tenth_value = subjectmarks[9]\n    eleventh_value = subjectmarks[10]\n    twelfth_value = subjectmarks[11]\n    sevenths_value = subjectmarks[12]\n    eighth_value = subjectmarks[13]\n    nineth_value = subjectmarks[14]\n    tenths_value = subjectmarks[15]\n    fifths_value = subjectmarks[16]\n    sixties_value = subjectmarks[17]\n    sevenths_value = subjectmarks[18]\n    eighths_value = subjectmarks[19]\n    nineths_value = subjectmarks[20]\n    tenths_value = subjectmarks[21]\n    fifths_value = subjectmarks[22]\n    sixtens_value = subjectmarks[23]\n    sevenths_value = subjectmarks[24]\n    eighths_value = subjectmarks[25]\n    nineths_value = subjectmarks[26]\n    tenths_value = subjectmarks[27]\n    fifths_value = subjectmarks[28]\n    sixtens_value = subjectmarks[29]\n    sevenths_value = subjectmarks[30]\n    eighths_value = subjectmarks[31]\n    nineths_value = subjectmarks[32]\n    tenths_value = subjectmarks[33]\n    fifths_value = subjectmarks[34]\n    sixtens_value = subjectmarks[35]\n    sevenths_value = subjectmarks[36]\n    eighths_value = subjectmarks[37]\n    nineths_value = subjectmarks[38]\n    tenths_value = subjectmarks[39]\n    fifths_value = subjectmarks[40]\n    sixtens_value = subjectmarks[41]\n    sevenths_value = subjectmarks[42]\n    eighths_value = subjectmarks[43]\n    nineths_value = subjectmarks[44]\n    tenths_value = subjectmarks[45]\n    fifths_value = subjectmarks[46]\n    sixtens_value = subjectmarks[47]\n    sevenths_value = subjectmarks[48]\n    eighths_value = subjectmarks[49]\n    nineths_value = subjectmarks[50]\n    tenths_value = subjectmarks[51]\n    fifths_value = subjectmarks[52]\n    sixtens_value = subjectmarks[53]\n    sevenths_value = subjectmarks[54]\n    eighths_value = subjectmarks[55]\n    nineths_value = subjectmarks[56]\n    tenths_value = subjectmarks[57]\n    fifths_value = subjectmarks[58]\n    sixtens_value = subjectmarks[59]\n    sevenths_value = subjectmarks[60]\n    eighths_value = subjectmarks[61]\n    nineths_value = subjectmarks[62]\n    tenths_value = subjectmarks[63]\n    fifths_value = subjectmarks[64]\n    sixtens_value = subjectmarks[65]\n    sevenths_value = subjectmarks[66]\n    eighths_value = subjectmarks[67]\n    nineths_value = subjectmarks[68]\n    tenths_value = subjectmarks[69]\n    fifths_value = subjectmarks[70]\n    sixtens_value = subjectmarks[71]\n    sevenths_value = subjectmarks[72]\n    eighths_value = subjectmarks[73]\n    nineths_value = subjectmarks[74]\n    tenths_value = subjectmarks[75]\n    fifths_value = subjectmarks[76]\n    sixtens_value = subjectmarks[77]\n    sevenths_value = subjectmarks[78]\n    eighths_value = subjectmarks[79]\n    nineths_value = subjectmarks[80]\n    tenths_value = subjectmarks[81]\n    fifths_value = subjectmarks[82]\n    sixtens_value = subjectmarks[83]\n    sevenths_value = subjectmarks[84]\n    eighths_value = subjectmarks[85]\n    nineths_value = subjectmarks[86]\n    tenths_value = subjectmarks[87]\n    fifths_value = subjectmarks[88]\n    sixtens_value = subjectmarks[89]\n    sevenths_value = subjectmarks[90]\n    eighths_value = subjectmarks[91]\n    nineths_value = subjectmarks[92]\n    tenths_value = subjectmarks[93]\n    fifths_value = subjectmarks[94]\n    sixtens_value = subjectmarks[95]\n    sevenths_value = subjectmarks[96]\n    eighths_value = subjectmarks[97]\n    nineths_value = subjectmarks[98]\n    tenths_value = subjectmarks[99]\n    fifths_value = subjectmarks[100]\n    sixtens_value = subjectmarks[101]\n    sevenths_value = subjectmarks[102]\n    eighths_value = subjectmarks[103]\n    nineths_value = subjectmarks[104]\n    tenths_value = subjectmarks[105]\n    fifths_value = subjectmarks[106]\n    sixtens_value = subjectmarks[107]\n    sevenths_value = subjectmarks[108]\n    eighths_value = subjectmarks[109]\n    nineths_value = subjectmarks[110]\n    tenths_value = subjectmarks[111]\n    fifths_value = subjectmarks[112]\n    sixtens_value = subjectmarks[113]\n    sevenths_value = subjectmarks[114]\n    eighths_value = subjectmarks[115]\n    nineths_value = subjectmarks[116]\n    tenths_value = subjectmarks[117]\n    fifths_value = subjectmarks[118]\n    sixtens_value = subjectmarks[119]\n    sevenths_value = subjectmarks[120]\n    eighths_value = subjectmarks[121]\n    nineths_value = subjectmarks[122]\n    tenths_value = subjectmarks[123]\n    fifths_value = subjectmarks[124]\n    sixtens_value = subjectmarks[125]\n    sevenths_value = subjectmarks[126]\n    eighths_value = subjectmarks[127]\n    nineths_value = subjectmarks[128]\n    tenths_value = subjectmarks[129]\n    fifths_value = subjectmarks[130]\n    sixtens_value = subjectmarks[131]\n    sevenths_value = subjectmarks[132]\n    eighths_value = subjectmarks[133]\n    nineths_value = subjectmarks[134]\n    tenths_value = subjectmarks[135]\n    fifths_value = subjectmarks[136]\n    sixtens_value = subjectmarks[137]\n    sevenths_value = subjectmarks[138]\n    eighths_value = subjectmarks[139]\n    nineths_value = subjectmarks[140]\n    tenths_value = subjectmarks[141]\n    fifths_value = subjectmarks[142]\n    sixtens_value = subjectmarks[143]\n    sevenths_value = subjectmarks[144]\n    eighths_value = subjectmarks[145]\n    nineths_value = subjectmarks[146]\n    tenths_value = subjectmarks[147]\n    fifths_value = subjectmarks[148]\n    sixtens_value = subjectmarks[149]\n    sevenths_value = subjectmarks[150]\n    eighths_value = subjectmarks[151]\n    nineths_value = subjectmarks[152]\n    tenths_value = subjectmarks[153]\n    fifths_value = subjectmarks[154]\n    sixtens_value = subjectmarks[155]\n    sevenths_value = subjectmarks[156]\n    eighths_value = subjectmarks[157]"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = []\n    for marks_ in subjectmarks:\n        if marks_[1] > 60:\n            marks.append(marks_)\n        elif marks_[1] > 40:\n            marks.append(marks_)\n        elif marks_[1] > 20:\n            marks.append(marks_)\n        elif marks_[1] > 10:\n            marks.append(marks_)\n        elif marks_[1] > 5:\n            marks.append(marks_)\n        else:\n            marks.append(marks_)\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks_list = []\n    # Loops through each tuple and adds the elements\n    for index, value in enumerate(subjectmarks):\n        marks_list.append((value[1], value[0]))\n    # Sort the list\n    marks_list.sort(key=lambda x:x[1])\n    # Return the sorted list\n    return marks_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #using a third value of the tuple\n    subjectmarks.sort(key=lambda subject: subject[2])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    if len(subjectmarks)==0:\n        return subjectmarks\n    else:\n        lst=[]\n        for i in subjectmarks:\n            lst.append(i[1])\n        lst.sort()\n        lst=lst[::-1]\n        subjectmarks=[]\n        for i in lst:\n            subjectmarks.append(i)\n        return subjectmarks\n    \n    \ndef calculate_score(subject_marks):\n    '''\n    Write a function to calculate the average marks of the student.\n    '''\n    \n    if len(subject_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in subject_marks:\n            sum=sum+i[1]\n        sum=sum/len(subject_marks)\n        return sum\n    \n    \ndef calculate_average(subject_marks):\n    '''\n    Write a function to calculate the average marks of the student.\n    '''\n    \n    if len(subject_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in subject_marks:\n            sum=sum+i[1]\n        sum=sum/len(subject_marks)\n        return sum\n    \n    \ndef generate_report(sub_marks):\n    '''\n    Write a function to display the average marks of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        average=sum/len(sub_marks)\n        return average\n    \n    \ndef calculate_mark_avg(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \ndef calculate_mark_avg2(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \ndef calculate_mark_avg3(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \ndef calculate_mark_avg4(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \ndef calculate_mark_avg5(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \ndef calculate_mark_avg6(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \ndef calculate_mark_avg7(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \n    \ndef average_mark_avg(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \n    \ndef average_mark_avg2(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \n    \ndef average_mark_avg3(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \n    \ndef average_mark_avg4(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \n    \ndef average_mark_avg5(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \n    \ndef average_mark_avg6(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \ndef average_mark_avg7(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(sub_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in sub_marks:\n            sum=sum+i[1]\n        sum=sum/len(sub_marks)\n        return sum\n    \n    \n    \n    \ndef calc_marks(subject_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''\n    \n    if len(subject_marks)==0:\n        return 0\n    else:\n        sum=0\n        for i in subject_marks:\n            sum=sum+i[1]\n        sum=sum/len(subject_marks)\n        return sum\n    \n    \n    \n    \n    \ndef calc_marks2(sub_marks):\n    '''\n    Write a function to calculate the average mark of the student.\n    '''"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n    \n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda i: i[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort(my_list):\n        return sorted(my_list,key=lambda x:x[1])\n    return sort(subjectmarks)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is list:\n        if len(data_list) == 1:\n            return data_list[0]\n        \n        # Recursively call the function\n        return recursive_list_sum(data_list[1:]) + recursive_list_sum(data_list[:-1])\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    final_result = 0\n    for data in data_list:\n        final_result += data\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for i in data_list:\n        if type(i) == list:\n            sum += recursive_list_sum(i)\n        else:\n            sum += i\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        if not data_list:\n            return []\n        elif isinstance(data_list, list):\n            return flatten(data_list[0]) + flatten(data_list[1:])\n        else:\n            return [data_list]\n    return flatten(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        # Pre-calculate sum of elements in a list and return\n        #    value.\n        return recursive_list_sum(data_list[0:len(data_list)]) + data_list[len(data_list)-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list)!= list:\n        raise TypeError('input must be a list')\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        total = 0\n        for i in data_list:\n            total += i\n        return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Check if the list is empty\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    for i in list:\n        if i > 0:\n            print(i, end=' ')\n    print('')\n    # return\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for x in list:\n        if x > 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n    "
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    for i in range(0, len(list)):\n        if list[i] > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # TODO\n    return len(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for i in list:\n        if i > 0:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 4\n    else:\n        ways_n=bell_number(n-1)+bell_number(n-2)+bell_number(n-3)\n        return ways_n\ndef bell_number_dp(n):\n    '''\n    This function implements the bell number problem.\n    '''\n    n_lis=[]\n    for i in range(1,n+1):\n        n_lis.append(i)\n    for i in range(0,n+1):\n        if n%i==0:\n            pass\n        else:\n            n_lis.append(n//i)\n    return len(n_lis)\nn=int(input())\nprint(bell_number(n))\nprint(bell_number_dp(n)"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(n):\n        if(i == 0 or i == n-1):\n            count += 1\n        else:\n            count += int(i/3)\n            count += int(2*i%3+1/3)\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #import math\n    #print(math.factorial(n))\n    if n <= 2:\n        return n\n    return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # num = 1\n    # total = 0\n    # for i in range(n):\n    #     total += i\n    # return total\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 4\n    \n    if n % 3 == 0:\n        if n == 4: return 4\n        elif n == 3: return 5\n        else: return 3\n    else:\n        return bell_number(n - 1) + 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [[0 for x in range(n+1)] for y in range(2)]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Number of ways to split a set of numbers into two.\n    ways = [0] * n\n    ways[0] = 1\n    ways[1] = 2\n    for i in range(2, n):\n        ways[i] = ways[i-1] + ways[i-2]\n    return ways[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n<=1:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #Your code here\n    #raise NotImplementedError()\n    #raise NotImplementedError()\n    raise NotImplementedError()\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    if len(A) == 1:\n        return True\n    else:\n        A_length = len(A[0])\n        if A_length == 1:\n            for i in range(len(A)):\n                for j in range(i+1, len(A)):\n                    if A[i][j] < A[i][i]:\n                        is_monotonic = False\n                        break\n        return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if len(A) == 1:\n    #     return True\n    # elif all( A[i] >= A[i+1] for i in range(len(A)-1)):\n    #     return True\n    # else:\n    #     return False\n    # return False\n    \n    # get the sorted array \n    # return True if it is monotonic, else False\n    \n    \n    # sort the array \n    # return True if it is monotonic, else False\n    return sorted(A) == sorted(A[::-1])\n    \n    \n    \n    "
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # declare a boolean value\n    mono = True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    B = np.array([-1,0,1])\n    A = np.array([-1,0,1])\n    A = np.array([0,0,1])\n    return np.all(A[:2] == B)\n    \ndef find_non_duplicates(A):\n    '''\n    Write a python function that returns a dictionary of all the non-duplicate indexes.\n    '''\n    D = {}\n    for i in range(len(A)):\n        if A[i] not in D.keys():\n            D[A[i]] = []\n        D[A[i]].append(i)\n    return D\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1: \n        return True\n    elif n == 2: \n        return A[0] <= A[1] and A[1] >= A[0]\n    elif n > 2: \n        return A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[0] and A[0] <= A[2]\n    else: \n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(0, n):\n        for j in range(0, n-1):\n            if A[j] > A[j+1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return False\n    for i in range(1, len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # TODO: change this starter code\n    for i in s:\n        if l.count(i) == 0:\n            return False\n    return True\n    \n    # pass\n    \nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(lst)\n    print(is_sublist(lst, [5, 7]))\n    print(is_sublist(lst, [6, 8, 9]))\n    print(is_sublist(lst, [9]))\n    print(is_sublist(lst, []))\n    print(is_sublist(lst, [1]))\n    print(is_sublist(lst, [1, 2, 3, 4, 5]))\n    print(is_sublist(lst, [1, 2, 3, 4, 5, 6, 7])"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(e in s for e in l)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) > len(s):\n        return False\n    \n    if s == []:\n        return True\n    \n    for i in range(len(s)):\n        if s[i] == l[0]:\n            if is_sublist(l[1:], s[1:]):\n                return True\n    \n    return False\n    \ndef is_permutation(l, p):\n    '''\n    Write a function that checks whether a permutation is a valid permutation of a given list.\n    '''\n    if len(l) == len(p):\n        return True\n    \n    for i in range(len(l)):\n        if l[i]!= p[i] and is_permutation(l[1:], p):\n            return True\n    \n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l1 = len(s)\n    l2 = []\n    for i in range(l1):\n        l2.append(s[i:i+l])\n    return l2 == l\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)!= len(s):\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if len(l) == len(s):\n        return True\n    return any([l[i] == s[i] for i in range(len(l))])\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l[i:j] == s for i,j in zip(range(len(l)),range(len(l)+1,len(l)+1+len(s))))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_list = []\n    for i in range(len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            equal_list.append(True)\n        else:\n            equal_list.append(False)\n    return equal_list\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # TODO: Write your code here.\n    if len(Input) == 0:\n        return True\n    \n    if len(Input) <= 1:\n        return False\n    \n    if len(Input) % 2!= 0:\n        return False\n    \n    # Add the first and last elements of tuple as separate elements\n    first_list = Input[0:len(Input)//2]\n    last_list = Input[len(Input)-1:len(Input)]\n    \n    # Compare the lengths of two lists\n    if len(first_list) == len(last_list):\n        # If lengths are equal, return True\n        return True\n    \n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_tuple = 0\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i][j]!= Input[j][i]:\n                equal_tuple += 1\n    if equal_tuple == len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = Input\n    for i in range(len(tuple_list)):\n        if len(tuple_list[i])!= len(tuple_list[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # For loop to find the size of the tuple\n    for i in Input:\n        if len(i) == len(set(i)):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    temp = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                break\n        else:\n            temp.append(Input[i])\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return True\n    for index in range(len(Input)-1):\n        if Input[index] == Input[index+1]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i] == Input[j]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_helper(nums):\n        if len(nums)<=1:\n            return nums\n        else:\n            pivot = nums[0]\n            greater = []\n            lower = []\n            for x in nums:\n                if x > pivot:\n                    greater.append(x)\n                else:\n                    lower.append(x)\n            return sort_helper(greater) + [pivot] + sort_helper(lower)\n    return sort_helper(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1):\n        for j in range(i, len(nums)):\n            if nums[i] > nums[j]:\n                tmp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = tmp\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pivot(left,right):\n        if left>right:\n            return\n        for i in range(left,right):\n            if nums[i]>nums[right]:\n                nums[i],nums[right] = nums[right],nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for index in range(len(nums)-1):\n        # for every element that is less than the next element\n        for i in range(index, len(nums)-1):\n            if nums[i] < nums[i+1]:\n                # swap them\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                # sort\n                # up, down\n                # if odd, swap with the right end, if even, swap with the left end\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = 0\n    while i < len(nums):\n        j = len(nums) - i\n        while j >= 0 and nums[j] > nums[i]:\n            j -= 1\n        if j >= 0:\n            temp = nums[j]\n            nums[j] = nums[i]\n            nums[i] = temp\n        i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        # find the mid\n        mid = (left + right) // 2\n        # if the mid is larger than the nums list\n        # mid element is bigger than nums[mid], swap\n        if nums[mid] > nums[left]:\n            # swap the mid element with the left element\n            nums[left], nums[mid] = nums[mid], nums[left]\n            # shift the left half of the list to the right\n            left = mid + 1\n        # if the mid element is smaller than the nums list\n        # mid element is smaller than nums[mid], swap\n        elif nums[mid] < nums[left]:\n            # swap the mid element with the right element\n            nums[left], nums[mid] = nums[mid], nums[left]\n            # shift the right half of the list to the left\n            right = mid - 1\n        else:\n            break\n    # return the sorted list\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for j in range(n):\n        for i in range(n-j-1):\n            if nums[i] > nums[i+1]:\n                nums[i],nums[i+1] = nums[i+1],nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    m = 0\n    if n == 0: \n        return n==0 \n    elif n > 0: \n        return n%1!=0 \n    else: \n        return n<0 \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_diff = n*n \n    square_diff_squared = square_diff**2\n    square_diff_squared_sum = square_diff_squared**2\n    square_diff_squared_sum_sum = square_diff_squared_sum**2\n    square_diff_squared_sum_sum_squared = square_diff_squared_sum_squared**2\n    square_diff_squared_sum_squared_sum = square_diff_squared_sum_squared_sum**2\n    square_diff_squared_sum_squared_sum_squared = square_diff_squared_sum_squared_sum_squared**2\n    square_diff_squared_sum_squared_sum_squared_sum = square_diff_squared_sum_squared_sum_squared_sum**2\n    square_diff_squared_sum_squared_sum_squared_sum_squared = square_diff_squared_sum_squared_sum_squared_sum_squared**2\n    return square_diff_squared_sum_squared_sum_squared_sum_squared_sum + square_diff_squared_sum_squared_sum_squared_sum_squared + square_diff_squared_sum_squared_sum_squared_squared + square_diff_squared_sum_squared_squared_sum_squared\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square=[]\n    square.append(n)\n    square.append(n*n)\n    square.append(n*n*n)\n    square.append((n*n*n)+(n*n))\n    square.append(0)\n    for i in range(1,n*n*n):\n        if square[i]==0:\n            square[i]='*'\n    square=square[1:n*n*n]\n    return square\n    \n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square=[]\n    square.append(n)\n    square.append(n*n)\n    square.append(n*n*n)\n    square.append((n*n*n)+(n*n))\n    square.append(0)\n    for i in range(1,n*n*n):\n        if square[i]==0:\n            square[i]='*'\n    square=square[1:n*n*n]\n    return square\n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square=[]\n    square.append(n)\n    square.append(n*n)\n    square.append(n*n*n)\n    square.append((n*n*n)+(n*n))\n    square.append(0)\n    for i in range(1,n*n*n):\n        if square[i]==0:\n            square[i]='*'\n    square=square[1:n*n*n]\n    return square\n    \n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square=[]\n    square.append(n)\n    square.append(n*n)\n    square.append(n*n*n)\n    square.append((n*n*n)+(n*n))\n    square.append(0)\n    for i in range(1,n*n*n):\n        if square[i]==0:\n            square[i]='*'\n    square=square[1:n*n*n]\n    return square\n    \n    \n    \n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square=[]\n    square.append(n)\n    square.append(n*n)\n    square.append(n*n*n)\n    square.append((n*n*n)+(n*n))\n    square.append(0)\n    for i in range(1,n*n*n):\n        if square[i]==0:\n            square[i]='*'\n    square=square[1:n*n*n]\n    return square\n    \n    \n    \n    \n    \n    \n    \n    \ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square=[]\n    square.append(n)\n    square.append(n*n)\n    square.append(n*n*n)\n    square.append((n*n*n)+(n*n))\n    square.append(0)\n    for i in range(1,n*n*n):\n        if square[i]==0:\n            square[i]='*'\n    square=square[1:n*n*n]\n    return square\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return dif_Square(n//2) + dif_Square(n//2)\n    \nif __name__ == '__main__':\n    n = int(input())\n    print(dif_Square(n)"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    dif = n % 10\n    dif_square = n // 10\n    if(dif == 0):\n        return \"The number is not square\"\n    if(dif == 5):\n        return \"The number is square\"\n    if(dif == 6):\n        return \"The number is non square\"\n    if(dif == 4):\n        return \"The number is non square\"\n    if(dif == 7):\n        return \"The number is square\"\n    if(dif == 8):\n        return \"The number is non square\"\n    if(dif == 9):\n        return \"The number is square\"\n    if(dif == 1):\n        return \"The number is non square\"\n    if(dif == 2):\n        return \"The number is non square\"\n    if(dif == 3):\n        return \"The number is square\"\n    if(dif == 4):\n        return \"The number is non square\"\n    if(dif == 5):\n        return \"The number is square\"\n    if(dif == 6):\n        return \"The number is non square\"\n    if(dif == 7):\n        return \"The number is square\"\n    if(dif == 8):\n        return \"The number is non square\"\n    if(dif == 9):\n        return \"The number is square\"\n    if(dif == 10):\n        return \"The number is non square\"\n    if(dif == 11):\n        return \"The number is square\"\n    if(dif == 12):\n        return \"The number is non square\"\n    if(dif == 13):\n        return \"The number is square\"\n    if(dif == 14):\n        return \"The number is non square\"\n    if(dif == 15):\n        return \"The number is square\"\n    if(dif == 16):\n        return \"The number is non square\"\n    if(dif == 17):\n        return \"The number is square\"\n    if(dif == 18):\n        return \"The number is non square\"\n    if(dif == 19):\n        return \"The number is square\"\n    if(dif == 20):\n        return \"The number is non square\"\n    if(dif == 21):\n        return \"The number is square\"\n    if(dif == 22):\n        return \"The number is non square\"\n    if(dif == 23):\n        return \"The number is square\"\n    if(dif == 24):\n        return \"The number is non square\"\n    if(dif == 25):\n        return \"The number is square\"\n    if(dif == 26):\n        return \"The number is non square\"\n    if(dif == 27):\n        return \"The number is square\"\n    if(dif == 28):\n        return \"The number is non square\"\n    if(dif == 29):\n        return \"The number is square\"\n    if(dif == 30):\n        return \"The number is non square\"\n    if(dif == 31):\n        return \"The number is square\"\n    if(dif == 32):\n        return \"The number is non square\"\n    if(dif == 33):\n        return \"The number is square\"\n    if(dif == 34):\n        return \"The number is non square\"\n    if(dif == 35):\n        return \"The number is square\"\n    if(dif == 36):\n        return \"The number is non square\"\n    if(dif == 37):\n        return \"The number is square\"\n    if(dif == 38):\n        return \"The number is non square\"\n    if(dif == 39):\n        return \"The number is square\"\n    if(dif == 40):\n        return \"The number is non square\"\n    if(dif == 41):\n        return \"The number is square\"\n    if(dif == 42):\n        return \"The number is non square\"\n    if(dif == 43):\n        return \"The number is square\"\n    if(dif == 44):\n        return \"The number is non square\"\n    if(dif == 45):\n        return \"The number is square\"\n    if(dif == 46):\n        return \"The number is non square\"\n    if(dif == 47):\n        return \"The number is square\"\n    if(dif == 48):\n        return \"The number is non square\"\n    if(dif == 49):\n        return \"The number is square\"\n    if(dif == 50):\n        return \"The number is non square\"\n    if(dif == 51):\n        return \"The number is square\"\n    if(dif == 52):\n        return \"The number is non square\"\n    if(dif == 53):\n        return \"The number is square\"\n    if(dif == 54):\n        return \"The number is non square\"\n    if(dif == 55):\n        return \"The number is square\"\n    if(dif == 56):\n        return \"The number is non square\"\n    if(dif == 57):\n        return \"The number is square\"\n    if(dif == 58):\n        return \"The number is non square\"\n    if(dif == 59):\n        return \"The number is square\"\n    if(dif == 60):\n        return \"The number is non square\"\n    if(dif == 61):\n        return \"The number is square\"\n    if(dif == 62):\n        return \"The number is non square\"\n    if(dif == 63):\n        return \"The number is square\"\n    if(dif == 64):\n        return \"The number is non square\"\n    if(dif == 65):\n        return \"The number is square\"\n    if(dif == 66):\n        return \"The number is non square\"\n    if(dif == 67):\n        return \"The number is square\"\n    if(dif == 68):\n        return \"The number is non square\"\n    if(dif == 69):\n        return \"The number is square\"\n    if(dif == 70):\n        return \"The number is non square\"\n    if(dif == 71):\n        return \"The number is square\"\n    if(dif == 72):\n        return \"The number is non square\"\n    if(dif == 73):\n        return \"The number is square\"\n    if(dif == 74):\n        return \"The number is non square\"\n    if(dif == 75):\n        return \"The number is square\"\n    if(dif == 76):\n        return \"The number is non square\"\n    if(dif == 77):\n        return \"The number is square\"\n    if(dif == 78):\n        return \"The number is non square\"\n    if(dif == 79):\n        return \"The number is square\"\n    if(dif == 80):\n        return \"The number is non square\"\n    if(dif == 81):\n        return \"The number is square\"\n    if(dif == 82):\n        return \"The number is non square\"\n    if(dif == 83):\n        return \"The number is square\"\n    if(dif == 84):\n        return \"The number is non square\"\n    if(dif == 85):\n        return \"The number is square\"\n    if(dif == 86):\n        return \"The number is non square\"\n    if(dif == 87):\n        return \"The number is square\"\n    if(dif == 88):\n        return \"The number is non square\"\n    if(dif == 89):\n        return \"The number is square\"\n    if(dif == 90):\n        return \"The number is non square\"\n    if(dif == 91):\n        return \"The number is square\"\n    if(dif == 92):\n        return \"The number is non square\"\n    if(dif == 93):\n        return \"The number is square\"\n    if(dif == 94):\n        return \"The number is non square\"\n    if(dif == 95):\n        return \"The number is square\"\n    if(dif == 96):\n        return \"The number is non square\"\n    if(dif == 97):\n        return \"The number is square\"\n    if(dif == 98):\n        return \"The number is non square\"\n    if(dif == 99):\n        return \"The number is square\"\n    if(dif == 100):\n        return \"The number is non square\"\n    if(dif == 10"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    lst = [1, 3, 4, 1, 5, 8, 13, 19]\n    if sum(lst) == n: \n        return \"Square\"\n    else:\n        return \"Not a Square\"\ndef main():\n    print(dif_Square(7))\n    print(dif_Square(10))\n    print(dif_Square(100))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = []\n    while(n > 0):\n        square.append(n % 10)\n        n = n // 10\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # if 1 < n < 10:\n    #     return dif_Square(n)\n    # else:\n    #     return False\n    \n    if n%10 == 0:\n        return True\n    elif n%10 > 0:\n        return False\n    else:\n        return False\n        \nn = int(input())\nprint(dif_Square(n)"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n % 100\n    b = (n-a) % 100\n    if (a + b) == (a-b):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: return 0\n    return 1 if n == 1 else dif_Square(n-1)\n    \nn = 8\nprint(dif_Square(n)"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    pattern_count = 0\n    \n    for pattern in patterns:\n        pattern_count += len(pattern)\n    \n    if pattern_count == len(colors):\n        return True\n    \n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    d = 0\n    for i in range(len(colors)):\n        for j in range(len(patterns[i])):\n            if patterns[i][j]!= colors[i]:\n                d = 1\n                break\n        if d == 0:\n            return 1\n    return 0\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # TODO: Your code here\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepatterns(colors, pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def check_colors_patterns(colors, patterns):\n        \n        #checking each pattern in each row\n        for row in patterns:\n            #print(row)\n            for index, color in enumerate(row):\n                if color == colors[index]:\n                    #print(\"the color is in the pattern\", index, \"position\")\n                    if index == len(row)-1:\n                        return False\n            return True\n        return False\n    \n    if len(colors)!= len(patterns):\n        print(\"colors and patterns not of the same length\")\n        return False\n    return check_colors_patterns(colors, patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_indices = {}\n    patterns_list = []\n    for i in range(len(patterns)):\n        for j in range(len(colors)):\n            pattern_indices[patterns[i][j]] = i\n    \n    for i in range(len(patterns)):\n        patterns_list.append([])\n        patterns_list[i] = patterns[i][:len(patterns[i])//2]\n    \n    for i in range(len(patterns_list)):\n        for j in range(len(patterns_list[i])):\n            if len(patterns_list[i][j]) % 2 == 1:\n                patterns_list[i][j] += '1'\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if(len(colors[i])!= len(patterns[i])):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if patterns[j][0] == colors[i]:\n                if patterns[j][1]!= colors[i]:\n                    return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_set = set(colors)\n    for pattern in patterns:\n        if pattern not in colors_set:\n            return False\n    return True\n    "
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    samePattern = True\n    colors = colors[:]\n    for color in colors:\n        if not patterns[color]:\n            continue\n        for pattern in patterns[color]:\n            if color in pattern:\n                if not pattern:\n                    samePattern = False\n                    break\n                if pattern[0] in color:\n                    if pattern[1]!= color[pattern[0]]:\n                        samePattern = False\n                        break\n    return samePattern\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list_copy = test_list.copy()\n    list_copy_copy = list_copy.copy()\n    print(list_copy)\n    #print(list_copy_copy)\n    #print(len(list_copy))\n    for i in range(len(list_copy)):\n        for j in range(i + 1, len(list_copy)):\n            if list_copy[i][1] % list_copy[j][1] == 0:\n                list_copy[i] = (list_copy[i][0], list_copy[j][0])\n                list_copy[j] = (list_copy[j][0], list_copy[i][0])\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        total = 0\n        lst = []\n        for t in test_list:\n            if len(t) % K == 0:\n                total += 1\n        if total == len(test_list):\n            return lst\n    return []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for t in test_list:\n        if t[0] % K == 0 and t[1] % K == 0:\n            tuples.append(t)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create empty tuples\n    T = []\n    # Iterate through list of tuples\n    for tuple in test_list:\n        # Convert tuples to list\n        list_of_tuples = list(tuple)\n        # Check if list of tuples contains all elements divisible by k\n        if len(list_of_tuples) % K == 0:\n            # Iterate through list of tuples and add to T\n            for i in range(0, len(list_of_tuples) - 1, K):\n                # Check if element at i is in T\n                if list_of_tuples[i] in T:\n                    # Add element to T if it is present\n                    T.append(list_of_tuples[i])\n        # Else - append empty list\n    return T\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    for i in range(len(test_list)):\n        if test_list[i][1]%K==0:\n            for j in range(i+1, len(test_list)):\n                if test_list[j][1]%K==0:\n                    if test_list[i][0]<test_list[j][0]:\n                        return test_list\n                    elif test_list[j][0]<test_list[i][0]:\n                        return test_list\n    return []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for tuple in test_list:\n        if tuple[0] % K == 0:\n            count += 1\n    if count == 0:\n        return []\n    else:\n        return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for tuples in test_list:\n        for element in tuples:\n            if element % K == 0:\n                res.append(tuples)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    i = 0\n    while i < len(test_list):\n        if test_list[i][1] % K == 0:\n            test_list.remove(test_list[i])\n            i -= 1\n        else:\n            i += 1\n    return test_list\n    # Write your code here\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    res = []\n    for i in range(0,len(test_list)):\n        if test_list[i][0] % K == 0:\n            res.append(test_list[i])\n    return res\n    #return res\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if tup[0] % K == 0:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0 and n % 100!= 0: \n        return False\n    else:\n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Step 1\n    temp = n\n    # Step 2\n    while(temp%11!= 0):\n        temp = temp//10\n    # Step 3\n    return(temp == 0)\n    \n    "
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0: \n        return 0\n    if n % 11 == 0: \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # your code goes here\n    if (n % 2 == 0):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2, n): \n        if (n % i) == 0: \n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%2==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    result = False\n    result = s == \"a\" or s == \"aa\" or s == \"aaaa\"\n    return result\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 0:\n        print(\"The word is even\")\n    else:\n        print(\"The word is odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return \"A Number!\"\n    else:\n        return \"Number is not a number\"\n    \ndef word_check(s): \n    '''\n    Write a python function to check whether the word contains every vowel.\n    '''\n    for word in s:\n        if not word.isalpha():\n            return \"Word contains non-alphabetic character\"\n        else:\n            if not word.isupper():\n                return \"Word contains non-alphabetical character\"\n            else:\n                if not word.islower():\n                    return \"Word contains non-lowercase character\"\n    return \"Word contains all alphabetical characters\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.lower()\n    if len(s) % 2!= 0: \n        return \"Odd\"\n    else: \n        return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Your code here\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        print(s, \"is odd.\")\n    else:\n        print(s, \"is even.\")\n        \nword_len(\"banana\")\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        raise ValueError(\"Input must be greater than 0.\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    else:\n        return tetrahedral_number(n-1)+tetrahedral_number(n-2)+tetrahedral_number(n-3)\n    return n-2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import itertools\n    from functools import reduce\n    import math\n    import math\n    #function to find the nth tetrahedral number in a set of n\n    def tetrahedral_number(n):\n        if n == 0:\n            return 1\n        else:\n            n = n-1\n            return reduce(lambda x, y : x*y, itertools.combinations(range(1, n+1), 2))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n):\n        if (n % i == 0):\n            return i\n    else:\n        return -1\n    \ndef number_of_tetrahedra(n): \n    '''\n    Write a function to calculate the number of triangles given a triangle.\n    '''\n    tri = 0\n    for i in range(n):\n        tri = tri + tetrahedral_number(i + 1)\n    return tri\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 10:\n        return n\n    elif n == 10:\n        return 1\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 10)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    lst = [0, 1, 3, 4, 5, 7, 11, 13, 17, 19, 22, 25, 28, 31, 34, 37, 41, 45, 53, 58, 61, 65, 73, 77, 83, 89, 91]\n    f1 = [1, 3, 5, 7, 10, 13, 17, 20, 23, 28, 31, 33, 36, 41, 44, 46, 49, 51, 54, 58, 62, 66, 69, 71, 74, 78, 82, 87, 90]\n    f2 = [2, 4, 6, 8, 12, 14, 18, 22, 24, 30, 34, 38, 42, 46, 50, 54, 58, 62, 68, 72, 76, 80, 84, 88, 92, 96]\n    f3 = [3, 5, 7, 9, 11, 15, 19, 23, 27, 29, 33, 37, 39, 43, 47, 51, 55, 59, 63, 67, 71, 75, 79, 83, 87, 91]\n    f4 = [4, 6, 8, 12, 14, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96]\n    f5 = [5, 7, 9, 11, 13, 17, 21, 25, 29, 31, 35, 39, 43, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97]\n    f6 = [6, 8, 10, 12, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 99]\n    f7 = [7, 9, 11, 15, 19, 23, 27, 29, 33, 37, 41, 45, 59, 63, 67, 71, 75, 79, 83, 87, 91, 95, 99, 100, 101, 102]\n    f8 = [8, 10, 12, 14, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100]\n    f9 = [9, 11, 13, 17, 21, 25, 29, 33, 37, 41, 45, 59, 63, 67, 71, 75, 79, 83, 87, 91, 95, 99, 101, 102, 103, 104]\n    f10 = [10, 12, 14, 16, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 100]\n    f11 = [11, 13, 17, 21, 23, 27, 29, 33, 37, 41, 45, 59, 63, 67, 71, 75, 79, 83, 87, 91, 95, 99, 101, 102, 103, 104]\n    n1 = lst[math.ceil(n/2)]\n    n2 = lst[math.floor(n/2)]\n    s = 0\n    for i in range(4):\n        for j in range(4):\n            s = s + (f1[i]*f2[j]*f3[n1]*f4[n2])\n    return s\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    lst = [1,4,6,9,12,17,20,27,36,49,54,66,79,92,110,130,171,220,270,330,370,420,450,510,540,660,800,950,1000]\n    value = lst[n]\n    print(value)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    from timeit import default_timer as timer\n    from itertools import permutations\n    start = timer()\n    tri_numbers = permutations([i for i in range(1, n + 1)])\n    end = timer()\n    print(\"Tetrahedral Number of \", n, \"is\", end='')\n    print(len(tri_numbers))\n    print(\"with Time: \", end='')\n    print(end - start)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def num_tetra(n): \n        '''\n        Write a function to find the nth tetrahedral number.\n        '''\n        if n == 0: \n            return 1\n        elif n == 1: \n            return n\n        else: \n            return num_tetra(n - 1) + num_tetra(n - 2) \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedral(n, k):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return tetrahedral(n - 1, k + 1) + tetrahedral(n - 2, k + 1)\n    \n    return tetrahedral(n, 0)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r**3 * math.pi\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r**3,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return(4 * math.pi * r * r * r)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4/3.14 * math.pi * (r**3), 2)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*r*r*r*math.pi\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*math.pow(r,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4 * math.pi * (r**2)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # print(get_Char(strr))\n    # print(ord(strr[0])-ord('A'))\n    # print(ord(strr[0])%26)\n    # print(chr(ord('A')+ord(strr[0])%26))\n    return chr(ord(strr[0])-ord('A')%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return \"\".join([chr(ord(x) % ord('a')) for x in strr])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # store the characters in a list\n    char_list = list(strr)\n    # create a list with only the characters\n    char_list_length = len(char_list)\n    char_list_mod = []\n    # get the ASCII value of each character\n    for i in range(char_list_length):\n        # if the char is ascii, and the next char is different, assign it to the char_list_mod\n        if char_list[i] in range(65, 90) and char_list[i + 1] in range(65, 90) and char_list[i + 1] not in char_list_mod:\n            char_list_mod.append(char_list[i])\n            char_list_mod.append(char_list[i + 1])\n        # if the char is ascii, and the next char is different, assign it to the char_list_mod\n        if char_list[i] in range(65, 90) and char_list[i + 1] not in range(65, 90):\n            char_list_mod.append(char_list[i])\n            char_list_mod.append(char_list[i + 1])\n    # return the modified list\n    return char_list_mod\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for c in strr:\n        if c.isalpha():\n            char = char + c\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    c=0\n    for i in range(0,len(strr)):\n        c+=ord(strr[i])\n        c%=26\n    return chr(c)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    con = []\n    for i in strr:\n        con.append(ord(i))\n    return sum(con) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Using the modulo operation\n    return strr[strr.find('a')+1:strr.find('z')].count('a')\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_str = []\n    for i in range(len(strr)):\n        char_str.append(strr[i])\n        if i % 5 == 0:\n            char_str.append(chr(int(char_str[i]) % 26 + ord('A')))\n    return ''.join(char_str)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    l=[]\n    c=[]\n    s=''\n    for i in range(len(strr)):\n        for j in range(26):\n            if(ord(strr[i])%26==j):\n                l.append(strr[i])\n        c.append(l)\n        l=[]\n    print(c)\n    c=[]\n    for i in range(len(c)):\n        for j in range(26):\n            if(ord(c[i][j])%26==j):\n                s+=c[i][j]\n        c.append(s)\n        s=''\n    return c"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Local variables\n    char_mod = strr[0]\n    char_len = 0\n    for c in strr:\n        if c!= char_mod:\n            char_len += 1\n        else:\n            char_mod = c\n    \n    # Compute the character\n    # 0 == A\n    # -1 == a\n    # -2 == b\n    # -3 == c\n    if char_len == 1:\n        return char_mod\n    elif char_len == 2:\n        return char_mod + char_mod\n    elif char_len == 3:\n        return char_mod + char_mod + char_mod\n    else:\n        return char_mod + char_mod + char_mod + char_mod\n    \n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    if n == 1:\n        return 1\n    return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1,2,3]\n    for i in range(4,n+1): \n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (n % 8) * 3 + n // 8\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    while i <= n:\n        j = 1\n        while j <= n:\n            if i == j:\n                print(i, end=\" \")\n            j = j + 1\n        i = i + 1\n    return\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(1, n+1): \n        if n%i == 0: \n            return i \n    return n \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = n - 1\n    j = 0\n    m = 2\n    n = 1\n    while i >= 0:\n        if n == 0:\n            print(j)\n            break\n        if m % 2 == 1:\n            n = m\n            i -= 1\n            m = 2\n            j += 1\n        else:\n            j += 1\n            i -= 1\n            m = m + 2\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(len(nums)):\n        if n == nums[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def sequence_p(n): \n        dp = [1] + [0] * n\n        for i in range(2, n + 1): \n            dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n        return dp[n]\n    return sequence_p(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = n - 1\n    while n > 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    m = 1\n    while True:\n        if (n % 2 == 0):\n            n = n//2\n        else:\n            n = 3*n+1\n            m = m+1\n        print(n, m)\n        if n==1:\n            break\n    return m\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (1/3)*(r**3)*math.pi\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return r**3\ndef surfacearea_cube_with_stretches(r1,r2,r3):\n    '''\n    Write a function that takes two sets of radiuses and finds the surface area\n    '''\n    return (r1**3 + r2**3 + r3**3)*math.pi\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return math.pi*(r**2)\ndef surfacearea_triangle(r1,r2,r3):\n    '''\n    Write a function that finds the surface area of a triangle.\n    '''\n    return (r1*r2*r3)/3\ndef surfacearea_square(r):\n    '''\n    Write a function that finds the surface area of a square.\n    '''\n    return r**2*math.pi\ndef surfacearea_rectangle(r1,r2,r3):\n    '''\n    Write a function that finds the surface area of a rectangle.\n    '''\n    return (r1*r2*r3)/2\ndef surfacearea_pentagon(r1,r2,r3):\n    '''\n    Write a function that finds the surface area of a pentagon.\n    '''\n    return (r1*r2*r3)/5\ndef surfacearea_star(r1,r2,r3):\n    '''\n    Write a function that finds the surface area of a star.\n    '''\n    return (r1*r2*r3)/6\ndef surfacearea_rectangle_filled(r1,r2):\n    '''\n    Write a function that finds the surface area of a rectangle filled with circles.\n    '''\n    return (r1*r2*r3)/3\ndef surfacearea_square_filled(r1,r2):\n    '''\n    Write a function that finds the surface area of a rectangle filled with squares.\n    '''\n    return (r1*r2*r3)/4\ndef surfacearea_pentagon_filled(r1,r2,r3):\n    '''\n    Write a function that finds the surface area of a pentagon filled with stars.\n    '''\n    return (r1*r2*r3)/5\ndef surfacearea_star_filled(r1,r2,r3):\n    '''\n    Write a function that finds the surface area of a star filled with stars.\n    '''\n    return (r1*r2*r3)/6\ndef area_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (4*math.pi*r**3)/3\ndef area_sphere_with_stretches(r1,r2,r3):\n    '''\n    Write a function that returns the volume of a sphere with a set of radiuses.\n    '''\n    return (4*math.pi*r1**3)/3\ndef area_cube(r):\n    '''\n    Write a function that returns the volume of a cube.\n    '''\n    return (4/3)*(3*r**3)\ndef area_cube_with_stretches(r1,r2,r3):\n    '''\n    Write a function that returns the volume of a cube with a set of radiuses.\n    '''\n    return (4/3)*(3*r1**3)\ndef area_circle(r):\n    '''\n    Write a function that returns the volume of a circle.\n    '''\n    return (4/3)*(math.pi*r**3)\ndef area_triangle(r1,r2,r3):\n    '''\n    Write a function that returns the volume of a triangle.\n    '''\n    return (4/3)*(r1*r2*r3)\ndef area_square(r):\n    '''\n    Write a function that returns the volume of a square.\n    '''\n    return (4/3)*r**3\ndef area_rectangle(r1,r2,r3):\n    '''\n    Write a function that returns the volume of a rectangle.\n    '''\n    return (4/3)*r1*r2*r3\ndef area_pentagon(r1,r2,r3):\n    '''\n    Write a function that returns the volume of a pentagon.\n    '''\n    return (4/3)*r1*r2*r3\ndef area_rectangle_filled(r1,r2):\n    '''\n    Write a function that returns the volume of a rectangle filled with circles.\n    '''\n    return (4/3)*r1*r2*r3\ndef area_square_filled(r1,r2):\n    '''\n    Write a function that returns the volume of a rectangle filled with squares.\n    '''\n    return (4/3)*r1*r2*r3\ndef area_pentagon_filled(r1,r2,r3):\n    '''\n    Write a function that returns the volume of a pentagon filled with stars.\n    '''\n    return (4/3)*r1*r2*r3\ndef area_star_filled(r1,r2,r3):\n    '''\n    Write a function that returns the volume of a star filled with stars.\n    '''\n    return (4/3)*r1*r2*r3\ndef perimeter_sphere(r):\n    '''\n    Write a function that returns the perimetr of a sphere.\n    '''\n    return 3*r**2\ndef perimeter_sphere_with_stretches(r1,r2,r3):\n    '''\n    Write a function that returns the perimetr of a sphere with a set of radiuses.\n    '''\n    return (3*r1**2)+(3*r2**2)+(3*r3**2)\ndef perimeter_cube(r):\n    '''\n    Write a function that returns the perimetr of a cube.\n    '''\n    return 3*r**3\ndef perimeter_cube_with_stretches(r1,r2,r3):\n    '''\n    Write a function that returns the perimetr of a cube with a set of radiuses.\n    '''\n    return 3*r1**3+3*r2**3+3*r3**3\ndef perimeter_circle(r):\n    '''\n    Write a function that returns the perimetr of a circle.\n    '''\n    return 3*math.pi*r**2\ndef perimeter_circle_with_stretches(r1,r2,r3):\n    '''\n    Write a function that returns the perimetr of a circle with a set of radiuses.\n    '''\n    return 3*r1*math.pi+3*r2*math.pi+3*r3*math.pi\ndef perimeter_square(r):\n    '''\n    Write a function that returns the perimetr of a square.\n    '''\n    return 3*r**2\ndef perimeter_square_with_stretches(r1,r2,r3):\n    '''\n    Write a function that returns the perimetr of a square filled with circles.\n    '''\n    return 3*r1*math.pi+3*r2*math.pi+3*r3*math.pi\ndef perimeter_rectangle(r1,r2,r3):\n    '''\n    Write a function that returns the perimetr of a rectangle.\n    '''\n    return 3*r1*r2*r3\ndef perimeter_rectangle_filled(r1,r2):\n    '''\n    Write a function that returns the perimetr of a rectangle filled with squares.\n    '''\n    return 3*r1*r2*r3\ndef perimeter_square_filled(r1,r2):\n    '''\n    Write a function that returns the perimetr of a square filled with stars.\n    '''\n    return 3*r1*r2*r3\ndef perimeter_square_filled_with_stretches(r1,r2,r3):\n    '''\n    Write a function that returns the perimetr of a square filled with stars and with a set of radiuses.\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4.0*math.pi*r*r\n    print(\"The surface area of the sphere is %.2f.\" % (area))\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = 4 * math.pi * (r ** 2)\n    return surface\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # 1.\n    d = r * r\n    # 2.\n    return 4 * math.pi * d\n    \n    \ndef surfacearea_cylinder(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # 1.\n    d = (r2 - r1) * (r2 - r3)\n    # 2.\n    return 4 * math.pi * d\n    \n    \ndef surfacearea_cone(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    # 1.\n    d = (r3 - r2) * (r3 - r1)\n    # 2.\n    return 4 * math.pi * d\n    \n    \ndef surfacearea_trapezoid(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    # 1.\n    d = (r2 - r1) * (r2 - r3)\n    # 2.\n    return 4 * math.pi * d\n    \n    \ndef surfacearea_ellipse(r, a, b):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    # 1.\n    d = (b * b - 4 * a * r * r)\n    # 2.\n    return 4 * math.pi * d\n    \n    \ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    # 1.\n    d = a * b\n    # 2.\n    return 4 * math.pi * d\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    # 1.\n    d = 2 * math.pi * r\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_heptahedron(a, b, c):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    # 1.\n    d = (b * b - 4 * a * c)\n    # 2.\n    return 4 * math.pi * d\n    \n    \ndef surfacearea_chebyshev(a, b):\n    '''\n    Write a function to find the surface area of a chebyshev.\n    '''\n    # 1.\n    d = 2 * math.pi * (b * b - 4 * a * b)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_octahedron(a, b):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    # 1.\n    d = 4 * (a * a - 4 * b * b)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_tetrahedron(a, b, c):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    # 1.\n    d = (a * a - 2 * b * b + 2 * c * c)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_wedge(a, b):\n    '''\n    Write a function to find the surface area of a wedge.\n    '''\n    # 1.\n    d = 2 * math.pi * (a * b - b * a)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_monkey(a, b):\n    '''\n    Write a function to find the surface area of a monocarpal monkey.\n    '''\n    # 1.\n    d = 2 * math.pi * (a * b - b * a)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # 1.\n    d = (2 * math.pi) * r\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_cylinder(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # 1.\n    d = (2 * math.pi) * (r2 - r1)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_cone(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    # 1.\n    d = (r3 - r2) * (r3 - r1)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_trapezoid(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    # 1.\n    d = (r3 - r2) * (r3 - r1)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_ellipse(r, a, b):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    # 1.\n    d = (b * b - 4 * a * r * r)\n    # 2.\n    return 4 * math.pi * d\n    \n    \ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    # 1.\n    d = (b * b - 4 * a * a)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    # 1.\n    d = (r ** 2)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_heptahedron(a, b, c):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    # 1.\n    d = (a * b * b - 4 * a * c * r * r)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_chebyshev(a, b):\n    '''\n    Write a function to find the surface area of a chebyshev.\n    '''\n    # 1.\n    d = (a * b - 4 * a * b * a)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_octahedron(a, b):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    # 1.\n    d = (b * b - 4 * a * b * a)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_tetrahedron(a, b, c):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    # 1.\n    d = (a * a - 2 * b * b + 2 * c * c)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_wedge(a, b):\n    '''\n    Write a function to find the surface area of a wedge.\n    '''\n    # 1.\n    d = (a * b - b * a)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_monkey(a, b):\n    '''\n    Write a function to find the surface area of a monkey.\n    '''\n    # 1.\n    d = (a * b - b * a)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # 1.\n    d = (r ** 2)\n    # 2.\n    return 4 * d\n    \n    \ndef surfacearea_cylinder(r1, r2):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # area of sphere\n    area = 1/3*math.pi*r*r\n    # print(area)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (3.14*(r**2))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return r**2 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (r**3)*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = 2 * math.pi * r ** 2\n    return surface\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 6\n    elif n==3:\n        return 15\n    elif n==4:\n        return 22\n    elif n==5:\n        return 35\n    elif n==6:\n        return 48\n    elif n==7:\n        return 59\n    elif n==8:\n        return 72\n    elif n==9:\n        return 81\n    elif n==10:\n        return 96\n    elif n==11:\n        return 115\n    elif n==12:\n        return 132\n    elif n==13:\n        return 147\n    elif n==14:\n        return 156\n    elif n==15:\n        return 162\n    elif n==16:\n        return 167\n    elif n==17:\n        return 175\n    elif n==18:\n        return 200\n    elif n==19:\n        return 225\n    elif n==20:\n        return 240\n    elif n==21:\n        return 255\n    elif n==22:\n        return 270\n    elif n==23:\n        return 285\n    elif n==24:\n        return 300\n    elif n==25:\n        return 325\n    elif n==26:\n        return 350\n    elif n==27:\n        return 375\n    elif n==28:\n        return 400\n    elif n==29:\n        return 425\n    elif n==30:\n        return 450\n    elif n==31:\n        return 475\n    elif n==32:\n        return 500\n    elif n==33:\n        return 525\n    elif n==34:\n        return 550\n    elif n==35:\n        return 555\n    elif n==36:\n        return 600\n    elif n==37:\n        return 625\n    elif n==38:\n        return 650\n    elif n==39:\n        return 675\n    elif n==40:\n        return 700\n    elif n==41:\n        return 725\n    elif n==42:\n        return 750\n    elif n==43:\n        return 775\n    elif n==44:\n        return 800\n    elif n==45:\n        return 825\n    elif n==46:\n        return 750\n    elif n==47:\n        return 875\n    elif n==48:\n        return 900\n    elif n==49:\n        return 925\n    elif n==50:\n        return 750\n    elif n==51:\n        return 975\n    elif n==52:\n        return 1000\n    elif n==53:\n        return 975\n    elif n==54:\n        return 1100\n    elif n==55:\n        return 975\n    elif n==56:\n        return 1200\n    elif n==57:\n        return 975\n    elif n==58:\n        return 1300\n    elif n==59:\n        return 975\n    elif n==60:\n        return 1200\n    elif n==61:\n        return 975\n    elif n==62:\n        return 1300\n    elif n==63:\n        return 975\n    elif n==64:\n        return 1400\n    elif n==65:\n        return 975\n    elif n==66:\n        return 1400\n    elif n==67:\n        return 1500\n    elif n==68:\n        return 975\n    elif n==69:\n        return 1500\n    elif n==70:\n        return 1500\n    elif n==71:\n        return 1600\n    elif n==72:\n        return 975\n    elif n==73:\n        return 1600\n    elif n==74:\n        return 1700\n    elif n==75:\n        return 950\n    elif n==76:\n        return 975\n    elif n==77:\n        return 1700\n    elif n==78:\n        return 1700\n    elif n==79:\n        return 1775\n    elif n==80:\n        return 1800\n    elif n==81:\n        return 900\n    elif n==82:\n        return 800\n    elif n==83:\n        return 800\n    elif n==84:\n        return 900\n    elif n==85:\n        return 800\n    elif n==86:\n        return 900\n    elif n==87:\n        return 800\n    elif n==88:\n        return 900\n    elif n==89:\n        return 900\n    elif n==90:\n        return 900\n    elif n==91:\n        return 900\n    elif n==92:\n        return 900\n    elif n==93:\n        return 900\n    elif n==94:\n        return 900\n    elif n==95:\n        return 900\n    elif n==96:\n        return 900\n    elif n==97:\n        return 900\n    elif n==98:\n        return 900\n    elif n==99:\n        return 900\n    elif n==100:\n        return 900\n    elif n==101:\n        return 900\n    elif n==102:\n        return 900\n    elif n==103:\n        return 900\n    elif n==104:\n        return 900\n    elif n==105:\n        return 900\n    elif n==106:\n        return 900\n    elif n==107:\n        return 900\n    elif n==108:\n        return 900\n    elif n==109:\n        return 900\n    elif n==110:\n        return 900\n    elif n==111:\n        return 900\n    elif n==112:\n        return 900\n    elif n==113:\n        return 900\n    elif n==114:\n        return 900\n    elif n==115:\n        return 900\n    elif n==116:\n        return 900\n    elif n==117:\n        return 900\n    elif n==118:\n        return 900\n    elif n==119:\n        return 900\n    elif n==120:\n        return 900\n    elif n==121:\n        return 900\n    elif n==122:\n        return 900\n    elif n==123:\n        return 900\n    elif n==124:\n        return 900\n    elif n==125:\n        return 900\n    elif n==126:\n        return 900\n    elif n==127:\n        return 900\n    elif n==128:\n        return 900\n    elif n==129:\n        return 900\n    elif n==130:\n        return 900\n    elif n==131:\n        return 900\n    elif n==132:\n        return 900\n    elif n==133:\n        return 900\n    elif n==134:\n        return 900\n    elif n==135:\n        return 900\n    elif n==136:\n        return 900\n    elif n==137:\n        return 900\n    elif n==138:\n        return 900\n    elif n==139:\n        return 900\n    elif n==140:\n        return 900\n    elif n==141:\n        return 900\n    elif n==142:\n        return 900\n    elif n==143:\n        return 900\n    elif n==144:\n        return 900\n    elif n==145:\n        return 900\n    elif n==146:\n        return 900\n    elif n==147:\n        return 900\n    elif n==148:\n        return 900\n    elif n==149:\n        return 900\n    elif n==150:\n        return 900\n    elif n==151:\n        return 900\n    elif n==152:\n        return 900\n    elif n==153:\n        return 900\n    elif n==154:\n        return 900\n    elif n==155:\n        return 900\n    elif n==156:\n        return 900\n    elif n==157:\n        return 900\n    elif n==158:\n        return 900\n    elif n==159:\n        return 900\n    elif n==160:\n        return 900\n    elif n==161:\n        return 900\n    elif n==162:\n        return 900\n    elif n==163:\n        return 900\n    elif n==164:\n        return 900\n    elif n==165:\n        return 900\n    elif n==166:"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    c=0\n    for i in range(0,6):\n        if c%2==0:\n            c=c+n\n        else:\n            c=c+3*n\n    return c\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #Hexagonal number is the sum of the first half numbers.\n    #Takes n-1 as parameter.\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return n\n    if n == 1:\n        return n\n    else:\n        if n % 6 == 0:\n            return n - 1\n        else:\n            return n + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    return n * 4 + (n % 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    number = n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2) + centered_hexagonal_number(n-3))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n+1)//3)*(3*n+1)//2"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    sides = int(n**0.5) + 1\n    for i in range(1, sides):\n        if n % i == 0:\n            return n\n    return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*centered_hexagonal_number(n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # This is the number of hexagons\n    n_hexagons = n // 3\n    # This is the number of squares\n    n_squares = (n + 1) // 6\n    # This is the squares of the squares\n    squares = n_squares * 6\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if dict1 == {}:\n        print(\"First dictionary empty\")\n        return\n    if dict2 == {}:\n        print(\"Second dictionary empty\")\n        return\n    if dict3 == {}:\n        print(\"Third dictionary empty\")\n        return\n    if len(dict1)>0 and len(dict2)>0 and len(dict3)>0:\n        print(\"Total number of the three dictionaries is: \",len(dict1)+len(dict2)+len(dict3))\n    for key in dict1.keys():\n        if key in dict2.keys() and key in dict3.keys():\n            dict1[key] = merge_dictionaries_three(dict1[key],dict2[key],dict3[key])\n        else:\n            dict1[key] = dict1[key]\n    for key in dict2.keys():\n        if key in dict1.keys() and key in dict3.keys():\n            dict2[key] = merge_dictionaries_three(dict2[key],dict1[key],dict3[key])\n        else:\n            dict2[key] = dict2[key]\n    for key in dict3.keys():\n        if key in dict1.keys() and key in dict2.keys():\n            dict3[key] = merge_dictionaries_three(dict3[key],dict1[key],dict2[key])\n        else:\n            dict3[key] = dict3[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = dict1.copy()\n    res.update(dict2)\n    res.update(dict3)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1['key1'] = dict1['key1'] + dict2['key1']\n    dict1['key2'] = dict1['key2'] + dict2['key2']\n    dict1['key3'] = dict1['key3'] + dict2['key3']\n    dict3['key1'] = dict3['key1'] + dict2['key1']\n    dict3['key2'] = dict3['key2'] + dict2['key2']\n    dict3['key3'] = dict3['key3'] + dict2['key3']\n    return dict1, dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Cursor\n    # {'fname': 'John', 'lname': 'Smith'}\n    # {'fname': 'Bob', 'lname': 'Brown'}\n    # {'fname': 'Mary', 'lname': 'Brown'}\n    # {'fname': 'Kate', 'lname': 'Brown'}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if key in dict2.keys():\n            if dict2[key] is None:\n                dict2[key] = value\n            else:\n                dict2[key] = value + dict2[key]\n        else:\n            if dict2[key] is None:\n                dict2[key] = value\n            else:\n                dict2[key] = value + dict2[key]\n    for key, value in dict2.items():\n        if key in dict3.keys():\n            if dict3[key] is None:\n                dict3[key] = value\n            else:\n                dict3[key] = value + dict3[key]\n        else:\n            if dict3[key] is None:\n                dict3[key] = value\n            else:\n                dict3[key] = value + dict3[key]\n    for key, value in dict3.items():\n        result[key] = value\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1['a'] = dict1['a'] + dict2['a']\n    dict1['b'] = dict1['b'] + dict2['b']\n    dict1['c'] = dict1['c'] + dict2['c']\n    dict1['d'] = dict1['d'] + dict2['d']\n    dict1['e'] = dict1['e'] + dict2['e']\n    dict1['f'] = dict1['f'] + dict2['f']\n    dict1['g'] = dict1['g'] + dict2['g']\n    dict1['h'] = dict1['h'] + dict2['h']\n    dict1['i'] = dict1['i'] + dict2['i']\n    dict1['j'] = dict1['j'] + dict2['j']\n    dict1['k'] = dict1['k'] + dict2['k']\n    dict1['l'] = dict1['l'] + dict2['l']\n    dict1['m'] = dict1['m'] + dict2['m']\n    dict1['n'] = dict1['n'] + dict2['n']\n    dict1['o'] = dict1['o'] + dict2['o']\n    dict1['p'] = dict1['p'] + dict2['p']\n    dict1['q'] = dict1['q'] + dict2['q']\n    dict1['r'] = dict1['r'] + dict2['r']\n    dict1['s'] = dict1['s'] + dict2['s']\n    dict1['t'] = dict1['t'] + dict2['t']\n    dict1['u'] = dict1['u'] + dict2['u']\n    dict1['v'] = dict1['v'] + dict2['v']\n    dict1['w'] = dict1['w'] + dict2['w']\n    dict1['x'] = dict1['x'] + dict2['x']\n    dict1['y'] = dict1['y'] + dict2['y']\n    dict1['z'] = dict1['z'] + dict2['z']\n    dict1['a'] = dict1['a'] + dict3['a']\n    dict1['b'] = dict1['b'] + dict3['b']\n    dict1['c'] = dict1['c'] + dict3['c']\n    dict1['d'] = dict1['d'] + dict3['d']\n    dict1['e'] = dict1['e'] + dict3['e']\n    dict1['f'] = dict1['f'] + dict3['f']\n    dict1['g'] = dict1['g'] + dict3['g']\n    dict1['h'] = dict1['h'] + dict3['h']\n    dict1['i'] = dict1['i'] + dict3['i']\n    dict1['j'] = dict1['j'] + dict3['j']\n    dict1['k'] = dict1['k'] + dict3['k']\n    dict1['l'] = dict1['l'] + dict3['l']\n    dict1['m'] = dict1['m'] + dict3['m']\n    dict1['n'] = dict1['n'] + dict3['n']\n    dict1['o'] = dict1['o'] + dict3['o']\n    dict1['p'] = dict1['p'] + dict3['p']\n    dict1['q'] = dict1['q'] + dict3['q']\n    dict1['r'] = dict1['r'] + dict3['r']\n    dict1['s'] = dict1['s'] + dict3['s']\n    dict1['t'] = dict1['t'] + dict3['t']\n    dict1['u'] = dict1['u'] + dict3['u']\n    dict1['v'] = dict1['v'] + dict3['v']\n    dict1['w'] = dict1['w'] + dict3['w']\n    dict1['x'] = dict1['x'] + dict3['x']\n    dict1['y'] = dict1['y'] + dict3['y']\n    dict1['z'] = dict1['z'] + dict3['z']\n    dict1['a'] = dict1['a'] + dict4['a']\n    dict1['b'] = dict1['b'] + dict4['b']\n    dict1['c'] = dict1['c'] + dict4['c']\n    dict1['d'] = dict1['d'] + dict4['d']\n    dict1['e'] = dict1['e'] + dict4['e']\n    dict1['f'] = dict1['f'] + dict4['f']\n    dict1['g'] = dict1['g'] + dict4['g']\n    dict1['h'] = dict1['h'] + dict4['h']\n    dict1['i'] = dict1['i'] + dict4['i']\n    dict1['j'] = dict1['j'] + dict4['j']\n    dict1['k'] = dict1['k'] + dict4['k']\n    dict1['l'] = dict1['l'] + dict4['l']\n    dict1['m'] = dict1['m'] + dict4['m']\n    dict1['n'] = dict1['n'] + dict4['n']\n    dict1['o'] = dict1['o'] + dict4['o']\n    dict1['p'] = dict1['p'] + dict4['p']\n    dict1['q'] = dict1['q'] + dict4['q']\n    dict1['r'] = dict1['r'] + dict4['r']\n    dict1['s'] = dict1['s'] + dict4['s']\n    dict1['t'] = dict1['t'] + dict4['t']\n    dict1['u'] = dict1['u'] + dict4['u']\n    dict1['v'] = dict1['v'] + dict4['v']\n    dict1['w'] = dict1['w'] + dict4['w']\n    dict1['x'] = dict1['x'] + dict4['x']\n    dict1['y'] = dict1['y'] + dict4['y']\n    dict1['z'] = dict1['z'] + dict4['z']\n    dict1['a'] = dict1['a'] + dict5['a']\n    dict1['b'] = dict1['b'] + dict5['b']\n    dict1['c'] = dict1['c'] + dict5['c']\n    dict1['d'] = dict1['d'] + dict5['d']\n    dict1['e'] = dict1['e'] + dict5['e']\n    dict1['f'] = dict1['f'] + dict5['f']\n    dict1['g'] = dict1['g'] + dict5['g']\n    dict1['h'] = dict1['h'] + dict5['h']\n    dict1['i'] = dict1['i'] + dict5['i']\n    dict1['j'] = dict1['j'] + dict5['j']\n    dict1['k'] = dict1['k'] + dict5['k']\n    dict1['l'] = dict1['l'] + dict5['l']\n    dict1['m'] = dict1['m'] + dict5['m']\n    dict1['n'] = dict1['n'] + dict5['n']\n    dict1['o'] = dict1['o'] + dict5['o']\n    dict1['p'] = dict1['p'] + dict5['p']\n    dict1['q'] = dict1['q'] + dict5['q']\n    dict1['r'] = dict1['r'] + dict5['r']\n    dict1['s'] = dict1['s'] + dict5['s']\n    dict1['t'] = dict1['t'] + dict5['t']\n    dict1['u'] = dict1['u'] + dict5['u']\n    dict1['v'] = dict1['v'] + dict5['v']\n    dict1['w'] = dict1['w'] + dict5['w']\n    dict1['x'] = dict1['x'] + dict5['x']\n    dict1['y'] = dict1['y'] + dict5['y']\n    dict1['z'] = dict1['z'] + dict5['z']\n    dict1['a'] = dict1['a'] + dict6['a']\n    dict1['"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    list_of_keys = [x[0] for x in dict2.items()]\n    list_of_values = [x[1] for x in dict2.items()]\n    dict_combined = dict1.copy()\n    dict_combined.update({list_of_keys[0] : list_of_values[0]})\n    for key, value in dict2.items():\n        if key in dict_combined:\n            if value < dict_combined[key]:\n                dict_combined[key] = value\n            else:\n                dict_combined[key] = dict_combined[key] + value\n        else:\n            dict_combined[key] = value\n    return dict_combined\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1:\n        return dict3\n    if not dict2:\n        return dict3\n    if not dict3:\n        return dict1\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_to_return = {}\n    # merge the dictionaries in order\n    for k in dict1.keys():\n        if k in dict2.keys():\n            dict_to_return[k] = dict1[k]\n        elif k in dict3.keys():\n            dict_to_return[k] = dict3[k]\n        else:\n            dict_to_return[k] = dict2[k]\n    # do a simple check to see if the key was already present\n    for k,v in dict_to_return.items():\n        if v in dict_to_return.values():\n            pass\n        else:\n            dict_to_return[k] = v\n    return dict_to_return\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key1,value1 in dict1.items():\n        for key2,value2 in dict2.items():\n            if key1 in dict3.keys():\n                if key2 in dict3.keys():\n                    value1 += dict3[key2]\n            else:\n                value1 += value2\n            if key2 not in result.keys():\n                result[key2] = value2\n    for key1,value1 in dict1.items():\n        for key2,value2 in dict2.items():\n            if key1 in dict3.keys():\n                if key2 in dict3.keys():\n                    value1 += dict3[key2]\n            else:\n                value1 += value2\n            if key2 not in result.keys():\n                result[key2] = value2\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dic={}\n    for element in list1:\n        if element in freq_dic:\n            freq_dic[element]=freq_dic[element]+1\n        else:\n            freq_dic[element]=1\n    return freq_dic\n    \n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    out=dict()\n    for i in list1:\n        if i in out:\n            out[i]+=1\n        else:\n            out[i]=1\n    return out\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for item in list1:\n        if item in freq_dict.keys():\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Your code here\n    freq=collections.Counter(list1)\n    freq={key:freq[key] for key in freq}\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = dict()\n    for elem in list1:\n        frequency[elem] = list1.count(elem)\n    return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    # your code here\n    # COMPLETE\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list_freq = collections.Counter(list1)\n    list_freq = dict(list_freq)\n    return list_freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = collections.Counter(list1)\n    return frequency\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef rotate_left(list1):\n    '''\n    Write a function that rotates the list left by one element.\n    '''\n    return list1[1:] + list1[:1]\n    \ndef reverse_string_rec(string, len):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len == 0:\n        return string\n    elif len == 1:\n        return string[1:] + string[0]\n    else:\n        return string[1:] + reverse_string_rec(string[0:len-1], len-1)\n    \ndef sort_list(list1):\n    '''\n    Write a function that sorts a list of numbers.\n    '''\n    list1.sort()\n    return list1\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_rec(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec2(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec2(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec3(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec3(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec4(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec4(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec5(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec5(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec6(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec6(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec7(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec7(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec8(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec8(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec9(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec9(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec10(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec10(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec11(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec11(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec12(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec12(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec13(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec13(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec14(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    elif string[i-1] == string[j-1]:\n        return is_palindrome_rec14(string, i-2, j-2)\n    else:\n        return False\n    \ndef is_palindrome_rec15(string, i, j):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if i == j:\n        return True\n    elif i == 0 or i == 1:\n        return False\n    eli"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = -1\n    \n    for i in range(N + 1):\n        if N < i:\n            return num\n            break\n        if i < N and num < i:\n            num = i\n    return num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # use a while loop to break up a list by using if condition\n    while True:\n        num = N\n        # break out of loop when we have n\n        if num == N:\n            break\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    lst = []\n    for i in range(N,1,-1):\n        lst.append(i)\n        \n    for i in range(N):\n        \n        if lst[i+1] < lst[i]:\n            lst[i+1] = lst[i]\n        \n    return lst[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 1\n    elif N == 4:\n        return 2\n    elif N == 5:\n        return 3\n    elif N == 6:\n        return 4\n    elif N == 7:\n        return 5\n    elif N == 8:\n        return 6\n    elif N == 9:\n        return 7\n    elif N == 10:\n        return 8\n    elif N == 11:\n        return 9\n    elif N == 12:\n        return 10\n    elif N == 13:\n        return 11\n    elif N == 14:\n        return 12\n    elif N == 15:\n        return 13\n    elif N == 16:\n        return 14\n    elif N == 17:\n        return 15\n    elif N == 18:\n        return 16\n    elif N == 19:\n        return 17\n    elif N == 20:\n        return 18\n    elif N == 21:\n        return 19\n    elif N == 22:\n        return 20\n    elif N == 23:\n        return 21\n    elif N == 24:\n        return 22\n    elif N == 25:\n        return 23\n    elif N == 26:\n        return 24\n    elif N == 27:\n        return 25\n    elif N == 28:\n        return 26\n    elif N == 29:\n        return 27\n    elif N == 30:\n        return 28\n    elif N == 31:\n        return 29\n    elif N == 32:\n        return 30\n    elif N == 33:\n        return 31\n    elif N == 34:\n        return 32\n    elif N == 35:\n        return 33\n    elif N == 36:\n        return 34\n    elif N == 37:\n        return 35\n    elif N == 38:\n        return 36\n    elif N == 39:\n        return 37\n    elif N == 40:\n        return 38\n    elif N == 41:\n        return 39\n    elif N == 42:\n        return 40\n    elif N == 43:\n        return 41\n    elif N == 44:\n        return 42\n    elif N == 45:\n        return 43\n    elif N == 46:\n        return 44\n    elif N == 47:\n        return 45\n    elif N == 48:\n        return 46\n    elif N == 49:\n        return 47\n    elif N == 50:\n        return 48\n    elif N == 51:\n        return 49\n    elif N == 52:\n        return 50\n    elif N == 53:\n        return 51\n    elif N == 54:\n        return 52\n    elif N == 55:\n        return 53\n    elif N == 56:\n        return 54\n    elif N == 57:\n        return 55\n    elif N == 58:\n        return 56\n    elif N == 59:\n        return 57\n    elif N == 60:\n        return 58\n    elif N == 61:\n        return 59\n    elif N == 62:\n        return 60\n    elif N == 63:\n        return 61\n    elif N == 64:\n        return 62\n    elif N == 65:\n        return 63\n    elif N == 66:\n        return 64\n    elif N == 67:\n        return 65\n    elif N == 68:\n        return 66\n    elif N == 69:\n        return 67\n    elif N == 70:\n        return 68\n    elif N == 71:\n        return 69\n    elif N == 72:\n        return 70\n    elif N == 73:\n        return 71\n    elif N == 74:\n        return 72\n    elif N == 75:\n        return 73\n    elif N == 76:\n        return 74\n    elif N == 77:\n        return 75\n    elif N == 78:\n        return 76\n    elif N == 79:\n        return 77\n    elif N == 80:\n        return 78\n    elif N == 81:\n        return 79\n    elif N == 82:\n        return 80\n    elif N == 83:\n        return 81\n    elif N == 84:\n        return 82\n    elif N == 85:\n        return 83\n    elif N == 86:\n        return 84\n    elif N == 87:\n        return 85\n    elif N == 88:\n        return 86\n    elif N == 89:\n        return 87\n    elif N == 90:\n        return 88\n    elif N == 91:\n        return 89\n    elif N == 92:\n        return 90\n    elif N == 93:\n        return 91\n    elif N == 94:\n        return 92\n    elif N == 95:\n        return 93\n    elif N == 96:\n        return 94\n    elif N == 97:\n        return 95\n    elif N == 98:\n        return 96\n    elif N == 99:\n        return 97\n    elif N == 100:\n        return 98\n    elif N == 101:\n        return 99\n    elif N == 102:\n        return 100\n    elif N == 103:\n        return 101\n    elif N == 104:\n        return 102\n    elif N == 105:\n        return 103\n    elif N == 106:\n        return 104\n    elif N == 107:\n        return 105\n    elif N == 108:\n        return 106\n    elif N == 109:\n        return 107\n    elif N == 110:\n        return 108\n    elif N == 111:\n        return 109\n    elif N == 112:\n        return 110\n    elif N == 113:\n        return 111\n    elif N == 114:\n        return 112\n    elif N == 115:\n        return 113\n    elif N == 116:\n        return 114\n    elif N == 117:\n        return 115\n    elif N == 118:\n        return 116\n    elif N == 119:\n        return 117\n    elif N == 120:\n        return 118\n    elif N == 121:\n        return 119\n    elif N == 122:\n        return 120\n    elif N == 123:\n        return 121\n    elif N == 124:\n        return 122\n    elif N == 125:\n        return 123\n    elif N == 126:\n        return 124\n    elif N == 127:\n        return 125\n    elif N == 128:\n        return 126\n    elif N == 129:\n        return 127\n    elif N == 130:\n        return 128\n    elif N == 131:\n        return 129\n    elif N == 132:\n        return 130\n    elif N == 133:\n        return 131\n    elif N == 134:\n        return 132\n    elif N == 135:\n        return 133\n    elif N == 136:\n        return 134\n    elif N == 137:\n        return 135\n    elif N == 138:\n        return 136\n    elif N == 139:\n        return 137\n    elif N == 140:\n        return 138\n    elif N == 141:\n        return 139\n    elif N == 142:\n        return 140\n    elif N == 143:\n        return 141\n    elif N == 144:\n        return 142\n    elif N == 145:\n        return 143\n    elif N == 146:\n        return 144\n    elif N == 147:\n        return 145\n    elif N == 148:\n        return 146\n    elif N == 149:\n        return 147\n    elif N == 150:\n        return 148\n    elif N == 151:\n        return 149\n    elif N == 152:\n        return 150\n    elif N == 153:\n        return 151\n    elif N == 154:\n        return 152\n    elif N == 155:\n        return 153\n    elif N == 156:\n        return 154\n    elif N == 157:\n        return 155\n    elif N == 158:\n        return 156\n    elif N == 159:\n        return 157\n    elif N == 160:\n        return 158\n    elif N == 161:\n        return 159\n    elif N == 162:\n        return 160\n    elif N == 163:\n        return 161\n    elif N == 164:\n        return 162\n    elif N == 165:\n        return 163\n    elif N == 166:\n        return 164\n    elif N == 167:\n        return 165\n    elif N == 168:\n        return 166\n    eli"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lower = N\n    for i in range(2, int(N**0.5)+1):\n        if N % i == 0:\n            if N//i == lower:\n                return i\n            else:\n                lower = N//i\n    return lower\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Write your code here\n    num_list = []\n    num_list.append(int(N))\n    #print(num_list)\n    for i in range(len(num_list)-1):\n        if num_list[i+1] < num_list[i]:\n            num_list[i+1] = num_list[i]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    return N\n    \n    \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(1, N+1):\n        if i < closest:\n            closest = i\n    return closest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = len(max(list1, key=len))\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1 == []:\n        return 0\n    else:\n        max = len(max(list1, key=len))\n        return max\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    print(length)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    def longest_word(list1):\n        '''\n        Write a python function to find the length of the longest word.\n        '''\n        \n        # create a list to hold the longest words\n        longest_list = []\n        # iterate over the list\n        for word in list1:\n            # check if the length of the word is longer than the longest word\n            if len(word) > len(longest_list):\n                # if the length of the word is longer, set the word to be the longest word\n                longest_list = word\n        # return the longest word\n        return longest_list\n    # create a function for finding the length of the longest word\n    def len_log(list1):\n        '''\n        Write a python function to find the length of the longest word.\n        '''\n        \n        # create a list to hold the longest words\n        longest_list = []\n        # iterate over the list\n        for word in list1:\n            # check if the length of the word is longer than the longest word\n            if len(word) > len(longest_list):\n                # if the length of the word is longer, set the word to be the longest word\n                longest_list = word\n        # return the longest word\n        return longest_list\n    # call the function to find the length of the longest word\n    return len_log(list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for item in list1:\n        length = len(item)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1:\n        for i in range(len(list1)):\n            if list1[i].isspace():\n                return len(list1) - 1\n        return 0\n    else:\n        return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #splits word into a list\n    word_list = []\n    for i in range(0, len(list1)):\n        word = list1[i]\n        word_list.append(word)\n    #convert list into string\n    word_string = ''.join(word_list)\n    #get the longest word\n    word_length = len(max(word_list, key = len))\n    #print the length\n    print(word_length)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for i in list1:\n        if len(i) > len(set(i)):\n            max = len(i)\n    return max\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Initialize an empty string that will hold the result\n    sub_string = ''\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Initialize count variable\n    count = 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    ind = 0\n    flag = 0\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            ind = i\n            flag = 1\n            break\n    if flag == 0:\n        return False\n    else:\n        return ind\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < 2:\n        return False\n    if len(str1) == 2:\n        if str1[0] == sub_str[0] and str1[1] == sub_str[1]:\n            return True\n        else:\n            return False\n    if len(str1) > 2:\n        if str1[0] == sub_str[0] and str1[1] == sub_str[1]:\n            for i in range(2, len(str1)):\n                if str1[i] == sub_str[0] and str1[i] == sub_str[1]:\n                    return True\n        else:\n            return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    def length(s1, s2):\n        if len(s1) > len(s2):\n            return length(s2, s1)\n        elif len(s1) < len(s2):\n            return length(s1, s2)\n        else:\n            return min(len(s1), len(s2))\n    return len(str1.replace(sub_str, '')) >= length(sub_str, str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pattern = sub_str.find(sub_str)\n    return pattern!= -1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    j = 0\n    if(str1 == \"\"):\n        return \"No String\"\n    if(len(sub_str) == 0):\n        return \"No Substring\"\n    \n    while(i < len(str1)):\n        if(str1[i:i+len(sub_str)] == sub_str):\n            return str1[i:i+len(sub_str)]\n        i += 1\n    return \"No Match\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = list(sub_str)\n    left, right = 0, 0\n    while right < len(str1):\n        if str1[right] in sub_str_list:\n            sub_str_list.remove(str1[right])\n            right += 1\n        else:\n            right += 1\n            left += 1\n    return left < len(sub_str_list)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    length = len(sub_str)\n    if length == 0:\n        return True\n    if len(str1) == 0:\n        return False\n    for i in range(0,len(str1)):\n        for j in range(0,length):\n            if sub_str[j] == str1[i]:\n                if len(str1) > i + length - j - 1:\n                    return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    elif n % 2!= 0 and n % 3!= 0:\n        return False\n    elif n % 2!= 0 and n % 3 == 0:\n        return False\n    elif n % 2 == 0 and n % 3!= 0:\n        return False\n    elif n % 2 == 0 and n % 3 == 0:\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    i = 1\n    while (n >= (i * i)) and (n % (i * i)!= 0): \n        i += 1\n    if n == i * i: \n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # def is_undulating(n):\n    #     if n == 0:\n    #         return True\n    #     if n == 1:\n    #         return False\n    #     if n == 2:\n    #         return True\n    #     if n == 3:\n    #         return False\n    #     if n == 4:\n    #         return True\n    #     if n == 5:\n    #         return False\n    #     if n == 6:\n    #         return True\n    #     if n == 7:\n    #         return False\n    #     if n == 8:\n    #         return True\n    #     if n == 9:\n    #         return False\n    #     if n == 10:\n    #         return True\n    #     if n == 11:\n    #         return False\n    #     if n == 12:\n    #         return True\n    #     if n == 13:\n    #         return False\n    #     if n == 14:\n    #         return True\n    #     if n == 15:\n    #         return False\n    #     if n == 16:\n    #         return True\n    #     if n == 17:\n    #         return False\n    #     if n == 18:\n    #         return True\n    #     if n == 19:\n    #         return False\n    #     if n == 20:\n    #         return True\n    #     if n == 21:\n    #         return False\n    #     if n == 22:\n    #         return True\n    #     if n == 23:\n    #         return False\n    #     if n == 24:\n    #         return True\n    #     if n == 25:\n    #         return False\n    #     if n == 26:\n    #         return True\n    #     if n == 27:\n    #         return False\n    #     if n == 28:\n    #         return True\n    #     if n == 29:\n    #         return False\n    #     if n == 30:\n    #         return True\n    #     if n == 31:\n    #         return False\n    #     if n == 32:\n    #         return True\n    #     if n == 33:\n    #         return False\n    #     if n == 34:\n    #         return True\n    #     if n == 35:\n    #         return False\n    #     if n == 36:\n    #         return True\n    #     if n == 37:\n    #         return False\n    #     if n == 38:\n    #         return True\n    #     if n == 39:\n    #         return False\n    #     if n == 40:\n    #         return True\n    #     if n == 41:\n    #         return False\n    #     if n == 42:\n    #         return True\n    #     if n == 43:\n    #         return False\n    #     if n == 44:\n    #         return True\n    #     if n == 45:\n    #         return False\n    #     if n == 46:\n    #         return True\n    #     if n == 47:\n    #         return False\n    #     if n == 48:\n    #         return True\n    #     if n == 49:\n    #         return False\n    #     if n == 50:\n    #         return True\n    #     if n == 51:\n    #         return False\n    #     if n == 52:\n    #         return True\n    #     if n == 53:\n    #         return False\n    #     if n == 54:\n    #         return True\n    #     if n == 55:\n    #         return False\n    #     if n == 56:\n    #         return True\n    #     if n == 57:\n    #         return False\n    #     if n == 58:\n    #         return True\n    #     if n == 59:\n    #         return False\n    #     if n == 60:\n    #         return True\n    #     if n == 61:\n    #         return False\n    #     if n == 62:\n    #         return True\n    #     if n == 63:\n    #         return False\n    #     if n == 64:\n    #         return True\n    #     if n == 65:\n    #         return False\n    #     if n == 66:\n    #         return True\n    #     if n == 67:\n    #         return False\n    #     if n == 68:\n    #         return True\n    #     if n == 69:\n    #         return False\n    #     if n == 70:\n    #         return True\n    #     if n == 71:\n    #         return False\n    #     if n == 72:\n    #         return True\n    #     if n == 73:\n    #         return False\n    #     if n == 74:\n    #         return True\n    #     if n == 75:\n    #         return False\n    #     if n == 76:\n    #         return True\n    #     if n == 77:\n    #         return False\n    #     if n == 78:\n    #         return True\n    #     if n == 79:\n    #         return False\n    #     if n == 80:\n    #         return True\n    #     if n == 81:\n    #         return False\n    #     if n == 82:\n    #         return True\n    #     if n == 83:\n    #         return False\n    #     if n == 84:\n    #         return True\n    #     if n == 85:\n    #         return False\n    #     if n == 86:\n    #         return True\n    #     if n == 87:\n    #         return False\n    #     if n == 88:\n    #         return True\n    #     if n == 89:\n    #         return False\n    #     if n == 90:\n    #         return True\n    #     if n == 91:\n    #         return False\n    #     if n == 92:\n    #         return True\n    #     if n == 93:\n    #         return False\n    #     if n == 94:\n    #         return True\n    #     if n == 95:\n    #         return False\n    #     if n == 96:\n    #         return True\n    #     if n == 97:\n    #         return False\n    #     if n == 98:\n    #         return True\n    #     if n == 99:\n    #         return False\n    #     if n == 100:\n    #         return True\n    #     if n == 101:\n    #         return False\n    #     if n == 102:\n    #         return True\n    #     if n == 103:\n    #         return False\n    #     if n == 104:\n    #         return True\n    #     if n == 105:\n    #         return False\n    #     if n == 106:\n    #         return True\n    #     if n == 107:\n    #         return False\n    #     if n == 108:\n    #         return True\n    #     if n == 109:\n    #         return False\n    #     if n == 110:\n    #         return True\n    #     if n == 111:\n    #         return False\n    #     if n == 112:\n    #         return True\n    #     if n == 113:\n    #         return False\n    #     if n == 114:\n    #         return True\n    #     if n == 115:\n    #         return False\n    #     if n == 116:\n    #         return True\n    #     if n == 117:\n    "
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True\n    elif n % 10 == 0:\n        return False\n    elif n % 10 == 5: \n        return True\n    else: \n        return is_undulating(n//10)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_rec(n, p):\n        if n == 1:\n            return False\n        if n == 2:\n            return p\n        if n == 3:\n            return p + 1\n        if n == 4:\n            return p + 2\n        if n == 5:\n            return p + 3\n        if n == 6:\n            return p + 4\n        if n == 7:\n            return p + 5\n        return p + 6\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        print('This is a even number.')\n    else:\n        print('This is a odd number.')\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n % 2!= 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a = [1,2,3,4,5,6]\n    num = 4\n    res = False\n    for i in range(len(a)):\n        if a[i] % num == 0:\n            if a[i] == 0:\n                res = True\n    return res\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==0:\n        return 0\n    if b==0:\n        return 1\n    if b<0:\n        return 0\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b:\n        result = result * a\n        b -= 1\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==1:\n        return b\n    elif a==0:\n        return a\n    else:\n        return power(a,b//a)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif a == 1:\n        return b\n    else:\n        return a*power(a,b-1)\n    \nprint(power(3,2))\nprint(power(5,4))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return a**b\n    except TypeError:\n        print(\"Cannot perform power operation.\")\n        return\n    except ZeroDivisionError:\n        print(\"Cannot divide by 0\")\n        return\n    except ValueError:\n        print(\"Invalid input\")\n        return\n    except:\n        print(\"An error occurred\")\n        return\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # YOUR CODE HERE\n    print(\"INITIALIZING THE INDEX MINIMUM FUNCTION\")\n    x=0\n    for i in test_list:\n        if x<i[0]:\n            x=i[0]\n            y=i[1]\n    return y\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = float('inf')\n    for i in range(0, len(test_list)):\n        if test_list[i][1] < smallest:\n            smallest = test_list[i][1]\n            smallest_idx = i\n    return smallest_idx\ndef index_minimum_bisect(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = float('inf')\n    for i in range(0, len(test_list)):\n        if test_list[i][1] < smallest:\n            smallest = test_list[i][1]\n            smallest_idx = i\n    return smallest_idx\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    largeest = float('-inf')\n    for i in range(0, len(test_list)):\n        if test_list[i][1] > largeest:\n            largeest = test_list[i][1]\n            largeest_idx = i\n    return largeest_idx\ndef index_maximum_bisect(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    largeest = float('-inf')\n    for i in range(0, len(test_list)):\n        if test_list[i][1] > largeest:\n            largeest = test_list[i][1]\n            largeest_idx = i\n    return largeest_idx\ndef index_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all elements in the list.\n    '''\n    sum = 0\n    for i in range(0, len(test_list)):\n        sum = sum + test_list[i][1]\n    return sum\ndef index_sum_bisect(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all elements in the list.\n    '''\n    sum = 0\n    for i in range(0, len(test_list)):\n        sum = sum + test_list[i][1]\n    return sum\ndef index_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of all elements in the list.\n    '''\n    sum = 0\n    for i in range(0, len(test_list)):\n        sum = sum + test_list[i][1]\n    return sum / len(test_list)\ndef index_average_bisect(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of all elements in the list.\n    '''\n    sum = 0\n    for i in range(0, len(test_list)):\n        sum = sum + test_list[i][1]\n    return sum / len(test_list)\ndef index_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all elements in the list.\n    '''\n    middle = len(test_list) // 2\n    low = 0\n    high = len(test_list) - 1\n    if middle == 0:\n        return test_list[0][1]\n    else:\n        if middle % 2 == 1:\n            return (test_list[middle][1] + test_list[middle - 1][1]) / 2\n        else:\n            return (test_list[middle][1] + test_list[middle][1] + test_list[middle - 1][1]) / 3\ndef index_median_bisect(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of all elements in the list.\n    '''\n    middle = len(test_list) // 2\n    low = 0\n    high = len(test_list) - 1\n    if middle == 0:\n        return test_list[0][1]\n    else:\n        if middle % 2 == 1:\n            return (test_list[middle][1] + test_list[middle - 1][1]) / 2\n        else:\n            return (test_list[middle][1] + test_list[middle][1] + test_list[middle - 1][1]) / 3\ndef index_mode(test_list):\n    '''\n    Given a list of tuples, write a function that returns the mode of all elements in the list.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][0]\n    else:\n        if len(test_list) % 2 == 0:\n            index = len(test_list) // 2\n            if index == 1:\n                mode = test_list[index][0]\n                return mode\n            elif index == 0:\n                mode = test_list[index][0]\n                return mode\n            elif index == len(test_list) - 1:\n                mode = index_mode(test_list[:index])\n                return mode\n            else:\n                mode = test_list[index][0]\n                mode_1 = index_mode(test_list[:index])\n                mode_2 = index_mode(test_list[index:])\n                return (mode_1 if mode == mode_2 else mode)\n        else:\n            index = len(test_list) // 2\n            if index == 1:\n                mode = test_list[index][0]\n                return mode\n            elif index == 0:\n                mode = test_list[index][0]\n                return mode\n            elif index == len(test_list) - 1:\n                mode = index_mode(test_list[:index])\n                return mode\n            else:\n                mode = index_mode(test_list[index:])\n                mode_1 = index_mode(test_list[:index])\n                mode_2 = index_mode(test_list[index + 1:])\n                return (mode_1 if mode == mode_2 else mode)\ndef index_mode_bisect(test_list):\n    '''\n    Given a list of tuples, write a function that returns the mode of all elements in the list.\n    '''\n    index = len(test_list) // 2\n    if index == 1:\n        return test_list[0][0]\n    else:\n        if index % 2 == 1:\n            mode = test_list[index][0]\n            mode_1 = index_mode(test_list[:index])\n            mode_2 = index_mode(test_list[index:])\n            return mode_1 if mode == mode_2 else mode\n        else:\n            mode = test_list[index][0]\n            mode_1 = index_mode(test_list[:index])\n            mode_2 = index_mode(test_list[index:])\n            return (mode_1 if mode == mode_2 else mode)\ndef index_range(test_list):\n    '''\n    Given a list of tuples, write a function that returns the range of all elements in the list.\n    '''\n    start_index = 0\n    end_index = len(test_list) - 1\n    return start_index, end_index\ndef index_range_bisect(test_list):\n    '''\n    Given a list of tuples, write a function that returns the range of all elements in the list.\n    '''\n    start_index = 0\n    end_index = len(test_list) - 1\n    return start_index, end_index\ndef index_median_range(test_list):\n    '''\n    Given a list of tuples, write a function that returns the range of all elements in the list.\n    '''\n    start_index, end_index = index_range(test_list)\n    if len(test_list) % 2 == 0:\n        return (test_list[start_index][1] + test_list[end_index][1]) / 2\n    else:\n        return (test_list[start_index][1] + test_list[end_index][1]) / 2\ndef index_me"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list,key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0][1]\n    smallest_index = 0\n    for index, item in enumerate(test_list):\n        if item[1] < smallest:\n            smallest = item[1]\n            smallest_index = index\n    return smallest_index"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    if len(test_list) == 0:\n        return None\n    \n    min_index = 0\n    \n    for index in range(len(test_list)):\n        \n        if test_list[min_index][0] > test_list[index][0]:\n            min_index = index\n    \n    return test_list[min_index][1]\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp = sorted(test_list, key=itemgetter(1))\n    minimum = temp[0][0]\n    for value in temp:\n        if value[0] < minimum:\n            minimum = value[0]\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list)[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_second = None\n    for i in range(len(test_list)):\n        if (test_list[i][1] < test_list[min_index][1]):\n            min_second = test_list[i][1]\n            min_index = i\n    return test_list[min_index][0], min_second\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # 1. Create a function that takes a list as its only argument and returns a list with the smallest values of the tuple\n    # 2. Initialize an empty dictionary\n    # 3. For each tuple in the list:\n    #     3-1. If it contains a value greater than the current smallest one:\n    #         3-2. Return it\n    #     3-2. Else:\n    #         3-3. Add the value to the dictionary with the lowest value.\n    #         3-4. Remove it from the list and it is not needed anymore\n    # 4. Return the dictionary\n    def index_minimum(test_list):\n        index_dictionary = {}\n        for i in range(len(test_list)):\n            if test_list[i][1] in index_dictionary.keys():\n                index_dictionary[test_list[i][1]]+=test_list[i][0]\n            else:\n                index_dictionary[test_list[i][1]]=test_list[i][0]\n        return(sorted(index_dictionary.items(),key=itemgetter(1),reverse=True))\n    return index_minimum(test_list)\nprint(index_minimum([(1, 5), (1, 7), (1, 10), (1, 11), (2, 9), (3, 10), (4, 8), (5, 10), (6, 5)]))\nprint(index_minimum([(1, 5), (1, 7), (1, 10), (1, 11), (2, 9), (3, 10), (4, 8), (5, 10), (6, 5)]))"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    pass\n    # Write your code here.\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return len(min(lst, key=len))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Python3 program to find length of the smallest list in a list of lists\n    min_length = []\n    for i in range(len(lst)):\n        min_length.append(len(lst[i]))\n    min_length.sort()\n    if min_length == []:\n        return -1\n    else:\n        return min_length[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for i in range(0, len(lst)):\n        min_length = min(min_length, len(lst[i]))\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    a = []\n    for i in lst:\n        a.append(len(i))\n    return a\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum = 10000\n    for i in range(len(lst)):\n        if minimum > len(lst[i]):\n            minimum = len(lst[i])\n    return minimum\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 100000\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Taking Input\n    lst = [int(x) for x in input().split()]\n    # Starting With 0, 0th element\n    size = len(lst)\n    # If only one element, return it\n    if len(lst) == 1:\n        return lst[0]\n    # Loop until we find an element\n    while size!= 0:\n        # Size: Length of the list\n        size = len(lst)\n        # Take the minimum element\n        min = lst[0]\n        # Check if the list is empty\n        if size == 1:\n            return min\n        # Find the minimum element in the list\n        for i in range(0, size):\n            if lst[i] < min:\n                min = lst[i]\n        # Remove the minimum element from the list\n        lst.remove(min)\n        # Add the element back to the size of the list\n        size = len(lst)\n    # If we have run out of elements\n    return 0\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum = float('inf')\n    for lst in lst:\n        if len(lst) < minimum:\n            minimum = len(lst)\n    return minimum\n    \n    \n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list1 = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            list1.append(lst[i][j])\n    print(len(lst))\n    return len(lst)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    return divisors\n    \ndef cub(n):\n    '''\n    Write a python function that takes a number as an input and returns the\n    cube root of that number.\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        raise TypeError(\"Only numbers greater than 1 allowed\")\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 5\n    return 4\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divs += 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<0:\n        print('Sorry, divisors cannot be negative')\n    elif n==0:\n        return 1\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n%2 == 0:\n        return 2\n    elif n%3 == 0:\n        return 4\n    elif n%5 == 0:\n        return 8\n    elif n%3 == 0 or n%5 == 0:\n        return n//3+1\n    else:\n        return n//3+2\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    lst = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            lst.append(i)\n    return len(lst)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return n\n    else:\n        num = n / 2\n        divisors = 0\n        while num > 1:\n            if num % 2 == 0:\n                divisors += 1\n            num = num // 2\n        return divisors\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    res=0\n    for i in range(1,n+1):\n        if n%i==0:\n            res+=1\n    return res\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for x in range(1, n + 1):\n        if n % x == 0:\n            divisors.append(x)\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            if list1[i][j] not in dic:\n                dic[list1[i][j]] = 1\n            else:\n                dic[list1[i][j]] = dic[list1[i][j]] + 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #create a dictionary\n    frequency_dict = {}\n    #create a list of the elements in the list\n    for i in list1:\n        for j in i:\n            #add to the dict\n            if j in frequency_dict:\n                frequency_dict[j] += 1\n            else:\n                frequency_dict[j] = 1\n    #sort the dict\n    frequency_dict = dict(sorted(frequency_dict.items(), key=lambda x: x[1]))\n    #print the dictionary\n    print(frequency_dict)\n    return frequency_dict\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            frequency_dict[list1[i][j]] = list1[i][j]\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] = freq_dict[i] + 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # write your code here\n    freq={}\n    count=0\n    for el in list1:\n        if el in freq:\n            freq[el]+=1\n        else:\n            freq[el]=1\n        count+=1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {x: list1.count(x) for x in list1}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        for j in i:\n            if j not in freq.keys():\n                freq[j]=1\n            else:\n                freq[j]+=1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Return only unique elements from the list\n    unique_list = []\n    for e in list1:\n        if e not in unique_list:\n            unique_list.append(e)\n            \n    # Convert list into dictionary\n    d = {}\n    for e in unique_list:\n        d[e] = list1.count(e)\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = dict()\n    for i in range(len(list1)):\n        for element in list1[i]:\n            if element in frequency_dict:\n                frequency_dict[element]+=1\n            else:\n                frequency_dict[element]=1\n    return frequency_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(\"Multiplying all the numbers in the list and dividing with the length of the list: \")\n    print(\"The result of multiplying all the numbers in the list and dividing with the length of the list: \")\n    \n    # Using a while loop, take an input from the user and assign it to a variable named number_to_multiply.\n    while True:\n        # Use input() to get a string from the user.\n        number_to_multiply = input(\"Give me a number: \")\n        # Check if the input is valid.\n        try:\n            number_to_multiply = int(number_to_multiply)\n        # If input is not valid, the error message is printed and the program is terminated.\n        except ValueError:\n            print(\"\\nInvalid input, try again.\")\n            print(\"The result of multiplying all the numbers in the list and dividing with the length of the list: \")\n            return False\n        else:\n            # If the for loop is not broken, the for loop will continue.\n            break\n    # If the loop is broken, the number is divided by the length of the list.\n    print(\"The result of multiplying all the numbers in the list and dividing with the length of the list: \")\n    print(number_to_multiply, \"times\", len(numbers), \"is\", number_to_multiply*len(numbers))\n    print(\"\\nGoodbye.\")\n    return True\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for x in numbers:\n        result.append(x*len(numbers))\n    return result\n    \n    '''\n    Write a function to check whether two given lists are palindrome or not.\n    '''\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # your code here\n    multiply_list = []\n    for i in range(len(numbers)):\n        multiply_list.append(numbers[i]*i)\n    return multiply_list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 0\n    for n in numbers:\n        result = result*n\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if numbers == []:\n        return []\n    \n    result = [0] * len(numbers)\n    \n    for i in range(len(numbers)):\n        result[i] = numbers[i] * i\n    \n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply_all_numbers(numbers):\n        result = 1\n        for number in numbers:\n            result = result * number\n        return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(numbers)\n    # divide the length of the list by the length of the numbers\n    list_divide_by_length = len(numbers) / len(numbers[0])\n    # multiply all the numbers by the length of the list\n    return list_divide_by_length * numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    list_of_numbers = numbers.split(',')\n    return [int(number) for number in list_of_numbers]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    new_list = []\n    for x in range(len(numbers)):\n        new_list.append(numbers[x] * x)\n    return new_list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers.sort()\n    mult = 1\n    while numbers:\n        x = numbers.pop()\n        mult *= x\n    return mult\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, 'b')\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Base case\n    if n == 0: \n        return \"0\"\n    # Loop through every digit\n    else: \n        binary = \"\"\n        # Iterate through each digit \n        for i in str(n): \n            # If the i is greater than 0, then add it to the binary\n            if int(i) > 0:\n                binary += \"1\"\n            else: \n                binary += \"0\"\n        return binary \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return '0' + ''.join(format(digit, '08b') for digit in n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    b = bin(n)[2:]\n    while len(b) < n:\n        b = '0' + b\n    return b\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, 'b').zfill(8)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if type(n) is int: \n        if n > 0: \n            return f'{int(n, 2):b}'\n        else: \n            return f'{int(n, 2):b}'\n    else: \n        return f'{n:b}'\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # define binary form of number\n    binary = bin(n) \n    # remove leading zeros from binary form\n    binary = binary[2:]\n    # add leading zeros to binary form\n    return '0'*(len(binary) - 1) + binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return ''\n    i = n//2\n    res = ''\n    while i>0:\n        if i%2==0:\n            res += '0'\n        else:\n            res += '1'\n        i //= 2\n    return res[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    temp_str = ''\n    while n!= 0:\n        # Break when we get to 0 \n        if n > 0:\n            # Get the leftmost bit of the number\n            left_bit = n % 2\n            # Convert the rightmost bit to integer\n            n = n//2\n            # Add the leftmost bit to the string\n            temp_str = '1' + temp_str\n        # Break when we get to 1\n        else:\n            # Get the rightmost bit of the number\n            right_bit = n%2\n            # Add the rightmost bit to the string\n            temp_str = '0' + temp_str\n            # Convert the rightmost bit to integer\n            n = n//2\n    # Return the binary equivalent of the number\n    return temp_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # if the integer is greater than 2, then it's a palindrome\n    if num > 2:\n        if num % 2 == 0:\n            num = num / 2\n            num = int(num)\n        else:\n            num = (num * 3) + 1\n            num = int(num)\n    \n    # compare the current palindrome with the previous palindrome\n    while num!= 0:\n        if num % 10 == num // 10:\n            if num % 10 == num // 10:\n                num = num // 10\n            else:\n                num = num // 10\n        else:\n            break\n    \n    return num\n    \ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # if the integer is greater than 2, then it's a palindrome\n    if num > 2:\n        if num % 2 == 0:\n            num = num / 2\n            num = int(num)\n        else:\n            num = (num * 3) + 1\n            num = int(num)\n    \n    # compare the current palindrome with the previous palindrome\n    while num!= 0:\n        if num % 10 == num // 10:\n            if num % 10 == num // 10:\n                num = num // 10\n            else:\n                num = num // 10\n        else:\n            break\n    \n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    num = num.split()\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest = num\n    while num > 1:\n        if num % 10 == 0:\n            num = num / 10\n        else:\n            num = num * 10\n        if num % 2 == 0:\n            smallest = smallest * 10 + (num % 10)\n    if smallest % 10!= 0:\n        smallest = smallest * 10 + (smallest % 10)\n    return smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n    # make sure there are no multiples of 10\n    if n % 10 == 0:\n        return n//10\n    while n >= 1:\n        if n%10 == 1:\n            n = n//10\n            break\n        n = n//10\n        if n%10 == 0:\n            break\n    return n//10\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    from math import gcd\n    def is_palindrome(n):\n        return gcd(n,n)==1\n    for i in range(int(math.sqrt(num))+1):\n        if num%i==0:\n            if is_palindrome(i*i):\n                return i*i\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def find_next_smallest(A,i,j,l,r):\n        if i>=j:\n            return A[i]\n        while l<=j:\n            if A[l]<=A[j]:\n                return A[l]\n            l+=1\n        return A[j]\n        \n    def check(A,l,r):\n        if l>r:\n            return True\n        return False\n        \n    def get_next_smallest(A,l,r):\n        if l>r:\n            return\n        mid = (l+r)//2\n        if check(A,l,mid):\n            return find_next_smallest(A,l,mid,0,r)\n        else:\n            return find_next_smallest(A,mid+1,r,0,r)\n    l,r = 0,len(A)\n    while l<=r:\n        mid = (l+r)//2\n        if check(A,l,mid):\n            next_smallest = get_next_smallest(A,l,mid)\n            if mid==0:\n                next_smallest_2 = next_smallest\n            else:\n                next_smallest_2 = get_next_smallest(A,mid-1,r)\n            if next_smallest_2==next_smallest:\n                return next_smallest_2\n            elif next_smallest_2<=next_smallest:\n                l = mid + 1\n            else:\n                r = mid - 1\n    return A[l]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    for i in range(num, 0, -1):\n        for j in range(i, 0, -1):\n            if num % j == 0:\n                break\n        else:\n            return i\n    return 0\n    \ndef next_smallest_palindrome2(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    for i in range(num, 0, -1):\n        for j in range(i, 0, -1):\n            if num % j == 0:\n                break\n        else:\n            return i\n    return 0\n    \ndef next_smallest_palindrome3(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    for i in range(num, 0, -1):\n        for j in range(i, 0, -1):\n            if num % j == 0:\n                break\n        else:\n            return i\n    return 0\n    \ndef next_smallest_palindrome4(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    for i in range(num, 0, -1):\n        for j in range(i, 0, -1):\n            if num % j == 0:\n                break\n        else:\n            return i\n    return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # The algorithm is the following:\n    #     a) Find the smallest palindrome of a and compare it with a given number\n    #     b) Compare it with next palindrome of the same number\n    #     c) If the number of palindromes is odd, we go to the left of the other palindrome\n    #         and compare them with the number of palindromes of the same number.\n    #     d) If the number of palindromes is even, we go to the right of the other palindrome\n    #         and compare them with the number of palindromes of the same number.\n    #     e) If the number of palindromes is even, we go to the left of the other palindrome\n    #         and compare them with the number of palindromes of the same number.\n    #     f) If the number of palindromes is odd, we go to the right of the other palindrome\n    #         and compare them with the number of palindromes of the same number.\n    #     g) If the number of palindromes is odd, we go to the left of the other palindrome\n    #         and compare them with the number of palindromes of the same number.\n    #     h) If the number of palindromes is even, we go to the right of the other palindrome\n    #         and compare them with the number of palindromes of the same number.\n    #     i) If the number of palindromes is odd, we go to the left of the other palindrome\n    #         and compare them with the number of palindromes of the same number.\n    #     j) If the number of palindromes is even, we go to the right of the other palindrome\n    #         and compare them with the number of palindromes of the same number.\n    #     k) If the number of palindromes is odd, we go to the left of the other palindrome\n    #         and compare them with the number of palindromes of the same number.\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num % 2 == 0:\n        return num + next_smallest_palindrome(num//2)\n    return num + next_smallest_palindrome((num+1)//2)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        # if we can create a palindrome of a number, we can find it\n        pal = num\n        while (pal % 10) >= 5:\n            pal //= 10\n        while pal > 0:\n            if (pal % 10) == (pal % 10):\n                pal += 1\n            else:\n                break\n        # now that we know the number, we can return it\n        return pal\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    index = 0\n    for index in range(k):\n        print(arr[index])\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[int(k)]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # finding the index of the kth element\n    kth_index = arr.index(k) + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k >= len(arr):\n        return -1\n    else:\n        return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def findKthElement(arr, k):\n        # Store the first element as the top element to store values at the end of the list\n        top_element = arr[0]\n        \n        # keep iterating till the length of the array\n        for i in range(1, len(arr)):\n            if arr[i] > top_element:\n                top_element = arr[i]\n            elif arr[i] == top_element:\n                # then, if top element is equal to top element, we are done\n                break\n        \n        # The value of k is the index of the element we want\n        k = k-1\n        \n        # then, iterate through the array and return the element whose index\n        return top_element\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    first_index = 0\n    last_index = len(arr)-1\n    while first_index <= last_index:\n        mid = (first_index + last_index)//2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] > k:\n            last_index = mid-1\n        else:\n            first_index = mid+1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n    "
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # find the middle element and add it to the result array\n    left_idx = (k-1) // 2\n    if k == 0:\n        return arr[left_idx]\n    # find the element in the left subarray\n    middle_idx = left_idx + 1\n    if arr[left_idx] < arr[middle_idx]:\n        return arr[left_idx]\n    elif arr[left_idx] > arr[middle_idx]:\n        return arr[middle_idx]\n    else:\n        return arr[middle_idx]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 0 or k >= len(arr): return None\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]<k:\n            low=mid+1\n        else:\n            high=mid-1\n    return arr[high]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Your code here\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.lower()\n    lst = []\n    for i in word:\n        if i.isalpha():\n            lst.append(i)\n    new_word = \"\".join(lst)\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for i in word:\n        new_word += i.lower()\n    return new_word.capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    word = word.replace('-','')\n    word = word.replace('.','')\n    word = word.lower()\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not isinstance(word, str):\n        raise TypeError(\"Input must be of type string\")\n    \n    # first separate words into camel casing\n    camel_case = []\n    \n    for char in word:\n        if char.isupper():\n            camel_case.append(char.lower())\n        elif char.islower():\n            camel_case.append(char.upper())\n        elif char.isdigit():\n            camel_case.append(char)\n    \n    return ''.join(camel_case)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word.isidentifier():\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('-','_').replace('_','-').replace(' ','_')\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_string = \"\"\n    for char in word:\n        if char.isupper():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n \n    elif n % m == 0: \n        return (n // m) + eulerian_num(n // m, m) \n    elif n % m!= 0: \n        return (n // m) + eulerian_num(n // m, m) + eulerian_num(n % m, m) \n    return (n // m) + eulerian_num(n // m, m) + eulerian_num(n % m, m) \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return 1\n    if m % 2!= 0:\n        return -1\n    elif n % m == 0:\n        return -1\n    else:\n        n = n * 2\n        m = m - 1\n        return eulerian_num(n, m) + eulerian_num(n - m, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    counter = 0\n    while(m!= 1):\n        if (m%2 == 0):\n            m = int(m/2)\n        else:\n            m = 3*m+1\n        counter += 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = set(range(1, n + 1))\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i!= j and i in ans:\n                ans.discard(i)\n    return len(ans)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (m == 1):\n        return n\n    else:\n        return eulerian_num(n, m-1) + eulerian_num(n-1, m)\n    \ndef adjoint_mat(a):\n    '''\n    Given a matrix a of size n x n, return a second matrix\n    of the same size, where the rows correspond to the\n    inverse of the column of the matrix and the columns correspond to the\n    rows of the matrix.\n    '''\n    if a.shape[0]!= a.shape[1]:\n        raise TypeError('a must be a square matrix')\n    else:\n        return np.linalg.inv(a)\n    \ndef mat_product(a, b):\n    '''\n    Given matrices a and b, return a new matrix where the value at\n    index ij in a is the product of the value at index i in b\n    and the values at index j in a are the products of the\n    values in the corresponding rows in b.\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        return np.dot(a, b)\n    \ndef transpose(a):\n    '''\n    Given a matrix a, return a new matrix\n    corresponding to the transpose of the matrix a.\n    '''\n    if a.shape[1]!= a.shape[0]:\n        raise TypeError('a must be a square matrix')\n    else:\n        return np.transpose(a)\n    \ndef determinant(a):\n    '''\n    Given a matrix a, return the value of the determinant of a.\n    '''\n    if a.shape[0]!= a.shape[1]:\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            return a[0][0]\n        else:\n            return a[0][0] * a[1][1] - a[0][1] * a[1][0]\n    \ndef determinant_mat(a):\n    '''\n    Given a matrix a, return the determinant of the matrix.\n    '''\n    if a.shape[0]!= a.shape[1]:\n        raise TypeError('a must be a square matrix')\n    else:\n        return (a[0][0] * a[1][1] - a[0][1] * a[1][0])\n    \ndef inverse(a):\n    '''\n    Given a matrix a, return its inverse.\n    '''\n    if a.shape[0]!= a.shape[1]:\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            return a\n        else:\n            inv = np.linalg.inv(a)\n            return inv\n    \ndef scalar_mult(a, b):\n    '''\n    Given matrices a and b, return the product of scalars\n    at the points (i,j).\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            if b.shape[0] == 1:\n                return a[0][0] * b[0][0]\n            else:\n                return (a[0][0] * b[0][0]) ** 2\n        else:\n            if b.shape[0] == 1:\n                return a[0][0] * b[0][0]\n            else:\n                return (a[0][0] * b[0][0]) ** 2\n    \ndef scalar_mult_mat(a, b):\n    '''\n    Given matrices a and b, return the product of scalars\n    at the points (i,j).\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            if b.shape[0] == 1:\n                return a[0][0] * b\n            else:\n                return (a[0][0] * b) ** 2\n        else:\n            if b.shape[0] == 1:\n                return a[0][0] * b\n            else:\n                return (a[0][0] * b) ** 2\n        \ndef count_elements(a):\n    '''\n    Given a matrix a, return the number of rows and columns.\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            return a.shape[0]\n        else:\n            return a.shape[0] ** 2\n    \ndef matrix_pivot(a):\n    '''\n    Given a matrix a, return the pivot element.\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            return a[0][0]\n        else:\n            return a[0][0] ** (1/2)\n    \ndef matrix_conjugate(a):\n    '''\n    Given a matrix a, return the conjugate of a.\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            return np.conj(a)\n        else:\n            return np.conj(a) ** (1/2)\n    \ndef determinant_mat_x(a):\n    '''\n    Given a matrix a, return the determinant of a.\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            return a[0][0]\n        else:\n            return determinant(a) * matrix_conjugate(a)\n    \ndef determinant_mat_y(a):\n    '''\n    Given a matrix a, return the determinant of a.\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            return a[0][0]\n        else:\n            return determinant(a) * matrix_conjugate(a)\n    \ndef inverse_matrix(a):\n    '''\n    Given a matrix a, return its inverse.\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        if a.shape[0] == 1:\n            return np.linalg.inv(a)\n        else:\n            return inverse(a)\n    \ndef transpose_mat(a):\n    '''\n    Given a matrix a, return its transpose.\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n    else:\n        return np.transpose(a)\n    \ndef triangulation(a, b, c):\n    '''\n    Given three matrices a, b, and c, return\n    the triangulation of the matrix a.\n    '''\n    if (a.shape[0]!= a.shape[1] or b.shape[0]!= b.shape[1] or c.shape[0]!= c.shape[1]):\n        raise TypeError('All matrices must have the same dimensions')\n    else:\n        return np.array([[a[i][j] for i in range(a.shape[0])] for j in range(a.shape[1])])\n    \ndef matrix_normalize(a):\n    '''\n    Given a matrix a, return its normalize.\n    '''\n    if (a.shape[0]!= a.shape[1]):\n        raise TypeError('a must be a square matrix')\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from collections import defaultdict\n    graph = defaultdict(list)\n    for i in range(m+1):\n        graph[i].append(i)\n    for i in range(1, n+1):\n        for j in graph[i]:\n            graph[j].append(i)\n    \n    def find_eulerian(a):\n        '''\n        Returns the Eulerian number if there is a cycle\n        '''\n        def is_cycle(adj):\n            for v in adj:\n                if v in adj[v]:\n                    return True\n                elif is_cycle(adj):\n                    return True\n            return False\n        \n        cycle = 0\n        for k in range(1, n+1):\n            if is_cycle(graph[k]):\n                cycle += 1\n        if cycle > 1:\n            return -1\n        return cycle\n    \n    return find_eulerian(n)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    counter = 1\n    if m == 0:\n        counter += 1\n    else:\n        for i in range(1, n + 1):\n            counter += counter\n            if counter % m == 0:\n                break\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= m:\n        return n\n    else:\n        return m - 1 + eulerian_num(n - m, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def longest_arc_with_cycle(n, m):\n        if n == 0 or m == 0:\n            return []\n        # We need to make sure n and m are integers\n        if n < m:\n            return longest_arc_with_cycle(m, n)\n        else:\n            # We need to find the longest line with a(n, m)\n            # from a(n - 1, m - 1)\n            # and a(n, m - 1)\n            longest_line = [n]\n            a = n - 1\n            b = m - 1\n            while True:\n                if a == 0:\n                    break\n                elif b == 0:\n                    break\n                elif a > b:\n                    longest_line.append(a)\n                    a -= 1\n                else:\n                    longest_line.append(b)\n                    b -= 1\n            return longest_line\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n    \ndef get_max(input_list):\n    '''\n    Write a function that returns the maximum number of times a given letter appears in a given list of strings.\n    '''\n    counter = 0\n    for sublist in input_list:\n        if sublist.count(letter) > counter:\n            counter = sublist.count(letter)\n    return counter\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in input_list:\n        item.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create an empty result list\n    result_list = []\n    \n    # Loop through each sublist and append to result_list\n    for i in range(len(input_list)):\n        result_list.append(input_list[i])\n        \n    # Sort result_list\n    result_list.sort()\n    \n    return result_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(input_list)):\n        for j in range(0, len(input_list[i])):\n            if input_list[i][j] == '.':\n                input_list[i][j] = '_'\n            else:\n                input_list[i][j] = input_list[i][j].lower()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if input_list == []:\n        return []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # write your code here\n    new_list = []\n    for i in range(len(input_list)):\n        new_list.append([])\n        for j in range(len(input_list[i])):\n            new_list[i].append(input_list[i][j])\n    for i in range(len(new_list)):\n        new_list[i] = sorted(new_list[i])\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sub_list in input_list:\n        for element in sub_list:\n            output_list.append(element)\n    return output_list"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort(input_list, first_index, last_index):\n        for i in range(first_index, last_index):\n            input_list[i].sort()\n        return input_list\n    \n    output_list = []\n    \n    while input_list:\n        output_list.append(sort(input_list, 0, len(input_list)-1))\n        input_list.pop(0)\n    \n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create an empty dictionary\n    sublist_dictionary = {}\n    # iterate through the given list and sort the list\n    for sublist in input_list:\n        for element in sublist:\n            if element not in sublist_dictionary:\n                sublist_dictionary[element] = 1\n            else:\n                sublist_dictionary[element] += 1\n    # sort the dictionary\n    sublist_dictionary_sorted = sorted(sublist_dictionary.items(), key=lambda x: x[1], reverse=True)\n    # return the sorted list\n    return sublist_dictionary_sorted\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = []\n    for sublist in input_list:\n        for item in sublist:\n            l.append(item)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counts = dict()\n    for item in lst:\n        if item:\n            if item in counts:\n                counts[item] += 1\n            else:\n                counts[item] = 1\n    return counts\n    \ndef get_count_true(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counts = count(lst)\n    return sum(counts.values())\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for ele in lst:\n        if ele:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counts = {} #create empty dictionary\n    for element in lst: #loop through the list\n        if element in counts: #if element is in dictionary, add to existing value\n            counts[element] += 1 #add to the existing value and increment\n        else: #add to the dictionary\n            counts[element] = 1 #add to the dictionary\n    return counts #return the dictionary\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n    \nprint(count([False, True, True, False]))"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i == True:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    result = 0\n    for x in lst:\n        if x == True:\n            result += 1\n    print(result)\n    \nlst = [1, 0, True, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]\ncount(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for e in lst:\n        if e == 1:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # YOUR CODE HERE\n    count=0\n    for i in lst:\n        if(i):\n            count+=1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_tup = test_tup\n    list_list = test_list\n    for i in range(len(test_tup)):\n        list_list.append(test_tup[i])\n    return list_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # test_list, test_tup = test_list, test_tup\n    test_list.append(test_tup)\n    test_tup[0].append(test_list)\n    # test_list.append(test_tup)\n    # test_tup[0].append(test_list)\n    # test_list.append(test_tup)\n    # return test_list, test_tup\n    return test_list, test_tup\n    # return test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n        return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_list)!= list:\n        return \"I'm not expecting a list.\"\n    if len(test_tup)!= len(test_list):\n        return \"The size of the list doesn't match the size of the tuple.\"\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list = []\n    while num1 or num2 or num3:\n        if num1:\n            merge_list.append(num1.pop(0))\n        if num2:\n            merge_list.append(num2.pop(0))\n        if num3:\n            merge_list.append(num3.pop(0))\n    return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == []:\n        return num2 + num3\n    if num2 == []:\n        return num1 + num3\n    if num3 == []:\n        return num2 + num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a merge function that will merge two lists into one\n    # Take two numbers as parameters\n    # These parameters will be passed into the merge function as arguments\n    # to \"merge()\"\n    def merge(num1,num2):\n        return num1+num2\n    # Merge the two lists\n    return merge(num1,num2)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list2(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list3(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list4(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list5(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list6(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list7(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list8(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list9(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list10(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list11(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list12(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list13(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list14(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list15(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list16(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list17(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list18(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list19(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list20(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list21(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list22(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list23(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list24(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list25(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list26(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list27(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.append(num3)\n    num2.append(num3)\n    num3=[]\n    \ndef merge_sorted_list28(num1,num2,num3):\n    '''\n    This function combines three sorted lists into a single one, so that they are identical.\n    '''\n    num1.appen"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None and num2==None and num3==None:\n        return None\n    elif num1==None:\n        return num2\n    elif num2==None:\n        return num1\n    elif num3==None:\n        return num1\n    else:\n        num1[num2[0]] = num3[0]\n        num2[0] = num2[1]\n        num2[1] = num1[0]\n        num2[2] = num3[0]\n        num1[0] = num1[1]\n        num1[1] = num3[0]\n        num1[2] = num3[0]\n        if num1[0]<num1[1] and num1[0]<num1[2]:\n            temp1=heapq.heappop(num1[0:num1[0]])\n            heapq.heappush(num1[0:num1[0]],[temp1[0],temp1[1],temp1[2]])\n        elif num1[1]<num1[2] and num1[1]<num1[0]:\n            temp1=heapq.heappop(num1[1:num1[1]])\n            heapq.heappush(num1[1:num1[1]],[temp1[0],temp1[1],temp1[2]])\n        elif num1[2]<num1[0] and num1[2]<num1[1]:\n            temp1=heapq.heappop(num1[2:num1[2]])\n            heapq.heappush(num1[2:num1[2]],[temp1[0],temp1[1],temp1[2]])\n        else:\n            heapq.heappush(num1[2:num1[2]],num1[2])\n        if num2[0]==None:\n            num2[0]=heapq.heappop(num1[1:num1[1]])[0]\n        else:\n            heapq.heappush(num2[0],heapq.heappop(num1[1:num1[1]])[0])\n        if num2[1]==None:\n            num2[1]=heapq.heappop(num1[2:num1[2]])[0]\n        else:\n            heapq.heappush(num2[1],heapq.heappop(num1[2:num1[2]])[0])\n        if num2[2]==None:\n            num2[2]=heapq.heappop(num1[0:num1[0]])[0]\n        else:\n            heapq.heappush(num2[2],heapq.heappop(num1[0:num1[0]])[0])\n        return num1,num2,num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    print(\"Merge Sort START\")\n    num = num1 + num2 + num3\n    merged_list = []\n    i=0\n    while i<len(num):\n        while len(merged_list)>0 and num[i] <= merged_list[0]:\n            heapq.heappush(merged_list,merged_list[0])\n            i+=1\n        if len(merged_list)>0:\n            merged_list[0] = num[i]\n            i+=1\n        else:\n            merged_list = []\n    print(\"Merge Sort END\")\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    res=[]\n    l1=0\n    l2=0\n    l3=0\n    while l1 < len(num1) or l2 < len(num2) or l3 < len(num3):\n        if l1 < len(num1):\n            res.append(num1[l1])\n            l1+=1\n        if l2 < len(num2):\n            res.append(num2[l2])\n            l2+=1\n        if l3 < len(num3):\n            res.append(num3[l3])\n            l3+=1\n        else:\n            res.extend(num1[l1:])\n            res.extend(num2[l2:])\n            res.extend(num3[l3:])\n            break\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num2[j] < num3[k]:\n            temp = num1[i]\n            num1[i] = num2[j]\n            num2[j] = temp\n        elif num1[i] < num2[j] and num2[j] < num3[k]:\n            temp = num1[i]\n            num1[i] = num2[j]\n            num2[j] = temp\n        elif num1[i] < num2[j] and num2[j] < num3[k]:\n            temp = num1[i]\n            num1[i] = num2[j]\n            num2[j] = temp\n        else:\n            temp = num1[i]\n            num1[i] = num2[j]\n            num2[j] = temp\n        i+=1\n        j+=1\n        k+=1\n    while i < len(num1):\n        temp = num1[i]\n        num1[i] = num2[k]\n        num2[k] = temp\n        i+=1\n        k+=1\n    while j < len(num2):\n        temp = num2[j]\n        num2[j] = num3[k]\n        num3[k] = temp\n        j+=1\n        k+=1\n    return num1,num2,num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    list1=num1\n    list2=num2\n    list3=num3\n    while len(list1)>0:\n        for i in range(len(list1)):\n            if list1[i] > list2[i] and list1[i] > list3[i]:\n                temp=list1[i]\n                list1[i]=list2[i]\n                list2[i]=list3[i]\n                list3[i]=temp\n    return list1,list2,list3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    num1_heap = []\n    num2_heap = []\n    num3_heap = []\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n==0):\n        return 1\n    elif(n==1):\n        return 0\n    elif(n==2):\n        return 1\n    elif(n%2==0):\n        return odd_Equivalent(s,n//2)\n    elif(n%2==1):\n        return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2+1)\n    elif(n%2==1):\n        return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2+1) + odd_Equivalent(s,n//2+1)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Check the parameter \n    if type(s)!= str or n < 0: \n        return 0\n    \n    # Initialize the result \n    result = 0\n    \n    # Start the loop\n    for i in range(n): \n        # Check the current string \n        if int(s[i]) % 2: \n            result += 1\n        \n    # Return the result \n    return result\n        "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s==None or n==None:\n        return 0\n    if n<0:\n        s=-n\n        n=0\n    else:\n        n=1\n        s=0\n    n=n*2\n    k=0\n    i=0\n    while s<=n:\n        if s%2==1:\n            k=k+1\n        s+=1\n        i+=1\n    return k\ns,n=input(\"Enter the string and the number of rotation : \").split()\ns=int(s)\nn=int(n)\nodd_Encryption(s,n)\nprint(odd_Encryption(s,n)"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a = int(len(s)/2)\n    count = 0\n    for i in range(a):\n        b = s[a-i-1]\n        if b%2!= 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    counter = 0 \n    b = [i for i in range(0, 2*n + 1, 2)]\n    for i in range(len(b)):\n        if b[i] % 2 == 1:\n            counter += 1\n        else:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count(s,n):\n        count = 0\n        for i in range(n):\n            if s[i] == \"0\":\n                count += 1\n            else:\n                count += 0\n        return count\n    # defining variables\n    s = s.lower()\n    n = n.lower()\n    # converting to base case\n    if s[0] == \"1\":\n        s = s[1:]\n        # converting to base case\n    else:\n        s = s[1:]\n        # converting to base case\n    if n[0] == \"0\":\n        n = n[1:]\n    else:\n        n = n[1:]\n    # finding the count of zeros\n    # returning the number of ones\n    ones = count(s,len(s))\n    # finding the number of zeros\n    zeros = count(n,len(n))\n    # returning the number of ones\n    return (ones+zeros)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s=='':\n        return 0\n    elif s[0]=='0' or s[0]=='1':\n        return 1\n    else:\n        return 0\n    '''\n    You are given an input string that contains only digits with 2s in the beginning and 1s in the end.\n    For each 2 in the string, we use the binary representation of its digits as the value of 2s.\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    a = n//2\n    if n % 2 == 1:\n        result = result + 1\n    i = 0\n    while i < a:\n        result = result + int(s[i])\n        i = i + 2\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    temp=list(s)\n    for i in range(n):\n        temp.append(temp[n-i-1])\n    return len(set(temp))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for elem in nestedlist:\n        if elem not in common:\n            common.append(elem)\n    return common\n    "
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if (nestedlist[i] == nestedlist[j]):\n                common.append(nestedlist[i])\n    return common\n    # loop through nested lists and find the common elements\n    # loop through all nested lists and find the common element\n    # return the common element\n    \ndef main():\n    '''\n    Test this function on a nested list.\n    '''\n    nestedlist = [1,2,3,[4,5,6],7,[8,9,[10]]]\n    commonlist = common_in_nested_lists(nestedlist)\n    print commonlist\n    # print common_in_nested_lists(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lst = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in lst:\n                lst.append(nestedlist[i][j])\n    return lst\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    unique = []\n    for i in nestedlist:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    counter = 0\n    for element in nestedlist:\n        if element == nestedlist[-1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for nestedlist1 in nestedlist:\n        for nestedlist2 in nestedlist1:\n            result.append(nestedlist2)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    common = set()\n    for sublist in nestedlist:\n        common = common.intersection(sublist)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lst = []\n    for list in nestedlist:\n        lst.append(list)\n    lst.sort()\n    for x in lst:\n        print(x)\n    common_elements = []\n    for element in lst:\n        if element not in common_elements:\n            common_elements.append(element)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    outlist = []\n    for i in nestedlist:\n        for j in i:\n            if j not in outlist:\n                outlist.append(j)\n    return outlist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    if not isinstance(nestedlist, list):\n        raise TypeError(\"nestedlist must be a list\")\n        \n    for elem in nestedlist:\n        if not isinstance(elem, list):\n            raise TypeError(\"nestedlist must be a list\")\n    \n    if len(nestedlist) == 0:\n        return []\n    \n    common_elements = []\n    \n    for elem in nestedlist:\n        if elem not in common_elements:\n            common_elements.append(elem)\n            \n    return common_elements\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return type(text) in (int, float)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text[-1] == \"K\" or text[-1] == \"k\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if(len(list1) == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i.values() == {}:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all([type(item) == dict and len(item) == 0 for item in list1])\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return True if not list1 else False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = []\n    for i in list1:\n        if i!= {}:\n            empty.append(i)\n    if empty == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i) is dict:\n            empty_dit(i)\n    return\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for key, value in i.items():\n            if value is not None:\n                print(value)\n            else:\n                print(i)\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == {}:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    list_ = []\n    for item in list1:\n        if item not in list_:\n            return False\n    return True\n        \ndef top_ten(l):\n    '''\n    Write a function to print the first ten elements of the list.\n    '''\n    \n    for i in range(0,10):\n        print(l[i])\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return list1==[]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n    \ndef int_to_tuple(num):\n    '''\n    Write a function that converts a single integer into a tuple.\n    '''\n    return (num%10, num//10)\n    \ndef num_to_int(num):\n    '''\n    Convert a given number into its corresponding integer.\n    '''\n    return tuple_to_int(int_to_tuple(num))\n    \ndef main():\n    print(\"Please enter an even number.\")\n    even = int_to_tuple(input())\n    print(\"Please enter an odd number.\")\n    odd = int_to_tuple(input())\n    print(\"Please enter a positive number.\")\n    positive = int_to_tuple(input())\n    print(\"Please enter a negative number.\")\n    negative = int_to_tuple(input())\n    print(\"Please enter a positive number.\")\n    positive_float = float(positive)\n    negative_float = float(negative)\n    if even % 2 == 0:\n        even_str = 'even'\n    else:\n        even_str = 'odd'\n    if odd % 2 == 0:\n        odd_str = 'odd'\n    else:\n        odd_str = 'even'\n    if positive % 2 == 0:\n        positive_float = 'positive'\n    else:\n        positive_float = 'negative'\n    if negative % 2 == 0:\n        negative_str = 'negative'\n    else:\n        negative_str = 'positive'\n    if positive_float > negative_float:\n        result = f'{positive_float} {even_str}'\n    elif positive_float > negative_float:\n        result = f'{negative_float} {odd_str}'\n    else:\n        result = f'{positive_float} {odd_str}'\n    print(f'{result}')\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums:\n        return 0\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Let's create a new list\n    new_nums = []\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(0, len(nums)):\n        result += nums[i] * (i+1)\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_tuple = []\n    for i in range(len(nums)):\n        int_tuple.append(nums[i][0])\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = 0\n    for i in range(len(nums)):\n        n += nums[i]*(10**i)\n    return n\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_tuple = tuple(map(tuple,num))\n    return int(str(int_tuple))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(num for num in nums)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return list(map(float, test_list))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        for item in row:\n            if item is not None:\n                result.append(item)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for element in test_list:\n        try:\n            result.append(float(element))\n        except ValueError:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in test_list:\n        for i in range(len(element)):\n            if not isinstance(element[i],(float,int,str)):\n                element[i] = float(element[i])\n            if not isinstance(element[i+1],(float,int,str)):\n                element[i+1] = float(element[i+1])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_converted = []\n    for i in test_list:\n        if type(i[0]) == str:\n            test_list_converted.append([float(x) for x in i])\n        else:\n            test_list_converted.append(i)\n    return test_list_converted\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    floats = []\n    for i in test_list:\n        for j in i:\n            j = float(j)\n            if j == float(0):\n                j = 0\n            elif j == float(1):\n                j = 1\n            elif j == float(2):\n                j = 2\n            elif j == float(3):\n                j = 3\n            elif j == float(4):\n                j = 4\n            elif j == float(5):\n                j = 5\n            elif j == float(6):\n                j = 6\n            elif j == float(7):\n                j = 7\n            elif j == float(8):\n                j = 8\n            elif j == float(9):\n                j = 9\n            floats.append(j)\n    return floats\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for test_elem in test_list:\n        for test_element in test_elem:\n            if type(test_element) == list:\n                test_element = list_to_float(test_element)\n            try:\n                test_element = float(test_element)\n            except:\n                print('Error:', test_element)\n    return test_element\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_string = []\n    for char in string:\n        list_of_string.append(char)\n    return list_of_string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    words = string.split(' ') \n    return words\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.strip().split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == '': \n        return []\n    elif string[-1]!='': \n        return string_to_list(string[:-1]) + string_to_list(string[-1])\n    else: \n        return string_to_list(string[:-1])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    lst = []\n    for item in arr:\n        if item not in lst:\n            lst.append(item)\n    return len(lst)\n    \ndef count_occurrences(arr):\n    '''\n    Count the occurrences of the elements in arr.\n    '''\n    return arr.count(arr[0])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[0]:\n            count = 1\n            continue\n        else:\n            if count == 1:\n                return arr[i]\n            count = 0\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    idx = arr.index(max(arr))\n    print(idx)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    '''\n    Sorts the array.\n    '''\n    sorted_arr = sorted(arr)\n    #print(sorted_arr)\n    n = len(sorted_arr)\n    #print(n)\n    #print(sorted_arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def find_unique(elem):\n        if arr[elem] == elem:\n            return elem\n        else:\n            return find_unique(arr[elem+1])\n    # Return -1 if the element does not exist, otherwise return the index of the element.\n    return find_unique(arr[0])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None or len(arr) == 0:\n        return None\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == arr[0]:\n            count += 1\n        elif count == 0:\n            return arr[i]\n        else:\n            count -= 1\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    occurrence_map = {}\n    for index, num in enumerate(arr):\n        if num in occurrence_map:\n            occurrence_map[num] += 1\n        else:\n            occurrence_map[num] = 1\n    \n    for k, v in occurrence_map.items():\n        if v == 1:\n            return k\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i=0\n    j=len(arr)-1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    if len(arr) <= 1:\n        return arr[0]\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == arr[mid-1]:\n            mid -= 1\n        elif arr[mid] < arr[mid-1]:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return arr[left]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    list3 = []\n    product = 0\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i]*list1[j] > max_product(list1):\n                max_product(list1)\n    return max_product(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    output = []\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            output.append(list1[i][1] * list1[j][1])\n    return max(output)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Your code here\n    if len(list1) <= 1:\n        return list1[0][0] * list1[0][1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 0\n    for i in list1:\n        product = product + i\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #variable to store values of tuple\n    a = 0\n    b = 0\n    #get number of tuples\n    n = len(list1)\n    #check if the tuple is empty\n    if n == 0:\n        return 0\n    #check if the tuple is even\n    if n%2 == 0:\n        #find the minimum and maximum values of pair of numbers\n        min = min(list1[0], list1[1])\n        max = max(list1[0], list1[1])\n        #iterate through pairs of numbers and find the largest\n        for i in range(0, n-1, 2):\n            a = list1[i]\n            b = list1[i+1]\n            #check if the pair is greater than the minimum\n            if a < min and b < min:\n                min = a\n                max = b\n            #check if the pair is less than the maximum\n            if a > max and b > max:\n                max = a\n                min = b\n            #check if the pair is greater than the maximum\n            if a > max and b < max:\n                max = a\n                min = b\n        #print the maximum value\n        print(max)\n        #print the minimum value\n        print(min)\n        #print the tuple\n        print(tuple(list1))\n        return max\n    else:\n        #find the minimum and maximum values of pair of numbers\n        min = min(list1[0], list1[1])\n        max = max(list1[0], list1[1])\n        #iterate through pairs of numbers and find the largest\n        for i in range(0, n-1, 2):\n            a = list1[i]\n            b = list1[i+1]\n            #check if the pair is greater than the minimum\n            if a < min and b < min:\n                min = a\n                max = b\n            #check if the pair is less than the maximum\n            if a > max and b > max:\n                max = a\n                min = b\n        #print the maximum value\n        print(max)\n        #print the minimum value\n        print(min)\n        #print the tuple\n        print(tuple(list1))\n        return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tuple_list = []\n    for i in list1:\n        for j in list1:\n            if i[0] < j[0] and i[0] < j[1]:\n                tuple_list.append((i[1],j[0]))\n    return tuple_list[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(0, len(list1)-1):\n        for j in range(i+1, len(list1)):\n            max = max(list1[i], list1[j])\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for item1, item2 in list1:\n        product = item1 * item2\n        if product > max_product:\n            max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1)\n    l = len(list1)\n    if l == 1:\n        return list1[0][0]\n    elif l == 2:\n        return list1[1][1]\n    else:\n        max_l = list(max(list1, key = lambda x:x[0]))\n        max_l.append(list1[0][1])\n        \n        max_r = list(max(list1, key = lambda x:x[1]))\n        max_r.append(list1[1][0])\n        \n        return max(max_l, max_r)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    numbers = [i for i in range(1,limit+1)]\n    for number in numbers:\n        if sum == 0:\n            sum += number\n        elif number == sum:\n            sum += number\n        else:\n            pass\n    print(sum)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_num = 0\n    for i in range(1, limit):\n        if i!= 2:\n            if i == 2 and (i * 2)!= (i + 1):\n                continue\n            if i % i == 0:\n                continue\n            else:\n                sum_num = sum_num + i\n        else:\n            continue\n    return sum_num\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        # i = 1\n        if is_amicable(i) and i!= i:\n            if i not in {10, 100, 1000}:\n                total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = []\n    check = 0\n    sum_result = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [i for i in range(2, limit) if i % 2 == 0]\n    amicable_numbers.sort()\n    sum = 0\n    for i in amicable_numbers:\n        for j in range(i + 1, limit):\n            if j % i == 0:\n                sum += j\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    def add_numbers(n):\n        if n < 1:\n            return False\n        if n in amicable_numbers:\n            return True\n        for i in range(1, n+1):\n            if n % i == 0:\n                if n//i in amicable_numbers:\n                    return True\n                else:\n                    return False\n        amicable_numbers.append(n)\n    \n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        else:\n            if add_numbers(i):\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    numbers = 1\n    while numbers <= limit:\n        if numbers in amicable:\n            continue\n        if is_prime(numbers):\n            amicable.append(numbers)\n            if numbers % 2 == 0:\n                numbers = (numbers * 2)\n            else:\n                numbers = (numbers * 3)\n        numbers += 1\n    print(amicable)\n    \ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, num // 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit < 0:\n        raise ValueError('Limit is less than 0')\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [1]\n    for i in range(2, limit+1):\n        if i % 2 == 0:\n            num = i // 2\n            if num % 2 == 0:\n                amicable_numbers.append(num)\n        else:\n            num = i - 1\n            if num % 2 == 0:\n                amicable_numbers.append(num)\n    amicable_numbers = set(amicable_numbers)\n    amicable_numbers = [i for i in amicable_numbers if i > 1]\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for num in range(1, limit+1):\n        if num in amicable_numbers:\n            continue\n        if num == 1 and num == 2:\n            continue\n        if num == 1:\n            print(num)\n            continue\n        if num % 2 == 0:\n            print(num)\n            continue\n        amicable_numbers.add(num)\n        if len(amicable_numbers) == 2:\n            print(num)\n            break\n    print(\"Done\")\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a < 0 and b < 0:\n        return (cmath.acos(b/a)*180)/cmath.pi\n    elif a > 0 and b < 0:\n        return (cmath.acos(a/b)*180)/cmath.pi\n    elif a < 0 and b > 0:\n        return (cmath.asin(b/a)*180)/cmath.pi\n    elif a > 0 and b > 0:\n        return (cmath.asin(a/b)*180)/cmath.pi\n    else:\n        print(\"Invalid input!\")\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return cmath.phase(c)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a,b=cmath.real(a),cmath.real(b)\n    return (b*b-a*cmath.sqrt(b**2-4*a*cmath.cos(a)))/(2*a)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    x = (c.real**2 + c.imag**2)**0.5\n    return cmath.acos(x)/cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    theta = cmath.phase(a*b)\n    if(a>0 and b>0):\n        return theta\n    if(a<0 and b<0):\n        return 180 - theta\n    if(a<0 and b>0):\n        return 180 + theta\n    if(a>0 and b<0):\n        return 180 + theta\n    if(a>0 and b==0):\n        return theta\n    if(a==0 and b>0):\n        return 180 + theta\n    if(a==0 and b==0):\n        return 0\n    if(a==0 and b<0):\n        return 180 + theta\n    if(a==0 and b==0):\n        return 0\n    if(a==0 and b>0):\n        return 180 - theta\n    if(a==0 and b==0):\n        return theta\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    try:\n        angle = c.real ** 2 + c.imag ** 2\n        if c.imag == 0:\n            return 2*math.pi*1j\n        else:\n            return math.atan2(c.imag, c.real)\n    except:\n        return 0\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.acos((a*b).conjugate())\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = cmath.polar(complex(a,b))\n    #x.real,x.imag = complex(x.real,x.imag)\n    return x[0]\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if(a==b):\n        return 0\n    elif(a.imag!=0):\n        return angle_complex(a.conjugate(),b)\n    else:\n        return angle_complex(b.conjugate(),a.conjugate())\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_degree(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acos(b)\ndef angle_radian(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acosh(b)\ndef angle_degree2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return asinh(b)\ndef angle_radian2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return asin(b)\ndef angle_tau(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan(b)\ndef angle_degree3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acos(b)\ndef angle_radian3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_tau2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_degree4(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_radian4(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_tau2_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_degree5(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acot(b)\ndef angle_radian5(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acot2(b)\ndef angle_tau2_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acot2(b)\ndef angle_degree6(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acot(b)\ndef angle_radian6(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acot2(b)\ndef angle_tau2_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acot2(b)\ndef angle_degree7(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acosh(b)\ndef angle_radian7(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acosh2(b)\ndef angle_tau2_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acosh2(b)\ndef angle_degree8(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acosh(b)\ndef angle_radian8(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acosh2(b)\ndef angle_tau2_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return acosh2(b)\ndef angle_degree9(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atanh(b)\ndef angle_radian9(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atanh(b)\ndef angle_tau2_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atanh2(b)\ndef angle_degree10(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_radian10(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_tau2_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_degree11(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan(b)\ndef angle_radian11(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan(b)\ndef angle_tau2_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_degree12(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_radian12(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a.real\n    b = b.real\n    return atan2(b,a)\ndef angle_tau2_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # This solution is not for the question: how to find the length of a given string\n    max_length = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string = string.replace(\"0\", \"1\")\n    l = len(string)\n    if l < 2: return 0\n    if l == 2: return int(string[0]) - int(string[1])\n    # max is the length of the longest substring with no zeroes\n    max = 0\n    # for each index in the string,\n    for i in range(l-1):\n        # if string[i] == '0':\n        #     # add 1\n        #     max += 1\n        # else:\n        #     # if the value at the current index is less than the previous max,\n        #     # it is the max\n        #     max = max if string[i] < string[i+1] else max\n        #     # if the new max is greater than the current max, then reset the previous max\n        #     max = max if max > string[i] else max\n        # return max\n        if string[i] == '0':\n            # add 1\n            max += 1\n        else:\n            # if the value at the current index is less than the previous max,\n            # it is the max\n            max = max if string[i] < string[i+1] else max\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if(len(string)<=0):\n        return 0\n    if(len(string)==1):\n        return 1\n    i = 0\n    j = 1\n    count = 0\n    while(i<len(string)):\n        if(string[i] == '1' and string[j] == '1'):\n            count+=1\n            if(count > i):\n                i+=1\n                j+=1\n        else:\n            i+=1\n            j+=1\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == None or string == \"\":\n        return 0\n    else:\n        count = 0\n        for i in range(0,len(string)):\n            if string[i] == \"0\":\n                count += 1\n            else:\n                count -= 1\n                \n        return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    len_s = len(string)\n    count = 0\n    zero_count = 0\n    one_count = 0\n    while(len_s!= 0):\n        if string[0] == '0':\n            count = count + 1\n            zero_count = zero_count + 1\n        else:\n            count = count - 1\n            one_count = one_count + 1\n        len_s = len_s - 1\n    \n    if zero_count > one_count:\n        return zero_count\n    else:\n        return one_count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = 0\n    for i in range(len(string)):\n        if(string[i] == '0'):\n            n += 1\n        else:\n            n -= 1\n        if(n == 0):\n            return string[i:]\n    return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    c=0\n    for i in range(len(string)):\n        c+=1\n        if string[i]==\"0\":\n            if string[i-1]==\"1\":\n                c+=1\n                break\n    print(c)\n    if c%2==0:\n        return c//2\n    else:\n        return c//2+1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    diff = 0\n    for i in range(n-1):\n        if string[i] == '0':\n            diff += 1\n        else:\n            diff -= 1\n    return diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count += 1\n            else:\n                count -= 1\n            if count > max_diff:\n                max_diff = count\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    i = 0\n    while i < len(string):\n        if string[i] == '1':\n            length += 1\n        i += 1\n    return length\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    elif a%b==0:\n        return a+b\n    else:\n        return sum(a,b)\n    \n    #note: l_sum must be < r_sum"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (b==0):\n        return a\n    elif (b==1):\n        return 1\n    else:\n        return a+b+sum(a,b-1)\n    \ndef sum_common_divisors(a, b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (b==0):\n        return a\n    elif (b==1):\n        return 1\n    else:\n        c = a%b\n        if (c==0):\n            return b\n        elif (c==b):\n            return b+a\n        else:\n            return b+c+sum_common_divisors(a, c-1)\n        \ndef sum_common_divisors_gcd(a, b): \n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    if (b==0):\n        return a\n    elif (b==1):\n        return 1\n    else:\n        c = a%b\n        if (c==0):\n            return b\n        elif (c==b):\n            return b\n        else:\n            return b+c+sum_common_divisors_gcd(a, c-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a=abs(a)\n    b=abs(b)\n    sum=0\n    for i in range(1,a+1):\n        if (a%i==0)and(b%i==0):\n            sum+=i\n    return sum\ndef primes(N):\n    '''\n    write a function to find all primes between 1 and N.\n    '''\n    primes=[2]\n    for num in range(3,N,2):\n        isPrime=True\n        for prime in primes:\n            if num%prime==0:\n                isPrime=False\n                break\n        if isPrime==True:\n            primes.append(num)\n    return primes\ndef fib(N):\n    '''\n    Write a function to find the fibonacci sequence of a given number N.\n    '''\n    fib=[1,1]\n    for i in range(N):\n        fib.append(fib[i]+fib[i+1])\n    return fib\ndef factorial(N):\n    '''\n    Write a function to calculate the factorial of a given number N.\n    '''\n    factorial=[1]\n    for i in range(1,N):\n        factorial.append(factorial[i]+factorial[i-1])\n    return factorial\ndef fibonacci(N):\n    '''\n    Write a function to find the fibonacci sequence of a given number N.\n    '''\n    fib=[0,1]\n    for i in range(N):\n        fib.append(fib[i]+fib[i+1])\n    return fib\ndef sum_iter(N):\n    '''\n    Write a function to find the sum of the given number N using an iterative method.\n    '''\n    sum=0\n    for i in range(N):\n        sum+=i\n    return sum\ndef comb(N,M):\n    '''\n    Write a function to find the combination of nums that occur in a given nums\n    '''\n    comb=[1]\n    for i in range(N+1):\n        if(i in comb):\n            continue\n        if(i==0):\n            comb.append(1)\n            continue\n        comb.append(comb[i-1]+comb[i-2])\n    return comb\ndef lcm(N):\n    '''\n    Write a function to find the largest common multiple of numbers N and M.\n    '''\n    lcm=1\n    for i in range(N,N*N,N):\n        lcm=i*lcm\n    return lcm\ndef prod(N,M):\n    '''\n    Write a function to find the product of a given number N and M.\n    '''\n    prod=[1]\n    for i in range(1,N+1):\n        prod.append(prod[i-1]*i)\n    return prod\ndef gcd(N,M):\n    '''\n    Write a function to find the greatest common divisor of a given number N and M.\n    '''\n    gcd=1\n    for i in range(1,M+1):\n        gcd=gcd*i\n    return gcd\ndef find_palindrome(number):\n    '''\n    Write a function to check if a given number is a palindrome.\n    '''\n    number=str(number)\n    a=''\n    for i in range(len(number)//2):\n        if number[i]!=number[-(i+1)]:\n            break\n    b=''\n    for j in range(len(number)//2):\n        if number[j]!=number[-j-1]:\n            break\n    for m in range(j-1):\n        if number[m]!=number[m+1]:\n            break\n    for n in range(j+1):\n        if number[n]!=number[n-1]:\n            break\n    if number==number[-1:]:\n        return True\n    else:\n        return False\ndef find_prime(N):\n    '''\n    Write a function to find all prime numbers from 0 to N.\n    '''\n    primes=[2]\n    for num in range(3,N,2):\n        for prime in primes:\n            if num%prime==0:\n                break\n        if num==prime:\n            primes.append(num)\n    return primes\ndef find_prime_iter(N):\n    '''\n    Write a function to find all prime numbers from 0 to N.\n    '''\n    primes=[2]\n    for num in range(3,N,2):\n        for prime in primes:\n            if num%prime==0:\n                break\n        if num==prime:\n            primes.append(num)\n    return primes\ndef prime_factor(N):\n    '''\n    Write a function to find all prime numbers from 1 to N.\n    '''\n    primes=[1]\n    for i in range(2,N+1):\n        for prime in primes:\n            if i%prime==0:\n                break\n        if i==prime:\n            primes.append(i)\n    return primes\ndef prime_factor_iter(N):\n    '''\n    Write a function to find all prime numbers from 1 to N.\n    '''\n    primes=[1]\n    for i in range(2,N+1):\n        for prime in primes:\n            if i%prime==0:\n                break\n        if i==prime:\n            primes.append(i)\n    return primes\ndef my_div(N):\n    '''\n    Write a function to calculate the product of N using two numbers.\n    '''\n    prod=[1]\n    for i in range(1,N+1):\n        prod.append(prod[i-1]*i)\n    return prod\ndef ccf(N,M):\n    '''\n    Write a function to find the common factorial of N and M.\n    '''\n    fact=[1]\n    for i in range(1,N+1):\n        fact.append(fact[i-1]*i)\n    return fact\ndef fibonacci_fact(N):\n    '''\n    Write a function to calculate the factorial of N using a fibonacci sequence.\n    '''\n    fib=[1,1]\n    for i in range(2,N+1):\n        fib.append(fib[i-1]+fib[i-2])\n    return fib\ndef fibonacci_fact_iter(N):\n    '''\n    Write a function to calculate the factorial of N using a fibonacci sequence.\n    '''\n    fib=[1,1]\n    for i in range(2,N+1):\n        fib.append(fib[i-1]+fib[i-2])\n    return fib\ndef seq_fact(N):\n    '''\n    Write a function to calculate the factorial of sequence N using a sequence sequence.\n    '''\n    fact=[1]\n    for i in range(1,N+1):\n        fact.append(fact[i-1]*i)\n    return fact\ndef seq_fact_iter(N):\n    '''\n    Write a function to calculate the factorial of sequence N using a sequence sequence.\n    '''\n    fact=[1]\n    for i in range(2,N+1):\n        fact.append(fact[i-1]*i)\n    return fact\ndef sequence_fact(N):\n    '''\n    Write a function to calculate the factorial of sequence N using a sequence sequence.\n    '''\n    fact=[1]\n    for i in range(2,N+1):\n        fact.append(fact[i-1]*i)\n    return fact\ndef series(N):\n    '''\n    Write a function to calculate the series of the given number N.\n    '''\n    sum=1\n    for i in range(1,N+1):\n        sum*=i\n    return sum\ndef my_mul(N):\n    '''\n    Write a function to calculate the product of a given number N using a series.\n    '''\n    prod=[1]\n    for i in range(1,N+1):\n        prod.append(prod[i-1]*i)\n    return prod\ndef my_mul_iter(N):\n    '"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if b < a: \n        return sum(a,b) \n    \n    remainder = b % a \n    if remainder == 0: \n        return a + b \n    return (sum(a, remainder) + sum(remainder, a)) \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        a, b = b, a\n    s = 0\n    l = 0\n    for i in range(1, b+1):\n        if b%i==0:\n            s+=i\n            l+=1\n    return s,l\ndef find_divisors(n):\n    '''\n    Write a function that returns all the divisors of a number n.\n    '''\n    s,l=sum(n,n)\n    d=[]\n    for i in range(0,s,2):\n        d.append(i)\n    return d,l\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    return (a + b) - (a*b)//2\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = [a,b]\n    sum = 0\n    for i in c:\n        for j in c:\n            if i % j == 0:\n                sum += j\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    if a%b==0:\n        return a//b\n    else:\n        for i in range(1,a//b+1):\n            if a%i==0 and b%i==0:\n                return a//i+b//i\n    return 0\ndef multiples(n): \n    '''\n    Return a list of the multiples of n.\n    '''\n    l=[n*i for i in range(1,n+1)]\n    return l\ndef isprime(n): \n    '''\n    Check if a number is prime.\n    '''\n    if n<=1: \n        return 0\n    if n==2 or n==3: \n        return 1\n    if n%2==0 or n%3==0: \n        return 0\n    i=5\n    while i*i<=n: \n        if n%i==0 or n%(i+2)==0: \n            return 0\n        i+=6\n    return 1\ndef prime_factor(n): \n    '''\n    Check if n is prime or not.\n    '''\n    if n==0 or n==1: \n        return []\n    i=2\n    while i*i<=n: \n        if n%i==0: \n            return [i] + prime_factor(n//i)\n        i+=2\n    return [i]\ndef is_prime_factor(n): \n    '''\n    Check if n is prime or not.\n    '''\n    if n==0 or n==1: \n        return []\n    if n%2==0: \n        return [2]\n    if n%3==0: \n        return [3]\n    i=5\n    while i*i<=n: \n        if n%i==0 or n%(i+2)==0: \n            return [i] + is_prime_factor(n//i)\n        i+=6\n    return [i]\ndef sieve_of_eratosthenes(n): \n    '''\n    Find all prime numbers less than n and return a list of them.\n    '''\n    is_prime_list=[]\n    def is_prime(n): \n        if n==2 or n==3: \n            return True\n        if n%2==0 or n%3==0: \n            return False\n        for i in range(5,int(math.sqrt(n)+1),6): \n            if n%i==0: \n                return False\n        return True\n    for i in range(5,n+1,6): \n        if is_prime(i) and i not in is_prime_list: \n            is_prime_list.append(i)\n    return is_prime_list\ndef miller_rabin(n): \n    '''\n    Test if a number is prime.\n    '''\n    if n==2 or n==3: \n        return True\n    if n%2==0: \n        return False\n    if n%3==0: \n        return False\n    n=n+1\n    d=5\n    while d*d<=n: \n        if n%d==0: \n            return False\n        d+=6\n    return True\ndef miller_rabin_primes(n): \n    '''\n    Test if a number is prime.\n    '''\n    is_prime_list=[]\n    for i in range(2,n): \n        if miller_rabin(i): \n            is_prime_list.append(i)\n    return is_prime_list\ndef is_prime_prime(n): \n    '''\n    Test if a number is prime or not.\n    '''\n    if n==2 or n==3: \n        return True\n    if n%2==0: \n        return False\n    if n%3==0: \n        return False\n    for i in range(5,int(math.sqrt(n)+1),6): \n        if n%i==0: \n            return False\n    return True\ndef find_prime_factors(n): \n    '''\n    Find all prime factors of n.\n    '''\n    def factors(n): \n        '''\n        Return a list of all factors of n.\n        '''\n        i=1\n        l=[]\n        while i*i<=n: \n            if n%i==0: \n                l.append(i)\n                n//=i\n            else: \n                i+=1\n        if n!=1: \n            l.append(n)\n        return l\n    def gcd(a,b): \n        '''\n        Return the greatest common divisor of a and b.\n        '''\n        while a!=0: \n            a,b=b%a,a\n        return b\n    if n<=1: \n        return 0\n    if n==2 or n==3: \n        return 1\n    if n%2==0: \n        return [2]\n    if n%3==0: \n        return [3]\n    l=factors(n)\n    d=gcd(l[0],l[1])\n    l=l[2:]\n    for i in range(1,len(l)): \n        d=gcd(d,l[i])\n    return [d]\ndef prime_factor_prime(n): \n    '''\n    Find all prime factors of a number.\n    '''\n    def is_prime_factor(n): \n        '''\n        Check if a number is prime factor.\n        '''\n        if n==2 or n==3: \n            return True\n        if n%2==0 or n%3==0: \n            return False\n        for i in range(5,int(math.sqrt(n)+1),6): \n            if n%i==0: \n                return False\n        return True\n    if n<=1: \n        return []\n    if n==2 or n==3: \n        return [2]\n    if n%2==0: \n        return [2]\n    if n%3==0: \n        return [3]\n    for i in range(5,n+1,6): \n        if is_prime_factor(i): \n            return [i]\n    return []\ndef find_prime_factors_list(n): \n    '''\n    Find all prime factors of a number.\n    '''\n    def factors(n): \n        '''\n        Return a list of all factors of n.\n        '''\n        i=1\n        l=[]\n        while i*i<=n: \n            if n%i==0: \n                l.append(i)\n                n//=i\n            else: \n                i+=1\n        if n!=1: \n            l.append(n)\n        return l\n    def gcd(a,b): \n        '''\n        Return the greatest common divisor of a and b.\n        '''\n        while a!=0: \n            a,b=b%a,a\n        return b\n    if n<=1: \n        return []\n    if n==2 or n==3: \n        return [2]\n    if n%2==0: \n        return [2]\n    if n%3==0: \n        return [3]\n    l=factors(n)\n    d=gcd(l[0],l[1])\n    l=l[2:]\n    for i in range(1,len(l)): \n        d=gcd(d,l[i])\n    return [d]\ndef is_prime_prime_list(n): \n    '''\n    Check if a number is prime prime or not.\n    '''\n    if n==2 or n==3: \n        return True\n    if n%2==0: \n        return False\n    if n%3==0: \n        return False\n    for i in range(5,int(math.sqrt(n)+1),6): \n        if n%i==0: \n            return False\n    return True\ndef prime_factor_prime_list(n): \n    '''\n    Check if a numbe"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a == b):\n        return a\n    elif(a % b == 0):\n        return a // b\n    else:\n        return b // a\n        \ndef run():\n    '''\n    main function\n    '''\n    a = int(input(\"Enter the first number:\"))\n    b = int(input(\"Enter the second number:\"))\n    print(sum(a,b))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(x*y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    #print(x, y)\n    result = 0\n    for i in range(x):\n        result += y*i\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x, y = int(x), int(y)\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(\"Multiplying {} and {} is {}.\".format(x,y,x*y))\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if (x == 0) and (y == 0):\n        return 0\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Write your code here\n    if n < 1:\n        raise ValueError\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import string\n    word = ''\n    if len(str) > n:\n        for i in str:\n            word = word + i\n    return word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    \n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_word = []\n    for word in str.split():\n        if len(word) > n:\n            long_word.append(word)\n    return''.join(long_word)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = []\n    for i in range(n):\n        word_list.append(input(str + str(i+1) + \" word: \").lower())\n    word_list.sort()\n    count = 0\n    for i in range(n):\n        if(len(word_list[i])>count):\n            count = len(word_list[i])\n            word = word_list[i]\n        elif(len(word_list[i]) == count):\n            count = count + 1\n    return word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = [word.lower() for word in str.split()]\n    longest = max(words, key=len)\n    if len(longest) > n:\n        return''.join(longest)\n    else:\n        return ''\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split(' '):\n        if len(word) > n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return len([word for word in str.split() if len(word) > n])\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n < 0:\n        return\n    if str == '':\n        return\n    if len(str) < n:\n        return\n    long_words(n, str[0:n])\n    long_words(n, str[n:])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        for j in range(n):\n            if (i==j or my_matrix[i][j]%2 == 0):\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (len(my_matrix) == len(my_matrix[0]) == len(my_matrix) == 2):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    \ndef main():\n    '''\n    Test the matrix functions.\n    '''\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print_matrix(matrix)\n    print_matrix_l(matrix)\n    magic_square_test(matrix)\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    is_magic = True\n    for r in range(3):\n        if (my_matrix[r][r]!= 0):\n            is_magic = False\n            break\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    x,y = len(my_matrix),len(my_matrix[0])\n    if x == y == 1:\n        return True\n    else:\n        mid = int(x/2)\n        if my_matrix[mid][mid] == 0:\n            return magic_square_test(my_matrix[:mid,:mid])\n        if my_matrix[mid][mid] == my_matrix[mid][mid] == 1:\n            return magic_square_test(my_matrix[:mid,mid:])\n        if my_matrix[mid][mid] == my_matrix[mid][mid] == 2:\n            return magic_square_test(my_matrix[:mid,:mid])\n        else:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code goes here\n    if len(my_matrix) == 3:\n        for y in range(3):\n            for x in range(3):\n                if (my_matrix[x][y] == 1):\n                    return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        row_sum = 0\n        for i in my_matrix:\n            for x in i:\n                row_sum += x\n        # if all the sum of rows of matrix is equal to 0, then the matrix is not a magic square\n        if row_sum == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix_rows = len(my_matrix)\n    matrix_cols = len(my_matrix[0])\n    for row in range(matrix_rows):\n        for col in range(matrix_cols):\n            if my_matrix[row][col]!= 0:\n                if row == col:\n                    print(my_matrix[row][col], end=\" \")\n                    return False\n                if (row + col) % 2 == 0:\n                    print(my_matrix[row][col], end=\" \")\n                    return False\n    print(\"\\n\", end=\"\")\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    n = len(my_matrix)\n    if (n == n and n == n and n == n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    square_size = int(math.sqrt(len(my_matrix)))\n    if len(my_matrix) == square_size * square_size:\n        return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_count = len(my_matrix)\n    col_count = len(my_matrix[0])\n    for i in range(row_count):\n        for j in range(col_count):\n            if i == j:\n                if my_matrix[i][j] == 0:\n                    return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    l = [nums.count(x) for x in set(nums)]\n    return l.index(max(l))\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = dict()\n    for num in nums:\n        if num not in max_freq:\n            max_freq[num] = 1\n        else:\n            max_freq[num] += 1\n    \n    max_occurrences = [None for i in range(len(nums))]\n    for key, val in max_freq.items():\n        if val == max(max_freq.values()):\n            max_occurrences[nums.index(key)] = key\n            \n    return max_occurrences\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    sorted_nums = sorted(nums)\n    max_count = 0\n    for item in sorted_nums:\n        count = 0\n        for num in nums:\n            if item == num:\n                count += 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    # create an empty dictionary\n    freq = {}\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = {}\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    maximum = 0\n    freq_dict = {}\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    for num in freq_dict:\n        if freq_dict[num] > maximum:\n            maximum = freq_dict[num]\n    return maximum\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = {}\n    for num in nums:\n        if num in max_freq.keys():\n            max_freq[num] += 1\n        else:\n            max_freq[num] = 1\n    \n    for num in nums:\n        if num in max_freq.keys():\n            return num\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # generate a dictionary\n    my_dict = defaultdict(int)\n    # loop through the given list and add to dictionary\n    for i in nums:\n        my_dict[i] += 1\n    \n    # find the max frequency\n    max_freq = 0\n    max_freq_idx = 0\n    for i,j in my_dict.items():\n        if j > max_freq:\n            max_freq = j\n            max_freq_idx = i\n    \n    return max_freq_idx\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count=defaultdict(int)\n    for i in nums:\n        count[i]+=1\n    return max(count.values())\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if(str1.lower()=='y'):\n        str1=str1[::-1]\n        return(str1)\n    else:\n        return('Not a string')\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['a','e','i','o','u']\n    str1=''.join([ch if ch in vowels else'' for ch in str1])\n    return str1[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for ch in str1:\n        if ch in vowels:\n            new_str += ch\n        else:\n            continue\n    return new_str\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    final = \"\"\n    for char in str1:\n        if char in vowels:\n            final += char\n        else:\n            final += char.upper()\n    return final\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    reverse_str = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in VOWELS:\n            reverse_str += str1[i]\n    return reverse_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_string = \"\"\n    for letter in str1:\n        if letter not in vowels:\n            reversed_string += letter\n        else:\n            reversed_string += \"y\" + letter\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str_vowels = ['a', 'e', 'i', 'o', 'u']\n    temp_str = \"\"\n    temp_str = str1.split(\" \")\n    for i in temp_str:\n        if i in str_vowels:\n            temp_str.remove(i)\n    return \" \".join(temp_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    s = ''\n    for c in str1:\n        if c in 'aeiouAEIOU':\n            s += c\n    return s[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n            print(vowel_count)\n    print(vowel_count)\n    return vowel_count"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if not isinstance(tup1, tuple):\n        print(\"tup1 is not a tuple\")\n        return\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return f\"({', '.join(map(str, tup1))})\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"(\"\n    for i in range(len(tup1)):\n        if i < len(tup1)-1:\n            str1 += str(tup1[i]) + \",\"\n        else:\n            str1 += str(tup1[i])\n    str1 += \")\"\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    out = ''\n    for i in range(len(tup1)):\n        out += str(tup1[i]) + ','\n    return out[:-1]\n    #return tup1[0] + ',' + tup1[1] + ',' + tup1[2]\n    #return str(tup1[0]) + ',' + str(tup1[1]) + ',' + str(tup1[2])\n    #return ','.join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for x in tup1:\n        string = string + x +''\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1) < 3:\n        return f\"({', '.join([str(e) for e in tup1])})\"\n    else:\n        return f\"({', '.join([str(e) for e in tup1[:3]])}, {', '.join([str(e) for e in tup1[3:]])})\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ','.join([str(x) for x in tup1]) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = '(' + ','.join(str(e) for e in tup1) + ')'\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += -num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for n in nums:\n        if n < 0:\n            result += n\n    return result\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    i=0\n    sum_neg=0\n    while i<len(nums):\n        if nums[i]<0:\n            sum_neg+=nums[i]\n        i+=1\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    if not nums:\n        return 0\n    \n    neg_nums = []\n    for i in nums:\n        if i < 0:\n            neg_nums.append(i)\n    \n    return sum(neg_nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum -= n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg=0\n    for i in nums:\n        if i<0:\n            neg+=i\n    return neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Your code here\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_sum = 0\n    for num in nums:\n        if num < 0:\n            num_sum = num_sum - num\n        elif num > 0:\n            num_sum = num_sum + num\n    return num_sum"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0: \n        print(\"invalid input\")\n        return \n    if n % 6 == 0: \n        return n \n    else: \n        return n + hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 2: \n        return n\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2) + hexagonal_num(n-3)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hexagonal_right(n):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        elif n%2 == 1:\n            return hexagonal_right(n//2)\n        elif n%2 == 0:\n            return hexagonal_right(n-1)\n        else:\n            return -1\n    return hexagonal_right(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    else:\n        return hexagonal_num(n-1)+hexagonal_num(n-2)+hexagonal_num(n-3)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # The nth hexagonal number is the sum of\n        # the squares of the first\n        # and second half numbers.\n        return n**2 + n**2 + n**2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*(i+1)\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    \n    x = n \n    while x % 6!= 0: \n        x += 1\n    return x * 3\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n == 1): \n        return 5\n    elif (n == 2): \n        return 6\n    elif (n == 3): \n        return 7\n    elif (n == 4): \n        return 10\n    elif (n == 5): \n        return 9\n    elif (n == 6): \n        return 11\n    elif (n == 7): \n        return 12\n    else: \n        return 13\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = (n//2)-1\n    y = n-(x*2)\n    print(n,x,y)\n    print(hexagonal_num(x),hexagonal_num(y),hexagonal_num(n-x-y))\n    \n    if n<=7:\n        return n\n    else:\n        return hexagonal_num(n-3)\n    \n    \n    #  This is a direct answer to:\n    # x = -1\n    # y = 0\n    # n = 2\n    #   + (x * 2) + (y * 2)\n    # (n-x-y) % 2 == 1\n    # \n    # This is another direct answer to:\n    # n = -4\n    # print(hexagonal_num(n))\n    \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0: \n        return 0 \n    elif n == 0: \n        return 1\n    elif n == 1: \n        return 2 \n    elif n == 2: \n        return 3 \n    elif n == 3: \n        return 4 \n    elif n == 4: \n        return 5 \n    else: \n        for i in range(1, n): \n            if (i * (i + 1)) > n: \n                return n \n            else: \n                j = 1\n                while i * j <= n: \n                    if (n % (i * j)) == 0: \n                        break\n                    j += 1\n                else: \n                    return n \n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(len(nums)) / sum(nums) if nums else 0.0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    zeros = 0\n    nonzero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            nonzero += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_non_zeros = 0\n    # create a separate array to hold the non-zero numbers\n    non_zeros_array = []\n    # count the number of zeroes\n    for i in nums:\n        if i!= 0:\n            num_non_zeros += 1\n        else:\n            num_zeros += 1\n    # convert the num_zeros to a percentage of num_zeros\n    num_zeros = num_zeros / len(nums)\n    # convert the num_non_zeros to a percentage of num_non_zeros\n    num_non_zeros = num_non_zeros / len(nums)\n    # print the percentage of zeroes and non-zeroes\n    print('%.2f%% of numbers that have zero values' % (num_zeros * 100))\n    print('%.2f%% of numbers that have non-zero values' % (num_non_zeros * 100))\n    return num_zeros, num_non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]==0:\n            count = count+1\n    return float(count)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    num_count = 0\n    for i in range(0, len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            num_count += 1\n    ratio = zero_count/len(nums)\n    print(ratio)\n    return ratio\ndef find_index(arr, target):\n    '''\n    Write a function to find the index of the target value in an array.\n    '''\n    index = 0\n    for i in range(0, len(arr)):\n        if arr[i] == target:\n            return index\n        index += 1\n    return -1\ndef delete_index(arr, target):\n    '''\n    Write a function to delete a specific value from an array.\n    '''\n    index = find_index(arr, target)\n    if index!= -1:\n        arr.pop(index)\n        return True\n    return False\ndef count_zeros(arr):\n    '''\n    Write a function to determine how many zeros are in the array.\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 0:\n            count += 1\n    print(count)\n    return count\ndef append_zero(arr):\n    '''\n    Write a function to add zeros to an array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] == 0:\n            arr[i] = 0\n    return arr\ndef count_zeros_flatten(arr):\n    '''\n    Write a function to count the number of zeros in a flat array.\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 0:\n            count += 1\n    print(count)\n    return count\ndef count_zeros_copy(arr):\n    '''\n    Write a function to count the number of zeros in an array.\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 0:\n            count += 1\n    print(count)\n    return count\ndef count_zeros_rotate(arr):\n    '''\n    Write a function to count the number of zeros in an array.\n    '''\n    count = 0\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == 0:\n            count += 1\n    print(count)\n    return count\ndef swap_zeros(arr):\n    '''\n    Write a function to swap the zeros in an array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] == 0:\n            arr[i] = arr[i][::-1]\n    return arr\ndef max_of_arr(arr):\n    '''\n    Write a function to find the max value in an array.\n    '''\n    index = 0\n    max_val = arr[0][0]\n    for i in range(0, len(arr)):\n        if arr[i][0] > max_val:\n            index = i\n            max_val = arr[i][0]\n    return index\ndef count_zeros_rotate_copy(arr):\n    '''\n    Write a function to count the number of zeros in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            count += 1\n    print(count)\n    return count\ndef remove_zeros(arr):\n    '''\n    Write a function to remove all zeros from an array.\n    '''\n    zero_count = zero_count(arr)\n    print(zero_count)\n    for i in range(0, len(arr)):\n        if arr[i][0] == 0:\n            arr[i] = arr[i][::-1]\n    return arr\ndef remove_zeros_copy(arr):\n    '''\n    Write a function to remove all zeros from an array.\n    '''\n    zero_count = zero_count(arr)\n    print(zero_count)\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            arr[i] = arr[i][::-1]\n    return arr\ndef remove_zeros_flatten(arr):\n    '''\n    Write a function to remove all zeros in a flat array.\n    '''\n    zero_count = zero_count(arr)\n    print(zero_count)\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            arr[i] = arr[i][::-1]\n    return arr\ndef remove_zeros_rotate(arr):\n    '''\n    Write a function to remove all zeros in an array.\n    '''\n    zero_count = zero_count(arr)\n    print(zero_count)\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i][0] == 0:\n            arr[i] = arr[i][::-1]\n    return arr\ndef delete_zeros(arr):\n    '''\n    Write a function to delete all zeros from an array.\n    '''\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            arr[i] = arr[i][::-1]\n    return arr\ndef check_array(arr):\n    '''\n    Write a function to check a given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            print(True)\n            return True\n    print(False)\ndef zero_zeros(arr):\n    '''\n    Write a function to check if the given array has a zero.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            count += 1\n    if count == len(arr):\n        return True\n    else:\n        return False\ndef num_zeros(arr):\n    '''\n    Write a function to find the number of zeros in the array.\n    '''\n    zero_count = 0\n    for i in range(0, len(arr)):\n        if arr[i][0] == 0:\n            zero_count += 1\n    print(zero_count)\n    return zero_count\ndef max_of_array(arr):\n    '''\n    Write a function to find the max value in an array.\n    '''\n    max = arr[0][0]\n    for i in range(0, len(arr)):\n        if arr[i][0] > max:\n            max = arr[i][0]\n    return max\ndef count_zeros_copy_rotate(arr):\n    '''\n    Write a function to count the number of zeros in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            count += 1\n    print(count)\n    return count\ndef count_zeros_rotate_copy(arr):\n    '''\n    Write a function to count the number of zeros in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            count += 1\n    print(count)\n    return count\ndef count_zeros_flatten(arr):\n    '''\n    Write a function to count the number of zeros in a flat array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            count += 1\n    print(count)\n    return count\ndef count_zeros_copy(arr):\n    '''\n    Write a function to count the number of zeros in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i][0] == 0:\n            count += 1\n    print(count)\n    return count\ndef count_zeros_rotate(arr):\n    ''"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt = 0\n    for i in range(0,len(nums)):\n        if nums[i] == 0:\n            cnt = cnt + 1\n    return (cnt/len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i!= 0:\n            count = count + 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_zeroes = 0\n    total_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            total_zeroes += 1\n        else:\n            total_non_zeroes += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # First find the sum of all non-zero numbers in the array\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            sum += nums[i]\n    # find the ratio\n    return sum/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # your code here\n    if n<=0:\n        return False\n    else:\n        sum = 0\n        temp = n\n        while(temp > 0):\n            x = temp % 2\n            temp = temp // 2\n            sum += x\n        return sum == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    # your code here\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    if n%7==0:\n        return False\n    return is_Sum_Of_Powers_Of_Two(n//3) and is_Sum_Of_Powers_Of_Two(n//5) and is_Sum_Of_Powers_Of_Two(n//7)\n    \n    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if (n%i) == 0:\n            sum += n//i\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    for i in range(1, n + 1):\n        if i == 1:\n            res += i\n        else:\n            if i % 2 == 0:\n                res += i\n    return res == n\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if (n%i == 0):\n                return False\n        return True\n    \n    #if n == 1:\n    #    return True\n    #return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False\n    while n > 1: \n        if n & 1 == 0: \n            return False\n        n = n >> 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n == 0):\n        return False\n    while n > 1:\n        if n%2 == 0:\n            n = n/2\n            continue\n        else:\n            return False\n        n = n/2\n    return True\n    "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n > 1:\n        sum_of_pow_2 = 0\n        for i in range(2,n):\n            if n%i == 0:\n                sum_of_pow_2 = sum_of_pow_2 + i\n        if sum_of_pow_2!= n:\n            return False\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while(i < n): \n        if n%2 == 0: \n            i = i + 1\n            n = n//2 \n            continue\n        i = i + 1\n    if n == 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print('The circumference of a circle with radius: ', r,'is: ', circumference)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * (r**2)\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # 1. Write a function to return the circumference of a circle.\n    circumference = 2 * 3.14 * (r ** 2)\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    def circumference(radius):\n        return 2*radius*math.pi\n    def area(radius):\n        return radius*radius*math.pi\n    return circumference(r) + area(r)\n    \ndef area_of_circle(r):\n    '''\n    Write a function that returns the area of a circle with radius r.\n    '''\n    return math.pi*r**2\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Formula: circumference = 2\u03c0r + \u03c0 r\n    circumference = (2 * pi * r) + (2 * pi * r) + (pi * r)\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*3.14\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2*(3.14*r)\n    return c\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for elem in test_list for num in elem]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    out_list = []\n    for i in test_list:\n        for j in range(0, len(i)):\n            out_list.append(i[j])\n    return out_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for element in test_list:\n        if isinstance(element, list):\n            for element2 in element:\n                flattened_list.append(element2)\n        elif isinstance(element, int):\n            flattened_list.append(element)\n        else:\n            flattened_list.append(element.split(\" \")[0])\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # If the input list is a single list, use the below code\n    if len(test_list) == 1:\n        # Use the below if block to test your function\n        # pass\n        # Use the below print statement to print the following output:\n        # 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59\n        return list(map(lambda x: x[0], test_list))\n    # If the input list is a multi-dimensional list, use the below code\n    else:\n        # Use the below code to test your function\n        # Use the below print statement to print the following output:\n        # 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60\n        return [x[0] for x in test_list]"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        result = result.union(set(sublist))\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    temp = []\n    for el in test_list:\n        if type(el) is list:\n            for num in el:\n                temp.append(num)\n        else:\n            temp.append(el)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    '''\n    A common problem is that lists can be nested. For example,\n    \n    l1 = [[1, 2], [3, 4, 5], [6, 7, 8]]\n    l2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \n    This function will flatten the lists l1 and l2 into:\n    \n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    It's the easiest way to solve this problem. Instead, we can use a recursive\n    approach, which is quite slow and has a huge overhead cost. Instead, we can\n    perform all sorts of deep stuff in parallel. The main idea is that we can\n    flatten the list of lists into a single set of numbers.\n    '''\n    '''\n    Here's a quick test case:\n    '''\n    if len(test_list) == 0:\n        return []\n    \n    if len(test_list) == 1:\n        return test_list[0]\n    \n    result = []\n    \n    for el in test_list:\n        result += extract_singly(el)\n    \n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result_list = []\n    for elem in test_list:\n        if type(elem) == list:\n            result_list.extend(elem)\n        else:\n            result_list.append(elem)\n    return result_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for sublist in test_list:\n        for item in sublist:\n            return_list.append(item)\n    return return_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = test_list\n    i = 0\n    while i < len(test_list):\n        j = i\n        while j < len(test_list):\n            if test_list[i] == test_list[j]:\n                test_list[i] = test_list[j]\n                j = j + 1\n            else:\n                j = j + 1\n        i = i + 1\n    return test_list\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    count = len(nums)\n    p = 0\n    for i in range(count-1,-1,-1):\n        if count-i>0:\n            j = p\n            while j>=0 and nums[j]<nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n                j-=1\n        p+=1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def insert_sort(arr, position, n):\n        while position < n:\n            for i in range(position, n):\n                if arr[i] < arr[position]:\n                    arr[i], arr[position] = arr[position], arr[i]\n            arr[position], arr[n - 1] = arr[n - 1], arr[position]\n            position += 1\n            print(arr)\n    \n    n = len(nums)\n    for i in range(n):\n        if i!= 0:\n            arr = nums[i:] + nums[:i]\n            insert_sort(arr, i, n)\n        else:\n            nums[:] = nums[:n]\n            nums[:] = nums[n:]\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find length of the list\n    length = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return\n    pancake_sort_recursive(nums, 0, len(nums) - 1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def select_sort(nums, left, right):\n        pivot = nums[right]\n        for i in range(left, right):\n            if nums[i] < pivot:\n                nums[i], nums[left] = nums[left], nums[i]\n                left += 1\n        nums[right], nums[left] = nums[left], nums[right]\n    \n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        res = []\n        for i in range(len(nums)):\n            j = len(nums)-1 - i\n            while j >= 0 and nums[j] > nums[j+1]:\n                j -= 1\n            res.append(nums[j+1])\n            nums[j+1] = nums[j]\n            nums[j] = nums[j+1]\n        return res"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length):\n        max_element = nums[i]\n        p = i\n        for j in range(i+1, length):\n            if nums[j] > max_element:\n                max_element = nums[j]\n                p = j\n        temp = nums[i]\n        nums[i] = nums[p]\n        nums[p] = temp\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    i = 0\n    while i < n - 1:\n        if nums[i] >= nums[i + 1]:\n            i += 1\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    first_ptr = 0\n    last_ptr = len(nums) - 1\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    end = len(nums)-1\n    while end > 0:\n        p = nums[end]\n        for i in range(end-1,0,-1):\n            if nums[i] < p:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n        nums[end-1], nums[0] = nums[0], nums[end-1]\n        end -= 1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # code here\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list2[i]!=list3[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list4=[]\n    for i in list1:\n        if i not in list2:\n            list4.append(i)\n    for j in list2:\n        if j not in list3:\n            list4.append(j)\n    count=0\n    for i in list4:\n        for j in list4:\n            if i==j:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    m1 = len(list1)\n    m2 = len(list2)\n    m3 = len(list3)\n    if(m1==m2==m3):\n        count = 0\n        for i in range(0,m1):\n            for j in range(0,m2):\n                if(list1[i] == list2[j] and list1[i]!= list3[j]):\n                    count += 1\n        return count\n    else:\n        return 0\n    \nlist1 = [1,2,3,4,5,6,7,8,9]\nlist2 = [10,11,12,13,14,15,16,17,18,19]\nlist3 = [20,21,22,23,24,25,26,27,28,29]\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1) == len(list2) == len(list3):\n        return len(list1)\n    else:\n        count_samepair = 0\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                if list1[i] == list2[j] and list1[i] == list3[j]:\n                    count_samepair += 1\n                elif list1[i]!= list2[j] and list1[i]!= list3[j]:\n                    count_samepair += 1\n        return count_samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    for num in list1:\n        if num in list2:\n            result += 1\n    for num in list3:\n        if num in list2:\n            result += 1\n    return result\n    \n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_copy=list1.copy()\n    list2_copy=list2.copy()\n    list3_copy=list3.copy()\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    list1.sort()\n    list2.sort()\n    list3.sort()\n    \n    if len(list1) == len(list2):\n        return len(set(list1).intersection(set(list2)))\n    elif len(list2) == len(list3):\n        return len(set(list1).intersection(set(list3)))\n    else:\n        return 0\n        \n    # can do this with dictionary\n    # return len(set(list1).intersection(set(list2)))\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                count+=1\n    for i in list3:\n        for j in list1:\n            if i==j:\n                count+=1\n    return count\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    print(\"\\nThe number of different items in each list:\")\n    print(list1,\"\\n\",list2,\"\\n\",list3)\n    print(\"Number of different items in each position:\")\n    \n    print(\"\\nThe number of same items in each position:\")\n    print(count_same_items(list1,list2,list3),\"\\n\",count_same_items(list1,list3,list2),\"\\n\",count_same_items(list3,list2,list1),\"\\n\",count_same_items(list3,list1,list2),\"\\n\")\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_counter = 0\n    for x in Input:\n        if type(x) == list:\n            List_counter += 1\n    return List_counter\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    #Your code goes here\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    else:\n        print(len(list(filter(lambda x: type(x) == int, Input))))\n        return len(list(filter(lambda x: type(x) == int, Input)))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if Input[i][0] == 'L':\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(set(map(set, Input)))) \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i] == Input[j]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if Input == ():\n        return 0\n    elif len(Input) <= 1:\n        return 1\n    elif len(Input) == 2:\n        return 2\n    else:\n        counter = 1\n        for i in range(len(Input)):\n            if Input[i] == Input[i + 1]:\n                counter += 1\n            else:\n                break\n        return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in range(0, len(Input)):\n        for j in range(0, len(Input[i])):\n            for k in range(0, len(Input[i][j])):\n                if (Input[i][j][k] == '{'):\n                    list_count += 1\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not Input:\n        return 0\n    else:\n        dic = {}\n        len_list = len(Input)\n        for i in range(len_list):\n            dic[Input[i]] = i\n        return len(dic)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # create a dictionary to hold the elements in tuple\n    tuple_lst = {'item1':1,'item2':2,'item3':3}\n    # iterate through the given tuple\n    for i in tuple_lst:\n        # check if the element is in dictionary\n        if tuple_lst[i] in Input:\n            # increment the count of lists\n            tuple_lst[i] = tuple_lst[i] + 1\n        # if the element is not in the dictionary\n        else:\n            # return the count of lists\n            return tuple_lst[i]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m = max(arr)\n    return m\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    i = 0\n    while(i < len(arr)):\n        j = i+1\n        while(j < len(arr)):\n            if(abs(arr[i]-arr[j]) > abs(arr[i]-arr[j+1])):\n                arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n    \n    return arr\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    result = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        result = max(result, arr[i] - arr[i-1])\n    return result\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]!= arr[j]:\n                result = max(result, abs(arr[i]-arr[j]))\n    return result\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # we will pass the array to the function\n    arr = arr\n    # initialize the maximum difference\n    mx = 0\n    # iterate through array\n    for i in range(len(arr)):\n        # loop through array\n        for j in range(len(arr)):\n            # check if the difference is greater than the max difference\n            # if the difference is greater than the max difference\n            # then we update the max difference\n            if abs(arr[i]-arr[j]) > mx:\n                mx = abs(arr[i]-arr[j])\n    # return max difference\n    return mx\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    total = 0\n    for i in arr:\n        total = total + i\n    if total == 0:\n        return 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i] - arr[j])!= abs(arr[i] - arr[j]):\n                total = total - abs(arr[i] - arr[j])\n    return total\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            abs_diff = abs(arr[i] - arr[j])\n            if abs_diff > max_diff:\n                max_diff = abs_diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    a=np.empty(len(arr))\n    a[0]=arr[0]\n    a[1]=arr[0]\n    for i in range(2,len(arr)):\n        a[i]=arr[i]-a[i-1]\n    return(np.max(np.abs(a)))\n    \ndef sum_Abs_Diff(arr): \n    '''\n    Write a python function to find the sum of any two elements in a given array.\n    '''\n    a=np.empty(len(arr))\n    a[0]=arr[0]\n    a[1]=arr[0]\n    for i in range(2,len(arr)):\n        a[i]=arr[i]+a[i-1]\n    return(np.sum(np.abs(a)))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0] - arr[1]\n    min = arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-1] > max:\n            max = arr[i] - arr[i-1]\n        if arr[i] - arr[i-1] < min:\n            min = arr[i]\n    return max - min\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(arr[i] > arr[j]):\n                maximum = max(maximum, abs(arr[j] - arr[i]))\n    return maximum\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    f = lambda x, y: x*y\n    # Step 1\n    # Get n prime factors\n    a = list(filter(lambda x: x!= 0, [x for x in a if x < n]))\n    # Step 2\n    # Find the factors of n\n    nf = [x for x in a if x <= n]\n    # Step 3\n    # Find the root of n\n    root = nf[0]\n    # Step 4\n    # Only filter the factors of n\n    nf = [x for x in nf if x!= root]\n    # Step 5\n    # Find the first non-zero factor of n\n    if nf:\n        return nf[0], find_solution(root, f(n, f(root, nf[0])), nf[0])\n    # Step 6\n    # No non-zero factor of n\n    return None, None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    '''\n    Find the corresponding x and y values to the coefficients a and b in the quadratic form of the equation.\n    '''\n    def find_coefficient(a, b):\n        return a * b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (a == 0 and b == 0):\n        return (1, 0)\n    if (a == 0):\n        return (n, 0)\n    if (b == 0):\n        return (0, n)\n    if (n < 0):\n        return None\n    if (n == 0):\n        return (a, b)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if not a or not b:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    raise NotImplementedError\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a_list = [x for x in a]\n    b_list = [y for y in b]\n    if b_list[0] == 0:\n        return None\n    elif b_list[0] == 1:\n        return a[0], b[0]\n    elif a_list[0] == 1:\n        return a[0], b[1]\n    elif a_list[0] == 2:\n        return a[1], b[1]\n    elif a_list[0] == 3:\n        return a[2], b[2]\n    else:\n        for i in range(1, n):\n            if a_list[i] == a_list[i-1] and b_list[i] == b_list[i-1]:\n                return None\n            else:\n                if a_list[i] == a_list[i-1]:\n                    return a[i], b[i]\n                else:\n                    if b_list[i] == b_list[i-1]:\n                        return a[i], b[i]\n                \n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print('Hello!')\n    print(list1, list2)\n    list2.remove(list1[0])\n    print(list2)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        list2.remove(elem)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n    for elem in list2:\n        for elem2 in list1:\n            if elem == elem2:\n                list1.remove(elem2)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list1:\n        try:\n            list2.remove(x)\n        except ValueError:\n            print(\"The element is not present in list1\")\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError(\"expected list, got {}\".format(type(list1).__name__))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list2.remove(list2[0])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # code here\n    # code here\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            list1.pop(i)\n        else:\n            i += 1\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for x in range(len(list1)):\n        if list1[x] not in result:\n            result.append(list1[x])\n    for x in range(len(list2)):\n        if list2[x] not in result:\n            result.append(list2[x])\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n - (n-2) + (n-4) + sum_series(n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2,0,-1):\n        sum += i\n    return sum\n    \nprint(sum_series(100)"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    for i in range(0, n, 1):\n        sum_ += i\n    return sum_"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = n-1\n    return n*(n-2) + (n-2) + (n-4) + (n-x)\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n // 2):\n        sum += i + 2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        raise ValueError('n must be positive')\n    s = 0\n    for i in range(n - 2, -1, -1):\n        s += i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n + 1) // 2 + (n - 2) + (n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n, 0, -1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round(pi*(s**2)*(l+s))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5*l*(s**2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    s = s / 2\n    for i in range(len(l)):\n        if i == 0:\n            a += 2*l[i] + s\n        elif i == len(l)-1:\n            a += 2*s*l[i] + s*(l[i]-2)\n        else:\n            a += 2*s*l[i] + s*(l[i]-2)*(i+1) + s*l[i+1]\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # By using division, this whole equation can be calculated as follows:\n    # area = (1/4)*(s*(s-1)/2)\n    area = (1/4)*(s*(s-1))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(s):\n        area = area + (tan(pi/s) * l)**2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return l * s\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5*l*s\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return l*(s**2)\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return s*(2*l)\ndef main():\n    print('Welcome to the Area and Perimeter Calculator!')\n    print('Enter 1 to calculate the area of a regular polygon and the perimeter of a regular polygon.')\n    print('Enter 2 to calculate the area of a regular polygon given its number of sides.')\n    print('Enter 3 to calculate the area of a regular polygon given its circumference.')\n    choice = int(input('Enter your choice: '))\n    if choice == 1:\n        print('Enter the length of the regular polygon: ')\n        l = int(input())\n        print('Enter the number of sides of the regular polygon: ')\n        s = int(input())\n        print('The area of the regular polygon:'+ str(area_polygon(s, l)))\n        print('The perimeter of the regular polygon:'+ str(perimeter_polygon(s, l)))\n    elif choice == 2:\n        print('Enter the number of sides of the regular polygon: ')\n        s = int(input())\n        print('The area of the regular polygon:'+ str(area_polygon(s, s)))\n    elif choice == 3:\n        print('Enter the circumference of the regular polygon: ')\n        l = int(input())\n        print('The perimeter of the regular polygon:'+ str(perimeter_polygon(l, l)))\n    else:\n        print('Invalid choice, enter 1, 2, 3')\n    \n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return l*tan(s/2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2\ndef angle_calc(x1, y1, x2, y2):\n    '''\n    This function calculates the angle between two points.\n    '''\n    return atan((y2-y1)/(x2-x1))*180/pi\ndef main():\n    '''\n    This program is provided with a rectangular geometry.\n    As an example, you can see the area of a square and a triangle on the\n    right side of the square.\n    '''\n    print(\"\\nArea of Triangle = \" + str(area_triangle(1,1,1)))\n    print(\"Area of Rectangle = \" + str(area_rectangle(1,1,1)))\n    print(\"Area of Circle = \" + str(area_circle(1,1,1)))\n    print(\"Area of Parallelogram = \" + str(area_polygon(1,1)))\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    elif n%2==0:\n        return div_sum(n//2)\n    else:\n        return div_sum(n//2)+div_sum(n//2)\nn=int(input())\nif div_sum(n)==True:\n    print(n, \" is a perfect square.\")\nelse:\n    print(n, \" is not a perfect square.\")"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Time complexity: O(n)\n    \n    div_sum_total = 0\n    for i in range(1, n):\n        if n%i==0:\n            div_sum_total += i\n    return div_sum_total == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,n+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==1:\n        return False\n    elif n==0:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        return div_sum(n//2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0:\n        return(n/2)\n    else:\n        return (n * (n+1)/2)\ndef prime(n):\n    '''\n    Return the number of prime numbers less than or equal to n.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return 0\n        return 1\ndef is_prime(n):\n    '''\n    Return True if n is prime and False otherwise.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i*i <= n:\n        if n%i == 0:\n            return False\n        i += 2\n    return True\ndef main():\n    n = int(input())\n    while (n % 2 == 0):\n        n = int(input())\n    if n < 2:\n        print(\"Your number is a prime number!\")\n    else:\n        if is_prime(n) == True:\n            print(f\"Your number {n} is a prime number!\")\n        else:\n            print(f\"Your number {n} is not a prime number!\")\n    for i in range(2, 10**5):\n        if (i % div_sum(i) == 0):\n            print(i)\nmain("
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    elif n % 2 == 0:\n        return True\n    elif n % 2 == 1:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    elif n % 2 == 1:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \ndef is_prime(n): \n    '''\n    Return True if the number n is prime, else return False.\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    i = 5\n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0:\n        return False\n    return math.sqrt(n) % 2 == 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0: \n        print('Please enter a positive integer') \n        return False \n    if n == 0: \n        return True\n    if n == 1: \n        return False\n    \n    x = n % 10 \n    y = n // 10 \n    if x == y: \n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    while n:\n        if n % 2 == 0:\n            divs.append(n//2)\n            n = n//2\n        else:\n            n = n // 2\n    if len(divs) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    sum = 0\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                return True\n            else:\n                return False\n        i += 1\n    return False\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = 0\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            char_position += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Iterate over the string:\n    # Count the number of the character in a position.\n    # Count the position of the character.\n    # Return the count.\n    def count_char_position(str1):\n        count = 0\n        pos = 0\n        for i in range(len(str1)):\n            count += 1\n            if str1[i] == str1[pos]:\n                count += 1\n            pos += 1\n        return count\n    # Return count.\n    return count_char_position(str1)\n    \ndef main():\n    '''\n    Write a function called count_char_position that will take a string and return the number of characters and positions where the character occurs in the string as a tuple. \n    For example, count_char_position(\"AaBbCcA\") should return (4,2) which is the number of A's, B's, C's, and A's.\n    '''\n    str1 = input(\"Enter a string: \")\n    print(count_char_position(str1))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Your code here\n    result = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            result += 1\n    return result\n    \ndef is_vowel(word):\n    '''\n    A word is considered a vowel if it contains the letter uppercase or lowercase vowel.\n    '''\n    # Your code here\n    if len(word) == 1:\n        return True\n    else:\n        for c in word:\n            if c.isupper():\n                if c.lower() in alphabet:\n                    return True\n            if c.islower():\n                if c.upper() in alphabet:\n                    return True\n        return False\n    \ndef find_vowels(word):\n    '''\n    A word is considered a vowel if it contains the letter uppercase or lowercase vowel.\n    '''\n    # Your code here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for c in word:\n        if c.isupper():\n            result.append(c.lower())\n        if c.islower():\n            result.append(c.upper())\n    return set(result)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    # String input\n    str_input = str1.lower()\n    # Set of alphabet characters\n    alph_chars = set(list(alphabet.lower()))\n    # Set of alphabet characters in lower case\n    alph_chars_lower = set(list(alphabet.lower()))\n    # Set of letters\n    letters = set(list(string.ascii_lowercase))\n    # Set of all the chars in string\n    letters = set(list(string.ascii_lowercase))\n    # Iterate over string\n    for char in str_input:\n        # If char is in alphabet\n        if char in alph_chars:\n            # Count how many times char appears in alphabet\n            count += alph_chars.count(char)\n        # If char is in lower case\n        elif char in alph_chars_lower:\n            # Count how many times char appears in lower case\n            count += alph_chars_lower.count(char)\n        # If char is in letters\n        elif char in letters:\n            # Count how many times char appears in letters\n            count += letters.count(char)\n    # Return the count\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for char in str1:\n        if(char.isalpha()):\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char in alphabet:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    res = 0\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            res+=1\n        elif str1[i].isupper():\n            res+=1-str1[i].lower()\n        elif str1[i].islower():\n            res+=1-str1[i].lower()\n        elif str1[i].isdigit():\n            res+=1-str1[i]\n    return res\n        \nstr1 = input(\"Enter the string : \")\nprint(\"Count of characters :\", count_char_position(str1))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Base case:\n    if len(str1) == 0:\n        return 0\n    \n    # A string is given with at least 2 digits and does not contain duplicate characters\n    elif len(str1) < 2:\n        return len(str1)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    characters = list(str1.lower()) \n    char_pos = {} \n    for i in characters: \n        if i in char_pos: \n            char_pos[i] += 1 \n        else: \n            char_pos[i] = 1 \n    return len(char_pos) \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in A:\n        if i % 2 == 0:\n            pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in range(0, len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i]^A[j] == 0:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A) \n    # iterate over the list and check if its even\n    count = 0\n    for i in range(n-1):\n        if A[i] == A[i+1]:\n            count += 1\n    return count \n    \ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    n = len(A)\n    # iterate over the list and check if its odd\n    count = 0\n    for i in range(n-1):\n        if A[i] == A[i+1]:\n            count += 1\n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Set the base case\n    if len(A) == 1:\n        return 1\n    # If there's a pair, return both the pairs.\n    if A[0] & A[1] == A[0] & A[1] == A[1]:\n        return 2\n    # Otherwise, pair all the odd elements.\n    return find_even_pair(A[1::2]) + find_even_pair(A[::2])\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A) - 1):\n        if A[i] & 1 == 0:\n            even_count += 1\n        else:\n            pass\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_number = 0\n    for i in range(len(A)):\n        if A[i] % 2 == 0:\n            even_number += 1\n    return even_number\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # set xor_list = {1, 2, 3, 4, 5}\n    # set result = {}\n    xor_list = set(A)\n    # for i in A:\n    #     for j in A:\n    #         if i ^ j == 0:\n    #             xor_list.remove(i)\n    #             xor_list.remove(j)\n    #             break\n    #     else:\n    #         result[i] = result.get(i, 0) + 1\n    #         result[j] = result.get(j, 0) + 1\n    # return result\n    return xor_list.intersection(set(range(2, len(A))) - {0})\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n=len(A)\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if A[i]&A[j]==0:\n                count+=1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    count = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if i!= j and A[i] & A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n > (2**31)-1: \n        return\n    else: \n        power = 0\n        while 2**power <= n: \n            power += 1\n        return 2**power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    def next_power_of_2(n):\n        if n == 1:\n            return 2\n        n = n//2\n        return n if (n & (n-1)) == 0 else next_power_of_2(n<<1)\n    return next_power_of_2(n)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return n\n    else:\n        return 2**(n - 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    if n % 2 == 0:\n        return n // 2\n    elif n % 2 == 1:\n        return n // 2 + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n == 0: \n        return 0\n    else: \n        return min(next_power_of_2(n // 2), n ** 0.5) \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else:\n        return n * next_power_of_2(n-1) \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    i = 2\n    while i*i <= n:\n        if n%i == 0:\n            return i\n        i+=1\n    return None\n    \ndef next_power_of_3(n):\n    '''\n    Write a python function to find the smallest power of 3 greater than or equal to n.\n    '''\n    \n    i = 3\n    while i*i <= n:\n        if n%i == 0:\n            return i\n        i+=1\n    return None\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n > 1:\n        return n * next_power_of_2(n - 1)\n    else:\n        return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n >= 1:\n        if n & 1 == 0:\n            return n\n        n >>= 1\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = 0\n    while n >= 1:\n        if n % 2 == 0:\n            n = n / 2\n            l += 1\n        else:\n            n = n * 3 + 1\n            l += 1\n    return l\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #count the number of occurences of the given number in the given list\n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    result = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            result+=1\n    return result\na=[1,1,2,3,4,5,6,7,8,9]\nx=2\nprint(frequency(a,x)"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n    \n    \ndef partition(a,low,high): \n    i = (low-1)         # index of smaller element \n    pivot = a[high]          # pivot \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = list(a)\n    a = set(a)\n    count = 0\n    for i in a:\n        count += a.count(i)\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            n = n+1\n    return n\n    \n    \ndef kmeans(a, k):\n    '''\n    Write a function to find the k-means algorithm.\n    '''\n    #pass #write your code here\n    \n    #pass #write your code here\n    \n    pass #write your code here\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num=0\n    for i in a:\n        if i==x:\n            num+=1\n    return num\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i+m]) + sum(list1[i+m:i+n])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum = 0\n    for i in range(m, n):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # note, this is a python function, not a method in python\n    if m < 1 or n < 1:\n        return 0\n    \n    sum = 0\n    \n    for i in range(m - 1, n - 1):\n        sum += list1[i]\n        \n    return sum\n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    result = 0\n    \n    for x in range(m, n+1):\n        result += list1[x]\n    \n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s=0\n    for i in range(m, n+1):\n        s = s + list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    '''\n    Given a list of numbers and a number m and a number n, write a function that returns the sum of all the even numbers in the list.\n    '''\n    #Write your code here\n    sum_list = 0\n    for i in list1:\n        if i%2 == 0:\n            sum_list += i\n    return sum_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m,n):\n        s = s + list1[i]\n    return s\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = int(math.sqrt(5*a**2+2))\n    print(sides)\n    if sides == 0:\n        return 0\n    if sides % 2 == 0:\n        a = sides // 2\n    else:\n        a = (sides - 1) // 2 + 1\n    \n    print(\"a = \", a)\n    return a*4 + (4 * a - 1) + (sides + 2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    if a % 2 == 0:\n        a = (a//2) - 1\n        print(a)\n    else:\n        a = (a - 1) // 2 + 1\n        print(a)\n    return a*6 + (2 * a + 1) + (a*a) + (a*a - 1)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    if a % 2 == 0:\n        a = (a//2) - 1\n        print(a)\n    else:\n        a = (a - 1) // 2 + 1\n        print(a)\n    return a*6 + (2 * a + 1) + (a*a) + (a*a - 1) + (2*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 4 * math.sqrt(3)\n    print(\"The perimeter of the pentagon is\", perimeter)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(4*math.pi*a*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # We can determine the area of a regular pentagon if we can make a square of side 1.\n    # For example, a regular pentagon with sides = 5 would make a square.\n    #  a = 2\n    #  side1 = 1\n    #  side2 = 3\n    #  side3 = 4\n    #  side4 = 5\n    #  side5 = 6\n    side1 = math.sqrt(a / 3)\n    side2 = math.sqrt(a / 3)\n    side3 = math.sqrt(a / 3)\n    side4 = math.sqrt(a / 3)\n    side5 = math.sqrt(a / 3)\n    if side1 > side2 and side1 > side3 and side1 > side4 and side1 > side5:\n        return side1 * 4\n    elif side2 > side1 and side2 > side3 and side2 > side4 and side2 > side5:\n        return side2 * 4\n    elif side3 > side1 and side3 > side2 and side3 > side4 and side3 > side5:\n        return side3 * 4\n    elif side4 > side1 and side4 > side2 and side4 > side3 and side4 > side5:\n        return side4 * 4\n    elif side5 > side1 and side5 > side2 and side5 > side3 and side5 > side4:\n        return side5 * 4\n    else:\n        return 0\n    return 0\ndef quadrant(a):\n    '''\n    Write a function to find the quadrant of a square triangle from the side length of its base.\n    '''\n    # We can determine the quadrant of a triangle if the sum of its base and side lengths\n    # is equal to 1.\n    # For example, a triangle with base = 3 and side length = 5 would be a triangle with base = 3 and\n    # side length = 2.\n    #  a = 3\n    #  base = 3\n    #  side1 = 4\n    #  side2 = 5\n    #  side3 = 6\n    base = math.sqrt(a / 2)\n    if base == 0:\n        return 0\n    else:\n        return math.ceil(math.log(base, 2))\n    return 0\ndef triangle(a):\n    '''\n    Write a function to find the triangle area using the length of the base, side and height of a triangle.\n    '''\n    # We can determine the area of a triangle if the sides are equal to its base, side 1 and side 2.\n    # For example, a triangle with base = 6 and side 1 = 5 would be a triangle with base = 6 and side 1 = 2.\n    #  a = 6\n    #  base = 6\n    #  side1 = 5\n    #  side2 = 6\n    base = math.sqrt(a / 3)\n    side1 = base\n    side2 = base\n    side3 = base\n    if side1 == side2:\n        side4 = base\n    else:\n        side4 = base\n    side5 = base\n    if side3 == side4:\n        side6 = base\n    else:\n        side6 = base\n    if side1 == side2 or side3 == side4:\n        return 0\n    else:\n        return side1 * side2 * side3\n    return 0\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return 2 * (a**3) + (a**3) * 2\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return 2 * (a**2) + (a**2) * 2\ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a rhombus from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return 2 * a + (a**2)\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return a * a * math.pi\ndef area_rectangle(a):\n    '''\n    Write a function to find the area of a rectangle from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return 2 * a * math.pi\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return math.pi * (a**2)\ndef area_trapezoid(a,b):\n    '''\n    Write a function to find the area of a trapezoid from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return a * (b/2) + b * (b/2)\ndef area_pentagon_triangle(a,b):\n    '''\n    Write a function to find the area of a parallelogram from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return a * (b/2) + b * (b/2)\ndef area_rhombus_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return 2 * (a/2) * (b/2)\ndef area_rhombus_circle(a,b):\n    '''\n    Write a function to find the area of a rhombus from the length of its sides.\n    '''\n    # base case\n    if a == 0:\n        return 0\n    # recursion\n    return 2 * (a/2) * math.p"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    length=0\n    for x in range(0,a+1):\n        for y in range(0,a+1):\n            length=length+(math.sin(math.radians(math.pi/6)*(x+y)))*(x+y)\n    return math.sqrt(length)\ndef area_rectangle(a,b):\n    '''\n    Write a function that returns the area of the rectangle defined by the lengths of its sides.\n    '''\n    area=math.sqrt(math.pow(b[0]-a[0],2)+math.pow(b[1]-a[1],2))\n    return area\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle defined by the length of its sides.\n    '''\n    length=0\n    for x in range(0,a+1):\n        for y in range(0,a+1):\n            length=length+(math.sin(math.radians(math.pi/4)*(x+y)))*(x+y)\n    return math.sqrt(length)\ndef area_circle(r):\n    '''\n    Write a function that returns the area of a circle defined by its radius.\n    '''\n    pi=math.pi\n    area=math.pi*math.pow(r,2)\n    return area\ndef perimeter_circle(r):\n    '''\n    Write a function that returns the perimeter of a circle defined by its radius.\n    '''\n    pi=math.pi\n    return 2*math.pi*r\ndef area_parallelogram(l,b):\n    '''\n    Write a function that returns the area of a parallelogram defined by its base and height.\n    '''\n    area=math.sqrt(math.pow(b[0]-l[0],2)+math.pow(b[1]-l[1],2))\n    return area\ndef perimeter_parallelogram(l,b):\n    '''\n    Write a function that returns the perimeter of a parallelogram defined by its base and height.\n    '''\n    area=math.sqrt(math.pow(b[0]-l[0],2)+math.pow(b[1]-l[1],2))\n    return area\ndef area_rectangular(a,b):\n    '''\n    Write a function that returns the area of a rectangular defined by its length and width.\n    '''\n    area=math.sqrt(math.pow(b[0]-a[0],2)+math.pow(b[1]-a[1],2))\n    return area\ndef perimeter_rectangular(a,b):\n    '''\n    Write a function that returns the perimeter of a rectangular defined by its length and width.\n    '''\n    area=math.sqrt(math.pow(b[0]-a[0],2)+math.pow(b[1]-a[1],2))\n    return area\ndef area_triangle(s):\n    '''\n    Write a function that returns the area of a triangle defined by its base and height.\n    '''\n    area=math.pow(s[0]-s[1],2)+math.pow(s[2]-s[3],2)\n    return area\ndef perimeter_triangle(s):\n    '''\n    Write a function that returns the perimeter of a triangle defined by its base and height.\n    '''\n    area=math.sqrt(math.pow(s[0]-s[1],2)+math.pow(s[2]-s[3],2))\n    return area\ndef area_trapezoid(s):\n    '''\n    Write a function that returns the area of a trapezoid defined by its base and height.\n    '''\n    area=math.pow(s[0]-s[1],2)+math.pow(s[2]-s[3],2)+math.pow(s[0]-s[2],2)+math.pow(s[1]-s[0],2)\n    return area\ndef perimeter_trapezoid(s):\n    '''\n    Write a function that returns the perimeter of a trapezoid defined by its base and height.\n    '''\n    area=math.sqrt(math.pow(s[0]-s[1],2)+math.pow(s[2]-s[3],2)+math.pow(s[0]-s[2],2)+math.pow(s[1]-s[0],2))\n    return area\ndef area_rhombus(a,b):\n    '''\n    Write a function that returns the area of a rhombus defined by its base and its radius.\n    '''\n    area=math.sqrt(math.pow(b[0]-a[0],2)+math.pow(b[1]-a[1],2))\n    return area\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function that returns the perimeter of a rhombus defined by its base and its radius.\n    '''\n    area=math.sqrt(math.pow(b[0]-a[0],2)+math.pow(b[1]-a[1],2))\n    return area\ndef area_octagon(a,b):\n    '''\n    Write a function that returns the area of an octagon defined by its base and its side length.\n    '''\n    area=math.pow(a[0]-b[0],2)+math.pow(a[1]-b[1],2)\n    return area\ndef perimeter_octagon(a,b):\n    '''\n    Write a function that returns the perimeter of an octagon defined by its base and its side length.\n    '''\n    area=math.sqrt(math.pow(b[0]-a[0],2)+math.pow(b[1]-a[1],2))\n    return area\ndef area_hexagon(a,b):\n    '''\n    Write a function that returns the area of a hexagon defined by its base and its side length.\n    '''\n    area=math.pow(a[0]-b[0],2)+math.pow(a[1]-b[1],2)\n    return area\ndef perimeter_hexagon(a,b):\n    '''\n    Write a function that returns the perimeter of a hexagon defined by its base and its side length.\n    '''\n    area=math.sqrt(math.pow(b[0]-a[0],2)+math.pow(b[1]-a[1],2))\n    return area\ndef area_dodecahedron(a,b):\n    '''\n    Write a function that returns the area of a dodecahedron defined by its base and its length.\n    '''\n    area=math.pow(a[0]-b[0],2)+math.pow(a[1]-b[1],2)+math.pow(a[2]-b[2],2)\n    return area\ndef perimeter_dodecahedron(a,b):\n    '''\n    Write a function that returns the perimeter of a dodecahedron defined by its base and its length.\n    '''\n    area=math.sqrt(math.pow(b[0]-a[0],2)+math.pow(b[1]-a[1],2)+math.pow(b[2]-a[2],2))\n    return area\ndef area_quadrilateral(a,b):\n    '''\n    Write a function that returns the area of a quadrilateral defined by its base and its length.\n    '''\n    area=math.pow(a[0]-b[0],2)+math.pow(a[1]-b[1],2)+math.pow(a[2]-b[2],2)\n    return area\ndef perimeter_quadrilateral(a,b):\n    '''\n    Write a function that returns the perimeter of a quadrilateral defined by its base and its length.\n    '''\n    area=math.sqrt(math.pow(b[0]-a[0],2)+math.pow(b[1]-a[1],2)+math.pow(b[2]-a[2],2))\n    return area\ndef area_tetrahedron(a,b):\n    '''\n    Write a function that returns the area of a tetrahedron defined by it"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4*a*math.sqrt(3)/2\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the area of the square using Heron's formula\n    return ((2 * a) * math.sqrt(3) * (4 + math.sqrt(5) - 4)) / 2\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return round((3.14*a*a)*4, 2)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    st = s.replace('std','std')\n    st_list = st.split()\n    temp = []\n    for i in st_list:\n        for j in i:\n            if j in temp:\n                temp.remove(j)\n    occur_num = len(temp)\n    return occur_num\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in s:\n        if i=='std':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    num = 0\n    for i in s:\n        if i =='s':\n            num += 1\n        else:\n            pass\n    return num\n        \nif __name__ == \"__main__\":\n    s = \"psssssssssss\"\n    print(count_occurance(s))"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    result = {}\n    lst = []\n    for char in s:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    for key, value in result.items():\n        lst.append(value)\n    return lst.count(1)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n    occ = 0\n    for i in range(len(s)):\n        if s[i] =='s' or s[i] == 't' or s[i] == 'a' or s[i] == 'd' or s[i] == 'n' or s[i] == 'r' or s[i] == 'e':\n            occ += 1\n    return occ\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = 0\n    i = 0\n    while i < len(s):\n        if s[i] =='std':\n            occurance += 1\n        i += 1\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurances = 0\n    s_len = len(s)\n    for i in range(s_len):\n        if s[i] == \"o\":\n            occurances += 1\n    return occurances\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #hashmap to keep track of occurences\n    hashmap = {}\n    #loop through string\n    for i in s:\n        #if there is an occurance\n        if i in hashmap:\n            #increment occurrence value\n            hashmap[i] += 1\n        else:\n            #add it to the hashtable\n            hashmap[i] = 1\n    #loop through the hashmap\n    for i in hashmap:\n        #if there is an occurance\n        if hashmap[i] > 1:\n            #increment the occurance value\n            hashmap[i] += 1\n    #return the number of occurences\n    return hashmap.values()\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_tuple = test_tuple[0]\n    for element in test_tuple:\n        if isinstance(element, (str, int, float, bool)):\n            continue\n        else:\n            raise TypeError('Wrong type has been passed.')\n    if first_tuple == tuple:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    result = True\n    for element in test_tuple:\n        if not isinstance(element, (int, float, bool)):\n            result = False\n            break\n    return result\n    "
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    i = 0\n    while i < len(test_tuple):\n        if type(test_tuple[i])!= type(test_tuple[i-1]):\n            raise TypeError(\"The data type of elements in the tuple must be same.\")\n        i += 1\n    return True\n    \ndef check_length(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same length.\n    '''\n    if len(test_tuple) == 0:\n        raise ValueError(\"The number of elements in the tuple must be greater than 0.\")\n    elif len(test_tuple) == 1:\n        raise ValueError(\"The number of elements in the tuple must be greater than 1.\")\n    elif len(test_tuple)!= len(test_tuple[0]):\n        raise ValueError(\"The number of elements in the tuple must be equal to the number of the elements in the tuple.\"\n                \"Make sure to pass the test in the form of tuples of length 2.\")\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tup_list = list(test_tuple)\n    new_tup_list = []\n    \n    for i in range(len(tup_list)):\n        if isinstance(tup_list[i], str) or isinstance(tup_list[i], bool):\n            new_tup_list.append(tup_list[i])\n        else:\n            new_tup_list.append(tup_list[i])\n    \n    return new_tup_list == tup_list\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = tuple(test_tuple)\n    #A tuple is immutable so we can't add data types\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def type_check(element_list):\n        for el in element_list:\n            try:\n                type(el)\n            except TypeError:\n                return False\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = ('int','float','str','list','dict','set','None','bool')\n    return all([type(el)==type(test_tuple[i]) for i in range(len(test_tuple))])\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    size = len(test_tuple[0])\n    #size = len(test_tuple)\n    for elem in test_tuple:\n        for elem in test_tuple:\n            assert elem == elem[size-1], f'Test tuple {test_tuple} doesn\\'t have correct data type'\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i, (str, int, float, bool, list, tuple)):\n            raise TypeError('All elements of the tuple must be of data type')\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    def check_type_check(tuple):\n        '''\n        tuple - tuple to check\n        '''\n        for i in tuple:\n            check_type(i)\n            \n    def check_type_check_var(tuple,check_type):\n        '''\n        tuple - tuple to check\n        check_type - function for checking if tuple has same data type or not\n        '''\n        for i in tuple:\n            if check_type(i):\n                return True\n        return False\n    check_type(test_tuple)\n    check_type_check(test_tuple)\n    return check_type_check_var(test_tuple,check_type)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if (n == 1): return arr[0] == x\n    if n <= 1: return True\n    for i in range(n):\n        if arr[i] == x:\n            if (arr[i-1] == x):\n                arr[i] = x\n            else:\n                arr[i-1] = x\n        else:\n            if (arr[i-1] == x):\n                arr[i] = x\n            else:\n                arr[i-1] = x\n    return arr[0] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If the array is empty, return True\n    if n == 0:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    min_index = 0\n    max_index = n-1\n    majority = 0\n    for i in range(n):\n        if arr[i] == x:\n            if arr[i] > majority:\n                min_index = i\n                majority = arr[i]\n        else:\n            if arr[i] < majority:\n                max_index = i\n                majority = arr[i]\n    return arr[min_index]!= x\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    i = 0\n    for j in range(0, n):\n        if arr[j]!= x:\n            i += 1\n    \n    if i/n == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if n==0:\n        return True\n    \n    if x==arr[0]:\n        return arr[0]==arr[n//2]\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    elif n % 2 == 0:\n        return is_majority(arr[0:n/2], n/2, x)\n    else:\n        return is_majority(arr[n/2:], n/2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Base Case\n    if n == 0:\n        return False\n    \n    # If it's 0, it's not a majority\n    if arr[0] == x:\n        return True\n    \n    # If the element is 0, it doesn't occur anywhere\n    if arr[0] == 0:\n        return False\n    \n    # Find the position where it's 1\n    pos = 0\n    for i in range(1, n):\n        if arr[i] == 1:\n            pos = i\n            break\n        \n    # Iterate through every other element\n    for j in range(n):\n        if arr[j] == 0:\n            continue\n        \n        # If the new element is the majority\n        if arr[j] == x:\n            return True\n        \n        # If the new element isn't the majority,\n        # then it's the majority element\n        if arr[j]!= x and arr[j] == arr[pos]:\n            return True\n            \n    return False\n    \n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Write your code here.\n    m = []\n    for i in range(n):\n        if arr[i] in m:\n            m.remove(arr[i])\n        else:\n            m.append(arr[i])\n    if len(m) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Write your code here.\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # A function that checks if a given element occurs more than n/2 times.\n    def check_for_majority(arr, n, x):\n        # Loop through the array and check the position of the element.\n        for i in range(len(arr)):\n            # If the position of the element is the position of the largest element, the position of the element is set to True.\n            if (i == 0 or arr[i] > arr[i - 1]):\n                return True\n        # If the position of the element is the position of the smallest element, the position of the element is set to True.\n        if (i == len(arr) - 1 or arr[i] < arr[i + 1]):\n            return True\n        # If both the positions of the elements are true, return false.\n        return False\n"
    }
]